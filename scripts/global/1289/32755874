<p>I would like to insert an array of chars into a table-valued-parameter with odbc in MS SQL Server 2012. But my code insert only one row in TVP. If I use this code for a real table in a database, it works fine.</p>  <p>Does any one know, how should I change my code for inserting an array into a tvp?</p>  <p>here is my code:</p>  <pre><code>#include &lt;windows.h&gt;  #include &lt;stdlib.h&gt;  #include &lt;stdio.h&gt;  #include&lt;tchar.h&gt;  #include &lt;sql.h&gt;  #include &lt;sqlext.h&gt;  #include&lt;sqltypes.h&gt;   //#include&lt;odbcss.h&gt; //#include&lt;odbcinst.h&gt;  #include&lt;exception&gt; #include&lt;iostream&gt; #include&lt;stdio.h&gt;  #include &lt;conio.h&gt;  #include "Debug\sqlncli.h";  int main()     {         SQLHENV henv=SQL_NULL_HENV;         SQLHDBC hdbc=SQL_NULL_HDBC;         SQLHSTMT hstmt=SQL_NULL_HSTMT;         RETCODE rc;            SQLTCHAR Statement[] = _T("SET NOCOUNT ON DECLARE @T1 as TableTVP INSERT INTO @T1(Wert,Name) VALUES (?,?)  select count(*) FROM @T1 " ) ;         //This insert command works fine. It can insert the values in a  real table in database         //SQLTCHAR Statement[] = _T("INSERT INTO information1(Firstname,Lastname) VALUES (?,?)" ) ;         SQLWCHAR dsn[30] = L"mssqltest"; //Name DNS        SQLWCHAR user[10] = L"di_test";        SQLWCHAR pass[10] = L"di_test";         SQLCHAR retValFName[256];        SQLCHAR retValLName[256];        SQLINTEGER cbLName,cbFName;        SQLLEN cName=0;         SQLCHAR *TVPTableName=(SQLCHAR *) "Person";          #define PARAM_ARRAY_SIZE 10         #define STRING_SIZE 20         SQLCHAR     Arrayname[PARAM_ARRAY_SIZE][STRING_SIZE] = {"a2","a2","c","d","e","f","g","h","i","j1"};          SQLLEN cbTVPTableNAme,cbArraycode[10],cbArrayname[10];          rc = SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &amp;henv);            rc= SQLSetEnvAttr(henv,SQL_ATTR_ODBC_VERSION,(void *) SQL_OV_ODBC3,0);         rc = SQLAllocHandle(SQL_HANDLE_DBC, henv, &amp;hdbc);          rc = SQLConnectW(hdbc, (SQLWCHAR *)dsn, SQL_NTS, (SQLWCHAR *) user, SQL_NTS, (SQLWCHAR *) pass, SQL_NTS); // from this line rc=-1         rc = SQLAllocHandle(SQL_HANDLE_STMT,hdbc,&amp;hstmt);         rc = SQLSetStmtAttr (hstmt, SQL_ATTR_PARAM_BIND_TYPE, SQL_PARAM_BIND_BY_COLUMN, 0);         rc=SQLSetStmtAttr(hstmt,SQL_ATTR_PARAMSET_SIZE,(SQLPOINTER) 10,0);         rc=SQLBindParameter(hstmt,1,SQL_PARAM_INPUT, SQL_C_CHAR, SQL_VARCHAR, STRING_SIZE, 0, Arrayname, STRING_SIZE, 0);         rc=SQLBindParameter(hstmt,2,SQL_PARAM_INPUT, SQL_C_CHAR, SQL_VARCHAR, STRING_SIZE, 0, Arrayname, STRING_SIZE, 0);         rc = SQLPrepare(hstmt, (SQLTCHAR *)Statement, SQL_NTS);         rc = SQLExecute(hstmt);      // TRYODBC(hstmt, SQL_HANDLE_STMT, rc);         if(rc==SQL_SUCCESS)        {            SQLSMALLINT sNumResults;            SQLNumResultCols(hstmt,&amp;sNumResults);            SQLBindCol(hstmt,                         1,                         SQL_C_TCHAR,                         (SQLPOINTER) retValFName,                         100,                        0);        while(true)             {               rc=SQLFetch(hstmt);                if(rc==SQL_SUCCESS || rc==SQL_SUCCESS_WITH_INFO)               {                   SQLGetData(hstmt,1,SQL_C_CHAR,retValFName,256, &amp;cbLName);                  std::cout &lt;&lt; retValFName &lt;&lt;"   "&lt;&lt; std::endl;                  system("pause");               }               else               {                   break;               }             }        }        return 0;     } </code></pre>