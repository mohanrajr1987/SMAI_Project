<p>I am using SimpleJdbcCall to execute a stored procedure that accepts an array of strings. Its seems if I want to rely on Spring extensions for jdbc support to create an Array, I am getting a ClassCastException. I do have a workaround, but, I would like Spring to create the ArrayDescriptor for me, and deal with unwrap of connection to OracleConnection, as it says in the <a href="http://docs.spring.io/spring-data/jdbc/docs/1.2.0.BUILD-SNAPSHOT/reference/html/orcl.datatypes.html#d0e2387" rel="nofollow">documentation</a>. Below is the code which is not working and also the workaround I am using. StackTrace with the non-working code is also shown below. I am wondering if am I missing something or this is just a bug with Spring Data project.</p>  <p><strong>Not working code</strong></p>  <pre><code>private SimpleJdbcCall relationsProc;    @PostConstruct   public void init() {     relationsProc = new SimpleJdbcCall(getDataSource())       .withCatalogName("blah")       .withSchemaName("blah")       .withProcedureName("blah")       .withoutProcedureColumnMetaDataAccess()       .declareParameters(         new SqlParameter("ID", Types.NUMERIC),         new SqlParameter("RELATIONSHIPS", OracleTypes.ARRAY, "STRING_ARRAY")       );   }    public void saveAll(Long id, List &lt; String &gt; relations) throws SQLException {      SqlArrayValue &lt; String &gt; relationList = new SqlArrayValue &lt; &gt; (relations.toArray(new String[relations.size()]));      relationsProc.execute(new MapSqlParameterSource()       .addValue("ID", id)       .addValue("RELATIONSHIPS", relationList));    } </code></pre>  <p><strong>Stack Trace</strong></p>  <pre><code>java.lang.ClassCastException: com.zaxxer.hikari.proxy.HikariConnectionProxy cannot be cast to oracle.jdbc.OracleConnection     at oracle.sql.TypeDescriptor.setPhysicalConnectionOf(TypeDescriptor.java:844)     at oracle.sql.TypeDescriptor.&lt;init&gt;(TypeDescriptor.java:577)     at oracle.sql.ArrayDescriptor.&lt;init&gt;(ArrayDescriptor.java:248)     at org.springframework.data.jdbc.support.oracle.SqlArrayValue.createTypeValue(SqlArrayValue.java:90)     at org.springframework.jdbc.core.support.AbstractSqlTypeValue.setTypeValue(AbstractSqlTypeValue.java:59)     at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:318)     at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:235)     at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:150)     at org.springframework.jdbc.core.CallableStatementCreatorFactory$CallableStatementCreatorImpl.createCallableStatement(CallableStatementCreatorFactory.java:213)     at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:1115)     at org.springframework.jdbc.core.JdbcTemplate.call(JdbcTemplate.java:1173)     at org.springframework.jdbc.core.simple.AbstractJdbcCall.executeCallInternal(AbstractJdbcCall.java:388)     at org.springframework.jdbc.core.simple.AbstractJdbcCall.doExecute(AbstractJdbcCall.java:348)     at org.springframework.jdbc.core.simple.SimpleJdbcCall.execute(SimpleJdbcCall.java:190) </code></pre>  <p><strong>Workaround</strong></p>  <pre><code>private SimpleJdbcCall relationsProc;    @PostConstruct   public void init() {     relationsProc = new SimpleJdbcCall(getDataSource())       .withCatalogName("blah")       .withSchemaName("blah")       .withProcedureName("blah")                 .declareParameters(         new SqlParameter("ID", Types.NUMERIC),         new SqlParameter("RELATIONSHIPS", Types.ARRAY, "STRING_ARRAY")        );   }    public void saveAll(Long id, List &lt; String &gt; relations) throws SQLException {     final Connection con = DataSourceUtils.getConnection(getDataSource());     OracleConnection oracleConnection = con.unwrap(OracleConnection.class);     java.sql.Array rels = oracleConnection.createARRAY("STRING_ARRAY",       relations.toArray(new String[relations.size()]));      relationsProc.execute(new MapSqlParameterSource()       .addValue("ID", provObjectId)       .addValue("RELATIONSHIPS", rels));     } </code></pre>