<p>I have a</p>  <pre><code>package Test; use Moose; has 'attr' =&gt; ( is =&gt; 'rw', isa =&gt; 'Str' ); </code></pre>  <p>Inside a method I'd like to apply a <code>s/pattern/string/g</code> on the attribute. For reasons documented in Moose (basically to properly support polymorphism) I do not want to access the <code>$self-&gt;{attr}</code> directly, so a simple:</p>  <pre><code>$self-&gt;{attr} =~ s/pattern/string/g; </code></pre>  <p>is not an option. How can I do this efficiently in speed and little but clear code with Moose?</p>  <p>Options I came up with are:</p>  <p>1) Use a temporary variable, and the usual getter/setter method:</p>  <pre><code>my $dummy = $self-&gt;attr; $dummy =~ s/pattern/string/g; $self-&gt;attr($dummy); </code></pre>  <p>2) Using the attr getter/setter on the left hand side:</p>  <pre><code>$self-&gt;attr($dummy) =~ s/pattern/string/g; </code></pre>  <p>But this obviously throws an error</p>  <blockquote>   <p>Can't modify non-lvalue subroutine call at Test.pm   line 58,  line 29</p> </blockquote>  <p>Is there a way to use Moose accessors as <a href="http://perldoc.perl.org/perlsub.html#Lvalue-subroutines" rel="nofollow">lvalue subs</a>?</p>  <p>3) Use the <a href="http://search.cpan.org/~ether/Moose/lib/Moose/Meta/Attribute/Native/Trait/String.pm" rel="nofollow">String traits</a></p>  <p>Redefine the attribute:</p>  <pre><code>has 'attr' =&gt; ( is =&gt; 'rw', isa =&gt; 'Str', traits  =&gt; ['String'],                 handles =&gt; { replace_attr =&gt; 'replace'}  ); </code></pre>  <p>Then in the method use:</p>  <pre><code>$self-&gt;replace_attr('pattern', 'string'); </code></pre>  <p>However the docs explicitly say, there's no way to specify the <code>/g</code> flag.</p>  <p>Any elegant, simple, somewhat efficient method available out of the box?</p>