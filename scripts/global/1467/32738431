<p>I have an ApplicationController that runs over my dynamic controller This Application controller has an array that are my App-bar actions.</p>  <p>Well, every dynamic controller i have inherit the ability to change this array, once its on $scope.headers.actions;</p>  <p>What I'm trying to do right now is to create a directive where i'll be able to add angular attributes (ng-class, ng-if, etc...) dynamically where this attributes definition will come from $scope.headers.actions[...].attributes</p>  <p>Now my directive is:</p>  <pre><code>app.directive('ngDynamicAttrs', ['$compile',function ($compile) {     return {         scope: { list: '=ngDynamicAttrs' },         //priority: 1001,         //terminal: true,         link: function (scope, elem, attrs) {             for (attr in scope.list) {                 attrs.$set(attr, scope.list[attr]);                 //elem[0].setAttribute(attr, scope.list[attr]);                 //elem.attr(attr, scope.list[attr]);             }             $compile(elem)(scope);          }     }; }]); </code></pre>  <p>My html is:</p>  <pre><code>&lt;ul class="actions"&gt;     &lt;li class="action" ng-repeat="action in header.actions.pool" ng-click="action.events.click()" ng-dynamic-attrs="action.attributes" id="{{action.id}}"&gt;         &lt;i ng-if="action.icon" class="icon fa {{action.icon}}"&gt;&lt;/i&gt;         {{action.name}}     &lt;/li&gt; &lt;/ul&gt; </code></pre>  <p>And my action object is :</p>  <pre><code>$scope.header = {     actions: {         pool: [],         clear: function (actions) {             $scope.header.actions.pool = [];         },         set: function (actions) {             $scope.header.actions.clear();              for (i in actions) {                 $scope.header.actions.add(actions[i].id, actions[i].name, actions[i].icon, actions[i].events, actions[i].items, actions[i].attributes)             }         },         add: function (id, name, icon, events, items, attributes) {             $scope.header.actions.pool.push($scope.header.actions.create(id, name, icon, events, items, attributes));         },         remove: function (id) {             for (i in $scope.header.actions.pool) {                 if ($scope.header.actions.pool[i].id == id) delete $scope.header.actions.pool[i];             }         },         create: function (id, name, icon, events, items, attributes) {             return { id: id, name: name, icon: icon, events: events, items: items, attributes: attributes };         }     } } </code></pre>  <p>Note: I'm not even considering the events right here because it's not a big deal once i can easily use normal dom events. </p>