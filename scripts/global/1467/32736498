<p>(Final) EDIT : Ok, so I'm a total dumbass. My identation was made so that all my methods after the <code>__init__</code> were actually inside my <code>__init__</code>. It's a syntax mistake.</p>  <p>I'd like to know if I can initialize a variable with a method (member of the class). Basically, it looks like this :</p>  <pre><code>class Tile:     def __init__(self, x, y, tile_type):         self._x = x         self._y = y         self._tile_type = tile_type         self._color = my_method()  (further in class)     def my_method(self):         #my definition </code></pre>  <p>Currently, it gives me an error :</p>  <pre><code>UnboundLocalError: local variable 'my_method' referenced before assignment </code></pre>  <p>The problem is that I declare a 2d array with a comprehension list like this</p>  <pre><code>[[Tile(i,j,0) for i in range(Y_SIZE)] for j in range(X_SIZE)] </code></pre>  <p>So I'd like to avoid a second nested loop to put the return value of <code>my_method()</code> in the class attribute <code>_color</code>, if it's possible.</p>  <p>Thanks !</p>  <p>EDIT : as asked, I will be more specific : I want to assign the value returned by <code>my_method()</code> to <code>_color</code>. And sorry about the indentation, <code>my_method(self)</code> is actually in the <code>Tile</code> class.</p>  <p>For those who actually want the full code of the class :</p>  <pre><code>class Tile:     def __init__(self, x, y, tile_type):         self._x = x         self._y = y         self._tile_type = tile_type         self._color = self.set_color_variation()          def _get_x(self):             return self._x          def _set_x(self, x):             self._x = x          x = property(_get_x, _set_x)          def _get_y(self):             return self._y          def _set_y(self, y):             self._y = y          y = property(_get_y, _set_y)          def _get_color(self):             return self._color          def _set_color(self, color):             self._color = color          color = property(_get_color, _set_color)          def _get_tile_type(self):             return self._tile_type          def _set_tile_type(self,tile_type):             self._tile_type = tile_type          tile_type = property(_get_tile_type, _set_tile_type)          def set_color_variation(self):             _color = make_color(TILE_COLOR[_tile_type], TILE_COLOR_VARIATION[_tile_type]) </code></pre>  <p>And the error message it currently gives me :</p>  <pre><code>AttributeError: 'Tile' object has no attribute 'set_color_variation' </code></pre>  <p>If I write</p>  <pre><code>self._color = set_color_variation() </code></pre>  <p>It gives me :</p>  <pre><code>UnboundLocalError: local variable 'set_color_variation' referenced before assignment </code></pre>