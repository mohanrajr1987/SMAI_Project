<p>I'm working on an app that makes a POST to a REST API that returns a URI in its response. I then am to make a GET request to that URI and it is supposed to return HTML content in the response body. However, the GET request returns 'No Content' in its HTTP Status Code.</p>  <p>What's strange is, I have a small console app I built for testing purposes that if I plug the URI into it (allows me to test the GET without making the POST), the status good is 200 - OK and I receive the HTML content in the body. So it seems it is related to something I'm doing in my POST request. Here is my code (sensitive info has been redacted):</p>  <pre><code>    private PersonReportResults POSTReportRequest(PersonReportRequest reportRequest) {     var personReportResults = new PersonReportResults();     HttpWebRequest request = (HttpWebRequest)WebRequest.Create("https://xxxxxxxxx.com/api/v1/personReport/reportResults");      var xDoc = new XmlDocument();     var serializedXml = Serialize(reportRequest);     xDoc.LoadXml(serializedXml);      var bytes = Encoding.ASCII.GetBytes(xDoc.OuterXml);     request.ContentType = "application/xml; encoding='utf-8'";     request.ContentLength = bytes.Length;     request.Method = "POST";     request.KeepAlive = true;     request.Credentials = new NetworkCredential(ConfigurationManager.AppSettings["XXXXXUserId"], ConfigurationManager.AppSettings["XXXXXPassword"]);     request.ClientCertificates.Add(GetClientCertificate());      Stream requestStream = request.GetRequestStream();      requestStream.Write(bytes, 0, bytes.Length);     requestStream.Close();      using (var response = (HttpWebResponse)request.GetResponse())     {         if (response.StatusCode == HttpStatusCode.OK)         {             var responseStream = response.GetResponseStream();             using (MemoryStream ms = new MemoryStream())             {                 var count = 0;                 do                 {                     byte[] buf = new byte[1024];                     count = responseStream.Read(buf, 0, 1024);                     ms.Write(buf, 0, count);                 } while (responseStream.CanRead &amp;&amp; count &gt; 0);                 ms.Position = 0;                  // now attempt to desrialize from the memory stream                 var serializer = new XmlSerializer(typeof(PersonReportResults));                 personReportResults = ((PersonReportResults)serializer.Deserialize(ms));             }             response.Close();         }         request.Abort();     }     return personReportResults; }  /// &lt;summary&gt; /// Makes a HTTP GET request for the report HTML /// &lt;/summary&gt; /// &lt;param name="uri"&gt;The URI.&lt;/param&gt; /// &lt;returns&gt;string&lt;/returns&gt; private static string GETResults(string uri) {     var responseHTML = string.Empty;     HttpWebRequest request = (HttpWebRequest)WebRequest.Create(uri + "?reportType=html");      //request.ContentType = "application/xml; encoding='utf-8'";     request.Method = "GET";     request.Credentials = new NetworkCredential(ConfigurationManager.AppSettings["XXXXXUserId"], ConfigurationManager.AppSettings["XXXXXPassword"]);     request.ClientCertificates.Add(GetClientCertificate());      using (var response = (HttpWebResponse)request.GetResponse())     {         if (response.StatusCode == HttpStatusCode.OK)         {             try             {                 using (var stream = response.GetResponseStream())                 {                     if (stream != null)                     {                         using (MemoryStream ms = new MemoryStream())                         {                             var count = 0;                             do                             {                                 byte[] buf = new byte[1024];                                 count = stream.Read(buf, 0, 1024);                                 ms.Write(buf, 0, count);                             } while (stream.CanRead &amp;&amp; count &gt; 0);                             ms.Position = 0;                              var sr = new StreamReader(ms);                             responseHTML = sr.ReadToEnd();                         }                         //var reader = new StreamReader(stream, Encoding.UTF8);                         //responseHTML = reader.ReadToEnd();                     }                 }             }             catch (Exception e)             {             }             request.Abort();         }         else if (response.StatusCode == HttpStatusCode.Accepted)         {             response.Close();              var tryCount = 1;             while (tryCount &lt; 5)             {                 using (var retryResponse = (HttpWebResponse)request.GetResponse())                 {                     if (retryResponse.StatusCode == HttpStatusCode.OK)                     {                         using (var stream = retryResponse.GetResponseStream())                         {                             if (stream != null)                             {                                 var reader = new StreamReader(stream, Encoding.UTF8);                                 responseHTML = reader.ReadToEnd();                             }                         }                     }                 }                 tryCount++;                 Thread.Sleep(10000);             }         }     }     return responseHTML; } </code></pre>