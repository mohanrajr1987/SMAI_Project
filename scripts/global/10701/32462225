<p>i think i'm missing something about how HttpWebRequest works via streaming when uploading large files. basicly, i found out that i receive timeout exception when sending large files to the server, so a post suggested to do it via Async and handle the timeout myself.</p>  <p>The thing is, that after debugging, i found out that "GetRequestStreamAsync" method, and writing to it does nothing at the server side, the server is called only when doing GetResponseAsync</p>  <p>so my question is:</p>  <p><strong>- code marked as //1 - it writes the file to the request stream, but i don't see that the memory is increasing, or the server even getting any request - where does the streaming go to?</strong></p>  <p>This is basicly my code:</p>  <pre><code>            HttpWebRequest request = RESTUtils.InitializeRequest(...);              request.AllowWriteStreamBuffering = false;             request.ContentLength = i_InputStream.Length;             request.Timeout = 5000;                using (Stream requestStream = request.GetRequestStreamWithTimeout())             {                if (requestStream != null) //1                {                   // We will write the stream to the request                   byte[] buffer = new byte[UPLOAD_FILE_BUFFER_SIZE];                   int read = i_InputStream.Read(buffer, 0, buffer.Length);                    while (read &gt; 0)                   {                      requestStream.Write(buffer, 0, read);                                               read = i_InputStream.Read(buffer, 0, buffer.Length);                   }                }             }              using (var response = request.GetResponseWithTimeout(-1))             {                using (var responseStream = response.GetResponseStream())                {                 }             }  public static class WebRequestExtensions    {       public static Stream GetRequestStreamWithTimeout(           this WebRequest request,           int? millisecondsTimeout = null)       {          return AsyncToSyncWithTimeout(              request.BeginGetRequestStream,              request.EndGetRequestStream,              millisecondsTimeout ?? request.Timeout);       }        public static WebResponse GetResponseWithTimeout(           this HttpWebRequest request,           int? millisecondsTimeout = null)       {          return AsyncToSyncWithTimeout(              request.BeginGetResponse,              request.EndGetResponse,              millisecondsTimeout ?? request.Timeout);       }        private static T AsyncToSyncWithTimeout&lt;T&gt;(           Func&lt;AsyncCallback, object, IAsyncResult&gt; begin,           Func&lt;IAsyncResult, T&gt; end,           int millisecondsTimeout)       {          var iar = begin(null, null);          if (!iar.AsyncWaitHandle.WaitOne(millisecondsTimeout))          {             var ex = new TimeoutException();             throw new WebException(ex.Message, ex, WebExceptionStatus.Timeout, null);          }          return end(iar);       }    } </code></pre>  <p>Thanks!</p>  <p>== Edit 9/9/15 ==</p>  <p>Something even weirder happens, i'm attaching breakpoint right after GetResponseAsync, then i see that the server receives the call. after that, i'm closing the process of the client -> the server is uploading the file successfully.</p>  <p>this happens also if i do "Abort".  anyone knows why?</p>