<p>I'm trying to create an extremely simple program that consists of two .c files - main.c and foo.c.</p>  <p>The objective is to link both these files, and pass a parameter into the main.c method, which then calls method foo() in the foo.c file.</p>  <p>The code for main.c is:</p>  <pre><code>#include &lt;stdio.h&gt; #include "foo.h"  int main(int argc, char *argv[]) {      foo(argv[1]);       return 0; } </code></pre>  <p>and foo.c is:</p>  <pre><code>#include &lt;stdio.h&gt; #include "foo.h"  void foo(char *input[]) {      printf("Welcome, %s\n", input); } </code></pre>  <p>I also have a header file, foo.h which has just the line:     void foo(char *input[]);</p>  <p>When I try to build and run the files using</p>  <pre><code>gcc -o main main.c foo.c foo.h </code></pre>  <p>I get the error </p>  <pre class="lang-none prettyprint-override"><code>main.c: In function ‘main’: main.c:6:2: warning: passing argument 1 of ‘foo’ from incompatible       pointer type [enabled by default] foo(argv[1]); ^ In file included from main.c:2:0: foo.h:1:6: note: expected ‘char **’ but argument is of type ‘char *’ void foo(char *input[]); </code></pre>  <p>Where have I gone wrong in my code? I've been trying to play around with it for a while. Note that when I run ./main "Test", it prints Welcome, Test i.e. the correct expected output, but the warning errors bother me. Also, how can I make a simple makefile to compile these 3 files, rather than typing gcc everytime? I tried to do the following: </p>  <pre class="lang-none prettyprint-override"><code>CFLAGS=-Wall -g   all: main foo  clean:     rm -f main foo </code></pre>  <p>but typing "make" doesn't compile anything.</p>  <p>Thanks.</p>