<p><strong>TL;DR;</strong> I am trying to train off of an existing data set (<code>Seq[Words]</code> with corresponding categories), and use that trained dataset to filter another dataset using category similarity.</p>  <p>I am trying to train a corpus of data and then use it for text analysis*. I've tried using <code>NaiveBayes</code>, but that seems to only work with the data you have, so it's predict algorithm will always return something, even if it doesn't match anything. </p>  <p>So, I am now trying to use TFIDF and passing that output into a RowMatrix and computing the similarities. But, I'm not sure how to run my query (one word for now). Here's what I've tried:</p>  <pre><code>val rddOfTfidfFromCorpus : RDD[Vector] val query = "word" val tf = new HashingTF().transform(List(query)) val tfIDF = new IDF().fit(sc.makeRDD(List(tf))).transform(tf)   val mergedVectors = rddOfTfidfFromCorpus.union(sc.makeRDD(List(tfIDF))) val similarities = new RowMatrix(mergedVectors).columnSimilarities(1.0) </code></pre>  <p>Here is where I'm stuck (if I've even done everything right until here). I tried filtering the <code>similarities</code> <code>i</code> and <code>j</code> down to the parts of my query's TFIDF and end up with an empty collection. </p>  <p>The gist is that I want to train on a corpus of data and find what category it falls in. The above code is at least trying to get it down to one category and checking if I can get a prediction from that at least....</p>  <p>*Note that this is a toy example, so I only need something that works well enough *I am using Spark 1.4.0</p>