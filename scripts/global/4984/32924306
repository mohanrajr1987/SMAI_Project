<p>I asked this kind of question yesterday, but after I worked on the problem couple of hours, I learned that, the question I asked yesterday wan't the problem I was having. So, I decided to ask again.</p>  <p>User Model:</p>  <pre><code>  EMAIL_REGEX = /\A^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$\z/   # Matches -&gt; he_llo@worl.d.com  hel.l-o@wor-ld.museum  h1ello@123.com   # Non-Matches -&gt; hello@worl_d.com  he&amp;amp;llo@world.co1  .hello@wor#.co.uk   # http://regexlib.com/REDetails.aspx?regexp_id=333    ALL_LETTERS_AND_SINGLE_SPACES = /\A^([a-zA-Z]+\s?)*$\z/   ALL_LETTERS_AND_NUMBERS = /\A^[a-zA-Z0-9]+$\z/   WEBSITE = /\A(www.)?([a-zA-Z0-9]+).[a-zA-Z0-9]*.[a-z]{3}.?([a-z]+)?\z/    # First Name   validates :first_name,             presence: {message: 'First name cannot be blank'},             length: {maximum: 50, message: 'First name cannot be longer than 50 characters'},             format: {with: ALL_LETTERS_AND_SINGLE_SPACES, message: 'First name should contain only letters and single space'}    # Last Name   validates :last_name,             presence: {message: 'Last name cannot be blank'},             length: {maximum: 50, message: 'Last name cannot be longer than 50 characters'},             format: {with: ALL_LETTERS_AND_SINGLE_SPACES, message: 'Last name should contain only letters and single space'}    # Email   validates :email,             presence: {message: 'Email cannot be blank'},             length: {maximum: 100, message: 'Email cannot be longer than 100 characters'},             format: {with: EMAIL_REGEX, message: 'Email is not valid'},             uniqueness: {case_sensitive: false, message: 'This email is already registered'},             confirmation: {message: 'Email address does not match'}    # Password   validates :password_digest,             presence: {message: 'Password cannot be blank'},             length: {minimum: 8, message: 'Password length should be minimum 8 characters'}    # Username   validates :username,             presence: {message: 'Username cannot be blank'},             length: {minimum: 3, message: 'Email cannot be shorter than 3 characters'},             format: {with: ALL_LETTERS_AND_NUMBERS, message: 'Username should contain only letters and numbers'},             uniqueness: {case_sensitive: false, message: 'This username is already in use'}    # Website   validates :website,             format: {with: WEBSITE, message: 'Invalid email format. Make sure you don\'t have http:// in your link'}    # Information   validates :information,             length: {maximum: 100, message: 'Information cannot be longer than 99 characters'} </code></pre>  <p>As you can see, I have validation for some of the columns in my database. What I need is to validate first_name, last_name, email, and password when user is signing up, and validate first_name, last_name, and also website, information, username when user editing his/her profile settings.</p>  <p>But rails is automatically validating all the columns either you have username field in your signup page or not. It just validates everything. But I don't want rails to validate username, or website when signing up.</p>  <p>Profile Controller:</p>  <pre><code>  def update     # Find an existing object using form parameters     @profile = User.find_by_id(current_user.id)     # Update the object     if @profile.update_attributes!(settings_profile_params)       # If save succeeds, redirect to itself       redirect_to request.referrer     else       # If save fails, redisplay the form so user can fix the problems       render('edit')     end   end    private # user_params is not an action, that is why it is private.   def settings_profile_params     params.require(:user).permit(:first_name, :last_name, :username, :school, :program, :website, :information)   end  </code></pre>  <p>Users Controller:</p>  <pre><code>  def create     # Instantiate a new object using form parameters     @user = User.new(user_params)     # Save the object     if @user.save       # If save succeeds, redirect to the dashboard action       cookies[:authorization_token] = @user.authorization_token       redirect_to dashboard_path     else       # If save fails, redisplay the form so user can fix the problems       render('new')     end   end    private # user_params is not an action, that is why it is private.   def user_params     params.require(:user).permit(:first_name, :last_name, :email, :email_confirmation, :password)   end </code></pre>  <p>I thought rails would validate the ones that are passed in strong parameters only but it's not. I believe it supposed to be very easy to solve but I can't.</p>  <p>Thank you.</p>