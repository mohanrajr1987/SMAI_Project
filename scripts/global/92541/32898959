<p>jsFiddle: <a href="https://jsfiddle.net/ghstahl/09tL1ku7/" rel="nofollow">https://jsfiddle.net/ghstahl/09tL1ku7/</a></p>  <pre><code>&lt;script src="https://cdn.rawgit.com/download/polymer-cdn/1.1.3/lib/webcomponentsjs/webcomponents-lite.js"&gt;&lt;/script&gt; &lt;link rel="import" href="https://cdn.rawgit.com/download/polymer-cdn/1.1.3/lib/polymer/polymer.html"&gt; &lt;link rel="import" href="https://cdn.rawgit.com/download/polymer-cdn/1.1.3/lib/paper-styles/paper-styles.html"&gt; &lt;link rel="import" href="https://cdn.rawgit.com/download/polymer-cdn/1.1.3/lib/paper-styles/color.html"&gt; &lt;link rel="import" href="https://cdn.rawgit.com/download/polymer-cdn/1.1.3/lib/paper-styles/default-theme.html"&gt; &lt;link rel="import" href="https://cdn.rawgit.com/download/polymer-cdn/1.1.3/lib/paper-ripple/paper-ripple.html"&gt; &lt;link rel="import" href="https://cdn.rawgit.com/download/polymer-cdn/1.1.3/lib/paper-behaviors/paper-inky-focus-behavior.html"&gt; &lt;link rel="import" href="https://cdn.rawgit.com/download/polymer-cdn/1.1.3/lib/iron-checked-element-behavior/iron-checked-element-behavior.html"&gt; &lt;link rel="import" href="https://cdn.rawgit.com/download/polymer-cdn/1.1.3/lib/paper-toggle-button/paper-toggle-button.html"&gt; &lt;link rel="import" href="https://cdn.rawgit.com/download/polymer-cdn/1.1.3/lib/paper-input/paper-input.html"&gt; &lt;link rel="import" href="https://cdn.rawgit.com/download/polymer-cdn/1.1.3/lib/paper-button/paper-button.html"&gt; &lt;link rel="import" href="https://cdn.rawgit.com/download/polymer-cdn/1.1.3/lib/iron-flex-layout/iron-flex-layout.html"&gt; &lt;link rel="import" href="https://cdn.rawgit.com/download/polymer-cdn/1.1.3/lib/iron-flex-layout/classes/iron-flex-layout.html"&gt; &lt;link rel="import" href="https://cdn.rawgit.com/download/polymer-cdn/1.1.3/lib/iron-flex-layout/classes/iron-shadow-flex-layout.html"&gt; &lt;link rel="import" href="https://cdn.rawgit.com/download/polymer-cdn/1.1.3/lib/paper-dropdown-menu/paper-dropdown-menu.html"&gt; &lt;link rel="import" href="https://cdn.rawgit.com/download/polymer-cdn/1.1.3/lib/paper-menu-button/paper-menu-button.html"&gt; &lt;link rel="import" href="https://cdn.rawgit.com/download/polymer-cdn/1.1.3/lib/iron-a11y-keys-behavior/iron-a11y-keys-behavior.html"&gt; &lt;link rel="import" href="https://cdn.rawgit.com/download/polymer-cdn/1.1.3/lib/iron-behaviors/iron-control-state.html"&gt; &lt;link rel="import" href="https://cdn.rawgit.com/download/polymer-cdn/1.1.3/lib/iron-behaviors/iron-button-state.html"&gt; &lt;link rel="import" href="https://cdn.rawgit.com/download/polymer-cdn/1.1.3/lib/iron-icons/iron-icons.html"&gt; &lt;link rel="import" href="https://cdn.rawgit.com/download/polymer-cdn/1.1.3/lib/iron-icon/iron-icon.html"&gt; &lt;link rel="import" href="https://cdn.rawgit.com/download/polymer-cdn/1.1.3/lib/iron-selector/iron-selector.html"&gt; &lt;link rel="import" href="https://cdn.rawgit.com/download/polymer-cdn/1.1.3/lib/paper-item/paper-item.html"&gt; &lt;link rel="import" href="https://cdn.rawgit.com/download/polymer-cdn/1.1.3/lib/paper-behaviors/paper-button-behavior.html"&gt; &lt;dom-module id="pingo-toggle"&gt; &lt;style&gt;     .line {         margin-bottom: 40px;     }     .line span {         margin-left: 24px;     } &lt;/style&gt; &lt;template&gt;     &lt;div class="line"&gt;         &lt;paper-toggle-button checked={{singleToggle.data}}&gt;&lt;/paper-toggle-button&gt; &lt;span&gt;{{singleToggle.label}}&lt;/span&gt; &lt;span&gt;{{computeBooleanToString(singleToggle.data)}}&lt;/span&gt;      &lt;/div&gt;     &lt;template is="dom-repeat" items="{{_workingArray}}"&gt;         &lt;div class="line"&gt;             &lt;paper-toggle-button checked={{item.value.data.checked}}&gt;&lt;/paper-toggle-button&gt;  &lt;span&gt;{{item.value.label}}&lt;/span&gt; &lt;span&gt;{{item.value.id}}&lt;/span&gt; &lt;span&gt;{{computeBooleanToString(item.value.data.checked)}}&lt;/span&gt;          &lt;/div&gt;     &lt;/template&gt; &lt;/template&gt; &lt;script&gt;     (function() {         Polymer({             is: 'pingo-toggle',             properties: {                  singleToggle: {                     type: Object,                     notify: true                 },                  toggleItems: {                     type: Object,                     notify: true,                     observer: '_toggleItemsChanged'                 },             },             _toggleItemsChanged: function(newValue, oldValue) {                 if (this.toggleItems !== undefined) {                     this._workingArray = this._toArray(this.toggleItems);                 }             },             _toArray: function(obj) {                 var index = 0;                 var thisElement = this;                 this._arrayData = Object.keys(obj).map(function(key) {                     var id = "item_" + index;                     ++index;                     var val = {};                     val.data = obj[key];                     val.label = "hi:" + key;                     val.data = obj[key];                     val.id = id;                     val.original = obj.key;                     return {                         name: key,                         value: val                     };                 });                 return this._arrayData;             },             computeBooleanToString: function(a) {                 return a === true ? 'true' : 'false';             }         });     })(); &lt;/script&gt; &lt;/dom-module&gt; &lt;dom-module id="pingo-toggle-container"&gt; &lt;style&gt; &lt;/style&gt; &lt;template&gt;     &lt;pingo-toggle single-toggle={{_singleToggle}} toggle-items={{_toggleItems}}&gt;&lt;/pingo-toggle&gt;     &lt;paper-item&gt;{{_singleToggleHello}}&lt;/paper-item&gt;     &lt;paper-item&gt;{{_toggleItemsHello}}&lt;/paper-item&gt; &lt;/template&gt; &lt;script&gt;     (function() {         Polymer({             is: 'pingo-toggle-container',             properties: {                 _singleToggleHello: {                     type: String,                     notify: true,                     value: "Well Hello There"                 },                 _toggleItemsHello: {                     type: String,                     notify: true,                     value: "Hi there from many"                 },                  _singleToggle: {                     type: Object,                     notify: true,                     value: {                         label: "Single Toggle",                         data: true                     }                 },                 _toggleItems: {                     type: Object,                     notify: true,                     value: {                         a: {                             label: "a Toggle2",                             checked: true                         },                         b: {                             label: "a Toggle2",                             checked: false                         }                     }                 }             },              // Observers             /////////////////////////////////////////////////////////             observers: ['_toggleItemsChanged(_toggleItems.*)', '_singleToggleChanged(_singleToggle.*)'],             // Smart check. only fire if we change state.             _singleToggleChanged: function(changeRecord) {                 var thisElement = this;                  this._singleToggleHello = this.computeBooleanToString(this._singleToggle.data) + Math.random() + changeRecord.path;                 console.log("_singleToggle in pingo-toggle-container changed:" + changeRecord.path);              },             _toggleItemsChanged: function(changeRecord) {                 var thisElement = this;                  this._toggleItemsHello = "_workingToggleItemsChanged fired" + Math.random() + changeRecord.path;                  console.log("pingo-toggle-container notWorking:" + changeRecord.path);              },             computeBooleanToString: function(a) {                 return a === true ? 'true' : 'false';             },              ready: function(e) {              }         });     })(); &lt;/script&gt; &lt;/dom-module&gt; &lt;pingo-toggle-container&gt;&lt;/pingo-toggle-container&gt; </code></pre>  <p><strong>Scenario</strong>: Parent element owns a data object.  Parent element passes portion of the data object to children elements which bind to values in the object.  When children change the value, because they have an object reference, the data is changed directly in the parent owned master data object.</p>  <p><strong>Problem</strong>: '_toggleItemsChanged(_toggleItems.*)' fires once, the very first time, but never fires again even though data in _toggleItems has changed.  </p>  <p><strong>Proof</strong>: In the pingo-toggle-container element;</p>  <ul> <li>Put a breakpoint at _singleToggleChanged and _toggleItemsChanged.    <ul> <li>Both fire at startup.  </li> </ul></li> <li>Toggle both 'hi:a' and 'hi:b' back and forth.  <ul> <li>nothing fires.  </li> </ul></li> <li>So I set 'hi:a' and 'hi:b' both to True.  </li> <li>'Single Toggle' does fire, so I toggle that and my breakpoint hits.  <ul> <li>evaluate this._toggleItems;  </li> <li>Hmm, you both are set to true.  You can toggle 'hi:a' and 'hi:b' to false and redo the test.  Now they are both set to false.</li> </ul></li> </ul>  <p>Why you not fire observers: ['_toggleItemsChanged(_toggleItems.<em>)', '_singleToggleChanged(_singleToggle.</em>)'], for data change?</p>  <p><strong>Expected</strong>: I want the _toggleItemsChanged function to get called with the changeRecord.path of _toggleItems.a.checked or _toggleItems.a.checked repectively.</p>