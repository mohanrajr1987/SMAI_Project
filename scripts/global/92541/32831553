<p>I'm trying something like the following:</p>  <pre><code>&lt;dom-module id="my-app"&gt;     &lt;template&gt; &lt;div&gt;{{data.name}}&lt;/div&gt; &lt;/template&gt;      &lt;script&gt;         import data from 'data';          class MyApp {             constructor() { ... }             beforeRegister() {                 this.is = 'my-app';                 this.properties = {                     data: {                         type: Object,                         value: function () {                             return data;                         },                     }                 };             }              ready() {}             ...         }       &lt;/script&gt; &lt;/dom-module&gt; </code></pre>  <p>So, I have here ES6 too, so I constructed the following gulp task:</p>  <pre><code>gulp.task('js', function () {     return gulp.src(['app/**/*.{js,html}'])         .pipe($.sourcemaps.init())         .pipe($.if('*.html', $.crisper())) // Extract JS from .html files         .pipe($.if('*.js', $.babel()))         .pipe($.sourcemaps.write('.'))         .pipe(gulp.dest('.tmp/'))         .pipe(gulp.dest('dist/'));     }); }); </code></pre>  <p>This works as long as I don't have the <code>import data from 'data'</code> line. Now I get the following error in the browser:</p>  <pre><code>require is not defined </code></pre>  <p>So, I decided to add <code>browserify</code> to the process just below <code>babel</code></p>  <pre><code> .pipe($.if('*.js', $.browserify({ debug: true, extensions: ['.js', '.html'] }))) </code></pre>  <p>Now I get a transpile error </p>  <pre><code>ParseError: 'import' and 'export' may appear only with 'sourceType: module' </code></pre>  <p>I think I'm close, but I'm now stuck here unfortunately. To reproduce this I've created a github repo <a href="https://github.com/ajs2/polymer-es6" rel="nofollow">here</a></p>  <p>You can check it out and do:</p>  <pre><code>$&gt; cd polymer-es6 $&gt; npm install $&gt; bower install $&gt; gulp js </code></pre>  <p>A bonus question: Why is the <code>constructor</code> not called ? It seems that <code>ready</code> is called instead.</p>