<p>I seem to be doing something wrong with the way I use include guards. Most of the time my structuring works, but in certain circumstances like the code below, I have problems. What might be causing the problem is me using the header file "all.h" as a big collection of other header files (like "another.h" and any other header files needed).</p>  <p>The code will compile if code in the file "another.cpp" is commented out, so somewhere along the line there is a duplication of the function "sleepFunc" (I think), since I get the following error:</p>  <blockquote>   <p>Apple Mach-O Linker (Id) Error</p>      <p>ld: duplicate symbol sleepFunc(unsigned int) in </p>      <p>/Users/(project path)/.../Another.o and </p>      <p>/Users/(project path)/.../main.o for architecture x86_64</p>      <p>Command /Developer/usr/bin/clang++ failed with exit code 1</p> </blockquote>  <p>I am using Xcode version 4.2 on Mac OS X Snow Leopard (10.6.8).</p>  <p>During the typing of this post, I discovered the issue, which was me including the header "all.h" in "another.cpp". But if I do the thing that I had to do (#include  in "another.h", use header "another.h" in file another.cpp), it makes me unhappy, since this means all files that need other files start getting messy. I would like to have just one header file for each new file I make.</p>  <p>(And another question, why did the compiler duplicate the "sleepFunc", even with the include guards???)</p>  <p>Is there a better, more clean way to structure the include guards and/or includes?</p>  <hr>  <h2>all.h</h2>  <pre><code>#ifndef IncluderTest_all_h #define IncluderTest_all_h  #include &lt;iostream&gt; #include &lt;stdlib.h&gt; #include "Another.h"  void sleepFunc(unsigned milliseconds);  #ifdef _WIN32 #include &lt;windows.h&gt; void sleepFunc(unsigned milliseconds) {     Sleep(milliseconds); } #else #include &lt;unistd.h&gt; void sleepFunc(unsigned milliseconds) {     usleep(milliseconds * 1000); // takes microseconds } #endif #endif </code></pre>  <h2>main.cpp</h2>  <pre><code>#include "all.h"  int main (int argc, const char * argv[]) {     sleepFunc(500);     printf("Hello world!");     return 0; } </code></pre>  <h2>another.h</h2>  <pre><code>#ifndef IncluderTest_another_h #define IncluderTest_another_h  class Another{ public:     void spunky(); };  #endif </code></pre>  <h2>another.cpp</h2>  <pre><code>#include "all.h"  void Another::spunky(){     printf("Very spunky"); } </code></pre>