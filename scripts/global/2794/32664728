<p>I'm having a weird problem with the output of a JTextArea in <a href="http://i.imgur.com/Dqz3aJM.png" rel="nofollow">this image</a> . What my program is meant to do is accept an input string through the GUI, save it as an image, and set each pixel that's value is > 0 to '<em>'. This works completely find in the console, but when it's printed to the JTextArea, the spaces seem to be half the size of the '</em>'. I know this problem isn't an actual problem with my code, but just rather some built in thing with JTextAreas. I will include the code below, but the only line I feel is relevant is right at the end: tA.setText(output);</p>  <pre><code>import java.awt.*; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.awt.font.FontRenderContext; import java.awt.font.GlyphVector; import java.awt.font.TextLayout; import java.awt.geom.Rectangle2D; import java.awt.image.BufferedImage; import java.awt.image.Raster; import javax.swing.*;  public class Project4 extends JPanel implements ActionListener {  public static Project4 p = new Project4(); public static JTextField input = new JTextField("Java 2D"); public static JTextArea tA = new JTextArea();  public static void main(String[] args) {     JFrame frame = new JFrame("Project 4");     frame.setSize(600, 400);     frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);      JPanel panel = new JPanel();     panel.add(p, BorderLayout.CENTER);     input.setColumns(40);     panel.add(input);            JButton print = new JButton("Print");     print.addActionListener(p);     panel.add(print);     panel.add(tA);     frame.add(panel);     frame.setVisible(true); }  @Override public void actionPerformed(ActionEvent e) {     Font f = new Font("Times New Roman", Font.BOLD, 20);     FontRenderContext frc = new FontRenderContext(null, false, false);     GlyphVector gv = f.createGlyphVector(frc, input.getText());     Rectangle2D bounds = gv.getLogicalBounds();     TextLayout tL = new TextLayout(input.getText(), f, frc);     float ascent = tL.getAscent();     BufferedImage b = new BufferedImage((int) bounds.getWidth(),          (int) bounds.getHeight(), BufferedImage.TYPE_BYTE_BINARY);     Graphics2D g2 = b.createGraphics();     g2.drawGlyphVector(gv, 0, ascent);     g2.setPaint(Color.BLACK);     g2.drawString(input.getText(), input.getAlignmentX(), input.getAlignmentY());      String output = "", line = "";     int spaceCount = 0;     Raster r = b.getRaster();     int[] i = new int[1];     for (int y = 0; y &lt; (int) bounds.getHeight() - 1; y++) {         for (int x = 0; x &lt; (int) bounds.getWidth() - 1; x++) {             r.getPixel(x, y, i);             int pixel = i[0];             if (pixel &gt; 0) {                 line += "*";             } else {                 line += " ";                 spaceCount++;             }         }          if (spaceCount != line.length())             output += line + "\n";         spaceCount = 0;         line = "";     }      System.out.print(output);     tA.setText(output); }  } </code></pre>  <p>** Thanks for the edit, Fast Snail!</p>