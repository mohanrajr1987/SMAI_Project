<p>I have some rather straightforward code that fetches some data from a url using <code>XMLHttpRequest</code>... all the usual stuff, nothing too unusual, e.g.:</p>  <pre><code>var request = new XMLHttpRequest(); request.onload = function() { ... }; request.open("GET", url, true); request.timeout = 5000; request.send(); </code></pre>  <p>When this code is run within a standard browser context, all is fine.  However, when invoked via phantomjs (called on a server running a node.js app), the very same code only seems to work when <code>request.open()</code> is specified as being synchronous (using <code>false</code> as the final arg).  So in phantomjs it works fine when using sync, but not async.  When run async, the request never completes successfully.</p>  <p>Is there an obvious reason why this would be the case, in the absence of some further example code?  Perhaps I've broken some rule of phantomjs and/or XMLHttpRequest.  </p>  <p>Till now I've just accepted it, and ensured that the request is sync in phantomjs and async in the browser.  But now I'm trying to set up timeouts correctly, since I suspect that timeout isn't working as it should in sync mode, but may do in async mode, so I'm trying to make the call async even in phantomjs.  Even then, I have my concerns that timeout doesn't work as you might expect within phantomjs.</p>  <p>Any help specifically on the sync/async issue would be great, and even better would be some advice on getting timeout to work within phantomjs.</p>