<p>I'm trying to track down a memory-related crash in my game. The exact error, if I happen to catch it while attached to a debugger varies. One such error message is:</p>  <ul> <li><code>Message from debugger: Terminated due to memory issue</code>. </li> </ul>  <p>No crash report is generated. Here's a screenshot from the XCode7 <code>Memory Report</code> as I play on my <code>iPhone6</code>; after about 10 minutes it will crash, as I enter into the ~600MB+ range:</p>  <p><a href="http://i.stack.imgur.com/HXtdI.png" rel="nofollow"><img src="http://i.stack.imgur.com/HXtdI.png" alt="enter image description here"></a></p>  <p>Running generational analysis with Instruments I've found that playing through battles appears to create unbounded persistent memory growth; here you can see what happens as I play through two battles: <a href="http://i.stack.imgur.com/OhCTD.png" rel="nofollow"><img src="http://i.stack.imgur.com/OhCTD.png" alt="enter image description here"></a></p>  <p>What is confusing is that the allocations revealed by the twirl-down are pretty much every single bit of allocated memory in the whole game. Any read of a string from a dictionary, any allocation of an array, appears in this twirl-down. Here's a representitive example from drilling into an <code>NSArray</code> caller-analysis:</p>  <p><a href="http://i.stack.imgur.com/qBnzU.png" rel="nofollow"><img src="http://i.stack.imgur.com/qBnzU.png" alt="enter image description here"></a></p>  <p>At this point, it occurs to me I started this project using <code>cocos2d-iphone v2.1</code> a couple of years ago, and I started an ARC project despite using a pre-ARC library. I'm wondering if I'm just now realizing I configured something horribly, horribly wrong. I set the <code>-fno-objc-arc</code> flag on the <code>cocos2d</code> files:</p>  <p><a href="http://i.stack.imgur.com/rLLax.png" rel="nofollow"><img src="http://i.stack.imgur.com/rLLax.png" alt="enter image description here"></a></p>  <p>Either that, or I must have done something else very very stupid. But I'm at a loss. I've checked some of the usual culprits, for example:</p>  <ul> <li>Put a <code>NSLog</code> in <code>dealloc</code> on my <code>CCScene</code> subclass to make sure scenes were going away</li> <li>Made sure to implement <code>cleanup</code> (to empty cached <code>CCNode</code>s) and call <code>super</code> in my sublcasses</li> <li>Dumped the cocos2d texture cache size, and checked it was not growing unbounded</li> <li>Added low memory warning handlers, doing things like clearing the cocos2d cache</li> </ul>  <p>I've also been pouring over <a href="https://developer.apple.com/library/ios/recipes/Instruments_help_articles/FindingAbandonedMemory/FindingAbandonedMemory.html" rel="nofollow">the Apple instruments documentation</a>, in particular this link explains the steps I took to create the above generational analysis.</p>  <h2>Update</h2>  <hr>  <p>Here's another representative example, this time in tree format. You can see that I have a <code>CCScheduler</code> which called an update function which triggered the UI to draw a sprite. The last time you see my code, before it delves into cocos2d code, is the highlighted function, the code for which I've also pasted below.</p>  <p><a href="http://i.stack.imgur.com/plRYC.png" rel="nofollow"><img src="http://i.stack.imgur.com/plRYC.png" alt="enter image description here"></a></p>  <pre><code>+ (instancetype)spriteAssetSource:(NSString*)assetName {   if(!assetName.length) {     return nil;   }   BOOL hasImageSuffix = [assetName hasSuffix:EXT_IMG];   NSString *frameName = hasImageSuffix ? [assetName substringToIndex:assetName.length-EXT_IMG.length] : assetName;   NSString *hdFrameName = [NSString stringWithFormat:@"%@%@",frameName,EXT_HD];    // First, hit up the sprite sheets...   if([[CCSpriteFrameCache sharedSpriteFrameCache] hasSpriteFrameName:hdFrameName]) {     CCSpriteFrame *frame = [[CCSpriteFrameCache sharedSpriteFrameCache] spriteFrameByName:hdFrameName];     return [[self alloc] initWithSpriteFrame:frame];   }   // No sprite sheet? Try the assets.   else {     NSString *assetFp = hasImageSuffix ? assetName : [NSString stringWithFormat:@"%@%@",assetName,EXT_IMG];     return [[self alloc] initWithFile:assetFp];   } } </code></pre>  <p>What's so weird about this is that the captured memory is just the simple line to check if the file name is in the cocos2d cache:</p>  <pre><code>- (BOOL)hasSpriteFrameName:(NSString*)name {   return [_spriteFrames.allKeys containsObject:name]; } </code></pre>  <p>Yet this simple function shows up all over the place in these traces...</p>  <p>What it <em>feels</em> like is that any locally-scoped variable I create and pass into cocos2d gets its retain count incremented, and thus never deallocates (such as the case with both <code>hdFrameName</code> and other variables above).</p>  <h2>Update 2</h2>  <hr>  <p>While it's no surprise that the <code>CCScheduler</code> sits at the top of the abandoned objects tree, what is surprising is that some of the objects are completely unrelated to cocos2d or UI. For example, in the highlighted row, all I've done is call a function on <code>AMLocalPlayerData</code> that does a <code>[NSDate date]</code>. The entire line is: <code>NSTimeInterval now = [NSDate date].timeIntervalSince1970;</code></p>  <p>It seems absurd that the <code>NSDate</code> object could be retained somehow here, yet that seems to be what Instruments is suggesting...</p>  <p><a href="http://i.stack.imgur.com/dIZYv.png" rel="nofollow"><img src="http://i.stack.imgur.com/dIZYv.png" alt="enter image description here"></a></p>  <h2>Update 3</h2>  <hr>  <p>I tried upgrading my version of cocos2d to <code>2.2</code>, the <a href="https://github.com/cocos2d/cocos2d-iphone-classic" rel="nofollow">last version to exist in the repository</a>. The issue persists.</p>