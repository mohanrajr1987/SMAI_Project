<p>I'm using <code>cocos2d</code> and trying to create a solid-white silhouette of an arbitrary <code>CCSprite</code>. The following code (a category on <code>CCSprite</code>) works perfectly, as long as I have my pixel mode set to <code>kCCTexture2DPixelFormat_RGBA8888</code>. The premise is simple: create a solid white sprite and then mask it with the current sprite.</p>  <pre><code>- (CCSprite*)silhouette {    CCSprite *mask = [CCSprite spriteWithSpriteFrame:self.displayFrame];   CCSprite *color = [CCSprite spriteWithColor:ccWHITE ofSize:mask.contentSize];    CCRenderTexture *rt = [CCRenderTexture renderTextureWithWidth:mask.contentSize.width                                                          height:mask.contentSize.height];   color.position = mask.position = ccp(mask.contentSize.width/2, mask.contentSize.height/2);    [mask setBlendFunc:(ccBlendFunc){GL_ONE, GL_ZERO}];   [color setBlendFunc:(ccBlendFunc){GL_DST_ALPHA, GL_ZERO}];    [rt begin];   [mask visit];   [color visit];   [rt end];    CCSprite *retval = [CCSprite spriteWithTexture:rt.sprite.texture];   retval.flipY = YES;   return retval; } </code></pre>  <p>I want to change my default pixel format to <code>kCCTexture2DPixelFormat_RGBA4444</code>. Doing so immediately reduces the memory usage on my game by 1/3, and this is the only feature that does not look good with the lowered resolution. Instead of yielding a white silhouette, it yields a black one. This is problematic because I cannot subsequently recolor the sprite via <code>silhouette.color = ccBLUE</code> or what have you.</p>  <p>I've been reading everything I can find, and I simply cannot grok why this is not working. I know that, ideally, I'd write a shader to do this for me, but this solution actually looks really nice when it works for my needs.</p>  <p>FWIW... these operations are happening while other animations are happening on the screen. AFAIK there's no cross-talk that can happen, but frankly I'm not as solid on my OpenGL guts as I should be.</p>