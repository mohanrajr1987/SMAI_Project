<p>Lets say I have a single access file (or two files split into a file with data and a frontend file).  I want to make this available to users in a variety of locations.</p>  <p>This question has been asked before, but some answers are old eg</p>  <p><a href="http://stackoverflow.com/search?q=run+ms-access+database+in+cloud">list here</a></p>  <p><a href="http://stackoverflow.com/questions/2879281/hosting-an-access-db/2882623#2882623">SO 2879281 here</a></p>  <p><a href="http://stackoverflow.com/questions/11962689/options-for-cloud-based-ms-access-backend/11979044#11979044">SO 11979044 here</a></p>  <p><a href="http://stackoverflow.com/questions/28422670/split-ms-access-database-and-store-back-end-in-sharepoint/32667061#32667061">SO 32667061 here</a></p>  <p>There seems to be many ways this can be achieved, and I just wanted to ask for opinions to see whether I've missed any options:</p>  <p>the options all have pros and cons.  The most significant differences are in terms of :</p>  <ul> <li>Cost &amp; Time  </li> <li>Need to re-write the access database to be in SQL Server</li> <li>Need to re-write the front end </li> <li>Concurrent use.</li> <li>Scalability of solution and performance.</li> <li>Use SQL Server to store the data.</li> <li>Simplicity!</li> </ul>  <p>Here's the options as I see it.  </p>  <p><strong>1. Create a desktop front end file linked to the sql server data.</strong>  </p>  <p>Each user has their own copy on the PC of the front end file.  You manage your own SQL Server database / instance yourself or use MS Azure or similar web service.  (There is a free version of SQL Server that can be installed and used on a server, or you can us </p>  <p>PROS: You don't need to re-write you front end file.</p>  <p>CONS: You need a SQL Server instance.  You need to migrate your data tables (and you may need to do some work to replicate them in SQL Server, especially if you have data macros, or use special data types (like Yes/No, Multipel select combo boxes and a few others).  There are free tools that do most of the migration and paid for ones that do more.</p>  <p><strong>2. Store a file on dropbox or similar and facilitate sharing</strong> </p>  <p>This works if ONLY one user will ever need to UPDATE the database at a time.</p>  <p>Store the file on dropbox and use a vbscript like that described <a href="http://stackoverflow.com/questions/19328371/can-i-share-an-ms-access-database-application-via-dropbox">here</a> to grab the file from dropbox to the local disk, allow the user to update it, then put it back to dropbox.  (A mechanism is used to stop other users grabbing the file IF another user has grabbed it.).  This approach could be adapted to allow users to grab the file for READ ONLY purposes if another user has grabbed it for updating.</p>  <p>Note that this method minimises the need to re-write the database and can use free online file storage to facilitate sharing</p>  <p>Note that 2 could be modified to Auto update a front end file stored on a users PC as suggested in option 1.</p>  <p>PROS: Cheap! Minimal changes. </p>  <p>CONS: Only one user updating at a time. You need to write fairly complex VB scripts.  You need to manually set up dropbox for each user and it's sync to c drive.</p>  <p><strong>3. Use Access 2010 to create a Web app.</strong>  (The data gets stored in Sharepoint lists, and the forms use macros to respond to the users actions.  Info <a href="https://support.office.com/en-ie/article/Build-an-Access-database-to-share-on-the-Web-cca08e35-8e51-45ce-9269-8942b0deab26#__toc262221095" rel="nofollow">here</a> and video demo <a href="https://www.youtube.com/watch?v=AU4mH0jPntI" rel="nofollow">here</a></p>  <p>CONS: An "old school" way of doing it - Access 2013 is better.</p>  <p><strong>4. Use Access 2013 web apps.</strong> This stores the data in SQL Server and uses new Access features to provides a web GUI (ie Views).  You can also access the same SQL Server data from a desktop access front end (for reporting etc).</p>  <p>CONS: for 3 &amp; 4 </p>  <p>The "forms" that you create do not have as good functionality as a desktop front end as VBA cannot be used - macros are used instead.  But this can be ok in many cases.  </p>  <p>A sharepoint subscription is required and this may stop your database being widely available as (most of) the users will need sharepoint accounts.  </p>  <p>You will probably need to re-write your existing access forms. PROS: More scalable as SQL Server is used.  Easy to create and manage using Access.</p>  <p><strong>5. Use a virtual hosted desktop server.</strong>  <a href="http://stackoverflow.com/questions/32643313/microsoft-access-database-cloud-options/32648537#32648537">mentioned here</a>  eg <a href="https://aws.amazon.com/" rel="nofollow">Amazon Web services</a>.</p>  <p>I need help with this.  As I understand it this might be quite costly.  I have questions like:</p>  <p>5a:  Does each user need to "subscribe" to their own workspace? Do these workspaces need MS Access/office licenses?  (eg If so Amazons would be $40/user/month), or can you just use an Access runtime (so Amazon would only be $25/user/month). </p>  <p>5b. Can each user's workspace link to the same access data file stored on a fileserver or can one workspace get to another workspaces files.  There are costs for having a fielserver.</p>  <p><strong>6. Use third party software.</strong></p>  <p>eg $50/user/month <a href="http://eqldata.com/onweb/" rel="nofollow">EQL Data plugin</a> claims to be able to Run unmodified Access applications, right inside a web browser.</p>  <p>CONS: Expensive! ? PROS: Might be easier than other methods above.</p>  <p><strong>7. STOP using MS Access and write or re-write the whole database using another language.</strong></p>  <p>This is always an option.  My main question here is if you are proficient at Access and a VB or C#, will creating the same app. in Access be quicker than in VB, java, C# (etc).  Mates of mine write apps in JAVA and it takes them ages to do things that I can do in Access in minutes.  Also, the great thing about Access is that it's often "end users" that create the database for themselves and it gives them what they need.</p>  <p><strong>8. Up-size the data from Access to SharePoint</strong></p>  <p>Except from SO <a href="http://stackoverflow.com/questions/28422670/split-ms-access-database-and-store-back-end-in-sharepoint/32664674#32664674">here</a></p>  <p>You can up-size the data from Access to SharePoint (or low cost office 365). SharePoint tables now support relational data, so “basic” master to child tables (and cascade delete) is supported when you move Access tables up to SharePoint (you are however limited to PR of auto number, and child records (foreign keys) must be a long number.</p>  <p>Depending on the size and number of rows of data, the above solution is OFTEN better then moving tables up to SQL server. A VERY nice feature of this setup is that your application can continue to run without any internet connection. The instant you find some Wi-Fi etc., then your data syncs.</p>  <p>So I would not write off the SharePoint table’s option, as they can work VERY well with many kinds of Access applications, including ones with related tables. And the “off line” mode can be great for those laptops in the field without an internet connection.</p>  <p><strong>9. Use remote control software</strong> like <a href="http://www.teamviewer.com" rel="nofollow">teamViewer</a> to allow use of a remote PC and hence the the database.  Only allows one user at a time!</p>