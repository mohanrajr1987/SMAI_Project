<p>I'm trying to find a word to categorize some languages, and don't quite have it.</p>  <ul> <li>Category 1 Example: A Ruby program must be interpreted; it is really instructions for the <code>ruby</code> program. Python and Javascript are like this, too.</li> <li>Category 2 Example: A compiled C program needs no interpreter; it is really instructions for the computer. C++ , Rust and Go are like this, too.</li> </ul>  <p>I would say "compiled vs interpreted", but there are languages that compile to bytecode. Eg, Java compiles, but you can't run a Java program without having Java installed.</p>  <p>I would say "compiles to machine code", but I've read that C compilers may compile to assembler instead, and I'm fuzzy on that distinction anyway. Which raises the question "are we even talking about a feature of the language itself?" You can write <a href="https://code.google.com/p/picoc/" rel="nofollow">a C interpreter</a>, after all.</p>  <p>Informally, I'd say "you can use Rust or Go to do the kinds of things you'd use C for - to produce efficient binaries with no runtime dependencies."</p>  <p>Is there a word for "equivalent to C" in this sense?</p>