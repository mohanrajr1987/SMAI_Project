<p>I am working on a practice sheet for a final tomorow and I am a bit confused trying to figure out what the question is asking and how to resolve it. I wanted to check here and see if the good people of stack overflow can help me resolve it. </p>  <p>The question is set up like this: </p>  <p>Show a derivation tree (which is a trace of typecheck) demonstrating that the following expression has a type : </p>  <pre><code>(appC  (lamC ‘x   ???  (plusC (idC ‘x) (numC 1)))   (numC 2) ) </code></pre>  <p>It is based on this definition of type check: </p>  <pre><code>(define (typecheck [a : ExprC] [tenv : TypeEnv])   (type-case ExprC a   [numC (n) (numT)] [plusC (l r) (typecheck-nums l r tenv)] [multC (l r) (typecheck-nums l r tenv)] [idC (n) (type-lookup n tenv)] [lamC (n arg-type body)       (arrowT arg-type               (typecheck body                           (extend-env (tbind n arg-type)                                      tenv)))] [appC (fun arg)       (type-case Type (typecheck fun tenv)         [arrowT (arg-type result-type)                 (if (equal? arg-type                             (typecheck arg tenv))                     result-type                     (type-error arg                                 (to-string arg-type)))]         [else (type-error fun "function")])]))  (define (typecheck-nums l r tenv)   (type-case Type (typecheck l tenv) [numT ()       (type-case Type (typecheck r tenv)         [numT () (numT)]         [else (type-error r "num")])] [else (type-error l "num")]))  (define (type-error a msg) (error 'typecheck (string-append                  "no type: "                  (string-append                   (to-string a)                   (string-append " not "                                  msg))))) </code></pre>  <p>When I run this in racket : </p>  <pre><code>(typecheck (appC   (lamC 'x (numT) (plusC (idC 'x) (numC 1)))  (numC 2)) mt-env)  </code></pre>  <p>I do get: </p>  <pre><code>- Type (numT) - Type (numT)  </code></pre>  <p>At the bottom it states : </p>  <p>"You check that the type for 'x must be : numT" </p>  <p>So it is coming up with numT but I am confused about the tracing part, I know this question is long but this is the one out of all of the practice questions that is confusing me the most. Any advice/help is appreciated </p>