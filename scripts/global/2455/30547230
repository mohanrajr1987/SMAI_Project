<p>I am working through a paper trying to implement their Haskell code in Agda. They want to formulate the halting problem by saying let <code>bot</code> be a program such that for any data type <code>a</code>:</p>  <pre><code>bot :: a bot = bot </code></pre>  <p>They go on to define </p>  <pre><code>data S = T </code></pre>  <p>so the Halting problem is said as:</p>  <p>The function <code>diverges : S → S</code> defined by</p>  <pre><code>diverges(T)= bot diverges(bot)= T </code></pre>  <p>is not computable and hence is not definable in our language</p>  <p>I tried implementing this in Agda as:</p>  <pre><code>data S : Set where   ⊤ : S  ⊥ : _ ⊥ = ⊥  diverges : S → S diverges ⊤ = ⊥ diverges ⊥ = ⊤ </code></pre>  <p>and when I tried to load it, Agda said <code>diverges ⊥ = ⊤</code> is an unreachable clause. Is this the error I am supposed to get or did I just implement the Haskell code incorrectly?</p>