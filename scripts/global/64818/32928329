<p>I am quite new to libgdx and android programming in general. I am having problems rendering a sprite-sheet-based animation, and getting it to be the same size on different screen sizes. If i run the following code on my note 4, the animation is quite small, on the zenfone 2 instead it's quite big, and lastly on my laptop it is jut so small it can barely be seen. I really don't understand why this happens, and how to make it the same on the two phones. I thought that using an orthographic camera with ingame units and a viewport would do the job...but i might be doing something wrong...because it doesnt. I am following the book "libgdx cross-platform game development cookbook". I would hugely appreciate any help on how to properly use in game units to get the game to be the same on different screen sizes, so that a 512x512pixel image..isnt tiny on the note4 and huge on the zenfone (each frame of my animation is 512px squared). And as far as the pc goes, i just have no clue what is going on, i would really appreciate any explanation on why that happens! Thank you all!!</p>  <pre><code>package com.mygdxGame;  import com.badlogic.gdx.ApplicationAdapter; import com.badlogic.gdx.Gdx; import com.badlogic.gdx.graphics.GL20; import com.badlogic.gdx.graphics.OrthographicCamera; import com.badlogic.gdx.graphics.Texture; import com.badlogic.gdx.graphics.g2d.Animation; import com.badlogic.gdx.graphics.g2d.Animation.PlayMode; import com.badlogic.gdx.graphics.g2d.SpriteBatch; import com.badlogic.gdx.graphics.g2d.TextureAtlas; import com.badlogic.gdx.graphics.g2d.TextureAtlas.AtlasRegion; import com.badlogic.gdx.graphics.g2d.TextureRegion; import com.badlogic.gdx.utils.Array; import com.badlogic.gdx.utils.viewport.FitViewport; import com.badlogic.gdx.utils.viewport.Viewport; import java.util.Comparator;  public class MyGdxGame extends ApplicationAdapter {     private static final float WORLD_TO_SCREEN = 1.0f / 100.0f;     private static final float SCENE_WIDTH = 12.80f;     private static final float SCENE_HEIGHT = 7.20f;     private static final float FRAME_DURATION = 1.0f / 20.0f;     private TextureAtlas techmanAtlas;     private Animation techmanRun;     private float animationTime;     private OrthographicCamera camera;     public Viewport viewport;     public SpriteBatch batch;     @Override     public void create(){         camera = new OrthographicCamera();         viewport = new FitViewport(Gdx.graphics.getWidth(),        Gdx.graphics.getHeight(), camera);         batch = new SpriteBatch();         animationTime = 0.0f;         techmanAtlas = new TextureAtlas(Gdx.files.internal("TechMan.atlas"));         Array&lt;TextureAtlas.AtlasRegion&gt; techmanRegions = new Array&lt;TextureAtlas.AtlasRegion&gt;(techmanAtlas.getRegions());         techmanRegions.sort(new RegionComparator());         techmanRun = new Animation(FRAME_DURATION, techmanRegions, PlayMode.LOOP);         camera.position.set(SCENE_WIDTH * 0.5f, SCENE_HEIGHT * 0.5f, 0.0f);  }      @Override     public void dispose(){         batch.dispose();         techmanAtlas.dispose(); }      @Override     public void render(){         Gdx.gl.glClearColor(1, 0, 0, 1);         Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);          animationTime += Gdx.graphics.getDeltaTime();         camera.update();         batch.setProjectionMatrix(camera.combined);         batch.begin();         TextureRegion techmanFrame = techmanRun.getKeyFrame(animationTime);         int width = techmanFrame.getRegionWidth();         int height = techmanFrame.getRegionWidth();         float originX = width * 0.5f;         float originY = height * 0.5f;          batch.draw(techmanFrame,                 1.0f - originX, 3.70f - originY,                 originX, originY,                 width, height, //width, height                 WORLD_TO_SCREEN, WORLD_TO_SCREEN,                 0.0f);         batch.draw(techmanRun.getKeyFrame(animationTime), 100.0f, 275.0f);         batch.end(); }     @Override     public void resize(int width, int height){         viewport.update(width, height, false); }      private static class RegionComparator implements Comparator&lt;AtlasRegion&gt;     {         @Override         public int compare(AtlasRegion region1, AtlasRegion region2){             return region1.name.compareTo(region2.name);     } }  } </code></pre>