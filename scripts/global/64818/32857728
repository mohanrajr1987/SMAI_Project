<p>I am using the following class to render an atlas on screen: </p>  <pre><code>public class AnimationDemo implements ApplicationListener {     private SpriteBatch batch;     private TextureAtlas textureAtlas;     private Animation animation;     private float elapsedTime = 0;      @Override     public void create() {         batch = new SpriteBatch();          textureAtlas = new TextureAtlas(Gdx.files.internal("data/packOne.atlas"));         animation = new Animation(1 / 1f, textureAtlas.getRegions());     }      @Override     public void dispose() {         batch.dispose();         textureAtlas.dispose();     }      @Override     public void render() {         Gdx.gl.glClearColor(0, 0, 0, 1);         Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);          batch.begin();         //sprite.draw(batch);         elapsedTime += Gdx.graphics.getDeltaTime();         batch.draw(animation.getKeyFrame(elapsedTime, true), 0, 0);         batch.end();     }      @Override     public void resize(int width, int height) {     }      @Override     public void pause() {     }      @Override     public void resume() {     } } </code></pre>  <p>I am a beginner with libGDX, however with the above program my images are not rendered in order as random images appear. I was earlier using the following with the same . atlas file and it was working properly: </p>  <pre><code>public class MyGdxGame implements ApplicationListener {     private SpriteBatch batch;     private TextureAtlas textureAtlas;     private Sprite sprite;     private int currentFrame = 1;     private String currentAtlasKey = new String("0001");      @Override     public void create() {         batch = new SpriteBatch();          textureAtlas = new TextureAtlas(Gdx.files.internal("data/packOne.atlas"));         TextureAtlas.AtlasRegion region = textureAtlas.findRegion("0001");         sprite = new Sprite(region);           sprite.setPosition(Gdx.graphics.getWidth() / 2 - sprite.getWidth() / 2, Gdx.graphics.getHeight() / 2 - sprite.getHeight() / 2);         sprite.scale(4.5f);         Timer.schedule(new Timer.Task() {             @Override             public void run() {                 currentFrame++;                 if (currentFrame &gt; 393)                     currentFrame = 1;                  // ATTENTION! String.format() doesnt work under GWT for god knows why...                 currentAtlasKey = String.format("%04d", currentFrame);                 sprite.setRegion(textureAtlas.findRegion(currentAtlasKey));             }         }                 , 0, 1 / 30.0f);     }      @Override     public void dispose() {         batch.dispose();         textureAtlas.dispose();     }      @Override     public void render() {         Gdx.gl.glClearColor(0, 0, 0, 1);         Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);          batch.begin();         sprite.draw(batch);         batch.end();     }      @Override     public void resize(int width, int height) {     }      @Override     public void pause() {     }      @Override     public void resume() {     } } </code></pre>  <p>Any hints about what might be wrong here? </p>  <p>I am also trying to adapt my program with <a href="https://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/utils/viewport/ScreenViewport.html" rel="nofollow">Screen Viewport</a> any headings as in how to implement this would also be welcome. </p>  <p>Edit: The .atlas file is located <a href="https://gist.github.com/anonymous/17c168c67d8dbb53874d" rel="nofollow">here</a></p>