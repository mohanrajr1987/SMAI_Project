<p>This is not really a problem, more like an inconvenience. I have an abstract class called <code>AppItem</code>, and 6 smaller classes that extend <code>AppItem</code>. I also have a class called <code>AppItemManager</code> to manage the objects from <code>AppItem</code>. Each object from a daughter class contains 2 or 3 <code>Strings</code>, 2 or 3 <code>Integers</code> and a <code>Double</code>. All these objects are contained in an <code>ArrayList&lt;AppItem&gt;</code>.</p>  <p>What I am trying to do is save the objects from this <code>ArrayList</code> to a <code>Json</code> file in LibGDX's <code>Preferences</code>. I use the following code for that:</p>  <pre><code>private void save() {     Json json = new Json();     int j = 0;     Preferences prefs = Gdx.app.getPreferences("itemSave.json");     prefs.clear;      for (AppItem i : AppItemManager.getAppItems()) {         String item = json.toJson(i);         prefs.putString("item " + j, item);         j++;     }     prefs.putInteger("nbItems", j);     prefs.flush(); } </code></pre>  <p>The <code>nbItems</code> contains the number of items stored in the <code>Json</code> file. This works without any problems, and when I use the <code>PrettyPrint(...)</code> method to check it prints the objects correctly with all of their variables.</p>  <p>Now, the problem arises when I try to load this <code>Json</code> when starting the application:</p>  <pre><code>private void load() {     Json json = new Json();     Preferences prefs = Gdx.app.getPreferences("itemSave.json");     int nbItems = prefs.getInteger("nbItems");     for (int i = 0; i &lt; nbItems; i++) {         String item = prefs.getString("item " + i);         AppItem appItem = json.fromJson(AppItem.class, item);         AppItemManager.addNewItem(appItem);     } } </code></pre>  <p>This should, in principle, load all the objects from the <code>Json</code> file again and add them to the <code>ArrayList</code> in <code>AppItemManager</code>. However, I get a <code>SerializationException</code> in this line:</p>  <pre><code> AppItem appItem = json.fromJson(AppItem.class, item); </code></pre>  <p>stating that the <code>AppItem</code> class could not be instantiated. After reading up on this subject, it seems that the problem arises when using inheritance and writing to a <code>Json</code> file. When the objects are getting deserialized, LibGDX can not determine to which of the underlying classes the object belongs, thus throwing a <code>SerializationException</code>.</p>  <p>I worked around this problem by saving an <code>ArrayList</code> of items of each subclass into a <code>Json</code> file, thus having 6 files in Preferences. Then saving and loading works smoothly. This is a lot of code and I am wondering if this can be done in a single file. Also, it would be easier as I am planning to extend the <code>AppItem</code> class with additional classes later on.</p>  <p>Somehow the class of each object should be added to the <code>Json</code> so the deserializer knows where it belongs. I have been experimenting to let my subclasses implement <code>Json.Serializable</code> and add the unimplemented methods <code>read(Json json, JsonValue jsonData)</code> and <code>write(Json json)</code>. However, I have no idea what to put in these methods and the LibGDX API is surprisingly uninformative. I have also tried <a href="http://www.copper-arrow.com/blog/java-json-serializing-and-de-serializing-polymorphic-objects" rel="nofollow">this</a> but without any success.</p>  <p>Thanks</p>