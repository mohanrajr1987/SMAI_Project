<p>(I am using a LibGDX framework which is basically just LWJGL(Java) with OpenGL for rendering)  Hi, I'm trying to render a laser beam, so far I've got this effect, <a href="http://i.stack.imgur.com/dhyO9.jpg" rel="nofollow"><img src="http://i.stack.imgur.com/dhyO9.jpg" alt="laser beam"></a></p>  <p>It's just a rectangle and then the whole effect is done in fragment Shader.</p>  <p>However, as it is a laser beam, I want the rectangle to face a camera, so the player always sees this red transparent "line" everytime. And this is driving me crazy. I tried to do some billboarding stuff, however what I want isn't really billboarding. I just want to rotate it on Z axis so that the player always sees the whole line, that's all. No X and Y rotations. </p>  <p><a href="http://i.stack.imgur.com/u7XaZ.png" rel="nofollow"><img src="http://i.stack.imgur.com/u7XaZ.png" alt="enter image description here"></a></p>  <p>As you can see, that's what I want. And it's not billboarding at all.</p>  <p>If it was billboarding, it would look like this: <a href="http://i.stack.imgur.com/4fx0K.png" rel="nofollow"><img src="http://i.stack.imgur.com/4fx0K.png" alt="enter image description here"></a> . </p>  <p>I also tried to draw cylinder and the effect based on gl_FragCoord, which was working fine, but the coords were varying(sometimes the UVs were 0 and 1, sometimes 0 and 0.7) and it was not sampling whole texture, so the effect was broken.</p>  <p>Thus I don't even know what to do now. I would really appreciate any help. Thanks in advance.</p>  <p>Here's vertexShader code: </p>  <pre><code>attribute vec3 a_position; attribute vec2 a_texCoord0;  uniform mat4 u_worldTrans; //model matrix uniform mat4 u_view; //view matrix uniform mat4 u_proj; // projection matrix  varying vec2 v_texCoord0;  void main() {     v_texCoord0 = a_texCoord0;      vec4 worldTrans = u_worldTrans * vec4(a_position, 1.0);      gl_Position = u_proj * u_view * worldTrans;  } </code></pre>  <p>and here's fragmentShader codE:</p>  <pre><code>#ifdef GL_ES  precision mediump float; #endif  varying vec2 v_texCoord0;  uniform sampler2D tex; //texture I apply the red color onto. It's how I get the smooth(transparent) edges.   void main() { vec4 texelColor = texture2D( tex, v_texCoord0 ); //sampling the texture vec4 color = vec4(10.0,0.0,0.0,1.0); //the red color  float r = 0.15; //here I want to make the whole texture be red, so when there's less transparency, I want it to be more red, and on the edges(more transparency) less red. if (texelColor.a &gt; 0.5) r = 0.1;  gl_FragColor = vec4(mix(color.rgb,texelColor.rgb,texelColor.a * r),texelColor.a); //and here I just mix the two colors into one, depengind on the alpha value of texColor and the r float.     } </code></pre>  <p>The texture is just a white line opaque in the middle, but transparent at the edges of the texuture. (smooth transition)</p>