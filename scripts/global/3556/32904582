<p>I have two lines of simple code.</p>  <pre><code>int x = 12 * 30; MessageBox.Show(x.ToString()); </code></pre>  <p>First line : I understand that <code>x</code> is an <code>instance</code> of type int.</p>  <p>Second line : So, I used the <code>ToString</code> method of type int.</p>  <p>Question : </p>  <p>How can I put the value <code>12*30</code> into the instance <code>x</code> without using the "field" of int type?</p>  <p>How can I get the value <code>12*30</code> from the instance <code>x</code> without using the "field" of  int type?</p>  <p>Am I missing something now?</p>  <p>Regards </p>  <p>EDIT 1)</p>  <p>Maybe,, I did not make myself clear enough.</p>  <p>I'd like to shed a light to my question with different direction.</p>  <p>For the first line) I heard that the "x" is an instance of type int. (C# 5.0 in a Nutshell pg.15 "Predefined Type Example"). And I thought, an instance can not have any kind of value (int/string whatever kind) directly. So, I thought it needs a field to put a value. That is my first question.</p>  <p>EDIT 2)</p>  <p>The 2nd question is basically identical to the 1st question. The instance "x" has value now (somewhere inside of it, I do not know where it is, the value is 360). As you can see it, it make a good result with "instance.method" style. I thought its style should be "field.method". That is my second question(I have some kind of cofusion with 2nd question though).</p>  <p>EDIT 3)</p>  <p>I just made my questions with wondering feelings. I do not want to make any kind of bizarre route to accomplish something. I just wondering how it works nicely even without any "FIELD". It is so inconsistent with other type's ways of (normal) working. It is so confusing. </p>