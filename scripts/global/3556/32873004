<p>I have the following Problem: I would like to add an attribute to an auto-implemented property <code>prop</code> of a class <code>Foo</code> in the first step. In a second step I'm iterating over all fields of <code>Foo</code> and I copy values to these fields (values of fields of auto-implemented Properties are also found and copied). In this part I need access to the information of the Attribute.</p>  <pre><code>class FieldSetter {     // This Method is called from outside and should work for any class     private void SetFieldValues(object unknownObject)     {         foreach (var field in                 unknownObject.GetType().GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance |                                        BindingFlags.Static).Where((field) =&gt; !field.IsLiteral))         {             if (!EvalAttribute(Attribute.GetCustomAttributes(field))) // the Attribute should be accessed here             {                 // Do something if no special Information is set                 field.SetValue(a, "default Value");             }              else             {                 // Do special things                 field.SetValue(a, "special Value");             }         }      }       internal static bool EvalAttribute(Attribute[] attributes)     {          foreach (System.Attribute attr in attributes)         {             var myAttr = attr as MyAttribute;             if (myAttr != null)             {                 if (myAttr.SomeAttributeValues == "Specific Attribute Value")                 {                     return true;                 }             }         }         return false;     } }  // This class is a example for how a given Object can look like class Foo {     [MyAttribute("Example Information")] // This Attribute won't be accessed via prop-Field     int prop { get; set; }      [MyAttribute("Another Example Information")] // This Attribute won't be accessed via prop-Field     int field;      //... lots of other fields and properties }   [System.AttributeUsage(System.AttributeTargets.All)] class MyAttribute : Attribute {     public MyAttribute(string someInformation)     {         SomeAttributeValues = someInformation;     }      public string SomeAttributeValues; } </code></pre>