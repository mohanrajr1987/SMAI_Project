<p>I'm having trouble figuring out how exactly concurrency works on Heroku, and how to go about setting the optimal <code>:concurrency</code> value for Sidekiq</p>  <p>Here's the set up -</p>  <pre><code>Puma Web Server   2 workers   5 threads  Heroku Dynos   8 web dynos   2 "worker" dynos (These will run Sidekiq, not to be confused with Puma Workers)  DB Connections  120 Max Connections Allowed by Postgres  5   Active Record Pool Size (default)  ??  Sidekiq :concurrency value </code></pre>  <p>Each Puma worker is allowed the default 5 ActiveRecord DB connections (which corresponds nicely to each having 5 threads). Since there are 2 of these Puma workers per Web Dyno, each Web Dyno consumes up to 10 connections. Across all 8 Web dynos, they take up <strong>80 connections</strong></p>  <p>That leaves 120 - 80 = 40 connections to be used by the 2 dynos that will run Sidekiq. Assuming there's one Sidekiq process running on each dyno (is this true?), each Sidekiq process is free to use up to <strong>20 connections</strong> (i.e. set <code>:concurrency 20</code>)</p>  <ol> <li><p>Is that logic correct, or did I misunderstand how these processes run on dynos?</p></li> <li><p>Is the Sidekiq process limited in any way by the ActiveRecord connection pool limit of 5? If it is, sounds like setting it to 20 is useless since it can really only use a maximum of 5 connections at a time. </p></li> </ol>  <p>Thanks for the help!</p>