<p>I have 2 AutoUpdates.  The first one is meant to receive country names.  Then it does the autocomplete.  </p>  <p>After the item is selected a second autocomplete is set to readonly="false" by EL inside the XHTML.</p>  <p>It works fine until I go back to the first AutoComplete and empty the current value.  The desired behavior is to clear the second autocomplete and makes it readonly="true", but it is not happening.  What happens is that second autocomplete remains with its value with readonly="false".</p>  <p>Howe to fix this?</p>  <p>My XHTML</p>  <pre><code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt; &lt;html xmlns="http://www.w3.org/1999/xhtml"     xmlns:p="http://primefaces.org/ui"     xmlns:h="http://java.sun.com/jsf/html"     xmlns:a4j="http://richfaces.org/a4j"     xmlns:rich="http://richfaces.org/rich"     xmlns:f="http://java.sun.com/jsf/core"     xmlns:ui="http://java.sun.com/jsf/facelets"&gt;  &lt;h:head&gt;&lt;/h:head&gt; &lt;ui:debug rendered="true" hotkey="X" /&gt; &lt;body&gt;     &lt;h:form id="searchAddressForm" prependId="true"&gt;         &lt;p:growl id="msgs" showDetail="true" /&gt;          &lt;h:panelGrid columns="2" style="margin-bottom:10px" cellpadding="5"&gt;             &lt;p:outputLabel for="autoCompleteCountry" value="Country" /&gt;              &lt;p:autoComplete id="autoCompleteCountry"                 forceSelection="true"                 dropdown="true"                 var="selectedCountry"                  itemValue="#{selectedCountry}"                 itemLabel="#{selectedCountry.nicename}"                 value="#{addressReadController.selectedCountry}"                  minQueryLength="3" queryDelay="1000"                 completeMethod="#{addressReadController.completeCountry}"                 converter="#{countryConverter}"&gt;                 &lt;p:ajax event="itemSelect" listener="#{addressReadController.handleCountrySelect}" update="msgs autoCompleteState"/&gt;             &lt;/p:autoComplete&gt;              &lt;p:outputLabel for="autoCompleteState" value="State" /&gt;             &lt;p:autoComplete id="autoCompleteState" forceSelection="true" disabled="#{empty addressReadController.selectedCountry}"                 dropdown="true"                 var="selectedState"                  itemValue="#{selectedState}"                 itemLabel="#{selectedState.name}"                 value="#{addressReadController.selectedState}"                  minQueryLength="3" queryDelay="1000"                 completeMethod="#{addressReadController.completeState}"                 converter="#{stateConverter}"&gt;                 &lt;p:ajax event="itemSelect"                     listener="#{addressReadController.handleStateSelect}" update="msgs"/&gt;             &lt;/p:autoComplete&gt;          &lt;/h:panelGrid&gt;     &lt;/h:form&gt; &lt;/body&gt; &lt;/html&gt; </code></pre>  <p>My Controler</p>  <pre><code>import java.io.Serializable; import java.util.List;  import javax.ejb.EJB; import javax.faces.application.FacesMessage; import javax.faces.bean.ManagedBean; import javax.faces.bean.ViewScoped; import javax.faces.context.FacesContext; import javax.faces.event.PhaseEvent;  import org.primefaces.event.SelectEvent; import org.primefaces.event.UnselectEvent;  import my.package.ejb.AddressEJB; import my.package.ejb.AddressTypeEJB; import my.package.ejb.CityEJB; import my.package.ejb.CountryEJB; import my.package.ejb.SiteTypeEJB; import my.package.ejb.StateEJB; import my.package.entity.AddressType; import my.package.entity.City; import my.package.entity.Country; import my.package.entity.SiteType; import my.package.entity.State;  @ViewScoped @ManagedBean public class AddressReadController implements Serializable{     /**      *       */     private static final long serialVersionUID = 2224053530553846981L;      @EJB     private CountryEJB countryEJB;      @EJB     private StateEJB stateEJB;      @EJB     private CityEJB cityEJB;      @EJB     private SiteTypeEJB siteTypeEJB;      @EJB     private AddressTypeEJB addressTypeEJB;      @EJB     private AddressEJB addressEJB;      private Country selectedCountry = null;      private State selectedState = null;      private AddressType selectedAddressType = null;      private City selectedCity = null;      private SiteType selectedSiteType = null;      private String selectedComplement = null;      private Integer selectedNumber = null;      private String selectedStreetName = null;      private String selectedZipCode = null;      /*      * Begin of AJAX event handlers      */      public void handleCountrySelect(SelectEvent e) {         selectedCountry = (Country) e.getObject();         selectedState = null;          addMessage(selectedCountry.getNicename() + " selected");     }      public void handleCountryUnSelect(UnselectEvent e) {         selectedCountry = (Country) e.getObject();         addMessage(selectedCountry.getNicename() + " selected");     }      public void handleStateSelect(SelectEvent e) {         selectedState = (State) e.getObject();         addMessage(selectedState.getName() + " selected");     }      public void handleStateUnSelect(UnselectEvent e) {         selectedState = (State) e.getObject();         addMessage(selectedState.getName() + " selected");     }      public void phaseListener(PhaseEvent e) {         List&lt;FacesMessage&gt; messages = e.getFacesContext().getMessageList();         System.out.println(messages.size());     }      public List&lt;Country&gt; completeCountry(String query) {         return countryEJB.findByStartingChars(query);     }      public List&lt;State&gt; completeState(String query) {         return stateEJB.findByStartingChars(query, selectedCountry);     }      public void addMessage(String summary) {         FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_INFO,                 summary, null);         FacesContext.getCurrentInstance().addMessage(null, message);     }        /*      * End of AJAX event handlers      */      public State getSelectedState() {         return selectedState;     }      public void setSelectedState(State selectedState) {         this.selectedState = selectedState;     }      public void onCountryChange() {         this.selectedState = new State();         this.selectedCity = new City();     }      public String getSelectedComplement() {         return selectedComplement;     }      public void setSelectedComplement(String selectedComplement) {         this.selectedComplement = selectedComplement;     }      public Integer getSelectedNumber() {         return selectedNumber;     }      public void setSelectedNumber(Integer selectedNumber) {         this.selectedNumber = selectedNumber;     }      public Country getSelectedCountry() {         return selectedCountry;     }      public void setSelectedCountry(Country selectedCountry) {         this.selectedCountry = selectedCountry;     }      public City getSelectedCity() {         return selectedCity;     }      public void setSelectedCity(City selectedCity) {         this.selectedCity = selectedCity;     }      public AddressType getSelectedAddressType() {         return selectedAddressType;     }      public void setSelectedAddressType(AddressType selectedAddressType) {         this.selectedAddressType = selectedAddressType;     }      public SiteType getSelectedSiteType() {         return selectedSiteType;     }      public void setSelectedSiteType(SiteType selectedSiteType) {         this.selectedSiteType = selectedSiteType;     }      public String getSelectedStreetName() {         return selectedStreetName;     }      public void setSelectedStreetName(String selectedStreetName) {         this.selectedStreetName = selectedStreetName;     }      public String getSelectedZipCode() {         return selectedZipCode;     }      public void setSelectedZipCode(String selectedZipCode) {         this.selectedZipCode = selectedZipCode;     }  } </code></pre>