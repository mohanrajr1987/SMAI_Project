<p><strong>Primefaces 5.0, JSF 2.2, Wildfly 8.1</strong></p>  <p>The following use case:</p>  <ol> <li>Click a command button in a view (with some parameters) </li> <li>The bean method looks something up in the database - if necessary <em>dialog1</em> is shown. In <em>dialog1</em> there is a form and a command button.</li> <li>The command button in <em>dialog1</em> is clicked, the bean method looks something up in the database. </li> <li><em>Dialog1</em> is closed and <em>dialog2</em>, depending on the result of the bean method, is shown.</li> </ol>  <p><strong>bean1.java:</strong></p>  <pre><code>public void buttonClicked() {      Map&lt;String, Object&gt; options = new HashMap&lt;&gt;();     options.put("modal", true);     options.put("widgetVar", "dialog1");     options.put("id", "dlg1");  if(somethingTrue()) { RequestContext.getCurrentInstance().openDialog("dialog1.xhtml", options, null);     } } </code></pre>  <p>Everything fine. Dialog1 shows up.</p>  <p><strong>dialog1.xhtml:</strong></p>  <pre><code>&lt;h:body&gt;     &lt;h:form&gt;         &lt;p:commandButton value="Button" actionListener="#{bean2.dialog1ButtonClicked}" /&gt;     &lt;/h:form&gt; &lt;/h:body&gt; </code></pre>  <p><strong>bean2.java:</strong></p>  <pre><code>public void dialog1ButtonClicked() {             Map&lt;String, Object&gt; options = new HashMap&lt;&gt;();     options.put("modal", true);     options.put("widgetVar", "dialog2");     options.put("id", "dlg2");      if(somethingTrue()) {     RequestContext.getCurrentInstance().openDialog("dialog2.xhtml", options, null);     } } </code></pre>  <p><strong>dialog2.xhtml:</strong></p>  <pre><code>&lt;h:body&gt;             The operation was successful. &lt;/h:body&gt; </code></pre>  <p><em>Dialog2 shows up within dialog1!</em></p>  <h2><strong>How can I close dialog1 and show dialog2 NOT within dialog1?</strong></h2>  <p>I tried closing dialog1 with Primefaces Dialog Framework before opening dialog2:</p>  <pre><code>RequestContext.getCurrentInstance().closeDialog(null); RequestContext.getCurrentInstance().openDialog("dialog2.xhtml", options, null); </code></pre>  <p>Dialog2 doesn't show up.</p>  <p>I tried opening dialog2 after the AJAX callback <code>&lt;p:ajax event="dialogReturn" listener="#{bean1.dialogClosed}"/&gt;</code> Dialog2 doesn't show.</p>  <p>I tried the client side Java Script call: <code>onclick="PF('dialog1').hide()"</code></p>  <p>Dialog2 still shows up nested into dialog1.</p>