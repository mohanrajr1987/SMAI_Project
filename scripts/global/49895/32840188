<p>I know there are some other question about this, but nothing worked for me and probably I need some clarification. My goal is to show a dialog if the session expires. Regardless if it is an ajax or non-ajax request I always want to show this dialog and no stacktrace because for my opinion a stacktrace is for the logs but not for the ui. So my first question: is it possible that this dialog comes up without a user interaction? Or is a user interaction needed to show this dialog? Without user interaction is my aim. I tried two solutions to achieve my goal:</p>  <ol> <li>From the primefaces showcase</li> </ol>  <p>Added in <code>faces-config.xml</code>:</p>  <pre><code>&lt;application&gt;     &lt;el-resolver&gt;org.primefaces.application.exceptionhandler.PrimeExceptionHandlerELResolver&lt;/el-resolver&gt; &lt;/application&gt; &lt;factory&gt;     &lt;exception-handler-factory&gt;org.primefaces.application.exceptionhandler.PrimeExceptionHandlerFactory&lt;/exception-handler-factory&gt; &lt;/factory&gt; </code></pre>  <p>Added in the template xhtml:</p>  <pre><code>&lt;h:form id="sessionExpiredDialogForm"&gt;           &lt;p:ajaxExceptionHandler type="javax.faces.application.ViewExpiredException" update="sessionExpiredDialogId" onexception="PF('sessionExpiredDialogVar').show();" /&gt;     &lt;p:dialog id="sessionExpiredDialogId" widgetVar="sessionExpiredDialogVar" modal="true" closable="false" resizable="false"&gt;         &lt;h:panelGrid columns="1" style="width: 100%;"&gt;             &lt;h:outputText value="Session expired" /&gt;         &lt;/h:panelGrid&gt;         &lt;f:facet name="footer"&gt;             &lt;h:panelGrid style="width: 100%;" columnClasses="centerAligned"&gt;                 &lt;p:commandButton value="OK" action="#{navigationBL.logout()}" ajax="false"                 style="text-align: center !important;" /&gt;             &lt;/h:panelGrid&gt;         &lt;/f:facet&gt;     &lt;/p:dialog&gt; &lt;/h:form&gt; </code></pre>  <p>Result when session expires: no dialog is shown; if the user clicks on a link/button the login page is shown.</p>  <ol start="2"> <li>Custom exception handler</li> </ol>  <p>Added in <code>faces-config.xml</code>:</p>  <pre><code>&lt;factory&gt;        &lt;exception-handler-factory&gt;mypackage.MessageGeneratingExceptionHandlerFactory&lt;/exception-handler-factory&gt; &lt;/factory&gt; </code></pre>  <p>Java files:</p>  <pre><code>public class MessageGeneratingExceptionHandlerFactory extends ExceptionHandlerFactory {     private final ExceptionHandlerFactory parent;      public MessageGeneratingExceptionHandlerFactory(final ExceptionHandlerFactory parent)     {         this.parent = parent;     }      @Override     public ExceptionHandler getExceptionHandler()     {         final ExceptionHandler handler = new MessageGeneratingExceptionHandler(parent.getExceptionHandler());          return handler;     } }   public class MessageGeneratingExceptionHandler extends ExceptionHandlerWrapper {     private final ExceptionHandler wrapped;      MessageGeneratingExceptionHandler(final ExceptionHandler exception)     {         this.wrapped = exception;     }      @Override     public ExceptionHandler getWrapped()     {         return wrapped;     }      @Override     public void handle() throws FacesException     {         final Iterator&lt;ExceptionQueuedEvent&gt; i = getUnhandledExceptionQueuedEvents().iterator();         while (i.hasNext()) {             final ExceptionQueuedEvent event = i.next();             final ExceptionQueuedEventContext context = (ExceptionQueuedEventContext) event.getSource();              final Throwable t = context.getException();              try {                 if (t instanceof ViewExpiredException) {                     final RequestContext rc = RequestContext.getCurrentInstance();                     rc.execute("PF('sessionExpiredDialogVar').show();");                 } else {                     // log error ?                     LOG.error("Exception occured", t);                      final FacesContext fc = FacesContext.getCurrentInstance();                     final ResourceBundle bundle = fc.getApplication().getResourceBundle(fc, "msgs");                     final String message = bundle.getString("msg.error.general");                      fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, message, null));                 }             } finally {                 i.remove();             }         }         getWrapped().handle();     } } </code></pre>  <p>Result when session expires: no dialog is shown; if the user clicks on a link/button the login page is shown. The <code>MessageGeneratingExceptionHandler.handle()</code> method is never called.</p>  <p>I think there is something fundamentally wrong with my understanding/approach. Or is such a basic requirement really so hard to achive with JSF? I am using Mojarra 2.2.12 and primefaces 5.2.12.</p>