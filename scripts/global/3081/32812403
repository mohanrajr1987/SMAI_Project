<p>please help solve the problem. i use gem 'cancan' and join tables for roles hierarchy.  schema:</p>  <pre><code>create_table "roles", force: :cascade do |t|   t.string   "name",       limit: 255 end  create_table "roles_users", id: false, force: :cascade do |t|   t.integer "role_id", limit: 4   t.integer "user_id", limit: 4 end  create_table "users", force: :cascade do |t|   t.string   "email",                  limit: 255, default: "", null: false   t.string   "encrypted_password",     limit: 255, default: "", null: false end </code></pre>  <p>i have 3 roles: table roles:</p>  <pre><code>id        name 0         user 1         manager 2         admin </code></pre>  <p>i create 3 users and i gave them roles: table roles_users:</p>  <pre><code>role_id         user_id 2               2 1               3 0               1 </code></pre>  <p>ability.rb:</p>  <pre><code>class Ability   include CanCan::Ability   def initialize(user)     user ||= User.new # guest user (not logged in)      if user.role? :admin       can :manage, :all       cannot :update, Review     elsif user.role? :manager       can :read, Review       can :create, Review       can :update, Review       cannot :delete, Review     elsif user.role? :user       can :read, Review       can :create, Review             cannot :update, Review       cannot :delete, Review     else       can :read, Review       cannot :create, Review       cannot :update, Review       cannot :delete, Review     end      end    end    </code></pre>  <p>factory:</p>  <pre><code>FactoryGirl.define do   factory :user do     sequence(:email){ |i| "us#{i}@ad.ad" }     password 'qwertyui'     password_confirmation{ |u| u.password }       end  end  FactoryGirl.define do   factory :admin_status, class: Role do     role_id 2     user_id 2   end    factory :manager_status, class: Role do     role_id 1     user_id 3   end    factory :user_status, class: Role do     role_id 0     user_id 1   end  end </code></pre>  <p>i need testing ability for admin user via r spec:</p>  <pre><code>require 'rails_helper'  RSpec.describe Review, type: :model do   before(:each) do     @user = FactoryGirl.create(:user) #create admin     @ability = Ability.new(@user)   end    it "cannot delete review" do     expect(@ability).to be_able_to(:delete, Review)   end   end </code></pre>  <p>but after run test console display follow error message:</p>  <pre><code>kalinin@kalinin ~/rails/admin_book $ rspec spec/models/review_spec.rb F Failures:   1) Review cannot delete review      Failure/Error: expect(@ability).to be_able_to(:delete, Review)        expected to be able to delete Review      # ./spec/models/review_spec.rb:11:in `block (2 levels) in &lt;top (required)&gt;' </code></pre>  <p>please help check permission delete review for admin user</p>