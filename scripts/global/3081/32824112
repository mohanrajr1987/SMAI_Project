<p>I have a model <code>Foo</code> defined in <code>app/models/foo.rb</code>:</p>  <pre><code>class Foo   def self.bar     # do bar   end end </code></pre>  <p>This method is called in a use case defined in <code>app/use_cases/do_bar.rb</code></p>  <pre><code>module UseCases   class DoBar     def call       Foo.bar     end   end end </code></pre>  <p>Recently, I had the following airbrake error:</p>  <blockquote>   <p>undefined method `bar' for UseCases::Foo:Class</p> </blockquote>  <p>I assume that this error would be sorted out by prepending <code>::</code> to <code>Foo</code> in the use case, but I'm not sure how to force this error?  I have use case tests already and those tests pass with or without the <code>::</code>.</p>  <p><strong>How can I write a test to ensure that prepending <code>::</code> to <code>Foo</code> is the correct resolution for this error?</strong>  </p>