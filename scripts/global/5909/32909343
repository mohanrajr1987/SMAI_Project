<p>I have problem with my timers in custom adapter. In Main Activity, have onclick method. Then i click at the row, it changing id layout for each row. And this work fine. But in second layout i need chronometer, that will be start on selected item. So i tried many ways. And the problem that i need to save 2 variable( startAnswerTime, and answerTime). Look at my code: MainActivity:(select multi row)</p>  <p>lvChildrensState.setOnItemClickListener(new AdapterView.OnItemClickListener() {             @Override             public void onItemClick(AdapterView parent, View view, int position, long id) {</p>  <pre><code>            childrensStateAdapter.setSelecterIndex(position);             childrensStateAdapter.toggleSelected(new Integer(position));             Toast.makeText(getApplicationContext(),String.valueOf(childrenState.startanswerTime),Toast.LENGTH_SHORT).show();             childrensStateAdapter.notifyDataSetChanged();          }     }); </code></pre>  <p>Child Class (here I pars JSON object ):</p>  <pre><code>public ArrayList&lt;ChildrensState&gt; getChildrenState(String json) {     ArrayList&lt;ChildrensState&gt; arrayList = new ArrayList&lt;&gt;();      JSONArray array;     try {         JSONObject obj = new JSONObject(json);         array = obj.getJSONArray("Students") ;         childrensCount = array.length();         for (int i = 0; i &lt; array.length(); i++) {             listNumb = i + 1;             //startanswerTime = SystemClock.elapsedRealtime();             JSONObject childsobj = array.getJSONObject(i);             arrayList.add(new ChildrensState(childsobj.getInt("StudentsID"),childsobj.getString("StudentName"),listNumb, averageMark, absenceChildrens,                     answerTime,startanswerTime));             id = childsobj.getInt("StudentsID");             name = childsobj.getString("StudentName");             //startanswerTime = SystemClock.elapsedRealtime();             //startanswerTime = 0;             /* Log.d(TAG,"School json" + json);             Log.d(TAG,"School obj:" + obj+"| School obj:   "+ array);             Log.d(TAG,"School schoolobj:" + schoolobj + "| School id: " +schoolobj.getInt("SchoolID") + " | School name : "+ schoolobj.getString("SchoolName"));             Log.d(TAG,"School array.length(): " + array.length());*/         }      } catch (JSONException e) {         e.printStackTrace();     }       return arrayList; } </code></pre>  <p>Here is my CustomAdapter code:</p>  <pre><code>public class ChildrensStateAdapter extends BaseAdapter {  private static final int IS_END_ANSWER = 0; private static final int IS_START_ANSWER = 1; ArrayList&lt;ChildrensState&gt; arrayList; private int   selectedIndex; public ArrayList&lt;Integer&gt; selectedIds = new ArrayList&lt;Integer&gt;(); Context context; private LayoutInflater cInflater;   public ChildrensStateAdapter(Context context, ArrayList&lt;ChildrensState&gt; arrayList){     this.cInflater = LayoutInflater.from(context.getApplicationContext());     this.arrayList = arrayList;     this.context = context;     selectedIndex = 1;  }  public void setSelecterIndex(int ind){     this.selectedIndex = ind;     notifyDataSetChanged(); } public void toggleSelected(Integer position){     if (selectedIds.contains(position)){         selectedIds.remove(position);     }else {         selectedIds.add(position);     } }  @Override public int getItemViewType(int position) {      if (selectedIds.contains(position)){         return 1;     }else         return 0; } @Override public int getViewTypeCount() {     return 2; } @Override public int getCount() {     if (arrayList == null){         return 0;     }     return arrayList.size(); }  @Override public ChildrensState getItem(int position) {     return arrayList.get(position); } @Override public long getItemId(int position) {     return position; } @Override public View getView(int position, View convertView, ViewGroup parent) {     ViewHolder holder;     holder= new ViewHolder();     int type = getItemViewType(position);     ChildrensState item = (ChildrensState) getItem(position);      if(convertView==null)     {         switch (type) {             case IS_END_ANSWER:                 convertView=cInflater.inflate(R.layout.lesson_children_adapter_lesson, parent,false);                 holder.name = (TextView) convertView.findViewById(R.id.childrens_textView_lessons);                 holder.averageMark = (TextView) convertView.findViewById(R.id.lesson_averagemark_textView);                 holder.absenceChildrens = (CheckBox) convertView.findViewById(R.id.lesson_absencechildrens_checkBox);                 convertView.setTag(holder);                 break;             case IS_START_ANSWER:                 convertView=cInflater.inflate(R.layout.lesson_children_adapter_answer, parent,false);                 holder.name = (TextView)convertView.findViewById(R.id.childrens_textView_answer);                 holder.answerTime  = (Chronometer)convertView.findViewById(R.id.answerTimer);                  convertView.setTag(holder);                 break;         }      }     else {         holder= (ViewHolder) convertView.getTag();     }       switch (type){         case IS_END_ANSWER:             holder.name.setText(" " + item.listNumb + ". " + item.name);             holder.averageMark.setText(String.valueOf(8.8));     holder.absenceChildrens.setOnCheckedChangeListener(myCheckChangList);             holder.absenceChildrens.setTag(position);             holder.absenceChildrens.setChecked(item.absenceChildrens);             holder.absenceChildrens.getTag(position);             break;         case IS_START_ANSWER:             holder.name.setText(" " + item.listNumb + ". " + item.name);             if(selectedIds.contains(position)&amp;&amp; selectedIndex == position){                 item.startanswerTime = SystemClock.elapsedRealtime();                 holder.answerTime.setBase(item.startanswerTime);                 holder.answerTime.start();             }              break;     }     return convertView; }  ChildrensState getChildrensState(int position){     return ((ChildrensState)getItem(position)); }    ArrayList&lt;ChildrensState&gt; getAbsence(){     ArrayList&lt;ChildrensState&gt; absence = new ArrayList&lt;ChildrensState&gt;();     for(ChildrensState c : arrayList){         if(c.absenceChildrens)             absence.add(c);     }     return absence; }  OnCheckedChangeListener myCheckChangList = new OnCheckedChangeListener(){     public void onCheckedChanged(CompoundButton buttonView, boolean isChecked){         getChildrensState((Integer) buttonView.getTag()).absenceChildrens = isChecked;     } }; public class ViewHolder{     public TextView name;     public CheckBox absenceChildrens;     public TextView averageMark;     public Chronometer answerTime;  } </code></pre>  <p>}</p>