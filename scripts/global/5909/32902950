<p>I have a timer model, and a runner model. I have the runner model so that I could run the same timer multiple times, and see when it had the best time. The runner could run overtime, after it has counted down to 00:00:00</p>  <p>The timer has an duration (HH:MM:SS)</p>  <p>The runner has a startdate, pausedate, resumedate, stopdate.</p>  <p>How can I get correct time of the timer, after the user has interacted (started, paused, resumed, stoped) with the timer? In a HH:MM:SS format.</p>  <p>Here is my code, but the get_time() is not working: (edit: changed to subtract from oldest, based on comments) </p>  <p>Any help would be great!</p>  <pre><code>class Timer(models.Model):     name = models.CharField(max_length=500)       duration = models.DurationField(help_text="hh:mm:ss", null=True, blank=True)   class Runner(models.Model):     timer = models.ForeignKey('timers.Timer', blank=True, null=True)      startdate = models.DateTimeField(null=True, blank=True)     enddate = models.DateTimeField(null=True, blank=True)     pauseddate = models.DateTimeField(null=True, blank=True)     resumedate = models.DateTimeField(null=True, blank=True)      completed = models.BooleanField(default=False)     paused = models.BooleanField(default=False)       def get_duration(self):          now = timezone.now()         duration = self.timer.duration          if self.completed:            start = self.started             ended = self.completed_date              result = ended - start             return result          elif self.paused:             if self.resume_date:                start = self.resume_date                 ended = self.paused_date                  result = ended - start                 return result              else:                start = started                 ended = paused_date                  result = ended - start                 return result           elif self.started and not self.paused and not self.completed:               started_and_duration = self.started - duration              if started_and_duration &gt;= now:                 #Still not done with countdown, get remaining time                 return started_and_duration             else:                 #Countdown is on overtime, get how long it has been running over                 result = now - self.started                  return result             elif not self.started and not self.paused and not self.completed:              return duration </code></pre>