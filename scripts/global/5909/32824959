<p>I have a windows service that I coded last week, it's intention is to run a timer that checks periodically if the date has changed, if so it kicks off a method to get objects from our SQL server and if they match the current date it sends them off to another service that processes the payment. I am new to services, and am unsure of how to install this to get it to a) run in the background endlessly and b) run on startup in case of the server getting reset.</p>  <p>Here is the code for my Windows Service in VB.NET</p>  <pre><code>Imports System.ServiceProcess </code></pre>  <p>Imports AFI.BusinessObjects.Billing Imports System.Data.SqlClient</p>  <p>Public Class FutureTransactionProcessor</p>  <pre><code>'Creates a timer that can't be grabbed up by garbage collection Private Timer As System.Timers.Timer  'Create a variable for todays date minus one to check against and see if the date has advanced. Private lastRun As DateTime = DateTime.Now.AddDays(-1)  Protected Overrides Sub OnStart(ByVal args() As String)     ' Add code here to start your service. This method should set things     ' in motion so your service can do its work.      'Timer that finishes its run every 10 minutes     Timer = New System.Timers.Timer(10 * 60 * 1000)      'we trigger a method as soon as the timer has finished running its course     'Timer.Elapsed += New System.Timers.ElapsedEventHandler(AddressOf timerElapsed)     AddHandler Timer.Elapsed, AddressOf timerElapsed      'start our timer     Timer.Start()  End Sub  Protected Sub timerElapsed(ByVal sender As Object, e As System.Timers.ElapsedEventArgs)      If lastRun.Date &lt; DateTime.Now.Date Then          'stop the timer to perform our check against the FUTURE_TRANSACTIONS table         Timer.Stop()          'BEGIN FUNCTION TO RETURN FUTURE TRANSACTIONS FROM FUTURE_TRANSACTION TABLE THAT MATCH TODAYS DATE IF ANY         GetFutureTransactionsByDate(DateTime.Now.Date)           'reset our lastRun variable so we'll know when this method was last ran         lastRun = DateTime.Now          'restart our timer         Timer.Start()      End If   End Sub  Public Shared Function GetFutureTransactionsByDate(ByVal dateToday As DateTime) As FuturePaymentsCollection      Dim FuturePaymentsToBeProcessed As FuturePaymentsCollection = New FuturePaymentsCollection      Using cnSQL As SqlConnection = New SqlConnection(AFI.Configuration.SystemSetting.Collection("ClientServer", "CS_Connection_String").SettingValue)          Using cmdSP As New SqlCommand("PROC_FUTURE_TRANSACTIONS_SEL_BY_TODAY", cnSQL)              cmdSP.CommandType = System.Data.CommandType.StoredProcedure             cmdSP.Parameters.AddWithValue("DATETODAY", dateToday)              cmdSP.Connection.Open()             Dim sqlReader As SqlDataReader = cmdSP.ExecuteReader()              If sqlReader.HasRows Then                 While (sqlReader.Read())                     Dim futurePayment As FuturePayment = New FuturePayment                      futurePayment.FutureTransactionID = sqlReader.GetInt32(sqlReader.GetOrdinal("BMW_TRANSACTION_ID"))                     futurePayment.GroupID = sqlReader.GetInt32(sqlReader.GetOrdinal("BMW_CNTC_GROUP_ID"))                     futurePayment.PayorAccountID = sqlReader.GetInt32(sqlReader.GetOrdinal("BMW_PAYOR_ACCOUNT_ID"))                     futurePayment.PolicyID = sqlReader.GetInt32(sqlReader.GetOrdinal("BMW_POLICY_ID"))                     futurePayment.AccountTypeID = sqlReader.GetInt32(sqlReader.GetOrdinal("BMW_ACCOUNT_TYPE_ID"))                     futurePayment.TransationTypeID = sqlReader.GetInt32(sqlReader.GetOrdinal("BMW_TRANSACTION_TYPE_ID"))                     futurePayment.TransactionDate = sqlReader.GetDateTime(sqlReader.GetOrdinal("BMW_TRANSACTION_DATE")).ToString("MM/dd/yyyy")                     futurePayment.TransactionSubmitter = sqlReader.GetInt32(sqlReader.GetOrdinal("BMW_TRANSACTION_SUBMITTER"))                     futurePayment.TransactionAmount = sqlReader.GetDecimal(sqlReader.GetOrdinal("BMW_TRANSACTION_AMOUNT"))                     futurePayment.TransactionLast4 = sqlReader.GetString(sqlReader.GetOrdinal("BMW_TRANSACTION_LAST4"))                     futurePayment.TransactionEmail = sqlReader.GetString(sqlReader.GetOrdinal("BMW_TRANSACTION_EMAIL"))                     futurePayment.PaymentInfo1 = sqlReader.GetString(sqlReader.GetOrdinal("PaymentInfo1"))                     futurePayment.PaymentInfo2 = sqlReader.GetString(sqlReader.GetOrdinal("PaymentInfo2"))                     futurePayment.PaymentInfo3 = sqlReader.GetString(sqlReader.GetOrdinal("PaymentInfo3"))                     futurePayment.PaymentInfo4 = sqlReader.GetString(sqlReader.GetOrdinal("PaymentInfo4"))                     futurePayment.PaymentInfo5 = sqlReader.GetString(sqlReader.GetOrdinal("PaymentInfo5"))                     futurePayment.PaymentInfo6 = sqlReader.GetString(sqlReader.GetOrdinal("PaymentInfo6"))                     futurePayment.TransactionUpdateDate = sqlReader.GetDateTime(sqlReader.GetOrdinal("BMW_TRANSACTION_UPDATE_DATE"))                       FuturePaymentsToBeProcessed.Add(futurePayment)                  End While             End If              cmdSP.Connection.Close()          End Using      End Using       'Return us a collection of FuturePayment Items     Return FuturePaymentsToBeProcessed       'For every item returned we need to turn it into a OneTimePayment object     For Each Payment As FuturePayment In FuturePaymentsToBeProcessed          Dim PaymentToBeProcessed As OneTimePayment          PaymentToBeProcessed.PayorAccountId = Payment.PayorAccountID         PaymentToBeProcessed.PolicyID = Payment.PolicyID         PaymentToBeProcessed.AccountTypeID = Payment.AccountTypeID          'Future payments can only be EFT so we'll go ahead and set that to 1         PaymentToBeProcessed.PayTypeID = 1         PaymentToBeProcessed.BankInfoName = Payment.PaymentInfo1         PaymentToBeProcessed.BankInfoRoutingNum = Payment.PaymentInfo2         PaymentToBeProcessed.BankInfoAccountNum = Payment.PaymentInfo3          If PaymentToBeProcessed.BankInfoAccountNum.Length &gt;= 4 Then             PaymentToBeProcessed.Last4 = PaymentToBeProcessed.BankInfoAccountNum.Substring(PaymentToBeProcessed.BankInfoAccountNum.Length - 4, 4)         Else             PaymentToBeProcessed.Last4 = "XXXX"         End If          PaymentToBeProcessed.TransactionTypeID = 1         PaymentToBeProcessed.Email = Payment.TransactionEmail         PaymentToBeProcessed.TransactionAmount = Payment.TransactionAmount          PaymentToBeProcessed.Save()         PaymentToBeProcessed.SendPaymentToGateway()           'Run our method to remove the future payment from the Future_Transactions table and enter it into the Future_Transactions_History table as processed         Payment.ProcessFuturePayment(Payment.FutureTransactionID)        Next  End Function    Protected Overrides Sub OnStop()     ' Add code here to perform any tear-down necessary to stop your service. End Sub </code></pre>  <p>End Class</p>  <p>I have tried to right click the designer view on the service and add Installer and I've changed the serviceName and displayName properties on the ServiceInstaller1 and then I've changed the account property to LocalSystem for the ServiceProcessInstaller1. The next step my tutorial says is to build and then it should create a MyService.exe however when I search through my solutions files and folders I can't find this exe so I'm not sure why this isn't being created on build? Am I going about this the wrong way? Should I be kicking this off with Windows Task Scheduler or should I create an installer and install it on our server to run in the background consistently? Thanks for any information or help!</p>