<p>Good evening fellas,</p>  <p>I am having some problems with a Countdown timer. My app should do the following, it starts and checks if there exists one file with one date on it, if so it calculates the difference between today and that (future) date and initializes a timer counting down the seconds until that date in the way X days Y hours Z minutes S seconds. If there's no file, then the user can select one date with the botton, the program will store it in the file and set the countdown. There is also one Delete Button which allows to delete the date and choice another. This delete button should cancel the timer so it stops counting.</p>  <p>For some unknown reason the timer does not stop when I cancel it. Apart from that my timer is ticking properly but the difference is 2 seconds instead of one... so it would show 40 38 36... instead of 40 39 38...</p>  <p>And lastly, it's storing the picked date twice instead of one...</p>  <p>If someone could take a look at my code I would really appreacite, I am a newbie in Android and I have been the whole afternoon struggling with this without result... </p>  <p>The DatePicker code is from <a href="http://stackoverflow.com/a/18672134">here</a>, I don't like taking credit from things that aren't mine.</p>  <p>Thanks in advance.</p>  <pre><code>public class NextVisit extends Activity implements DatePickerFragment.TheListener{ protected Vibrator vibrate; protected int SECONDS_IN_A_DAY = 24 * 60 * 60; protected String filePath = ""; protected SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd"); final long[] pattern = {0, 1000, 500, 1000, 500, 1000, 500, 1000 }; CountDownTimer timer = null; String dateString = "";  @Override protected void onCreate(Bundle savedInstanceState) {     super.onCreate(savedInstanceState);     setContentView(R.layout.activity_next_visit);     final TextView label = (TextView) findViewById(R.id.label);     final TextView countdown = (TextView) findViewById(R.id.time_visit);     final Button bDate = (Button) findViewById(R.id.date_button);     final Button bDelete = (Button) findViewById(R.id.delete_button);     File dir = new File(getFilesDir(), "loveApp");     if(!dir.exists())         dir.mkdirs();     final File f =  new File(getFilesDir()+"/loveApp"+"/love_date.txt");     filePath = f.getAbsolutePath();     vibrate = (Vibrator) getSystemService(VIBRATOR_SERVICE);     bDelete.setOnClickListener(new View.OnClickListener() {         @Override         public void onClick(View v) {             if(f.exists()){                 f.delete();                 System.out.println("File deleted successfully");                 bDate.setVisibility(View.VISIBLE);                 label.setText(R.string.next_visit1);                 timer.cancel();                 countdown.setText("");                 System.out.println("I cancelled the timer");                  bDelete.setVisibility(View.INVISIBLE);                 bDate.setOnClickListener(new View.OnClickListener() {                     public void onClick(View v) {                         DialogFragment picker = new DatePickerFragment();                         bDelete.setVisibility(View.VISIBLE);                         bDate.setVisibility(View.INVISIBLE);                         picker.show(getFragmentManager(), "datePicker");                     }                 });              }         }     });      if(f.exists()){         System.out.println("File exists");         bDate.setVisibility(View.INVISIBLE);         label.setText(getString(R.string.label));         try{             BufferedReader br = new BufferedReader(new FileReader(f));             dateString = br.readLine();             br.close();             System.out.println("Date: "+dateString);             Date finalDate = formatter.parse(dateString);             setCountdown(finalDate);         }catch(Exception e){             e.printStackTrace();             label.setText("ERROR");         }      }else{         System.out.println("File DOES NOT EXIST");         bDelete.setVisibility(View.INVISIBLE); //Removing the delete date button         bDate.setOnClickListener(new View.OnClickListener() {             public void onClick(View v) {                 DialogFragment picker = new DatePickerFragment();                 bDelete.setVisibility(View.VISIBLE);                 bDate.setVisibility(View.INVISIBLE);                 picker.show(getFragmentManager(), "datePicker");             }         });  } } public void setCountdown(Date finishDate){     long end = finishDate.getTime();     final TextView countdown = (TextView)  findViewById(R.id.time_visit);     timer = new CountDownTimer(end, 1000){         @Override         public void onTick(long millisUntilFinished) {             long now = Calendar.getInstance(Locale.GERMANY).getTimeInMillis()+1000;             long diff =  millisUntilFinished - now;             long diffSec = diff / 1000;              long days = diffSec / SECONDS_IN_A_DAY;             long secondsDay = diffSec % SECONDS_IN_A_DAY;             long seconds = secondsDay % 60;             long minutes = (secondsDay / 60) % 60;             long hours = (secondsDay / 3600);             countdown.setText(days+ " days, "+ hours + "hours, "+minutes + "m, "+seconds + "s remaining!");         }          @Override         public void onFinish() {             countdown.setText("done!");             vibrate.vibrate(pattern,-1);         }     }.start();   }   @Override public void returnDate(String date) {     dateString = date;     TextView label = (TextView) findViewById(R.id.label);     label.setText(R.string.label);     BufferedWriter bw;     try {         bw = new BufferedWriter(new FileWriter(new File(filePath)));         bw.write(dateString);         bw.close();         System.out.println("Saved the file, date is: "+ dateString);         Date finishDate = formatter.parse(date);         setCountdown(finishDate);     } catch (Exception e) {         e.printStackTrace();     } } } </code></pre>