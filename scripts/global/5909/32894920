<p>I use as following c# code to prevent sleep and monitor off:<br></p>  <pre><code>internal static class NativeMethods {     // Import SetThreadExecutionState Win32 API and necessary flags     [DllImport("kernel32.dll")]     public static extern uint SetThreadExecutionState(uint esFlags);     public const uint ES_CONTINUOUS = 0x80000000;     public const uint ES_SYSTEM_REQUIRED = 0x00000001;     public const uint ES_DISPLAY_REQUIRED = 0x00000002; } </code></pre>  <p><br> and Calling this function on Formload: <br></p>  <pre><code>private void PreventSleep() {     NativeMethods.SetThreadExecutionState(NativeMethods.ES_CONTINUOUS |  NativeMethods.ES_SYSTEM_REQUIRED); }  private void PreventMonitorOff() {     NativeMethods.SetThreadExecutionState(NativeMethods.ES_CONTINUOUS | NativeMethods.ES_DISPLAY_REQUIRED); } </code></pre>  <p><br> This way of code gives me timeless preventing. What I want is a limit of time.<br> </p>  <p>Let say sleep after 40 minutes if there is no user who working with the computer. I want to deactivate those functions after 40 minutes. And then when the user finish using the computer I want to activate and prevent in 40 minutes. It will be like a loop. Like<br> I want to prevent windows from going to sleep only in 40 minutes , then sleeping as usual if there is no user who using the computer. Then when the computer is free from user, I want to wait in 40 minutes Before it's going to sleep again.</p>  <p>I tried using Timer with interval 2400000 (40 minutes): <br></p>  <pre><code>private void timer1_Tick(object sender, EventArgs e) {     PreventSleep();     PreventMonitorOff(); } </code></pre>  <p>and Calling those functions: <br></p>  <pre><code>private void Form1_Load(object sender, EventArgs e) {     timer1.Start(); } </code></pre>  <p><br> How to do a loop with those functions, and will this code know that "Now there is movement of mouse or keybord and activate sleeping after 40 minutes"? <br> Thank you in advance!</p>