<p>trying to make one part of Java Swing app, which should do:</p>  <ul> <li>when a button is clicked, takes user value (integer) of "minutes" from some text field;</li> <li>instantiates and object which is actually SwingWorker thread, which will start a timer a count back to zero user "minutes" and then perform some action (initiate another JFrame) in done(), after doInBackground() finishes;</li> </ul>  <p>I put prints on some points in the code and it seems that the code takes input minutes from textField, passes it to the Constructor in Countdown class, but then simply executes done(), without running doInBackground() first.</p>  <p>If anybody has some hint why is this happening I would be thankfull, I have tried all my ideas and nothing works.</p>  <p>Here is the first part, code from the Button:</p>  <pre><code>private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {  userCountTime = Integer.parseInt(jTextField2.getText());         userCountTime = userCountTime * 60;         System.out.println("Preuzeto iz dugmeta " + userCountTime);          if (jRadioButton2.isSelected()){             Countdown countDown= new Countdown (userCountTime); } </code></pre>  <p>Here is the class Countdown:</p>  <pre><code>import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import javax.swing.SwingWorker; import javax.swing.Timer;  /**  *  * @author Glupko  */ public class Countdown extends SwingWorker{    public Timer timer;    static int userCountTime;    static ActionListener timerListener;     //Constructor         public Countdown (int userCountTime){         Countdown.userCountTime = userCountTime;         System.out.println("In constructor: " + Countdown.userCountTime);         this.execute();         }      @Override     protected Object doInBackground() throws Exception {         //defining listener         timerListener = new ActionListener() {                  @Override                 public void actionPerformed(ActionEvent actionEvent) {                    System.out.println("In action performed value is:  " + userCountTime);                      //for each tick we subtract 1, every second                     while (userCountTime &gt;= 0){                         userCountTime--;                     System.out.println("In actionPerformed there is number of seconds:  " + userCountTime);}                 timer = new Timer(1000, timerListener);                 //start timer                 timer.start();                 }};}      @Override             protected void done(){                 System.out.println("From done: timer elapsed");                 ChangingWindow window = new ChangingWindow();                 }         } </code></pre>  <blockquote>   <p>Many thanks in advance!</p> </blockquote>