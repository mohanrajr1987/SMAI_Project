<p>In <code>javax.swing.Timer</code>, we are allowed to set the <em>time interval</em> as such:</p>  <pre><code>int delay = 1000;    //update every 1000 millisecond Timer t = new Timer(delay, listener); </code></pre>  <p>With the above, I will expect the time delay between each interval to be <code>1000</code> millisecond. However I when I use it in a Swing application, the delay for each interval is <code>1014 to 1015</code>.</p>  <p>When I set the delay to <code>1</code>. The tested delay is <code>15 to 16</code> milliseconds per interval.</p>  <hr>  <p>I have 2 question with regards to the above Timer behaviour:</p>  <p><strong>Q1</strong>: What is causing the additional <code>14 to 15</code> milliseconds being added to my interval? Is it the "overhead" needed to run the Swing application?</p>  <p><strong>Q2</strong>: Will the time delay be guaranteed as what we have stated in the Timer constructor or <code>timer.setDelay()</code>? I ask this because I know the delay in <code>Thread.sleep(delay)</code> is not guaranteed, and it varies with a range. So, what about <code>javax.swing.Timer</code>?</p>