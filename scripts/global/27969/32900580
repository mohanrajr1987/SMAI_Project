<p>I'm learning about queuing, and RabbitMq, in particular.  I've followed tutorial <a href="https://www.rabbitmq.com/tutorials/tutorial-two-java.html" rel="nofollow">here</a>, but I don't feel as though they cover real world examples very well.</p>  <p>What I'd like to see is how the queue is used practically.  Each of the tutorials decalres a producer and then immediately after, a consumer.  I would like to set the consumer on auto-pilot... that is, any task that the producer adds, should be picked up automatically by the consumer.  The consumer would then do whatever it needed to do with the data.</p>  <p>I've seen this pattern of explaining it, using main method, over and over again (left out the details):</p>  <p>Task:</p>  <pre><code>public class NewTask {    public static void main(String[] argv)                        throws java.io.IOException { ...      channel.basicPublish( "", TASK_QUEUE_NAME,              MessageProperties.PERSISTENT_TEXT_PLAIN,             message.getBytes());     System.out.println(" [x] Sent '" + message + "'");  ... } </code></pre>  <p>Worker:</p>  <pre><code>public class Worker {    public static void main(String[] argv) throws Exception {  ...      final Consumer consumer = new DefaultConsumer(channel) {       @Override       public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {         System.out.println(" [x] Received '" + message + "'"); ...       }     };     channel.basicConsume(TASK_QUEUE_NAME, false, consumer);   } </code></pre>  <p>...But what I'm trying to do is set up the consumer to just do it's job, kind of like what a scheduled job would do if I were using Quartz, but without a schedule.  Just pick the messages up as they come in.</p>