<p>I am attempting to use cl-rabbit to communicate with the RabbitMQ broker from a lisp process running inside a Docker container.  I have code that works when I run it outside a docker container, so the problem is either related to the OS or Docker.  (It runs on Mac OS X outside the container, but Ubuntu 14.04 inside the container.)</p>  <p>When I run the system with <code>docker-compose up</code>, I see output that the message broker has started successfully.  The lisp client gives this output:</p>  <pre><code>sbcl-rabbit_1 | This is SBCL 1.2.15, an implementation of ANSI Common Lisp. sbcl-rabbit_1 | More information about SBCL is available at &lt;http://www.sbcl.org/&gt;. sbcl-rabbit_1 | sbcl-rabbit_1 | SBCL is free software, provided as is, with absolutely no warranty. sbcl-rabbit_1 | It is mostly in the public domain; some portions are provided under sbcl-rabbit_1 | BSD-style licenses.  See the CREDITS and COPYING files in the sbcl-rabbit_1 | distribution for more information. sbcl-rabbit_1 | Created connection #&lt;CL-RABBIT::CONNECTION {10047054F3}&gt; sbcl-rabbit_1 | Created socket #.(SB-SYS:INT-SAP #X00651650) sbcl-rabbit_1 | Opened socket #.(SB-SYS:INT-SAP #X00651650) sbcl-rabbit_1 | CORRUPTION WARNING in SBCL pid 10(tid 140737354065728): sbcl-rabbit_1 | Memory fault at 0x7ffff266ce10 (pc=0x7ffff2c957c2, sp=0x7ffff309f3d0) sbcl-rabbit_1 | The integrity of this image is possibly compromised. sbcl-rabbit_1 | Continuing with fingers crossed. sbcl-rabbit_1 | Unhandled SB-SYS:MEMORY-FAULT-ERROR in thread #&lt;SB-THREAD:THREAD sbcl-rabbit_1 |                                                 "main thread" RUNNING sbcl-rabbit_1 |                                                  {1003FAF093}&gt;: sbcl-rabbit_1 |   Unhandled memory fault at #x7FFFF266CE10. sbcl-rabbit_1 | sbcl-rabbit_1 | Backtrace for: #&lt;SB-THREAD:THREAD "main thread" RUNNING {1003FAF093}&gt; sbcl-rabbit_1 | 0: ((LAMBDA NIL :IN SB-DEBUG::FUNCALL-WITH-DEBUG-IO-SYNTAX)) sbcl-rabbit_1 | 1: (SB-IMPL::CALL-WITH-SANE-IO-SYNTAX #&lt;CLOSURE (LAMBDA NIL :IN SB-DEBUG::FUNCALL-WITH-DEBUG-IO-SYNTAX) {10047B016B}&gt;) sbcl-rabbit_1 | 2: (SB-IMPL::%WITH-STANDARD-IO-SYNTAX #&lt;CLOSURE (LAMBDA NIL :IN SB-DEBUG::FUNCALL-WITH-DEBUG-IO-SYNTAX) {10047B013B}&gt;) sbcl-rabbit_1 | 3: (PRINT-BACKTRACE :STREAM #&lt;SYNONYM-STREAM :SYMBOL SB-SYS:*STDERR* {1000164243}&gt; :START 0 :FROM :INTERRUPTED-FRAME :COUNT NIL :PRINT-THREAD T :PRINT-FRAME-SOURCE NIL :METHOD-FRAME-STYLE NIL) sbcl-rabbit_1 | 4: (SB-DEBUG::DEBUGGER-DISABLED-HOOK #&lt;SB-SYS:MEMORY-FAULT-ERROR {10047ACE93}&gt; #&lt;unavailable argument&gt;) sbcl-rabbit_1 | 5: (SB-DEBUG::RUN-HOOK *INVOKE-DEBUGGER-HOOK* #&lt;SB-SYS:MEMORY-FAULT-ERROR {10047ACE93}&gt;) sbcl-rabbit_1 | 6: (INVOKE-DEBUGGER #&lt;SB-SYS:MEMORY-FAULT-ERROR {10047ACE93}&gt;) sbcl-rabbit_1 | 7: (ERROR SB-SYS:MEMORY-FAULT-ERROR :ADDRESS 140737260211728) sbcl-rabbit_1 | 8: (SB-SYS:MEMORY-FAULT-ERROR) sbcl-rabbit_1 | 9: ("foreign function: call_into_lisp") sbcl-rabbit_1 | 10: ("foreign function: post_signal_tramp") sbcl-rabbit_1 | 11: (CFFI::PREPARE-FUNCTION "amqp_login_with_properties" (:STRUCT CL-RABBIT::AMQP-RPC-REPLY-T) (:POINTER :POINTER :INT :INT :INT :POINTER :INT :POINTER :POINTER) :DEFAULT-ABI) sbcl-rabbit_1 | 12: (CL-RABBIT::AMQP-LOGIN-SASL-PLAIN-WITH-PROPERTIES #.(SB-SYS:INT-SAP #X00641500) "/" 0 131072 0 #.(SB-SYS:INT-SAP #X7FFFF329FFE8) 0 "guest" "guest") sbcl-rabbit_1 | 13: ((LABELS #:FN274 :IN CL-RABBIT:LOGIN-SASL-PLAIN) (CL-RABBIT::NUM-ENTRIES 2 CL-RABBIT::ENTRIES #.(SB-SYS:INT-SAP #X00651840))) sbcl-rabbit_1 | 14: (CL-RABBIT::CALL-WITH-AMQP-TABLE #&lt;CLOSURE (LABELS #:FN274 :IN CL-RABBIT:LOGIN-SASL-PLAIN) {100470785B}&gt; (("product" . "cl-rabbit") ("version" . "0.1"))) sbcl-rabbit_1 | 15: (CL-RABBIT.EXAMPLES::TROY-TEST) sbcl-rabbit_1 | 16: (SB-INT:SIMPLE-EVAL-IN-LEXENV (CL-RABBIT.EXAMPLES::TROY-TEST) #&lt;NULL-LEXENV&gt;) sbcl-rabbit_1 | 17: (EVAL (CL-RABBIT.EXAMPLES::TROY-TEST)) sbcl-rabbit_1 | 18: (SB-IMPL::PROCESS-EVAL/LOAD-OPTIONS ((:LOAD . "examples.lisp") (:EVAL . "(sleep 3)") (:EVAL . "(cl-rabbit.examples::troy-test)") (:QUIT))) sbcl-rabbit_1 | 19: (SB-IMPL::TOPLEVEL-INIT) sbcl-rabbit_1 | 20: ((FLET #:WITHOUT-INTERRUPTS-BODY-83 :IN SAVE-LISP-AND-DIE)) sbcl-rabbit_1 | 21: ((LABELS SB-IMPL::RESTART-LISP :IN SAVE-LISP-AND-DIE)) sbcl-rabbit_1 | sbcl-rabbit_1 | unhandled condition in --disable-debugger mode, quitting </code></pre>  <p>The stack trace seems to indicate something like a bad pointer reference inside the RabbitMq-C code.</p>  <p>To build the docker images, used this file to create an sbcl image:</p>  <pre><code>FROM ubuntu:14.04  # Install things needed to get and install sbcl and quicklisp RUN apt-get -y update &amp;&amp; apt-get install -y wget make pkg-config gcc libffi-dev # Install sbcl RUN cd /usr/local &amp;&amp; \     wget http://prdownloads.sourceforge.net/sbcl/sbcl-1.2.15-x86-64-linux-binary.tar.bz2 &amp;&amp; \     tar xf sbcl-1.2.15-x86-64-linux-binary.tar.bz2 &amp;&amp; \     cd sbcl-1.2.15-x86-64-linux &amp;&amp; \     ./install.sh # Install quicklisp RUN wget https://beta.quicklisp.org/quicklisp.lisp &amp;&amp; \     yes "" | sbcl --load quicklisp.lisp \                   --eval '(quicklisp-quickstart:install)' \                   --eval '(ql:quickload "vecto")' \                   --eval '(ql:add-to-init-file)'\                   --non-interactive  # Mount workspace WORKDIR /app  # Run sbcl CMD sbcl </code></pre>  <p>That is build with <code>docker build -f Dockerfile-sbcl -t sbcl</code>.  I then have a second docker file to build an image with cl-rabbit.</p>  <pre><code># SBCL with cl-rabbit installed FROM sbcl  RUN apt-get update -y &amp;&amp; apt-get install -y librabbitmq-dev  ENV SBCL_CORE_DIR=/sbcl   RUN mkdir -p $SBCL_CORE_DIR RUN sbcl --eval '(ql:quickload :cl-rabbit)' \          --eval '(sb-ext:save-lisp-and-die "/'${SBCL_CORE_DIR}'/sbcl-rabbit.core")'  RUN echo Saved core in $SBCL_CORE_DIR RUN ls -l $SBCL_CORE_DIR  CMD sbcl --core $SBCL_CORE_DIR/sbcl-rabbit.core \     --non-interactive                           \     --load examples.lisp                        \     --eval '(sleep 3)'                          \     --eval '(cl-rabbit.examples::troy-test)'  #CMD ls -l # EOF </code></pre>  <p>This is built using <code>docker-compose build</code> with this docker-compose.yml.</p>  <pre><code>sbcl-rabbit:   build: .   dockerfile: Dockerfile-sbcl-rabbitmq   volumes:    - ../../path/to/lisp://app   links:    - msgbroker   msgbroker:   image: rabbitmq   ports:    - "5672:5672" </code></pre>  <p>When I run this with <code>docker-compose up</code>, I get the output described above.</p>  <p>Examples.lisp is the following:</p>  <pre><code>(require 'cl-rabbit) (in-package :cl-rabbit.examples)  (defvar msgbroker "msgbroker") ;;(setq msgbroker "localhost")  (defun troy-test ()   (with-connection (conn)     (format t "Created connection ~s~%" conn)     (let ((socket (tcp-socket-new conn))           (channel 1))       (format t "Created socket ~s~%" socket)       (socket-open socket msgbroker 5672)       (format t "Opened socket ~s~%" socket)       (login-sasl-plain conn "/" "guest" "guest")       (format t "logged in ~s~%" conn)       (channel-open conn channel)       (format t "Openned channel ~s~%" conn)       (queue-declare conn channel                      :queue "lisp-queue"                      :durable t)       (exchange-declare conn channel "lisp-exchange" "direct"                         :durable t)       (queue-bind conn channel                   :queue "lisp-queue"                   :routing-key "lisp-queue"                   :exchange "lisp-exchange")       (print "Bound queue")       (basic-publish conn channel                      :exchange "lisp-exchange"                      :routing-key "lisp-queue"                      :body "Message from lisp")       (print "Pubished");       (basic-consume conn channel "lisp-queue")       (print "Received")       (let* ((result (consume-message conn))              (message (envelope/message result))              (formatted (format t "Got message: ~s~%content: ~s~%props: ~s"                                 result (babel:octets-to-string (message/body message) :encoding :utf-8)                                 (message/properties message))))         (prin1 formatted)         (pprint formatted)         (cl-rabbit:basic-ack conn channel (envelope/delivery-tag result)))))) </code></pre>  <p>Based on the print statements, the problem is happening in <code>login-sasl-plain</code>.</p>  <p>I have used <code>docker run rabbit_sbcl-rabbit bash</code> to start the Docker container with an interactive shell, and verified, using <code>telnet msgbroker 5672</code>, that port 5672 on host msgbroker does connect to the rabbit MQ server.  If I type text into the telnet session, I see a message from the server that an AMQP connection has been made.</p>  <p>I do not see a similar message when the lisp client attempts to connect.</p>  <p>Using a similar configuration, I have used a Java client to send and receive messages, with the sender and receiver being in one Docker container, and the RabbitMQ server in a different one, as I am attempting here.</p>  <p>Any idea what is going wrong, or further suggestions on things to do to try to diagnose it?</p>