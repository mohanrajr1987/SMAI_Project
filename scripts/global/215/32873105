<p>I have some third-party, non-thread-safe code in a library that I've wrapped in a WCF service for calling from my application.  This WCF service is hosted in IIS 7.5 with it's own application pool.  I want to constrain it so that it only processes one request at a time in a worker process.  I want this so I can guarantee there won't be multiple requests being processed in parallel within a single worker process' memory space at one time.</p>  <p>My initial attempt was set the application pool to...:</p>  <ol> <li>NOT use a web garden</li> <li>Request Limit = 1</li> </ol>  <p>My thinking with the request limit is that once IIS sends one request to the worker process, it would spin up a new worker process for the next request since the first process had now reached it's maximum number of requests of 1.</p>  <p>In practice this almost works.  However, I have found occasional instances where my logs clearly show concurrent requests being processed with the same process ID.  So I don't know if "Request Limit" is what I want, but it breaks down at certain close timings, or if I'm entirely barking up the wrong tree.</p>  <p>Unfortunately, all of the official and unofficial documentation just repeats the same blurb:</p>  <blockquote>   <p>Maximum number of requests an application pool can process before it   is recycled. A value of 0 means the application pool can process an   unlimited number of requests.</p> </blockquote>  <p>It is not clear to me what happens if IIS gets two requests for the same application at almost the exact same time (the one instance I clearly caught had only a 200ms delay between the two requests being sent), and I'm not clear when IIS starts the new worker process?  Is it as it dispatches the request to the first process, or after it has finished that request (in other words, when does it increment request count: beginning or end?).</p>  <p><strong>UPDATE</strong></p>  <p>I do have "application pool recycle due to request limit" events turned on.  I went back and looked at my event for the two concurrent requests from my one very concrete example.  Here's the times:</p>  <ul> <li>Request 1: 12:12:02 --> 12:12:43</li> <li>Request 2: 12:12:03 --> 12:12:03 (finished in hundreds of milliseconds)</li> </ul>  <p>The recycle event in Event Viewer matched the <em>start time</em> of <em>Request 1</em>:</p>  <blockquote>   <p>A worker process with process id of '10496' serving application pool   'Prod - WcfWrapper' has requested a recycle because it   reached its allowed request limit.</p> </blockquote>  <p>Now I see a very interesting word in that event text: "requested".  What does it mean that the application pool <em>requested</em> a recycle?  It isn't actually yet being recycled, but will be soon?  And meanwhile near-concurrent requests will still end up being sent to the existing worker process?</p>