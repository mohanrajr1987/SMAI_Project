<p>We do not have access to the server our ASP.NET MVC 4 EF5 application is running on, but a few weeks ago we were contacted about the application taking 100% CPU and high memory.  The server admins throttled the CPU to around 25-30% to keep the server alive and we made updates to reduce EntityFramework's memory allocation thinking that might be the cause, but it did not fix the slow reponse.</p>  <p>We didn't check the worker process requests window initially, but currently we noticed there were a large number of hanging requests (1-5 hrs) all in the ExecuteRequestHandler state (ManagedPipelineHandler) for form Edit submits (Verb POST).  The admin have not mentioned any errors they can see.</p>  <p>We are requesting troubleshooting assistance and data from the admins, but is this ringing any bells for anyone out there? Are the hung requests generally at fault or could some other request that did run be guilty of causing the rest to hang?  I've looked at the Edit submissions process and we are no looping string concats often noted in articles on the subject.</p>  <p>I realize this is a shot in the dark, but we're out of ideas until the admins are able to get something back to us and even then we have very little experience reading dmps files and the like. The application is using uow + generic repository patterns and ninject DI.</p>  <p><strong>Follow-on:</strong> Could conflicts with accessing entities cause hangs?</p>  <p>We're using CRUD and someone had just mentioned CQRS to me.  I use uow injected at the controller level to handle the updates and call individual using() DbContext statements to handle quick reads.  In the Edit submission process I do a query read of the model to get a copy of it's previous values and do comparisons with the submitted model and update the entity grabbed by uow as needed. A single request could then have up to two context in play, one wrapped in the uow and the other the using() DbContext -- or is my understanding faulty?</p>