<p>I have created my own compound composite by extending the Composite class in a e4 application.</p>  <p>I have then override the dispose method but it never gets called. However if i add a dispose listener on my compound composite or any of the widgets that it contains the listener do get called.</p>  <p>Could somebody explain my why?</p>  <p>Here would be an example.</p>  <pre><code>public class MyComposite extends Composite{ public MyComposite(){     this.addDisposeListener(new DisposeListener(){          @Override         public void widgetDisposed(DisposeEvent e) {             System.out.println("This get printed");         }     }); }  @Override public void dispose(){     System.out.println("This is not printed");     super.dispose(); } } </code></pre>  <p>I have read the javadoc for the dispose method and it says:</p>  <p>NOTE: This method is not called recursively on the descendants of the receiver. This means that, widget implementers can not detect when a widget is being disposed of by re-implementing this method, but should instead listen for the Dispose event. </p>  <p>For the behaviour i am seeing and the javadoc above, seems that the dispose method can not be override because it is ignored. Is this interpretation correct?</p>