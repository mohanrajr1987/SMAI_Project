<p>I've a big problem using threads to refresh the graphical user interface built by SWT. I already studied the documentation but can't figure it out.<br> The task is to copy all files of a folder (only the files, not the subdirectories) to a given target folder.<br> During the process I calculate the size of the files which already are completed and the remaining time.<br> And then in every iteration I try to show this information by stepping a progress bar and changing a status label.</p>  <p>The code looks like this:</p>  <pre><code>public class MyClass {   private Display display;   private ProgressBar progressBar;   private Label statusLabel;    private File inputFile;   private File outputFolder;    ...    public void init(File inputFile, File outputFolder) {     this.inputFile = inputFile;     this.outputFolder = outputFolder;      progressBar.setSelection(0);     statusLabel.setText("");   }    private class CopyFileTask implements Runnable {     @Override     public void run() {       long processedSize = 0L;       long startTime = System.currentTimeMillis();       long totalSize = 0L;        try {         File[] entries = inputFile.getParentFile().listFiles();          for (File theEntry : entries) {           if (theEntry.isFile()) {             totalSize += theEntry.length();           }         }          for (File theEntry : entries) {           if (theEntry.isFile()) {             String entryName = theEntry.getName();             File file = new File(outputFolder, entryName);              InputStream fis = new FileInputStream(theEntry);             FileOutputStream fos = new FileOutputStream(file);              try {               byte[] buffer = new byte[1024];               int len;                while ((len = fis.read(buffer)) &gt; 0) {                 fos.write(buffer, 0, len);                 processedSize += len;                  showProgressInfo(startTime, processedSize, totalSize);               }             } finally {               try {                 fis.close();                 fos.close();               } catch (IOException e) {               }             }           }         }       } catch (Exception e) {         Log.error(e);       }     }      private void showProgressInfo(long startTimeMillis, long processedSize, long totalSize) {       int percent = (int) ((double) processedSize / (double) totalSize * 100.0);       progressBar.setSelection(percent);        long elapsedTimeSeconds = (System.currentTimeMillis() - startTimeMillis) / 1000L;       long remainingSize = totalSize - processedSize;       long remainingTimeSeconds = (long) ((double) remainingSize         / (double) processedSize * elapsedTimeSeconds);       statusLabel.setText(formatFileSize(processedSize)         + " of "         + formatFileSize(totalSize)         + " - Remaining: "         + secondsToString(remainingTimeSeconds));     }      private String formatFileSize(long value) {       // return value in Bytes, KB, MB, GB     }      private String secondsToString(long value) {       // return value in MM:SS     }   } } </code></pre>  <p>I'm starting the process by clicking a button:</p>  <pre><code>startButton.addListener(SWT.Selection, new Listener() {   @Override   public void handleEvent(Event e) {     display.asyncExec(new CopyFileTask());   }     }); </code></pre>  <p>And now my problem is that the GUI is freezing until the whole process was completed or in other words - label and progress bar refresh only at the end.</p>