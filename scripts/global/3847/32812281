<p>I'm investigating the fastest way to extract film duration in R using <code>ffprobe</code> and the <code>data.table</code> package.</p>  <h1>Setup Example Source Media</h1>  <pre class="lang-sh prettyprint-override"><code>wget https://ia801403.us.archive.org/13/items/AboutBan1935/AboutBan1935_512kb.mp4 mv AboutBan1935_512kb.mp4 one.mp4 for file in two.mp4 three.mp4 four.mp4 five.mp4 ; do cp one.mp4 "$file" ; done </code></pre>  <h1>Various Approaches</h1>  <pre class="lang-r prettyprint-override"><code>library(data.table) library(parallel)  # Get locations executables &lt;- Sys.which(c('ffprobe', 'ffmpeg'))  # Duration Function get_duration_parallel &lt;- function(files){   mclapply(X = files, FUN = function(file){     ffprobe_duration &lt;- paste(executables['ffprobe'],                               " -v quiet -print_format compact=print_section=0:nokey=1:escape=csv -show_entries format=duration ",                               '"', file, '"', sep = "")      file_duration &lt;- as.numeric(system(command = ffprobe_duration, intern = TRUE))     return(file_duration)   }, mc.cores = detectCores()) }  get_duration &lt;- function(files){   sapply(X = files, FUN = function(file){     ffprobe_duration &lt;- paste(executables['ffprobe'],                               " -v quiet -print_format compact=print_section=0:nokey=1:escape=csv -show_entries format=duration ",                               '"', file, '"', sep = "")      file_duration &lt;- as.numeric(system(command = ffprobe_duration, intern = TRUE))     return(file_duration)   }) }  # Example table dt &lt;- data.table(Path = list.files(path = ".", pattern = "*.mp4$"))   system.time(   dt[, Seconds := get_duration_parallel(Path)] ) # 9.667 seconds      system.time(   dt[, Seconds := get_duration(Path)] ) # 0.078 seconds </code></pre>  <p>Am I missing any obvious speed-ups?  Scanning a 500-file archive for ffprobe stats takes ~5 minutes in testing.</p>