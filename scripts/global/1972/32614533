<p>I have been playing around with a perl based ticketing tool called Request Tracker.  A plugin exists which allows for nginx to be installed.  The plugin comes with a startup script which starts nginx and fcgi.</p>  <p><strong>From within the web interface, if I granted a user specific rights, they could execute commands on the server as root.</strong></p>  <p>I found that I could only get the the startup script as root, as nginx needs to start as root to bind a low port like 80.  The nginx web server seems to start correctly.  The master process starts as root, and the worker process starts as the user defined in nginx.conf.  </p>  <p>The fcgi process however, does not start as the predefined web user.  Instead, it starts as root.  I assumed that the startup script provided with the plugin would run both as the correct user.  I figured that this was the reason why I was able to execute commands as root on the server.</p>  <p>Instead of having the startup script starting both nginx and fcgi, I started them separately.</p>  <p>I started nginx as root, however I started fcgi as the account associated with the webserver.  The website seems to function normally, and now I can only execute code as the webserver account from the web interface.</p>  <p>My questions:</p>  <ol> <li><p>Is running the CGI as root a definite security flaw, or could this be something that is common/necessary for certain webapps?</p></li> <li><p>Is it acceptable for a web app to execute code on the server as root when logged in with the web app's "admin" account?</p></li> </ol>