<p>First, I used Sqlalchemy's polymorphic architecture. <code>ChildA</code> and <code>ChildB</code> extends <code>Child</code>.</p>  <p><code>ChildA</code> has <code>name</code> column.</p>  <p><code>ChildB</code> has <code>age</code> column.</p>  <pre><code>class Parent(Base):     __tablename__ = 'parent'      id = Column(Integer, primary_key=True)  class Child(Base):     __tablename__ = 'child'      id = Column(Integer, primary_key=True)     parent_id = Column(Integer, ForeignKey('parent.id'))     parent = relationship(Parent, backref='children')  class ChildA(Child):     __tablename__ = 'child_a'      id = Column(Integer, primary_key=True)     name = Column(String(50))  class ChildB(Child):     __tablename__ = 'child_b'      id = Column(Integer, primary_key=True)     age = Column(Integer)   parent = DBSession.query(Parent).first() subquery = parent.children.join(ChildA).subquery() </code></pre>  <p>So I want to access <code>ChildA.name</code> column from <code>subquery</code>. Something like <code>subquery.c.ChildA.name == 'Tom'</code></p>