<p>I want to insert all records from actualEntries table into uniqueEntries table based on actualEntries User_IDs that do not exist in uniqueEntries.</p>  <p>I started with a sql clause containing a <code>NOT IN</code> subquery, which is very slow (when operating on 400K records), and turned it into a <code>LEFT JOIN</code> clause, but the speed has not improved.</p>  <p>Following is my original sql clause containing the <code>NOT IN</code> subquery:</p>  <pre><code>INSERT INTO uniqueEntries    SELECT *    FROM actualEntries    WHERE actualEntries.User_ID NOT IN (     SELECT uniqueEntries.User_ID      FROM uniqueEntries   )   GROUP BY User_ID" </code></pre>  <p>Following is the sql clause after being converted into a <code>LEFT JOIN</code>:</p>  <pre><code>INSERT INTO uniqueEntries    SELECT actualEntries.*    FROM actualEntries    LEFT JOIN uniqueEntries    ON uniqueEntries.User_ID = actualEntries.User_ID    WHERE uniqueEntries.User_ID IS NULL    GROUP BY User_ID </code></pre>  <p>When I run both querys on 50 records they complete right away, but when I run them on 400K records, they don't complete. </p>  <p>What's the quickest way to get this operation done?</p>  <p><strong>UPDATE / SOLUTION</strong>: As per @Rahul, @Steve E and @fhthiella I updated the LEFT JOIN as follows, and decreased the processing time to 2 minutes for 470K records.</p>  <pre><code>INSERT INTO uniqueEntries    SELECT actualEntries.*    FROM actualEntries    LEFT JOIN uniqueEntries    ON uniqueEntries.id = actualEntries.id    WHERE uniqueEntries.User_ID IS NULL GROUP BY User_ID </code></pre>