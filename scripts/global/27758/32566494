<p>I would be grateful if anyone could help me to solve an issue. My app uses such a sequens of scenes.  <a href="http://i.stack.imgur.com/CMGoi.png" rel="nofollow"><img src="http://i.stack.imgur.com/CMGoi.png" alt="enter image description here"></a> </p>  <p>The information to be shown in the tables' cells is loaded once for every scene from the web source. Than, on the basis of the user choice (after user selects a cell) the new scene is filled with data just the same way as it was done with the previous.  <a href="http://i.stack.imgur.com/KnQJN.png" rel="nofollow"><img src="http://i.stack.imgur.com/KnQJN.png" alt="enter image description here"></a><a href="http://i.stack.imgur.com/sdX9U.png" rel="nofollow"><img src="http://i.stack.imgur.com/sdX9U.png" alt="enter image description here"></a> Everything goes ok and I can return from the certain scene with a tableview to the previous one without losing data, but, when I open the scene #6 which is the last one seen on the first image something goes wrong. I can see all the table cells of the scenes #3-5 before it, and the data is not lost. But when I open the scene #2 I find out that the data is gone and so the table is empty. <a href="http://i.stack.imgur.com/uCLdt.png" rel="nofollow"><img src="http://i.stack.imgur.com/uCLdt.png" alt="enter image description here"></a></p>  <p>Another thing I want to mention is that I decided to make all of the 2-5 view controllers the subclasses of a view controller which has methods for filling corresponding views with data when it is loaded. Before this subclassing all of those view controllers used to be subclasses of UIViewController and everything appeared to be ok. But when I decided to put all the same code into a special class I noticed this bug.</p>  <p>The parent class:</p>  <pre><code>// //  ChoosingStepsViewController.h //  Med // //  Created by User on 9/10/15. //  Copyright (c) 2015 User. All rights reserved. //  #import &lt;UIKit/UIKit.h&gt; #import "Region.h" #import "ActivityIndicatorManager.h" #import "GetInfoNotifications.h" #import "APIRequests.h"  @interface ChoosingStepsViewController : UIViewController &lt;UITableViewDelegate, UITableViewDataSource, UISearchBarDelegate, UISearchDisplayDelegate&gt;  @property (retain, nonatomic) IBOutlet UITableView *tableView; @property (weak, nonatomic) IBOutlet UISearchBar *searchBar;  @property (weak, nonatomic) NSString *notificationName; @property (weak, nonatomic) UIActivityIndicatorView *activityView;  @property (retain, nonatomic) NSMutableDictionary *data; @property (retain, nonatomic) NSMutableArray *allKeys; @property (retain, nonatomic) NSMutableArray *filteredData;  -(void)getData; -(void)fillTheViewWithData: (NSNotification*)notification; -(void)addActivityIndicator; -(void)removeActivityIndicator; -(void)filterContentForSearchText: (NSString *)searchText scope:(NSString*)scope; -(void) searchBarTextDidEndEditing:(UISearchBar *)searchBar; -(void) searchBarSearchButtonClicked:(UISearchBar *)searchBar;   @end // //  ChoosingStepsViewController.m //  Med // //  Created by User on 9/10/15. //  Copyright (c) 2015 User. All rights reserved. //  #import "ChoosingStepsViewController.h"  @interface ChoosingStepsViewController (){     } @end  @implementation ChoosingStepsViewController  @synthesize notificationName;   -(void)getData{     [APIRequests getDataWithNotificationName:notificationName]; }  -(void)fillTheViewWithData: (NSNotification*)notification{     self.allKeys = [[notification.userInfo objectForKey:@"data"] allKeys];     self.data = [notification.userInfo objectForKey:@"data"];     [self.tableView reloadData];      [self removeActivityIndicator]; }  #pragma mark - Activiy indicator methods  -(void)addActivityIndicator{     self.activityView = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhiteLarge];     self.activityView.center = self.view.center;     [self.activityView startAnimating];     [self.view addSubview:self.activityView]; }  -(void)removeActivityIndicator{     [self.activityView stopAnimating]; }  #pragma mark - Content filtering  - (void)filterContentForSearchText: (NSString *)searchText scope:(NSString*)scope{     [self.filteredData removeAllObjects];      self.filteredData = [[_data allValues] filteredArrayUsingPredicate:                                                                    [NSPredicate predicateWithFormat:@"SELF CONTAINS[c] %@", searchText]]; }  #pragma mark - UISearchDisplayController Delegate Methods  -(void) searchBarTextDidEndEditing:(UISearchBar *)searchBar{     [searchBar resignFirstResponder]; }  -(void) searchBarSearchButtonClicked:(UISearchBar *)searchBar{     [searchBar resignFirstResponder]; }  #pragma mark - Table specific appearence   -(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{     return [self.data count]; }  -(UITableViewCell*)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{     static NSString *identifier = @"TableCell";     UITableViewCell *cell;     if (cell == nil) {         cell = (UITableViewCell *)[self.tableView dequeueReusableCellWithIdentifier:identifier];     }     NSInteger row = indexPath.row;     cell.textLabel.text = [self.data objectForKey:[self.allKeys objectAtIndex:row]];     return cell; }  -(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{     return 70; }  -(CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section{     return 0.01f; }  @end </code></pre>  <p>The example of the 2 scene view controller:</p>  <pre><code>#import &lt;UIKit/UIKit.h&gt; #import "ChoosingStepsViewController.h" #import "Region.h" #import "ActivityIndicatorManager.h" #import "GetInfoNotifications.h" #import "APIRequests.h"  @interface ChoosingRegionViewController : ChoosingStepsViewController   @property (retain, nonatomic) NSMutableArray *filteredRegions;  @end   @implementation ChoosingRegionViewController  - (void)viewDidLoad {     [super viewDidLoad];     self.activityView = [ActivityIndicatorManager addActivityIndicator:self.activityView toView:self.view];     [self getData];     [GetInfoNotifications registerRequestNotificationWithName:NotificationName forObserver:self withSelector:@selector(fillTheViewWithData:)]; }  -(void)getData{     [APIRequests getDataWithNotificationName:NotificationName andRequestAddress:RegionsRequestAddress]; }  -(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{     Region *region = [Region sharedRegion];     NSInteger row = indexPath.row;     region.regionName = [self.data objectForKey:[self.allKeys objectAtIndex:row]];     region.regionId = [self.allKeys objectAtIndex:row];     }  @end </code></pre>