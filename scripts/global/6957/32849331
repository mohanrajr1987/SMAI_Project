<p>I'm trying to do normal mapping in my fragment shader which causes rendering issues. I've boiled down the problem to the following:</p>  <p>I have my normal vector n and tangent t. If I do:</p>  <pre><code>return n; </code></pre>  <p>It all works fine and dandy (but obviously not normal mapped). However, if I do:</p>  <pre><code>return n + 0.0 * t; </code></pre>  <p>It screws everything up. To me, these seem like they should be the same thing, but apparently they're not.</p>  <pre><code>return n + vec3(0.0, 0.0, 0.0); </code></pre>  <p>Works fine, so obviously the issue is that:</p>  <pre><code>0.0 * t != vec3(0.0, 0.0, 0.0) </code></pre>  <p>The only case I can think of where this can happen is if x, y, or z in b is infinity. However, that's not the case as: A:</p>  <pre><code>0.0 * vec3(1.0/0.0, 1.0/0.0, 1.0/0.0) </code></pre>  <p>works fine, and B: I've checked if it is inifinity using isinf(), which returns false.</p>  <p>I've also checked my code for any instance where the tangent could possibly be infinity (when normalized) but removing normalization doesn't fix it. I've also checked so the length of all tangent vectors are 1 and they are so it shouldn't be a problem either way.</p>  <p>Edit: I wasn't aware of the NaN possibility before so now that I've checked that and confirmed that that's indeed the case I now know the problem isn't with my GLSL code but somewhere in my OBJ model importing code. I guess this question can be marked as solved now?</p>