<p>I have a problem with shaders. Whenever I use:</p>  <pre><code>                shader.start();                  //shader.loadLight(light);                 glBegin(GL_QUADS);                 {                     glVertex2f(0, 0);                     glVertex2f(0, HEIGHT);                     glVertex2f(WIDTH, HEIGHT);                     glVertex2f(WIDTH, 0);                 }                 glEnd(); </code></pre>  <p>the quad doesn't show up. It works outside the start/stop though. This is my code:</p>  <pre><code>public class Main {      private static final int WIDTH = 1280;     private static final int HEIGHT = 720;      private static StaticShader shader;      private static Light light = new Light(new Vector3f(1,1,1), new Vector3f(1,0,0));      public static void main(String[] args) {           initDisplay();         initGL();         shader = new StaticShader();         gameLoop();          Display.destroy();         shader.cleanUp();      }      private static void gameLoop() {         while (!Display.isCloseRequested()) {             glClear(GL_COLOR_BUFFER_BIT);              shader.start();              //shader.loadLight(light);             glBegin(GL_QUADS);             {                 glVertex2f(0, 0);                 glVertex2f(0, HEIGHT);                 glVertex2f(WIDTH, HEIGHT);                 glVertex2f(WIDTH, 0);             }             glEnd();              shader.stop();             Display.update();             Display.sync(60);          }     }      private static void initGL() {         glMatrixMode(GL_PROJECTION);          glLoadIdentity();          glOrtho(0, WIDTH, 0, HEIGHT, -1, 1);          glMatrixMode(GL_MODELVIEW);          glDisable(GL_DEPTH_TEST);          glClearColor(1, 1, 1, 1);     }      private static void initDisplay() {         try {             Display.setDisplayMode(new DisplayMode(WIDTH, HEIGHT));             Display.create();          } catch (LWJGLException e) {             e.printStackTrace();         }     }  } </code></pre>  <p>Shader Class:</p>  <pre><code>public abstract class ShaderProgram {      private int programID;     private int vertexShaderID;     private int fragmentShaderID;      private static FloatBuffer matrixBuffer = BufferUtils.createFloatBuffer(16);      public ShaderProgram(String vertexFile, String fragmentFile) {         vertexShaderID = loadShader(vertexFile, GL20.GL_VERTEX_SHADER);         fragmentShaderID = loadShader(fragmentFile, GL20.GL_FRAGMENT_SHADER);         programID = GL20.glCreateProgram();         GL20.glAttachShader(programID, vertexShaderID);         GL20.glAttachShader(programID, fragmentShaderID);         bindAttributes();         GL20.glLinkProgram(programID);         GL20.glValidateProgram(programID);         getAllUniformLocations();     }      protected abstract void getAllUniformLocations();      protected int getUniformLocation(String uniformName) {         return GL20.glGetUniformLocation(programID, uniformName);     }      protected void loadVector(int location, Vector3f vector) {         GL20.glUniform3f(location, vector.x, vector.y, vector.z);     }      protected void loadFloat(int location, float value) {         GL20.glUniform1f(location, value);     }      protected void loadBoolean(int location, boolean value) {         float toLoad = 0;         if(value) {             toLoad = 1;         }         GL20.glUniform1f(location, toLoad);     }      protected void loadMatrix(int location, Matrix4f matrix) {         matrix.store(matrixBuffer);         matrixBuffer.flip();         GL20.glUniformMatrix4(location, false, matrixBuffer);     }      public void start() {         GL20.glUseProgram(programID);     }      public void stop() {         GL20.glUseProgram(0);     }      public void cleanUp() {         stop();         GL20.glDetachShader(programID, vertexShaderID);         GL20.glDetachShader(programID, fragmentShaderID);         GL20.glDeleteShader(vertexShaderID);         GL20.glDeleteShader(fragmentShaderID);         GL20.glDeleteProgram(programID);     }      protected abstract void bindAttributes();      protected void bindAttribute(int attribute, String variableName) {         GL20.glBindAttribLocation(programID, attribute, variableName);     }      private static int loadShader(String file, int type) {         StringBuilder shaderSource = new StringBuilder();         try {             BufferedReader reader = new BufferedReader(new FileReader(file));             String line;             while ((line = reader.readLine()) != null) {                 shaderSource.append(line).append("\n");             }             reader.close();         } catch (IOException e) {             System.err.println("Could not read file!");             e.printStackTrace();             System.exit(-1);         }         int shaderID = GL20.glCreateShader(type);         GL20.glShaderSource(shaderID, shaderSource);         GL20.glCompileShader(shaderID);         if (GL20.glGetShaderi(shaderID, GL20.GL_COMPILE_STATUS) == GL11.GL_FALSE) {             System.out.println(GL20.glGetShaderInfoLog(shaderID, 500));             System.err.println("Could not compile shader.");             System.exit(-1);         }         return shaderID;     }  } </code></pre>  <p>Static Shader:</p>  <pre><code>public class StaticShader extends ShaderProgram {      private static final String VERTEX_FILE = "src/me/mateo226/shaders/vertexShader.txt";     private static final String FRAGMENT_FILE = "src/me/mateo226/shaders/fragmentShader.txt";      private int location_lightPosition;     private int location_lightColor;      public StaticShader() {         super(VERTEX_FILE, FRAGMENT_FILE);      }      @Override     protected void bindAttributes() {         super.bindAttribute(0, "position");      }      @Override     protected void getAllUniformLocations() {         location_lightPosition = super.getUniformLocation("lightPosition");         location_lightColor = super.getUniformLocation("lightColor");      }      public void loadLight(Light light) {         super.loadVector(location_lightPosition, new Vector3f(50, 50, 0));         super.loadVector(location_lightColor, new Vector3f(1, 1, 0));     }  } </code></pre>  <p>My vertex and fragment shader are empty. I tried adding gl_FragColor = vec(1.0, 0.0, 0.0, 1.0) to the frag shader but still nothing happens...</p>  <p>It workned yesterday, but I guess I changed something and saved it, and today it  just wont work! Any help is appreciated! Cheers!</p>