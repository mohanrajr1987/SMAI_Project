<p>How do I assign an explicit <em>uniform location</em> when I want to use the uniform in <em>different shader stages of the same program</em>?</p>  <p>When automatic assignment is used, uniforms in different stages are assigned to the same location when the identifiers match. But how can I define the location in the shader using the </p>  <pre><code>layout (location = ...) </code></pre>  <p>syntax?</p>  <p>Following quote from: <a href="https://www.opengl.org/wiki/Uniform_(GLSL)/Explicit_Uniform_Location" rel="nofollow">https://www.opengl.org/wiki/Uniform_(GLSL)/Explicit_Uniform_Location</a></p>  <blockquote>   <p>It is illegal to assign the same uniform location to two uniforms in the same shader or the same program. Even if those two uniforms have the same name and type, and are defined in different shader stages, it is not legal to explicitly assign them the same uniform location; a linker error will occur.</p> </blockquote>  <p>Following quote from the GLSL Spec:</p>  <blockquote>   <p>No two default-block uniform variables in the program can have the same location,   even if they are unused, otherwise a compile-time or link-time error will be generated.</p> </blockquote>  <p>I'm using OpenGL 4.3.</p>  <p><strong>Due to immense READING  THE CODE, I figured out, that the uniform is unused.</strong> That leads to the following situation: On a <em>GTX 780</em> the following code runs without problems (although it seems it shouldn't). On an <em>Intel HD 5500</em> onboard graphics chip the code produces a <em>SHADER_ID_LINK</em> error at link time, according to the <em>GL_ARB_DEBUG_OUTPUT</em> extension. It states, that the uniform location overlaps another uniform.</p>  <p>Vertex Shader:</p>  <pre><code>#version 430 core  layout(location = 0) in vec4 vPosition; layout(location = 2) in vec4 vTexCoord;  layout(location = 0) uniform mat4 WorldMatrix; // &lt;-- unused in both stages  out vec4 fPosition; out vec4 fTexCoord;  void main() { ... } </code></pre>  <p>Fragment Shader:</p>  <pre><code>#version 430 core  in vec4 fPosition; in vec4 fTexCoord;  layout(location = 0) out vec4 Albedo; layout(location = 1) out vec4 Normal;  layout(location = 0) uniform mat4 WorldMatrix; // &lt;-- unused in both stages layout(location = 1) uniform mat4 InverseViewProjectionMatrix; layout(location = 2) uniform samplerCube Cubemap;  void main() { ... } </code></pre>  <p>However, when the uniform is used, no problems occour. Assumed I interpret the GLSL Spec right, this seems to be not as it's supposed. Although, this is exactly how I would like it to function.</p>  <p><strong>Still, there is the problem of <em>overlapping uniforms</em>, when the uniform is not used.</strong></p>