<p>I'm trying to implement PCF for a shadow cube map in OpenGL 2.0. I thought I'd found a solution <a href="http://www.sunandblackcat.com/tipFullView.php?l=eng&amp;topicid=36" rel="nofollow">here</a> (search for <code>Percentage closer filtering (PCF) algorithm</code> to find the start of the section on cube map PCF), but the code is relying on the <code>samplerCubeShadow</code> that is unavailable in OpenGL 2.0 so I can't use the call to <code>texture(samplerCubeShadow(), vec4())</code> shown on that page.</p>  <p>The first part of this question is: Is there a way to retrieve the same results from a <code>samplerCube</code> in OpenGL 2.0/GLSL 1.10? By using a <code>textureCube</code> or something else?</p>  <p>The second part relates to an idea I have to solve this problem. The image below illustrates what I'd like to do.</p>  <p><a href="http://i.stack.imgur.com/dJgb0.png" rel="nofollow"><img src="http://i.stack.imgur.com/dJgb0.png" alt="Light to Vertex/Plain"></a></p>  <p>The solid blue line and the dotted red lines are all vectors coming from one face of the <code>samplerCube</code> that stores my depth values. The blue line's intersection with the dark grey square in the center of the black squares represents the sampled point from the cube. I'd like to create a plane (represented by the light grey rectangle) that is perpendicular to the blue vector. Then I'd like to sample the 4 black points from the camera by casting Z vectors from the light position (these are the dotted red lines) to their x,Y values on that plane. Afterwards, I would use those values combined with the original sample's values to calculate the PCF shadow value. </p>  <p>Is this a viable and efficient way of calculating PCF for a pointlight/cubemap? And how would I create the parallel plane and then retrieve the X and Y coordinates I need from it?</p>