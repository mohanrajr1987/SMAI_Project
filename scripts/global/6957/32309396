<p>I`m trying to implement shadowmaps in Java/OpenGL with GLSL. It seems to be impossible to create shadow maps with Java/OpenGL, there is almost no working example with perspective projection.</p>  <p>What I think is, that the matrix calculation isnt working well.</p>  <p>Here is my shadow result (camera view/proj = shadow view/proj): <a href="http://i.stack.imgur.com/YXR4s.jpg" rel="nofollow"><img src="http://i.stack.imgur.com/YXR4s.jpg" alt="enter image description here"></a></p>  <p>And here I have mapped the linearized depth buffer on a rectangle, its a little bit rotated: <a href="http://i.stack.imgur.com/QfYXW.jpg" rel="nofollow"><img src="http://i.stack.imgur.com/QfYXW.jpg" alt="enter image description here"></a></p>  <p>It seems like the depth buffer is flipped, because on every surface I have mapped it, it is x or/and y flipped. But maybe its just a UV bug.</p>  <p>So the major question is: Can you give me a hint what may happened?</p>  <p>Here are some code snippets:</p>  <p>Final Shader: Depth &amp; Shadow calculation (uSamplerShadow is sampler2D)</p>  <pre><code>float shadowValue=0.0; vec4 lightVertexPosition2=vShadowCoord; lightVertexPosition2/=lightVertexPosition2.w; for(float x=-0.001;x&lt;=0.001;x+=0.0005)     for(float y=-0.001;y&lt;=0.001;y+=0.0005)     {         if(texture2D(uSamplerShadow,lightVertexPosition2.xy+vec2(x,y)).r&gt;=lightVertexPosition2.z)             shadowValue+=1.0;     } shadowValue/=16.0;  float f = 100.0; float n = 0.1; float z = (2 * n) / (f + n - texture2D(uSamplerShadow,vTexCoords).x * (f - n));  outColor = vec4(vec3(z) , 1.0); </code></pre>  <p>Final Shader: Shadow coord calulation: (No bias matrix implemented yet)</p>  <pre><code>vShadowCoord = uProjectionMatrix * uShadowViewMatrix * uWorldMatrix * vec4(aPosition,1.0); </code></pre>  <p>Depth Shader</p>  <pre><code>fragmentdepth = gl_FragCoord.z; </code></pre>  <p>You can check my texture properties too, but I have already tried all combinations I found in on google :)</p>  <pre><code>            shadowTextureProperties.setMagFilter(EnumTextureFilter.NEAREST);     shadowTextureProperties.setMinFilter(EnumTextureFilter.NEAREST);     shadowTextureProperties.setWrapS(EnumTextureWrap.CLAMP_TO_EDGE);     shadowTextureProperties.setWrapT(EnumTextureWrap.CLAMP_TO_EDGE);     shadowTextureProperties.setInternalColorFormat(EnumTextureColorFormat.DEPTH_COMPONENT16);     shadowTextureProperties.setSrcColorFormat(EnumTextureColorFormat.DEPTH_COMPONENT);     shadowTextureProperties.setValueFormat(EnumValueFormat.FLOAT);     shadowTextureProperties.setPname(new int[]{GL14.GL_TEXTURE_COMPARE_MODE, GL14.GL_TEXTURE_COMPARE_FUNC});     shadowTextureProperties.setParam(new int[]{GL11.GL_NONE, GL11.GL_LEQUAL}); </code></pre>