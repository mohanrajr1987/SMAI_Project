<p>I already started a topic about my issue <a href="http://stackoverflow.com/questions/32894835/opengl-uniform-buffer-objects-working-with-nvidia-drivers-but-not-with-intel-chi">OpenGL Uniform buffer objects working with NVidia drivers but not with Intel Chipset drivers</a> but I think I've managed to focus on the main problem. So to resume, I have an UBO which I use to make basic collision detection withing shaders. I use the transform feedback techniques.</p>  <h3>The problem (only with Intel drivers, works well with Nvidia)</h3>  <p>When I use my UBO within a fragment shader, everything works as expected. When I use it within a vertex shader, my rendering is messed up.</p>  <p>I think that my UBO implementation is correct because I've made a minimal program which use the same code which works well. You can find the source code there <a href="http://pastebin.com/PJjXvQV7" rel="nofollow">http://pastebin.com/PJjXvQV7</a>.</p>  <h3>Demo's</h3>  <p>(sorry about the links, I don't have enough reputation...)</p>  <p>Here is the result when I totally <strong>disable the UBO</strong> within the vertex shader (and all the code related to it). I don't post the shader since it's a basic pass-through shader. <strong><em>i.imgur.com/uqDiqHF.png</em></strong></p>  <p>Here is the result when I <strong>enable the UBO</strong> to make my collision test.</p>  <p><em>The shader</em></p>  <pre><code>#define COLLIDER_SIZE 64 layout(std140) uniform collider_data {     vec4 collider[COLLIDER_SIZE]; };  in vec3 Color0; out vec3 outColor;  void main() {     outColor = Color0;      for (int i = 1; i &lt; collider[0].x &amp;&amp; i &lt; COLLIDER_SIZE; ++i)         if (intersect(realPos, realOutPos, collider[i].xy, collider[i].zw) == true)             outColor = vec3(1); } </code></pre>  <p>Then instead of getting white particles on collision I just get nothing rendered. <strong><em>i.imgur.com/jASdtbX.png</em></strong></p>  <p>My implementation works as you can see on this screenshot : <strong><em>i.imgur.com/QNcl3Lq.png</em></strong></p>  <p>I have no errors/warnings during my shader compilation. I don't have any error with glGetError(). It's not about drivers limitation.</p>  <p><strong>So the question</strong></p>  <p>Is there any chances that I'm stuck into an "OpenGL random state hell bug" or do someone already got this kind of issue ? Since it works within a vertex shader in my minimal program, can it be because I'm using transform feedback technique ?</p>  <p>Thanks for reading.</p>  <p><strong>EDIT 1</strong> So in fact, the first time I use my particle system with the UBO, I can see particles for 1 frame then nothing.</p>