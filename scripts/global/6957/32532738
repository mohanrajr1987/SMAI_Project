<p>I have this strange behaviour with a vertex shader I don't understand (this is an example from the super bible 6):</p>  <p>shader:</p>  <pre><code> #version 430 core  layout (location = 0) in vec4 offset;  void main(void) {       const vec4 vertices[3] = vec4[3](vec4(0.25, -0.25, 0.5, 1.0), vec4(-0.25, -0.25, 0.5, 1.0), vec4(0.25, 0.25, 0.5, 1.0));      gl_Position = vertices[gl_VertexID] + offset;  } </code></pre>  <p>I try to pass data into the shader like this:</p>  <pre><code>void display() { // GLUT Display func     int currentTime = glutGet(GLUT_ELAPSED_TIME);    GLfloat vertexAttrib[] = { (float)sin((float)currentTime) * 0.5f,                               (float)cos((float)currentTime) * 0.6f,                               0.0f, 0.0f};     glVertexAttrib4fv(0, vertexAttrib);    glDrawArrays(GL_TRIANGLES, 0 , 3);     glFlush(); } </code></pre>  <p>Like the source above, <strong>it doesn't render anything</strong>. When I change the Vertex shader attribute index from <code>(location = 0)</code> to <code>(location = 1)</code> it shows a triangle, but it doesn't move, nor seems to be affected by the <code>offset</code> variable.</p>  <p>I read on a <a href="https://www.opengl.org/discussion_boards/showthread.php/185728-glVertexAttrib4fv-not-working" rel="nofollow">opengl forum discussion</a> that with an AMD GPU (which I indeed have) the <code>location = 0</code> won't work (can someone confirm?). If I change the </p>  <p><code>glVertexAttrib4fv(0, vertexAttrib);</code> </p>  <p>index to </p>  <p><code>glVertexAttrib4fv(1, vertexAttrib);</code>, </p>  <p>I have to change the shader attribute index to </p>  <p><code>location = 2</code> </p>  <p>to at least see a triangle. So, what is happening here? I hope I described the issue not too confusing, any help much appreciated!</p>  <p><strong>EDIT:</strong></p>  <p>I inserted <code>glGetError()</code> after each line in the <code>render()</code> function, but it always returns <code>GL_NO_ERROR</code></p>  <p><strong>EDIT 2:</strong></p>  <p>I also got some context information for the experts of you:</p>  <pre><code>GL VERSION: 4.3.12458 Compatibility Profile Context 13.200.0.0 GLSL VERSION: 4.30 GL_VENDOR: ATI Technologies Inc. GL_RENDERER: AMD Radeon R9 200 Series </code></pre>  <p><strong>EDIT 3</strong></p>  <p>I want to add I check if the shader compiles like this:</p>  <pre><code>// Check Vertex Shader glGetShaderiv(vertex_shader, GL_COMPILE_STATUS, &amp;Result); glGetShaderiv(vertex_shader, GL_INFO_LOG_LENGTH, &amp;InfoLogLength); std::vector&lt;char&gt; VertexShaderErrorMessage(InfoLogLength); glGetShaderInfoLog(vertex_shader, InfoLogLength, NULL, &amp;VertexShaderErrorMessage[0]); fprintf(stdout, "\n RESULT VERTEX: %s\n", &amp;VertexShaderErrorMessage[0]); // prints "RESULT VERTEX: (null)" </code></pre>