<p>I'm trying to make an effect in fragment shader... This is what I get without effects:</p>  <p><a href="http://i.stack.imgur.com/LNaFu.png" rel="nofollow"><img src="http://i.stack.imgur.com/LNaFu.png" alt="shader base"></a></p>  <p>This is what I get by multiplying the color by a 'gradient':</p>  <pre><code>float fragPosition = gl_FragCoord.y / screenSize.y; outgoingLight /= fragPosition; </code></pre>  <p><a href="http://i.stack.imgur.com/vIqMq.png" rel="nofollow"><img src="http://i.stack.imgur.com/vIqMq.png" alt="multiplying fragment position y"></a></p>  <p>So I tried to dividing but the color is kind of burned by light</p>  <pre><code>float fragPosition = gl_FragCoord.y / screenSize.y; outgoingLight /= fragPosition; </code></pre>  <p><a href="http://i.stack.imgur.com/4Pzae.png" rel="nofollow"><img src="http://i.stack.imgur.com/4Pzae.png" alt="dividing fragment position y"></a></p>  <p>And here are the kind of colors/gradient I want (per face if available):</p>  <p><a href="http://i.stack.imgur.com/5pLVw.png" rel="nofollow"><img src="http://i.stack.imgur.com/5pLVw.png" alt="what I want"></a></p>  <p><strong>EDIT</strong></p>  <p>Here is the vertex shader (I use three JS chunks)</p>  <pre><code>precision highp float; precision highp int;  #define PHONG  uniform float time; attribute vec4 data;  varying vec3 vViewPosition;  #ifndef FLAT_SHADED      varying vec3 vNormal;  #endif  $common $map_pars_vertex $lightmap_pars_vertex $envmap_pars_vertex $lights_phong_pars_vertex $color_pars_vertex $morphtarget_pars_vertex $skinning_pars_vertex $shadowmap_pars_vertex $logdepthbuf_pars_vertex  void main(){      float displacementAmount = data.x;     int x = int(data.y);     int y = int(data.z);     bool edge = bool(data.w);      $map_vertex     $lightmap_vertex     $color_vertex     $morphnormal_vertex     $skinbase_vertex     $skinnormal_vertex     $defaultnormal_vertex       #ifndef FLAT_SHADED          vNormal = normalize( transformedNormal );      #endif      $morphtarget_vertex     $skinning_verte     $default_vertex      if( edge == false ){          vec3 displacement = vec3(sin(time * 0.001 * displacementAmount) * 0.2);          mvPosition = mvPosition + vec4(displacement, 1.0);          gl_Position = projectionMatrix * mvPosition;      }      $logdepthbuf_vertex      vViewPosition = -mvPosition.xyz;      $worldpos_vertex     $envmap_vertex     $lights_phong_vertex     $shadowmap_vertex      vec3 newPosition = position + vec3(mvPosition.xyz);      gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0); </code></pre>  <p><strong>EDIT 2:</strong></p>  <p>After @gamedevelopmentgerm suggestion to mix here is what I get:</p>  <p><a href="http://i.stack.imgur.com/LkB5t.png" rel="nofollow"><img src="http://i.stack.imgur.com/LkB5t.png" alt="Near wanted result"></a></p>  <p>It's much better what I get but is it possible to avoid black to white gradient in background. I only want blue to white.</p>