<p>I'm working on a project using OpenSceneGraph where I need to send a vertex texture to a vertex program, but no matter how many times I've tried and looked for errors, I just can't seem to figure out why the texture never reaches the shader program. Every other uniform I send (even uniforms updated through a osg::Uniform::Callback) arrive properly, but whenever I sample my texture, I just get a black pixel...</p>  <p>Ideally, I should be using 3D textures, but for the sake of simplicity, I'm using 2D textures, just to try and get it working. I tested my texcoord to see if they weren't messed up, but they look fine... The only thing I can think of is some ref_ptr getting deleted somehow: when debugging, I stumbled into a weird debugger behaviour where at the end of my linkStateSet function, the debugger jumped back a few lines and my ref_ptr&lt; Texture2D> was set to 0. So I kept this ref_ptr within my class (as opposed to the scope it was constructed in) and this didn't seem to happen again.</p>  <p>As a note, I like to derive from the OSG classes a lot, so it could be that I'm doing something wrong at some point, even though everything works but the texture.</p>  <p>Heres some code:</p>  <p>WaterSurfaceShader.cpp</p>  <pre><code>WaterSurfaceShader::WaterSurfaceShader()  {      _vertexProgram   = readFile( "shader/vertexdisplacement.vs" );     _fragmentProgram = readFile( "shader/vertexdisplacement.fs" );      _shaderProgram = OSGShaderFactory::getInstance()-&gt;createShaderProgram( _vertexProgram, _fragmentProgram );      _noiseTexture = buildNoiseTexture( 4 );  }  osg::ref_ptr&lt; osg::Texture2D &gt; WaterSurfaceShader::buildNoiseTexture( unsigned int pixelSize ) {             osg::ref_ptr&lt; osg::Image &gt; image = osgDB::readImageFile( "~/Desktop/bunny100.jpg" );     osg::ref_ptr&lt; osg::Texture2D &gt; texture = new osg::Texture2D( image );      texture-&gt;setFilter( osg::Texture2D::MIN_FILTER, osg::Texture2D::LINEAR );     texture-&gt;setFilter( osg::Texture2D::MAG_FILTER, osg::Texture2D::LINEAR );      texture-&gt;setWrap( osg::Texture2D::WRAP_S, osg::Texture2D::MIRROR );     texture-&gt;setWrap( osg::Texture2D::WRAP_T, osg::Texture2D::MIRROR );     texture-&gt;setWrap( osg::Texture2D::WRAP_R, osg::Texture2D::MIRROR );          texture-&gt;setDataVariance( osg::Object::DYNAMIC );      return texture; }  void WaterSurfaceShader::linkStateSet( osg::ref_ptr&lt; osg::StateSet &gt; stateSet ) {                _timeUniform = new osg::Uniform( osg::Uniform::FLOAT, TimeLocation.c_str() );     _timeUniform-&gt;set( 0.0f );     _timeUniform-&gt;setUpdateCallback( new TimeUniformCallback() );     stateSet-&gt;addUniform( _timeUniform );         stateSet-&gt;setTextureAttributeAndModes( 0, _noiseTexture, osg::StateAttribute::ON );      osg::ref_ptr&lt; osg::Uniform &gt; uniform = new osg::Uniform( "vertexTexture0", 0 );     stateSet-&gt;addUniform( uniform );       stateSet-&gt;setAttributeAndModes( _shaderProgram, osg::StateAttribute::ON ); } </code></pre>