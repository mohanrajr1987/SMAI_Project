<p><strong>Please note:</strong> Although this question mentions Java, I think it's an OOP/concurrency problem at heart and can probably be answered by anyone with significant programming experience.</p>  <hr>  <p>So I'm building a <code>ConfigurationLoader</code> that will read <code>Configuration</code> POJO from a remote service and make it available via an API. A few things:</p>  <ul> <li>As soon as the <code>ConfigurationLoader</code> is asked for the <code>Configuration</code> the first time, a background thread (worker) will ping the remote service every, say, 30 seconds, for updates and then apply those updates to the <code>Configuration</code> instance; and</li> <li>If the <code>Configuration</code> is modified, the background worker will be notified of the change and will push the "new" <code>Configuration</code> to the remote service;</li> <li>Both the <code>ConfigurationLoader</code> and the <code>Configuration</code> must be thread-safe</li> </ul>  <p>So when I think "thread safety" the first thing I think of is <em>immutability</em>, which leads me towards excellent projects like <a href="http://immutables.github.io" rel="nofollow">Immutables</a>. The problem is that <code>Configuration</code> can't be immutable because we need to be able to change it on the client-side and then let the loader ripple those changes back to the server.</p>  <p>My next thought was to try and make both <code>ConfigurationLoader</code> and <code>Configuration</code> singletons, but the problem is there is that the <code>ConfigurationLoader</code> takes a lot of arguments to instantiate it, and as <a href="http://stackoverflow.com/a/1051076/4009451">this excellent answer points out</a>, a singleton that takes arguments in construction is not a true singleton.</p>  <pre><code>// Groovy pseudo-code class Configuration {     // Immutable? Singleton? Other? }  class ConfigurationLoader {     // private fields     Configuration configuration      ConfigurationLoader(int fizz, boolean buzz, Foo foo, List&lt;Bar&gt; bars) {         super()          this.fizz = fizz         this.buzz = buzz;         // etc.     }      Configuration loadConfiguration() {         if(configuration == null) {             // Create background worker that will constantly update             // 'configuration'         }     } } </code></pre>  <p><strong>What are my options here?</strong> How do I create both the loader and the config to be thread-safe, where the config is changeable by the client-side (on-demand) or asynchronously by a background worker thread?</p>