<p>I'm initializing and starting five threads in my Testing Class: </p>  <pre><code>[Test]         public void ReportGeneratorFiveThreadTest() {     var threads = new List&lt;ReportGeneratorThread&gt;();     var logger = new Log4NetLogger(typeof(ReportGeneratorThreadTest));      for (var i = 0; i &lt; 5; i++)     {         var estimatedReportSize = EstimatedReportSize.Normal;         var thread = new ReportGeneratorThread(logger, new ReportGenerator(20), estimatedReportSize, new ManualResetEvent(false));         thread.Name = string.Format("ReportGeneratorThread{0}", i);         threads.Add(thread);     }     threads.ForEach(t =&gt; t.Start());           } </code></pre>  <p>And I'm starting all threads by calling following method in ReportGeneratorThread class:</p>  <pre><code>public void Start()     {         this.running = true;         this.t = new Thread(this.GenerateReport());         this.t.SetApartmentState(ApartmentState.STA);         this.t.Start();     } </code></pre>  <p>Which calls a GenerateReport() method in order to perform an operation:</p>  <pre><code>public void GenerateReport()     {         var didwork = false;         try         {             didwork = this.reportGenerator.GenerateReport(this.estimatedReportSize);         }         catch (Exception e)         {             this.log.LogError(ReportGenerator.CorrelationIdForPickingReport, string.Format(CultureInfo.InvariantCulture, "System"), string.Format(CultureInfo.InvariantCulture, "Error during report generation."), 0, e);             this.doneEvent.Reset();             Debug.WriteLine("Thread is aborted !!!");         }         finally         {             if (!didwork)             {                 Thread.Sleep(Settings.Default.ReportGenerationInterval);             }         }     } </code></pre>  <p>My purpose is to inform my main thread once a thread among all five threads gets aborted (an exception is thrown in GenerateReport() method) and restart it in my main thread afterwards. I have tried using ManualResetEvent for that purpose, but it seems like it is not the proper class to use for this purpose. Any approaches ?.  </p>