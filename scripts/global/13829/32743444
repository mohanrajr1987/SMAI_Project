<p>I am currently working an c# application that will work as the server-side of a multiplayer game and I am slightly unsure as to how I should be handling multi-threading issues. Before I continue, it is probably worth mentioning that I am quite new to this topic.</p>  <p><strong>The problem</strong></p>  <p>One of the requirements of the server-side application is that it should contain application-specific data, such as information on peers that have connected to the server, as well as their location and so on. The problem is that without some form of thread-safe mechanic, it is possible for two requests to be reading and writing to the same piece of data, which is obviously problematic.</p>  <p><strong>Solving the problem</strong></p>  <p>Up until now, to solve the problem I have simply been wrapping every request inside of a lock block, ensuring that every request happens in a serial order, so that data is only ever being manipulated by one peer at a time.</p>  <p>Recently, after doing some research on the topic I was introduced to the idea of <a href="https://en.wikipedia.org/wiki/Fiber_%28computer_science%29" rel="nofollow">fibers</a>, and a way of setting up a "fiber pool", allowing the ability to queue actions onto a single fiber as another way of trying to ensure that requests happen in a serial order.</p>  <p><strong>The question</strong></p>  <p>My knowledge on threading and these types of topics is pretty limited. I would love to know more about this topic, in particular I would love to know the pros and cons of either solution and ultimately which route I should be taking.</p>  <p>Any help would be greatly appreciated.</p>