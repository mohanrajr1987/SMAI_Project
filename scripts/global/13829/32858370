<p>The below code is meant to print the digits 0 to 9, in order. It doesn't synchronise properly, so they're printed out of order:</p>  <pre><code>class A {public void method() {     for(int i=0;i&lt;10;i++)     System.out.printlng(i);      try{         Thread.sleep(200);     }     catch(Exception e)     {     } }}  class thread extends Thread {A a;  thread(A a) {     super();     this.a=a;     start(); }  public void run() {     synchronized(this)     {         a.method();     } }} class B {public static void main(String[] args) {     A a=new A();      thread t=new thread(a);      for(int i=10;i&lt;20;i++)     {         System.out.println(i);     } }} </code></pre>  <p>However, when I replace <code>synchronized(this)</code> with <code>synchronized(a)</code>, it works:</p>  <pre><code>class A {public void method() {     for(int i=0;i&lt;10;i++)     System.out.printlng(i);      try{         Thread.sleep(200);     }     catch(Exception e)     {     } }} class thread extends Thread {A a;  thread(A a) {     super();     this.a=a;     start(); }  public void run() {     synchronized(a)     {         a.method();     } }} class B {public static void main(String[] args) {     A a=new A();      thread t=new thread(a);      for(int i=10;i&lt;20;i++)     {         System.out.println(i);     } }} </code></pre>  <p>What's going on? Why does this happen?</p>