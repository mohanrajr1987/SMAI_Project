<p>I'm confused about how to properly and safely pass data from GUI elements on the event-dispatch-thread (EDT) to a SwingWorker that needs to interact with that data.  I've followed the many examples on stackoverflow and around the web;  no matter which way I try to write, it seems like I'm breaking the oath to never touch GUI elements from a different thread.</p>  <p>I'll try to illustrate my confusion with pseudocode.</p>  <p>I've got a JFrame with some swing elements to take input from user.  User clicks a JButton, the JButton disables so user can't click it twice, and their input is passed to the SwingWorker in a background thread:</p>  <pre><code>import javax.swing.*; import java.awt.event.*;  class GUI implements Runnable{     JFrame jFrame;     JTextField userInputTextField;     JButton beginLongTaskButton;      GUI(){         //initialize the GUI elements, add them to JFrame, JPanel, etc.          this.beginLongTaskButton = new JButton("Begin Task");         this.beginLongTaskButton.addActionListener(a -&gt; beginLongTask());//lambda sure is nice     }      void beginLongTask(){         this.beginLongTaskButton.setEnabled(false);         this.beginLongTaskButton.setText("Doing your long task...");         LongTaskWorker longTaskWorker = new LongTaskWorker(this.userInputTextField);//isn't this bad?         longTask.execute();     }      @Override     public void run(){         this.jFrame.setVisible(true);//blah blah     } } </code></pre>  <p>At this moment, the EDT should be just be sitting pretty, except for one problem:  the SwingWorker was given some of the GUI elements via its constructor:</p>  <pre><code>import javax.swing.*;  class LongTaskWorker extends SwingWorker&lt;Void, Void&gt;{     JTextField userInputTextField;      public LongTaskWorker(final JTextField userInputTextField){         this.userInputTextField = userInputTextField;//the text field on EDT I'm not supposed to touch     }      @Override     protected Void doInBackground() throws Exception{         //read lots of stuff from JTextField in this Thread (the wrong thread)?         //write? lots of stuff to JTextField in this Thread (the wrong thread)?         //do lots of other stuff to JTextField?          return null;     } } </code></pre>  <p>I've seen many people do something similar to this.  I think even the JavaDoc SwingWorker example does it this way.  But doesn't it mean I'm messing with objects on a different thread when I'm not supposed to?  And does reading (not changing) the value of GUI components still violate the cross-threading rule? If my SwingWorker must frequently read data from GUI elements, won't that slow down the EDT?</p>  <p>Maybe the right thing to do is extract the data I need from the GUI elements within the EDT, then pass that extracted data to the SwingWorker?  As opposed to directly passing the GUI element to the SwingWorker.</p>