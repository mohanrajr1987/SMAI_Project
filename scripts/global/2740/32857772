<p>I am trying to Making a simple BBS but  I'm encountering following this error,</p>  <blockquote>   <p>WARN : org.springframework.web.servlet.PageNotFound - No mapping found   for HTTP request with URI [/board/] in DispatcherServlet with name   'appServlet'</p> </blockquote>  <p>I have tried to solve this error many times, but I have failed. How can I solve this error?</p>  <p>here is my web.xml, Controllerand and servlet-context.</p>  <p>my web.xml</p>  <p><div class="snippet" data-lang="js" data-hide="false"> <div class="snippet-code"> <pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee" 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee  http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"&gt;  	&lt;filter&gt; 		&lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; 		&lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; 		&lt;init-param&gt; 			&lt;param-name&gt;encoding&lt;/param-name&gt; 			&lt;param-value&gt;EUC-KR&lt;/param-value&gt; 		&lt;/init-param&gt; 	&lt;/filter&gt; 	&lt;filter-mapping&gt; 		&lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; 		&lt;url-pattern&gt;/*&lt;/url-pattern&gt; 	&lt;/filter-mapping&gt; 	&lt;!-- Creates the Spring Container shared by all Servlets and Filters --&gt; 	&lt;listener&gt; 		&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; 	&lt;/listener&gt; 	&lt;!-- The definition of the Root Spring Container shared by all Servlets  		and Filters --&gt; 	&lt;context-param&gt; 		&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; 		&lt;param-value&gt; /WEB-INF/spring/root-context.xml /WEB-INF/spring/appServlet/servlet-context.xml  &lt;/param-value&gt; 	&lt;/context-param&gt; 	&lt;!-- Processes application requests --&gt; 	&lt;servlet&gt; 		&lt;servlet-name&gt;appServlet&lt;/servlet-name&gt; 		&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; 		&lt;init-param&gt; 			&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; 			&lt;param-value&gt; /WEB-INF/spring/appServlet/servlet-context.xml &lt;/param-value&gt; 		&lt;/init-param&gt; 		&lt;load-on-startup&gt;1&lt;/load-on-startup&gt; 	&lt;/servlet&gt; 	&lt;servlet-mapping&gt; 		&lt;servlet-name&gt;appServlet&lt;/servlet-name&gt; 		&lt;url-pattern&gt;/&lt;/url-pattern&gt; 	&lt;/servlet-mapping&gt;  &lt;/web-app&gt;</code></pre> </div> </div> </p>  <p>my Controller</p>  <p><div class="snippet" data-lang="js" data-hide="false"> <div class="snippet-code"> <pre class="snippet-code-html lang-html prettyprint-override"><code>package com.onj.board;  import java.io.FileOutputStream; import java.io.IOException; import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession;  import org.springframework.web.multipart.MultipartFile; import org.springframework.web.multipart.MultipartHttpServletRequest; import org.springframework.web.servlet.ModelAndView; import org.springframework.web.servlet.mvc.multiaction.MultiActionController;  import com.board.model.BoardDTO; import com.board.model.CommentDTO; import com.board.service.BoardService; import com.board.util.EncodingHandler; import com.board.util.PageHandler;  public class BoardMultiController extends MultiActionController {  	private BoardService boardService; 	private PageHandler pageHandler;  	public void setBoardService(BoardService boardService) { 		this.boardService = boardService; 	}  	public void setPageHandler(PageHandler pageHandler) { 		this.pageHandler = pageHandler; 	}  	ModelAndView mav = null;  	public ModelAndView list(HttpServletRequest request, 			HttpServletResponse response) throws Exception { 		mav = new ModelAndView();  		HttpSession session = request.getSession(); 		if (session.isNew() == false) { 			session.invalidate(); 		}  		List&lt;BoardDTO&gt; list = null;  		String boardListSelect = request.getParameter("boardListSelect"); 		String boardListSearchText = request 				.getParameter("boardListSearchText");  		Map&lt;String, Object&gt; searchMap = new HashMap&lt;String, Object&gt;();  		if (boardListSearchText != null) { 			searchMap.put("boardListSearchText", 					EncodingHandler.toKor(boardListSearchText)); 			searchMap.put("boardListSelect", boardListSelect);  			mav.addObject("boardListSearchText", 					EncodingHandler.toKor(boardListSearchText)); 			mav.addObject("boardListSelect", boardListSelect); 		}  		String pageNumber = request.getParameter("pageNumber"); 		int pageNum = 1; 		if (pageNumber != null) { 			pageNum = Integer.parseInt(pageNumber); 		}  		int totalCount = pageHandler.boardAllNumber(searchMap);  		int totalPageCount = pageHandler.boardPageCount(searchMap);  		int startPage = pageHandler.boardStartPage(pageNum); 		int endPage = pageHandler.boardEndPage(pageNum, searchMap);  		List&lt;Object&gt; rowNumberList = new ArrayList&lt;Object&gt;(); 		rowNumberList = pageHandler.boardSetPageNumber(pageNum); 		searchMap.put("startRow", rowNumberList.get(0)); 		searchMap.put("endRow", rowNumberList.get(1));  		list = boardService.boardList(searchMap);  		mav.addObject("pageNumber", pageNum); 		mav.addObject("boardCount", totalCount); 		mav.addObject("totalPageCount", totalPageCount); 		mav.addObject("startPage", startPage); 		mav.addObject("endPage", endPage); 		mav.addObject("list", list);  		mav.setViewName("list");  		return mav; 	}  	public ModelAndView read(HttpServletRequest request, 			HttpServletResponse response) throws Exception {  		String seq = request.getParameter("seq"); 		BoardDTO boardDTO = boardService.readContent(seq);  		HttpSession session = request.getSession(); 		session.setAttribute("boardDTO", boardDTO);  		mav.addObject("boardDto", boardDTO); 		mav.addObject("comment", boardService.ListComment(seq));  		mav.setViewName("read");  		return mav; 	}  	public ModelAndView comment(HttpServletRequest request, 			HttpServletResponse response) throws Exception {  		HttpSession session = request.getSession(); 		BoardDTO boardDTO = (BoardDTO) session.getAttribute("boardDTO");  		mav = new ModelAndView("redirect:/read.html?seq=" + boardDTO.getSeq());  		CommentDTO commentDTO = new CommentDTO(); 		commentDTO.setComment_name(request.getParameter("comment_name")); 		commentDTO.setComment_comm(request.getParameter("comment_comm")); 		commentDTO.setSeq(boardDTO.getSeq());  		boardService.insertComment(commentDTO);  		return mav; 	}  	public ModelAndView write(HttpServletRequest request, 			HttpServletResponse response) throws Exception { 		mav = new ModelAndView("write"); 		return mav; 	}  	public ModelAndView writeOk(HttpServletRequest request, 			HttpServletResponse response) throws Exception {  		mav = new ModelAndView("redirect:/list.html");  		MultipartHttpServletRequest mpRequest = (MultipartHttpServletRequest) request;  		String name = request.getParameter("name"); 		String passwd = request.getParameter("passwd"); 		String title = request.getParameter("title"); 		String content = request.getParameter("content"); 		MultipartFile file = mpRequest.getFile("file");  		String fileName = file.getOriginalFilename();  		BoardDTO boardDTO = new BoardDTO();  		String fileDir = "D:/upload/";  		byte[] fileData; 		FileOutputStream output = null;  		if (!fileName.equals("")) { 			// 파일 저장 			try { 				fileData = file.getBytes(); 				output = new FileOutputStream(fileDir + fileName); 				output.write(fileData);  			} catch (IOException e) { 				e.printStackTrace(); 			} finally { 				output.close(); 			} 		} else { 			fileName = " "; 		}  		boardDTO.setName(name); 		boardDTO.setPasswd(passwd); 		boardDTO.setTitle(title); 		boardDTO.setContent(content); 		boardDTO.setFilename(fileName);  		boardService.insertBoard(boardDTO);  		return mav; 	}  	public ModelAndView updatePageGo(HttpServletRequest request, 			HttpServletResponse response) throws Exception {  		HttpSession session = request.getSession(); 		BoardDTO boardDTO = (BoardDTO) session.getAttribute("boardDTO");  		mav = new ModelAndView("update", "boardDto", boardDTO);  		return mav; 	}  	public ModelAndView update(HttpServletRequest request, 			HttpServletResponse response) throws Exception {  		HttpSession session = request.getSession();  		BoardDTO boardDTO = (BoardDTO) session.getAttribute("boardDTO");  		String name = request.getParameter("name"); 		String title = request.getParameter("title"); 		String content = request.getParameter("content"); 		String seq = boardDTO.getSeq();  		boardDTO.setName(name); 		boardDTO.setTitle(title); 		boardDTO.setContent(content); 		boardDTO.setSeq(seq);  		boardService.updateBoard(boardDTO);  		mav = new ModelAndView("redirect:/read.html?seq=" + seq);  		return mav; 	}  	public ModelAndView delete(HttpServletRequest request, 			HttpServletResponse response) throws Exception {  		mav = new ModelAndView();  		HttpSession session = request.getSession(); 		BoardDTO boardDTO = (BoardDTO) session.getAttribute("boardDTO"); 		String boardPassword = boardDTO.getPasswd(); 		String passwd = request.getParameter("passwd"); 		String mas = "";  		if (boardPassword.equals(passwd)) { 			boardService.deleteBoard(boardDTO.getSeq()); 			mav.setViewName("redirect:/list.html"); 		} else { 			mas = "비밀번호가 일치하지 않습니다."; 			mav.addObject("mas", mas); 			mav.setViewName("redirect:/read.html?seq=" + boardDTO.getSeq()); 		}  		return mav; 	}  }</code></pre> </div> </div> </p>  <p>my servlet-context.xml</p>  <p><div class="snippet" data-lang="js" data-hide="false"> <div class="snippet-code"> <pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;beans:beans xmlns="http://www.springframework.org/schema/mvc" 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans" 	xmlns:context="http://www.springframework.org/schema/context" 	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd 		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 		"&gt;  	&lt;!-- DispatcherServlet Context: defines this servlet's request-processing  		infrastructure --&gt;  	&lt;!-- &lt;context:component-scan base-package="com.onj.board" /&gt; --&gt;  	&lt;!-- Enables the Spring MVC @Controller programming model --&gt; 	&lt;annotation-driven /&gt;  	&lt;!-- Handles HTTP GET requests for /resources/** by efficiently serving  		up static resources in the ${webappRoot}/resources directory --&gt; 	&lt;resources mapping="/resources/**" location="/resources/" /&gt;  	&lt;beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" 		destroy-method="close"&gt; 		&lt;beans:property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" /&gt; 		&lt;beans:property name="url" 			value="jdbc:oracle:thin:@localhost:1521:ex" /&gt; 		&lt;beans:property name="username" value="study" /&gt; 		&lt;beans:property name="password" value="study" /&gt; 	&lt;/beans:bean&gt;  	&lt;!-- Resolves views selected for rendering by @Controllers to .jsp resources  		in the /WEB-INF/views directory --&gt; 	&lt;beans:bean 		class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt; 		&lt;beans:property name="prefix" value="/WEB-INF/jsp/" /&gt; 		&lt;beans:property name="suffix" value=".jsp" /&gt; 	&lt;/beans:bean&gt;    	&lt;!-- 넘어오는 URL에 따라 컨트롤러에서 실행될 메소드 매핑 --&gt; 	&lt;!-- PropertiesMethodNameResolver는 prop key로 넘어오는 url에 대해 실행할 컨트롤러의 메소드  		정의 --&gt; 	&lt;beans:bean id="userControllerMethodNameResolver" 		class="org.springframework.web.servlet.mvc.multiaction.PropertiesMethodNameResolver"&gt; 		&lt;beans:property name="mappings"&gt; 			&lt;beans:props&gt; 				&lt;beans:prop key="/list.html"&gt;list&lt;/beans:prop&gt; 				&lt;beans:prop key="/read.html"&gt;read&lt;/beans:prop&gt; 				&lt;beans:prop key="/comment.html"&gt;comment&lt;/beans:prop&gt; 				&lt;beans:prop key="/write.html"&gt;write&lt;/beans:prop&gt; 				&lt;beans:prop key="/writeOk.html"&gt;writeOk&lt;/beans:prop&gt; 				&lt;beans:prop key="/updatePage.html"&gt;updatePageGo&lt;/beans:prop&gt; 				&lt;beans:prop key="/update.html"&gt;update&lt;/beans:prop&gt; 				&lt;beans:prop key="/delete.html"&gt;delete&lt;/beans:prop&gt; 			&lt;/beans:props&gt; 		&lt;/beans:property&gt; 	&lt;/beans:bean&gt;  	&lt;!-- controller mapping --&gt; 	&lt;beans:bean 		name="/list.html /read.html /comment.html /write.html /writeOk.html /updatePage.html /update.html /delete.html" 		class="com.onj.board.BoardMultiController"&gt; 		&lt;beans:property name="methodNameResolver" ref="userControllerMethodNameResolver" /&gt; 		&lt;beans:property name="boardService" ref="boardService" /&gt; 		&lt;beans:property name="pageHandler" ref="pageHandler" /&gt; 	&lt;/beans:bean&gt;  &lt;/beans:beans&gt;</code></pre> </div> </div> </p>  <p>I need your advice.</p>  <p>Thanks</p>