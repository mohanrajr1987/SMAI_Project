<p>I have a vanilla Tomcat with simple Java Servlets set up where I try to persist person's info to my MySQL database with Hibernate. The application deploys properly, I am able to hit my servlet with proper servlet-mapping but cannot build a SessionFactory to access the database.</p>  <p>Stacktrace:</p>  <pre><code>javax.servlet.ServletException: Servlet execution threw an exception     org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) Caused by: java.lang.ExceptionInInitializerError     meetme.dao.Dao.&lt;clinit&gt;(Dao.java:23)     meetme.web.LoginServlet.doPost(LoginServlet.java:25)     javax.servlet.http.HttpServlet.service(HttpServlet.java:650)     javax.servlet.http.HttpServlet.service(HttpServlet.java:731)     org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) Caused by: org.hibernate.boot.registry.classloading.spi.ClassLoadingException: Unable to load class [meetme.meeting.Person]     org.hibernate.boot.registry.classloading.internal.ClassLoaderServiceImpl.classForName(ClassLoaderServiceImpl.java:232)     org.hibernate.boot.model.source.internal.annotations.AnnotationMetadataSourceProcessorImpl.&lt;init&gt;(AnnotationMetadataSourceProcessorImpl.java:103)     org.hibernate.boot.model.process.spi.MetadataBuildingProcess$1.&lt;init&gt;(MetadataBuildingProcess.java:147)     org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:141)     org.hibernate.boot.model.process.spi.MetadataBuildingProcess.build(MetadataBuildingProcess.java:83)     org.hibernate.boot.internal.MetadataBuilderImpl.build(MetadataBuilderImpl.java:418)     org.hibernate.boot.internal.MetadataBuilderImpl.build(MetadataBuilderImpl.java:87)     org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:692)     org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:724)     meetme.dao.Dao.&lt;clinit&gt;(Dao.java:19)     meetme.web.LoginServlet.doPost(LoginServlet.java:25)     javax.servlet.http.HttpServlet.service(HttpServlet.java:650)     javax.servlet.http.HttpServlet.service(HttpServlet.java:731)     org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) Caused by: java.lang.NoClassDefFoundError: com/sun/javaws/exceptions/InvalidArgumentException     java.lang.Class.forName0(Native Method)     java.lang.Class.forName(Class.java:274)     org.hibernate.boot.registry.classloading.internal.ClassLoaderServiceImpl.classForName(ClassLoaderServiceImpl.java:226)     org.hibernate.boot.model.source.internal.annotations.AnnotationMetadataSourceProcessorImpl.&lt;init&gt;(AnnotationMetadataSourceProcessorImpl.java:103)     org.hibernate.boot.model.process.spi.MetadataBuildingProcess$1.&lt;init&gt;(MetadataBuildingProcess.java:147)     org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:141)     org.hibernate.boot.model.process.spi.MetadataBuildingProcess.build(MetadataBuildingProcess.java:83)     org.hibernate.boot.internal.MetadataBuilderImpl.build(MetadataBuilderImpl.java:418)     org.hibernate.boot.internal.MetadataBuilderImpl.build(MetadataBuilderImpl.java:87)     org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:692)     org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:724)     meetme.dao.Dao.&lt;clinit&gt;(Dao.java:19)     meetme.web.LoginServlet.doPost(LoginServlet.java:25)     javax.servlet.http.HttpServlet.service(HttpServlet.java:650)     javax.servlet.http.HttpServlet.service(HttpServlet.java:731)     org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) Caused by: java.lang.ClassNotFoundException: com.sun.javaws.exceptions.InvalidArgumentException     org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1722)     org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1573)     java.lang.Class.forName0(Native Method)     java.lang.Class.forName(Class.java:274)     org.hibernate.boot.registry.classloading.internal.ClassLoaderServiceImpl.classForName(ClassLoaderServiceImpl.java:226)     org.hibernate.boot.model.source.internal.annotations.AnnotationMetadataSourceProcessorImpl.&lt;init&gt;(AnnotationMetadataSourceProcessorImpl.java:103)     org.hibernate.boot.model.process.spi.MetadataBuildingProcess$1.&lt;init&gt;(MetadataBuildingProcess.java:147)     org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:141)     org.hibernate.boot.model.process.spi.MetadataBuildingProcess.build(MetadataBuildingProcess.java:83)     org.hibernate.boot.internal.MetadataBuilderImpl.build(MetadataBuilderImpl.java:418)     org.hibernate.boot.internal.MetadataBuilderImpl.build(MetadataBuilderImpl.java:87)     org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:692)     org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:724)     meetme.dao.Dao.&lt;clinit&gt;(Dao.java:19)     meetme.web.LoginServlet.doPost(LoginServlet.java:25)     javax.servlet.http.HttpServlet.service(HttpServlet.java:650)     javax.servlet.http.HttpServlet.service(HttpServlet.java:731)     org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </code></pre>  <p>Here's my servlet snippet:</p>  <pre><code>protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {         String organizerEmail = request.getParameter("email");          PersonDao dao = new PersonDao(); </code></pre>  <p>I do a static init of the session factory in <code>PersonDao</code> parent abstract class:</p>  <pre><code>protected static final SessionFactory sessionFactory;  static {     try {         Configuration configuration = new Configuration().configure();         sessionFactory = configuration.buildSessionFactory(); //&lt;-- EXCEPTION!     } catch (HibernateException ex) {         System.err.println("Initial SessionFactory creation failed. " + ex);         ex.printStackTrace();         throw new ExceptionInInitializerError(ex);     } } </code></pre>  <p>It's odd that I'm getting an <code>ClassNotFoundException</code> for a  <code>com.sun.javaws.exceptions.InvalidArgumentException</code> but only when I hit the Hibernate code. I definitely see it read the Hibernate config file properly so it's not a path issue. It doesn't seem to be able to map my Person class that I use for persisting data. So I threw together a quick standalone test to make sure that my Hibernate stuff is solid:</p>  <pre><code>public class MainDaoTest {     public static void main(String[] args) {         PersonDao dao = new PersonDao();         System.out.println(dao.getOrganizerByEmail("asdf@asdf.com").getOrganizerGuid());     } } </code></pre>  <p>Works great. Connects to DB and pulls my organizer Person. Here's the mapped class, just as FYI:</p>  <pre><code>@Entity @Table( name = "Participants" ) public class Person {      @Id     @GeneratedValue(strategy = GenerationType.IDENTITY)     @Column(name = "participantId")     private long participantId;     @Column(name = "email", unique=true)     private String email;     @Column(name = "name")     private String name;     @Column(name = "guid")     private String organizerGuid;      public Person(String name, String email) {         this.name = name;         this.email = email;     }      protected Person() {         this.name = null;         this.email = null;     }      public Person(String name, String email, String id) {         this(name, email);         this.organizerGuid = id;     }      // getters and setters...  } </code></pre>  <p>Hibernate config:</p>  <pre><code>&lt;hibernate-configuration&gt;     &lt;session-factory&gt;         &lt;property name="hibernate.dialect"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;         &lt;property name="connection.driver_class"&gt;com.mysql.jdbc.Driver&lt;/property&gt;          &lt;!-- Database connection details --&gt;         &lt;property name="hibernate.connection.url"&gt;jdbc:mysql://my.url.com&lt;/property&gt;         &lt;property name="hibernate.connection.username"&gt;user&lt;/property&gt;         &lt;property name="hibernate.connection.password"&gt;pass&lt;/property&gt;          &lt;!-- JDBC connection pool (use the built-in) --&gt;         &lt;property name="connection.pool_size"&gt;1&lt;/property&gt;         &lt;property name="current_session_context_class"&gt;thread&lt;/property&gt;          &lt;mapping class="meetme.meeting.Person" /&gt;     &lt;/session-factory&gt; &lt;/hibernate-configuration&gt; </code></pre>  <p>EDIT: Here's the library list for my module in IntelliJ in case versions are clashing:</p>  <p><a href="http://i.stack.imgur.com/b1KdZ.png" rel="nofollow"><img src="http://i.stack.imgur.com/b1KdZ.png" alt="module&#39;s classpath"></a></p>  <p>Let me know if there's anything else I can post about my setup that may shed more light on the issue. This is similar to this question (<a href="http://stackoverflow.com/questions/12233140/java-hibernate-exception-feedback-cannot-be-mapped-from-feedback">Java - Hibernate Exception - Feedback cannot be mapped [ from Feedback ]</a>) but I already have the class mapping in my config.</p>