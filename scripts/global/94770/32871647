<p>I'm trying to build some sort of authentication in my angular app and would like to redirect to a external URL when a user is not logged in (based on a $http.get).</p>  <p>Somehow I end up in an infinite loop when the event.preventDefault() is the first line in the $stateChangeStart.</p>  <p>I've seen multiple issues with answers on stackoverflow, saying like <em>"place the event.preventDefault() just before the state.go in the else"</em>. But then the controllers are fired and the page is already shown before the promise is returned.</p>  <p>Even when I put the event.preventDefault() in the else, something odd happens: </p>  <p>Going to the root URL, it automatically adds the /#/ after the URL and $stateChangeStart is fired multiple times.</p>  <p>app.js run part:</p>  <pre><code>.run(['$rootScope', '$window', '$state', 'authentication', function ($rootScope, $window, $state, authentication) {     $rootScope.$on('$stateChangeStart', function (event, toState, toParams) {         event.preventDefault();         authentication.identity()         .then(function (identity) {              if (!authentication.isAuthenticated()) {                  $window.location.href = 'external URL';                  return;             } else {                  $state.go(toState, toParams);             }         });     }); }]); </code></pre>  <p>authentication.factory.js identity() function:</p>  <pre><code>function getIdentity() {     if (_identity) {         _authenticated = true;         deferred.resolve(_identity);         return deferred.promise;     }      return $http.get('URL')     .then(function (identity) {          _authenticated = true;         _identity = identity;         return _identity;     }, function () {         _authenticated = false;     }); } </code></pre>  <p><strong>EDIT</strong>: Added the states:</p>  <pre><code>$stateProvider     .state('site', {         url: '',         abstract: true,         views: {             'feeds': {                 templateUrl: 'partials/feeds.html',                 controller: 'userFeedsController as userFeedsCtrl'             }         },         resolve: ['$window', 'authentication', function ($window, authentication) {             authentication.identity()             .then(function (identity) {                 if (!authentication.isAuthenticated()) {                     $window.location.href = 'external URL';                 }             })         }]     })     .state('site.start', {         url: '/',         views: {             'container@': {                 templateUrl: 'partials/start.html'             }         }     })     .state('site.itemList', {         url: '/feed/{feedId}',         views: {             'container@': {                 templateUrl: 'partials/item-list.html',                 controller: 'itemListController as itemListCtrl'             }         }     })     .state('site.itemDetails', {         url: '/items/{itemId}',         views: {             'container@': {                 templateUrl: 'partials/item-details.html',                 controller: 'itemsController as itemsCtrl'             }         }     }) }]) </code></pre>  <p>If you need more info, or more pieces of code from the app.js let me know !</p>