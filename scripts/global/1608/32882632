<p>I have problem with the communication between Android and WCF Service. It <strong>MUST</strong> be done with <strong>SOAP</strong> messaging protocol, so REST is not an alternative for me. Thank you in advance! </p>  <pre><code>import android.os.AsyncTask; import android.widget.EditText; import org.ksoap2.SoapEnvelope; import org.ksoap2.serialization.SoapObject; import org.ksoap2.serialization.SoapPrimitive; import org.ksoap2.serialization.SoapSerializationEnvelope; import org.ksoap2.transport.HttpTransportSE; import org.xmlpull.v1.XmlPullParserException; import java.io.IOException;  public class Login extends AsyncTask&lt;String, String, String&gt; { private static final String NAMESPACE = "http://tempuri.org"; private static final String METHOD = "Login"; private static final String URL = "http://10.0.0.2:4053/Move.svc?wsdl"; private static final String SOAP_ACTION = "Move"; private static final String SOAP_ACTION_PREFIX = "/" ; private   String resp; String edname; String edpassword;   public Login(EditText edname, EditText edpassword) {     this.edname = edname.getText().toString();     this.edpassword = edpassword.getText().toString(); }   @Override protected String doInBackground(String... params) {      publishProgress("Loading contents...");     try {          SoapSerializationEnvelope envelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);         SoapObject request = new SoapObject(NAMESPACE, METHOD);          envelope.bodyOut = request;         HttpTransportSE transport = new HttpTransportSE(URL);         try {             transport.call(NAMESPACE + SOAP_ACTION_PREFIX + METHOD, envelope);         } catch (IOException e) {             e.printStackTrace();         } catch (XmlPullParserException e) {             e.printStackTrace();         }          if (envelope.bodyIn != null) {             SoapPrimitive resultSOAP = (SoapPrimitive) ((SoapObject) envelope.bodyIn).getProperty(0);             resp=resultSOAP.toString();         }     } catch (Exception e) {         e.printStackTrace();         resp = e.getMessage();     }     return resp; }  } </code></pre>  <p>Login code</p>  <pre><code> public void onClickLoginButton(View v){         Login login = new Login((EditText)findViewById(R.id.username),    (EditText)findViewById(R.id.password));         login.execute(); } </code></pre>  <p>Boolean login: </p>  <pre><code>public bool Login(String username, String password)         {             if (username.Equals("user") &amp;&amp; password.Equals("user")){                 return true;             }else{                 return false;             }          } </code></pre>  <p>XML code: </p>  <pre><code>    &lt;?xml version="1.0"?&gt; &lt;configuration&gt;    &lt;appSettings&gt;     &lt;add key="aspnet:UseTaskFriendlySynchronizationContext" value="true" /&gt;   &lt;/appSettings&gt;   &lt;system.web&gt;     &lt;compilation debug="true" targetFramework="4.5" /&gt;     &lt;httpRuntime targetFramework="4.5"/&gt;   &lt;/system.web&gt;   &lt;system.serviceModel&gt;     &lt;services&gt;     &lt;service name="WcfServiceApp.Move"&gt;       &lt;endpoint address="" contract="WcfServiceApp.IMove" binding="basicHttpBinding"/&gt;       &lt;endpoint address="mex" contract="IMetadataExchange" binding="mexHttpBinding"/&gt;     &lt;/service&gt;   &lt;/services&gt;      &lt;behaviors&gt;       &lt;serviceBehaviors&gt;          &lt;behavior name="serviceMetadata"&gt;&lt;serviceMetadata /&gt;&lt;/behavior&gt;         &lt;behavior&gt;           &lt;!-- To avoid disclosing metadata information, set the values below to false before deployment --&gt;           &lt;serviceMetadata httpGetEnabled="true" httpsGetEnabled="true"/&gt;           &lt;!-- To receive exception details in faults for debugging purposes, set the value below to true.  Set to false before deployment to avoid disclosing exception information --&gt;           &lt;serviceDebug includeExceptionDetailInFaults="false"/&gt;          &lt;/behavior&gt;        &lt;/serviceBehaviors&gt;     &lt;/behaviors&gt;     &lt;protocolMapping&gt;         &lt;add binding="basicHttpsBinding" scheme="https" /&gt;     &lt;/protocolMapping&gt;         &lt;serviceHostingEnvironment aspNetCompatibilityEnabled="true" multipleSiteBindingsEnabled="true" /&gt;   &lt;/system.serviceModel&gt;   &lt;system.webServer&gt;     &lt;modules runAllManagedModulesForAllRequests="true"/&gt;     &lt;!--         To browse web app root directory during debugging, set the value below to true.         Set to false before deployment to avoid disclosing web app folder information.       --&gt;     &lt;directoryBrowse enabled="true"/&gt;   &lt;/system.webServer&gt;  &lt;/configuration&gt; </code></pre>  <p>And that's the error: </p>  <pre><code>10-01 05:16:03.603    5066-5083/move.move E/Surface﹕ getSlotFromBufferLocked: unknown buffer: 0xab7cf3b0 10-01 05:16:07.568    5066-5185/move.move W/System.err﹕ java.net.SocketTimeoutException 10-01 05:16:07.568    5066-5185/move.move W/System.err﹕ at org.ksoap2.transport.HttpTransportSE.call(HttpTransportSE.java:130) 10-01 05:16:07.572    5066-5185/move.move W/System.err﹕ at move.move.Login.doInBackground(Login.java:100) 10-01 05:16:07.572    5066-5185/move.move W/System.err﹕ at move.move.Login.doInBackground(Login.java:14) 10-01 05:16:07.575    5066-5185/move.move W/System.err﹕ at android.os.AsyncTask$2.call(AsyncTask.java:295) 10-01 05:16:07.576    5066-5185/move.move W/System.err﹕ at java.util.concurrent.FutureTask.run(FutureTask.java:237) 10-01 05:16:07.577    5066-5185/move.move W/System.err﹕ at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:234) 10-01 05:16:07.578    5066-5185/move.move W/System.err﹕ at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1113) 10-01 05:16:07.578    5066-5185/move.move W/System.err﹕ at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:588) </code></pre>