<p>I am new to xaml, WPFs, C# and the MVVM paradigm.  I have started with an app based on <a href="http://www.codeproject.com/Articles/31837/Creating-an-Internationalized-Wizard-in-WPF" rel="nofollow">this example project</a>, in the selected excerpts i want to disable the authenticate button from the LoginPageViewModel after the authenticate button has been clicked(There is no point clicking the button if you are authenticated).  I have got command binding working, as well as text control binding between the view and ViewModel.  my LoginPageViewModel is based on a abstract class that inherits from INotifyPropertyChanged</p>  <p>The setter AuthenticateButtonEnabled is working, but it is not binding to the isEnabled proprerty on the form.  My question is, what could I have missed, and How can i trace the binding between a View and a ViewModel?</p>  <p>the LoginPageView.xaml button:</p>  <pre><code>        &lt;Button x:Name="authenticateButton" Content="{x:Static res:Strings.LoginPage_authenticateButton_content}"              Grid.Column="2" Margin="53,4,0,10"              Grid.Row="2" FontSize="16"              IsEnabled="{Binding Path=AuthenticateButtonEnabled}"             Command="{Binding Path=AuthenticateCommand}" HorizontalAlignment="Left" Width="87"/&gt; </code></pre>  <p>the viewModel</p>  <pre><code>    private String _username;     private String _responseTextBlock;     private String _linkTextBlockURI;     private String _linkTextBlockText;     private bool _authenticateButtonEnabled;     ...     private async void Authenticate()     {         ResponseTextBlock = Strings.LoginPage_responseBlock_content_checking;#this works!         AuthenticateButtonEnabled = false;         return;      }     ....      public bool AuthenticateButtonEnabled      {         get { return _authenticateButtonEnabled; }         set { _authenticateButtonEnabled = value;  OnPropertyChanged("AuthenticateButtonEnabled"); }     }     // this is in the abstract class.     protected virtual void OnPropertyChanged(string propertyName)     {         PropertyChangedEventHandler handler = this.PropertyChanged;         if (handler != null)             handler(this, new PropertyChangedEventArgs(propertyName));     } </code></pre>