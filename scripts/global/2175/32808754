<p>In an excellent blog post about <a href="http://microsoft-ssis.blogspot.nl/2011/03/get-file-properties-with-ssis.html" rel="nofollow">retreiving file properties using SSIS script task</a> it is possible to get file properties like size, owner etc. and store them into SSIS variables which can then be used later on in the SSIS package.</p>  <p>I would like to add the bit depth of an image file to the code. All images are .jpg files and have either 24 or 32 bit depth. The value 24 vs. 32 is what I'd like to store into a SSIS variable (string or integer). I have looked at the <a href="https://msdn.microsoft.com/en-us/library/system.drawing.image.pixelformat(v=vs.110).aspx" rel="nofollow">Image.PixelFormat</a> property and  <a href="https://msdn.microsoft.com/en-us/library/system.drawing.image.getpixelformatsize(v=vs.110).aspx" rel="nofollow">GetPixelFormatSize</a> but would this return the desired bit depth value? If so, how to use this in C# code? </p>  <p>This is the code currently used (credits to SSISJoost):</p>  <pre><code>    // C# code // Fill SSIS variables with file properties using System; using System.Data; using System.IO;                        // Added to get file properties using System.Security.Principal;        // Added to get file owner using System.Security.AccessControl;    // Added to get file owner using Microsoft.SqlServer.Dts.Runtime; using System.Windows.Forms;  namespace ST_9ef66c631df646e08e4184e34887da16.csproj {     [System.AddIn.AddIn("ScriptMain", Version = "1.0", Publisher = "", Description = "")]     public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase     {          #region VSTA generated code         enum ScriptResults         {             Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,             Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure         };         #endregion          public void Main()         {             //set counter first             int cnt = (int)Dts.Variables["cnt"].Value;             Dts.Variables["cnt"].Value = ++cnt;              // Variable for file information             FileInfo fileInfo;              // Fill fileInfo variable with file information             fileInfo = new FileInfo(Dts.Variables["User::FilePath"].Value.ToString());              // Check if file exists             Dts.Variables["User::FileExists"].Value = fileInfo.Exists;              // Get the rest of the file properties if the file exists             if (fileInfo.Exists)             {                 // Get file creation date                 Dts.Variables["User::FileCreationDate"].Value = fileInfo.CreationTime;                  // Get last modified date                 Dts.Variables["User::FileLastModifiedDate"].Value = fileInfo.LastWriteTime;                  // Get last accessed date                 Dts.Variables["User::FileLastAccessedDate"].Value = fileInfo.LastAccessTime;                  // Get size of the file in bytes                 Dts.Variables["User::FileSize"].Value = fileInfo.Length;                  // Get file attributes                 Dts.Variables["User::FileAttributes"].Value = fileInfo.Attributes.ToString();                 Dts.Variables["User::FileIsReadOnly"].Value = fileInfo.IsReadOnly;                  //////////////////////////////////////////////////////                 // Check if the file isn't locked by an other process                 try                 {                     // Try to open the file. If it succeeds, set variable to false and close stream                     FileStream fs = new FileStream(Dts.Variables["User::FilePath"].Value.ToString(), FileMode.Open);                     Dts.Variables["User::FileInUse"].Value = false;                     fs.Close();                 }                 catch (Exception ex)                 {                     // If opening fails, it's probably locked by an other process                     Dts.Variables["User::FileInUse"].Value = true;                      // Log actual error to SSIS to be sure                      Dts.Events.FireWarning(0, "Get File Properties", ex.Message, string.Empty, 0);                 }                  //////////////////////////////////////////////////////                 // Get the Windows domain user name of the file owner                 FileSecurity fileSecurity = fileInfo.GetAccessControl();                 IdentityReference identityReference = fileSecurity.GetOwner(typeof(NTAccount));                 Dts.Variables["User::FileOwner"].Value = identityReference.Value;             }              Dts.TaskResult = (int)ScriptResults.Success;         }     } } </code></pre>