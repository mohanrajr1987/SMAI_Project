<p>I am pretty new to unit testing and NUnit, my case is that a test expecting a simple exception stopped working when I changed from the Ninject NSubstitute mocking kernel adapter to plain NSubstitute for mocking <code>Returns</code> purposes.</p>  <pre><code>    private IRecordRepository RecordRepositorySeed()     {         var repository = Substitute.For&lt;IRecordRepository&gt;();          record.GetSingleAsync(r =&gt; r.Id == "1").Returns(new Task&lt;Record&gt;(() =&gt; new Record(...))); // sample record          return repository;     }      [Test]     [ExpectedException(typeof(NullReferenceException))]     public void UnexistantRecord()     {         var billingService = new BillingService(RecordRepositorySeed());         billingService.GenerateBill("5", "test");     } </code></pre>  <p>The test dont pass as it outputs that the test is expecting the <code>System.NullReferenceException</code>.</p>  <p>I debugged the tested method and it is actually triggering it:</p>  <pre><code>//After a query on record that returns null, this snippet goes on if (record == null) {     //It's reaching this part     throw new NullReferenceException("record not found"); } </code></pre>  <p>I tried these solutions but none of them worked for me:</p>  <p><a href="http://stackoverflow.com/questions/3407765/nunit-expected-exceptions">NUnit expected exceptions</a></p>  <p><a href="http://stackoverflow.com/questions/1928079/nunit-unit-test-has-expectedexception-but-still-failing-on-exception">NUnit unit test has ExpectedException but still failing on exception</a></p>  <p>The thing is this test was working before I changed the mock to the <code>Substitute</code> syntax and I'm unable to figure out what's wrong with this approach.</p>  <p>I'm not sure if it is relevant but the <code>GenerateBill</code> method is <code>async void</code></p>