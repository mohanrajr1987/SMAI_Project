<p>I'm trying to learn how to properly use Unit Testing for a WebApi2 project.  In my past projects, I frequently have used DataAnnotations for basic Model validation. However, they don't seem to be triggered properly in my Unit Tests.</p>  <p>In the below example, the actual API controller when hit with a real HTTP request, behaves properly. It will return a BadRequest (400) when I submit a JSON object without ParrotTalk defined.  However, the TestMethod doesn't seem to invoke this rule.  What can I do to have this reflected in my Unit Test without resorting to convaluted methods?  This seems like something that should work "out of the box" as they are built in, and commonly used features in MVC.</p>  <p>This is my model passed up the wire in JSON.</p>  <pre><code> public class ParrotModel {     [Required]     public string ParrotTalk { get; set; } } </code></pre>  <p>This is the actual method in the controller.</p>  <pre><code>    [HttpPost]     [Route("another-endpoint")]     public IHttpActionResult CallParrotFromBody(ParrotModel Parrot)     {         if (!ModelState.IsValid)         {             return BadRequest();         }         return Ok(new TestModel { SomeString = "Bawwwwwk! " + Parrot.ParrotTalk });     } </code></pre>  <p>This is my TestMethod.  For some reason, when this runs, ModelState.IsValid is true...but it's not when running in a real site!</p>  <pre><code>    [TestMethod]     public void CallParrotFromBody()     {         //good request         var controller = new RichController();          var result = controller.CallParrotFromBody(new ParrotModel { ParrotTalk = "Stuff" });         OkNegotiatedContentResult&lt;TestModel&gt; okResult = result as OkNegotiatedContentResult&lt;TestModel&gt;;          Assert.IsNotNull(okResult);         Assert.IsInstanceOfType(okResult.Content, typeof(TestModel));         Assert.AreEqual(okResult.Content.SomeString, "Bawwwwwk! " + "Stuff" );          //bad request---WHY DOESN'T THIS WORK????         var nullRequestController = new RichController();         var nullRequestResult = nullRequestController.CallParrotFromBody(new ParrotModel { });         BadRequestResult badResult = nullRequestResult as BadRequestResult;          Assert.IsNotNull(badResult);     } </code></pre>  <p>In the image below, you can clearly see that the IsValid portion of the code is not triggered because the [Required] attribute wasn't processed.  This only happens when this method is called outside of a MVC application (eg: from a test).</p>  <p><a href="http://i.stack.imgur.com/sEFb6.png" rel="nofollow"><img src="http://i.stack.imgur.com/sEFb6.png" alt="enter image description here"></a></p>