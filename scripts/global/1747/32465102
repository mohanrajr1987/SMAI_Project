<p>I have a test suite running in Automation. All of these tests are functional UI tests. It looks like below</p>  <pre><code>[SetUp] public void Setup() {     CreatePolicy(); }      [Test] public void Test1() {     EditPolicyAndValidateResults(); }  [Test] public void Test2() {    EditPolicyAndValidateResults(); }  [TearDown] public void TearDown() {        DeletePolicy(); } </code></pre>  <p>Now, the problem is <code>DeletePolicy()</code> is failing sometimes (randomly for one or two of the tests) and because of which the corresponding tests are failing.  To circumvent the failure if have added a try catch  block to <code>DeletePolicy()</code> and it looks like the following:</p>  <pre><code>[TearDown] public void TearDown() {     try     {         DeletePolicy();     }     catch(Exception ex)     {         // Do nothing     } } </code></pre>  <p>Since testing <code>DeletePolicy()</code> function is not the intent of my test cases, the approach looks fine to me. Is this correct or I am missing something here?</p>