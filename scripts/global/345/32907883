<h2>Background</h2>  <p>I've been trying to brush up on my Python knowledge through the excellent challanges available on Kattis. I'm now stumped on <a href="https://open.kattis.com/problems/chopwood" rel="nofollow">this problem</a> which requires good efficiency. My solution gets the right answers, but too slowly. While other languages will probably be quicker, I know from the stats that it can be solved using Python 3.</p>  <h2>The Problem</h2>  <p>The program is given an integer length, and then a list of that length containing integer values. I add these to a list, but when I am given very long lists, the program exceeds the 3s time limit before it finishes reading input.</p>  <p>Any suggestions on how to speed things up will be greatly appreciated!</p>  <h2>The Code So Far (updated with comprehension)...</h2>  <p><a href="https://gist.github.com/anonymous/4322dff72f6e751515e2" rel="nofollow">Gist copy</a></p>  <pre><code>import collections  length = int(input()) inputList = [] maxVal = 0 # Set offers O(1) when checking if an element is present. history = set() results = [] impossible = False  inputList = [input() for _ in range(length)]  # Map int conversion and convert to deque for O(1) removal from left later on. # Is this worth it? inputDeque = collections.deque(map(int, inputList))  # Find highest value. Was doing this during input, # moved here to potentially speed up input loop. maxVal = max(inputDeque)  # There must be a smarter way here, # but we're not getting this far on large inputs yet.  # For every element of input, # find the lowest value that is not in the remaining input or history. for _ in range(length):     for i in range(1, 200000, 1):         # If the lowest value we can get is higher than the largest input, this can't be solved.         if i &gt;= maxVal:             impossible = True             break         if i not in history and i not in inputDeque:             results.append(i)             history.add(i)             inputDeque.popleft()             break     if impossible:         break  if impossible:     print('Error') else:     [print(i) for i in results] </code></pre>  <p>Many thanks!</p>