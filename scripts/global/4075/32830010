<p>I am trying to use Pandas and SQLAlchemy to do some auto-profiling of data in an Oracle database. However, Pandas (or SQLAlchemy, or cx_Oracle, I am not sure which) seems to be inconsistently reading the datatypes which are defined in Oracle.</p>  <p>For example, here are some columns in the table (as defined in Oracle):</p>  <p>Column Name, Datatype</p>  <pre><code>PRINCIPAL_PHOTOGRAPHY_END_DATE  DATE     PRINCIPAL_PHOTO_START_DATE  DATE PRODUCER    VARCHAR2(26 BYTE) RELEASE_AIR_DATE    VARCHAR2(26 BYTE) RUNNING_TIME_MINUTES    NUMBER(38,0) RUNNING_TIME_SECONDS    NUMBER(38,0) EFFECTIVE_TIMESTAMP DATE EXPIRE_TIMESTAMP    DATE </code></pre>  <p>And here is code that I use to connect and grab info from the table and load it into a pandas dataframe:</p>  <pre><code>from sqlalchemy import * import pandas as pd orcl_connect_string = 'oracle+cx_oracle://system:oracle@192.168.56.101:1521/?service_name=orcl' engine = create_engine(orcl_connect_string) df = pd.read_sql_query('SELECT * FROM INT_PROP', engine) print df.dtypes </code></pre>  <p>And what I get as output is very confusing because it is not consistent -- it catches the datetime data type in one case but not in others...!?</p>  <pre><code>production_start_date                     object principal_photography_end_date            object producer                                  object release_air_date                          object running_time_minutes                     float64 running_time_seconds                     float64 effective_timestamp               datetime64[ns] expire_timestamp                          object </code></pre>  <p>Any ideas why Pandas seems to be able to read the appropriate datatype for the effective_timestamp column but not for the other columns?</p>  <p>EDIT (Some version info):</p>  <ol> <li>Oracle 12c </li> <li>Python 2.7.6</li> <li>SQLAlchemy 1.0.8</li> <li>Pandas 0.16.2</li> </ol>