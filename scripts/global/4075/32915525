<p>I'm using sqlalchemy to reflect an existing database with no foreign keys defined.  Given the following example:</p>  <pre><code>engine = sqlalchemy.create_engine(...) Base = declarative_base() Base.metadata.reflect(engine)  class A(Base):     __table__ = Base.metadata.tables['A']   class B(Base):     __table__ = Base.metadata.tables['B']  class C(Base):     __table__ = sqlalchemy.outerjoin(A, B, onclause=A.foo==B.foo) </code></pre>  <p>How can I limit the fields used in C?</p>  <p>I tried setting:</p>  <pre><code>__mapper_args__ = {     'include_properties': ['foo', 'bar'] } </code></pre>  <p>But get error </p>  <pre><code>Mapper Mapper|C|Join object on Join object on Join object on A(47698852085840) and B(47698852088016)(47698861282384) could not assemble any primary key columns for mapped table </code></pre>