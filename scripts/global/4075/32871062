<p>Take this example:</p>  <pre><code>Base = declarative_base()  class Test(Base):     __tablename__ = 'test'     id = Column(Integer, primary_key=True)     fullname = Column(String)     password = Column(String)      @memoized_property     def test_property(self):         return self.fullname + self.password </code></pre>  <p>Now say we do this:</p>  <pre><code>&gt;&gt;&gt; t = Test() &gt;&gt;&gt; t.fullname = 'hi' &gt;&gt;&gt; t.password = 'bye' &gt;&gt;&gt; t.test_property Out[12]: 'hibye' </code></pre>  <p>Now my question: I want to add this instance <code>t</code> to a table named 'test' in a database, however, I want the table to contain a column also named 'test_property'. I'm aware I can declare another Column object and alter things to create this...</p>  <pre><code>Base = declarative_base()  class Test(Base):     __tablename__ = 'test'     id = Column(Integer, primary_key=True)     fullname = Column(String)     password = Column(String)     test_property = Column(String)       @memoized_property     def calc_test_property(self):         self.test_property = self.fullname + self.password         return self.test_property </code></pre>  <p>But I want something more elegant...Is there any functionality for this? Potentially looking for something like below and wondering if it already exists...?</p>  <pre><code>#pseudocode @memoized_property_and_column_converter(String, nullable=False,...blah blah)  def test_property(self):     return self.fullname + self.password </code></pre>