<p>Disclaimer: hobby coder having fun learning. Apologies for any terrible jargon errors - please tell me the proper names for these things as that really helps my attempts to self-educate.</p>  <p>I am trying to define a database of things using Python and MySQL (actually CloudSQL - I'm doing this on AppEngine). These things are heterogeneous - e.g some have common properties, but many have unique properties. I thought this might be a sensible way to store stuff:</p>  <pre><code>table: things |+++++++++++++|+++++++++++++++++|+++++++++++| |  thing_id   |   property_id   |   value   | |+++++++++++++|+++++++++++++++++|+++++++++++| |      1      |        1        |    foo    | |      1      |        2        |    blue   | |      2      |        1        |    bar    | |      2      |        3        |    large  | |+++++++++++++|+++++++++++++++++|+++++++++++|  table: properties |+++++++++++++++++|+++++++++++++++++++++++++| |   property_id   |   property_definition   | |+++++++++++++++++|+++++++++++++++++++++++++| |        1        |    name                 | |        2        |    color                | |        3        |    size                 | |+++++++++++++++++|+++++++++++++++++++++++++| </code></pre>  <p>This way my objects can be of variable "width" - e.g some will have ten properties, some will just have a name - but I don't have a big table full of empty columns. I am pretty sure this is the right thing to do.</p>  <p>The confusing bit is getting these things out of my weird, nested table and into Python. I can conceptually load each row as an instantiation of a single master class with optional attributes, but then I'm re-defining all of my properties and their definitions, some of them will need to be optional... it seems inelegant to have to define everything twice.</p>  <p>I think the  solution to this is using SQL alchemy but I can't get my head around how this works with my "deep vs wide" table structure. Can somebody help me out, even with some pseudo code for my above example? I'd like to pull my two deconstructed objects, reconstruct them and print the available properties - which, crucially, are going to change for each object.</p>  <p>If this doesn't make sense please let me know and I will try to re-phrase. Sorry for what I assume is a really basic question, I can't imagine I'm the first beginner to hit this issue ;)</p>