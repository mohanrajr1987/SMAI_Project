<p>I have seen some pure SQL queries that could be solutions to this, but my SQL isn't really on point so a SQLAlchemy solution would be appreciated. I'm also using sqlite.</p>  <p>I have a hierarchy type structure in SQLAlchemy similar to a normal filesystem - nested nodes with leaves at the end. I have a solution for finding files using only Python, but it is quite slow so I'm hoping there's a faster way.</p>  <p>The folders are defined as such:</p>  <pre><code>class folder(Base):     __tablename__ = 'folder'     id = Column(Integer, primary_key=True)     parentid = Column(Integer, ForeignKey('folder.id', ondelete='CASCADE'),index=True)     type = Column(Text(50))      children = relationship('folder',                             cascade='all',                             backref=backref('parent', remote_side='folder.id'),                         )      __mapper_args__ = {         'polymorphic_identity': 'folder',         'polymorphic_on': type     }      def getFiles(self):         """ returns a list of the files in this folder         """         flist = []         for child in self.children:             flist += child.getFiles()         return flist </code></pre>  <p>And the files:</p>  <pre><code>class file(folder):     __tablename__ = 'file'     id = Column(Integer, ForeignKey('folder.id', ondelete='CASCADE'), primary_key=True)     name = Column(Text(50))      __mapper_args__ = {         'polymorphic_identity': 'file',         'inherit_condition': (id == folder.id),     }      def getFiles(self):         """ return self as the only file         """         return [self] </code></pre>  <p>Currently I find files by filename like so:</p>  <pre><code>files = some_folder.getFiles() return [f for f in files if file_name in f.name.lower()] </code></pre>  <p>Is there any better way to query for files in a folder?</p>