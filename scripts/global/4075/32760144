<p>I have the following datamodel:</p>  <pre><code>class TS(Base):  # Parent     __tablename__ = 'ts'     id = Column(Integer, primary_key=True)     inspection_data = relationship('ID', backref='ts', uselist=False) </code></pre>  <p>and </p>  <pre><code>class ID(Base):  # Child     __tablename__ = 'ins'      id = Column(Integer, primary_key=True)     created = Column(Date, default=datetime.datetime.utcnow(), nullable=False)     next_inspection = Column(Date, unique=False, nullable=True)     ts_id = Column(Integer, ForeignKey('ts.id')) </code></pre>  <p>Now I would like to create a hybrid property 'status' that tells me if the next_inspection is overdue (i.e. behind today)</p>  <p>I solved that so far as:</p>  <pre><code>    @hybrid_property     def status(self):         now = datetime.datetime.utcnow().date()         delta = self.next_inspection - now         if delta.days &gt; 30:             return 3  # OK, next inspection far away         elif delta.days &gt; 0:             return 2  # Next inspection getting close         else:  # We are overdue             return 1 </code></pre>  <p>This works both at class as on instance level, meaning I can even query using status. In order to work I had to add:</p>  <pre><code>    @status.comparator     def status(cls):         return DateTimeComparator(cls.next_inspection) </code></pre>  <p>with</p>  <pre><code>class DateTimeComparator(Comparator):     def __gt__(self, other):         return self.__clause_element__() &gt; other     # same for __lt__, __eq__ etc </code></pre>  <p>Now to my question:  Instead of returning as in above example the values 1, 2 or 3 for the status, I want to return one of three values that are stored in another table with the following model:</p>  <pre><code>class IDStatusValues(Base):     __tablename__ = 'ins_status_values'    id = Column(Integer, primary_key=True)    value = Column(Unicode, unique=True, nullable=True, info={})    ID_id = Column(Integer, ForeignKey('ins.id')) </code></pre>  <p>with the following data:</p>  <pre><code>id | value ----------- 0  | 'OK' 1  | 'APPROACHING' 2  | 'OVERDUE' </code></pre>  <p>That is I would like to change the status method to something like this:</p>  <pre><code>   @hybrid_property     def status(self):         now = datetime.datetime.utcnow().date()         delta = self.next_inspection - now         if delta.days &gt; 30:             return IDStatusValues.get(0)  # OK, next inspection far away         elif delta.days &gt; 0:             return IDStatusValues.get(1)  # Next inspection getting close         else:  # We are overdue             return IDStatusValues.get(2) </code></pre>  <p>But I do not understand how I could query inside this function. I admit until now I only worked in declarative and am not very experienced in true SQL / expressive sqlalchemy.</p>