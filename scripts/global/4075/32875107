<p>I have built a <code>CRUD API</code> for working with a <code>database</code>. The <code>Retrieve</code>(or Read) <code>function</code> for the table <code>class</code>, <code>assessment_results</code> is currently giving me issues. Background regarding the design: the <code>API</code> also has a convenience file that inherits from the main file (object.py) for purposes of accepting <code>string</code> values.</p>  <p>What it needs to do: check for an <code>ID</code> and/or check for two arguments (should the ID not be in use). If one or the other(s) if appropriate, retrieve it along with its particulars.  Following the <a href="https://docs.python.org/2/glossary.html#term-argument" rel="nofollow">docs on Python</a>, I introduced the argument <code>*</code> to allow optional position arguments. I also had helped from this great <a href="http://www.informit.com/articles/article.aspx?p=2314818" rel="nofollow">tutorial.</a> (I am a newbie at designing and building dbs and using python.)</p>  <p>I believe the retrieve method is working, but there must be a flaw in the design or the method for <code>create_category_rating(...)</code> as the <code>Traceback</code> is returning now a <code>ValueError</code>. I read here on <a href="http://stackoverflow.com/questions/13687043/python-optional-positional-and-keyword-arguments">Stacks</a> (a similar issue) that I might  need to assign a value to args, but it seems like I am through the API.</p>  <p>Code as Follows: </p>  <p><strong>object.py</strong></p>  <p>(retrieve method and create_category_rating method): </p>  <pre><code>def retrieve_assessment_results(self, something_unique, *args):     if isinstance(something_unique, int):         return self.session.query(Assessment_Results).\         filter(Assessment_Results.id == something_unique).one()     elif isinstance(something_unique, basestring) and isinstance(args, basestring):         return self.session.query(Assessment_Results).\         filter(Assessment_Results.owner == something_unique).\         filter(Assessment_Results.assessment == args).one()     elif isinstance(something_unique, Assessment_Results) and isinstance(args, Assessment_Results):         return something_unique, args     else:         raise ValueError('Value being passed is an object')  def create_category_rating(self, category_rating_int, category, assessment_results):     new_catrating = Category_Rating(category_rating_int, category, assessment_results)     self.session.add(new_catrating)     print(new_catrating)     self.session.commit()     return(new_catrating) </code></pre>  <p><strong>convenience.py</strong>  (<em>inherits from object.py</em>)</p>  <pre><code>def create_category_rating(self, category_rating_int, category_name, username, name):     category = self.retrieve_category(category_name)     owner = self.retrieve_user(username)       assessment = self.retrieve_assessment(name)       assessment_results = self.retrieve_assessment_results(owner, assessment)     return super(ConvenienceAPI, self).create_category_rating(category_rating_int, category, assessment_results) </code></pre>  <p><strong>test.py</strong> </p>  <pre><code>api = ConvenienceAPI() api.create_category_rating(2, 'Decision-Making', 'baseball', 'Becoming a Leader') </code></pre>  <p><br> <strong>Current Issue</strong>: StatementError  As per suggested, changed conditionals (needed to unpack and assign the tuple given by *args). </p>  <p>New API: </p>  <pre><code>def retrieve_assessment_results(self, *args):     id, assessment, owner = None, None, None     if len(args) == 1:         id, = args[0]     elif len(args) == 2:         assessment, owner = args     else:         raise ValueError('Value being passed is an object')     if id is not None:         return self.session.query(Assessment_Results).\         filter(Assessment_Results.id == id).one()     elif assessment is not None:         return self.session.query(Assessment_Results).\         filter(Assessment_Results.assessment == assessment).one()     elif owner is not None:         return self.session.query(Assessment_Results).\         filter(Assessment_Results.owner == owner).one() </code></pre>  <p><strong>TRACEBACK:</strong> </p>  <pre><code>Traceback (most recent call last):   File "/usr/local/lib/python2.7/site-packages/nose/case.py", line 197, in runTest     self.test(*self.arg)   File "/Users/ack/code/venv/NotssDB/notssdb/test/test.py", line 111, in test1     api.create_category_rating(2, 'Decision-Making', 'baseball', 'Becoming a Leader')   File "/Users/ack/code/venv/NotssDB/notssdb/api/convenience.py", line 41, in create_category_rating     assessment_results = self.retrieve_assessment_results(owner, assessment)   File "/Users/ack/code/venv/NotssDB/notssdb/api/object.py", line 323, in retrieve_assessment_results     filter(Assessment_Results.assessment == assessment).one()   File "/usr/local/lib/python2.7/site-packages/sqlalchemy/orm/query.py", line 2472, in one     ret = list(self)   File "/usr/local/lib/python2.7/site-packages/sqlalchemy/orm/query.py", line 2515, in __iter__     return self._execute_and_instances(context)   File "/usr/local/lib/python2.7/site-packages/sqlalchemy/orm/query.py", line 2530, in _execute_and_instances     result = conn.execute(querycontext.statement, self._params)   File "/usr/local/lib/python2.7/site-packages/sqlalchemy/engine/base.py", line 914, in execute     return meth(self, multiparams, params)   File "/usr/local/lib/python2.7/site-packages/sqlalchemy/sql/elements.py", line 323, in _execute_on_connection     return connection._execute_clauseelement(self, multiparams, params)   File "/usr/local/lib/python2.7/site-packages/sqlalchemy/engine/base.py", line 1010, in _execute_clauseelement     compiled_sql, distilled_params   File "/usr/local/lib/python2.7/site-packages/sqlalchemy/engine/base.py", line 1078, in _execute_context     None, None)   File "/usr/local/lib/python2.7/site-packages/sqlalchemy/engine/base.py", line 1339, in _handle_dbapi_exception     exc_info   File "/usr/local/lib/python2.7/site-packages/sqlalchemy/util/compat.py", line 199, in raise_from_cause     reraise(type(exception), exception, tb=exc_tb)   File "/usr/local/lib/python2.7/site-packages/sqlalchemy/engine/base.py", line 1073, in _execute_context     context = constructor(dialect, self, conn, *args)   File "/usr/local/lib/python2.7/site-packages/sqlalchemy/engine/default.py", line 544, in _init_compiled     grp, m in enumerate(parameters)]   File "/usr/local/lib/python2.7/site-packages/sqlalchemy/sql/compiler.py", line 498, in construct_params     pd[self.bind_names[bindparam]] = bindparam.effective_value   File "/usr/local/lib/python2.7/site-packages/sqlalchemy/sql/elements.py", line 1162, in effective_value     return self.callable()   File "/usr/local/lib/python2.7/site-packages/sqlalchemy/orm/relationships.py", line 1386, in _go     value = fn(*arg, **kw)   File "/usr/local/lib/python2.7/site-packages/sqlalchemy/orm/mapper.py", line 2422, in _get_state_attr_by_column     return state.manager[prop.key].impl.get(state, dict_, passive=passive) StatementError: (exceptions.KeyError) 'assessment_id' [SQL: u'SELECT assessment_results.id AS assessment_results_id, assessment_results.created_on AS assessment_results_created_on, assessment_results.owner_id AS assessment_results_owner_id, assessment_results.assessment_id AS assessment_results_assessment_id \nFROM assessment_results \nWHERE ? = assessment_results.assessment_id'] [parameters: [immutabledict({})]] </code></pre>