<p>I'm trying to generate some randomized data, and I've been using newid() to seed functions since it is called once for every row and is guaranteed to return a different result each time.  However I'm frequently getting values that are somehow not equal to any integers in the expected range.</p>  <p>I've tried a few variations, including a <a href="http://stackoverflow.com/questions/1045138/how-do-i-generate-random-number-for-each-row-in-a-tsql-select">highly upvoted one</a>, but they all result in the same issue.  I've put it into a script that shows the problem:</p>  <pre><code>declare @test table (id uniqueidentifier) insert into @test select newid() from sys.objects  select      floor(rand(checksum(id)) * 4),     case isnull(floor(rand(checksum(id)) * 4), -1)         when 0 then 0         when 1 then 1         when 2 then 2         when 3 then 3         when -1 then -1         else 999     end,     floor(rand(checksum(newid())) * 4),     case isnull(floor(rand(checksum(newid())) * 4), -1)         when 0 then 0         when 1 then 1         when 2 then 2         when 3 then 3         when -1 then -1         else 999     end from @test </code></pre>  <p>I expect the results to always be in the range 0 to 3 for all four columns.  When the unique identifiers are retrieved from a table, the results are always correct (first two columns.)  Similarly, when they're output on the fly they're also correct (third column.)  But when they're compared on the fly to integers in a case statement, it often returns a value outside the expected range.</p>  <p>Here's an example, these are the first 20 rows when I ran it just now.  As you can see there are '999' instances in the last column that shouldn't be there:</p>  <pre><code>0   0   3   1 3   3   3   1 0   0   3   3 3   3   2   999 1   1   2   999 3   3   2   1 2   2   0   999 0   0   0   0 3   3   2   0 1   1   3   999 3   3   0   999 2   2   2   2 1   1   3   0 2   2   3   0 3   3   1   999 0   0   1   999 3   3   1   1 0   0   0   3 3   3   0   999 0   0   1   0 </code></pre>  <p>At first I thought maybe the type coercion was different than I expected, and the result of rand() * int was a float not an int.  So I wrapped it all in floor to force it to be an int.  Then I thought perhaps there's an odd null value creeping in, but with my case statement a null would be returned as -1, and there are none.</p>  <p>I've run this one two different SQL Server 2012 SP1 instances, both give the same sort of results.</p>