<p>One of our systems is build as a wrapper around a third party customized work flow product that we cannot change.</p>  <p>Recently we got a request to capture some user activity data which is persisted nowhere else than in the application logs. These logs files are quite a few spreading across multiple machines so analyzing those logs to extract the required info would be a relatively complex task. </p>  <p>Creating some aspects to audit those user actions was considered but was quickly ran out giving the amount of third party code you need to decompile and look at. There will also be security restrictions about activating load-time weaving on production application servers.</p>  <p>My initial idea was to redirect the log outputs we are interested in to a different file (actually files) and then analyze those files to process that data. This seems doable but when you start considering things you soon find a lot of issues to deal with when working with files: logs rollover, no transactions, keeping a track of what was processed and what not, etc.</p>  <p>My second thought was to implement a custom pattern layout and configure it to be used for the logs I was interested in. Easy to write, keeping it away from third party code in addition to sending the message to the log file will also save the log entry into a table. Once in the table I can do everything I want starting from there. Code fragment below:</p>  <pre><code>public class CustomPatternLayout extends Layout {     private final PatternLayout patternLayout;     private SimpleJdbcTemplate simpleJdbcTemplate;      public CustomPatternLayout() {         System.out.println("Creating CustomPatternLayout instance");         patternLayout = new PatternLayout("%m%n");         simpleJdbcTemplate = new SimpleJdbcTemplate(...);     }     ...     protected PatternParser createPatternParser(String pattern) {         System.out.println("CustomPatternLayout: returning pattern parser");         return new PatternParser(pattern);     }      public String format(LoggingEvent event) {         String log = patternLayout.format(event);         System.out.println("CustomPatternLayout: about to write log entry to the database: " + log);         simpleJdbcTemplate.update("INSERT INTO my_login_tracker (log_entry) values (?)", log);         return log;     } </code></pre>  <p>Once this done I added it to my log4j.properties</p>  <pre><code>log4j.appender.FILE=org.apache.log4j.RollingFileAppender log4j.appender.FILE.layout=my.org.utils.logging.CustomPatternLayout </code></pre>  <p>And I can see in the logs my system out entries sign that my custom pattern layout is created and configured. However the actual <code>format</code> method never gets invoked and consequently I get nothing saved in my table. There are still lots of log entries in the logs and it looks like my custom pattern layout is not used.</p>  <p>I used this strategy before to make it possible to output thread id in the logs and it worked perfectly. I admit that was a standalone java application as opposed to this one which is running on a webshere application server.</p>  <p>Any idea about what would cause this and how to address it? Alternative approach that will do the job without involving lots of technologies?</p>  <p>Thank you in advance for your inputs.</p>