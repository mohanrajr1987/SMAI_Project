<p>So let's say I use reflection to find a class'subtypes (I'm using the Google Reflections library).</p>  <pre><code>Set&lt;Class&lt;? extends Parent&gt;&gt; subTypes = reflections.getSubTypesOf(Parent.class); </code></pre>  <p>now I want to create a list for each subtype, by iterating over the set's members, so I want something like this:</p>  <pre><code>try {     for (Class&lt;? extends Parent&gt; cType : subTypes.iterator()) {         Class x = Class.forName(cType.getName());         List&lt;x&gt; list = new ArrayList&lt;x&gt;();     } } catch(ClassNotFoundException ex){     ... } </code></pre>  <p>However, this doesn't work, and the compiler complains that 'x is an unknown class' on the list definition.  </p>  <p>Is there a way to define a list based on the reflected types?</p>