<p>I'm trying to find a neat way to trigger a loading mechanism when one of several getters is first accessed. My first thoughts are about something like this:</p>  <pre><code>public class Customer {     private bool loaded = false;      public int PK { get; set; }     public string Email { get; set; }      public string Name { get { if (!loaded) loadData(); return _name; } set { ... } }     public string Street { get { if (!loaded) loadData(); return _street; } set { ... } }     public string City { get { if (!loaded) loadData(); return _city; } set { ... } } } </code></pre>  <p>In short, in this example every <code>Customer</code> exists with its base data <code>PK</code> and <code>Email</code> until one of the other properties is accessed.</p>  <p>This would mean much duplicate code, increasing with the complexity of the class. Is there a way to create some kind of inheritance for these properties?</p>  <p>Something like this, but I don't think this is possible:</p>  <pre><code>private void checkData() { if (!loaded) loadData(); } public string Name:checkData { get; set; } public string Street:checkData { get; set; } public string City:checkData { get; set; } </code></pre>  <p>Another way might be possible through reflection, but as I'm not experienced with it I don't know where to start here.</p>  <p>Any hints are deeply appreciated! ;-)</p>