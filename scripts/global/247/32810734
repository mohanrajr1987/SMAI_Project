<p>I have a custom class for triangles:</p>  <pre><code>[XmlRootAttribute(Namespace = "", IsNullable = false)] [XmlType("Figure.Triangle")] public class Triangle : Figure {     [XmlIgnore]     public Point a { get; set; }     [XmlIgnore]     public Point b { get; set; }     [XmlIgnore]     public Point c { get; set; }      [XmlElement("a")]     public string aString     {         get { return a.X.ToString() + ';' + a.Y.ToString(); }         set         {             if (String.IsNullOrWhiteSpace(value))                 return;             string[] xmlArr = value.Split(';');             this.a = new Point(Convert.ToInt32(xmlArr[0]), Convert.ToInt32(xmlArr[1]));         }     }      [XmlElement("b")]     public string bString     {         get { return b.X.ToString() + ';' + b.Y.ToString(); }         set         {             if (String.IsNullOrWhiteSpace(value))                 return;             string[] xmlArr = value.Split(';');             this.b = new Point(Convert.ToInt32(xmlArr[0]), Convert.ToInt32(xmlArr[1]));         }     }      [XmlElement("c")]     public string cString     {         get { return c.X.ToString() + ';' + c.Y.ToString(); }         set         {             if (String.IsNullOrWhiteSpace(value))                 return;             string[] xmlArr = value.Split(';');             this.c = new Point(Convert.ToInt32(xmlArr[0]), Convert.ToInt32(xmlArr[1]));         }     }      [XmlIgnore]     public Pen pen { get; set; }     [XmlElement("PenColor")]     public int penColor     {         get { return pen.Color.ToArgb(); }         set { this.pen.Color = Color.FromArgb(value); }     }      [XmlElement("PenWidth")]     public float penWidth     {         get { return this.pen.Width; }         set { this.pen.Width = value; }     }      [XmlIgnore]     public SolidBrush brush { get; set; }     [XmlElement("BrushColor")]     public int brushColor     {          get { return this.brush.Color.ToArgb();}         set { this.brush.Color = Color.FromArgb(value); }     }     public Triangle()     {         a = new Point(0, 0);         b = new Point(0, 0);         c = new Point(0, 0);         pen = new Pen(Color.Black, 1);     }      public Triangle(Point a1, Point b1, Point c1, Pen myPen)     {         this.a = a1;         this.b = b1;         this.c = c1;         this.pen = myPen;     } } </code></pre>  <p>I serialize my figures to the xml-structure and save them. If I need I deserialize them back and re-draw in the pictureBox. The issue is: when I deserialize figures from xml, all filled figures have the color of the last one.</p>  <p>Here's part of deserialization:</p>  <pre><code>foreach (XmlNode singleNode in nodes) {     Type TestType = GetTypeFromAssemblyByName(singleNode.Attributes.GetNamedItem("d1p1:type").Value);     if (TestType != null)     {         ConstructorInfo ci = TestType.GetConstructor(new Type[] { });         object Obj = ci.Invoke(new object[] { });         MethodInfo method = TestType.GetMethod("Deserialize");         object result = method.Invoke(Obj, new object[] { singleNode.OuterXml });                               listObjects.Add(result);     }     else     {         Console.WriteLine("Class wasn't found");     } } </code></pre>  <p>E.g. I have 2 filled triangles which are saved to Xml. First is blue and second is red and both of them have different brush color, which is need for fillPolygon method.</p>  <pre><code>&lt;Workspace&gt;   &lt;Figure d1p1:type="Figure.FilledTriangle" xmlns:d1p1="http://www.w3.org/2001/XMLSchema-instance"&gt;     &lt;a&gt;64;68&lt;/a&gt;     &lt;b&gt;96;295&lt;/b&gt;     &lt;c&gt;283;41&lt;/c&gt;     &lt;PenColor&gt;-16777216&lt;/PenColor&gt;     &lt;PenWidth&gt;1&lt;/PenWidth&gt;     &lt;BrushColor&gt;-16744193&lt;/BrushColor&gt;   &lt;/Figure&gt;   &lt;Figure d1p1:type="Figure.FilledTriangle" xmlns:d1p1="http://www.w3.org/2001/XMLSchema-instance"&gt;     &lt;a&gt;321;411&lt;/a&gt;     &lt;b&gt;575;152&lt;/b&gt;     &lt;c&gt;629;462&lt;/c&gt;     &lt;PenColor&gt;-16777216&lt;/PenColor&gt;     &lt;PenWidth&gt;1&lt;/PenWidth&gt;     &lt;BrushColor&gt;-65408&lt;/BrushColor&gt;   &lt;/Figure&gt; &lt;/Workspace&gt; </code></pre>  <p>Everything seems right, but when I invoke the Deserialize method, the result is, that the brush color of all previously added figures in the list is re-written. So in my example I have two red triangles on theirs right positions.</p>  <p>I understand that list contains references to the result, but other parameters: coordinates, pen color, etc are left as they were.</p>  <p>How can I get rid of this? I've tried to write result values to array, but even in the array they were replaced.</p>  <p><em>Update 1</em> Deserialize method which I use:</p>  <pre><code>public class Serializer&lt;T&gt; where T : class {     public T Deserialize(string inputXml)     {         try         {             using (TextReader reader = new StringReader(inputXml))             {                 var xs = new XmlSerializer(typeof(T));                 return (T)xs.Deserialize(reader);             }         }         catch (Exception ex)         {             Console.WriteLine("An error was caught during deserialization " + ex.Message);         }         return null;     } </code></pre>