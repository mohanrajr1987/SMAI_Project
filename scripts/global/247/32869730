<p>I have a base request-object <code>RequestBase</code> defined like:</p>  <pre><code>public abstract class RequestBase {     public abstract string Area { get; }     public abstract string ActionName { get; }     public abstract string LinkName { get; }     public abstract string ControllerName { get; } } </code></pre>  <p>and a childclass of this like:</p>  <pre><code>public class RequestTest : RequestBase {     public Guid Id { get; set; }      public RequestTest()     {         Id = Guid.Empty;     }      #region implementation of RequestBase      public override string Area     {         get { return "MyArea"; }     }      public override string ActionName     {         get { return "Overview"; }     }      public override string ControllerName     {         get { return "Test"; }     }      public override string LinkName     {         get { return "Click me for awesome"; }     }      #endregion } </code></pre>  <p>Question. I want to write a helper to build links this way:</p>  <pre><code>@Html.ActionLinkByRequest(new RequestTest{Id = Guid.Empty}) </code></pre>  <p>which I currently have implemented</p>  <pre><code>public static MvcHtmlString ActionLinkByRequest(this HtmlHelper helper, RequestBase request, object htmlAttributes = null) {     return helper.ActionLink(request.LinkName, request.ActionName, request.ControllerName, request, htmlAttributes); } </code></pre>  <p>Unfortunately it renders to:</p>  <pre><code>&lt;a href="/MyArea/Test/Overview?EventId=00000000-0000-0000-0000-000000000000&amp;ActionName=Overview&amp;LinkName=Click%20me%20for%20awesome&amp;ControllerName=Test"&gt;Click me for awesome&lt;/a&gt; </code></pre>  <p>but I want to have only</p>  <pre><code>&lt;a href="/MyArea/Test/Overview?EventId=00000000-0000-0000-0000-000000000000"&gt;Click me for awesome&lt;/a&gt; </code></pre>  <p>without the readonly fields. Because they are readonly, I don't need them explicitly in the query-string as of my <code>Action</code> awaits the concrete implementation <code>RequestTest</code> and will have them anyway:</p>  <pre><code>public ActionResult Overview(RequestTest request) {     // do things here      return View(); } </code></pre>  <p>Any ideas how I can skip the generation of read-only fields for the actionlink? Maybe by using reflection somehow?</p>  <p><strong>Edit by comments</strong></p>  <p>Would this work?</p>  <pre><code>public static MvcHtmlString ActionLinkByRequest(this HtmlHelper helper, RequestBase request, object htmlAttributes = null) {     var rvd = new RouteValueDictionary();      foreach(var prop in request.GetType().GetProperties().Where(p =&gt; p.CanRead &amp;&amp; p.CanWrite))     {         // add the property by name and the value         // rvd.Add(prop.Name, prop.GetValue());     }      // add the area (check if not already existing)     if(!rvd.ContainsKey("Area"))         rvd.Add("Area", request.AreaName);      return helper.ActionLink(request.LinkName, request.ActionName, request.ControllerName, request, htmlAttributes); } </code></pre>