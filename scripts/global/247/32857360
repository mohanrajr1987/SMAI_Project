<p>My class will be given an Object class. I am then using reflection to iterate over the declared fields of that class and registering a <code>ChangeListener</code> on each field with the <code>Property</code> base class.</p>  <p>The original 'createChangeListener' method looked like this:</p>  <pre><code>private void createChangeListener(Property property) {     property.addListener(new ChangeListener() {         @Override         public void changed(ObservableValue observable, Object oldValue, Object newValue) {                                     Foo.this.propertyChanged(observable);         }     }); } </code></pre>  <p>However, this was producing an unwanted warning:</p>  <pre><code>warning: [unchecked] unchecked call to addListener(ChangeListener&lt;? super T&gt;) as a member of the raw type ObservableValue     property.addListener(new ChangeListener() {         where T is a type-variable:     T extends Object declared in interface ObservableValue </code></pre>  <p>Not to be dissuaded, I provided a generic type for my <code>Property</code> parameter and <code>ChangeListener</code>:</p>  <pre><code>private void createChangeListener(Property&lt;Object&gt; property) {     property.addListener(new ChangeListener&lt;Object&gt;() {         @Override         public void changed(ObservableValue observable, Object oldValue, Object newValue) {                                     Foo.this.propertyChanged(observable);         }     }); } </code></pre>  <p>...Only now to be notified that I have simply shifted my problem to the source of the reflection. The code, below, is now modified to cast to <code>Property&lt;Object&gt;</code> from its original <code>Property</code> w/o a generic type:</p>  <pre><code>if (Property.class.isAssignableFrom(field.getType())) {     createChangeListener((Property&lt;Object&gt;)(field.get(model))); } </code></pre>  <p>This previously warningless code is now producing the head-tilting:</p>  <pre><code>warning: [unchecked] unchecked cast     createChangeListener((Property&lt;Object&gt;)(field.get(model))); required: Property&lt;Object&gt; found:    Object </code></pre>  <p>Questions:</p>  <ul> <li>ಠ_ಠ</li> <li>Given Java's type erasure limitations, what techniques are available to me to safely resolve these warnings?</li> <li>Am I safe to suppress the unchecked warning in the original, non-typed method?</li> </ul>