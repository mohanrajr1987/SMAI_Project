<p>I will start with my example: I have a class <code>classload.Loadable</code> .</p>  <pre><code>package classload;  public class Loadable {     static{         System.out.println("Loaded already.....");     }     public Loadable(){         System.out.println("Now created.....");     } } </code></pre>  <p>which will be loaded and created instance in the following 2 ways.</p>  <p><strong>First:</strong></p>  <pre><code> public static void main(String[] args) throws Exception {                 System.out.println("Starting .....");                 Class.forName("classload.Loadable").newInstance();             } </code></pre>  <p><strong>Second:</strong></p>  <pre><code> public static void main(String[] args) throws Exception {                 System.out.println("Starting .....");                  classload.Loadable.class.newInstance();             } </code></pre>  <p><strong>Both gives same output as expected(since <code>Class.forname</code> returns the same <code>class</code> object)</strong>:</p>  <pre><code>Starting ..... Loaded already..... Now created..... </code></pre>  <p>I want to know which all scenarios we use <code>Class.forname</code> and whereever we may use <code>.class</code> object directly</p>