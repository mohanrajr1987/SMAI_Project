<p>I have a page that has elements that become visible as you scroll down.  I am trying to execute a test to make sure the elements are not there until the scroll is to the bottom of the elements, but I can't seem to figure out how to pass the size from one call (<code>elementIdSize()</code>) to the scroll offset of the next call (<code>scroll()</code>).  Admittedly my brain does not yet get the concept of "promises" past simple call chaining.</p>  <p>I tried something like this:</p>  <pre><code>this.browser     .setViewportSize({width: 1000, height: 600})     .element(selector)     .then(function(e) {          console.log('then element: ', e);         element = e;      })     .elementIdSize(element.id)     .then(function(size) {         console.log('Size: ', size);     })     .call(callback); </code></pre>  <p>Which I was hoping would use the passed-in selector to get the element, set the element in the <code>then()</code>, then call <code>elementIdSize()</code> on the element's ID, but the <code>var element</code> is never set from the <code>element()</code> call, and the objects I am getting back don't seem to be what I am trying to get anyway.  I feel this is some simple piece of knowledge I am missing here that will make all this "click".</p>  <p>I am using the APIs <a href="http://webdriver.io/api.html" rel="nofollow">here</a> for looking up the Webdriver calls, but the documentation doesn't give much details.</p>