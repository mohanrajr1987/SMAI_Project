<p>This surely is a common problem. I have a properties file like <code>my-settings.properties</code> which is read by an application class. When I write a test class, it needs to test different scenarios of things that could be present in <code>my-settings.properties</code> in order to ensure maximum code coverage (e.g. empty properties file, basic properties file etc). But I can only have one <code>my-settings.properties</code> in my <code>src/test/resources</code>.</p>  <p>What would be really great is if there was just some annotation</p>  <p><code>@MockFileOnClassPath(use = "my-settings-basic.properties", insteadOf = "my-settings.properties")</code></p>  <p>Then I could just have multiple <code>my-settings-XXX.properties</code> files in my <code>/src/test/resources</code> and just annotated the correct one on each test method. But I can't find anything like this. I'm using JUnit 4.12.</p>  <p>I can think of a couple of crude solutions:</p>  <ol> <li>Before each test, find the file on the file system, copy it using filesystem I/O, then delete it again after the test. But this is clumsy and involves a lot of redundancy. Not to mention I'm not even sure whether the classpath directory will be writable.</li> <li>Use a mocking framework to mock <code>getResource</code>. No idea how I would even do that, especially as there are a million different ways to get the file (<code>this.getClass().getResourceAsStream(...)</code>, <code>MyClass.class.getResourceAsStream(...)</code>, <code>ClassLoader.getSystemClassLoader().getResourceAsStream(...)</code> etc.)</li> </ol>  <p>I just think this must be a common problem and maybe there is already a solution in JUnit, Mockito, PowerMock, EasyMock or something like that?</p>  <p><strong>EDIT</strong>: Someone has specified that this question is a duplicate of <a href="http://stackoverflow.com/questions/24231773/specifying-a-custom-log4j-properties-file-for-all-of-junit-tests-run-from-eclips">Specifying a custom log4j.properties file for all of JUnit tests run from Eclipse</a> but it isn't. That question is about wanting to have a different properties file between the main and test invocations. For me I want to have a different properties file between a test invocation and another test invocation.</p>