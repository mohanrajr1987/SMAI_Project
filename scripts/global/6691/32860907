<p>This is a method under my controller which is used to create dummy keys to encrypt the data in the application and store the same in the amazon s3 bucket.</p>  <pre><code>public JsonResult SaveMasterKeys(string MekText, int Thismek)         {             string folderName = string.Empty, fileName = string.Empty;             List&lt;string&gt; folderNameList = new List&lt;string&gt;();             folderNameList.Add("Guard1");             folderNameList.Add("Guard2");             try             {                 if (Thismek == 1)                 {                     folderName = "Guard1";                     fileName = "NewMek1.key";                 }                 else                 {                     folderName = "Guard2";                     fileName = "NewMek2.key";                 }                 AWSS3File aws = new AWSS3File();                  //aws.BucketExist(filePath);                 //aws.CreateFile(MekText, filePath);                 // Check Weather the Folder is exist or not                  if (!aws.CheckFolderExist(folderName))                 {                     foreach (var item in folderNameList)                     {                         aws.CreateFolder(item);                         if (item == "Guard1")                         {                             aws.CreateFileIntoS3((item == folderName ? MekText : ""), item, "NewMek1.key");                             aws.CreateFileIntoS3("", item, "Mek1.key");                         }                         else                         {                             aws.CreateFileIntoS3((item == folderName ? MekText : ""), item, "NewMek2.key");                             aws.CreateFileIntoS3("", item, "Mek2.key");                         }                     }                 }                 else                 {                     aws.CreateFileIntoS3(MekText, folderName, fileName);                 }                 ViewData["SaveMessage"] = "Saved successfully.";             }             catch (Exception ex)             {                 XTP.Logger.LogCritical("XTP.Web.internaltools", ex.ToString());                 ViewData["SaveMessage"] = "Keys not updated successfully.";             }             return Json(new { success = true, value = ViewData["SaveMessage"] }, JsonRequestBehavior.AllowGet);         } </code></pre>  <p>And this is the TESTMETHOD I have written for the same</p>  <pre><code>[TestMethod]         public void MockAlways()         {             var mock = new Mock&lt;AccountController&gt;();             JsonResult json = new JsonResult();             //new { success = true, value = ViewData["SaveMessage"] }, JsonRequestBehavior.AllowGet             json.Data = new { success = true, value = "sa" };             json.JsonRequestBehavior = JsonRequestBehavior.AllowGet;               mock.Setup(x =&gt; x.SaveMasterKeys("ss", 1)).Returns(json);              var controller = new AccountController();             var result = controller.SaveMasterKeys("ss", 1) as JsonResult;              Assert.AreEqual(mock.Object.SaveMasterKeys("ssxs", 1), result.Data.ToString());         } </code></pre>  <p>I am getting an invalid setup error. Is there a way to resolve this error?</p>