<p>I'm trying to verify a method call on a Moq implementing the following interface(s), but it is failing to match the invocation.</p>  <p>My unit test (simplified):</p>  <pre><code>[Test] public void ShouldDeleteComponent() {     var mockDao = new Mock&lt;IComponentDataAccess&gt;();      Target.ComponentDao = mockDao.Object;     Target.Execute();      mockDao.Verify(x =&gt; x.Delete(It.IsAny&lt;Component&gt;()), Times.Once); } </code></pre>  <p>My mocked object's interfaces:</p>  <pre><code>public interface IComponentDataAccess : IDataAccess&lt;Component&gt; {     int Delete(Component entity); }  public interface IDataAccess&lt;T&gt; where T : IEntity {     int Delete(T entity); } </code></pre>  <p>Finally, how the code is actually called in the System Under Test:</p>  <pre><code>public override void Execute() {     DeleteItem(ComponentDao, existingComponent); } </code></pre>  <p>which calls:</p>  <pre><code>protected virtual void DeleteItem&lt;T&gt;(IDataAccess&lt;T&gt; dataAccess, T item) where T : IEntity {     dataAccess.Delete(item); } </code></pre>  <p>As you can see, the DAO is passed in as its base interface. On verification, it finds the following invocation:</p>  <blockquote>   <p>Performed invocations:</p>      <p>IDataAccess`1.Update(blah.namespace.UserAccount)</p> </blockquote>  <p>When the invocation it's trying to match is:</p>  <blockquote>   <p>IUserAccountDataAccess.Update(blah.namespace.UserAccount)</p> </blockquote>  <p>Is there a way to verify this method call with Moq?</p>