<p>I'm attempting to write a grammar for C and am having an issue that I don't quite understand. Relevant portions of the grammar:</p>  <pre><code>stmt :   types decl SEMI                { marks (A.Declare ($1, $2)) (1, 2) }  | simp SEMI                     { marks $1 (1, 1) }  | RETURN exp SEMI               { marks (A.Return $2) (1, 2) }  | control                       { $1 }   | block                         { marks $1 (1, 1) }  ;   control :    if                                                    { $1 }   | WHILE RPAREN exp LPAREN stmt                         { marks (A.While ($3, $5)) (1, 5) }   | FOR LPAREN simpopt SEMI exp SEMI simpopt RPAREN stmt { marks (A.For ($3, $5, $7, $9)) (1, 9) }   ;    if :     IF RPAREN exp LPAREN stmt                                { marks (A.If ($3, $5, None)) (1, 5) }   | IF RPAREN exp LPAREN stmt ELSE stmt                      { marks (A.If ($3, $5, $7)) (1, 7) }   ; </code></pre>  <p>This doesn't work. I ran ocamlyacc -v and got the following report:</p>  <pre><code>83: shift/reduce conflict (shift 86, reduce 14) on ELSE state 83     if : IF RPAREN exp LPAREN stmt .  (14)     if : IF RPAREN exp LPAREN stmt . ELSE stmt  (15)      ELSE  shift 86     IF  reduce 14     WHILE  reduce 14     FOR  reduce 14     BOOL  reduce 14     IDENT  reduce 14     RETURN  reduce 14     INT  reduce 14     MAIN  reduce 14     LBRACE  reduce 14     RBRACE  reduce 14     LPAREN  reduce 14 </code></pre>  <p>I've read that shift/reduce conflicts are due to ambiguity in the specification of the grammar, but I don't see how I can specify this in a way that isn't ambiguous?</p>