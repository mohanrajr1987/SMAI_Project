<p>I have a grammar that I need to show what makes it not be LL(1) and then write an equivalent. Here is my answer, do you guys think it is right?</p>  <h3>Original Grammar</h3>  <pre><code>P-&gt;S  P-&gt;SP S-&gt;if E then S S-&gt;if E then S else S S-&gt;while E S S-&gt;begin P end S-&gt;print E S-&gt;E E-&gt;id E-&gt;integer E-&gt; E+E </code></pre>  <p>There reasons I got for it not to be a LL(1) Grammar are:</p>  <ol> <li>S->S | SP is a common left prefix, since LL(1) grammar means that the next sentence can be be known based only in the next terminal or no terminal input, this causes an ambiguity </li> <li>S->if E then S | if E then S else S is also a common left prefix ("if")</li> <li>E->E+E is a let recursion.</li> </ol>  <p>Now the new Grammar I got.</p>  <h3>Grammar G2</h3>  <pre><code>P-&gt;SP' P'-&gt;S|epsilon S-&gt;if E then SS' | while E S | begin P end | print E | E S'-&gt;else S | epsilon E-&gt;E'+E | E' E'-&gt; id | integer </code></pre>  <p>Dos it looks right for you guys? Thank you very much.</p>