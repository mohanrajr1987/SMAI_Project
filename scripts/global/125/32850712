<p>I was wondering, while playing with <a href="https://gist.github.com/DmitrySoshnikov/644383a86b045a3a8ad3" rel="nofollow">this gist</a>, if it is possible to parse syntaxes like <a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Functions/Arrow_functions" rel="nofollow">ES6 arrow functions</a> using LL1. The problem is that the grammar is ambiguos (rules 2 and 3), and ends up with the <a href="https://en.wikipedia.org/wiki/Dangling_else" rel="nofollow">Dangling else problem</a>. Is there any way to refactor it to work with LL1 parsers? In that case, arrows functions have always precedence over any other production.</p>  <p>Grammar:</p>  <pre><code> 1: E -&gt; P O  2: O -&gt; + P O  3: O -&gt; ε  4: P -&gt; 1  5: P -&gt; 2  6: P -&gt; 3  7: P -&gt; C  8: C -&gt; I A =&gt; E 10: A -&gt; , I A 11: A -&gt; ε 12: I -&gt; a 13: I -&gt; b 14: I -&gt; c </code></pre>  <p>Goal:</p>  <pre><code>3 1 + 2 1 + 3 + 3 1 + a =&gt; 1 a =&gt; 1 a, b =&gt; 1 + 2 a =&gt; b =&gt; 1 + 2 a =&gt; 1 + b =&gt; 1 + 2 ... </code></pre>