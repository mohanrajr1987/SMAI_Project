<p>I was trying to parse System.out.println() statement as an OutputStatement for Java Grammar. Here's the production rule in EBNF:</p>  <pre><code>Statement::=( LabeledStatement | AssertStatement | Block | EmptyStatement | StatementExpression | SwitchStatement | IfStatement | WhileStatement | DoStatement | ForStatement | BreakStatement | ContinueStatement | ReturnStatement | ThrowStatement | SynchronizedStatement | TryStatement|OutputStatement) OutputStatement::="System.out.print"["ln"]"("Arguments")" ";" </code></pre>  <p>This is strictly according to the Java Grammar as specified in the javacc folder file <code>C:\javacc-6.0\examples\JavaGrammars\Java 1.0.2.jj</code></p>  <p>Now when I coded the production rule in JavaCC it came as:</p>  <pre><code>OutputStmt OutputStatement(): {   Token tk;   Expression args;   boolean ln=false;   int line;   int column; } {   {line=token.beginLine;column=token.beginColumn;args=null;ln=false;}   tk=&lt;STRING_LITERAL&gt; LOOKAHEAD({tk.image.equals("System")})   "."   tk=&lt;STRING_LITERAL&gt; LOOKAHEAD({tk.image.equals("out")})   "."   tk=&lt;STRING_LITERAL&gt; LOOKAHEAD({tk.image.equals("print")})   [    tk=&lt;STRING_LITERAL&gt; LOOKAHEAD({tk.image.equals("ln")})    {      ln=true;    }   ]   "("      args=Expression()   ")" ";"   {     return new OutputStmt(line,column,token.endLine,token.endColumn,ln,args);   } } </code></pre>  <p>Now this throws <code>LOOKAHEAD</code> Warnings and Errors in the Parser generated.Can anyone please help?</p>  <p><strong>EDIT:</strong> The main problem as it seems is that JavaCC is generating methods which are not initializing <code>Token tk</code> and which is giving me the error <code>tk not resolved</code>.</p>