<p>Take the following Java code snippet:</p>  <pre><code>....     else if (true){ //hard-coded as true      ///launch methodA     }     else {      ///launch methodA (same code as in the ` else if ` statement)     } .... </code></pre>  <p>What I was wondering is how the compiler deals with this. Wouldn't it be logical for the compiler to remove the <code>else if(true)</code> statement altogether in order to not have to perform a check, even though it is hard-coded as true. Specifically in Eclipse, how is the code above interpreted? </p>  <p>Or what about in the following scenario:</p>  <pre><code>....     else if (true){ //hard-coded as true      ///launch methodA     }     else {      ///launch methodBB     } .... </code></pre>  <p>Wouldn't it be logical in this case for the compiler to remove the <code>else</code> statement? Because while running, the <code>else</code> statement is unreachable. </p>