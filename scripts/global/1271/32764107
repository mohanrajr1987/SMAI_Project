<p>I have a script written in bash, with one particular grep command I need to modify.</p>  <p>Generally I have two patterns: A &amp; B. There is a textfile that can contain lines with all possible combinations of those patterns, that is: "xxxAxxx", "xxxBxxx", "xxxAxxxBxxx", "xxxxxx", where "x" are any characters.</p>  <p>I need to match ALL lines APART FROM the ones containing ONLY "A".</p>  <p>At the moment, it is done with "<code>grep -v (A)</code>", but this is a false track, as this would exclude also lines with "xxxAxxxBxxx" - which are OK for me. This is why it needs modification. :)</p>  <p>The tricky part is that this one grep lies in the middle of a 'multiply-piped' command with many other greps, seds and awks inside. Thus forming a smarter pattern would be the best solution. Others would cause much additional work on changing other commands there, and even would impact another parts of the code.</p>  <p>Therefore, the question is: is there a possibility to match pattern and exclude a subpattern in one grep, but allow them to appear both in one line?</p>  <p>Example: A file contains those lines:</p>  <pre><code>fooTHISfoo fooTHISfooTHATfoo fooTHATfoo foofoo </code></pre>  <p>and I need to match </p>  <pre><code>fooTHISfooTHATfoo fooTHATfoo foofoo </code></pre>  <p>a line with "THIS" is not allowed.</p>