<p>I have implemented the following code to remove ads using IAP. However, when I try to call btnRemoveAds() using </p>  <pre><code>NSNotificationCenter.defaultCenter().postNotificationName("RemoveAdsFromApp", object: nil) </code></pre>  <p>from my GameScen nothing happens. I have set everything up in the members center. Any ideas on how to make this work from my GameScene?</p>  <pre><code>import Foundation import SpriteKit import StoreKit   class Store:SKScene, SKProductsRequestDelegate, SKPaymentTransactionObserver {  override func didMoveToView(view: SKView) {       NSNotificationCenter.defaultCenter().addObserver(self, selector: "btnRemoveAds", name: "RemoveAdsFromApp", object: nil)      // Set IAPS     if(SKPaymentQueue.canMakePayments()) {         println("IAP is enabled, loading")         var productID:NSSet = NSSet(objects: "remove ads bundle id", "other bundle id")          var request: SKProductsRequest = SKProductsRequest(productIdentifiers: productID as Set&lt;NSObject&gt;)          request.delegate = self         request.start()        } else {         println("please enable IAPS")     }  }  // 2 func btnRemoveAds() { // kallas om transaktionen g√•tt igemon     for product in list {         var prodID = product.productIdentifier         if(prodID == "remove ads bundle id") {             p = product             buyProduct()             NSUserDefaults.standardUserDefaults().setBool(true, forKey: "Premium")             NSUserDefaults.standardUserDefaults().synchronize()             break;         }     }  }  // 3 func btnAddCoins() {     for product in list {         var prodID = product.productIdentifier         if(prodID == "other bundle id") {             p = product             buyProduct()             break;         }     } }   // 4 func removeAds() {     println("ads removed") }  // 5 func addCoins() {     println("added 50 coins") }  // 6 func RestorePurchases() {     SKPaymentQueue.defaultQueue().addTransactionObserver(self)     SKPaymentQueue.defaultQueue().restoreCompletedTransactions() }  var list = [SKProduct]() var p = SKProduct()  // 2 func buyProduct() {     println("buy " + p.productIdentifier)     var pay = SKPayment(product: p)     SKPaymentQueue.defaultQueue().addTransactionObserver(self)     SKPaymentQueue.defaultQueue().addPayment(pay as SKPayment) }  //3 func productsRequest(request: SKProductsRequest!, didReceiveResponse response: SKProductsResponse!) {     println("product request")     var myProduct = response.products      for product in myProduct {         println("product added")         println(product.productIdentifier)         println(product.localizedTitle)         println(product.localizedDescription)         println(product.price)          list.append(product as! SKProduct)     } }  // 4 func paymentQueueRestoreCompletedTransactionsFinished(queue: SKPaymentQueue!) {     println("transactions restored")      var purchasedItemIDS = []     for transaction in queue.transactions {         var t: SKPaymentTransaction = transaction as! SKPaymentTransaction          let prodID = t.payment.productIdentifier as String          switch prodID {         case "remove ads bundle id":             println("remove ads")             removeAds()         case "other bundle id":             println("add coins to account")             addCoins()         default:             println("IAP not setup")         }      } }  // 5 func paymentQueue(queue: SKPaymentQueue!, updatedTransactions transactions: [AnyObject]!) {     println("add paymnet")      for transaction:AnyObject in transactions {         var trans = transaction as! SKPaymentTransaction         println(trans.error)          switch trans.transactionState {          case .Purchased:             println("buy, ok unlock iap here")             println(p.productIdentifier)              let prodID = p.productIdentifier as String             switch prodID {             case "remove ads bundle id":                 println("remove ads")                 removeAds()             case "other bundle id":                 println("add coins to account")                 addCoins()             default:                 println("IAP not setup")             }              queue.finishTransaction(trans)             break;         case .Failed:             println("buy error")             queue.finishTransaction(trans)             break;         default:             println("default")             break;          }     } }  // 6 func finishTransaction(trans:SKPaymentTransaction) {     println("finish trans") }  //7 func paymentQueue(queue: SKPaymentQueue!, removedTransactions transactions: [AnyObject]!) {     println("remove trans"); </code></pre>  <p>}</p>  <p>}</p>