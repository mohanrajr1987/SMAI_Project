<p>It is important to check are In-App Purchases enabled to block UI properly, RayWenderlich blog says:</p>  <blockquote>   <p>Apple requires that you handle this situation gracefully; not doing so will likely result in an app rejection.</p> </blockquote>  <p>When you disable In-App Purchase, the Restrictions <code>SKPaymentQueue.canMakePayments()</code> should return <code>false</code> but it always returns <code>true</code> no matter what. I tried with 2 different projects, including, <a href="http://www.raywenderlich.com/105365/in-app-purchases-tutorial-getting-started" rel="nofollow">this one from RayWenderlich.</a></p>  <p>I tested this only with iOS 9.</p>  <p>How to recognise that In-App Purchases disabled with parental restrictions?</p>  <p><strong>Update.</strong><br> Somebody requested to share my code. I don't think it is necessary, the code is obvious and doesn't have errors. I can reproduce this problems with the Ray's project too.</p>  <pre><code>// This function is called in from viewDidLoad() // And after SKProduct is updated. func addTextFromProduct(p: SKProduct) {      if let title = p.localizedTitle as String? {         self.navigationBar.topItem?.title = title     }      if let description = p.localizedDescription as String? {         if dailyLimit {             self.informationLabel.text? = "\(waitingTime)\(description)"         } else {             self.informationLabel.text? = "\(description)"         }          if SKPaymentQueue.canMakePayments() {             unblockButtons()         }      } else {         self.informationLabel.text? = "\(waitingTime)\(description)\n\nIn-App Purchase is unavailable at this moment."         blockButtons()     }      if SKPaymentQueue.canMakePayments() {         self.priceFormatter.locale = p.priceLocale         let localPrice: String! = self.priceFormatter.stringFromNumber(p.price)         let label = "\(localPrice)"         self.buyButton.setTitle(label, forState: UIControlState.Normal)     } else {         blockButtons()         buyButton.setTitle("Not Available", forState: UIControlState.Disabled)     } } </code></pre>