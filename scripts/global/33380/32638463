<p>Did any of you guys ever tried implementing IAP store view controller in app that is reachable from 2 different view controllers? I would really appreciate if anyone could share such experience.</p>  <p>I am trying to make StoreViewController (you can buy in-app purchases in it) reachable from 2 different view controllers. This image shows what I mean:</p>  <p><a href="http://i.stack.imgur.com/vt4RX.png" rel="nofollow"><img src="http://i.stack.imgur.com/vt4RX.png" alt="enter image description here"></a></p>  <p>Therefore both the black and blue VC implement <code>SKProductsRequestDelegate</code> method.</p>  <p>This is the code from 1, but it is identical in 2:</p>  <pre><code>        let productID1 = "id1"             let productID2 = "id2"             let productID3 = "id3"             let productID4 = "id4"              var product1 : SKProduct?             var product2 : SKProduct?             var product3 : SKProduct?             var product4 : SKProduct?      /////// THIS BUTTON TAKES USER TO STORE     @IBAction goToStore(){     getProductInfo()     }         func getProductInfo(){             if SKPaymentQueue.canMakePayments() {                 let request = SKProductsRequest(productIdentifiers: Set([productID1,productID2,productID3,productID4]))                 request.delegate = self                 request.start()                 print("looking for IAP")             }else{                 print("make IAP available in Settings")             }         }      func productsRequest(request: SKProductsRequest, didReceiveResponse response: SKProductsResponse) {              let products = response.products             if products.count != 0{                 for product in products{                     switch product.productIdentifier{                     case "id1":                         product1 = product                         break                     case "id2":                         product2 = product                         break                     case "id3":                         product3 = product                         break                     case "id4":                         product4 = product                         break                      default:                         break                     }                 }                 print("I do have products")                 performAnimation()                  //            }              }else{                 print("product not found")             }             let invalidProducts = response.invalidProductIdentifiers             for productk in invalidProducts{                 print("Pr not found \(productk)")             }         }      func performAnimation(){       let story = UIStoryboard(name: "Main", bundle: nil)      let storeViewController = story.instantiateViewControllerWithIdentifier("StoreViewController") as! StoreViewController      storeViewController.product1 = self.product1      storeViewController.product2 = self.product2      storeViewController.product3 = self.product3      storeViewController.product4 = self.product4         self.presentViewController(storeViewController, animated: false, completion: nil)})                  })             } </code></pre>  <p>////////////////////Code in storeViewController</p>  <pre><code>            let productID1 = "id1"             let productID2 = "id2"             let productID3 = "id3"             let productID4 = "id4"             var product1 : SKProduct?             var product2 : SKProduct?             var product3 : SKProduct?             var product4 : SKProduct?   viewDidLoad(){                 SKPaymentQueue.defaultQueue().addTransactionObserver(self)     } //// PRESSED WHEN USER WANTS TO BUY ITEMS @IBAction func buyButtonPressed(sender: UIButton) {     let items = itemsToBuy.count     if items &gt; 0{         switch items{         case 1:             let payment = SKPayment(product: product1!)              print("description \(payment.description), identifier: \(payment.productIdentifier), data: \(payment.requestData)")             SKPaymentQueue.defaultQueue().addPayment(payment) ///////// ERROR HERE          case 2:             let payment = SKPayment(product: product2!)             SKPaymentQueue.defaultQueue().addPayment(payment)          case 3:             let payment = SKPayment(product: product3!)             SKPaymentQueue.defaultQueue().addPayment(payment)          case 4:             let payment = SKPayment(product: product4!)             SKPaymentQueue.defaultQueue().addPayment(payment)          default:             break         }       }  }  func paymentQueue(queue: SKPaymentQueue, updatedTransactions transactions: [SKPaymentTransaction]) {     for transaction in transactions{         switch transaction.transactionState{         case SKPaymentTransactionState.Purchased:             self.buyItems()             SKPaymentQueue.defaultQueue().finishTransaction(transaction)             print("bought")         case SKPaymentTransactionState.Failed:             SKPaymentQueue.defaultQueue().finishTransaction(transaction)             print("error not bought")         default:             break         }     } } </code></pre>  <p>I go to store from VC1, make and make a purchase succesfully. Than I go to store from VC2 (or vice versa) and I ger an error: EXC_BAD_ACCESS on the line <code>SKPaymentQueue.defaultQueue().addPayment(payment)</code>  in switch statement.</p>  <p><a href="http://i.stack.imgur.com/ypykq.png" rel="nofollow"><img src="http://i.stack.imgur.com/ypykq.png" alt="enter image description here"></a></p>  <p>This error has not occurred when store was accessible only from one VC and not from both of them. Also, if I make multiple payments solely from one VC it works fine. What could be the reason? Is there only one viewController capable of implementing <code>SKProductsRequestDelegate</code> methods?</p>  <p>EDIT:// added a print statement just before <code>SKPaymentQueue.defaultQueue().addPayment(payment)</code> line. The result of both purchases (1. successful, 2. unsuccesful) is </p>  <pre><code> description &lt;SKPayment: 0x174204720&gt;, identifier: id1, data: nil </code></pre>  <p>and</p>  <pre><code> description &lt;SKPayment: 0x17001e1b0&gt;, identifier: id1, data: nil </code></pre>