<p>I made a game using Xcode 7 and SpriteKit in Swift and I finished it. After I submited it to iTunes Connect, Apple rejected it and they sent me a message, they said that the problem is with <code>Restore Purchase</code>, but I put it in same button with purchase so I made a button that have two functions:   1. To make Purchase,  2. To Restore Purchase.</p>  <p>When I tested it, it worked perfectly and when users have to restore purchase they doesn't pay anymore. I don't know if this is acceptable from Apple. Or Check my code if I forgot something to put !</p>  <p>The message is:</p>  <blockquote>   <p>From Apple</p>      <p>Missing restore mechanism</p>      <p>We found that your app offers In-App Purchase(s) that can be restored but does not include a “Restore Purchases" feature to allow users to restore the previously purchased In-App Purchase(s), as specified in the “Restoring Purchase Products” section of the In-App Purchase Programming Guide</p>      <p>"Users restore transactions to maintain access to content they’ve already purchased. For example, when they upgrade to a new phone, they don’t lose all of the items they purchased on the old phone. Include some mechanism in your app to let the user restore their purchases, such as a Restore Purchases button."</p>      <p>To restore previously purchased In-App Purchase products, it would be appropriate to provide a "Restore" button and initiate the restore process when the "Restore" button is tapped by the user. Including restore in the purchase button is not a sufficient restore mechanism.</p> </blockquote>  <p>And code that I used is:</p>  <pre><code>override func viewDidLoad() {     super.viewDidLoad()  func addTransactionObserver() {     SKPaymentQueue.defaultQueue().addTransactionObserver(self) }  func removeTransactionObserver() {     SKPaymentQueue.defaultQueue().removeTransactionObserver(self) }  }  @IBAction func removeAds(sender: UIButton) {     print("Remove Ads Button pressed")     for product in list {         let prodID = product.productIdentifier         if(prodID == "Squares.RemoveAds") {             p = product             buyProduct()             break;         }     }     ////SKPaymentQueue.defaultQueue().addTransactionObserver(self)     SKPaymentQueue.defaultQueue().restoreCompletedTransactions() }    override func prefersStatusBarHidden() -&gt; Bool {     return true }  //Remove Ads Payment var list = [SKProduct]() var p = SKProduct()   //Squares.RemoveAds   func buyProduct() {     print("Buy" + p.productIdentifier)     let pay = SKPayment(product: p)     ////SKPaymentQueue.defaultQueue().addTransactionObserver(self)     SKPaymentQueue.defaultQueue().addPayment(pay as SKPayment) }  func productsRequest(request: SKProductsRequest, didReceiveResponse response: SKProductsResponse) {     print("Product Request")     let myProduct = response.products      for product in myProduct {         print("Product Added")         print(product.productIdentifier)         print(product.localizedTitle)         print(product.localizedDescription)         print(product.price)          list.append(product as SKProduct)     }     removeAdsButton.enabled = true     removeAdsIPhone6Plus.enabled = true }  func paymentQueueRestoreCompletedTransactionsFinished(queue: SKPaymentQueue) {     print("Transactions Restored")      var purchasedItemIDS = []     for transaction in queue.transactions {         let t: SKPaymentTransaction = transaction as SKPaymentTransaction          let prodID = t.payment.productIdentifier as String          switch prodID {         case ProductID.removeAds:             print("Remove Ads")             Ads.removeAllAds()         case ProductID.removeAds:             print("Remove Ads for iPhone 6 Plus")             Ads.removeAllAds()         default:             print("IAP not setup")         }      } }  func paymentQueue(queue: SKPaymentQueue, updatedTransactions transactions: [SKPaymentTransaction]) {     print("Add Payment")      for transaction:AnyObject in transactions {         let trans = transaction as! SKPaymentTransaction         print(trans.error)          switch trans.transactionState {          case .Purchased:             print("Buy, Ok unlock Squares here")             print(p.productIdentifier)              let prodID = p.productIdentifier as String             switch prodID {             case ProductID.removeAds:                 print("Remove Ads")                 Ads.removeAllAds()             case ProductID.removeAds:                 print("Remove Ads for iPhone 6 Plus")                 Ads.removeAllAds()             default:                 print("IAP not Setup")             }              queue.finishTransaction(trans)             break;         case .Failed:             print("Buy Error")             queue.finishTransaction(trans)             break;         default:             print("Default")             break;          }     } }  func finishTransaction(trans:SKPaymentTransaction){     print("Finish Transaction") }  func paymentQueue(queue: SKPaymentQueue, removedTransactions transactions: [SKPaymentTransaction]) {     print("Remove Transaction")  } } </code></pre>  <p>I hope your contribution will help me.</p>