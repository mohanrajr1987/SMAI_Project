<p>I have a ConnectFour program that uses a really big if statement to check if there is a winner, but it only seems to work with the tiles (JButtons) in the middle work with my code. The edges, not so much... If you can see what I did wrong so that this if state would work, that would be great!</p>  <p>Source Code:</p>  <pre><code>import javax.swing.JPanel; import javax.swing.JButton; import java.awt.GridLayout; import java.awt.Color;     import java.awt.event.ActionListener; import java.awt.event.ActionEvent;  public class ConnectFour extends JPanel {     private int turn;     private final JButton BOARD[][];     private final Color DEFAULT_COLOR;      public ConnectFour()     {         super(new GridLayout(6, 7));         turn = 0;          BOARD = new JButton[6][7];         HandlerClass handler = new HandlerClass();         for(int i = 0; i &lt; BOARD.length; i++)         {             for(int j = 0; j &lt; BOARD[i].length; j++)             {                 BOARD[i][j] = new JButton("");                 BOARD[i][j].addActionListener(handler);                 if(!(i == BOARD.length - 1))                 {                     BOARD[i][j].setEnabled(false);                 }                 add(BOARD[i][j]);             }         }         DEFAULT_COLOR = BOARD[0][0].getBackground();     }  public static void main(String[] args) {     javax.swing.JFrame frame = new javax.swing.JFrame("test");     frame.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);     frame.setSize(300, 300);     frame.setLocationRelativeTo(null);     frame.add(new ConnectFour());     frame.setVisible(true); }  private class HandlerClass implements ActionListener {     public void actionPerformed(ActionEvent event)     {         JButton source = ((JButton) event.getSource());         if(turn % 2 == 0)         {             source.setBackground(Color.RED);             source.setEnabled(false);         }         else         {             source.setBackground(Color.BLACK);             source.setEnabled(false);         }          boolean winner = checkWinner();          if(winner)         {             System.out.println("Player " + (turn % 2 + 1) + " wins!");         }         //---------------------------------         for(int i = 0; i &lt; BOARD.length; i++)         {             for(int j = 0; j &lt; BOARD[i].length; j++)             {                 if(BOARD[i][j].equals(source))                 {                     try                     {                         BOARD[i - 1][j].setEnabled(true);                         break;                     }                     catch(ArrayIndexOutOfBoundsException e)                     {                         //System.out.println("Hello, World!");                     }                 }             }         }         turn++;     }      private boolean checkWinner()     {         for(int i = 0; i &lt; BOARD.length; i++)         {             for(int j = 0; j &lt; BOARD[i].length; j++)             {                 try                 {                     if(((BOARD[i][j].getBackground().equals(BOARD[i + 1][j].getBackground()))                      &amp;&amp; (BOARD[i][j].getBackground().equals(BOARD[i + 2][j].getBackground()))                      &amp;&amp; (BOARD[i][j].getBackground().equals(BOARD[i + 3][j].getBackground()))                      &amp;&amp; !(BOARD[i][j].getBackground().equals(DEFAULT_COLOR)))                     || ((BOARD[i][j].getBackground().equals(BOARD[i - 1][j].getBackground()))                      &amp;&amp; (BOARD[i][j].getBackground().equals(BOARD[i - 2][j].getBackground()))                      &amp;&amp; (BOARD[i][j].getBackground().equals(BOARD[i - 3][j].getBackground()))                      &amp;&amp; !(BOARD[i][j].getBackground().equals(DEFAULT_COLOR)))                     || ((BOARD[i][j].getBackground().equals(BOARD[i][j + 1].getBackground()))                      &amp;&amp; (BOARD[i][j].getBackground().equals(BOARD[i][j + 2].getBackground()))                      &amp;&amp; (BOARD[i][j].getBackground().equals(BOARD[i][j + 3].getBackground()))                      &amp;&amp; !(BOARD[i][j].getBackground().equals(DEFAULT_COLOR)))                     || ((BOARD[i][j].getBackground().equals(BOARD[i][j - 1].getBackground()))                      &amp;&amp; (BOARD[i][j].getBackground().equals(BOARD[i][j - 2].getBackground()))                      &amp;&amp; (BOARD[i][j].getBackground().equals(BOARD[i][j - 3].getBackground()))                      &amp;&amp; !(BOARD[i][j].getBackground().equals(DEFAULT_COLOR)))                     || ((BOARD[i][j].getBackground().equals(BOARD[i + 1][j + 1].getBackground()))                      &amp;&amp; (BOARD[i][j].getBackground().equals(BOARD[i + 2][j + 2].getBackground()))                      &amp;&amp; (BOARD[i][j].getBackground().equals(BOARD[i + 3][j + 3].getBackground()))                      &amp;&amp; !(BOARD[i][j].getBackground().equals(DEFAULT_COLOR)))                     || ((BOARD[i][j].getBackground().equals(BOARD[i + 1][j - 1].getBackground()))                      &amp;&amp; (BOARD[i][j].getBackground().equals(BOARD[i + 2][j - 2].getBackground()))                      &amp;&amp; (BOARD[i][j].getBackground().equals(BOARD[i + 3][j - 3].getBackground()))                      &amp;&amp; !(BOARD[i][j].getBackground().equals(DEFAULT_COLOR)))                     || ((BOARD[i][j].getBackground().equals(BOARD[i - 1][j + 1].getBackground()))                      &amp;&amp; (BOARD[i][j].getBackground().equals(BOARD[i - 2][j + 2].getBackground()))                      &amp;&amp; (BOARD[i][j].getBackground().equals(BOARD[i - 3][j + 3].getBackground()))                      &amp;&amp; !(BOARD[i][j].getBackground().equals(DEFAULT_COLOR)))                     || ((BOARD[i][j].getBackground().equals(BOARD[i - 1][j - 1].getBackground()))                      &amp;&amp; (BOARD[i][j].getBackground().equals(BOARD[i - 2][j - 2].getBackground()))                      &amp;&amp; (BOARD[i][j].getBackground().equals(BOARD[i - 3][j - 3].getBackground()))                      &amp;&amp; !(BOARD[i][j].getBackground().equals(DEFAULT_COLOR))))                         return true;                 }                 catch(ArrayIndexOutOfBoundsException e)                 {                  }             }         }         return false;     } } </code></pre>  <p>}</p>