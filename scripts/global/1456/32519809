<p>I am puzzled. I have a simple python code. What it does is logging on a binary file the status of an internet connection. Every few seconds it pings an host on the public internet, and then it logs the timestamp (as an unsigned int) and the online status (as a bool).</p>  <p>I am using <code>struct.pack</code> to pack the binary data. Here is the function to add an entry to the log:</p>  <pre><code>def add(path, timestamp, online):     handle = open(path, "ab")     handle.write(struct.pack("&lt;I?", timestamp, online))     handle.close() </code></pre>  <p>And here is the call to that function:</p>  <pre><code>storage.add(settings["log_path"], time.time(), online) </code></pre>  <p>Now, it worked fine for a long time (like, a dozen of hours), and it logged properly everything. However, after a while I noticed that all the timestamps were nonsense. I realized that they were just out of alignment, so I traced back what happened when they went out of alignment.</p>  <p>Here is the binary data around the point where they get out of alignment:</p>  <pre><code>DB 0C F2 55 01 E5 0C F2 55 01  EF 0C F2 55 01  F9 0C F2 55 01  03 0D F2 55 01  0D F2 55 01  &lt;----- What?? 17 0D F2 55 01  21 0D F2 55 01  2B 0D F2 55 01  35 0D F2 55 01  3F 0D F2 55 01  49 0D F2 55 01  53 0D F2 55 01  5D 0D F2 55 01  67 0D F2 55 01  71 0D F2 55 01  7B 0D F2 55 01  85 0D F2 55 01 </code></pre>  <p>I just grouped the bytes in groups of five bytes, with the boolean (I-am-online) at the end. The first four bytes of each group represent a meaningful timestamp (sometime last night), as little endian unsigned ints. </p>  <p>However in the point marked with an arrow, the group is just 4 bytes long..! No meaningful timestamp is represented, and everything gets out of alignment. In fact, it looks like it is the first byte of the timestamp that went missing. As you can see, I am doing and logging that ping test every 10 seconds, so around that point you should have <code>F9</code>, <code>03</code>, then <code>0D</code> (but that is missing...!), then <code>17</code>, <code>21</code>, <code>2B</code> and so on. So the line that is shorter should have been something like <code>0D 0D F2 55 01</code>.</p>  <p>I am puzzled. How can this happen? I thought that maybe when writing on the disk the program could have been killed or something, but it actually ran for the whole night without any pause. Is it possible that <code>struct.pack</code> misses one byte at some point...?</p>  <p>This is really odd. Any idea would be greatly appreciated. </p>