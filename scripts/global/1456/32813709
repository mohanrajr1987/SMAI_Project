<p>As an exercise, I am attempting to implement an assembler for a self-defined fictitious architecture.</p>  <p>The only thing I'm unsure of is how to actually generate the bits. Each of my machine instructions are 2 bytes long. </p>  <p>For example, say I have determined that I need to generate the following byte code:  </p>  <pre><code>0100000100110001 </code></pre>  <p>This is a situation where I'm building the instruction a chunk at a time, for example, the first 3 bits are the op code, then there's some reserved bits, then a flag etc.</p>  <p>I figure it would be easiest to construct it as a literal string. </p>  <p>How can I convert a string, e.g. '0100000100110001' into the corresponding bit string and then write it to a file directly, without changing the byte ordering?</p>  <p>I think I might be able to use the <code>ByteArray</code> constructor, but I can't find any suitable examples in the docs.</p>