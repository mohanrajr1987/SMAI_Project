<p>VB.NET 4.5</p>  <p>I have a structure defined that includes a single byte. I need to get an array of bytes to be sent over a Serial port.</p>  <pre><code>Public Structure ExampleStructure     Public variable1 As Byte     Public variable2 As UInt16     Public variable3 As UInt16      Public Function getBytes() As Byte()         Dim binaryBytes(5) As Byte         Dim pointerCommand As IntPtr = Marshal.AllocHGlobal(Marshal.SizeOf(Me))         Marshal.StructureToPtr(Me, pointerCommand, False)         Marshal.Copy(pointerCommand, binaryBytes, 0, Marshal.SizeOf(Me))         Marshal.FreeHGlobal(pointerCommand)         Return binaryBytes     End Function End Structure </code></pre>  <p>The issue is :</p>  <p>when I use <code>Marshal.AllocHGlobal</code>, <code>Marshal.StructureToPtr</code>, and <code>Marshal.Copy</code>, the byte array returned is 6 bytes. .NET creates 2 bytes for variable1, so there is an excess byte between variable1 and variable2 data.</p>  <p>I can resolve this by using a <code>LayoutKind.Explicit</code> and defining FieldOffsets.</p>  <pre><code>&lt;StructLayout(LayoutKind.Explicit)&gt; _ Public Structure ExampleStructure     &lt;FieldOffset(0)&gt; Public variable1 As Byte     &lt;FieldOffset(1)&gt; Public variable2 As UInt16     &lt;FieldOffset(3)&gt; Public variable3 As UInt16      Public Function getBytes() As Byte()         Dim binaryBytes(5) As Byte         Dim pointerCommand As IntPtr = Marshal.AllocHGlobal(Marshal.SizeOf(Me))         Marshal.StructureToPtr(Me, pointerCommand, False)         Marshal.Copy(pointerCommand, binaryBytes, 0, Marshal.SizeOf(Me))         Marshal.FreeHGlobal(pointerCommand)         Return binaryBytes     End Function End Structure </code></pre>  <p>Now when I get the bytes, there is no longer an excess byte between variable1 and variable2.</p>  <p>This seems like a clunky way to do this though. Is there a better option where I don't have to manually set FieldOffsets? This structure is simple, but they can get far more complicated.</p>