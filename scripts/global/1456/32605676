<p>If I have the unique, unsigned byte values <code>12, 131, 17 and 89</code>, they take 31.96 bits to store (<code>ln(256 * 255 * 254 * 253) / ln(2)</code>).</p>  <p>This serialisation implicitly includes the values <em>and</em> their ordering, of which there are ~4 billion possibilities (of the values <em>and</em> their ordering).</p>  <p>There are <code>4! == 24</code> ways to order 4 things (with no repeats).</p>  <p>The 24 combinations can be represented in 4.58 bits (5 in the real world).</p>  <p>The most efficient way the unordered set of four bytes could be stored is 27.38 bits (28 in the real world).  These are the 4 billion values-and-orderings divided by the 24 possible orderings</p>  <p>Is there a <em>fixed-length</em> representation of a set of four unordered bytes which approaches 27.38 bits (or is at least less than 32 bits)?</p>  <p>(I have already devised a variable-length representation, which has a size of between 8 and 32 bits, depending on the values.)</p>  <hr>  <p>Note: A fixed-length representation can trivially be constructed in O(N^2) time, by enumerating all the possible value-quads, and removing all value-quads that are simply rearrangements of previously found value-quads.  This will leave <code>256 * 255 * 254 * 253 / 24</code> unique value-sets.</p>  <p>I'm looking for better than O(N^2) time.</p>