<p>I have encountered several problems with auto-indentation in Emacs (v.24.3.1, matlab.el v.3.3.2) of matlab files that uses the classdef-style object-oriented code specification.</p>  <p>In the first example files below, the section starting with the line marked <code>%%%%% (1)</code> is indented one step too much. The incorrect indentation continues until the function-closing <code>end</code>.</p>  <p>In the second file, the functions at <code>%%%%% (2)</code> and <code>%%%%% (3)</code> are indented incrementally one step too much. Here, the incorrect indentation continues until the methods-closing <code>end</code>. (However, this particular problem disappears if I remove the comment at the preceding function-closing <code>end</code>.)</p>  <p>There is also a syntax-highlighting issue (not shown below) where the function head <code>function modulus = get.Modulus(obj)</code> are not recognized as function heads.</p>  <p>Does anyone have a suggestion for a fix? Are my problems configuration problems, or does this correspond to a bug in matlab.el?</p>  <p>I have reduced my .emacs to contain only the following lines:</p>  <pre><code>(add-to-list 'load-path "~/emacs/matlab-emacs") (require 'matlab-load) (setq matlab-indent-function-body t) (setq matlab-functions-have-end t) </code></pre>  <p>TestUnit.m:</p>  <pre><code>classdef TestUnit     enumeration         mm (1)         pixels (2)         in (4)     end      methods         function s=asstring(p)         %ASSTRING Return string version of TestUnit object.              [a,b]=enumeration(p);                 s=b{find(a==p,1,'first')}; %%%%% (1)             end     end end </code></pre>  <p>TensileData.m:</p>  <pre><code>classdef TensileData     properties         Material = 'carbon steel';         SampleNumber = 0;         Stress         Strain     end      properties (Dependent)         Modulus     end      methods         function td = TensileData(material,samplenum,stress,strain)             if nargin &gt; 0                 td.Material = material;                 td.SampleNumber = samplenum;                 td.Stress = stress;                 td.Strain = strain;             end         end % TensileData     end % methods      methods         function obj = set.Material(obj,material)             if ~(strcmpi(material,'aluminum') ||...                  strcmpi(material,'stainless steel') ||...                  strcmpi(material,'carbon steel'))                 error('Material must be aluminum, stainless steel, or carbon steel')             end             obj.Material = material;         end % Material set function              function modulus = get.Modulus(obj) %%%%%% (2)                 ind = find(obj.Strain &gt; 0); % Find nonzero strain                 modulus = mean(obj.Stress(ind)./obj.Strain(ind));             end % Modulus get function                  function obj = clear(obj)       %%%%%%% (3)                 % Another test function                     obj.Stress=[]; obj.Strain=[];                 end     end % methods end % classdef </code></pre>  <p>The following was generated by starting <code>emacs -Q TestUnit.m</code> followed by <code>M-x octave-mode</code> and <code>C-x h M-C\</code>. The following keywords had syntax highlighting: <code>end</code>, <code>function</code>, <code>asstring</code>, but not <code>classdef</code>, <code>enumeration</code> nor <code>methods</code>.</p>  <pre><code>classdef TestUnit enumeration mm (1) pixels (2) in (4) end  methods function s=asstring(p)   %ASSTRING Return string version of TestUnit object.   a=enumeration(p);   s=b{find(a==p,1,'first')}; end end end </code></pre>