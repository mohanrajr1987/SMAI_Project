<p>I have an entity <code>Article</code>. Inside my entity, I have a field, <code>articleComment</code>, mappedBy a field <code>article</code> in the <code>ArticleComment</code> entity.</p>  <p>Here is the code :</p>  <pre><code>class Article {      /**      * @ORM\OneToOne(targetEntity="Project\MyBundle\Entity\ArticleComment", mappedBy="article", cascade={"persist"})      */     private $articleComment;      // etc... } </code></pre>  <p>and</p>  <pre><code>class ArticleComment {     /**      * @ORM\OneToOne(targetEntity="Project\MyBundle\Entity\Article", inversedBy="articleComment")      * @ORM\JoinColumn(nullable=false)      */     private $article;      // etc... } </code></pre>  <p>In a specific page, I list every articles but don't need the field articleComment. Doctrine get all the articleComment entities anyway, and I have something like 75 total queries. It's too much !</p>  <p>So, I just wan't to stop that behavior and get the articleComment entities ONLY if I have to use it in my page.</p>  <p>I tried the default parameter "<code>LAZY</code>" then "<code>EXTRA_LAZY</code>", and, finally, "<code>EAGER</code>", but nothing changes.</p>  <p>Do you have something in mind ?</p>  <p>Thanks</p>  <p>EDIT :</p>  <p><a href="http://i.stack.imgur.com/ywwZD.png" rel="nofollow"><img src="http://i.stack.imgur.com/ywwZD.png" alt="DB schema"></a></p>  <p>So, here is my DB schema for the explanation.</p>  <p>I have a repository for my article_opinion table :</p>  <pre><code>class ArticleOpinionRepository extends EntityRepository {      public function getList() {          $db = $this-&gt;createQueryBuilder('ao')                 -&gt;addSelect(array('a'))                 -&gt;join('ao.article', 'a');          return $db-&gt;getQuery()-&gt;getResult();     }  } </code></pre>  <p>Each time Doctrine get an article with that query, the article_comment attached to it is gotten too. So, one more query is executed for each.</p>  <p>Here is my call for the repository function, in my controller :</p>  <pre><code>public function getListArticlesAction() {     $articles = $this-&gt;getDoctrine()-&gt;getManager()-&gt;getRepository('MyBundle:ArticleOpinion')-&gt;getList();      return $this-&gt;render('MyBundle:Site:listArticle.html.twig', array('articles' =&gt; $articles)); } </code></pre>  <p>And my twig template (for the tests) :</p>  <pre><code>{% block body %}     {% for a in articles %}         {{ a.id }}&lt;br /&gt;     {% endfor %} {% endblock %} </code></pre>