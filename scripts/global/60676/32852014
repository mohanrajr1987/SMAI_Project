<p>I followed the documentation for this <a href="http://symfony.com/doc/current/cookbook/form/form_collections.html" rel="nofollow">here</a>: but could not get the example to persist to the database for the embedded form; the Plant class saved just fine. I am under the assumption that the persist and flush methods in the controller handle the persisting of both entities. Is this wrong to assume?  Do I need to intercept it and set it manually in the controller before flush?</p>  <p>At any rate, here is my code:</p>  <pre><code>Plant Entity:  &lt;?php  /**  * @ORM\Entity(repositoryClass="Blogger\BlogBundle\Entity\Repository\PlantRepository")  * @ORM\Table(name="plant")  * @ORM\HasLifecycleCallbacks  */ class Plant {      /**      * @ORM\Id      * @ORM\Column(type="integer")      * @ORM\GeneratedValue(strategy="AUTO")      */     protected $id;     /**     * @ORM\Column(type="array", nullable=true)     * @ORM\ManyToMany(targetEntity="Blogger\BlogBundle\Entity\Picture", inversedBy="plants", cascade={"persist"})     * @ORM\JoinTable(name="picture")     */     protected $pictures;  //...      public function __construct()     {         $this-&gt;pictures = new ArrayCollection;     }  //...      /**      * Add pictures      *      * @param \Blogger\BlogBundle\Entity\Picture $pictures      * @return Plant      */     public function addPicture(\Blogger\BlogBundle\Entity\Picture $pictures)     {         $pictures-&gt;addPlant($this);         $this-&gt;pictures[] = $pictures;     }      /**      * Remove pictures      *      * @param \Blogger\BlogBundle\Entity\Picture $pictures      */     public function removePicture(\Blogger\BlogBundle\Entity\Picture $pictures)     {         $this-&gt;pictures-&gt;removeElement($pictures);     }      /**      * Get pictures      *      * @return \Doctrine\Common\Collections\Collection       */     public function getPictures()     {         return $this-&gt;pictures;     } }    </code></pre>  <p>Picture Entity:</p>  <pre><code>&lt;?php  namespace Blogger\BlogBundle\Entity; use Doctrine\ORM\Mapping as ORM;   /**  * @ORM\Entity  * @ORM\Table(name="Picture")  */ class Picture {      /**      * @ORM\Id      * @ORM\Column(type="integer")      * @ORM\GeneratedValue(strategy="AUTO")      */     protected $id;      //...      /**      * @ORM\Column(type="text")      */     public $path;      /**      * @ORM\Column(type="array", nullable=true)      * @ORM\ManyToMany(targetEntity="Blogger\BlogBundle\Entity\Plant", mappedBy="pictures")      */     private $plants;       /**      * Constructor      */     public function __construct()     {         $this-&gt;plants = new \Doctrine\Common\Collections\ArrayCollection();     }  //...      /**      * Set path      *      * @param string $path      * @return Picture      */     public function setPath($path)     {         $this-&gt;path = $path;          return $this;     }      /**      * Get path      *      * @return string       */     public function getPath()     {         return $this-&gt;path;     }      /**      * Add plants      *      * @param \Blogger\BlogBundle\Entity\Plant $plants      * @return Picture      */     public function addPlant(\Blogger\BlogBundle\Entity\Plant $plants)     {               if (!$this-&gt;plants-&gt;contains($plants)) {             $this-&gt;plants-&gt;add($plants);         }     }      /**      * Remove plants      *      * @param \Blogger\BlogBundle\Entity\Plant $plants      */     public function removePlant(\Blogger\BlogBundle\Entity\Plant $plants)     {         $this-&gt;plants-&gt;removeElement($plants);     }      /**      * Get plants      *      * @return \Doctrine\Common\Collections\Collection       */     public function getPlants()     {         return $this-&gt;plants;     } } </code></pre>  <p>Plant Form:</p>  <pre><code>&lt;?php   namespace Blogger\BlogBundle\Form;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolver;  class PlantForm extends AbstractType {      public function __construct($em) {         $this-&gt;em = $em;     }      public function buildForm(FormBuilderInterface $builder, array $options)     {  //...          $builder-&gt;add('pictures', 'collection', array(             'type'      =&gt; new PictureForm(),             'options'   =&gt; array(                 'data_class' =&gt; 'Blogger\BlogBundle\Entity\Picture'),             'allow_add'    =&gt; true,             'allow_delete' =&gt; true,             'by_reference' =&gt; false,         ));      }      public function configureOptions(OptionsResolver $resolver)     {         $resolver-&gt;setDefaults(array(             'data_class' =&gt; 'Blogger\BlogBundle\Entity\Plant',         ));     }      public function getName()     {         return 'plant';     } } </code></pre>  <p>Picture Form:</p>  <pre><code>&lt;?php   namespace Blogger\BlogBundle\Form;  use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\OptionsResolver\OptionsResolver;  class PictureForm extends AbstractType {     public function buildForm(FormBuilderInterface $builder, array $options)     {  //...          $builder-&gt;add('path', 'textarea');  //...      }      public function configureOptions(OptionsResolver $resolver)     {         $resolver-&gt;setDefaults(array(             'data_class' =&gt; 'Blogger\BlogBundle\Entity\Picture',         ));     }      public function getName()     {         return 'picture';     } } </code></pre>  <p>Plant Controller:</p>  <pre><code>public function newAction(Request $request){     $plant = new Plant();  $image1 = new Picture(); $plant-&gt;getPictures()-&gt;add($image1);  $form = $this-&gt;createForm(new PlantForm($this-&gt;getDoctrine()-&gt;getManager()), $plant);  if ($request-&gt;getMethod() == 'POST') {     $form-&gt;handleRequest($request);      if ($form-&gt;isValid()) {         $em = $this-&gt;getDoctrine()                -&gt;getEntityManager();         $em-&gt;persist($plant);         $em-&gt;flush();          return $this-&gt;redirect($this-&gt;generateUrl('route', array(             'id'    =&gt; $plant-&gt;getId()           )));     } }  return $this-&gt;render('Bundle:Plant:new.html.twig', array( 'form' =&gt; $form-&gt;createView() ));  } </code></pre>  <p>I suspect I don't have my annotations for the database mapped correctly.  When I open phpadmin, there are no relationships defined in the database.</p>