<p>I'm facing a problem with a custom id generator, auto-incrementation and doctrine-migrations in Symfony (2.7) with Doctrine (2.5) and MySQL.</p>  <p>When I use the custom generator, the id field does not get the AUTO_INCREMENT status in the migrations:diff output. When I add the autoincrement manually in the yaml then all referenced table-columns also get the AUTO_INCREMENT.</p>  <p>How can I use auto increment on my primary entity with a custom generator without affecting the references?</p>  <p>The entity (sites.orm.yml):</p>  <pre><code>type: entity table: sites id:   id:     type: integer     column: id     generator:       strategy: CUSTOM     customIdGenerator:       class: AssignableIdentityGenerator </code></pre>  <p>The generator:</p>  <pre><code>class AssignableIdentityGenerator extends AbstractIdGenerator {   public function generate(EntityManager $em, $entity) {     return $entity-&gt;getId() ? : (int) $em-&gt;getConnection()-&gt;lastInsertId();   }    public function isPostInsertGenerator() {     return true;   } } </code></pre>  <p>Migrations:diff output keeps being this (removes the AUTO_INCREMENT):</p>  <pre><code>ALTER TABLE sites CHANGE id id INT NOT NULL; </code></pre>  <p>If I add</p>  <pre><code>options:   autoincrement: true </code></pre>  <p>I don't get an ALTER for the sites table, which is correct because it keeps the AUTO_INCREMENT, but instead I get</p>  <pre><code>ALTER TABLE other_table CHANGE site_id site_id INT AUTO_INCREMENT NOT NULL; </code></pre>  <p>on a referencing table, which is not correct.</p>  <p>Doctrine natively suports the AUTO_INCREMENT with its own IdentityGenerator and I think I found the spot in Doctrine\ORM\Tools\SchemaTool::gatherColumn where this takes effect, but it's deep in a private method:</p>  <pre><code>if ($class-&gt;isIdGeneratorIdentity() &amp;&amp; $class-&gt;getIdentifierFieldNames() == array($mapping['fieldName'])) {     $options['autoincrement'] = true; } </code></pre>  <p>Unfortunately Doctrine is not very friendly to extensions (many private methods/properties or classes being instantiated instead of using injectable services).</p>  <p>Would anyone have a solution to this problem? Or maybe even a whole different idea on how to get an id field that is both auto-incrementable and manually settable.</p>