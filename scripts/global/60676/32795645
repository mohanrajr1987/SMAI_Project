<p>I have query </p>  <pre><code>  /**                  * @var $query QueryBuilder                  */                 $query                     -&gt;where($query-&gt;expr()-&gt;andX(                         $query-&gt;expr()-&gt;eq($tableAlias .'.relation_service_name', $rtype),                         $query-&gt;expr()-&gt;eq($tableAlias . '.relation_id', $rid)                     ))                 ;                  if($cid){                     $contact = $this-&gt;getDoctrine()-&gt;getRepository('MeaContactBundle:Contact')-&gt;find($cid);                     $query-&gt;orWhere($tableAlias . '.company = :company')                         -&gt;setParameter('company',$contact)                     ;                 } </code></pre>  <p>Here is error</p>  <pre><code>QUERYEXCEPTION: [SYNTAX ERROR] LINE 0, COL 291: ERROR: EXPECTED DOCTRINE\ORM\QUERY\LEXER::T_CLOSE_PARENTHESIS, GOT '.'  QUERYEXCEPTION: SELECT _A.ID, _A.CODE, _COMPANY.NAME AS COMPANY::NAME, _A.DATA, _A.RELATION_SERVICE_NAME, _A.RELATION_ID, _A.CREATEDAT, _KEYWORDS.TITLE AS KEYWORDS::TITLE FROM MEA\LOGBUNDLE\ENTITY\LOG _A LEFT JOIN _A.COMPANY _COMPANY LEFT JOIN _A.KEYWORDS _KEYWORDS WHERE (_A.RELATION_SERVICE_NAME = MEA.LOG.RELATION.INVOICE AND _A.RELATION_ID = 1536) OR _A.COMPANY = :COMPANY GROUP BY _A.ID ORDER BY _A.ID DESC </code></pre>  <p>This example work </p>  <pre><code>$source-&gt;manipulateQuery(             function ($query) use ($tableAlias,$rtype,$rid,$cid)             {                 /**                  * @var $query QueryBuilder                  */                 $query                     -&gt;andWhere($tableAlias . '.relation_service_name = :type')                     -&gt;andWhere($tableAlias . '.relation_id = :id')                     -&gt;setParameter('type',$rtype)                     -&gt;setParameter('id',$rid) //                    -&gt;where($query-&gt;expr()-&gt;andX( //                        $query-&gt;expr()-&gt;eq($tableAlias .'.relation_service_name', $rtype), //                        $query-&gt;expr()-&gt;eq($tableAlias .'.relation_id', $rid) //                    ))                 ;                  if($cid){                     $contact = $this-&gt;getDoctrine()-&gt;getRepository('MeaContactBundle:Contact')-&gt;find($cid);                     $query-&gt;orWhere($tableAlias . '.company = :company')                         -&gt;setParameter(':company',$contact)                     ;                 }             }         ); </code></pre>  <p>Here is entity</p>  <pre><code>/**  * Class Log  * @ORM\Entity  * @ORM\Table(name="fLog",indexes={@ORM\Index(name="log_typeId", columns={"relation_service","relation_id"})})  * @ORM\HasLifecycleCallbacks  * @GRID\Source(  * columns="id,code, company.name,data,relation_service_name,relation_id,createdAt, keywords.title",  * groupBy={"id"})  */ class Log{      /**      * @var integer      * @ORM\Column(type="integer")      * @ORM\Id      * @ORM\GeneratedValue(strategy="AUTO")      */     protected $id;       /**      * @ORM\ManyToOne(targetEntity="Mea\ContactBundle\Entity\Contact",cascade={"persist"})      * @GRID\Column(field="company.name", title="Firma")      * @var Contact      */     protected $company;      /**      * @ORM\ManyToMany(targetEntity="Mea\ContactBundle\Entity\Contact",cascade={"persist"})      * @GRID\Column(field="company.name", title="Kontakty")      * @var ArrayCollection|Contact      */     protected $contacts;         /**      * @ORM\Column(type="string",name="relation_service")      * @var string      */     protected $relation_service_name;      /**      * @ORM\Column(type="integer", length=64)      * @var int      */     protected $relation_id;      /**      * @var ArrayCollection|Keyword      * GRID\Column(field="keywords.id:GroupConcat",  title="tagi2" ,filter="select" , selectMulti="true")      * @GRID\Column(field="keywords.title",  title="tagi2" ,filter="select")      * @ORM\ManyToMany(targetEntity="Mea\KeywordsBundle\Entity\Keyword",cascade={"persist"})      * @ORM\JoinTable(name="fLog_Keywords"      * ,      *      joinColumns={@ORM\JoinColumn(name="log_id", referencedColumnName="id")},      *      inverseJoinColumns={@ORM\JoinColumn(name="keyword_id", referencedColumnName="id")}      * )      */     protected $keywords; </code></pre>