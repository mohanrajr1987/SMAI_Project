<p>In a Symfony/Doctrine/PHP-project, a client is complaining that we've broken software development best practices. The complaint is about improper layering of the source code, and the lack of unit tests.</p>  <ul> <li>This is a sub $50k-project.</li> <li>I believe that the client has an expert from the Java world, perhaps Spring Framework, looking at the source code.</li> </ul>  <p>We've been using proper MVC, as we see it.</p>  <ul> <li>View-logic is handled entirely by TWIG.</li> <li>Database is handled entirely by Doctrine.</li> <li>We're using Symfony Security for access control <code>($this-&gt;get('security.context')-&gt;isGranted('ROLE_ADMIN')</code> and <code>$this-&gt;get('security.context')-&gt;getToken()-&gt;getUser()</code>.</li> </ul>  <p>Beware that Symfony has changed the model a bit, since we started this project - but remains backward compatible.</p>  <p>In the controller the customer is specifically saying that it's wrong for the controller to handle:</p>  <ul> <li>Access Control (via Symfony Security)</li> <li>Database Queries (via Doctrine)</li> <li>"Parsing and other logic" for sending back responses (<code>return $this-&gt;render('some_template.html.twig');</code>)</li> </ul>  <h1>The question</h1>  <p>The client is saying that <em>best practices is for the controller to simply pass on requests to another layer further down in the system</em>. </p>  <p>Further he's saying that user-admin is based on a "custom model" where all users and roles are stored in the database - which makes plugging in a different access control system difficult. Specifically because role names seems to be hard coded such as via commands such as <code>($this-&gt;get('security.context')-&gt;isGranted('ROLE_ADMIN')</code>.</p>  <p>So; is there a definitive best practice on this field? What belongs in the controller, and is Doctrine, Twig, Symfony Security "sufficiently" a separate layer "below the controller".</p>  <p>Should there be yet another layer between the controller and Doctrine for example?</p>