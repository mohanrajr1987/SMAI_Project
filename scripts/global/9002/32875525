<p>I have created a text field that upon entry will open a picker view with a toolbar that contains a done button.  However, when the done button is pressed the picker view doesn't dismiss.  Everything else works just as I want except this.  I've tried several options to no avail. Please review and let me know what I'm missing.</p>  <p>My code is below:</p>  <p>ViewController.h</p>  <pre><code>    #import &lt;UIKit/UIKit.h&gt;      @interface ViewController : UIViewController </code></pre>  <p>{IBOutlet UITextField *productDescription; IBOutlet UIPickerView *productPicker; NSArray *productListArray}</p>  <p>ViewController.m</p>  <pre><code>    #import "ViewController.h"      @interface ViewController ()      @end      @implementation ViewController      -(void)addPickerView{ productListArray = [[NSArray alloc]initWithObjects:                     @"myArray", nil];      productDescription.delegate = self;     [self.view addSubview:productDescription];     [productDescription setPlaceholder:@"Product Description"];     productPicker = [[UIPickerView alloc]init];     productPicker.dataSource = self;     productPicker.delegate = self;     productPicker.showsSelectionIndicator = YES;     UIBarButtonItem *doneButton = [[UIBarButtonItem alloc]                                initWithTitle:@"Done" style:UIBarButtonItemStyleDone                                target:self action:@selector(resignFirstResponder)];     UIToolbar *toolBar = [[UIToolbar alloc]initWithFrame:                       CGRectMake(50, 320, 50, 50)];     [toolBar setBarStyle:UIBarStyleBlackOpaque];     NSArray *toolbarItems = [NSArray arrayWithObjects:                          doneButton, nil];     [toolBar setItems:toolbarItems];     productDescription.inputView = productPicker;     productDescription.inputAccessoryView = toolBar;     }      - (void)viewDidLoad      {     [super viewDidLoad];     [self addPickerView];     }      #pragma mark - Text field delegates      -(void)textFieldDidBeginEditing:(UITextField *)textField      {     ([textField.text isEqualToString:@""]);     }      #pragma mark - Picker View Data source      -(NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView{ return 1;     }     -(NSInteger)pickerView:(UIPickerView *)pickerView     numberOfRowsInComponent:(NSInteger)component{ return [productListArray count];     }      #pragma mark- Picker View Delegate      -(void)pickerView:(UIPickerView *)pickerView didSelectRow:     (NSInteger)row inComponent:(NSInteger)component{     [productDescription setText:[productListArray objectAtIndex:row]];     }      - (void)doneButton:(UIBarButtonItem *)sender{     NSLog(@"Done Touched");     [productPicker setHidden:YES];     }      - (NSString *)pickerView:(UIPickerView *)pickerView titleForRow:     (NSInteger)row forComponent:(NSInteger)component{     return [productListArray objectAtIndex:row];     }      @end </code></pre>