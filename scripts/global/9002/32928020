<p>I want, in this code, to make the "Close" button stationary (floating) each time the view changes, something like in this example:</p>  <p><a href="http://www.jondev.net/articles/Floating_Views_in_Android_%28Buttons%29" rel="nofollow">http://www.jondev.net/articles/Floating_Views_in_Android_%28Buttons%29</a></p>  <pre><code>**XML**  &lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"     android:layout_width="fill_parent"     android:layout_height="fill_parent"&gt;      &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"         android:layout_width="match_parent"         android:layout_height="wrap_content"         android:orientation="vertical" &gt;      &lt;com.myapplication.helper.TouchImageView         android:id="@+id/imgDisplay"         android:layout_width="fill_parent"         android:layout_height="fill_parent"         android:scaleType="fitCenter" /&gt;     &lt;/LinearLayout&gt;    &lt;Button         android:id="@+id/btnClose"         android:layout_width="wrap_content"         android:layout_height="wrap_content"         android:layout_alignParentRight="true"         android:layout_alignParentTop="true"         android:layout_marginRight="15dp"         android:layout_marginTop="15dp"         android:paddingTop="2dp"         android:paddingBottom="2dp"         android:background="@drawable/button_background"         android:textColor="#ffffff"         android:text="Close" /&gt;  &lt;/FrameLayout&gt; </code></pre>  <p>Also my PagerFragment:</p>  <pre><code>import android.app.Activity; import android.content.Context; import android.graphics.Bitmap; import android.graphics.BitmapFactory; import android.support.v4.view.PagerAdapter; import android.support.v4.view.ViewPager; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.Button; import android.widget.FrameLayout;  import java.util.ArrayList;  import com.myapplication.R; import com.myapplication.helper.TouchImageView;   public class FullScreenImageAdapter extends PagerAdapter {      private Activity _activity;     private ArrayList&lt;String&gt; _imagePaths;     private LayoutInflater inflater;      // constructor     public FullScreenImageAdapter(Activity activity,                                   ArrayList&lt;String&gt; imagePaths) {         this._activity = activity;         this._imagePaths = imagePaths;     }      @Override     public int getCount() {         return this._imagePaths.size();     }      @Override     public boolean isViewFromObject(View view, Object object) {         return view == ((FrameLayout) object);     }      @Override     public Object instantiateItem(ViewGroup container, int position) {         TouchImageView imgDisplay;         Button btnClose;          inflater = (LayoutInflater) _activity                 .getSystemService(Context.LAYOUT_INFLATER_SERVICE);         View viewLayout = inflater.inflate(R.layout.layout_fullscreen_image, container,                 false);          imgDisplay = (TouchImageView) viewLayout.findViewById(R.id.imgDisplay);         btnClose = (Button) viewLayout.findViewById(R.id.btnClose);          BitmapFactory.Options options = new BitmapFactory.Options();         options.inPreferredConfig = Bitmap.Config.ARGB_8888;         Bitmap bitmap = BitmapFactory.decodeFile(_imagePaths.get(position), options);         imgDisplay.setImageBitmap(bitmap);          // close button click event         btnClose.setOnClickListener(new View.OnClickListener() {             @Override             public void onClick(View v) {                 _activity.finish();             }         });          ((ViewPager) container).addView(viewLayout);          return viewLayout;     }      @Override     public void destroyItem(ViewGroup container, int position, Object object) {         ((ViewPager) container).removeView((FrameLayout) object);      }   } </code></pre>  <p>Thanks!</p>