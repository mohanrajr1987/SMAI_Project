<p>I have a button that appears one to the left too much, how do I make it appear under the position I am at? This will probably be something so simple but I really am struggling today, I'm having an awful day today. Someone please help me</p>  <pre><code>        public class CognitiveTreeBuilderViewModel : INotifyPropertyChanged {     private CognitiveTreeRoot root;     private readonly IDiagramBuilder diagramBuilder;      public CognitiveTreeBuilderViewModel(IDiagramBuilder diagramBuilder)     {         this.diagramBuilder = diagramBuilder;     }      public void Bind(CognitiveTreeRoot treeRoot)     {         root = treeRoot;         this.diagramBuilder.BuildDiagram(root);     }      public void Rebuild()     {         this.diagramBuilder.BuildDiagram(root);     }      public void Expand(PropertyNode propertyNode)     {         if (!propertyNode.ScenarioNodes.Any())         {             return;         }          propertyNode.IsExpanded = true;          diagramBuilder.Hide(propertyNode.DiagramId);         foreach (var scenarioNode in propertyNode.ScenarioNodes)         {             diagramBuilder.Show(scenarioNode.DiagramId);         }     }      public void DisplayAddScenarioButton(double p)     {         int propertyNodeIndex = Convert.ToInt32(p/210);          foreach (var property in root.Nodes)         {             property.IsAddButtonVisible = false;         }         if (propertyNodeIndex &lt; root.Nodes.Count)         {             root.Nodes[propertyNodeIndex - 1].IsAddButtonVisible = true;         }     }      public void Collapse(PropertyNode propertyNode)     {         propertyNode.IsExpanded = false;         foreach (var scenarioNode in propertyNode.ScenarioNodes)         {             diagramBuilder.Hide(scenarioNode.DiagramId);         }         diagramBuilder.Show(propertyNode.DiagramId);     }      public void CreateScenario(PropertyNode propertyNode)     {         propertyNode.IsExpanded = true;         propertyNode.AddScenario();         this.diagramBuilder.BuildDiagram(root);     }      public void RenameScenario(ScenarioNode scenarioNode)     {         var shouldEdit = scenarioNode.IsEditing == false;         if (!shouldEdit)         {             scenarioNode.IsEditing = false;             return;         }          foreach (var node in scenarioNode.Parent.ScenarioNodes)         {             node.IsEditing = false;         }         scenarioNode.IsEditing = true;     }      public void ToggleExpanded(PropertyNode propertyNode)     {         if (propertyNode.IsExpanded == true)         {             Collapse(propertyNode);         }         else         {             Expand(propertyNode);         }     }      public event PropertyChangedEventHandler PropertyChanged;      [NotifyPropertyChangedInvocator]     protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)     {         var handler = PropertyChanged;         if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));     } } </code></pre>