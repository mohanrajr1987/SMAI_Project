<p>I'm quite new to Android, and I'm trying to query a database table "Houses" with the columns size, owner and city.</p>  <p>I am trying to implement a method </p>  <pre><code>getHousesFromDatabase(String owner, String city, Integer size)  </code></pre>  <p>where <em>city</em> and <em>size</em> can be null. The method is supposed to return all the rows where the <em>size, location, city</em> fields match the parameters, but only if the parameter is not null. i.e.  </p>  <p><code>getHousesFromDatabase("John", null, null);</code> should return all the rows where the owner is John, regardless of the other columns.</p>  <p><code>getHousesFromDatabase("John", "San Francisco", null);</code> should return all the rows where the owner is John and that are in San Francisco, and so on.</p>  <p>My current implementation goes like this</p>  <pre><code>   public House getHousesFromDatabase(String owner, String city, Integer size) {         if (city == null &amp;&amp; size == null) {             Cursor cursor = database.rawQuery("select * from " + SQLiteHelper.TABLE_HOUSES + " where "                     + COLUMN_OWNER + " like '" + owner + "%" + "'", null);         }         else if (city == null) {             Cursor cursor = database.rawQuery("select * from " + TABLE_HOUSES + " where "                     + COLUMN_OWNER + " like '" + owner + "%" + "'" +" and where " + COLUMN_SIZE + "like '"+ size +"%'", null);         }         else if (size == null) {             ...         }         else {            ...         }     } </code></pre>  <p>where the if statements cover each possible variation; But this feels horribly clumsy to me, and I wonder if there is a simpler way, and one that results in a prepared statement? (from what I read, <code>rawQuery()</code> alone is vulnerable to SQL injections, and <code>SQLiteStatement.execute()</code> is not to be used for queries).</p>