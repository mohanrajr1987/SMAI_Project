<p>I have the following Spring/Hibernate configs:</p>  <pre><code>&lt;bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"&gt;     &lt;property name="dataSource" ref="jndiDataSource" /&gt;     &lt;property name="annotatedClasses"&gt;         &lt;list&gt;             ...         &lt;/list&gt;     &lt;/property&gt;      &lt;property name="hibernateProperties"&gt;         &lt;props&gt;             &lt;prop key="hibernate.dialect"&gt;org.hibernate.dialect.Oracle10gDialect&lt;/prop&gt;             &lt;prop key="hibernate.show_sql"&gt;true&lt;/prop&gt;         &lt;/props&gt;     &lt;/property&gt; &lt;/bean&gt; &lt;tx:annotation-driven transaction-manager="transactionManager"/&gt;  &lt;bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/&gt;  &lt;bean id="transactionManager"          class="org.springframework.orm.hibernate4.HibernateTransactionManager"         p:sessionFactory-ref="sessionFactory" /&gt; </code></pre>  <p>I am extensively using spring transaction annotations to control transaction propagation methods throughout my code base.  It is all working great.</p>  <p>I have a need to perform an update that will affect many rows at once and I want to blend it in with the rest of my transaction logic.  The last thing I want to do is to bull in a china shop and load all objects into memory and loop through them changing them one at a time.</p>  <p>I am trying something like:</p>  <pre><code>            @Autowired             private SessionFactory sessionFactory;             ...             String hql = "UPDATE TABLE_NAME SET COLUMN_LIST WHERE ID IN :list";             // I see the transaction and get an error when I try to start a new one.             Transaction trans = sessionFactory.getCurrentSession().getTransaction();             Query query = sessionFactory.getCurrentSession().createSQLQuery(hql);             query.setParameterList("list", listOfIds);             success = (query.executeUpdate() == listOfIds.size()); </code></pre>  <p>I have tried dropping this into a method with its own transaction instructions, but am not seeing any evidence that it is being executed (other than a lack of errors).</p>  <p>What is the recommended way to include custom Hibernate SQL into Spring managed transactions?</p>  <p>Thanks a lot.</p>