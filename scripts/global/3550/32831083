<p>I try to cover my code with Junit tests and  face really unexpected situation:</p>  <p><strong>Preconditions:</strong> </p>  <p><code>ProductRepository</code> is classic <code>Spring Data</code> implementation, that extends <code>JpaRepository</code>.</p>  <p><code>ProductService</code> is service that uses <code>ProductRepository</code> inside via <code>Play! Framework</code> <code>Promise</code>. All <code>ProductService</code> methods return <code>Promise&lt;ServiceResponse&gt;</code>.</p>  <p>See Junit tests below:</p>  <pre><code>@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes ={SomeConfig.class}) public class ProductTest{  @Inject private ProductService service;  @Inject private ProductRepository repository;  @BeforeTransaction public void beforeTransaction(){ Product p = repository.getProductById(1L); System.out.println("Before: "+ p.isActive()); } @AfterTransaction public void afterTransaction(){ Product p = repository.getProductById(1L); System.out.println("After: "+ p.isActive()); } @Test @Transactional public void checkProductRepository(){ Product p = repository.getProductById(1L); p.setActive(1);  repository.save(p); }  @Test @Transactional public void checkProductService(){ service.activateById(1L).get(1000L); } } </code></pre>  <p><strong>Result:</strong></p>  <p><em>Before: <strong>0</strong>   Began transaction for .. checkProductRepository....   Rolled back transaction for... checkProductRepository...   After: <strong>0</em></strong></p>  <p><em>Before: <strong>0</strong>   Began transaction for .. checkProductService....   Rolled back transaction for... checkProductService...   After: <strong>1</em></strong></p>  <p>But how it is possible?! For second test, where I use <code>ProductService</code> transaction rolled back, but it didn't reverted status <code>active</code> for <code>Product</code> (<strong>After: 1</strong>).</p>  <p>Can anybody explain: How it is possible? And how to resolve this issue.</p>