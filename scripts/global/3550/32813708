<p>I have an application which uses 2 databases which will be used in Tomcat 8. As Tomcat doesn't have JTA/XA feature so I am trying to add it using Bitronix.</p>  <p>But I am getting error when context gets loaded that <strong>datasource has already been registered</strong>. I have put the complete stack trace below.</p>  <p>I am using Oracle database with <code>OracleXADataSource</code>.  </p>  <p>Below is my <strong>hibernate-context.xml</strong>,</p>  <pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;beans xmlns="http://www.springframework.org/schema/beans"        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xmlns:jee="http://www.springframework.org/schema/jee"        xmlns:aop="http://www.springframework.org/schema/aop"        xmlns:tx="http://www.springframework.org/schema/tx"        xsi:schemaLocation="http://www.springframework.org/schema/beans                             http://www.springframework.org/schema/beans/spring-beans-3.1.xsd                            http://www.springframework.org/schema/jee                             http://www.springframework.org/schema/jee/spring-jee-3.1.xsd                            http://www.springframework.org/schema/tx                            http://www.springframework.org/schema/tx/spring-tx-3.1.xsd"&gt;      &lt;tx:annotation-driven transaction-manager="transactionManager" mode="proxy" proxy-target-class="false"/&gt;      &lt;!-- Bitronix Transaction Manager Start --&gt;     &lt;bean id="btmConfig" factory-method="getConfiguration" class="bitronix.tm.TransactionManagerServices"&gt;         &lt;property name="serverId" value="btm-server" /&gt;         &lt;property name="logPart1Filename" value="bitronix.tm.journal.disk.logPart1Filename" /&gt;         &lt;property name="logPart2Filename" value="bitronix.tm.journal.disk.logPart2Filename" /&gt;     &lt;/bean&gt;      &lt;!-- Create BTM transaction manager --&gt;     &lt;bean id="bitronixTransactionManager" factory-method="getTransactionManager"         class="bitronix.tm.TransactionManagerServices" depends-on="dataSourceA,dataSourceB,btmConfig" destroy-method="shutdown" /&gt;      &lt;bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager" primary="true"&gt;         &lt;property name="transactionManager" ref="bitronixTransactionManager" /&gt;         &lt;property name="userTransaction" ref="bitronixTransactionManager" /&gt;         &lt;property name="allowCustomIsolationLevels" value="true"/&gt;         &lt;property name="defaultTimeout" value="10000" /&gt;     &lt;/bean&gt;     &lt;!-- End --&gt;      &lt;!-- Bitronix DatasourceA --&gt;     &lt;bean id="dataSourceA" class="bitronix.tm.resource.jdbc.PoolingDataSource" init-method="init" destroy-method="close"&gt;         &lt;property name="className" value="oracle.jdbc.xa.client.OracleXADataSource" /&gt;         &lt;property name="uniqueName" value="JPA-DSA" /&gt;         &lt;property name="minPoolSize" value="10" /&gt;         &lt;property name="maxPoolSize" value="50" /&gt;         &lt;property name="testQuery" value="SELECT 1 FROM DUAL" /&gt;         &lt;property name="driverProperties"&gt;             &lt;props&gt;                 &lt;prop key="URL"&gt;jdbc:oracle:thin:@localhost:1521:DSA&lt;/prop&gt;                 &lt;prop key="user"&gt;DSA&lt;/prop&gt;                 &lt;prop key="password"&gt;DSA&lt;/prop&gt;             &lt;/props&gt;         &lt;/property&gt;     &lt;/bean&gt;      &lt;!-- Bitronix DatasourceB --&gt;     &lt;bean id="dataSourceB" class="bitronix.tm.resource.jdbc.PoolingDataSource" init-method="init" destroy-method="close"&gt;         &lt;property name="className" value="oracle.jdbc.xa.client.OracleXADataSource" /&gt;         &lt;property name="uniqueName" value="JPA-DSB" /&gt;         &lt;property name="minPoolSize" value="10" /&gt;         &lt;property name="maxPoolSize" value="50" /&gt;         &lt;property name="testQuery" value="SELECT 1 FROM DUAL" /&gt;         &lt;property name="driverProperties"&gt;             &lt;props&gt;                 &lt;prop key="URL"&gt;jdbc:oracle:thin:@localhost:1521:DSB&lt;/prop&gt;                 &lt;prop key="user"&gt;DSB&lt;/prop&gt;                 &lt;prop key="password"&gt;DSB&lt;/prop&gt;             &lt;/props&gt;         &lt;/property&gt;     &lt;/bean&gt;      &lt;bean id="baseSessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean"&gt;         &lt;property name="hibernateProperties"&gt;             &lt;props&gt;                 &lt;prop key="hibernate.dialect"&gt;org.hibernate.dialect.Oracle10gDialect&lt;/prop&gt;                 &lt;prop key="hibernate.show_sql"&gt;true&lt;/prop&gt;                 &lt;prop key="hibernate.jdbc.batch_size"&gt;50&lt;/prop&gt;                 &lt;prop key="hibernate.use_sql_comments"&gt;true&lt;/prop&gt;                 &lt;prop key="hibernate.format_sql"&gt;true&lt;/prop&gt;             &lt;/props&gt;         &lt;/property&gt;         &lt;property name="mappingLocations"&gt;             &lt;list&gt;                 &lt;value&gt;classpath*:/hibernate/hbm/**/*.hbm.xml&lt;/value&gt;             &lt;/list&gt;         &lt;/property&gt;     &lt;/bean&gt;      &lt;bean id="sessionFactoryA" parent="baseSessionFactory"&gt;         &lt;property name="dataSource" ref="dataSourceA" /&gt;     &lt;/bean&gt;      &lt;bean id="sessionFactoryT" parent="baseSessionFactory"&gt;         &lt;property name="dataSource" ref="dataSourceB" /&gt;     &lt;/bean&gt;      &lt;bean class="org.springframework.orm.hibernate4.HibernateExceptionTranslator"/&gt;      &lt;bean id="daoWrapper" class="com.demo.common.dao.impl.DAOWrapper"&gt;         &lt;property name="sessionFactoryA" ref="sessionFactoryA" /&gt;         &lt;property name="sessionFactoryT" ref="sessionFactoryT" /&gt;     &lt;/bean&gt;  &lt;/beans&gt; </code></pre>  <p>Here is the complete error stack trace,</p>  <pre><code>javax.servlet.ServletException: Servlet.init() for servlet dis threw exception     org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)     org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)     org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:617)     org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:518)     org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1091)     org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:668)     org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1521)     org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1478)     java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)     java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)     org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)     java.lang.Thread.run(Thread.java:722) root cause  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor#0' defined in ServletContext resource [/WEB-INF/dis-servlet.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactoryA' defined in class path resource [hibernate/hibernate-context.xml]: Cannot resolve reference to bean 'dataSourceA' while setting bean property 'dataSource'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceA' defined in class path resource [hibernate/hibernate-context.xml]: Invocation of init method failed; nested exception is bitronix.tm.resource.ResourceConfigurationException: cannot create JDBC datasource named JPA-DSA     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)     org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)     org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)     org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)     org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)     org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:728)     org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:449)     org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:631)     org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:588)     org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:645)     org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:508)     org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:449)     org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:133)     javax.servlet.GenericServlet.init(GenericServlet.java:158)     org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)     org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)     org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:617)     org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:518)     org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1091)     org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:668)     org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1521)     org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1478)     java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)     java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)     org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)     java.lang.Thread.run(Thread.java:722) root cause  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sessionFactoryA' defined in class path resource [hibernate/hibernate-context.xml]: Cannot resolve reference to bean 'dataSourceA' while setting bean property 'dataSource'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceA' defined in class path resource [hibernate/hibernate-context.xml]: Invocation of init method failed; nested exception is bitronix.tm.resource.ResourceConfigurationException: cannot create JDBC datasource named JPA-DSA     org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:328)     org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1360)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1118)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)     org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)     org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)     org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)     org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)     org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:400)     org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:275)     org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.detectPersistenceExceptionTranslators(PersistenceExceptionTranslationInterceptor.java:122)     org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.&lt;init&gt;(PersistenceExceptionTranslationInterceptor.java:78)     org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisor.&lt;init&gt;(PersistenceExceptionTranslationAdvisor.java:70)     org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor.setBeanFactory(PersistenceExceptionTranslationPostProcessor.java:96)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeAwareMethods(AbstractAutowireCapableBeanFactory.java:1475)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1443)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)     org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)     org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)     org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)     org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)     org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:728)     org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:449)     org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:631)     org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:588)     org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:645)     org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:508)     org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:449)     org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:133)     javax.servlet.GenericServlet.init(GenericServlet.java:158)     org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)     org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)     org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:617)     org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:518)     org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1091)     org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:668)     org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1521)     org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1478)     java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)     java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)     org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)     java.lang.Thread.run(Thread.java:722) root cause  org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceA' defined in class path resource [hibernate/hibernate-context.xml]: Invocation of init method failed; nested exception is bitronix.tm.resource.ResourceConfigurationException: cannot create JDBC datasource named JPA-DSA     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1455)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)     org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)     org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)     org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)     org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)     org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:322)     org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1360)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1118)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)     org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)     org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)     org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)     org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)     org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:400)     org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:275)     org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.detectPersistenceExceptionTranslators(PersistenceExceptionTranslationInterceptor.java:122)     org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.&lt;init&gt;(PersistenceExceptionTranslationInterceptor.java:78)     org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisor.&lt;init&gt;(PersistenceExceptionTranslationAdvisor.java:70)     org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor.setBeanFactory(PersistenceExceptionTranslationPostProcessor.java:96)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeAwareMethods(AbstractAutowireCapableBeanFactory.java:1475)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1443)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)     org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)     org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)     org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)     org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)     org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:728)     org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:449)     org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:631)     org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:588)     org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:645)     org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:508)     org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:449)     org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:133)     javax.servlet.GenericServlet.init(GenericServlet.java:158)     org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)     org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)     org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:617)     org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:518)     org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1091)     org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:668)     org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1521)     org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1478)     java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)     java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)     org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)     java.lang.Thread.run(Thread.java:722) root cause  bitronix.tm.resource.ResourceConfigurationException: cannot create JDBC datasource named JPA-DSA     bitronix.tm.resource.jdbc.PoolingDataSource.init(PoolingDataSource.java:92)     sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     java.lang.reflect.Method.invoke(Method.java:601)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1581)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1522)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1452)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)     org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)     org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)     org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)     org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)     org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:322)     org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:106)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1360)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1118)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)     org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)     org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)     org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)     org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)     org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:400)     org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:275)     org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.detectPersistenceExceptionTranslators(PersistenceExceptionTranslationInterceptor.java:122)     org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.&lt;init&gt;(PersistenceExceptionTranslationInterceptor.java:78)     org.springframework.dao.annotation.PersistenceExceptionTranslationAdvisor.&lt;init&gt;(PersistenceExceptionTranslationAdvisor.java:70)     org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor.setBeanFactory(PersistenceExceptionTranslationPostProcessor.java:96)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeAwareMethods(AbstractAutowireCapableBeanFactory.java:1475)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1443)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)     org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)     org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)     org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)     org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)     org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:728)     org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:449)     org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:631)     org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:588)     org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:645)     org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:508)     org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:449)     org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:133)     javax.servlet.GenericServlet.init(GenericServlet.java:158)     org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)     org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)     org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:617)     org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:518)     org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1091)     org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:668)     org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1521)     org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1478)     java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)     java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)     org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)     java.lang.Thread.run(Thread.java:722) root cause  java.lang.IllegalArgumentException: resource with uniqueName 'JPA-DSA' has already been registered     bitronix.tm.resource.ResourceRegistrar.register(ResourceRegistrar.java:83)     bitronix.tm.resource.jdbc.PoolingDataSource.buildXAPool(PoolingDataSource.java:104)     bitronix.tm.resource.jdbc.PoolingDataSource.init(PoolingDataSource.java:88)     sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     java.lang.reflect.Method.invoke(Method.java:601)     org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1581) </code></pre>  <p>I tried tweaking the config but ended up the same error everytime. Please let me know if I am missing anything or the configuration is not correct.<br> Thanks.</p>