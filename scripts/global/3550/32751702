<p>I'm looking for guidelines to using a consistent value of the current date and time throughout a transaction.</p>  <p>By transaction I loosely mean an application service method, such methods usually execute a single SQL transaction, at least in my applications.</p>  <h2>Ambient Context</h2>  <p>One approach described in answers to <a href="http://stackoverflow.com/questions/2425721/unit-testing-datetime-now">this question</a> is to put the current date in an ambient context, e.g. <code>DateTimeProvider</code>, and use that instead of <code>DateTime.UtcNow</code> everywhere.</p>  <p>However the purpose of this approach is only to make the design unit-testable, whereas I also want to prevent errors caused by unnecessary multiple querying into <code>DateTime.UtcNow</code>, an example of which is this:</p>  <pre><code>// In an entity constructor: this.CreatedAt = DateTime.UtcNow; this.ModifiedAt = DateTime.UtcNow; </code></pre>  <p>This code creates an entity with slightly differing created and modified dates, whereas one expects these properties to be equal right after the entity was created.</p>  <p>Also, an ambient context is difficult to implement correctly in a web application, so I've come up with an alternative approach:</p>  <h2>Method Injection + DeterministicTimeProvider</h2>  <ul> <li>The <code>DeterministicTimeProvider</code> class is registered as an "instance per lifetime scope" AKA "instance per HTTP request in a web app" dependency.</li> <li>It is constructor-injected to an application service and passed into constructors and methods of entities.</li> <li>The <code>IDateTimeProvider.UtcNow</code> method is used instead of the usual <code>DateTime.UtcNow</code> / <code>DateTimeOffset.UtcNow</code> everywhere to get the current date and time.</li> </ul>  <p>Here is the implementation:</p>  <pre><code>/// &lt;summary&gt; /// Provides the current date and time. /// The provided value is fixed when it is requested for the first time. /// &lt;/summary&gt; public class DeterministicTimeProvider: IDateTimeProvider {     private readonly Lazy&lt;DateTimeOffset&gt; _lazyUtcNow =         new Lazy&lt;DateTimeOffset&gt;(() =&gt; DateTimeOffset.UtcNow);      /// &lt;summary&gt;     /// Gets the current date and time in the UTC time zone.     /// &lt;/summary&gt;     public DateTimeOffset UtcNow =&gt; _lazyUtcNow.Value; } </code></pre>  <p>Is this a good approach? What are the disadvantages? Are there better alternatives?</p>