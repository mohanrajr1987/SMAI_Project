<p>I'm currently creating an order process (using stripe as payment)</p>  <p>All my own code is wrapped within a TransactionScope so if any part of the order process fails, this rolls everything back. </p>  <p>The problem now comes when I charge the customers card using stripe.net: </p>  <pre><code>            var chargeService = new StripeChargeService(accessToken);             var createdCharge = chargeService.Create(charge); </code></pre>  <p>If my charge succeeds but a different part of the order process fails, the customer will still have been charged but the rest of the data will rollback.</p>  <p>One thing I thought of doing was to carry out all of my own order transaction separately first, if that succeeds attempt to charge the customer. Finally I'll do another update on my order to mark it as paid. This however to me seems to defeat the point of having a transaction at all.</p>  <p>Currently I'm using EF and MS-SQL, but if I can't leverage transactions it might make more sense for me to go with a NOSQL solution instead.</p>