<p>I'm trying to figure out how to organize app engine code with transactions.  Currently I have a separate python file with all my transaction functions.  For transactions that are closely related to entities, I was wondering if it made sense to use a <code>@staticmethod</code> for the transaction.</p>  <p>Here is a simple example:</p>  <pre><code>class MyEntity(ndb.Model):     n = ndb.IntegerProperty(default=0)      @staticmethod     @ndb.transactional # does the order of the decorators matter?     def increment_n(my_entity_key):         my_entity = my_entity_key.get()         my_entity.n += 1         my_entity.put()      def do_something(self):         MyEntity.increment_n(self.key) </code></pre>  <p>It would be nice to have <code>increment_n</code> associated with the entity definition, but I have never seen anyone do this so I was wondering if this would be a bad idea.</p>  <p>MY SOLUTION:</p>  <p>Following Brent's answer, I've implemented this:</p>  <pre><code>class MyEntity(ndb.Model):     n = ndb.IntegerProperty(default=0)      @staticmethod     @ndb.transactional     def increment_n_transaction(my_entity_key):         my_entity = my_entity_key.get()         my_entity.increment_n()      def increment_n(self):         self.n += 1         self.put() </code></pre>  <p>This way I can keep entity related code all in one place and I can easily use the transactional version or not as needed.</p>