<p>We have a handler that performs as supposed to when it's received a message. There are several steps in the process and each consecutive one creates its own, new context, as shown below.</p>  <pre><code>public void Handle(SomeMessage message) {   ...   try   {     ...     using(DataContext context = new DataContext()) { ... }     ...     using(DataContext context = new DataContext()) { ... }     ...   }   catch (Exception exception)   {      ...     using(DataContext context = new DataContext()) { ... }     ...   } } </code></pre>  <p>However, on occasion, an exception is thrown and caught in it. The current transaction is rolled back (and since it's not implemented by me explicitly, I'm assuming, without being utterly certain, that it's done by the NServiceBus itself because all the results written to the DB disappear, including those in the <em>catch</em> statement).</p>  <p>At the moment, I'm resolving it by writing to a file when something terrible happens but I'd love to have that stored in the DB as well.</p>  <p>So, ultimately, I'd like to prevent that the last operation, the one in <em>catch</em> statement, is rolled back. Can one do that and if so how?</p>