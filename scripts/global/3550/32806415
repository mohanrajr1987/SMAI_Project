<p>A java project I'm working on has all of its tests running against an in memory implementation of repositories interfaces. These in memory implementations are nothing but plain ArrayLists that re-use common functionality such as add, remove, findById... etc. </p>  <p>One of our use cases that we have is a unit of work which means that several operations have to be executed in an atomic manner. Our production code works just fine by demarcating the transaction using spring @Transactional annotation on the appropriate service method but this doesn't work with our tests.</p>  <p>Given that I can easily implement a rollback method for the in memory repositories, is there any way I can have an ACID transaction against my ArrayList repositories preferably without changing my production code? Spring @Transactional seems to support JTA transactional resources, can an ArrayList become a transactional resource?</p>