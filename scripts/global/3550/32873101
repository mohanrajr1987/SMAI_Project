<p>I'm about to start a new project in financial area, where global and distributed transaction are currently rule the world, however in reactive world where things are done in different threads and actors asynchronously classic approach won't work. Here is an example. Let's say we have IBM MQ consumer receiving messages, this guy reside in separate actor. Also we transfer each message to another actor which does some business logic or simply store it in other transactional datasource like Oracle DB. Now in case of disaster or exception in business logic i need to roll back the MQ transaction and so message will be polled again after recovery. How transactional data sources are handled in reactive world? I'm looking in STM and seems it solves the problem, the only thing is that i have to explicitly handle exceptions (through supervising in akka) and rollback transaction in case of any. However i can see violation of reactive way of doing things, the MQ consumer actor MUST WAIT (block?!) until exception or success confirmation received from another actor (business logic or other transactional datasource) and commit or rollback MQ transaction. Is it correct understanding or i'm missing something? Thanks.</p>