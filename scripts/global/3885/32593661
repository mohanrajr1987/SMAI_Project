<p>I am currently developing an Eclipse-RCP application that stores per-project preferences using the <strong>EclipsePreference</strong> mechanism through <strong>ProjectScope</strong>. At first this seemed to work very well, but we have run into trouble when (read-) accessing these preferences in multithreaded scenarios while at the same time changes are being made to the workspace. What appears to be praticularly problematic is accessing such a preference node (<code>ProjectScope.getNode()</code>) while the project is being deleted by an asynchronous user action (right click on Project -> Delete Project). In such cases we get a pretty mix of </p>  <ul> <li><code>org.osgi.service.prefs.BackingStoreException</code></li> <li><code>java.io.FileNotFoundException</code></li> <li><code>org.eclipse.core.runtime.CoreException</code></li> </ul>  <p>Essentially they all complain that the underlying file is no longer there.</p>  <p>Initial attempts to <em>fix</em> this using checks like <code>IProject.exists()</code> or <code>isAccessible()</code> and even going so far as checking the presence of the actual .prefs file were as futile as expected: They only make the exceptions less likely but do not really prevent them.</p>  <p>So my question is: How are you supposed to safely access things like <code>ProjectScope.getNode()</code>? Do you need to go so far to put every read into a <code>WorkspaceJob</code> or is there some other, clever way to prevent the above problems like putting the read access in <code>Display.asyncExec()</code>?</p>  <p>Although I tried, I did not really find answers to the above question in the Eclipse documentation.</p>