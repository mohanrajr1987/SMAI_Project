<p>I have an application which runs in several local instances and synchronise their data with a national application. I want to secure the communication between these apps.</p>  <p>I use express to build my servers. I thought of two possible solutions:</p>  <h2>A) Calculate a token before each request</h2>  <ol> <li>Calculate the token (e.g. some logic with a timestamp, and a long personal key)</li> <li>Send this token + the timestamp</li> <li>Calculate backwards and check if the token is correct</li> </ol>  <p>This looks a bit like the solution I'm thinking of: <a href="https://github.com/dselmanovic/bearerjs" rel="nofollow">https://github.com/dselmanovic/bearerjs</a></p>  <h2>B) Using Bearer Tokens with Passport</h2>  <p><a href="https://github.com/jaredhanson/passport-http-bearer" rel="nofollow">https://github.com/jaredhanson/passport-http-bearer</a> In the example they use a fixed token for every user.</p>  <h2>Question 1:</h2>  <p>Which solution is better for my cause (or is there another one which is even better), actually I don't really like to bake my "own" solutions for security things, but as far as I noticed are bearer tokens pretty static and seem to have some flaws too: <a href="http://hueniverse.com/2010/09/29/oauth-bearer-tokens-are-a-terrible-idea/" rel="nofollow">http://hueniverse.com/2010/09/29/oauth-bearer-tokens-are-a-terrible-idea/</a> (I didn't quite understand the article, so I dind't read the whole thing)</p>  <h2>Question 2:</h2>  <p>What is the advantage of sending the token instead of just sending the username and the password, as far as I got this, the whole thing is only secure if the transmission is not readable for s.b. outside.</p>  <p>So far I defined a passport strategy:</p>  <pre><code>  passport.use(new BearerStrategy(    (token, done) -&gt;      User.findOne({ token: token }, (err, user) -&gt;       return done(err) if err?       return done(null, false) if (!user)       return done(null, user, { scope: 'all' })     )   )) </code></pre>  <p>A function where I pipe through my request</p>  <pre><code>bearerAuth = (req, res, next) -&gt;   passport.authenticate 'bearer', { session: false }, (req, res) -&gt;     next() </code></pre>  <p>An api route in the national register</p>  <pre><code>  app.delete('/api/delete/:refId', bearerAuth, cleanParams, (req, res) -&gt; </code></pre>  <p>How I emit the delete method from a local register</p>  <pre><code>emitDelete = (url, object, callback) -&gt;   #console.log 'url', url   request     .del url, { 'auth':       {         'bearer': getMyToken()       }     }     .on('response', (res) -&gt;      ... </code></pre>  <h2>Question 3:</h2>  <p>It seems like in the passport strategy example there are fixed tokens for each user. How to generate them safely?</p>  <p>I currently use this:</p>  <pre><code>userSchema = mongoose.Schema({   ...   token: {     type: String,     required: true,     default: uuid.v4()   }, </code></pre>  <p>which generates a token like this: <code>f5f47a0a-a98b-48d9-bfe2-533bdfa411bc</code></p>