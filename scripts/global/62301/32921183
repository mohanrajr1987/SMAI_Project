<p>I have tried to look through all the similar questions but none of them fully answers my problem.</p>  <p>I am trying to use rottentomatoes api to retrieve a list of movies corresponding to a general title search and display for each of them their directors.</p>  <p>Now, the directors must be fetched through a separate json (the one corresponding to the film itself) therefore I have to do a <code>http.request</code> to obtain the list of movies and then, for each of them, make another <code>http.request</code> to fetch the corresponding director.</p>  <p>The problem is when I try to loop inside the first <code>res.on('end' , function(){..})</code>, so that for each movie retrieved I can do another <code>http.request</code>. I know that all the requests are asynchronous but this shouldn't be a problem, instead, the director of the first film gets attached to the json object containing the director of the same first film and when I try to parse this object I get an error</p>  <pre><code>undefined:1 .rottentomatoes.com/api/public/v1.0/movies/770687943/similar.json"}}{"id":9272                                                                     ^ </code></pre>  <p>Since two json responses get attached to themselves, they are not json anymore, thus the error.</p>  <p>It's as if the first iteration of the loop (the one to fetch the directors) gets executed twice. It shouldn't be a problem of favicon etc.,  I think.</p>  <p>I have found by trial and error that THIS way of looping works:</p>  <pre><code>function httpGetMovies(response) { var fullRequestQueryMovie = partialQueryMovie + apiKeyMovie + '&amp;' + queryTermMovie + '&amp;page_limit=2'+'&amp;_prettyprint=true'; console.log('Calling -&gt; ' + fullRequestQueryMovie);  var headersMovie = {         'Content-Type': 'application/json' };   var optionsMovie = {         host: hostMovie,         path: fullRequestQueryMovie,         method: 'GET',         headers: headersMovie };  var jsonStringResponseMovie = '';  var req = http.request(optionsMovie, function(res) {     console.log("statusCode: ", res.statusCode);     console.log("headers: ", res.headers);      res.on('data', function(piece) {         jsonStringResponseMovie += piece;         //console.log("-----------------\n"+jsonStringResponseMovie);     });      var i=0;     res.on('end', function addDirector() {          var jsonObj = JSON.parse(jsonStringResponseMovie);          var moviesBag = [];              console.log("film n°: "+i+" of "+jsonObj.movies.length+" "+jsonObj.movies[i].title);   //              /-----begin nested http.request--------             var singleMovieDirectors = [];              var fullRequestSingleMovie = jsonObj.movies[i].links.self + '?apikey=' + apiKeyMovie ;              var headersSingleMovie = {                     'Content-Type': 'application/json'             };              var optionsSingleMovie = {                     host: hostMovie,                     path: fullRequestSingleMovie,                     method: 'GET',                     headers: headersSingleMovie             };              var jsonStringResponseSingleMovie = '';              var req2 = http.request(optionsSingleMovie, function(res2) {                 console.log("request for "+optionsSingleMovie.path); //                  console.log("statusCode: ", res.statusCode); //                  console.log("headers: ", res.headers);                  res2.on('data', function(piece2) {                     jsonStringResponseSingleMovie += piece2;                 });                  res2.on('end', function() {                      var jsonObjSingleMovie = JSON.parse(jsonStringResponseSingleMovie);                     console.log("directors &gt; "+JSON.stringify(jsonObjSingleMovie.abridged_directors));                     // response.send(blabla);                  if (i++ &lt; jsonObj.movies.length-1){                     addDirector()                 }                     else{                         console.log ("finished adding directors");                     }                  });             });              req2.end();              req2.on('error', function(e) {                 console.error(e);             });  //              -------end of nested http.request-----------------         });  });  req.end();  req.on('error', function(e) {     console.error(e); });   }; </code></pre>  <p>You can see that there is a <code>i=0</code> before the <code>res.on('end')</code> of the main <code>http.request</code>, and inside there is the nested request with a check and and increment of i at its end, if there are any movies left, I'll call again the callback function but with <code>i++</code> , thus shifting to the next movie. Note that this call <code>#movies</code> times the callback function</p>  <p>THIS WAY, instead, DOESN'T WORK and I DON'T KNOW WHY</p>  <pre><code>function httpGetMovies(response) {  var fullRequestQueryMovie = partialQueryMovie + apiKeyMovie + '&amp;' + queryTermMovie + '&amp;page_limit=2'+'&amp;_prettyprint=true'; console.log('Calling -&gt; ' + fullRequestQueryMovie);  var headersMovie = {         'Content-Type': 'application/json' };   var optionsMovie = {         host: hostMovie,         path: fullRequestQueryMovie,         method: 'GET',         headers: headersMovie };  var jsonStringResponseMovie = '';  var req = http.request(optionsMovie, function(res) {     console.log("statusCode: ", res.statusCode);     console.log("headers: ", res.headers);      res.on('data', function(piece) {         jsonStringResponseMovie += piece;         //console.log("-----------------\n"+jsonStringResponseMovie);     });       res.on('end', function () {          var jsonObj = JSON.parse(jsonStringResponseMovie);          var moviesBag = [];          for(i = 0; i&lt;sonObj.movies.length-1; i++){              console.log("film n°: "+i+" of "+jsonObj.movies.length+" "+jsonObj.movies[i].title);   //              /-----begin nested http.request--------             var singleMovieDirectors = [];              var fullRequestSingleMovie = jsonObj.movies[i].links.self + '?apikey=' + apiKeyMovie ;              var headersSingleMovie = {                     'Content-Type': 'application/json'             };              var optionsSingleMovie = {                     host: hostMovie,                     path: fullRequestSingleMovie,                     method: 'GET',                     headers: headersSingleMovie             };              var jsonStringResponseSingleMovie = '';              var req2 = http.request(optionsSingleMovie, function(res2) {                 console.log("request for "+optionsSingleMovie.path); //                  console.log("statusCode: ", res.statusCode); //                  console.log("headers: ", res.headers);                  res2.on('data', function(piece2) {                     jsonStringResponseSingleMovie += piece2;                 });                  res2.on('end', function() {                      var jsonObjSingleMovie = JSON.parse(jsonStringResponseSingleMovie);                     console.log("directors &gt; "+JSON.stringify(jsonObjSingleMovie.abridged_directors));                     // response.send(blabla);                    });             });              req2.end();              req2.on('error', function(e) {                 console.error(e);             });  //              -------end of nested http.request-----------------          } // end of for loop       });  });  req.end();  req.on('error', function(e) {     console.error(e); });   }; </code></pre>  <p>What's the problem, you may ask, if you have already found out the solution? First, I want to share, because it was suggested by a friend of mine and iIhonestly would have never thought of looping on the callback function itself. Second, I don't know why my option doesn't work. Where is the problem?</p>  <p>sorry for the long post, i tried to explain everything. and if it's a repost, feel free to point me out the way to heaven.</p>  <p>Max.</p>