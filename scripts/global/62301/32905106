<p>I'm writing app in MEAN. I'm using layer Monk for interact with MongoDb. GET data from database is working, but POST,UPDATE and DELETE no.. There is 404 (Not found) error. - "DELETE <a href="http://localhost:8080/usercollection/5606a7aef1772da33e58301a" rel="nofollow">http://localhost:8080/usercollection/5606a7aef1772da33e58301a</a> 404 (Not Found)" Like.. As if I did not have access to data base...(Only Read but not Write). In Monk options i have root username and also password for root (So Posting should be working) What am i doing wrong? Maybe in server.js is something defined wrong.. Help! </p>  <p>My code: <strong>server.js</strong></p>  <pre><code>// modules ================================================= var express        = require('express'); var app            = express(); var logger = require('morgan');// log requests to the console (express4) var bodyParser     = require('body-parser'); var methodOverride = require('method-override'); var session = require('express-session'); app.engine('html', require('ejs').renderFile); app.set('view engine', 'html'); var mongo = require('mongodb'); var monk = require('monk'); var options = { db: { native_parser: true }, user: 'root', pass: '****', pwd: '****' }; var db = monk('localhost:27017/app', options); var Users = db.get('usercollection'); app.get('/usercollection', function (req, res) { Users.find({}, function (err, docs) {      if (err == null) {         res.json(docs);      } else {         console.log(err);      }   }); }); app.delete('usercollection/:id',function(req,res){ Users.delete({}, function (err, docs) { if (err == null) {     res.json(docs); } else {     console.log(err); } }); }); var port = process.env.PORT || 8080; // set our port // mongoose.connect(db.url); // connect to our mongoDB database         (commented out after you enter in your own credentials)  // get all data/stuff of the body (POST) parameters app.use(logger('dev'));   app.use(bodyParser.json());  app.use(bodyParser.json({ type: 'application/vnd.api+json' }));  app.use(bodyParser.urlencoded({ extended: true }));   app.use(methodOverride('X-HTTP-Method-Override')); // override with the     X-HTTP-Method-Override header in the request. simulate DELETE/PUT app.use(express.static(__dirname + '/public'));    // routes ================================================== require('./app/routes')(app); // pass our application into our routes    app.get('/', function(req, res) { fs.readFile(__dirname + '/public/index.html', 'utf8', function(err,     text){     res.send(text); }); });    // start app =============================================== app.listen(port); console.log('Localhost started at ' + port);             console.log(); exports = module.exports = app;              </code></pre>  <p><strong>MainCtrl:</strong></p>  <pre><code>$http.get('/usercollection')     .success(function(data) {         $scope.todos = data;         console.log(data);     })     .error(function(data) {         console.log('Error: ' + data);     });    $scope.deleteUser = function(user){     $http.delete('/usercollection/' + user._id)         .success(function(response, status, headers, config){             var index = $scope.usercollection.indexOf(user);             $scope.usercollection.splice(index,1);         })         .error(function(response, status, headers, config){             $scope.error_message = response.error_message;         }); };  $scope.data = {     username: 'test',     email: 'test@beng.pl' }; $scope.updateStudent = function(user){     $http.post('/usercollection'+user._id)         .success(function(status,data){             data = $scope.data;             console.log(status);         })         .error(function(response, status,data, headers, config){             $scope.error_message = response.error_message;             console.log(status);         }); }; $scope.createStudent = function(){     $http.post('/usercollection')         .success(function(data){             $scope.usercollection.push($scope.data);         })         .catch(function(data, status, headers, config){               data.statusText; //contains the error message         }); }; </code></pre>