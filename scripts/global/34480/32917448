<p>I have a graph using NEO4j and currently trying to build a simple recommendation system that is better than text based search.</p>  <p>Nodes are created such as: Album, People, Type, Chart </p>  <p>Relationship are created such as: </p>  <p><code>People - [:role] -&gt; Album</code> where roles are: Artist, Producer, Songwriter</p>  <p><code>Album-[:is_a_type_of]-&gt;Type</code> (type is basically Pop, Rock, Disco...)</p>  <p><code>People -[:POPULAR_ON]-&gt;Chart</code> (Chart is which Billboard they might have been)</p>  <p><code>People -[:SIMILAR_TO]-&gt;People</code> (Predetermined similarity connection)</p>  <p>I have written the following cypher:</p>  <pre><code>    MATCH (a:Album { id: { id } })-[:is_a_type_of]-&gt;(t)&lt;-[:is_a_type_of]-(recommend)         WITH recommend, t, a     MATCH (recommend)&lt;-[:ARTIST_OF]-(p)     OPTIONAL MATCH (p)-[:POPULAR_ON]-&gt;()     RETURN recommend, count(DISTINCT t) AS type     ORDER BY type DESC     LIMIT 25; </code></pre>  <p>It works however, it easily repeats itself if it has only one type of music connected to it, therefore has the same neighbors.</p>  <p>Is there a suggested way to say:</p>  <ul> <li>Find me the next best album that has the most similar connected relationships to the starting Album from.</li> <li>Any Recommendation for a tie breaker scenario? Right now it is order by type (so if an album has more than one type of music it is valued more but if everyone has the same number, there is no more significant)</li> <li>-I made the [:SIMILAR_TO] link to enforce a priority to consider that relationship as important, but I haven't had a working cypher with it</li> <li>-Same goes for [:Popular_On] (Maybe Drop this relationship?)</li> </ul>