<p><strong>Summary:</strong>  With <code>SDN4</code>, I'm persisting 10 objects of which half have the same content only the id's to which they are linked differ. The linking ID's are set as <code>@Transient</code>. Still, two objects are created with the same content instead of one with two links to it. How can I avoid this behavior?</p>  <p><strong>Detail:</strong> We have two domain objects defined and the information sources via CSV, they look as follows:</p>  <p>Domain object A CSV:</p>  <pre><code>key,name 1,test1 3,test3 </code></pre>  <p>POJO A:</p>  <pre><code>@Transient private int key;     private String name;  @Relationship(type = "HAS_CERTIFICATION", direction = "OUTGOING") private Set&lt;B&gt; bObject = new HashSet&lt;&gt;();  public void setName(String name) {     this.name = name; }  @Relationship(type = "HAS_CERTIFICATION", direction = "OUTGOING") public void hasCertification(B b) {     bObject.add(b);     b.getA().add(this); } </code></pre>  <p>Domain object B:</p>  <pre><code>foreignKey,name,value 1,ISO9001,TRUE 1,ISO14001,TRUE 3,ISO9001,TRUE 3,ISO14001,TRUE </code></pre>  <p>POJO B:</p>  <pre><code>@Transient private int foreignKey; private String name; private String value;  @Relationship(type = "HAS_CERTIFICATION", direction = "INCOMING") private Set&lt;A&gt; a = new HashSet&lt;&gt;();  public void setName(String name) {     this.name = name; }  public void setValue(String value) {     this.value = value; }  @Relationship(type = "HAS_CERTIFICATION", direction = "INCOMING") public Set&lt;A&gt; getA() {     return a; } </code></pre>  <p>These CSV files are parsed and loaded into SDN4 within their respective POJO's (A and B). </p>  <p>Now we loop over these objects and add the relationships:</p>  <pre><code>private void aHasCertification(         Optional&lt;List&lt;B&gt;&gt; b,         Optional&lt;List&lt;A&gt;&gt; a) {     for (A aObj : a()) {         for (B bObj : b()) {             if(bObj.getForeignKey() == aObj.getKey()) {                 aObj.hasCertification(bObj);             }         }     } } </code></pre>  <p>Then the root repository, repositoryA, is used to save the loaded objects. <code>repositoryA.save(domainObjectA);</code></p>  <p>Now when I query the database; <code>match n return n;</code> </p>  <p>for each of the A objects there will be two <code>ISO9001</code> and two <code>ISO14001</code> objects. Instead of what I would expect, one of each with two links to <code>A:1</code> and <code>A:3</code>.</p>