<h2>What I am trying to do</h2>  <p>After running the command <code>(export PORT=3000 &amp;&amp; node server.js)</code> my node.js app (<a href="https://github.com/benweet/stackedit" rel="nofollow">StackEdit</a>) is served at: <code>http://example.com:3000/</code>.</p>  <p>The command <code>(export PORT=80 &amp;&amp; node server.js)</code> wouldn't work considering that Apache already uses port 80 on the server.</p>  <p>As I am new to Node.js, an easy way to make the node.js app available at <code>http://example.com/</code> (i.e. port 80) would be to set up Apache as a reverse proxy.</p>  <h2>Here's what I've tried</h2>  <p>In <code>/etc/apache2/sites-available/example.com.conf</code></p>  <p><strong>Trial (1):</strong></p>  <pre><code>&lt;VirtualHost *:80&gt;     ServerName example.com     DocumentRoot /var/www/example.com/public     ErrorLog /var/www/example.com/logs/error.log     CustomLog /var/www/editor.aahanblog.com/logs/access.log combined      ProxyPass / http://example.com:3000/     ProxyPassReverse / http://example.com:3000/ &lt;/VirtualHost&gt; </code></pre>  <p>This simply shows the directory listing for the <code>public</code> directory. So, in this case the requests aren't reaching the node.js app.</p>  <p><strong>Trial (2):</strong></p>  <pre><code>&lt;VirtualHost *:80&gt;     ServerName example.com     ServerAlias *.example.com     DocumentRoot /var/www/example.com/public     ErrorLog /var/www/example.com/logs/error.log     CustomLog /var/www/example.com/logs/access.log combined      ProxyRequests off      &lt;Proxy *&gt;         Order deny,allow         Allow from all     &lt;/Proxy&gt;      &lt;Location /var/www/example.com/public&gt;         ProxyPass http://mydomain:3000/         ProxyPassReverse http://mydomain:3000/     &lt;/Location&gt; &lt;/VirtualHost&gt; </code></pre>  <p>This doesn't work either. It takes me to some default apache page.</p>  <p>What I am missing here?</p>