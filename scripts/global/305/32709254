<p>I am having a difficult time figuring out how to correctly add two IEEE floating point numbers using Java. I'm not sure how to proceed in actually adding the mantissas together because I don't get how to write a method to add numbers such as: 1.110 + 0.00111 (base 2) for example.</p>  <p>I am using <a href="http://www.cs.umd.edu/class/sum2003/cmsc311/Notes/BinMath/addFloat.html" rel="nofollow">http://www.cs.umd.edu/class/sum2003/cmsc311/Notes/BinMath/addFloat.html</a> as a resource but I just can't seem to put it into code. I need to add these two floating point numbers, put them back into IEEE 32 bit rep, and then put that into Hex.</p>  <p>In other words my project is to take two hexadecimal numbers, convert them into the 32 IEEE representation, add them together, then put that back into hexadecimal.</p>  <p>Below is my IEEE class, and I converted to scientific notation, but no matter what I see that I have to add the two floating point numbers together and I just can't figure out how to do so! Please help with method creation or the actual code for doing such a thing based on the code I have written so far. Thank you!</p>  <p>Just to show, here is what is entered and the output right now for.  0x41000000 + 0x42000000 </p>  <pre><code>41000000 // just to make sure I get the write binary 42000000 0 10000010 00000000000000000000000 // IEEE form 1.0 x 2^3 // to scientific notation 1.0 x 2^5 001.0 // adding the amount of zeros depending on how many places i shifted    the exponent. I have yet to move the decimal. 1.0 </code></pre>  <p>Here is my IEEEDecimal Class:</p>  <pre><code>public class IEEEDecimal{ private String binaryRep; private String sign; private String exponent; private String mantissa;  //SCIENTIFIC NOTATION private String digitTerm = ""; private int exVal = 0; private String scientificNotation = ""; // private static final String EXPLICIT_ONE = "1"; private static final int BIASED_EXPONENT = 127;  public IEEEDecimal(Binary b){   this.binaryRep = b.getBinary();    //SIGN   this.sign = Character.toString((binaryRep.charAt(0)));   //EXPONENT   this.exponent = binaryRep.substring(1,9);   //MANTISSA   this.mantissa = binaryRep.substring(9,32); } public void toScientific(){  int baseTenVal = 0; //GETTING THE DIGIT TERM for(int i = binaryRep.length() - 1; i &gt;= 9; i--){   if(binaryRep.charAt(i) == '1'){     digitTerm = "1." + binaryRep.substring(9,i + 1);     break;   } } if(digitTerm.equals("")){   digitTerm = "1.0";  } //GETTING THE EXPONENT int indexCounter = 0; for(int i = 8; i &gt;= 1; i--){   if(binaryRep.charAt(i) == '1'){     baseTenVal += Math.pow(2,indexCounter);   }   if(indexCounter &lt; 7){     indexCounter++;   } } this.exVal = baseTenVal - BIASED_EXPONENT; //CREATION OF SCIENTIFIC NOTATION STRING this.scientificNotation = this.digitTerm + " x " + "2^" + this.exVal; } public void add(IEEEDecimal y){ String temporaryMantissa = ""; int nShift = 0; //amount to be shifted to be normalized //FIGURE OUT WHICH HAS THE BIGGER EXPONENT AND NORMALIZE THE SMALLER ONE if(y.exVal &gt; this.exVal){   nShift = (y.exVal - this.exVal);   y.exVal += nShift; } else{   nShift = (this.exVal - y.exVal);   y.exVal += nShift; } //SHIFT RADIX POINT OVER BY nShift for(int i = 0; i &lt; nShift; i++){   y.digitTerm = "0" + y.digitTerm; }  System.out.println(y.digitTerm); System.out.println(this.digitTerm);  //REMOVE THE DECIMAL POINTS  } static String[] lookupTable = { "0+0+0=00", "0+0+1=01", "0+1+0=01",  "0+1+1=10", "1+0+0=01", "1+0+1=10", "1+1+0=10", "1+1+1=11", }; static String lookup(char b1, char b2, char c) { String formula = String.format("%c+%c+%c=", b1, b2, c); for (String s : lookupTable) {   if (s.startsWith(formula)) {     return s.substring(s.indexOf("=") + 1);   } } throw new IllegalArgumentException(); } static String zeroPad(String s, int length) { while (s.length() &lt; length) {   s = "0" + s; } return s; }    static String add(String s1, String s2) { int length = Math.max(s1.length(), s2.length()); s1 = zeroPad(s1, length); s2 = zeroPad(s2, length); String result = ""; char carry = '0'; for (int i = length - 1; i &gt;= 0; i--) {   String columnResult = lookup(s1.charAt(i), s2.charAt(i), carry);   result = columnResult.charAt(1) + result;   carry = columnResult.charAt(0); } if (carry == '1') {   result = carry + result; } return result; } public String getSign(){ return this.sign;  } public String getExponent(){ return this.exponent; } public String getMantissa(){ return this.mantissa; } public String getDigitTerm(){ return this.digitTerm;  } public int getExVal(){ return this.exVal;  } public void printSN(){ System.out.println(this.scientificNotation); } </code></pre>  <p>}</p>