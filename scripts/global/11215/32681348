<p>Basically, I'm pushing a user generated event onto an SDL event queue. In doing this, I push the address of an integer onto a void pointer which is the data1 parameter of SDL_PushEvent().</p>  <p>Later, I attempt to dereference the void pointer in the event fetched from the queue. When I do so, however, the value I'm supposed to get(1002) is nowhere near the value I actually do get: 140733847900856.</p>  <p>I was originally converting from a void pointer to an integer pointer. Alas, I'm on a 64-bit architecture, so I had to use size_t. But I'm not entirely familiar with size_t usage, so I'm probably doing something wrong.</p>  <p>Here's the code snippets, from two different source files:</p>  <p>from "splash.cpp":</p>  <pre><code>  if(elapsed &gt;= 13000 &amp;&amp; !(flag)){     std::cerr &lt;&lt; "13 seconds elapsed.\n";      // Create and push a CHANGE_GAME_MODE event to the queue.     SDL_Event tmp;     size_t data1 = MAIN_MENU_MODE;      tmp.type=SDL_USEREVENT;     tmp.user.code= CHANGE_GAME_MODE;     tmp.user.data1 = &amp;data1;     tmp.user.data2 = NULL; // Not used.      std::cerr &lt;&lt; "Value of data1 before SDL_PushEvent():"               &lt;&lt; *((size_t*)(tmp.user.data1)) &lt;&lt; "\n";      SDL_PushEvent(&amp;tmp);     flag = true;   } </code></pre>  <p>from events.cpp:</p>  <pre><code>  case SDL_USEREVENT:     std::cerr &lt;&lt; "\nUser event detected: " &lt;&lt; *((size_t*)(event-&gt;user.data1)) &lt;&lt; "\n";     user_event(event-&gt;user.type, event-&gt;user.code, event-&gt;user.data1, event-&gt;user.data2);     break; </code></pre>  <p>Here are the results from cerr when I actually run the program:</p>  <pre><code>sysadm@druid: ./kolodruidtale  ALSA lib pcm.c:7843:(snd_pcm_recover) underrun occurred 13 seconds elapsed. Value of data1 before SDL_PushEvent():1002  User event detected: 140688563309902 ALSA lib pcm.c:7843:(snd_pcm_recover) underrun occurred </code></pre>  <p>(Note: I'm aware of what is causing the buffer underrun, and how to fix it. I want to get this dereferencing issue fixed first, though, so no worries. :D)</p>  <p>Thank you for your time.</p>