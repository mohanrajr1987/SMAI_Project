<p>I have a JavaFX TableColumn. The column has a <code>ComboBoxTableCell</code> populated by ObservableList I pass to it.</p>  <p>I have an "active" list and a "deactive" list for the combobox. After a selection is made, I wish to remove the selected item from the active, "real", list (and add it to the deactivated items list).</p>  <p>After a selection has been made, a <code>CellEditEvent</code> is being fired and sets up the row object by the selected one (from the combobox). The thing is, when I remove the select item from the list, in the event handler, my <code>CellEditEvent</code> event handler got fired again - this time with a wrong "new value"!</p>  <p>Of course this behavior breaks my flow logic completely.</p>  <p>Any ideas about how to solve this situation? Thank you</p>  <p>An SSCCE of the situation:</p>  <pre><code>package tableviewexample;  import javafx.application.Application; import javafx.beans.binding.Bindings; import javafx.beans.property.*; import javafx.beans.value.ObservableValue; import javafx.collections.*; import javafx.event.*; import javafx.scene.Scene; import javafx.scene.control.*; import javafx.scene.control.cell.*; import javafx.scene.layout.StackPane; import javafx.stage.Stage; import javafx.util.Callback; import javafx.util.StringConverter;  public class TableViewExample extends Application {      @Override     public void start(Stage primaryStage) {         TableView&lt;MappingItem&gt; table = new TableView&lt;&gt;();          // FIRST COLUMN         TableColumn&lt;MappingItem, String&gt; colA = new TableColumn&lt;&gt;("Excel Column");                  colA.setCellValueFactory(new Callback&lt;TableColumn.CellDataFeatures&lt;MappingItem, String&gt;, ObservableValue&lt;String&gt;&gt; () {             @Override             public ObservableValue&lt;String&gt; call(TableColumn.CellDataFeatures&lt;MappingItem, String&gt; param) {                 return new ReadOnlyObjectWrapper(param.getValue().getExcelColumnName());             }                     });             //SECOND COLUMN         TableColumn&lt;MappingItem, GoldplusField&gt; colB = new TableColumn&lt;&gt;("Database Field Column");         colB.setCellValueFactory(new Callback&lt;TableColumn.CellDataFeatures&lt;MappingItem, GoldplusField&gt;, ObservableValue&lt;GoldplusField&gt;&gt; () {             @Override             public ObservableValue&lt;GoldplusField&gt; call(TableColumn.CellDataFeatures&lt;MappingItem, GoldplusField&gt; param) {                 return new ReadOnlyObjectWrapper(param.getValue().getGpField());             }                     });          GoldplusField gp1 = new GoldplusField("T1", "fName", "First Name");         GoldplusField gp2 = new GoldplusField("T1", "phn", "Phone");         GoldplusField gp3 = new GoldplusField("T2", "lName", "Last Name");         GoldplusField gp4 = new GoldplusField("T2", "adrs", "Address");                  ObservableList&lt;GoldplusField&gt; deactiveFieldsList = FXCollections.observableArrayList();         ObservableList&lt;GoldplusField&gt; activeFieldsList = FXCollections.observableArrayList(gp1, gp2, gp3, gp4);         colB.setCellFactory(ComboBoxTableCell.forTableColumn(new FieldToStringConvertor(), activeFieldsList));            colB.setOnEditCommit(             new EventHandler&lt;TableColumn.CellEditEvent&lt;MappingItem, GoldplusField&gt;&gt;() {                 @Override                 public void handle(TableColumn.CellEditEvent&lt;MappingItem, GoldplusField&gt; t) {                     if (t.getNewValue() != null) {                          deactiveFieldsList.add(t.getNewValue());                          ((MappingItem) t.getTableView().getItems().get(                         t.getTablePosition().getRow())                         ).setGpField(t.getNewValue());                          // ******************************************************************************************** //                         // This creates a new instance of the EventHandler in which I get the "next" item on the List.                         // ******************************************************************************************** //                         activeFieldsList.remove(t.getNewValue());                        }                 }             }         );           //THIRD COLUMN         TableColumn&lt;MappingItem, String&gt; colC = new TableColumn&lt;&gt;("Test Column");         PropertyValueFactory&lt;MappingItem, String&gt; nameFac = new PropertyValueFactory&lt;&gt;("name");         colC.setCellValueFactory(nameFac);         colC.setCellFactory(TextFieldTableCell.forTableColumn());                  table.setEditable(true);         table.getColumns().addAll(colA, colB, colC);          GoldplusField gp5 = new GoldplusField("T1", "other", "Other");         MappingItem mi1 = new MappingItem("name", gp5);         mi1.excelColumnName.set("name1");         MappingItem mi2 = new MappingItem("phone", gp5);         mi2.excelColumnName.set("nam2");         ObservableList&lt;MappingItem&gt; miList = FXCollections.observableArrayList(mi1, mi2);          table.setItems(miList);          StackPane root = new StackPane();         root.getChildren().add(table);          Scene scene = new Scene(root, 300, 250);          primaryStage.setTitle("Hello World!");         primaryStage.setScene(scene);         primaryStage.show();     }      /**      * @param args the command line arguments      */     public static void main(String[] args) {         launch(args);     }      class FieldToStringConvertor extends StringConverter&lt;GoldplusField&gt; {          @Override         public String toString(GoldplusField object) {              if (object != null)                 return object.getGpName();             else                 return "";         }          @Override         public GoldplusField fromString(String string) {             throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.         }             }      public class MappingItem {         private StringProperty excelColumnName = new SimpleStringProperty(this, "excelColumnName");         private ObjectProperty&lt;GoldplusField&gt; gpField = new SimpleObjectProperty&lt;GoldplusField&gt;(this, "gpField");          public String getExcelColumnName() { return excelColumnName.get(); }          public void setExcelColumnName(String excelColumnName) { this.excelColumnName.set(excelColumnName); }          public StringProperty excelColumnNameProperty() { return excelColumnName;        }          public GoldplusField getGpField() { return gpField.get(); }          public void setGpField(GoldplusField gpField) { this.gpField.set(gpField); }          public ObjectProperty gpFieldProperty() { return this.gpField;        }          public MappingItem(String columnName) { this.excelColumnName.set(columnName); }              public MappingItem(GoldplusField gpField) { this.gpField.set(gpField); }              public MappingItem(String columnName, GoldplusField gpField) {              this.excelColumnName.set(columnName);             this.gpField.set(gpField);         }              }          public class GoldplusField {         private StringProperty table = new SimpleStringProperty(this, "table");         private StringProperty dbName = new SimpleStringProperty(this, "dbName");         private StringProperty gpName = new SimpleStringProperty(this, "gpName");          public String getDbName() { return dbName.get(); }          public String getGpName() { return gpName.get(); }          public String getTable() { return table.get(); }          public void setDbName(String dbName) { this.dbName.set(dbName); }          public void setGpName(String gpName) { this.gpName.set(gpName); }          public void setTable(String table) { this.table.set(table); }          public StringProperty tableProperty() { return this.table;        }          public StringProperty gpNameProperty() { return this.gpName;        }              public StringProperty dbNameProperty() { return this.dbName;        }          public GoldplusField(String table, String dbName, String gpName) {              this.dbName.set(dbName);             this.gpName.set(gpName);             this.table.set(table);         }     } } </code></pre>