<p>I have been looking all over the web at examples like this:</p>  <p><a href="https://msdn.microsoft.com/en-us/library/edzehd2t%28v=vs.110%29.aspx" rel="nofollow">https://msdn.microsoft.com/en-us/library/edzehd2t%28v=vs.110%29.aspx</a></p>  <p>and all over stackoverflow but I cannot get this to work or find the answer. Or the answer doesn't apply to what I am doing, or there is not enough information in the answer for me to understand how to make this work.</p>  <p>I'm trying to write good code here and avoid Application.DoEvents(). Take a look at the code.</p>  <pre><code>private void btnSendQ_Click(object sender, EventArgs e) {      //launch a thread from a button click event      Thread ManualQueryThread = new Thread(StartManualQueryThread_Thread);      ManualQueryThread.Priority = ThreadPriority.Normal;      ManualQueryThread.IsBackground = true;      Platform.Log(LogLevel.Debug, "Starting Manual Query Thread.");      Stats.g_CurrentStatus = "Starting Manual Query Thread.";      ManualQueryThread.Start();  }  private void StartManualQueryThread_Thread() {      try      {         //Here work is performed in the background thread populating objects with data.      }      catch (Exception e)      {           Platform.Log(LogLevel.Error, "Error in StartManualQueryThread(). The error is: " + e.ToString());      }      finally      {           //raise event here since the thread has completed           OnC_FindComplete(EventArgs.Empty);                          } }      public event EventHandler C_FindComplete;      protected virtual void OnC_FindComplete(EventArgs e)     {         //display the gathered information in a datagrid using DisplayC_FindResults(), and enable UI objects.         EventHandler handler = C_FindComplete;                 DisplayC_FindResults();         btnSendQ.Enabled = true;         btnMove.Enabled = true;     } </code></pre>  <p>The problem is when a release build is created the datagrid gets a null reference exception and does the red X thing because it is still being updated by a background thread. So how do I properly raise an event in a background thread, and process that event in the UI thread to interact with the UI?</p>