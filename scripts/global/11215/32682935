<p>I have a datagrid. I want to add Tab when row double click event is rised. When AddTab method is called Tab is added to ObservableCollection, but it doesn't show up on TabControl. Why it doesn't show up? Because there is a wrong DataContext when method called?</p>  <pre><code>      &lt;DataGrid  helpers:RowDoubleClickHandler.MethodName="AddTab" AutoGenerateColumns="False"          IsSynchronizedWithCurrentItem="True" CanUserResizeRows="True" x:Name="dataGrid1"          ItemsSource="{Binding DataGridEntries3}" HorizontalContentAlignment="Stretch"         VerticalContentAlignment="Stretch" IsReadOnly="True"&gt; </code></pre>  <p>AddTab method in ViewModel</p>  <pre><code> public void AddTab()     {         Tabs.Add(new TabEntry         {             Description = "Tab3",             DataGridEntries = new ObservableCollection&lt;DataGridEntry&gt;()             {                 new DataGridEntry()                 {                  }             }         }); </code></pre>  <p>XAML with TabControl</p>  <pre><code>&lt;Window x:Class="ProjectZero.MainWindow"      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"     xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"     xmlns:vm="clr-namespace:ProjectZero" Title="MainWindow" Height="350" Width="525" DataContext="{Binding RelativeSource={RelativeSource Self}}"&gt; &lt;Window.Resources&gt;     &lt;vm:MainViewModel x:Key="ViewModel"/&gt; &lt;/Window.Resources&gt; &lt;Grid&gt;     &lt;ToolBar Height="40" VerticalAlignment="Top"&gt;         &lt;Menu&gt;             &lt;MenuItem Header="Menu" Margin="6" Foreground="White" FontSize="14" FontFamily="Times New Roman"&gt;                 &lt;MenuItem Header="Add Invoice" Command="{Binding AddInvoice}"/&gt;                 &lt;MenuItem Header="Invoices List" Command="{Binding AddInvoiceList}" FontFamily="Tahoma" /&gt;             &lt;/MenuItem&gt;             &lt;Menu.Background&gt;                 &lt;SolidColorBrush /&gt;             &lt;/Menu.Background&gt;         &lt;/Menu&gt;         &lt;ToolBar.Background&gt;             &lt;LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5"&gt;                 &lt;GradientStop Color="Black" Offset="0" /&gt;                 &lt;GradientStop Color="#FF173ADE" Offset="0.431" /&gt;                 &lt;GradientStop Color="#FF0B1D6F" Offset="0.646" /&gt;             &lt;/LinearGradientBrush&gt;         &lt;/ToolBar.Background&gt;     &lt;/ToolBar&gt;     &lt;TabControl x:Name="tabControl1" SelectedItem="{Binding SelectedItem}" ItemsSource="{Binding Tabs}" ItemTemplate="{DynamicResource DataTemplateType1}" TabStripPlacement="Top" HorizontalAlignment="Stretch" Margin="10,46,0,0" VerticalAlignment="Stretch" Width="Auto"&gt;      &lt;/TabControl&gt; </code></pre>  <p></p>  <p>ViewModel for Tabs</p>  <pre><code>public class MainViewModel : BaseViewModel     {         public RelayCommand RelayCommand { get; set; }          public MainViewModel()         {             this.RelayCommand = new RelayCommand(this);              Tabs.CollectionChanged += (o, e) =&gt;             {                 if (e.Action == System.Collections.Specialized.NotifyCollectionChangedAction.Add)                 {                     foreach (BaseViewModel item in e.NewItems)                         if (item.MyType == "TabEntry")                             DataGridEntries3.Add(item as TabEntry);                 }             };              var t = (from i in Tabs where i.MyType == "TabEntry" select (TabEntry)i);             DataGridEntries3 = new ObservableCollection&lt;TabEntry&gt;(t);         }          private ObservableCollection&lt;BaseViewModel&gt; _tabs;          public ObservableCollection&lt;BaseViewModel&gt; Tabs         {             get { return _tabs != null ? _tabs : _tabs = new ObservableCollection&lt;BaseViewModel&gt;(); }             set { _tabs = value; OnPropertyChanged("Tabs"); }         }          BaseViewModel _SelectedItem;         public BaseViewModel SelectedItem         {             get { return _SelectedItem; }             set { _SelectedItem = value; OnPropertyChanged("SelectedItem"); }         }  private ObservableCollection&lt;TabEntry&gt; _DataGridEntries3;             public ObservableCollection&lt;TabEntry&gt; DataGridEntries3             {         get { return _DataGridEntries3 != null ? _DataGridEntries3 : _DataGridEntries3 = new ObservableCollection&lt;TabEntry&gt;(); }         set { _DataGridEntries3 = value; OnPropertyChanged("DataGridEntries3"); }     }          ICommand _AddInvoice = null;         ICommand _AddInvoiceList = null;          public ICommand AddInvoice         {             get             {                 return _AddInvoice != null ? _AddInvoice : _AddInvoice.SetCommand(param =&gt;                 {                     Tabs.Add(new TabEntry                     {                         Description = "Tab3",                         DataGridEntries = new ObservableCollection&lt;DataGridEntry&gt;()                 {                     new DataGridEntry()                     {                      }                 }                     });                 });             }         }          public ICommand AddInvoiceList         {             get             {                 return _AddInvoiceList != null ? _AddInvoiceList : _AddInvoiceList.SetCommand(param =&gt;                 {                     var tab_dc = Tabs.FirstOrDefault(it =&gt; it.GetType() == typeof(MainViewModel));                     if (tab_dc != null)                     {                         Tabs.Add(tab_dc);                     }                     else                     {                         var new_tab = new MainViewModel();                         Tabs.Add(new_tab);                     }                  });             }         }     } </code></pre>  <p>Also here is RowDoubleClick Event Handler</p>  <pre><code>public sealed class RowDoubleClickHandler : FrameworkElement     {         public RowDoubleClickHandler(DataGrid dataGrid)         {             MouseButtonEventHandler handler = (sender, args) =&gt;             {                 var row = sender as DataGridRow;                 if (row != null &amp;&amp; row.IsSelected)                 {                     var methodName = GetMethodName(dataGrid);                      var dataContextType = dataGrid.DataContext.GetType();                     var method = dataContextType.GetMethod(methodName);                     if (method == null)                     {                         throw new MissingMethodException(methodName);                     }                      method.Invoke(dataGrid.DataContext, null);                 }             };              dataGrid.LoadingRow += (s, e) =&gt;             {                 e.Row.MouseDoubleClick += handler;             };              dataGrid.UnloadingRow += (s, e) =&gt;             {                 e.Row.MouseDoubleClick -= handler;             };         }          public static string GetMethodName(DataGrid dataGrid)         {             return (string)dataGrid.GetValue(MethodNameProperty);         }          public static void SetMethodName(DataGrid dataGrid, string value)         {             dataGrid.SetValue(MethodNameProperty, value);         }          public static readonly DependencyProperty MethodNameProperty = DependencyProperty.RegisterAttached(             "MethodName",             typeof(string),             typeof(RowDoubleClickHandler),             new PropertyMetadata((o, e) =&gt;             {                 var dataGrid = o as DataGrid;                 if (dataGrid != null)                 {                     new RowDoubleClickHandler(dataGrid);                 }             }));     } </code></pre>