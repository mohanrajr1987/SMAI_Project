<p>Making progress with my board game, so on a mouse click, some tasks will be performed like playing some animations, receiving new panes for the board (I asked about this my last question, works great now), making changes to player data etc.</p>  <p>So, here is my EventHandler</p>  <pre><code>grid.setOnMouseReleased(new EventHandler&lt;MouseEvent&gt; () {     public void handle(MouseEvent me) {         //make changes to player data         //receive new panes for the board         //make some gui changes         //play some animations     } }); </code></pre>  <p>Here <code>grid</code> is a GridPane object, which contains other panes for each cell of the board, panes for animation etc.</p>  <p>One mouse event would take 2-3 seconds to be handled. While this is going on, I saw that another mouse click would also start being handled parallel with the one already ongoing.</p>  <p>What I want is that another mouse event should not be processed until the first one has been completed. It would be better if, any clicks if received would be discarded.</p>  <p>I tried to use threading:</p>  <pre><code>grid.setOnMouseReleased(new EventHandler&lt;MouseEvent&gt; () {     public void handle(MouseEvent me) {         Thread t = new Thread(new Runnable() {             public void run() {                 //completing the necessary tasks here             }         });         t.start();         t.join();     } }); </code></pre>  <p>But GUI changes would not occur if I use threading (don't know why, I tested it in many different ways, always failed to make GUI changes), so this would not work I guess.</p>  <p>So what could I do to not take in any mouse clicks while one mouse event is being handled? I think this question doesn't require more code, but if necessary, I would edit and add some code.</p>  <p>EDIT:</p>  <pre><code>class Animations {     public Pane getAnimationPane() {         //returns Pane which would be used for transition     }      public void playAnimation() {         //called only when the timeline transition is to be played     } } </code></pre>  <p>So I made an array of the Animations class because I need a lot of such panes and need to keep a track of each one of them.</p>  <p>When I need to play the animation, I call the <code>playAnimation()</code> method.</p>  <p>Now this <code>playAnimation()</code> method is like an animation-inception.</p>  <p>After an animation on this pane is completed, changes are made to the board according to the player's progress, and if required... this <code>playAnimation()</code> method would call the <code>playAnimation()</code> method of several other Animation objects.</p>  <pre><code>grid.setOnMouseReleased(new EventHandler&lt;MouseEvent&gt; () {     public void handle(MouseEvent me) {         //make changes to player data         //receive new panes for the board         //make some gui changes         //play some animations         someAnimationObject.playAnimation();     } }); </code></pre>  <p>This could go as deep as 10-20 (more, if the grid size is large) other Animation objects being used for their <code>playAnimation()</code>.</p>  <p>EDIT 2:</p>  <p>The <code>playAnimation()</code> of <code>Animations</code> could call <code>playAnimation()</code> on 0-8 other Animations objects. And this could keep on going.</p>