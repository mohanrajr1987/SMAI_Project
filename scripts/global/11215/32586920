<p>In VB.Net, buttons can be given an Access Key based on their text.  For example "&amp;Open" will make a button click when the user presses Alt+O.</p>  <p>However the Alt key isn't required, which is a problem for me.  If the user presses "O", I don't want the Open button to click.</p>  <p>Based on <a href="http://stackoverflow.com/questions/8444012/access-key-getting-selected-even-we-did-not-press-alt-key-in-wpf">this question</a>, it appears I can use the AccessKeyPressedEvent, but I'm not having any luck.</p>  <p>This is my code, in a simple test app with two buttons titled "&amp;AClick" and "&amp;BClick"</p>  <pre><code>Public Sub New()     InitializeComponent()     EventManager.RegisterClassHandler(GetType(UIElement), AccessKeyManager.AccessKeyPressedEvent, New AccessKeyPressedEventHandler(AddressOf CustOnAccessKeyPressed)) End Sub  Sub CustOnAccessKeyPressed(ByVal sender As Object, ByVal e As AccessKeyPressedEventArgs)     MessageBox.Show("AccessKeyPressed") End Sub </code></pre>  <p>I never see the messagebox or hit a breakpoint on CustOnAccessKeyPressed.</p>  <p>My scenario is a VB.Net 4.0 application with hundreds of screens.  I have a central location where I can add event handlers to the buttons or the form itself as it opens.  I do not want to change the existing Click events on each screen.</p>  <hr>  <p><strong>Edit:</strong> Same (lack of) results in a C#.Net Windows Forms app:</p>  <pre><code>    public Form1()     {         InitializeComponent();         EventManager.RegisterClassHandler(typeof(UIElement), AccessKeyManager.AccessKeyPressedEvent, new AccessKeyPressedEventHandler(OnAccessKeyPressed));     }      private static void OnAccessKeyPressed(object sender, AccessKeyPressedEventArgs e)     {         MessageBox.Show("OnAccessKeyPressed");           } </code></pre>