<p>Since I have started learning C#, I have seen a few ways to handle events. Say I have a XAML button like this:</p>  <pre><code>&lt;Button x:Name="button" Content="Click me!"/&gt; </code></pre>  <p>Given this button, I have can hook up a click event in several ways:</p>  <ol> <li><p>Modify the <code>Click</code> property of the button to point to a method in the code behind like:</p>  <pre><code>&lt;Button x:Name="button" Content="Click me!" Click="button_Click"/&gt; </code></pre>  <p>And then add that <code>button_Click</code> method to the code:</p>  <pre><code>private void button_Click(object sender, RoutedEventArgs e) {     button.Content = "Ow &gt;_&lt;"; } </code></pre></li> <li><p>Handle the event through a delegate in the code behind:</p>  <pre><code>button.Click += delegate  {     button.Content = "Ow &gt;_&lt;"; }; </code></pre></li> <li><p>Handle the event through a lambda expression in the code behind:</p>  <pre><code>button.Click += (object sender, RoutedEventArgs e) =&gt; {     button.Content = "Ow &gt;_&lt;"; }; </code></pre></li> </ol>  <p>Given these three methods, I have a couple of questions:</p>  <ul> <li>What is the fundamental difference between these methods.</li> <li>Are there any cases in which one method <em>should</em> be used instead of another. I have seen type 1 used mainly in WPF and WinRT application, but the other two I have only really seen when using Xamarin.</li> </ul>