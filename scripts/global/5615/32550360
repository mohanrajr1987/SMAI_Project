<p>I'm trying out Guice as a lightweight alternative to Spring DI for a personal project.  I have the following code:</p>  <pre><code>@WebListener public class ApplicationInitializer extends GuiceServletContextListener {      private static Logger log = LoggerFactory.getLogger(ApplicationInitializer.class);      @Override     protected Injector getInjector() {         log.info("Setting up Guice");         Injector injector = Guice.createInjector(new ServletModule(){              @Override             protected void configureServlets() {                 serve("*.html").with(DefaultServlet.class);                 log.info("Configured servlets");             }         });         return injector;     } } </code></pre>  <p>And then the following servlet:</p>  <pre><code>@Singleton public class DefaultServlet extends HttpServlet {      private static Logger log = LoggerFactory.getLogger(DefaultServlet.class);      @Override     public void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {         log.info("Got to servlet");         req.getRequestDispatcher("/WEB-INF/jsp/index.jsp").forward(req, resp);     } } </code></pre>  <p>I see the two log lines in the first code snippet in my logs, but I can't get the servlet to respond.  I'm not sure if I'm missing config, but I can't find an example with any more significant code than this...</p>  <p>What URL would you expect to work?  I've configured this to run in Jetty with the root application context path, so I'd expect the following to work:</p>  <p><a href="http://localhost:8080/index.html" rel="nofollow">http://localhost:8080/index.html</a></p>  <p>All I can get is a 404.  I never see the log line in the servlet.</p>  <p><strong>Update</strong>: this code works if I embed a Jetty server and start it in main().  What is so different about running it in a servlet container?</p>