<p>I implemented example explained in this <a href="https://angelozerr.wordpress.com/2011/07/23/websockets_jetty_step1/#more-4750" rel="nofollow">link</a>. But I rewrite it in scala. But I am getting <strong>java.lang.NoClassDefFoundError: org/eclipse/jetty/io/nio/AsyncConnection</strong> error.</p>  <p>Here is my <strong>RoomWebSocketHandler</strong> class:</p>  <pre><code>import java.io.IOException import javax.servlet.http.HttpServletRequest  import org.eclipse.jetty.websocket.WebSocket.Connection import org.eclipse.jetty.websocket.{WebSocket, WebSocketHandler}  import scala.collection.mutable  class RoomWebSocketHandler extends WebSocketHandler {    private val webSockets = new mutable.ArrayBuffer[StateWebSocket]()    override def doWebSocketConnect(request: HttpServletRequest, protocol: String): WebSocket = {     new StateWebSocket()   }    private class StateWebSocket extends WebSocket.OnTextMessage {      var connection: Connection = _      def onOpen(connection: Connection) {       this.connection = connection       webSockets += this     }      def onMessage(data: String) {       try {          for (webSocket &lt;- webSockets) {           webSocket.connection.sendMessage(data)         }       } catch {         case x: IOException =&gt; this.connection.close()       }     }      def onClose(closeCode: Int, message: String) {       webSockets -= this     }    }  } </code></pre>  <p>and this is my <strong>Main class</strong>:</p>  <pre><code>import java.net.InetSocketAddress  import grizzled.slf4j.Logger import org.eclipse.jetty.server.{Handler, Server} import org.eclipse.jetty.server.handler.{DefaultHandler, HandlerList, ResourceHandler} import org.eclipse.jetty.servlet.ServletContextHandler  object Main {    var jettyServer: Option[Server] = None    def startServer(): Unit = {     val LOCAL_PORT = 4041     logger.debug("startServer begin")     jettyServer match {       case Some(s) =&gt;         logger.info("Server is already running")         logger.debug("startServer end")         return       case None =&gt;         logger.info("Server is not running")     }     val server = new Server(new InetSocketAddress("127.0.0.1", LOCAL_PORT))     server.setStopAtShutdown(true)      val handlers = new HandlerList()      val roomWebSocketHandler = new RoomWebSocketHandler();     roomWebSocketHandler.setHandler(new DefaultHandler());      handlers.setHandlers(Array[Handler](roomWebSocketHandler, new DefaultHandler()))      server.setHandler(handlers)     logger.debug("Starting jetty-server")     jettyServer = Some(server)     server.start()     logger.info("Server started on port: " + LOCAL_PORT)     logger.debug("startServer end")   }    def main(args: Array[String]): Unit = {      startServer()   } } </code></pre>  <p>and here is my dependencies:</p>  <pre><code>dependencies {     compile 'org.slf4j:slf4j-api:1.7.12'     compile 'ch.qos.logback:logback-classic:1.1.3'     compile 'com.h2database:h2:1.4.188'     compile 'org.clapper:grizzled-slf4j_2.11:1.0.2'     compile 'org.eclipse.jetty:jetty-webapp:9.3.3.v20150827'     compile 'org.eclipse.jetty:jetty-websocket:8.1.17.v20150415'     compile 'org.eclipse.jetty:jetty-http:8.1.17.v20150415'     compile 'org.eclipse.jetty:jetty-io:8.1.17.v20150415'     compile 'org.eclipse.jetty:jetty-util:8.1.17.v20150415'     compile 'org.eclipse.jetty:jetty-continuation:8.1.17.v20150415'     compile 'org.eclipse.jetty:jetty-server:8.1.17.v20150415'     compile 'org.eclipse.jetty:jetty-jmx:8.1.17.v20150415'     compile 'commons-cli:commons-cli:1.3.1'     compile 'org.scala-lang:scala-library:2.11.7'     runtime 'javax.servlet:javax.servlet-api:3.1.0'     testCompile 'org.scalacheck:scalacheck_2.11:1.12.4' } </code></pre>  <p>Error:</p>  <pre><code>Exception in thread "main" java.lang.NoClassDefFoundError: org/eclipse/jetty/io/nio/AsyncConnection     at java.lang.ClassLoader.defineClass1(Native Method)     at java.lang.ClassLoader.defineClass(ClassLoader.java:760)     at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)     at java.net.URLClassLoader.defineClass(URLClassLoader.java:467)     at java.net.URLClassLoader.access$100(URLClassLoader.java:73)     at java.net.URLClassLoader$1.run(URLClassLoader.java:368)     at java.net.URLClassLoader$1.run(URLClassLoader.java:362)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findClass(URLClassLoader.java:361)     at java.lang.ClassLoader.loadClass(ClassLoader.java:424)     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)     at java.lang.ClassLoader.loadClass(ClassLoader.java:357)     at java.lang.ClassLoader.defineClass1(Native Method)     at java.lang.ClassLoader.defineClass(ClassLoader.java:760)     at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)     at java.net.URLClassLoader.defineClass(URLClassLoader.java:467)     at java.net.URLClassLoader.access$100(URLClassLoader.java:73)     at java.net.URLClassLoader$1.run(URLClassLoader.java:368)     at java.net.URLClassLoader$1.run(URLClassLoader.java:362)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findClass(URLClassLoader.java:361)     at java.lang.ClassLoader.loadClass(ClassLoader.java:424)     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)     at java.lang.ClassLoader.loadClass(ClassLoader.java:357)     at org.eclipse.jetty.websocket.WebSocketHandler.&lt;init&gt;(WebSocketHandler.java:32)     at mypackage.RoomWebSocketHandler.&lt;init&gt;(RoomStateWebSocketHandler.scala:15)     at mypackage.Main$.startServer(Main.scala:48)     at mypackage.Main$.main(Main.scala:109)     at mypackage.Main.main(Main.scala) Caused by: java.lang.ClassNotFoundException: org.eclipse.jetty.io.nio.AsyncConnection     at java.net.URLClassLoader.findClass(URLClassLoader.java:381)     at java.lang.ClassLoader.loadClass(ClassLoader.java:424)     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)     at java.lang.ClassLoader.loadClass(ClassLoader.java:357)     ... 29 more </code></pre>