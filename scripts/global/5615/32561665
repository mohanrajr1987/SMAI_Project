<h2>TL;DR</h2>  <p>I'm trying to find out if an included servlet should be able to change the headers of the response. I know<sup>1</sup> that the included servlet cannot change the headers of the response using the <code>HttpServletResponse</code> object passed in its <code>service</code>. But it is inconsistent how different servlet containers behave if trying to change headers using the <em>original</em> response.</p>  <h2>Background</h2>  <p>To me, this is relevant because I'm debugging an issue in a system using a <a href="https://github.com/alkacon/opencms-core/tree/build_9_5_2" rel="nofollow" title="OpenCms 9.5.2">CMS</a> that apparently does exactly that: its core servlet stores the original response in the request scope (for some complex caching and templating purposes), and in the included resource (jsp) it restores the original response and tries to set the header content type to fit its needs.</p>  <p>Notice that at the time of setting the <code>contentType</code>, the response has not yet been commited<sup>2</sup> (in fact, no writing activity has taken place).</p>  <p>Also notice that I could also workaround this issue setting some <a href="https://github.com/alkacon/opencms-core/issues/341" rel="nofollow" title="OpenCms core: document stream and bypass">undocumented property</a>, but in this case, I would be giving up its caching functionality.</p>  <p>The problem arises if I add a certain Filter to the servlet filter chain: Tomcat uses reflection to calculate where it has to insert a <code>ServletResponseWrapper</code> (specifically, an <code>ApplicationHttpResponse</code>) in the (possibly chained) implicit response object. For instance, <a href="https://github.com/javamelody/javamelody/issues/494" rel="nofollow" title="JavaMelody breaks compatibility in servlets under Tomcat that exercise response.set/add* methods">JavaMelody</a> (a monitoring filter) happens to wrap the original response in one of the objects against which Tomcat compares to, breaking the (dubiously-correct implemented) existing functionality. </p>  <h2>Tests</h2>  <p>To find a practical answer and set some basis for potential new issues, I have written <a href="https://github.com/gallardo/SO/tree/SO-32561665" rel="nofollow" title="github.com/gallardo/SO test repo">some tests</a> and run them under WildFly Full 9.0.1.Final, Apache Tomcat/6.0.29, Apache Tomcat/7.0.47, and Jetty-9.3.3.v20150827. Tomcat seems the only one to allow this kind of "response hijacking".</p>  <p>The relevant code:</p>    <pre><code>// TopServlet (extends HttpServlet) protected void processRequest(...) throws Exception {      // Wrapp to avoid Tomcat inserting the ApplicationHttpResponse      // in front of the top level response     ServletResponse wRes = new HttpServletResponseWrapper(response);      // Store the top level response to allow for changing headers later on     request.setAttribute(TOPLEVEL_RES, response);      // Include in a wrapped response, to not alter the top level response     getServletContext().getRequestDispatcher("included").include(request, wRes); } </code></pre>    <pre><code>// IncludedServlet (extends HttpServlet) protected void processRequest(...) throws Exception {      // Always ignored (OK)     response.setContentType("html/csv;charset=UTF-8");     response.addHeader("Content-Disposition", "attachment; filename=t.csv;");      // XXX: This should affect the web server output, but current     // behaviour depends on HttpServletResponse implementation!     HttpServletResponse topResponse =       (HttpServletResponse) request.getAttribute(TopServlet.TOPLEVEL_RES);     topResponse.setContentType("html/csv;charset=UTF-8");     topResponse.addHeader("Content-Disposition", "attachment; filename=t.csv;");      // Should generate some values for a csv file     try (PrintWriter out = response.getWriter()) {         out.println("top11,top12,top13\n"                 + "top21,top22,top23");     } } </code></pre>  <hr>  <h3>Notes</h3>  <p><sup>1</sup> According to the <a href="http://download.oracle.com/otn-pub/jcp/servlet-3.0-fr-oth-JSpec/servlet-3_0-final-spec.pdf" rel="nofollow" title="Java&#40;TM&#41; Servlet Specification Version 3.0">specs (Chapter 9.3)</a>,</p>  <blockquote>   <p>The target servlet of the <code>include</code> method has access to all aspects of the request object, but its use of the response object is more limited. </p>      <p>[...]  It cannot set headers or call any method that affects the headers of the response[...]. Any attempt to set the headers must be ignored [...]</p> </blockquote>  <p><sup>2</sup> As mentioned in <a href="http://stackoverflow.com/questions/3842519/servlet-include-swallows-http-headers-in-tomcat#comment52910280_3842742" title="Servlet include swallows HTTP headers in Tomcat - comments">a comment</a> to an answer to "Servlet include swallows HTTP headers in Tomcat", and to no surprise, the fact that the answer has been committed plays a role</p>