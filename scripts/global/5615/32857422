<p>I have two maven sub-projects - jetty_runner1 and jetty_runner2</p>  <p>My directory structure looks like the following:</p>  <pre><code>./jetty_runner1/pom.xml ./jetty_runner1/src/main/java/com/jetty_runner1/CheckPersistence.java ./jetty_runner1/src/main/java/com/jetty_runner1/HelloWorldServlet.java ./jetty_runner1/src/main/java/com/jetty_runner1/MiscKeyValue.java ./jetty_runner1/src/main/java/com/jetty_runner1/MiscKeyValueManager.java ./jetty_runner1/src/main/resources/META-INF/persistence.xml ./jetty_runner1/src/main/webapp/WEB-INF/web.xml   ./jetty_runner2/pom.xml ./jetty_runner2/src/main/java/com/jetty_runner2/CheckPersistence.java ./jetty_runner2/src/main/java/com/jetty_runner2/HelloWorldServlet.java ./jetty_runner2/src/main/resources/META-INF/persistence.xml ./jetty_runner2/src/main/webapp/WEB-INF/web.xml   ./pom.xml </code></pre>  <p>CheckPersistence.java, HelloWorldServlet.java, persistence.xml and web.xml are exactly the same in the two projects, except for package names (I have created this simplified example for posting here. In the actual application, the two sub-projects do wildly different things)</p>  <p>Here are the actual file contents:</p>  <p><strong>CheckPersistence.java</strong></p>  <pre><code>public class CheckPersistence {     public void beginUpdation()     {         String val = null;         List&lt;MiscKeyValue&gt; keyValues = MiscKeyValueManager.get().selectStar();         if (keyValues != null &amp;&amp; keyValues.size() == 1)             val = keyValues.get(0).getStringValue();         if (val == null)             val = "Hello World";          MiscKeyValue keyValue = new MiscKeyValue();         keyValue.setStringKey("modifiedDate");         keyValue.setStringValue(val);         MiscKeyValueManager.get().put(keyValue);     } } </code></pre>  <p><strong>HelloWorldServlet.java</strong></p>  <pre><code>public class HelloWorldServlet extends HttpServlet {     @Override     protected void doGet(HttpServletRequest request, HttpServletResponse response)     {         new CheckPersistence().beginUpdation();     } } </code></pre>  <p><strong>MiscKeyValue.java</strong></p>  <pre><code>import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.Id;  @Entity (name="Misc_Key_Value") public class MiscKeyValue {     @Id     @Column(name="Misc_Key_Value_id")     private String id;      @Column(name="string_key")     private String stringKey;      @Column(name="string_value")     private String stringValue;      public String getId()     {         return id;     }     public void setId(String id)     {         this.id = id;     }     public String getStringKey()     {         return stringKey;     }     public void setStringKey(String stringKey)     {         this.stringKey = stringKey;     }     public String getStringValue()     {         return stringValue;     }     public void setStringValue(String stringValue)     {         this.stringValue = stringValue;     } } </code></pre>  <p><strong>MiscKeyValueManager.java</strong></p>  <pre><code>import java.util.List; import java.util.UUID; import javax.persistence.EntityManager; import javax.persistence.EntityManagerFactory; import javax.persistence.EntityTransaction; import javax.persistence.Persistence; import com.mysema.query.jpa.impl.JPAQuery;  public class MiscKeyValueManager {     private static MiscKeyValueManager INSTANCE = new MiscKeyValueManager();     protected EntityManagerFactory emf;     public static QMiscKeyValue qmiscKeyValue = QMiscKeyValue.miscKeyValue;      private MiscKeyValueManager()     {         this.emf = Persistence.createEntityManagerFactory("world");     }      public static MiscKeyValueManager get()     {         return INSTANCE;     }      public List&lt;MiscKeyValue&gt; selectStar()     {         EntityManager em = emf.createEntityManager();         EntityTransaction tx = em.getTransaction();         tx.begin();         JPAQuery query = new JPAQuery(em);         List&lt;MiscKeyValue&gt; results = query.from(qmiscKeyValue)                 .fetchAll().list(qmiscKeyValue);         tx.commit();         em.close();         return results;     }      public MiscKeyValue put(MiscKeyValue e)     {         EntityManager em = emf.createEntityManager();         EntityTransaction tx = em.getTransaction();         tx.begin();         if (e.getId() == null)         {             e.setId(UUID.randomUUID().toString());         }         MiscKeyValue mergedE = em.merge(e);         em.flush();         tx.commit();         em.clear();         em.close();         return mergedE;     } } </code></pre>  <p><strong>persistence.xml</strong></p>  <pre><code>&lt;persistence xmlns="http://java.sun.com/xml/ns/persistence"         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"         xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"         version="2.0"&gt;     &lt;persistence-unit name="world"&gt;       &lt;provider&gt;org.hibernate.jpa.HibernatePersistenceProvider&lt;/provider&gt;       &lt;properties&gt;         &lt;property name="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect" /&gt;         &lt;property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/world"/&gt;         &lt;property name="javax.persistence.jdbc.user" value="root"/&gt;         &lt;property name="javax.persistence.jdbc.password" value="password"/&gt;         &lt;property name="hibernate.format_sql" value="true"/&gt;       &lt;/properties&gt;     &lt;/persistence-unit&gt; &lt;/persistence&gt; </code></pre>  <p><strong>web.xml</strong></p>  <pre><code>&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt; &lt;web-app     xmlns="http://java.sun.com/xml/ns/javaee"     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"     version="2.5"    metadata-complete="true"&gt;   &lt;servlet&gt;     &lt;servlet-name&gt;Hello&lt;/servlet-name&gt;     &lt;servlet-class&gt;com.jetty_runner1.HelloWorldServlet&lt;/servlet-class&gt;   &lt;/servlet&gt;   &lt;servlet-mapping&gt;     &lt;servlet-name&gt;Hello&lt;/servlet-name&gt;     &lt;url-pattern&gt;/hello/*&lt;/url-pattern&gt;   &lt;/servlet-mapping&gt; &lt;/web-app&gt; </code></pre>  <p>Each pom.xml contains the QueryDSL and Jetty plugin too:</p>  <pre><code>&lt;build&gt;   &lt;plugins&gt;    &lt;plugin&gt;       &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;       &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;       &lt;version&gt;${jettyVersion}&lt;/version&gt;     &lt;/plugin&gt;     &lt;plugin&gt;       &lt;groupId&gt;com.mysema.maven&lt;/groupId&gt;       &lt;artifactId&gt;apt-maven-plugin&lt;/artifactId&gt;       &lt;version&gt;1.1.3&lt;/version&gt;       &lt;executions&gt;         &lt;execution&gt;           &lt;goals&gt;             &lt;goal&gt;process&lt;/goal&gt;           &lt;/goals&gt;           &lt;configuration&gt;             &lt;outputDirectory&gt;target/generated-sources/java&lt;/outputDirectory&gt;             &lt;processor&gt;com.mysema.query.apt.jpa.JPAAnnotationProcessor&lt;/processor&gt;           &lt;/configuration&gt;         &lt;/execution&gt;       &lt;/executions&gt;       &lt;dependencies&gt;         &lt;dependency&gt;           &lt;groupId&gt;com.mysema.querydsl&lt;/groupId&gt;           &lt;artifactId&gt;querydsl-apt&lt;/artifactId&gt;           &lt;version&gt;${querydsl.version}&lt;/version&gt;         &lt;/dependency&gt;       &lt;/dependencies&gt;     &lt;/plugin&gt;   &lt;/plugins&gt; &lt;/build&gt; </code></pre>  <p>When I run <strong>mvn jetty:run</strong> from jetty_runner1 and hit the URL localhost:8080/hello/ , everything works fine, in the sense query executes and updates.</p>  <p>When I run the same from jetty_runner2 and hit the same URL, it gives an exception saying:</p>  <p><strong>org.hibernate.hql.internal.ast.QuerySyntaxException: Misc_Key_Value is not mapped [select miscKeyValue from Misc_Key_Value miscKeyValue fetch all properties]</strong></p>  <pre><code>at org.hibernate.hql.internal.ast.QuerySyntaxException.generateQueryException(QuerySyntaxException.java:79) at org.hibernate.QueryException.wrapWithQueryString(QueryException.java:103) at org.hibernate.hql.internal.ast.QueryTranslatorImpl.doCompile(QueryTranslatorImpl.java:218) at org.hibernate.hql.internal.ast.QueryTranslatorImpl.compile(QueryTranslatorImpl.java:142) at org.hibernate.engine.query.spi.HQLQueryPlan.&lt;init&gt;(HQLQueryPlan.java:115) at org.hibernate.engine.query.spi.HQLQueryPlan.&lt;init&gt;(HQLQueryPlan.java:76) at org.hibernate.engine.query.spi.QueryPlanCache.getHQLQueryPlan(QueryPlanCache.java:150) at org.hibernate.internal.AbstractSessionImpl.getHQLQueryPlan(AbstractSessionImpl.java:298) at org.hibernate.internal.AbstractSessionImpl.createQuery(AbstractSessionImpl.java:236) at org.hibernate.internal.SessionImpl.createQuery(SessionImpl.java:1821) at org.hibernate.jpa.spi.AbstractEntityManagerImpl.createQuery(AbstractEntityManagerImpl.java:291) at com.mysema.query.jpa.impl.AbstractJPAQuery.createQuery(AbstractJPAQuery.java:129) at com.mysema.query.jpa.impl.AbstractJPAQuery.createQuery(AbstractJPAQuery.java:96) at com.mysema.query.jpa.impl.AbstractJPAQuery.list(AbstractJPAQuery.java:248) at com.jetty_runner1.MiscKeyValueManager.selectStar(MiscKeyValueManager.java:35) at com.jetty_runner2.CheckPersistence.beginUpdation(CheckPersistence.java:13) at com.jetty_runner2.HelloWorldServlet.doGet(HelloWorldServlet.java:16) </code></pre>