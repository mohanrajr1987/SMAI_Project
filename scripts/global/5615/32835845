<p>I have a Servlet-based application (OAuth implementation) which delegates some of the response rendering to JSP, as in the following example:</p>  <pre><code>private void doLoginPage( AuthorizationSession authzSession, String errorMsg, HttpServletRequest request, HttpServletResponse response ) throws OAuthSystemException {     try {         response.setHeader( HTTP.CONTENT_TYPE, ContentType.create( "text/html", "utf-8" ).toString() );         request.getRequestDispatcher( "/WEB-INF/OAuthLogin.jsp" ).include( request, response );     } catch ( Throwable e ) {         throw new OAuthSystemException( "Error generating login page", e );     } } </code></pre>  <p>Here's the JSP file (simplified):</p>  <pre><code>&lt;%@ page contentType="text/html;charset=UTF-8" language="java" session="false" %&gt;  &lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;  &lt;jsp:useBean id="errorMsg" scope="request" class="java.lang.String"/&gt;  &lt;html&gt; &lt;head&gt; &lt;title&gt;Sign In&lt;/title&gt; &lt;/head&gt; &lt;body style="text-align: center;"&gt; &lt;h1&gt;Sign In&lt;/h1&gt; &lt;div style="border: 1px black;"&gt;     &lt;c:if test="${!(empty errorMsg)}"&gt;         &lt;p style="color:red;"&gt;${errorMsg}&lt;/p&gt;     &lt;/c:if&gt;     &lt;form method="post" action="&lt;c:url value="/authorize"/&gt;"&gt;         &lt;div&gt;&lt;label for="email"&gt;Email:&lt;/label&gt;&lt;/div&gt;         &lt;div&gt;&lt;input type="text" name="email" id="email"/&gt;&lt;/div&gt;         &lt;div&gt;&lt;label for="password"&gt;Password:&lt;/label&gt;&lt;/div&gt;         &lt;div&gt;&lt;input type="password" name="password" id="password"/&gt;&lt;/div&gt;         &lt;div&gt;&lt;input type="submit" title="Sign In" /&gt;&lt;/div&gt;     &lt;/form&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; </code></pre>  <p>I've got my unit testing set up so that I can run server-based tests as unit tests, with injected mocks, using Jetty as an in-process server (OK, so it's not pure unit testing).</p>  <p>As part of my unit testing, I wrote a test to ensure that the page is being rendered when appropriate, and that it includes certain key properties (I'm using TestNG and Hamcrest):</p>  <pre><code>@Test public void testRequestGrantYieldsLoginPage() throws Exception {     HttpGet request = new HttpGet( String.format( "%s/authorize?client_id=%s&amp;redirect_uri=%s&amp;response_type=token",             serverConnector.getServerURL(),             "*******secret*****",             URLEncoder.encode( "*****secret*********", "UTF-8" )));      DefaultHttpClient httpClient = new SystemDefaultHttpClient();     HttpResponse response = httpClient.execute( request );      assertThat( response, is( notNullValue() ));     assertThat( response.getStatusLine().getStatusCode(), is( 200 ));     assertThat( response.getEntity().getContentType().toString(), containsString( "text/html" ));      String body = IOUtils.toString( response.getEntity().getContent() );      assertThat( body, allOf(             is( notNullValue()),             containsString( "value=\"gQwCAShitcuP-_2OY58lgw3YW0AfbLE8m62mrvXWvQbiDLJk9QnDTs7pc0HH\"" )     )); } </code></pre>  <p>This works fine when I run my unit tests from my IDE (IntelliJ), but when I run them under Maven's Surefire, this particular test fails: the server thread throws an exception as follows:</p>  <pre><code>org.apache.jasper.JasperException: The absolute uri: http://java.sun.com/jsp/jstl/core cannot be resolved in either web.xml or the jar files deployed with this application </code></pre>  <p>This of course causes the client side of the test to fail, since it gets back an error response instead of the expected login page.</p>  <p>So what's different between the two testing environments, and how can I make this test work in both?</p>