<p>My apologies if this has been asked and I've missed finding the answer, but I am trying to do a full text search of a CloudKit database where <strong>all</strong> of the search words match. My example below:</p>  <pre><code>var searchString = "almond salad" let predicate = NSPredicate(format: "self CONTAINS %@", searchString) let query = CKQuery(recordType: "Recipe", predicate: predicate) </code></pre>  <p>I'll omit all of the other code to set default cloud database, execute query, etc. It all compiles correctly, but what I want it to do is give me any records that contain "almond" and contain "salad" in the same record - ideally I would get Almond Salad recipes. With it the way it is, it will give records such as "almond cake" and "tomato salad" where only one of the words match (it will also give Almond Salad, but I want to get rid of the others). I guess I'm reading the CKQuery documentation incorrectly, because it seems to say that all tokens should match in one record, but it doesn't seem to be doing so. Help?</p>  <p>Edit: Here's my final solution based on Dave's answer.</p>  <pre><code>var searchString = "almond salad" var formatString = ""  let searchStringArray = searchString.componentsSeparatedByString(" ")  if searchString != "" { formatString = "self CONTAINS '\(searchStringArray[0])'"  if searchStringArray.count &gt; 1 { for var index = 1; index &lt; searchStringArray.count; ++index { formatString = formatString + " AND self CONTAINS '\(searchStringArray[index])'" } }  let predicate = NSPredicate(format: formatString) </code></pre>  <p>Edit 2: I was having issues with apostrophe's with the way I formatted it, so I switched (pun intended) my approach. Here's my actual final solution.</p>  <pre><code>var searchString = "momma's apple pie" let searchStringArray = searchString.componentsSeparatedByString(" ")  if searchString.isEmpty { let predicate = NSPredicate(value: true) }  else { switch (searchStringArray.count) {  case 1: predicate = NSPredicate(format: "self CONTAINS %@", searchStringArray[0])  case 2: predicate = NSPredicate(format: "self CONTAINS %@ AND self CONTAINS %@", searchStringArray[0], searchStringArray[1])  . . .  default: print("Limiting search to 5 terms") *copied and pasted case 5 predicate* </code></pre>  <p>Perhaps a bit brute force, but if anyone has a more elegant solution, I'm willing to hear it. Thanks again for the help!</p>