<p>I want to use the <code>IndexSearcher</code> of Lucene to calculate similarities between documents. To be exact I have one input document and want to calculate the similarity to all other documents in the index. I've already gotten the basic functionality, but now I have some questions for which I haven't found answers online.</p>  <ul> <li><strike>Why is the <code>IndexSearcher</code> only returning two results when I call <code>is.search(query, Integer.MAX_VALUE)</code>? I would have expected three results. </strike></li> <li>Are there some mistakes in my approach which I'm currently not seeing? </li> <li>How could I handle multiple languages? As far as I know the <code>IndexWriter</code> and the <code>QueryParser</code> should both have the same Analyzer (<code>StandardAnalyzer</code> in my example). Would I have to create three indices if I have three different languages?</li> </ul>  <p>The SSCCE (I'm using Lucene 5.3.0):</p>  <pre class="lang-java prettyprint-override"><code>public class Main {      public static void main(String[] args) throws Exception {         Path path = Paths.get("temp_directoty");          // create index         createIndexAndAddDocuments(path);          // open index reader and create index searcher         IndexReader ir = DirectoryReader.open(FSDirectory.open(path));         IndexSearcher is = new IndexSearcher(ir);         is.setSimilarity(new BM25Similarity());          // document which is used to create the query         Document doc = ir.document(1);          // create query parser         QueryParser queryParser = new QueryParser("Abstract", new StandardAnalyzer());          // create query         Query query = queryParser.parse(doc.get("Abstract"));          // search         for (ScoreDoc result : is.search(query, Integer.MAX_VALUE).scoreDocs) {             System.out.println(result.doc + "\t" + result.score);         }     }      private static void createIndexAndAddDocuments(Path indexPath) throws IOException {         // create documents         Document doc1 = new Document();         doc1.add(new TextField("Title", "Apparatus for manufacturing green bricks for the brick manufacturing industry",                 Store.YES));         doc1.add(new TextField("Abstract",                 "The invention relates to an apparatus (1) for manufacturing green bricks from clay for the brick manufacturing industry, comprising a circulating conveyor (3) carrying mould containers combined to mould container parts (4), a reservoir (5) for clay arranged above the mould containers, means for carrying clay out of the reservoir (5) into the mould containers, means (9) for pressing and trimming clay in the mould containers, means (11) for supplying and placing take-off plates for the green bricks (13) and means for discharging green bricks released from the mould containers, characterized in that the apparatus further comprises means (22) for moving the mould container parts (4) filled with green bricks such that a protruding edge is formed on at least one side of the green bricks",                 Store.YES));          Document doc2 = new Document();         doc2.add(new TextField("Title",                 "Some other title, for example: Apparatus for manufacturing green bricks for the brick manufacturing industry",                 Store.YES));         doc2.add(new TextField("Abstract",                 "Some other abstract, for example: The invention relates to an apparatus (1) for manufacturing green bricks from clay for the brick manufacturing industry, comprising a circulating conveyor (3) carrying mould containers combined to mould container parts (4), a reservoir (5) for clay arranged above the mould containers, means for carrying clay out of the reservoir (5) into the mould containers, means (9) for pressing and trimming clay in the mould containers, means (11) for supplying and placing take-off plates for the green bricks (13) and means for discharging green bricks released from the mould containers, characterized in that the apparatus further comprises means (22) for moving the mould container parts (4) filled with green bricks such that a protruding edge is formed on at least one side of the green bricks",                 Store.YES));          Document doc3 = new Document();         doc3.add(new TextField("Title", "A document with a competely different title", Store.YES));         doc3.add(new TextField("Abstract",                 "This document also has a completely different abstract which is in no way similar to the abstract of the previous documents.",                 Store.YES));          IndexWriter iw = new IndexWriter(FSDirectory.open(indexPath), new IndexWriterConfig(new StandardAnalyzer()));         iw.deleteAll();         iw.addDocument(doc1);         iw.addDocument(doc2);         iw.addDocument(doc3);         iw.close();     } } </code></pre>