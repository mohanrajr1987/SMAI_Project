<p>Now I have a char array with the mac address stored in:</p>  <pre><code>char mac_addr[6]; </code></pre>  <p>And I <code>sprintf</code> it into another char array:</p>  <pre><code>char cmdstr[64]; sprintf(cmdstr, "MAC: %2x:%2x:%2x:%2x:%2x:%2x;", mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5]); </code></pre>  <p>When I print <code>cmdstr</code>, it looks like this:</p>  <pre><code>MAC: 08:10:76:10:26:21; </code></pre>  <p>Then I send the <code>cmdstr</code> to a remote server, there is a parse function to parse this char array. After the <code>cmdstr</code> is parsed, the six parts separated by a <code>:</code> are stored in a multi char array:</p>  <pre><code>char mac[6][10]; </code></pre>  <p>With:</p>  <pre><code>char mac[0] = "08" char mac[1] = "10" char mac[2] = "76" char mac[3] = "10" char mac[4] = "26" char mac[5] = "21"    </code></pre>  <p>Now, on the server side, how can I re-convert each part of the mac address to char and make it possible that the whole mac address can be stored in a char array like this?</p>  <pre><code>char my_mac[6]; </code></pre>  <p>With:</p>  <pre><code>my_mac[0] = '08' my_mac[1] = '10' my_mac[2] = '76' my_mac[3] = '10' my_mac[4] = '26' my_mac[5] = '21' </code></pre>  <p>Many thanks!</p>  <h1>Edit:</h1>  <p>Sorry I think I described something wrongly, the text <code>'08'</code> itself should not stored in <code>my_mac[0]</code>. Actually when I gdb the program, I found that:</p>  <pre><code>(gdb) p mac_addr[0] $15 = 8 '\b' (gdb) p mac_addr[1] $16 = 16 '\020' (gdb) p mac_addr[2] $17 = 118 'v' (gdb) p mac_addr[3] $18 = 16 '\020' (gdb) p mac_addr[4] $19 = 38 '&amp;' (gdb) p mac_addr[5] $20 = 33 '!' </code></pre>  <p>I think I should convert the <code>mac[6][10]</code> to a char array just like above.</p>