<p>From my previous question: <a href="http://stackoverflow.com/questions/32797459/how-to-use-token-between-action-chains-properly">How to use token between action chains, properly?</a> , Now I know that inside my action#1 method, I have to generate a token name and value using <code>TokenHelper</code> programmatically and add them to <code>ActionContext.getContext().getParameters()</code> before chaining to my action#2. If I do, then <code>tokenSessionInterceptor</code> in action#2 will consume this token and does not return <code>invalid.token</code>.</p>  <p>My searchs say if I use <code>ActionContext.getContext().getParameters().put</code> then I'll get following exception:</p>  <blockquote>   <p>Cannot find message associated with key parameterMap.locked</p> </blockquote>  <p>So I searched for <code>ActionContext.setParameters</code> usage. I see Struts itself has used it in one of it's interceptors, <code>org.apache.struts2.interceptor.ActionMappingParametersInteceptor.addParametersToContext(ActionContext, Map)</code> as below:</p>  <pre><code>@Override protected void addParametersToContext(ActionContext ac, Map newParams) {     Map previousParams = ac.getParameters();     Map combinedParams;     if (previousParams != null) {         combinedParams = new TreeMap(previousParams);     } else {         combinedParams = new TreeMap();     }     combinedParams.putAll(newParams);      ac.setParameters(combinedParams); } </code></pre>  <p>Is it safe to do same in my own action method rather than an interceptor?! If no, what are alternatives?! Is it possible at all?! I really need to do this in my action chains because it's so hard to rewrite these actions to use <code>redirectAction</code> instead of <code>chain</code>.</p>