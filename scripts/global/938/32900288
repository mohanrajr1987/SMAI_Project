<p>I'm encountering an incredibly frustrating linker issue. I'm got two dynamic <code>.so</code> libraries, one which defines <code>gpr_log</code> (called <code>libgpr.so</code>) and another which uses it (called <code>libgrpc++.so</code>). </p>  <p>I'm attempting to link an executable like so:</p>  <pre><code>/usr/bin/c++ my_obj_file.o -o my_exec -rdynamic lib1.a lib2.so libgpr.so libgrpc++.so </code></pre>  <p>Outputs:</p>  <pre><code>/usr/bin/ld: libgrpc++.so: undefined reference to symbol `gpr_log` libgpr.so: error adding symbols: DSO missing from command line </code></pre>  <p>Here's the part where you want to jump in and tell me that <code>libgpr.so</code> needs to be provided after <code>libgrpc.so</code>. Naturally I anticipated this and swapped the order of the two parameters, only to encounter the same issue:</p>  <pre><code>/usr/bin/c++ my_obj_file.o -o my_exec -rdynamic lib1.a lib2.so libgrpc++.so libgpr.so </code></pre>  <p>I've passing in the dynamic library as required, why is it not seeing the symbols defined there? Also, I'm generating this compilation command using CMake, and this issue only seems to affect this one target. What gives?</p>