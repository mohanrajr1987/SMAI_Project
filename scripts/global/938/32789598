<p>In my C++ project, I'm compiling and linking against a library that makes use of OpenSSL.</p>  <p>I need to compile this project for my BeagleBone which has <code>openssl</code> installed by default. I have downloaded <code>libssl-dev</code> on my development machine.</p>  <p>Thus, I can compile the project fine if I'm compiling for my development machine on <code>x86_64</code>, but I am not able to successfully cross compile:</p>  <pre><code>/usr/lib/gcc-cross/arm-linux-gnueabihf/4.8/../../../../arm-linux-gnueabihf/bin/ld: cannot find -lssl /usr/lib/gcc-cross/arm-linux-gnueabihf/4.8/../../../../arm-linux-gnueabihf/bin/ld: cannot find -lcrypto </code></pre>  <p>This indicates I need to have <code>armhf</code> binaries for OpenSSL, which seems a bit of a waste really since I have them on my BeagleBone if it <em>can just be patient and wait until I deploy it</em>.</p>  <p>Is the only way around this cross-compiling OpenSSL myself? Where would I then need to install the <code>.so</code> files (I guess <code>make install</code> would be a bad idea?)</p>