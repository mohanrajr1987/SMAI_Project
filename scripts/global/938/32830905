<p>I'm trying to understand how C++/Clang deals with static members in templates. To that end I defined a <code>Singleton</code> as follows:</p>  <pre><code>template &lt;class T&gt; class Singleton { public:     static T* instance() {         if (!m_instance)             m_instance = new T;          return m_instance;     }  private:     static T* m_instance; };  template &lt;class T&gt; T* Singleton&lt;T&gt;::m_instance = nullptr; </code></pre>  <p>This appears to work just fine provided my application is compiled as a single executable. When I start using plugins, i.e. <code>dylib</code>s opened with <code>dlopen</code>, I get multiple instances of the <code>Singleton</code>.</p>  <p>Normally I compile my application with <code>-fvisiblity=hidden</code>. If remove that option, meaning I use <code>default</code> visibility, then the <code>Singleton</code>s behave properly. This led me to think I just need to export the symbol using <code>__attribute__((visibility=default))</code> but this doesn't work.</p>  <p>What is going here, and what would the solution be?</p>