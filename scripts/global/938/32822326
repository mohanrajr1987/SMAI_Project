<p>Hi Need help regarding the error android  java.lang.NoClassDefFoundError  in eclipse android ADT version 23.0.7 and java compiler 1.6 system OS Windows 7 64 bit. I have included the required jar files in libs folder and successfully added them to the build path and also check marked them under the order and export tab as mentioned on some of the Stackoverflow answers that I found ,but the problem still occurs and please do not mark this as duplicate as I have tried all the means suggested on stackoverflow but still no luck.I even downloaded the new ADT but still the same problem.So please suggest what could be the solution for this.</p>  <p>NOTE: "The same project runs fine on my colleagues ADT( his system and ADT configurations are all of same as mine as mentioned above)".</p>  <p>I have attached Android Manifest file, mainActivity Code, and Error log please go through it and someone please point out what mistake am I doing? Below are the links that I already tried:[this][1]and  [this][2] and many other answers </p>  <p>ThankYou</p>  <p>Manifest:</p>  <pre><code>&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"     package="com.zed.clubgamers"     android:versionCode="4"     android:versionName="1.6" &gt;      &lt;uses-sdk         android:minSdkVersion="10"         android:targetSdkVersion="21" /&gt;      &lt;uses-permission android:name="android.permission.INTERNET" /&gt;     &lt;uses-permission android:name="android.permission.READ_PHONE_STATE" /&gt;     &lt;uses-permission android:name="android.permission.GET_ACCOUNTS" /&gt;     &lt;uses-permission android:name="android.permission.WAKE_LOCK" /&gt;     &lt;uses-permission android:name="com.google.android.c2dm.permission.RECEIVE" /&gt;     &lt;uses-permission android:name="android.permission.ACCESS_DOWNLOAD_MANAGER" /&gt;     &lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" /&gt;      &lt;permission         android:name="com.zed.notion.clubgamers.permission.C2D_MESSAGE"         android:protectionLevel="signature" /&gt;      &lt;uses-permission android:name="com.zed.notion.clubgamers.permission.C2D_MESSAGE" /&gt;     &lt;uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" /&gt;     &lt;uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" /&gt;     &lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /&gt;     &lt;uses-permission android:name="android.permission.CHANGE_NETWORK_STATE" /&gt;     &lt;uses-permission android:name="android.permission.ACCESS_WIFI_STATE" /&gt;     &lt;uses-permission android:name="android.permission.CHANGE_WIFI_STATE" /&gt;      &lt;application         android:allowBackup="true"         android:hardwareAccelerated="true"         android:icon="@drawable/ic_launcher"         android:label="@string/app_name" &gt;          &lt;!-- Required for applications which use Google Play Services. --&gt;         &lt;meta-data             android:name="com.google.android.gms.version"             android:value="@integer/google_play_services_version" /&gt;          &lt;activity             android:name="com.zed.clubgamers.MainActivity"             android:excludeFromRecents="true"             android:label="@string/app_name"             android:launchMode="singleTask"             android:noHistory="true"             android:screenOrientation="portrait"             android:theme="@android:style/Theme.NoTitleBar" &gt;             &lt;intent-filter&gt;                 &lt;action android:name="android.intent.action.MAIN" /&gt;                  &lt;category android:name="android.intent.category.LAUNCHER" /&gt;             &lt;/intent-filter&gt;         &lt;/activity&gt;         &lt;activity             android:name="com.zed.clubgamers.URLLauncher"             android:excludeFromRecents="true"             android:label="@string/app_name"             android:launchMode="singleTask"             android:noHistory="true"             android:screenOrientation="portrait"             android:theme="@android:style/Theme.NoTitleBar" &gt;             &lt;intent-filter&gt;                 &lt;action android:name="android.intent.action.MAIN" /&gt;             &lt;/intent-filter&gt;         &lt;/activity&gt;          &lt;receiver             android:name="com.zed.clubgamers.receiver.NotionReceiver"             android:permission="com.google.android.c2dm.permission.SEND" &gt;             &lt;intent-filter&gt;                 &lt;action android:name="com.google.android.c2dm.intent.RECEIVE" /&gt;                  &lt;category android:name="com.zed.clubgamers" /&gt;             &lt;/intent-filter&gt;         &lt;/receiver&gt;     &lt;/application&gt;  &lt;/manifest&gt; </code></pre>  <p>Main Activity</p>  <pre><code>    package com.zed.clubgamers;  import java.io.BufferedReader; import java.io.InputStream; import java.io.InputStreamReader; import java.net.URL; import java.security.cert.CertificateException; import java.security.cert.X509Certificate; import java.util.ArrayList;  import javax.net.ssl.HttpsURLConnection; import javax.net.ssl.SSLContext; import javax.net.ssl.TrustManager; import javax.net.ssl.X509TrustManager;  import org.json.JSONObject;  import com.zed.clubgamers.R; import com.zed.notion.Notion; import com.zed.notion.BusinessObjects.Extra; import com.zed.notion.BusinessObjects.Extras;  import android.app.Activity; import android.app.AlertDialog; import android.app.ProgressDialog; import android.content.BroadcastReceiver; import android.content.Context; import android.content.DialogInterface; import android.content.Intent; import android.content.IntentFilter; import android.content.SharedPreferences; import android.content.SharedPreferences.Editor;   import android.net.ConnectivityManager; import android.net.NetworkInfo; import android.net.Uri; import android.os.AsyncTask; import android.os.Bundle; import android.text.TextUtils; import android.text.format.Time; import android.util.Log; import android.view.Gravity; import android.view.Window; import android.view.WindowManager; import android.widget.Toast;  public class MainActivity extends Activity {     public static final String PRJ_ID="260102650707";     //public static final String PREFID="NOTIONID";     private ProgressDialog pDialog;      // URL to get contacts JSON     private static String url = "https://csp.zed.com/api/Tools/GetUrlById/7"; //"http://api.androidhive.info/contacts/";      private Notion mNtoion;      boolean isConnected;     NetworkChangeReceiver ncr;       @Override     public void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         setContentView(R.layout.activity_main);         try{         mNtoion=new Notion(this, PRJ_ID);         }         catch(Exception ex)         {             Log.d("Error on notion creation", "Error on notion creation");         }         ncr= new NetworkChangeReceiver();         }      /**      * Async task class to get json by making HTTP call      * */     private class GetWebURL extends AsyncTask&lt;Void,Void, String&gt; {          @Override         protected void onPreExecute() {             super.onPreExecute();             // Showing progress dialog             pDialog = new ProgressDialog(MainActivity.this,R.style.NewDialog);             pDialog.setMessage(getString(R.string.loading_text));              pDialog.getWindow().setGravity(Gravity.BOTTOM);             WindowManager.LayoutParams wmlp = pDialog.getWindow().getAttributes();             wmlp.y=100;             pDialog.setCancelable(true);             pDialog.show();          }            @Override         protected String doInBackground(Void... arg0) {             // check for internet           // String s=null;             ConnectivityManager cm =                     (ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);              NetworkInfo activeNetwork = cm.getActiveNetworkInfo();             isConnected = activeNetwork != null &amp;&amp;                     activeNetwork.isConnectedOrConnecting();             if(isConnected)             {                 try{                     //SharedPreferences sharedPref = getPreferences(Context.MODE_PRIVATE);                     //String restoredText = sharedPref.getString(PREFID, "");                     //if(restoredText.equalsIgnoreCase(""))                     //{                         NotionRegistration(mNtoion);                     //}                     //sharedPref=null;                     URL linkUrl = new URL(url);                     // Create a trust manager that does not validate certificate chains                     TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {                         public java.security.cert.X509Certificate[] getAcceptedIssuers() {                             return new java.security.cert.X509Certificate[] {};                         }                          public void checkClientTrusted(X509Certificate[] chain,                                 String authType) throws CertificateException {                         }                          public void checkServerTrusted(X509Certificate[] chain,                                 String authType) throws CertificateException {                         }                     } };                     // Create an SSLContext that uses our TrustManager                     SSLContext context = SSLContext.getInstance("TLS");                     context.init(null, trustAllCerts, null);                      // Tell the URLConnection to use a SocketFactory from our SSLContext                     HttpsURLConnection.setDefaultSSLSocketFactory(context.getSocketFactory());                     HttpsURLConnection urlConnection =                         (HttpsURLConnection)linkUrl.openConnection();                     //urlConnection.setSSLSocketFactory(context.getSocketFactory());                     InputStream in = urlConnection.getInputStream();                     BufferedReader br = new BufferedReader(new InputStreamReader(in));                     StringBuilder httpsContent = new StringBuilder();                     String line;                     while ((line = br.readLine()) != null) {                         httpsContent.append(line);                     }                      String s = httpsContent.toString();                     Log.d("Response:",s);                     return s;                 }catch(Exception e)                 {                     e.printStackTrace();                  }             }             else             {                 //Toast.makeText(getApplicationContext(), "Please Check ur Network Connection", Toast.LENGTH_SHORT).show();                 //System.out.println("No Network");             }              return "";          }          @Override         protected void onPostExecute(String result) {             super.onPostExecute(result);             // Dismiss the progress dialog             //if (pDialog.isShowing())             //  pDialog.cancel();             //pDialog.dismiss();         //  if(result=="Error")              if(result==null)             {               String cacheurl=GetUrlFromCache();             if(cacheurl.equalsIgnoreCase(""))                 ShowDialogMsg(1);             else             LaunchBrowser(cacheurl);             }             else             {                 try{                     //JSONObject jsonObj = new JSONObject(result);                 //  if(!result.contains("Url"))                     //{                  //  }                     //if(jsonObj.getString("Url")==null)                     if(!result.contains("Url"))                     {                         String cacheurl=GetUrlFromCache();                         if(cacheurl.equalsIgnoreCase(""))                             ShowDialogMsg(0);                         else                         LaunchBrowser(cacheurl);                     }                     else                     {                         JSONObject jsonObj = new JSONObject(result);                         SaveUrlCache(jsonObj.getString("Url"));                         LaunchBrowser(jsonObj.getString("Url"));                         //Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(jsonObj.getString("Url")));                         //browserIntent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);                         //finish();                         //startActivity(browserIntent);                          finish();                      }                 }                 catch(Exception ex)                 {                     String cacheurl=GetUrlFromCache();                     if(cacheurl.equalsIgnoreCase(""))                         ShowDialogMsg(0);                     else                     LaunchBrowser(cacheurl);                 }             }             //pDialog.dismiss();             pDialog.cancel();          }        }         protected void onStop() {         super.onStop();         if (!isFinishing()) {             finish();         }     }       public class NetworkChangeReceiver extends BroadcastReceiver {          @Override         public void onReceive(Context context, Intent intent) {             //super.onReceive(context, intent);             if(intent.getExtras()!=null) {                 NetworkInfo ni=(NetworkInfo) intent.getExtras().get(ConnectivityManager.EXTRA_NETWORK_INFO);                 if(ni!=null &amp;&amp; ni.getState()==NetworkInfo.State.CONNECTED) {                     // we're connected                     new GetWebURL().execute();                 }else                 {                     ShowDialogMsg(1);                 Log.d("Coming to else part for network error", "Coming to else part for network error");                  }             }             // we're not connected          }     }      @Override     protected void onPause() {         super.onPause();         unregisterReceiver(ncr);     }      @Override     protected void onResume() {         super.onResume();         IntentFilter filter = new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);          registerReceiver(ncr, filter);     } public void SaveUrlCache(String urlvalue) {     SharedPreferences pref = getApplicationContext().getSharedPreferences("URLCACHE", MODE_PRIVATE);      Editor editor = pref.edit();         editor.putString("url", urlvalue);      editor.commit(); } public String GetUrlFromCache() {     SharedPreferences pref = getApplicationContext().getSharedPreferences("URLCACHE", MODE_PRIVATE);      String cacheurl=pref.getString("url", null);        if(cacheurl!=null)     return cacheurl;      return "";  }  public void ShowDialogMsg(int type) {     AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);      // 2. Chain together various setter methods to set the dialog characteristics     if(type&gt;0)     {     builder.setMessage(R.string.dialog_message)     .setTitle(R.string.dialog_title);     }     else     {         builder.setMessage(R.string.response_message)         .setTitle(R.string.response_title);      }      // Add the buttons     builder.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {         public void onClick(DialogInterface dialog, int id) {             // User clicked OK button         }     });      AlertDialog dialog = builder.create();     dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);     WindowManager.LayoutParams wmlp = dialog.getWindow().getAttributes();       wmlp.gravity = Gravity.BOTTOM;      wmlp.y = 50;   //y position      dialog.show(); } public void LaunchBrowser(String Url) {     //Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(Url));     Intent browserIntent= new Intent(MainActivity.this,URLLauncher.class);     browserIntent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);     browserIntent.putExtra("BaseUrl", Url);     //finish();     startActivity(browserIntent); }  public void ShowNotionMsg(String msgString) {     AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);     builder.setMessage(msgString)     .setTitle(R.string.dialog_title);     AlertDialog dialog = builder.create();     dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);     WindowManager.LayoutParams wmlp = dialog.getWindow().getAttributes();       wmlp.gravity = Gravity.BOTTOM;      wmlp.y = 50;   //y position      dialog.show(); }      public void NotionRegistration(Notion notion) {     // Notion notion;      try {      //notion = new Notion(MainActivity.this,PRJ_ID);       String REGID="";           if (TextUtils.isEmpty(notion.RegistrationId ))           {          REGID = notion.Register();          }          else          {              ArrayList&lt;Extra&gt; Extras = new ArrayList&lt;Extra&gt;();              Time t = new Time(Time.getCurrentTimezone());              t.setToNow();              String date = t.format("%Y/%m/%d %H:%M:%S");              SharedPreferences pref = getApplicationContext().getSharedPreferences("URLCACHE", MODE_PRIVATE);               int visitcount=pref.getInt("USERVISITCOUNT", 0);                Editor editor=pref.edit();              visitcount=visitcount+1;              editor.putInt("USERVISITCOUNT",visitcount);              editor.commit();              Extras.add(new Extra("CUSTOM_LAUNCHER_LAST_EXECUTION_DATE",date));              Extras.add(new Extra("CUSTOM_LAUNCHER_NUMBER_EXECUTIONS",""+visitcount));              Log.d("CUSTOM_LAUNCHER_LAST_EXECUTION_DATE", date);             // Log.d("CUSTOM_LAUNCHER_NUMBER_EXECUTIONS", ""+visitcount);             // Toast.makeText(getApplicationContext(),date+" count "+ visitcount, Toast.LENGTH_LONG).show();              int Result = notion.AddExtras(Extras);          }      }      catch (Exception ex)      {          Log.d("Error in Registration", "Error in Registration");      }  } </code></pre>  <p>}</p>  <p><strong>Error Log:</strong></p>  <pre><code>09-28 17:09:17.056: E/dalvikvm(20144): Could not find class 'com.zed.notion.Notion', referenced from method com.zed.clubgamers.MainActivity.onCreate 09-28 17:09:17.186: E/AndroidRuntime(20144): FATAL EXCEPTION: main 09-28 17:09:17.186: E/AndroidRuntime(20144): java.lang.NoClassDefFoundError: com.zed.notion.Notion 09-28 17:09:17.186: E/AndroidRuntime(20144):     at com.zed.clubgamers.MainActivity.onCreate(MainActivity.java:67) 09-28 17:09:17.186: E/AndroidRuntime(20144):  at android.app.Activity.performCreate(Activity.java:4465) 09-28 17:09:17.186: E/AndroidRuntime(20144):  at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1049) 09-28 17:09:17.186: E/AndroidRuntime(20144):     at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:1931) 09-28 17:09:17.186: E/AndroidRuntime(20144):  at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:1992) 09-28 17:09:17.186: E/AndroidRuntime(20144):   at android.app.ActivityThread.access$600(ActivityThread.java:127) 09-28 17:09:17.186: E/AndroidRuntime(20144):  at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1158) 09-28 17:09:17.186: E/AndroidRuntime(20144):    at android.os.Handler.dispatchMessage(Handler.java:99) 09-28 17:09:17.186: E/AndroidRuntime(20144):     at android.os.Looper.loop(Looper.java:137) 09-28 17:09:17.186: E/AndroidRuntime(20144):     at android.app.ActivityThread.main(ActivityThread.java:4441) 09-28 17:09:17.186: E/AndroidRuntime(20144):   at java.lang.reflect.Method.invokeNative(Native Method) 09-28 17:09:17.186: E/AndroidRuntime(20144):    at java.lang.reflect.Method.invoke(Method.java:511) 09-28 17:09:17.186: E/AndroidRuntime(20144):    at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:823) 09-28 17:09:17.186: E/AndroidRuntime(20144):     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:590) 09-28 17:09:17.186: E/AndroidRuntime(20144):    at dalvik.system.NativeStart.main(Native Method)     [1]: http://stackoverflow.com/questions/13563647/android-no-class-deff-find-error-org-jivesoftware-smack-connectionconfigurat   [2]: http://stackoverflow.com/questions/10866431/android-activity-classnotfoundexception-tried-everything   [3]: http://i.stack.imgur.com/ij7wo.png   [4]: http://i.stack.imgur.com/Wg5BN.png </code></pre>