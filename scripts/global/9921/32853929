<p>I'm designing a node.js app.<br> One of its tasks is to regularly download a set of images from some public, external, site.<br> One requirement is to avoid repeating the download of images which are not changed from the previous download.<br> I plan to use "request" module, since it is far more complete and flexible with respect to other networking modules (please correct me if I'm wrong).</p>  <p>This is the code I'm using now (please ignore some mistakes, like comparing dates with <code>&gt;</code> or <code>&lt;</code> operators, consider it <em>pseudo-code</em>...):</p>  <pre><code>var request = require('request'); var myResource = {   'url': 'http://www.example.com/image1.jpg',   'last-modified': 'Mon, 28 Sep 2015 08:44:06 GMT' };  request(   myResource.url,   { method: 'HEAD'},   function (err, res, body) {     if (err) {       return console.error('error requesting header:', err);     }     var lastModifiedDate = res.headers['last-modified'];     console.log('last modified date:', lastModifiedDate);     if (lastModifiedDate &gt; myResource['last-modified']) { // resource did change       request(         myResource.url,         function (err, response, contents) {           if (err) {             return console.error('error requesting content:', err);           }           myResource['last-modified'] = lastModifiedDate;           storeContents(contents); // store contents to DB         }       );     }   } ); </code></pre>  <p>This code should work (in principle).<br> But I ask: <code>request()</code> is called twice: is this a waste of resources?<br> Could the content request be someway chained to the first request?<br> Can you suggest a cleaner / smarter / faster approach? </p>