<p>In my symfony2 application, I have build a form type that lets me populate a select from an ajax request.</p>  <p>I have used a data transformer that treansforms an object to a pair of id and value and reverse transforms an id to an object.</p>  <p>It works well unless the form is not valid. In that case my custom form type field is nulled and I have to re-enter the data on top of correcting what was not in the right format before I can resubmit the form.</p>  <p>Does someone know how to correct this? What am I missing?</p>  <p>My form:</p>  <pre><code>&lt;?php //src/AppBundle/Form/Type/TimePickerType.php  namespace AppBundle\Form\Type;  use AppBundle\Form\DataTransformer\IdToEntityTransformer; use Doctrine\ORM\EntityManager; use Symfony\Component\Form\AbstractType; use Symfony\Component\Form\FormBuilderInterface; use Symfony\Component\Form\FormInterface; use Symfony\Component\Form\FormView; use Symfony\Component\OptionsResolver\OptionsResolverInterface; use Symfony\Component\Security\Core\Authorization\AuthorizationChecker;  class Select2EntitySearchType extends AbstractType {     /**      * @var EntityManager      */     private $entityManager;     /**      * @var AuthorizationChecker      */     private $authorizationChecker;      public function __construct(EntityManager $entityManager, AuthorizationChecker $authorizationChecker)     {         $this-&gt;entityManager = $entityManager;         $this-&gt;authorizationChecker = $authorizationChecker;     }      public function buildForm(FormBuilderInterface $builder, array $options)     {         if (class_exists($options['search_class']) == false) {             throw new \Exception("La classe n'a pas été reconnue : " . $options['search_class']);         }          $transformer = new IdToEntityTransformer($options, $this-&gt;entityManager, $this-&gt;authorizationChecker);          $builder-&gt;addModelTransformer($transformer);     }      public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver-&gt;setRequired(array(             'search_class',         ));          $resolver-&gt;setDefaults(array(             'search_parameter' =&gt; '',             'multiple' =&gt; false,             'is_granted' =&gt; null,             'compound' =&gt; false         ));     }      public function buildView(FormView $view, FormInterface $form, array $options)     {         $view-&gt;vars = array_replace($view-&gt;vars, array(             'search_class' =&gt; $options['search_class'],             'search_parameter' =&gt; $options['search_parameter'],         ));     }      public function getName()     {         return 'select2_entity_search';     } } </code></pre>  <p>My datatransformer :</p>  <pre><code>&lt;?php  namespace AppBundle\Form\DataTransformer;  use Doctrine\Entity; use Doctrine\ORM\EntityManager; use Symfony\Component\Form\Exception\TransformationFailedException; use Symfony\Component\Form\DataTransformerInterface; use Symfony\Component\Security\Core\Authorization\AuthorizationChecker;  /**  * @author Bernhard Schussek &lt;bschussek@gmail.com&gt;  */ class IdToEntityTransformer implements DataTransformerInterface {     /**      * @var array      */     private $options;      /**      * @var EntityManager      */     private $entityManager;     /**      * @var AuthorizationChecker      */     private $authorizationChecker;      /**      * Constructor.      *      * @param $options      * @param EntityManager $entityManager      * @param AuthorizationChecker $authorizationChecker      * @throws \Exception      */     public function __construct($options, EntityManager $entityManager, AuthorizationChecker $authorizationChecker)     {         if (!$options) throw new \Exception("A class argument should be given to the IdToEntityTransformer constructor");          $this-&gt;options = $options;         $this-&gt;entityManager = $entityManager;         $this-&gt;authorizationChecker = $authorizationChecker;     }      /**      * Should be empty at first      *      * @param Entity $data      * @return array|mixed      */     public function transform($data)     {         if (empty($data)) {             return array();         } elseif (!is_array($data)) {             $data = array($data);         }          return array_map(function($entity){             return array(                 'value' =&gt; $entity-&gt;getId(),                 'text' =&gt; $entity-&gt;__toString()             );         }, $data);     }      /**      * @param mixed $values      * @return array      */     public function reverseTransform($values)     {         if (is_array($values) == false) {             $values = array($values);         }          if (empty($values)) {             return null;         }          $repo = $this-&gt;entityManager-&gt;getRepository($this-&gt;options['search_class']);          $entities = array_map(function($id) use ($repo) {             return $repo-&gt;findOneBy(array('id' =&gt; $id));         }, $values);          if ($isGranted = $this-&gt;options['is_granted']) {             $entities = array_filter($entities, function($entity) use ($isGranted){                 return $this-&gt;authorizationChecker-&gt;isGranted($isGranted, $entity);             });         }          if (empty($entities)) {             return $this-&gt;options['multiple'] ? array() : null;         } else {             return $this-&gt;options['multiple'] ? $entities : array_values($entities)[0];         }     } } </code></pre>  <p>my form type layout :</p>  <pre><code>{% block select2_entity_search_widget %}      {% set attr = attr|merge({'class': attr.class ~ ' input-sm form-control select2_search'}) %}      &lt;select id="{{ id }}" data-search_class="{{ search_class }}" data-search_parameter="{{ search_parameter }}" data-url="{{ path('entity_search') }}" {{ block('widget_attributes') }}&gt;         {% for element in form.vars.data %}             &lt;option value="{{ element.value }}" selected="selected"&gt;{{ element.text }}&lt;/option&gt;         {% else %}             &lt;option&gt;&lt;/option&gt;         {% endfor %}     &lt;/select&gt;  {% endblock %} </code></pre>  <p>EDIT :</p>  <p>So when the form is not valid, and if I dump the data, I only get the Id of the select. I would have expected that the reversetransform method be called on the form data and if invalid, the transform method be called again on this form data. What is the good way to handle this ?</p>  <p>Should I requery my database in the transform method in case I don't have an object ? Or is there something meant to handle this case in symfony forms ?</p>