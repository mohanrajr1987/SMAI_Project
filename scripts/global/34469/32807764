<p>I am trying to sort my inputs in ascending order and my c++ code gives me error lnk 1120 and lnk 2001. I am using visual studio 2015. Based on my research I have to make sure the steps I go through to get to the code editor is correct. I am a hundred percent sure it is correct. Guys it will be useful for you and others if you solve this problem and post how to fix it because this is a really good code and most programmers and software engineers are using sorting in this world. </p>  <pre><code>#include &lt;iostream&gt; #include &lt;fstream&gt; #include &lt;iomanip&gt; #include &lt;string&gt; using std::cout; using std::cin; using std::endl; using std::string; using std::ofstream; const size_t maxwords = 3; string wordsCreator[][3];  string fileName; ofstream myFile; void createWordList(int, int); void sortDispNouns(); string * sort(string * strings, size_t count) {     bool swapped = false;     while (true) {         for (size_t i = 0; i &lt; count - 1; i++) {             if (strings[i] &gt; strings[i + 1])             {                 swapped = true;                 strings[i].swap(strings[i + 1]);              }           }         if (!swapped)             break;         swapped = false;     }     return strings; } int main() {       cout &lt;&lt; "Text Based Menu" &lt;&lt; endl &lt;&lt; endl &lt;&lt; endl;     cout &lt;&lt; "1. Create the word list" &lt;&lt; endl;     cout &lt;&lt; "2. German to English nouns" &lt;&lt; endl;     cout &lt;&lt; "3. German to English verbs" &lt;&lt; endl;     cout &lt;&lt; "4. German to English prepositions" &lt;&lt; endl;     cout &lt;&lt; "5. German to English adjectives" &lt;&lt; endl;     cout &lt;&lt; "6. German to English adverbs" &lt;&lt; endl;     cout &lt;&lt; "7. German to English cardinal numbers" &lt;&lt; endl;     cout &lt;&lt; "8. Search for a word" &lt;&lt; endl;     cout &lt;&lt; "9. Quit" &lt;&lt; endl;     cout &lt;&lt; "h. Help" &lt;&lt; endl;      int menuSelecter;     cout &lt;&lt; "Select the number corresponding to each list of menu to preform an action" &lt;&lt; endl;     cin &gt;&gt; menuSelecter;      while (menuSelecter != 9) {          if (menuSelecter == 0) {             cout &lt;&lt; "Select the number corresponding to each list of menu to preform an action" &lt;&lt; endl;             cout &lt;&lt; "Text Based Menu" &lt;&lt; endl &lt;&lt; endl &lt;&lt; endl;             cout &lt;&lt; "1. Create the word list" &lt;&lt; endl;             cout &lt;&lt; "2. German to English nouns" &lt;&lt; endl;             cout &lt;&lt; "3. German to English verbs" &lt;&lt; endl;             cout &lt;&lt; "4. German to English prepositions" &lt;&lt; endl;             cout &lt;&lt; "5. German to English adjectives" &lt;&lt; endl;             cout &lt;&lt; "6. German to English adverbs" &lt;&lt; endl;             cout &lt;&lt; "7. German to English cardinal numbers" &lt;&lt; endl;             cout &lt;&lt; "8. Search for a word" &lt;&lt; endl;             cout &lt;&lt; "9. Quit" &lt;&lt; endl;             cout &lt;&lt; "11. Read File" &lt;&lt; endl;             cout &lt;&lt; "0. Help" &lt;&lt; endl;         }         else if (menuSelecter == 1) {             createWordList(3, 3);         }         else if (menuSelecter == 9) {             exit(0);         }         else if (menuSelecter == 2) {             sortDispNouns();         }      }     system("pause");     return 0; } void createWordList(int size1, int size2) {     int i, j;     cout &lt;&lt; "write German Word, Part of Speech, and English Meaning separated with tabs or long spaces" &lt;&lt; endl;     cout &lt;&lt; "German Word" &lt;&lt; std::setw(18) &lt;&lt; "Part of speech" &lt;&lt; std::setw(18) &lt;&lt; "English meaning" &lt;&lt; endl;     for (i = 1; i &lt; 3; i++) {         for (j = 0; j &lt; 3; j++)         {             getline(cin, wordsCreator[i][j]);          }      }     cout &lt;&lt; "German Word" &lt;&lt; std::setw(18) &lt;&lt; "Part of speech" &lt;&lt; std::setw(18) &lt;&lt; "English meaning" &lt;&lt; endl;     for (i = 1; i &lt; 3; i++) {         for (j = 0; j &lt; 3; j++)         {             cout &lt;&lt; wordsCreator[i][j] &lt;&lt; endl;          }      }     cout &lt;&lt; endl;     cout &lt;&lt; "write the file name you want to save  this list as." &lt;&lt; endl;     getline(cin, fileName);     myFile.open(fileName);     myFile &lt;&lt; "German Word" &lt;&lt; std::setw(18) &lt;&lt; "Part of speech" &lt;&lt; std::setw(18) &lt;&lt; "English meaning" &lt;&lt; endl;     for (i = 1; i &lt; 3; i++)     {         for (j = 0; j &lt; 3; j++) {             myFile &lt;&lt; wordsCreator[i][j] &lt;&lt; endl;         }      }     if (!myFile) {         cout &lt;&lt; "File Not Found" &lt;&lt; endl;     }     else {         cout &lt;&lt; fileName &lt;&lt; " is found " &lt;&lt; endl;     }     myFile.close(); }  void sortDispNouns() {     string words[maxwords];      string separators = "\".,:;!?()\n";     size_t nwords = 0;     size_t maxwidth = 0;     size_t start = 0, end = 0, offset = 0;     while (true) {         start = wordsCreator[2][3].find_first_not_of(separators, offset);         if (string::npos == start)             break;         offset = start + 1;          end = wordsCreator[2][3].find_first_of(separators, offset);         if (string::npos == end) {             offset = end;             end = wordsCreator[2][3].length();          }         else             offset = end + 1;         words[nwords] = wordsCreator[2][3].substr(start, end - start);          if (maxwidth &lt; words[nwords].length())             maxwidth = words[nwords].length();         if (++nwords == maxwords) {             cout &lt;&lt; "Maximum number of words reached."                 &lt;&lt; " Procession what we have." &lt;&lt; endl;             break;         }          if (string::npos == offset) {             break;         }     }     sort(words, nwords);     cout &lt;&lt; endl &lt;&lt; "In ascending sequence, the words in the text are:" &lt;&lt; endl;     size_t count = 1;     char initial = words[0][0];     for (size_t i = 0; i &lt; nwords; i++) {         if (i &lt; nwords - 1 &amp;&amp; words[i] == words[i + 1]) {             ++count;             continue;         }          if (initial != words[i][0]) {             initial = words[i][0];             cout &lt;&lt; endl;         }          cout &lt;&lt; std::setiosflags(std::ios::left)             &lt;&lt; std::setw(maxwidth + 2) &lt;&lt; words[i];         cout &lt;&lt; std::resetiosflags(std::ios::right)             &lt;&lt; std::setw(5) &lt;&lt; count;         count = 1;     }      cout &lt;&lt; endl;  } </code></pre>