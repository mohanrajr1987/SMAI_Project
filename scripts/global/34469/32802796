<p>I have a Visual Studio C++ project containing main program and a DLL module. The DLL has a class with the following definition:</p>  <pre><code>// .h #ifdef _USRDLL     #define DLLAPI __declspec(dllexport) #else     #define DLLAPI __declspec(dllimport) #endif  class DLLAPI EClass { public:     static int value;      static int get_value(); };  // .cpp int EClass::value = 1;  int EClass::get_value() {     return value; } </code></pre>  <p>The DLL project is compiled successfully, both symbols (value and get_value) are observable by Dependency Walker.</p>  <p>In the main program, I can call the static function <code>get_value</code></p>  <pre><code>int v = EClass::get_value();  // Ok, v = 1 </code></pre>  <p>but when I try to access the field <code>value</code> directly</p>  <pre><code>int v = EClass::value;  // Error </code></pre>  <p>I get an error</p>  <pre><code>LNK2001 unresolved external symbol "public: static int EClass::value" (?value@EClass@@2HA) </code></pre>  <p>It is possible to avoid using accessors for static fields?</p>