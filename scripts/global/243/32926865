<p>I'm trying to represent arbitrary relationships between an arbitrary set of django models - a graph where the nodes are a non-homogenous set of django models.</p>  <pre><code>class ElementRelatinoship(models.Model):     RELATIONSHIP_TYPES = ...     relationship = models.CharField(max_length=30, choices=RELATIONSHIP_TYPES)      content_type_v1 = models.ForeignKey(ContentType, related_name='edge_v1_set')     object_id_v1 = models.PositiveIntegerField()     content_object_v1 = GenericForeignKey('content_type_v1', 'object_id_v1')      content_type_v2 = models.ForeignKey(ContentType, related_name='edge_v2_set')     object_id_v2 = models.PositiveIntegerField()     content_object_v2 = GenericForeignKey('content_type_v2', 'object_id_v2') </code></pre>  <p>My django admin looks like this:</p>  <pre><code>ElementRelationshipInline(generic.GenericTabularInline):     model = ElementRelationship  class ElementSetAdmin(admin.ModelAdmin):     inlines = [..., ElementRelationshipInline </code></pre>  <p>When I try to load up the ElementSetAdmin page, though, I get this error:</p>  <p>ElementRelationship has no field named u'content_type'</p>  <p>I see in the django docs (<a href="https://docs.djangoproject.com/en/1.8/ref/contrib/contenttypes/#generic-relations-in-admin" rel="nofollow">https://docs.djangoproject.com/en/1.8/ref/contrib/contenttypes/#generic-relations-in-admin</a>) that you could probably set ct_field and ct_fk_field, to get the admin to support one of the generic relations, but it doesn't lead to a path for supporting two.</p>  <p>Is this possible? Is there a better approach?</p>