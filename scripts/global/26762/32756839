<p>I am new to yii1. In my project ,I have used TblExtendedGridView to display data in the table .The form shows the data in my local computer.But when the project is uloaded in server,the file is blank and doesnot show any error. What is the problem?</p>  <pre><code>'&lt;?php $uniqid=md5(uniqid()); $this-&gt;widget('bootstrap.widgets.TbExtendedGridView', array(     'id'=&gt;'marketing-grid',     'dataProvider'=&gt;$model-&gt;search(),     'filter'=&gt;$model,     'type' =&gt; 'striped bordered',     'type' =&gt; 'striped bordered condensed',         'columns'=&gt;array(         array(         'header'=&gt;'#',             'value'=&gt;'$this-&gt;grid-&gt;dataProvider-&gt;pagination-&gt;currentPage * $this-&gt;grid-&gt;dataProvider-&gt;pagination-&gt;pageSize + ($row+1)',          ),         array(         'name'=&gt;'client_id',         'header'=&gt;'Company',         'value'=&gt;'$data-&gt;clientName-&gt;client_name',         'htmlOptions' =&gt; array('style'=&gt;'width:200px'),         ),         array(         'name'=&gt;'client_contact_id',         'header'=&gt;'Contacted',         'value'=&gt;'$data-&gt;contactPerson-&gt;contact_name',         'htmlOptions' =&gt; array('style'=&gt;'width:180px'),         ),         array(         'name'=&gt;'visited_date',         'header'=&gt;'Visit Date',         'htmlOptions' =&gt; array('style'=&gt;'width:100px'),         ),         array(         'name'=&gt;'possibility',         'header'=&gt;'Probability',         'htmlOptions' =&gt; array('style'=&gt;'width:100px'),         ),         'remarks',         array(         'name'=&gt;'next_visited_date',         'header'=&gt;'Next Contact Date',         'htmlOptions' =&gt; array('style'=&gt;'width:100px'),         ),         array(         'name'=&gt;'follow_up_by',         'header'=&gt;'Follow Up By',         'value'=&gt;'$data-&gt;followPerson-&gt;user_name',         'htmlOptions' =&gt; array('style'=&gt;'width:180px'),         ),          ),           ),     ), )); ?&gt;'   'My controller is:         &lt;?php      class MarketingController extends Controller     {         public $layout='//layouts/column1';         public function actionIndex()         {             $this-&gt;actionAdmin();         }          // Uncomment the following methods and override them if needed          public function filters()         {             return array(                 'accessControl', // perform access control for CRUD operations                 'postOnly + delete', // we only allow deletion via POST request             );         }         public function accessRules()         {             return array(                 array('allow',  // allow all users to perform 'index' and 'view' actions                     'actions'=&gt;array('index','view','DynamicContact'),                     'users'=&gt;array('*'),                 ),                 array('allow', // allow authenticated user to perform 'create' and 'update' actions                     'actions'=&gt;array('admin','delete','create','update','DynamicContact'),                     'users'=&gt;array('@'),                 ),                 array('allow', // allow admin user to perform 'admin' and 'delete' actions                     'actions'=&gt;array('admin','delete','DynamicContact'),                     'users'=&gt;array('admin','@'),                 ),                 array('deny',  // deny all users                     'users'=&gt;array('*'),                 ),             );         }          protected function performAjaxValidation($model)         {             if(isset($_POST['ajax']) &amp;&amp; $_POST['ajax']==='marketing-form')             {                 echo CActiveForm::validate($model);                 Yii::app()-&gt;end();             }         }         public function actionView($id)         {               EQuickDlgs::render('view',array('model'=&gt;$this-&gt;loadModel($id)));         }         public function actionAdmin()         {             $model=new Marketing('search');             $model-&gt;unsetAttributes();  // clear any default values             if(isset($_GET['Marketing']))                 $model-&gt;attributes=$_GET['Marketing'];              $this-&gt;render('admin',array(                 'model'=&gt;$model,             ));         }           public function actionCreate()         {              $model=new Marketing;              // Uncomment the following line if AJAX validation is needed             $this-&gt;performAjaxValidation($model);              if(isset($_POST['Marketing']))             {                 $model-&gt;attributes=$_POST['Marketing'];                 //print_r($_POST['User']);                 //die;                  if($model-&gt;save())                 {                     EQuickDlgs::checkDialogJsScript();                     $this-&gt;redirect(array('marketing/admin','id'=&gt;$model-&gt;marketing_id));                   }             }              EQuickDlgs::render('create',array(                 'model'=&gt;$model,             ));          }         public function loadModel($id)         {             $model=Marketing::model()-&gt;findByPk($id);             if($model===null)                 throw new CHttpException(404,'The requested page does not exist.');             return $model;         }          public function actionUpdate($id)         {             $model=$this-&gt;loadModel($id);              // Uncomment the following line if AJAX validation is needed             // $this-&gt;performAjaxValidation($model);             if(isset($_POST['Marketing']))             {                 $model-&gt;attributes=$_POST['Marketing'];                 if($model-&gt;save())                 {                     //$this-&gt;redirect(array('view','id'=&gt;$model-&gt;user_id));                     EQuickDlgs::checkDialogJsScript();                     $this-&gt;redirect(array('marketing/admin','id'=&gt;$model-&gt;marketing_id));                 }              }              EQuickDlgs::render('update',array(                 'model'=&gt;$model,             ));         }          public function actionDelete($id)         {             $this-&gt;loadModel($id)-&gt;delete();              // if AJAX request (triggered by deletion via admin grid view), we should not redirect the browser             if(!isset($_GET['ajax']))                 $this-&gt;redirect(isset($_POST['returnUrl']) ? $_POST['returnUrl'] : array('admin'));         }      }'      'And Model is : &lt;?php class Marketing extends PMActiveRecord {     /**      * @return string the associated database table name      */     public function tableName()     {         return 'pm_mar_marketing';     }       public function rules()     {          return array(             array('client_id, client_contact_id, follow_up_by, visited_date, visit_type, next_visited_date, possibility, remarks', 'required'),             array('client_id, client_contact_id, follow_up_by, visit_type, crtd_by, updt_by, updt_cnt', 'numerical', 'integerOnly'=&gt;true),             array('possibility', 'length', 'max'=&gt;20),             // The following rule is used by search().             // @todo Please remove those attributes that should not be searched.             array('marketing_id, client_id, client_contact_id, follow_up_by, visited_date, visit_type, next_visited_date, possibility, remarks', 'safe', 'on'=&gt;'search'),         );     }       public function relations()     {          return array(         'clientName' =&gt; array(self::BELONGS_TO, 'Client', 'client_id'),         'contactPerson' =&gt; array(self::BELONGS_TO, 'ClientContact', 'client_contact_id'),         'followPerson' =&gt; array(self::BELONGS_TO, 'User', 'follow_up_by'),                 'visitType' =&gt; array(self::BELONGS_TO, 'CodeValue', 'visit_type')         );     }      /**      * @return array customized attribute labels (name=&gt;label)      */     public function attributeLabels()     {         return array(             'marketing_id' =&gt; 'Marketing',             'client_id' =&gt; 'Client',                     //    'client_id'=&gt; 'Client',             'client_contact_id' =&gt; 'Contact Person',             //'client_contact_id' =&gt; 'Contact Person',             'follow_up_by' =&gt; 'Follow Up By',             'visited_date' =&gt; 'Visited Date',             'visitType.code_lbl' =&gt; 'Visit Type',             'next_visited_date' =&gt; 'Next Contact Date',             'possibility' =&gt; 'Probability',             'remarks' =&gt; 'Remarks',             'crtd_by' =&gt; 'Crtd By',             'crtd_dt' =&gt; 'Crtd Dt',             'updt_by' =&gt; 'Updt By',             'updt_dt' =&gt; 'Updt Dt',             'updt_cnt' =&gt; 'Updt Cnt',         );     }       public function search()     {         // @todo Please modify the following code to remove attributes that should not be searched.          $criteria=new CDbCriteria;         $criteria-&gt;with = array('clientName','contactPerson','followPerson');          $criteria-&gt;compare('marketing_id',$this-&gt;marketing_id);         $criteria-&gt;compare('clientName.client_name',$this-&gt;client_id,true);         $criteria-&gt;compare('contactPerson.contact_name',$this-&gt;client_contact_id,true);         $criteria-&gt;compare('followPerson.user_name',$this-&gt;follow_up_by,true);         $criteria-&gt;compare('visited_date',$this-&gt;visited_date,true);         //$criteria-&gt;compare('visit_type',$this-&gt;visit_type);         $criteria-&gt;compare('next_visited_date',$this-&gt;next_visited_date,true);         $criteria-&gt;compare('possibility',$this-&gt;possibility,true);         $criteria-&gt;compare('remarks',$this-&gt;remarks,true);         $criteria-&gt;compare('crtd_by',$this-&gt;crtd_by);         $criteria-&gt;compare('crtd_dt',$this-&gt;crtd_dt,true);         $criteria-&gt;compare('updt_by',$this-&gt;updt_by);         $criteria-&gt;compare('updt_dt',$this-&gt;updt_dt,true);         $criteria-&gt;compare('updt_cnt',$this-&gt;updt_cnt);         //$criteria -&gt; join = 'INNER JOIN pm_marketing_user followPerson on t.follow_up_by= followPerson.user_id';          return new CActiveDataProvider($this, array(             'criteria'=&gt;$criteria,         ));     }       public static function model($className=__CLASS__)     {         return parent::model($className);     } } ' </code></pre>