<p>I am able to pass a view model initially on a form on my index.cshtml page to an editor template page.  On the index page I have a submit button that post the form results (radio button groups in the editor template) back to the controller and within the HttpPost method its passing this model to a partial view which is displayed in a modal popup.  All this does is show the form elements that were selected but it disables the radio buttons to the user.  From here the user can either go back (close the window) or confirm the form results.  When the user clicks the confirm button it should pass the viewmodel back to the controller to another HttpPost method which will then process the form results and return the final confirmation view.  But when I try to pass the viewmodel back to the controller from the modal popup it does not keep the binding.  I tried making sure all were binded through Hidden inputs but I must be missing something somewhere.  Maybe I am going about this the wrong way.  I just need to basically keep the viewmodel binding from the initial post and be able to process that after the user confirms the selection from the modal popup.  What would be the best way to accomplish this without having to put a session hack in there?</p>  <p>Index</p>  <pre><code>@using (Html.BeginForm("Index", "Home", FormMethod.Post, new { id = "ballotForm" })) {    @Html.AntiForgeryToken()    @(Html.EditorFor(m =&gt; m.BallotViewModel, new ViewDataDictionary(ViewData)     {        TemplateInfo = new System.Web.Mvc.TemplateInfo        {          HtmlFieldPrefix = "BallotViewModel"        }      })) &lt;table class="col-sm-12"&gt;    &lt;tr&gt;       &lt;td class="pull-right"&gt;          &lt;button type="submit" class="btn btn-primary" data-target="#modal-container" data-toggle="modal"&gt;Vote Management Ballot&lt;/button&gt;       &lt;/td&gt;    &lt;/tr&gt; &lt;/table&gt; } </code></pre>  <p>Controller - Initial Post to Modal Popup</p>  <pre><code>[HttpPost] [ValidateAntiForgeryToken] public ActionResult Index(HomeViewModel bModel) {     if (ModelState.IsValid)     {        //set property to identity view        bModel.BallotViewModel[0].IsVoteConfirmationView = true;        return PartialView("ViewVoteConfirmation", bModel);     }           } </code></pre>  <p>Controller - Post after Confirm submit from modal popup</p>  <pre><code>[HttpPost] [ValidateAntiForgeryToken] public ActionResult ConfirmVote(HomeViewModel cModel) {     //Process form results here but model is null      //Go to Thank You View     return View(); } </code></pre>  <p>ViewVoteConfirmation:</p>  <pre><code>@model Ballot.WebUI.Models.HomeViewModel &lt;div class="row"&gt;         @(Html.EditorFor(m =&gt; m.BallotViewModel, new ViewDataDictionary(ViewData) { TemplateInfo = new TemplateInfo { HtmlFieldPrefix = "BallotViewModel" } }))     &lt;/div&gt;          @using (Html.BeginForm("ConfirmVote", "Home", FormMethod.Post, new { id = "ballotConfirmVoteForm" }))         {             @Html.AntiForgeryToken()             &lt;div class="row"&gt;                 @Html.EditorFor(m =&gt; m.BallotViewModel[0].Proposals, "Proposals", new ViewDataDictionary(ViewData)                {                    TemplateInfo = new TemplateInfo                    {                        HtmlFieldPrefix  = "Proposals"                    }                })              &lt;/div&gt;             &lt;div class="row"&gt;                 &lt;div class="col-md-4 col-md-offset-4"&gt;                     &lt;button type="button" class="btn btn-default"                             data-dismiss="modal"&gt;                         Cancel                     &lt;/button&gt;                     &lt;button type="submit" id="approve-btn"                             class="btn btn-danger"&gt;                         Confirm                     &lt;/button&gt;                 &lt;/div&gt;             &lt;/div&gt;         } </code></pre>  <p>ProposalViewModel:</p>  <pre><code>public class ProposalViewModel     {         public int ProposalItemID { get; set; }         public string ProposalItemTitle { get; set; }          public string Option0_Name { get; set; }         public string Option1_Name { get; set; }         public string Option2_Name { get; set; }         public string Option3_Name { get; set; }         public string PercOfShare { get { return "% of Share"; }}          public bool IsHeader { get; set; }         public int TagOrder { get; set; }         public int SelectedVoteOption { get; set; }         public bool IsVoteConfirmationView { get; set; }         public bool IsCumulative { get; set; }         public int SharePercentage { get; set; }          public List&lt;VoteOptionViewModel&gt; lVoteOptions { get; set; }     } </code></pre>  <p>Proposals:</p>  <pre><code>@model List&lt;Ballot.WebUI.Models.ProposalViewModel&gt;  @for (int i = 0; i &lt; Model.Count; i++) {      @Html.HiddenFor(m =&gt; m[i].ProposalItemID)     @Html.HiddenFor(m =&gt; m[i].ProposalItemTitle)     @Html.HiddenFor(m =&gt; m[i].Option0_Name)     @Html.HiddenFor(m =&gt; m[i].Option1_Name)     @Html.HiddenFor(m =&gt; m[i].Option2_Name)     @Html.HiddenFor(m =&gt; m[i].Option3_Name)     @Html.HiddenFor(m =&gt; m[i].PercOfShare)     @Html.HiddenFor(m =&gt; m[i].IsHeader)     @Html.HiddenFor(m =&gt; m[i].TagOrder)     @Html.HiddenFor(m =&gt; m[i].SelectedVoteOption)     @Html.HiddenFor(m =&gt; m[i].IsVoteConfirmationView)     @Html.HiddenFor(m =&gt; m[i].IsCumulative)     @Html.HiddenFor(m =&gt; m[i].lVoteOptions)     @Html.HiddenFor(m =&gt; m[i].SharePercentage)  } </code></pre>  <p>jquery script to change the value of the SharePercentage label</p>  <pre><code>$(function () {     //When 'For' is Selected     $('[class$=PercOfShareFor]').on('click', function (e) {         if ($(this).is(':checked')) {             var forMatches1 = 0;              $('[class$=PercOfShareFor]').each(function (i, val) {                 if ($(this).is(':checked')) {                     //check how many 'For' Vote Options are selected                     forMatches1++;                     //select the Share Percentage value label in the same row, and change the class to ForSelected (used as selector)                     $(this).closest('td').next('td').next('td').find('.SharePercentage')                         .removeClass("SharePercentage")                         .addClass("SharePercentageForSelected");                     //if the Share Percentage class (used as selector) was previously WithholdSelected then change to ForSelected                     $(this).closest('td').next('td').next('td').find('.SharePercentageWithholdSelected')                         .removeClass("SharePercentageWithholdSelected")                         .addClass("SharePercentageForSelected");                 }             });              //divide total 'For' Selections by number of Director Proposals             var forPercent1 = 100 / forMatches1;              //format the percentage to display 2 decimal places if not a whole number             var forPercent2 = Math.round(forPercent1 * 100) / 100;              //Update 'For' Percentages             $('[class$=SharePercentageForSelected]').text(forPercent2);         }     });     //When 'Withhold' is Selected after initially selecting 'For'     $('[class$=PercOfShareWithhold]').on('click', function (e) {         if ($(this).is(':checked')) {             var forMatches = 0;              $('[class$=PercOfShareFor]').each(function (i, val) {                 if ($(this).is(':checked')) {                     //check how many 'For' Vote Options are still selected                     forMatches++;                 }             });             var withholdMatches = 0;             $('[class$=PercOfShareWithhold]').each(function (i, val) {                 if ($(this).is(':checked')) {                     //check how many 'Withhold' Vote Options are still selected                     withholdMatches++;                     //set the class to WithholdSelected                     $(this).closest('td').next('td').find('.SharePercentageForSelected')                         .removeClass("SharePercentageForSelected")                         .addClass("SharePercentageWithholdSelected")                         .text("0"); //Set 'Withhold' Percentage back to 0                 }             });              //divide total 'For' Selections by number of Director Proposals             var forPercent1 = 100 / forMatches;              //format the percentage to display 2 decimal places if not a whole number             var forPercent2 = Math.round(forPercent1 * 100) / 100;              //Update 'For' Percentages             $('[class$=SharePercentageForSelected]').text(forPercent2);          }     }); }); </code></pre>