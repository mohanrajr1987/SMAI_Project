<p>When applying a <code>binding</code>, you're essentially saying 'bind property path 'x' of source object 'a' to property path 'y' of target object 'b''. The binding itself specifies a source and a PropertyPath.  It is then 'bound' to the target object's property.</p>  <p>However, I'm trying to evaluate the path directly against a source object and storing that in a variable.</p>  <p><strong><em>Note: Yes I know I can create a dummy target class with a property of type Object and bind to that, then inspect it for a value, as several other answers here on StackOverflow and elsewhere say (see <a href="http://www.devx.com/tips/Tip/42272" rel="nofollow">here</a> for that solution), but I'm trying to avoid binding altogether. I'm looking for what the binding class does internally with the source and path.</em></strong></p>  <pre><code>var sourceObject = new Foo(); var propertyPath = new PropertyPath("Some.Property.Relative.To.Foo");  // What is equivalent to 'var pathValue = sourceObject.Some.Property.Relative.To.Foo;' var pathValue = ??? </code></pre>