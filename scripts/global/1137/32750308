<p>Hi I have a function inside a user control that will display and create user control and bind it values depend on the type of the property</p>  <p>I was able to do the text property but binding a combobox with enum is not working for me here is the following code </p>  <pre><code>public void DisplayProperties(object obj)     {         // get Display Name         DisplayNameAttribute groupNameAttribute = Attribute.GetCustomAttribute(obj.GetType(), typeof(DisplayNameAttribute)) as DisplayNameAttribute;         if (groupNameAttribute != null)         {             propertyPanel.Controls.Add(DisplayCategory(groupNameAttribute.DisplayName));         }         else         {             propertyPanel.Controls.Add(DisplayCategory(obj.GetType().Name));         }          PropertyInfo[] propInfo = obj.GetType().GetProperties();         foreach (PropertyInfo property in propInfo)         {             BrowsableAttribute attrib = property.GetCustomAttribute(typeof(BrowsableAttribute)) as BrowsableAttribute;             if(attrib == null || attrib.Browsable == true)             {                 DisplayNameAttribute propName = Attribute.GetCustomAttribute(property.GetType(), typeof(DisplayNameAttribute)) as DisplayNameAttribute;                 string displayName;                 if (propName != null)                 {                     displayName = propName.DisplayName;                 }                 else                 {                     displayName = property.Name;                 }                 object attrs = property.GetCustomAttributes(true);                 DescriptionAttribute propertyDescription = attrs as DescriptionAttribute;                 if (property.PropertyType.IsEnum)                 {                     ComboBoxProperty comboProperty = new ComboBoxProperty();                     comboProperty.ComboDisplayName = displayName;                     comboProperty.propertyComboBox.DataSource = property;                     comboProperty.propertyComboBox.DataBindings.Add("SelectedValue", obj, displayName);                     comboProperty.Description = "test";// propertyDescription.Description;                     propertyPanel.Controls.Add(comboProperty);                 }                 else                 {                     TextBoxProperty textBoxProperty = new TextBoxProperty();                     //if (property.PropertyType == typeof(string))                     //{                     textBoxProperty.TextDisplayName = displayName;                     textBoxProperty.valueTb.DataBindings.Add(new Binding("Text", obj, displayName)); //property.GetValue(obj, null).ToString();                     textBoxProperty.Description = "test";//propertyDescription.Description;                     textBoxProperty.Top = _PropertyPosition;                     _PropertyPosition += textBoxProperty.Height;                     propertyPanel.Controls.Add(textBoxProperty);                     //}                 }             }         }     } </code></pre>  <p>this function is called from a form </p>  <pre><code>public partial class Form1 : Form {     public Form1()     {         InitializeComponent();     }      private void Form1_Load(object sender, EventArgs e)     {        TestObject textObject = new TestObject();         textObject.TestString = "testing";         textObject.TestEnum = TestObject.MyEnum.A;         propertyGrid1.DisplayProperties(textObject);      }   } public class TestObject {     public enum MyEnum      {         A,         B     }     public string TestString { get; set; }     //public int TestInteger { get; set; }     //public double TestDouble { get; set; }     public MyEnum TestEnum {get; set;}  } </code></pre>  <p>I want the combobox to contain all the enum value and the selected value to show. let me know if how I can fix my issue </p>  <p><strong>EDIT</strong></p>  <p>I did some reading and I was able to get the enum to work but the databinding is not working I m sure this because of the ValueMember if not from the DataBidning itself  here is my updated code  this code from the UserControl class that contains 2 usercontrol classes one for ComboBox and the second for textbox </p>  <pre><code>public partial class PropertyGrid : TouchObjectListBox {      int _PropertyPosition = 0;     public PropertyGrid()     {         InitializeComponent();      }      public void DisplayProperties(object obj)     {         // get Display Name         DisplayNameAttribute groupNameAttribute = Attribute.GetCustomAttribute(obj.GetType(), typeof(DisplayNameAttribute)) as DisplayNameAttribute;         if (groupNameAttribute != null)         {             propertyPanel.Controls.Add(DisplayCategory(groupNameAttribute.DisplayName));         }         else         {             propertyPanel.Controls.Add(DisplayCategory(obj.GetType().Name));         }          PropertyInfo[] propInfo = obj.GetType().GetProperties();         foreach (PropertyInfo property in propInfo)         {             BrowsableAttribute attrib = property.GetCustomAttribute(typeof(BrowsableAttribute)) as BrowsableAttribute;             if(attrib == null || attrib.Browsable == true)             {                 DisplayNameAttribute propName = Attribute.GetCustomAttribute(property.GetType(), typeof(DisplayNameAttribute)) as DisplayNameAttribute;                 string displayName;                 if (propName != null)                 {                     displayName = propName.DisplayName;                 }                 else                 {                     displayName = property.Name;                 }                 object attrs = property.GetCustomAttributes(true);                 DescriptionAttribute propertyDescription = attrs as DescriptionAttribute;                 if (property.PropertyType.IsEnum)                 {                     ComboBoxProperty comboProperty = new ComboBoxProperty();                     comboProperty.ComboDisplayName = displayName;                     comboProperty.propertyComboBox.ValueMember = displayName;                     comboProperty.propertyComboBox.DataSource = Enum.GetNames(property.PropertyType);                     comboProperty.propertyComboBox.DataBindings.Add(new Binding("SelectedValue",obj, displayName));                     comboProperty.Description = "test";                     comboProperty.Top = _PropertyPosition;                     _PropertyPosition += comboProperty.Height;                     propertyPanel.Controls.Add(comboProperty);                 }                 else                 {                     TextBoxProperty textBoxProperty = new TextBoxProperty();                     //if (property.PropertyType == typeof(string))                     //{                     textBoxProperty.TextDisplayName = displayName;                     textBoxProperty.valueTb.DataBindings.Add(new Binding("Text", obj, displayName));                     textBoxProperty.Description = "test";// propertyDescription.Description;                     textBoxProperty.Top = _PropertyPosition;                     _PropertyPosition += textBoxProperty.Height;                     propertyPanel.Controls.Add(textBoxProperty);                     //}                 }             }         }     }      private Label DisplayCategory(string groupName)     {         Label groupLabel = new Label();         groupLabel.ForeColor = SystemPens.ControlLightLight.Color;         groupLabel.BackColor = SystemPens.ControlDark.Color;         groupLabel.TextAlign = ContentAlignment.MiddleLeft;         groupLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));         groupLabel.Text = groupName;         groupLabel.Width = propertyPanel.Width;         groupLabel.Anchor = AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Top;         groupLabel.Top = _PropertyPosition;         _PropertyPosition += groupLabel.Height;         return groupLabel;     } } </code></pre>  <p>This Form that call the UserControl </p>  <pre><code>public partial class Form1 : Form {     public Form1()     {         InitializeComponent();     }      private void Form1_Load(object sender, EventArgs e)     {       List&lt;TestObject&gt; testObject = new List&lt;TestObject&gt;();        testObject.Add(new TestObject() { TestString = "testing1", TestEnum = TestObject.MyEnum.A });       testObject.Add(new TestObject() { TestString = "testing2", TestEnum = TestObject.MyEnum.B });         foreach(var obj in testObject)         {             propertyGrid1.DisplayProperties(obj);         }      }   } public class TestObject {     [Browsable(true)]     //[CategoryOrder("Beam Parameters", 2)]     [DisplayName("Test String")]     [Description("testString description")]     public string TestString { get; set; }     //public int TestInteger { get; set; }     //public double TestDouble { get; set; }     public enum MyEnum     {         A,         B     }     private MyEnum m_cycleMode = MyEnum.A;     [Browsable(true)]     [DisplayName("Cycle Mode")]     [Description("Specifies how this process step is processed")]     public MyEnum TestEnum { get { return m_cycleMode; } set { m_cycleMode = value; } }   } </code></pre>  <p>the issue is when I load the application combobox is not selecting the initial value and when I change it, it will call the property MyEnum and get the result but not displaying the selected value the value go to blank again </p>  <p>any ideas </p>