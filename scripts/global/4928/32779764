<p>How would you solve this?</p>  <blockquote>   <p>You have 2 arrays, each with n numbers, n &lt;= 500.  You can choose one number from   the first three in first array and multiple it with first number in   second array. Continue doing this until every number is used. Write   the biggest possible sum of these multiples.</p> </blockquote>  <p>For example: </p>  <pre><code>n = 4; first array contains : 16 6 2 10 second array contains : 3 8 12 9 Output : 336 </code></pre>  <blockquote>   <p>For first number from second array - 3 - you can choose from 16,6 and   2. Best option is to choose 2. Sum is now 3 * 2 = 6;<br>    For second number from second array - 8 - you can choose from 16,6,10 (number 2 is   already used). Best option is to choose 6. Add 8 * 6 to sum, so sum is   now 54.<br>   For third number from second array - 12 you can choose from   16,10 (number 2 and 6 are already used). Best option is to choose 16.   Add 12 * 16 to sum, so sum is now 246.<br>   For last number from second   array - 9 - you can choose only 10.Add 9 * 10 to sum, so sum is now   336.</p> </blockquote>  <p>I had few ideas, but every one of them was wrong. For example I tried to sort both arrays and then biggest number in second array multiply with biggest possible number in  first array (because 1. number in second array can choose only from 1.-3. position in first array, second number can choose only from 1.-4. etc.), but this isn't right. Also I have some more solutions, but too hard for me to explain them, because I don't know how to express it in English(But I could post a code and try to explain it) , and they also aren't right.<br> EDIT: I have found some algorithms that may be solution for my problem. First is <a href="https://en.wikipedia.org/wiki/Hungarian_algorithm" rel="nofollow">Hungarian algorithm</a>, second is <a href="https://agtb.wordpress.com/2009/07/13/auction-algorithm-for-bipartite-matching/" rel="nofollow">Auction Algorithm</a>. This is my first contact with linear programming... I understand how Hungarian algorithm works, but I can't implement it. In Auction algorithm I'm not even sure how it works. Also, I don't know if they are fast enough. Hungarian algorithm's time complexity is O(n^3) and I in my case n &lt;= 500, so for maximum n it might last too long. Also in <a href="https://en.wikipedia.org/wiki/Assignment_problem" rel="nofollow">Assignment problem</a> every "worker" can do every "job", but in my case it isn't true.<br> It maybe can be <a href="http://www.geeksforgeeks.org/maximum-bipartite-matching/" rel="nofollow">Max flow problem</a>,but I'm not so sure about this, because I need a perfect matching - it means that every vertex is matched - and I don't know if it is guaranteed by this algorithm.   </p>