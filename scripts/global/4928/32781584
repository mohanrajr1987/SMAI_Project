<p>example documents:</p>  <pre><code>{     "_id" : ObjectId("56015cbb4a081e5f208b5cd6"),     "points" : NumberLong(21),     "date" : ISODate("2007-05-25T22:00:00.000Z"), }, {     "_id" : ObjectId("56015cbb4a081e5f208b5cd6"),     "points" : NumberLong(12),     "date" : ISODate("2007-05-26T22:00:00.000Z"), }, {     "_id" : ObjectId("56015cbb4a081e5f208b5cd6"),     "points" : NumberLong(9),     "date" : ISODate("2007-06-25T22:00:00.000Z"), }, {     "_id" : ObjectId("56015cbb4a081e5f208b5cd6"),     "points" : NumberLong(15),     "date" : ISODate("2007-07-25T22:00:00.000Z"), }, </code></pre>  <p>my aggregation so far:</p>  <pre><code>db.points.aggregate([                   {         $group: {                         _id: { year : "$year", month : "$week" },             points: { $sum: "$points" },         }             }, ]); </code></pre>  <p>the current result looks like this:</p>  <pre><code>    {         "_id" : {             "year" : 2007,             "month" : 5         },         "points" : NumberLong(33),  // 21 + 12     },      {         "_id" : {             "year" : 2007,             "month" : 6         },         "points" : NumberLong(9),     },      {         "_id" : {             "year" : 2007,             "month" : 7         },         "points" : NumberLong(15),     },  </code></pre>  <p>however, i need the total sum based on the previous row too, but i dont know how to do that or if this is even possible. the result shoult look something like this:</p>  <pre><code>    {         "_id" : {             "year" : 2007,             "month" : 5         },         "points" : NumberLong(33),         "points_total": NumberLong(33),      },      {         "_id" : {             "year" : 2007,             "month" : 6         },         "points" : NumberLong(9),         "points_total": NumberLong(42), // 33 + 9     },      {         "_id" : {             "year" : 2007,             "month" : 7         },         "points" : NumberLong(15),         "points_total": NumberLong(57), // 42 + 15     },  </code></pre>  <p>Has anyone an idea if such a result can be achieved using the aggregate framework, if so how to do that. What would be an alternative approach in case this can't be done using aggregations?</p>  <p>I am currently using MongoDB 2.6.10 but I would upgrade to 3.x if a solution is only available for MongoDB 3.</p>