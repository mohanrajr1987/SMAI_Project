<p>I have an application where I need to sum across arbitrary groups of indices in a 3D NumPy array. The built-in NumPy array sum routine sums up all indices along one of the dimensions of an ndarray. Instead, I need to sum up ranges of indices along one of the dimensions in my array and return a new array.</p>  <p>For example, let's assume that I have an ndarray with shape <code>(70,25,3)</code>. I wish to sum up the first dimension along certain index ranges and return a new 3D array. Consider the sum from <code>0:25, 25:50</code> and <code>50:75</code> which would return an array of shape <code>(3,25,3)</code>. </p>  <p>Is there an easy way to do "disjoint sums" along one dimension of a NumPy array to produce this result?</p>