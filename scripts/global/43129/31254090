<p>I have a WPF application where I have two windows. One is for <strong>listing</strong> objects (e.g. Books) and the other one is a form for <strong>editing</strong> one object (e.g. a Book). I create a new EF context for each of the windows. </p>  <p>Now I wonder, is there a way I can detect in the <strong>list</strong> window that a context has been edited after I call <code>SaveChanges</code> in the <strong>edit</strong> window?</p>  <p>What I do at the moment is to have a public <code>Update</code> method on my <strong>list</strong> window object that I call from the <strong>edit</strong> window after <code>SaveChanges</code> is called and in that function I call for the context refresh. However that is not scalable as I would need to keep track of all the windows that depend on Book information (e.g. if I add Shelves list I would need to make sure to update that one as well). </p>  <p>Any suggestions on how to solve this in more modular fashion?</p>  <p>P.S. The funny part is that I seemed to have had an idea of how to improve this 2 years ago when I first wrote this code as I made a comment for myself: "TODO: solve this differently by having events in ArTresorEntities". But I don't remember what I meant.</p>