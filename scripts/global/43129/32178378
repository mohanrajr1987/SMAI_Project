<p>Based on a number of posts here on SO, I am trying to create an extension method for AutoMapper so that for all my EF 4.0 business objects, all the EF-relevant properties of types <code>EntityReference&lt;T&gt;</code> and <code>EntityCollection&lt;T&gt;</code> are excluded from a mapping.</p>  <p>I have come up with this code:</p>  <pre><code>public static class IgnoreEfPropertiesExtensions {     public static IMappingExpression&lt;TSource, TDestination&gt; IgnoreEfProperties&lt;TSource, TDestination&gt;(         this IMappingExpression&lt;TSource, TDestination&gt; expression) {         var sourceType = typeof (TSource);          foreach (var property in sourceType.GetProperties()) {             // exclude all "EntityReference" and "EntityReference&lt;T&gt;" properties             if (property.PropertyType == typeof(EntityReference) ||                  property.PropertyType.IsSubclassOf(typeof(EntityReference)))             {                 expression.ForMember(property.Name, opt =&gt; opt.Ignore());             }              // exclude all "EntityCollection&lt;T&gt;" properties             if (property.PropertyType == typeof(EntityCollection&lt;&gt;))             {                 expression.ForMember(property.Name, opt =&gt; opt.Ignore());             }         }          return expression;     } } </code></pre>  <p>but somehow, while it works just fine the <code>EntityReference&lt;T&gt;</code> properties, for the collection, this doesn't do what it should do - AutoMapper still tries to map the <code>EntityCollection&lt;MySubEntity&gt;</code> and crashes on attempting this....</p>  <p>How can I properly catch all the <code>EntityCollection&lt;T&gt;</code> properties? I don't really care about what the subtype <code>&lt;T&gt;</code> is - I don't want to specify that, <strong>all</strong> properties of type <code>EntityCollection&lt;T&gt;</code> (regardless of what the collection contains) need to be excluded from the mapping.</p>  <p>Any ideas?</p>