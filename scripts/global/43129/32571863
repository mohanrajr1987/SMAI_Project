<p>I have already combed through this old article: <a href="http://stackoverflow.com/questions/686554/why-is-entity-framework-taking-30-seconds-to-load-records-when-the-generated-que][1]">Why is Entity Framework taking 30 seconds to load records when the generated query only takes 1/2 of a second?</a> but no success.</p>  <p>I have tested the query:</p>  <ul> <li>without lazy loading (not using .Include of related entities) and</li> <li>without merge tracking (using AsNoTracking)</li> </ul>  <p>I do not think I can easily switch to compiled queries in general due to the complexity of queries and using a Code First model, but let me know if you experience otherwise...</p>  <p><strong>Setup</strong></p>  <ul> <li>Entity Framework '4.4' (.Net 4.0 with EF 5 install)</li> <li>Code First model and DbContext</li> <li>Testing directly on the SQL Server 2008 machine hosting the database</li> </ul>  <p><strong>Query</strong> - It's just returning simple fields from one table:</p>  <pre><code>SELECT  [Extent1].[Id] AS [Id],  [Extent1].[Active] AS [Active],  [Extent1].[ChangeUrl] AS [ChangeUrl],  [Extent1].[MatchValueSetId] AS [MatchValueSetId],  [Extent1].[ConfigValueSetId] AS [ConfigValueSetId],  [Extent1].[HashValue] AS [HashValue],  [Extent1].[Creator] AS [Creator],  [Extent1].[CreationDate] AS [CreationDate] FROM [dbo].[MatchActivations] AS [Extent1] </code></pre>  <ul> <li>The MatchActivations table has relationships with other tables, but for this purpose using explicit loading of related entities as needed.</li> </ul>  <p><strong>Results</strong> (from SQL Server Profiler)</p>  <ul> <li>For Microsoft SQL Server Management Studio Query: CPU = 78 msec., Duration = 587 msec.</li> <li>For EntityFrameworkMUE: CPU = 31 msec., <strong>Duration = 8216 msec.!</strong></li> </ul>  <p>Does anyone know, besides suggesting the use of compiled queries if there is anything else to be aware of when using Entity Framework for such a simple query?</p>