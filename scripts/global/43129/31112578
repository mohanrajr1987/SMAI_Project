<p>I am trying to update EF from 4.x to 6.x (newest stable via nuget). After some work the application works for data retrieval but not for save.<br> For performance reasons we mostly used the "AttachAsModified" method from EF 4.x. In most cases we have the primary key, attach, modify the values we want to update and finally save.<br> EF 6.x does not have such a method so I tried the following: </p>  <pre><code>var data = new CatalogNode {     CatalogNodeId = catalogNodeId,     UpdatedOn = updatedOn,     UpdatedBy = updatedBy,  };    CatalogNodes.Attach(data);   var entry = Entry(data);   entry.Property(e =&gt; e.UpdatedOn).IsModified = true;   entry.Property(e =&gt; e.UpdatedBy).IsModified = true; </code></pre>  <p>Unfortunately EF throws a "DbEntityValidationException" that says that some additional properties are required and need to be set.</p>  <p>Edit:<br> Here is the generated CatalogNodes entity (setter includes call to OnPropertyChanged) </p>  <pre><code>public partial class CatalogNode : INotifyPropertyChanged {     public event PropertyChangedEventHandler PropertyChanged;      public CatalogNode()     {         this.CatalogArticles = new HashSet&lt;CatalogArticle&gt;();         this.LocalizedCatalogNodes = new HashSet&lt;LocalizedCatalogNode&gt;();         this.CatalogNodeAttributeValues = new HashSet&lt;CatalogNodeAttributeValue&gt;();         this.CatalogNodeMappings = new HashSet&lt;CatalogNodeMapping&gt;();         this.TranslatedCatalogNodeNames = new HashSet&lt;TranslatedCatalogNodeName&gt;();         this.CatalogNodeMediaAssets = new HashSet&lt;CatalogNodeMediaAsset&gt;();     }      private System.Guid _catalognodeid;     public System.Guid CatalogNodeId  {get;set;}      private string _catalognodeuid;     public string CatalogNodeUid  {get;set;}      private System.Guid _catalogid;     public System.Guid CatalogId  {get;set;}      private int _catalognodetype;     public int CatalogNodeType  {get;set;}      private Nullable&lt;System.Guid&gt; _parentid;     public Nullable&lt;System.Guid&gt; ParentId  {get;set;}      private Nullable&lt;System.Guid&gt; _linkid;     public Nullable&lt;System.Guid&gt; LinkId  {get;set;}      private int _sequence;     public int Sequence  {get;set;}      private Nullable&lt;System.Guid&gt; _attributegroupid;     public Nullable&lt;System.Guid&gt; AttributeGroupId  {get;set;}      private string _printcatalogtemplateuid;     public string PrintCatalogTemplateUid  {get;set;}      private bool _printcatalogpagebreak;     public bool PrintCatalogPageBreak  {get;set;}      private System.DateTime _createdon;     public System.DateTime CreatedOn  {get;set;}      private string _createdby;     public string CreatedBy  {get;set;}      private System.DateTime _updatedon;     public System.DateTime UpdatedOn  {get;set;}      private string _updatedby;     public string UpdatedBy {get;set;}       public virtual AttributeGroup AttributeGroup { get; set; }     public virtual Catalog Catalog { get; set; }     public virtual ICollection&lt;CatalogArticle&gt; CatalogArticles { get; set; }     public virtual ICollection&lt;LocalizedCatalogNode&gt; LocalizedCatalogNodes { get; set; }     public virtual ICollection&lt;CatalogNodeAttributeValue&gt; CatalogNodeAttributeValues { get; set; }     public virtual CatalogNode LinkedCatalogNode { get; set; }     public virtual ICollection&lt;CatalogNodeMapping&gt; CatalogNodeMappings { get; set; }     public virtual ICollection&lt;TranslatedCatalogNodeName&gt; TranslatedCatalogNodeNames { get; set; }     public virtual ICollection&lt;CatalogNodeMediaAsset&gt; CatalogNodeMediaAssets { get; set; }      public void OnPropertyChanged(string propertyName)     {         if(PropertyChanged != null)             PropertyChanged(this, new PropertyChangedEventArgs(propertyName));     } } </code></pre>  <p>The error messages I get are like:<br>  - <em>"Validation failed for one or more entities. See 'EntityValidationErrors' property for more details."</em><br>  - <em>"The field \"CreatedBy\" is required."</em>  </p>  <p>First question: Where can I see or set which fields are requiered? We currently use a database first approach.<br> Second question: Is there a workaround? The resulting update query does not update those additional properties. Of course I could set these additional properties to some random values and mark these properties as unchanged but there has to be a better way I hope.</p>  <p>Thanks for your help!</p>