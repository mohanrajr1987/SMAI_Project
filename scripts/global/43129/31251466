<p>Here is a diagram of what I'm looking for first off:</p>  <p><img src="http://i.stack.imgur.com/Qomly.jpg" alt="Diagram of Generic Object"> So I have the MainObject, and the main object could be related to EntityA, EntityB, OR EntityC.  As an example...</p>  <p>Let's say MainObject is an invoice.  EntityA, EntityB, and EntityC are all different entities that can be invoiced. So I have the following options:</p>  <p><strong>(A)</strong> I can have EntityA_Id, EntityB_Id, EntityC_Id columns on the MainObject table to relate with.</p>  <p><strong>(B)</strong> I can have Entity_Id and EntityType_Id on the MainObject table that tells me if EntityType_Id = 1 then I need the EntityA object with Id of Entity_Id. </p>  <p>With <strong>A</strong> I can use simple <code>MainObject.Include("EntityA").Include("EntityB").Include("EntityC")..</code> when retrieving the MainObject through Entity Framework - however I then have to do null checks on everything to find out exactly what it is that is tied to MainObject.</p>  <p>With <strong>B</strong> is it possible to do something similar to A so that I don't have at multiple null fields for every MainObject object when trying to figure out what it is related to?</p>  <p>This is similar to <a href="http://stackoverflow.com/questions/19080192/how-to-relate-table-with-one-of-many-others">How to relate table with one of many others?</a> but as I understand it, that is trying to relate many to many through a linker table, whereas each MainObject will be related to one of A, B, or C (and A, B, and C can be related to many MainObjects).  To use the linked question as an example, one order would be linked to one hosting OR one domain, and would go through the type table.</p>