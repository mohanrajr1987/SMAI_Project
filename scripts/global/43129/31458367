<p>I recently had cause to bring back just a single value in addition to tabular data returned by my stored procedure.  Since EF doesn't support stored procedures with multiple result sets, I figured I could accomplish this via an output parameter.  However, using this method I encountered an issue where in I was getting only rounded values back for some numeric value fields.</p>  <p>The parameter to my stored procedure was declared as:</p>  <pre class="lang-sql prettyprint-override"><code>@MyValue    numeric(19,6) output </code></pre>  <p>When calling the mapping function, I had:</p>  <pre class="lang-cs prettyprint-override"><code>var myValue = new ObjectParameter("MyValue", typeof(decimal)); List&lt;MyResultItem&gt; results = this.ObjectContext.CallMyStoredProc(someId, myValue).ToList(); </code></pre>  <p>This is what always returned the value rounded to an integer (i.e., scale zero).</p>  <p>I was first able to fix this by manually editing the underlying XML to the .edmx by manually adding Precision and Scale attributes:</p>  <pre class="lang-xml prettyprint-override"><code>&lt;Parameter Name="MyValue" Type="numeric" Mode="InOut" Precision="19" Scale="6" /&gt; </code></pre>  <p>This was, not surprisingly, completely discarded the next time I performed "Update Model from Database.."</p>  <p>I seem to have fixed it more reliably by updating my declaration for the <code>ObjectParameter</code> as such:</p>  <pre class="lang-cs prettyprint-override"><code>var myValue = new ObjectParameter("MyValue", 999999999.999999M); </code></pre>  <p>However, this seems an awful lot like a hack, and I'm worried about issues in the future (even if it's just maintenance regarding this magic number).  Is there a better, and reliable, way to use output parameters within Entity Framework?</p>