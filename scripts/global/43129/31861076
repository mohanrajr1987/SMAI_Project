<p>I stumbled on a problem after a migration from EF4.1 to EF6.</p>  <p>To simplify I created the example below. The problem is that on the call <code>ctx.SaveChanges();</code> <code>p.CityId</code> gets populated with the correct value, but not <code>p.CityId2</code>.</p>  <p>If after the creation of the City entity I call the <code>ctx.SaveChanges()</code> the <code>p.CityId2</code> is set correctly.</p>  <p>On EF4.1 the code below sets the <code>p.CityId2</code>correctly without the intermediate <code>ctx.SaveChanges()</code>.</p>  <p>Any idea why this happens and what I should do in this case except the intermediate <code>ctx.SaveChanges()</code>. Why does EF correctly propagates the CityId but not the CityId2 ?</p>  <pre><code>class Program {     static void Main(string[] args)     {         using (MyContext ctx = new MyContext())         {             City c = new City() { Id2 = 32767 };             ctx.Set&lt;City&gt;().AddOrUpdate(c);              Person p = new Person() { Id2 = 32767 };             p.City = c;             ctx.Set&lt;Person&gt;().AddOrUpdate(p);              ctx.SaveChanges();         }     } }  class City {     [DatabaseGenerated(DatabaseGeneratedOption.Identity)]     public int Id { get; set; }     public int Id2 { get; set; } }  class Person {     [DatabaseGenerated(DatabaseGeneratedOption.Identity)]     public int Id { get; set; }     public int Id2 { get; set; }      public int CityId { get; set; }     public int CityId2 { get; set; }     public City City { get; set; } }  internal sealed class CityConfiguration : EntityTypeConfiguration&lt;City&gt; {     public CityConfiguration()     {         HasKey(t =&gt; new { t.Id, t.Id2 });     } }  internal sealed class PersonConfiguration : EntityTypeConfiguration&lt;Person&gt; {     public PersonConfiguration()     {         HasKey(t =&gt; new { t.Id, t.Id2 });     } }  class MyContext : DbContext {     public MyContext()     {         Database.SetInitializer(new DropCreateDatabaseIfModelChanges&lt;MyContext&gt;());     }      protected override void OnModelCreating(DbModelBuilder modelBuilder)     {         modelBuilder.Configurations.Add(new CityConfiguration());         modelBuilder.Configurations.Add(new PersonConfiguration());     } } </code></pre>