<p>I have an older binary executable (utserver, closed source) that I'm trying to run on a system running Fedora 22. </p>  <p>utserver wants openssl_1.0.0 - F22 provides openssl_1.0.1k</p>  <p>I made two symlinks:</p>  <pre><code>$ sudo ln -s /usr/lib64/libssl.so.1.0.1k /usr/lib64/libssl.so.1.0.0 $ sudo ln -s /usr/lib64/libcrypto.so.1.0.1k /usr/lib64/libcrypto.so.1.0.0 </code></pre>  <p>But trying to run utserver complains about library version:</p>  <pre><code>$ ./utserver ./utserver: /lib64/libcrypto.so.1.0.0: version `OPENSSL_1.0.0' not found (required by ./utserver) ./utserver: /lib64/libssl.so.1.0.0: version `OPENSSL_1.0.0' not found (required by ./utserver) </code></pre>  <p>OK, so it's looking for a version string. I edited the utserver ELF to change the string OPENSSL_1.0.0 to OPENSSL_1.0.1 but I get the same error (`OPENSSL_1.0.1' not found)</p>  <p>objdump and readelf both show OPENSSL_1.0.1 present in version area of libssl.so.1.0.1: </p>  <pre><code>$ objdump -p /lib64/libssl.so.1.0.1 | grep OPENSSL 3 0x00 0x066a2b21 OPENSSL_1.0.1 4 0x00 0x02b21533 OPENSSL_1.0.1_EC 0x02b21533 0x00 07 OPENSSL_1.0.1_EC </code></pre>  <p>so now I'm confused as to what utserver is actually checking for. I suspect it's seeing OPENSSL_1.0.1_EC and failing. If I add the _EC in the ELF I get a seg fault, presumably because now my offsets are all wrong.</p>  <pre><code>$ readelf -d ./utserver  readelf: Error: Unable to seek to 0x15da90000000 for string table readelf: Error: no .dynamic section in the dynamic segment  Dynamic section at offset 0x154fb8 contains 34 entries: </code></pre>  <p>Is there any way to tell ld-linux to force load OPENSSL_1.0.1_EC and/or a reference to modifying ELF offsets? Would be much appreciated.</p>  <p>Yes, I know I can find a version of openssl_1.0.0 packaged somewhere, but that's one library I'd rather not revert if I don't have to.</p>