<p><strong>Background</strong></p>  <p>I inherited and maintain a Linux shared library that is very closely coupled with specific hardware; let's call it <code>libfoo.so.0.0.0</code>.  This library has been around for some time and "just worked".  This library has now become a dependency for several higher-layer applications.</p>  <p>Now, unfortunately, new hardware designs have forced me to create symbols with wider types, thereby resulting in <code>libfoo.so.0.1.0</code>.  There have been only additions; no deletions or other API changes.  The original, narrow versions of the updated symbols still exist in their original form.</p>  <p>Additionally, I have an application (say, <code>myapp</code>) that depends on <code>libfoo</code>.  It was originally written to support the <code>0.0.0</code> version of the library but has now been reworked to support the new <code>0.1.0</code> APIs.</p>  <p>For backwards compatibility reasons, I would like to be able to build <code>myapp</code> for either the old or new library via a compile flag.  The kernel that a given build of <code>myapp</code> will be loaded on will always have exactly one version of the library, known at compile time.</p>  <p><strong>The Question</strong></p>  <p>It is very likely that <code>libfoo</code> will be updated again in the future.</p>  <ol> <li><p>When building <code>myapp</code>, is it possible to specify a <em>minimum</em> version of <code>libfoo</code> to link against based on a build flag?</p></li> <li><p>I know it is possible to specify the library name directly on the build CLI.  Will this cause <code>myapp</code> to require <em>exactly</em> that version or will later versions of the lib with the same major revision still be able to link against it (ex. <code>libfoo.so.0.2.0</code>)?  I am really hoping to not have to update every dependent app's build each time a new minor version is released.</p></li> <li><p>Is there a more intelligent way of accomplishing this in an application-agnostic way?</p></li> </ol>  <p><strong>References</strong></p>  <p><a href="http://stackoverflow.com/questions/828053/how-do-you-link-to-a-specific-version-of-a-shared-library-in-gcc?lq=1">How do you link to a specific version of a shared library in GCC</a></p>