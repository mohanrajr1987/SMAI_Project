<p>I built my shared library(I use a lib calculating the fibonacci number for example) myself and want to use it in my another c++ project built by <code>CMake</code></p>  <p>Let's say the shared library and headers located in <code>/path/to/my/lib</code>, the shared library <code>libfib.so</code> is in <code>/path/to/my/lib/lib</code> and the header <code>fib.h</code> is in <code>/path/to/my/lib/include</code> and my own project located in <code>/path/to/my/project</code></p>  <p>Here is my original <code>CMakeLists.txt</code>:</p>  <pre><code>cmake_minimum_required(VERSION 3.2) project(learn-lib) set(CMAKE_CXX_FLAGS "-std=c++11 ${CMAKE_CXX_FLAGS}") set(FIB_INCLUDE "${FIB_PREFIX}/include") set(FIB_LIB "${FIB_PREFIX}/lib") set(EXE mybin) include_directories(${FIB_INCLUDE}) link_directories(${FIB_LIB}) add_executable(${EXE} main.cpp) target_link_libraries(${EXE} fib) install(TARGETS ${EXE} RUNTIME DESTINATION bin) </code></pre>  <p>And I use this script to build and install my project:</p>  <pre><code>mkdir -p build_dir cd build_dir cmake -DFIB_PREFIX=/path/to/my/lib \       -DCMAKE_INSTALL_PREFIX=/path/to/my/project \       .. make make install cd .. </code></pre>  <p>Now, after running the install script, I got two executables, one in <code>build_dir</code>, one in the install location <code>path/to/my/project/bin</code>, when running the program in <code>build_dir</code>, everything is fine, but when running the installed program, I get:</p>  <blockquote>   <p>./bin/mybin: error while loading shared libraries: libfib.so: cannot open shared object file: No such file or directory</p> </blockquote>  <p>After some searching on google and stackoverflow, I knew it seems that <code>CMake</code> removed the runtime search path that is tied to the executable when building. I now know two ways to get it around:</p>  <ol> <li>Add the library path where <code>libfib.so</code> locates to the environment variable <code>LD_LIBRARY_PATH</code></li> <li>Add <code>set_target_properties(${EXE} PROPERTIES INSTALL_RPATH_USE_LINK_PATH TRUE)</code> into my <code>CMakeLists.txt</code></li> </ol>  <p>So, my questions are:</p>  <ol> <li>Why is <code>CMake</code> designed so? When installing, why would it remove runtime path from executables instead of just copying the built executables to the install destination or whatever keeping the link path for the installed program?</li> <li>Which way is the best practice(or is there a best practice) to eliminate this problem? To set the environment or to add <code>set_target_properties(...)</code> into <code>CMakeLists.txt</code> ?</li> </ol>