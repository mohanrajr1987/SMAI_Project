<p>[I am under mac OS X 10.10.5, using gnu 5.2's <code>g++</code> designed by <code>g++-5.2.0</code> afterwards. I am using in the following <em>text</em> interchangeably <code>so</code> (linux) and <code>dylib</code> (mac os x) extensions for shared libraries.]</p>  <p>I have a shared library libshared2.so that</p>  <ul> <li>was <em>compiled</em> by linking to another shared library libshared1.so (both shared libraries are compiled by myself)</li> <li>is <em>used</em> in two "executables" : in an excel file calling a function defined in the VBA of Excel-2011 for mac and using libshared2.so's function, or in a command-line executable <code>docalc</code> compiled by linking to libshared2.so</li> </ul>  <p>(details of compilations, referecements in VBA etc can be given if needed, I just didn't want to put them here as the question is almost already tl;dr;)</p>  <p><strong>1)</strong> All excel, .o, .h, .so/.dylib and Makefile files are in the same directory.</p>  <p><strong>1) a)</strong> Double clicking the <code>docalc</code> to run it or the excel file to run the calculation in it always yields about complaints (by VBA or by dyld) about libshared2.so not being found, having put an </p>  <pre><code>export DYLD_LIBRARY_PATH=/path/to/libshared1/:$DYLD_LIBRARY_PATH  </code></pre>  <p>(yeah, libshared1, not libshared2, even if complaints are about the latter, see further below) in my <code>.bash_profile</code> or not.</p>  <p><strong>1) b)</strong> Do the previous export in bash (or having put it in <code>.bash_profile</code>) and running after the excel file or the command-line executable in the command line (not by double cliking them anymore) makes everything go as intended, without complaint.</p>  <p><strong>2)</strong> Now the executable (the excel file or the <code>docalc</code> command-line executable) is a some place <code>/.../placeexe</code>, whereas <code>/.../placesharelibs/</code> is a place that can contain either libshared2.so or libshared1.so or both of them.</p>  <p><strong>2) a)</strong> No miracle, double-clicking still leads, in both cases (excel or command line exectuable), to complaints of the same kind as stated below.</p>  <p><strong>2) b)</strong> doing an</p>  <pre><code>export DYLD_LIBRARY_PATH=/.../placesharelibs/:$DYLD_LIBRARY_PATH </code></pre>  <p>and <em>running in the command-line</em> leads to the following :</p>  <ul> <li>in the case of the <code>docalc</code> command-line executable, I have complaint about libshared2.so not being found if and only if i do not put both libshared2.so <em>and</em> libshared1.so in <code>/.../placesharelibs/</code>.</li> <li>in the case of the excel file ran in command-line, I have complaint about libshared2.so not being found if and only if i do not put libshared1.so in <code>/.../placesharelibs/</code>.</li> </ul>  <p>Why this difference in behaviour ? How could I achive the following : incorporate somehow the <code>export DYLD_LIBRARY_PATH=/.../placesharelibs/:$DYLD_LIBRARY_PATH</code> "into" the double-clicking so that my users could not worry about anything except double-clicking ?</p>  <p>Precision : I don't want to use static libraries.</p>