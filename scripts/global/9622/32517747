<p>I'd like to create database tables with a 3 way relationship using code first and the fluent api. </p>  <p>In my contrived example, a Team should have a unique combination of a Cat, a Dog, and a Pig. Another team could contain the same Cat and Pig, but not the same Dog and so on. </p>  <p>Firstly, I'd like to be able to get the teams containing a specific animal. <code>myCat.Teams()</code> And if possible I'd like to enforce uniqueness too.</p>  <pre><code>public class Cat {     public int Id { get; set; }     public virtual ICollection&lt;Team&gt; Teams { get; set; } } public class Dog {     public int Id { get; set; }    public virtual ICollection&lt;Team&gt; Teams { get; set; } } public class Pig {     public Guid { get; set; }    public virtual ICollection&lt;Team&gt; Teams { get; set; } }  public class Team {     public int Id { get; set; }     public int CatId { get; set; }     public int DogId { get; set; }     public Guid PigId { get; set; }      public virtual Cat Cat {get; set;}     public virtual Dog Dog {get; set;}     public virtual Pig Pig {get; set;} } </code></pre>  <p>In OnModelCreating(), EntityTypeConfigurations are added for these objects (CatMap, DogMap, PigMap, TeamMap). </p>  <p>I've tried setting up HasMany relationships from the TeamMap class, and alternatively from the other direction. For example, in DogMap:</p>  <pre><code>        HasMany(t =&gt; t.Teams)         .WithRequired(t =&gt; t.Dog)         .HasForeignKey(t =&gt; t.DogId); </code></pre>  <p>but whenever I try to Add-Migration, I get errors like:  </p>  <p>tSystem.Data.Entity.Edm.EdmAssociationConstraint: : The number of properties in the Dependent and Principal Roles in a relationship constraint must be identical.</p>  <p>How can I set up these associations correctly to achieve the two goals above?  Thanks!!</p>