<p>I am making an app with Rails 4.</p>  <p>I am trying to understand how to work with associations and to show attributes from associated models. I'm struggling to grasp the concepts.</p>  <p>I have a project model and a project_invitations model.</p>  <p>The associations are:</p>  <pre><code>Projects has many project invitations Project invitations belong to project </code></pre>  <p>In my project_invitation show, I am trying to display the project attributes as well as the project creator attributes (stored in user profiles table).</p>  <p>I am getting stuck.</p>  <p>In project_invitation show, I have:</p>  <pre><code>You're invited to participate in &lt;%= project_invitation.project.title %&gt; </code></pre>  <p>I have also tried: </p>  <pre><code>You're invited to participate in &lt;%= @project_invitation.project.title %&gt; </code></pre>  <p>When I try ^^ I get this error:</p>  <pre><code>undefined method `title' for nil:NilClass </code></pre>  <p>In my project table, I have an attribute called :title.</p>  <p>I want the project invitation show to show the name of the project to which the invitee has been invited.</p>  <p>What's wrong with the way I've tried to do it?</p>  <p>My project_invitations controller has the following (generated by scaffold):</p>  <pre><code>class ProjectInvitationsController &lt; ApplicationController   before_action :set_project_invitation, only: [:show, :edit, :update, :destroy]    # GET /project_invitations   # GET /project_invitations.json   def index     @project_invitations = ProjectInvitation.all   end    # GET /project_invitations/1   # GET /project_invitations/1.json   def show   end    # GET /project_invitations/new   def new     @project_invitation = ProjectInvitation.new   end    # GET /project_invitations/1/edit   def edit   end    # POST /project_invitations   # POST /project_invitations.json   def create     @project_invitation = ProjectInvitation.new(project_invitation_params)      respond_to do |format|       if @project_invitation.save         format.html { redirect_to @project_invitation, notice: 'Project invitation was successfully created.' }         format.json { render action: 'show', status: :created, location: @project_invitation }       else         format.html { render action: 'new' }         format.json { render json: @project_invitation.errors, status: :unprocessable_entity }       end     end   end    # PATCH/PUT /project_invitations/1   # PATCH/PUT /project_invitations/1.json   def update     respond_to do |format|       if @project_invitation.update(project_invitation_params)         format.html { redirect_to @project_invitation, notice: 'Project invitation was successfully updated.' }         format.json { head :no_content }       else         format.html { render action: 'edit' }         format.json { render json: @project_invitation.errors, status: :unprocessable_entity }       end     end   end    # DELETE /project_invitations/1   # DELETE /project_invitations/1.json   def destroy     @project_invitation.destroy     respond_to do |format|       format.html { redirect_to project_invitations_url }       format.json { head :no_content }     end   end    private     # Use callbacks to share common setup or constraints between actions.     def set_project_invitation       @project_invitation = ProjectInvitation.find(params[:id])     end      # Never trust parameters from the scary internet, only allow the white list through.     def project_invitation_params       if can? :create, Project,         params[:project_invitation].permit(:comment, :expiry_date, :draft, :course_credit)       elsif can? :read, ProjectInvitation         params[:project_invitation].permit(:student_accepted, :sponsor_accepted)       end     end end </code></pre>  <p>The project_invitation model has:</p>  <pre><code>class ProjectInvitation &lt; ActiveRecord::Base        belongs_to :project       belongs_to :user end </code></pre>  <p>The project model has:</p>  <pre><code>class Project &lt; ActiveRecord::Base    include RoleModel    #belongs_to :students, through: :courses, counter_cache: true    has_many :project_questions, dependent: :destroy#, through: :projects   accepts_nested_attributes_for :project_questions    has_one :sweep   accepts_nested_attributes_for :sweep    has_one :educator_project_comment   has_many :project_student_eois   belongs_to :educator   has_many :project_invitations   has_one :video   accepts_nested_attributes_for :video   has_one :finalise, through: :sweep   has_many :observations    has_one :approval_request   belongs_to :industry   belongs_to :course    has_and_belongs_to_many :users   belongs_to :creator, class_name: 'User'   has_many :profiles, through: :industry     mount_uploader :hero_image, AvatarUploader   mount_uploader :link_to_video_proposal, VideoUploader end </code></pre>  <p>In my project_invitiatons show page, I have:</p>  <pre><code>&lt;div class="containerfluid"&gt; &lt;%= render 'static/deviselinks'%&gt;   &lt;div class="row"&gt;     &lt;div class="col-md-10 col-md-offset-1"&gt;           &lt;h1 class="header-project" style="margin-bottom:10%"&gt;You're invited to participate in &lt;%= @project_invitation.project.try(:title) %&gt;&lt;/h1&gt;     &lt;/div&gt;    &lt;/div&gt;      &lt;div class="row"&gt;         &lt;div class="col-md-6 col-md-offset-1"&gt;             &lt;div class="row"&gt;                 &lt;div class="col-md-12" style="padding:5%"&gt;                      &lt;div class="invitebody"&gt;                         &lt;%= @project_invitation.comment %&gt;                     &lt;/div&gt;                 &lt;/div&gt;             &lt;/div&gt;             &lt;div class="row"&gt;                 &lt;div class="col-md-8 col-md-offset-2" style="padding:5%"&gt;                     &lt;div class="invitebody"&gt;                         If you'd like to participate in this project, reply by &lt;%= @project_invitation.expiry_date.try(:strftime, '%d %B %Y') %&gt;                         &lt;br&gt;                         &lt;%= render 'rsvp' %&gt;                     &lt;/div&gt;                 &lt;/div&gt;             &lt;/div&gt;            &lt;/div&gt;            &lt;div class="col-md-3 col-md-offset-1" style="padding: 10%"&gt;             &lt;div class="row"&gt;                 &lt;div class="col-md-12"&gt;                     &lt;% if @creator_profile.image.present? %&gt;                         &lt;%= image_tag (@creator_profile.image.profile) %&gt;                     &lt;% else %&gt;                         &lt;div class="generaltext"&gt;Image TBC&lt;/div&gt;                     &lt;% end %&gt;                 &lt;/div&gt;             &lt;/div&gt;             &lt;div class="row"&gt;                 &lt;div class="col-md-12"&gt;                     &lt;%= "#{@creator_profile.title} #{@creator.first_name} #{@creator.last_name}" %&gt;                 &lt;/div&gt;             &lt;/div&gt;             &lt;div class="row"&gt;                 &lt;div class="col-md-12"&gt;                 &lt;%= image_tag (@project.hero_image.thumb) %&gt;                 &lt;/div&gt;             &lt;/div&gt;             &lt;div class="row"&gt;                 &lt;div class="col-md-12"&gt;                     &lt;%= @project.title %&gt;                 &lt;/div&gt;             &lt;/div&gt;         &lt;/div&gt;     &lt;/div&gt;        &lt;div class="formminor"&gt;       &lt;%= link_to 'Back', project_invitations_path %&gt;     &lt;/div&gt; &lt;/div&gt; </code></pre>  <p>I put 'try' before 'title' because I am having other issues saving a new invitation. I wanted to see if that was my only problem. I was expecting the next error to be of the same kind and flagging the problem with 'comment'. It jumped over that and raised an error as:</p>  <pre><code>undefined method `image' for nil:NilClass </code></pre>  <p>That's strange to me because I'm only asking if there is one present. Also, that code comes after the question about comment and it doesn't seem to have a problem there.</p>  <p>This is all a bit confusing.</p>