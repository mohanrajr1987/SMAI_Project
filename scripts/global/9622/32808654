<p>I have the following two models in an application</p>  <pre><code>class City end  class Suburb end </code></pre>  <p>a city has exactly 5 suburbs, north, east, south, west and center. I want to reference each suburb through a correspondent method so that,  north is accessed through city.north south is accessed through city.south</p>  <p>I can add a foreign key for each suburb in the <code>cities</code> table and use <code>belongs_to</code> and <code>has_one</code> to define each association. But I find it not as intuitive as it should be. This is because a Suburb belongs_to a City and the not the inverse. so the following definition is not intuitive.</p>  <pre><code>class City   belongs_to :north, class_name: 'Suburb'   belongs_to :east, class_name: 'Suburb'   belongs_to :south, class_name: 'Suburb'   belongs_to :west, class_name: 'Suburb'   belongs_to :center, class_name: 'Suburb' end  class Suburb   has_one :city end </code></pre>  <p>this works as expected. but when you read it, its the inverse. a Suburb belongs_to City and a City has_one :north, has_one :east, has_one :south, has_one :west and has_one :center.</p>  <p>I tried also to define a <code>has_many :suburbs</code> on the <code>city</code> model, and add an enum property <code>direction</code> to the suburb model than define a method, using define_method' for each direction, but I see it over engineered.</p>  <p>Is there a way to model this properly.</p>