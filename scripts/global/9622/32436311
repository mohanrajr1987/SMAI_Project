<p>I have a <code>Project</code> model and <code>Team</code> model and <code>User</code> model through devise. The associations between the models are as follows:-</p>  <pre><code>class Project   has_many :teams, :dependent =&gt; :destroy end  class Team     belongs_to :project     belongs_to :user end  class User    has_many :teams, :dependent =&gt; :destroy end </code></pre>  <p>Teams are nested withins Projects, so every project has its own seperate group of teams.</p>  <pre><code>resources :projects do     resources :teams   end </code></pre>  <p>The teams themselves are derived from Users, so when a new team is created, it is linked to the current_user that is signed in:</p>  <pre><code>  def create     @project = Project.find(params[:project_id])     @team = @project.teams.new(team_params)     @team.user = current_user    if @team.save       redirect_to @project, notice: 'Successfully Joined Project'     else       render action: 'new'     end   end </code></pre>  <p><strong>The Problem:-</strong></p>  <p>I need the user to only have one Team per project (so he can only join a project once). I figured I could do this in the following way: </p>  <pre><code>&lt;% if @project.teams.user == current_user do %&gt;     &lt;%= link_to 'edit role', edit_project_team_path(@project), class: 'btn btn-primary' %&gt; &lt;% end %&gt; &lt;% else %&gt;     &lt;%= link_to 'Join Project', new_project_team_path(@project), class: 'btn btn-primary' %&gt; &lt;% end %&gt; </code></pre>  <p>However im getting the following error for the previous code: </p>  <pre><code>NoMethodError in Projects#show  undefined method `user' for #&lt;Team::ActiveRecord_Associations_CollectionProxy:0x5858430&gt; </code></pre>  <p>Im not sure if the problem is with my associations or if im trying to achieve this the wrong way. </p>  <p><strong>P.S</strong> think of Team as Team Member (as a team suggests a group of users however each team actually consists of one user only)</p>