<p>Can you have a <code>belongs_to</code> <code>belongs_to</code> relationship in Rails?</p>  <p><a href="http://stackoverflow.com/questions/18933994/can-belongs-to-work-without-has-many-or-has-one">Search</a> <a href="http://stackoverflow.com/questions/13436889/activerecord-do-i-need-both-belongs-to-and-has-one">results</a> gave me two results.  The fact that I can't find very much info on the subject, seems to indicate that it shouldn't be done or is bad practice.</p>  <p>I asked <a href="http://stackoverflow.com/questions/32756143/rails-associations-has-many-through-ban-archive-solution">yesterday</a> about a has_many relationship, but thought because I couldn't find information on this, I would generate a question so it is easier for people to search for this in the future.  I'm paraphrasing another users answer (I hope this is ok).</p>  <p>A Shoe can have many Socks, but only one active Sock. Other Socks are inactive. All Socks are also unique with unique patterns. I want to make sure I don't have socks with the same pattern. I think I can do this three ways</p>  <pre><code>class Sock &lt; ActiveRecord::Base   belongs_to :shoe end </code></pre>  <p>To find out if a Sock is active or inactive, give its' owner shoe a reference to its active sock like so:</p>  <pre><code>class Shoe &lt; ActiveRecord::Base   belongs_to :sock end </code></pre>  <p>Go to its owner Shoe and check if the Shoe's active sock is the current Sock or not. E.g.</p>  <pre><code>def is_active   owner_shoe.active_sock == self </code></pre>  <p>Associate them with foreign keys</p>  <pre><code>class CreateGettingDressed &lt; ActiveRecord::Migration   def change     create_table :shoes do |t|       t.belongs_to :active_sock, foreign_key: "sock_id"       t.string :size       t.timestamps null: false     end      create_table :socks do |t|       t.belongs :owner_shoe, foreign_key: "shoe_id"       t.string :pattern     end   end end </code></pre>