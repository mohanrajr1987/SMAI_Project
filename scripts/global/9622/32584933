<p>I have a table "InvoiceRows" <strong>belonging to</strong> "Products" (and many more associations). The goal was to have a versioned database, so therefore "InvoiceRows" has 2 "Products"-related fields: <code>InvoiceRows</code>.<code>product_id</code> and <code>InvoiceRows</code>.<code>product_revision</code>.</p>  <p>My initial idea was to have 2 tables for "Products": <code>Products</code> (current products) and <code>products_old</code> (older versions of products). This is working perfectly: as soon as a product is changed, the old version is copied to <code>ProductsOld</code> and the field <code>Products</code>.<code>revision</code> is incremented. To make the final association, firstly a SELECT will be executed on <code>Products</code>, and if it returns nothing, the same SELECT will be executed on <code>ProductsOld</code>.</p>  <hr>  <p>In other words:</p>  <p>I want to accomplish: <code>InvoiceRows</code> belongsTo <code>Products</code> (existing of <code>Products</code> and <code>ProductsOld</code>):</p>  <ol> <li>Check <code>Products</code> for the latest product, as it will most often be the required product</li> <li>If found, we're ready. If not, check <code>ProductsOld</code> for an older version of the product.</li> <li>If found, we're ready.</li> </ol>  <hr>  <p>However, I can't seem to get this association appropiatly setup in the xxxTable.php files. I would like to accomplish this by only changing the InvoiceRows->belongsTo(...); and Products->hasMany(...); function configurations.</p>  <p>Is this possible?</p>