<p>So i'm using modules in a personal project for the usual reasons (namespace protection and dependency handling (require) and public API definition (exports)). I wrote my own require() method and am using the standard module pattern -- i.e.:</p>  <pre><code>var myModule = (function() {    var exports = {};     function sayHello() {       return "hi";    }    exports.sayHello = sayHello;     return exports; })(); </code></pre>  <p>So i want to standardize my stuff on CommonJS standard (this is for server-side JS and my question is <em>not</em> about CommonJS versus other module standards). Everything i read about CommonJS says that a module looks like this</p>  <pre><code>function sayHello() {    return "hi"; } exports.sayHello = sayHello </code></pre>  <p>And that's it! But that's not a module. Something must be wrapping this <em>as an actual module!</em> I have not found a single site discussing CommonJS modules that says how this gets turned into an actual module. Am I missing something that everybody else seems to know? </p>  <p>So my questions are:</p>  <p>What is doing the wrapping? -- i.e., what turns it into an actual module? A library of some sort, I assume.</p>  <p>What does this final, wrapped, CommonJS module look like? I want to write an implementation of the CommonJS standard, but can't find any documentation of what that final module is supposed to look like.</p>  <p>Is the "exports" variable in the global scope? If not, what is providing the exports object to the module if it's not being explicitly declared in the body of the module code? And who's doing it - the caller of the module?</p>  <p>Dang. It seemed simple when i wrote it myself. Now it seems like magic. A link to some comprehensive documentation would be great.</p>  <p>NOTE: I know <em>very little</em> about node.js and don't intend to use it in this project, so if you answer, <em>please don't answer in node.js-speak.</em></p>  <p>thank you!</p>