<p>I have a folder within my <code>lib</code> folder that holds a module and some submodules. Simplified it looks like this:</p>  <p>Folder structure</p>  <pre><code>lib/bottles   lib/bottles/bottles.rb   lib/bottles/caps.rb   </code></pre>  <p>bottles.rb  </p>  <pre><code>module Bottles   def hello_bottles     puts "Hello Bottles"   end end </code></pre>  <p>caps.rb  </p>  <pre><code>module Bottles   module Caps     def hello_caps       puts "Hello Caps"     end   end end </code></pre>  <p>Also, in <code>config/application.rb</code> I have the following line:  </p>  <pre><code>config.autoload_paths += %W(#{config.root}/lib) </code></pre>  <p>I include the module and it's submodules in my class like so:</p>  <pre><code>class MyClass   extend Bottles   extend Bottles::Caps end </code></pre>  <p>The problem is that calling <code>MyClass.hello_caps</code> works just fine and prints <code>"Hello Caps"</code>, but calling <code>MyClass.hello_bottles</code> gives me an undefined method error:  </p>  <pre><code>NoMethodError: undefined method 'hello_bottles' for MyClass </code></pre>  <p>What is the correct syntax and configuration for extending the top level <code>Bottles</code> module so I can use its methods as class methods?</p>