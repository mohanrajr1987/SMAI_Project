<p>i using prism with c# an there i have a problem with the load of two modules. In module A is a TabControl with a ItemTemplate and ContentTemplate. Module B is a Subview of module A and is in the ContentTemplate of Module A.</p>  <p><strong>Xaml of Module A</strong></p>  <pre><code>&lt;Grid&gt;     &lt;TabControl x:Name="tabControl" ItemsSource="{Binding Folders}" SelectedItem="{Binding SelectedItem}" HorizontalAlignment="Stretch"  VerticalAlignment="Stretch"&gt;         &lt;TabControl.ItemTemplate&gt;             &lt;DataTemplate&gt;                 &lt;TextBlock Text="{Binding Name}"/&gt;             &lt;/DataTemplate&gt;         &lt;/TabControl.ItemTemplate&gt;         &lt;TabControl.ContentTemplate&gt;             &lt;DataTemplate&gt;                 &lt;ContentControl prism:RegionManager.RegionName="ListModulRegion" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"/&gt;             &lt;/DataTemplate&gt;         &lt;/TabControl.ContentTemplate&gt;     &lt;/TabControl&gt; &lt;/Grid&gt; </code></pre>  <p><strong>ViewModel of Module A</strong></p>  <p>In the ViewModel of Module A is a eventAggregator. Which publish a event when a other item in the TabControll is selected.</p>  <pre><code>    #region Private Fields **************************************************************************************************      private readonly IDeviceService _deviceService;     private readonly IEventAggregator _eventAggregator;      private ModuleFolder _selectedItem;     #endregion      #region Public Properties ***********************************************************************************************      public IEnumerable&lt;ModuleFolder&gt; Folders     {         get         {             return _deviceService.ModuleFolders;         }     }      public ModuleFolder SelectedItem     {         get { return _selectedItem; }         set         {             _selectedItem = value;             OnPropertyChanged(() =&gt; SelectedItem);             ModuleFolderChangeEvent evt = _eventAggregator.GetEvent&lt;ModuleFolderChangeEvent&gt;();             evt.Publish(SelectedItem);         }     }     #endregion      #region Constructor(s) **************************************************************************************************      public FolderSelectionViewModel(IEventAggregator eventAggregator, IDeviceService deviceService)     {         _eventAggregator = eventAggregator;          _deviceService = deviceService;         if(_deviceService.ModuleFolders.Count&gt;0)         {             SelectedItem = _deviceService.ModuleFolders[0];         }     } </code></pre>  <p><strong>ViewModel of Module B</strong></p>  <p>In the ViewModel of Module B the eventAggregator is subscribte to this event.</p>  <pre><code>    #region Private Fields **************************************************************************************************     private ModuleFolder _currentFolder;     private readonly IEventAggregator _eventAggregator;     private readonly IDeviceService _deviceService;     private readonly IUiDispatcher _uiDispatcher;      private ObservableCollection&lt;ModuleViewModel&gt; _observableModules;     private ModuleViewModel _selectedListItem;     #endregion      #region Public Properties ***********************************************************************************************      public ObservableCollection&lt;ModuleViewModel&gt; ObservableModules     {         get         {             return (_observableModules);         }         set         {             _observableModules = value;             OnPropertyChanged(() =&gt; ObservableModules);         }     }      public ModuleViewModel SelectedListItem     {         get { return _selectedListItem; }         set         {             _selectedListItem = value;             OnPropertyChanged(() =&gt; SelectedListItem);         }     }     #endregion      #region Constructor(s) **************************************************************************************************      public ModuleListViewModel(IEventAggregator eventAggregator, IUiDispatcher uiDispatcher, IDeviceService deviceService)     {         ModuleFolderChangeEvent evt = eventAggregator.GetEvent&lt;ModuleFolderChangeEvent&gt;();         evt.Subscribe(OnMailFolderChanged);          _eventAggregator = eventAggregator;         _uiDispatcher = uiDispatcher;         _deviceService = deviceService;          PropertyChanged += ModuleListSelectionViewModel_PropertyChanged;     }     #endregion </code></pre>  <p><strong>Bootstrapper</strong></p>  <p>In the Bootsrapper module A depends on  modul B.</p>  <pre><code>    protected override void ConfigureModuleCatalog()     {         base.ConfigureModuleCatalog();          ModuleCatalog moduleCatalog = (ModuleCatalog) ModuleCatalog;          //Communication         Type serviceModule = typeof(CommunicationModule);         moduleCatalog.AddModule(serviceModule);          //Device List         Type deviceListUiModule = typeof(DeviceListModule);         System.Collections.ObjectModel.Collection&lt;string&gt; dependsDeviceListUi = new System.Collections.ObjectModel.Collection&lt;string&gt;         {             serviceModule.Name         };          moduleCatalog.AddModule(new ModuleInfo         {             ModuleName = deviceListUiModule.Name,             ModuleType = deviceListUiModule.AssemblyQualifiedName,             DependsOn = dependsDeviceListUi,         });          //Tap Region         Type selectionUiModule = typeof (SelectionModule);         System.Collections.ObjectModel.Collection&lt;string&gt; dependsSelectionUi = new System.Collections.ObjectModel.Collection&lt;string&gt;         {             serviceModule.Name,             deviceListUiModule.Name         };          moduleCatalog.AddModule(new ModuleInfo         {             ModuleName = selectionUiModule.Name,             ModuleType = selectionUiModule.AssemblyQualifiedName,             DependsOn = dependsSelectionUi         });     } </code></pre>  <p><strong>The Problem</strong></p>  <p>When module A is loaded. The first item is selected and publish an event. But module B is not loaded an subscribe to late to the event an miss the first publish. At the second time when module B is loaded every thing works fine.</p>  <p>I have read about <a href="http://stackoverflow.com/questions/1296642/how-to-control-the-order-of-module-initialization-in-prism">How to control the order of module initialization in Prism</a>. But maybe there is another way or better way of doing that. Because i'm new in prism and i dont now the best way to doing it.</p>  <p>Sorry for my poor english. :-(</p>