<p>I use the application component segmentation logic when creating my angular application, which is to say I have the following folder structure:</p>  <pre><code>app.module.js app.config.js components ---- core -------- core.module.js -------- etc... ---- component1 -------- component1.module.js -------- etc... ---- component2 -------- component2.module.js -------- etc... ---- etc... shared ---- sharedComponent1 -------- etc... ---- etc... assets </code></pre>  <p>Now, I group all my components into my <code>app.module.js</code> file and that's pretty much all that file is there for. My <code>component1.module.js</code> will list dependencies that module requires and so on. Now, I realize that it sort of doesn't matter where I define module dependencies and that I can put all my dependant module, regardless of component in the <code>app.module.js</code> file, but that's simply not clean nor does it offer good modularity.</p>  <p>That being said, I'm not sure what to do with modules that are used in every, or almost every other module, like modules for localization for example. The real problem here isn't that the whole app uses that module, it's that that universal module needs to be configured, so I was thinking about putting that dependency, and the required configuration, in the <code>core.module.js</code> and <code>core.config.js</code> file, respectively.</p>  <p>I've read a lot about angular best practices, but I wasn't able to find something concerning module dependency organization which, I suppose, is because angular puts all the modules in a "big box" anyway.</p>  <p>Another approach would be to create a shared component that focuses on incorporating that particular dependency, or group of dependencies into angular, and then have my other components depend on that component, but I'm not sure if this is too much.</p>