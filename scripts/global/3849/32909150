<p>I'd like to dynamically add some new Types to a given Module based on some files found in a directory.</p>  <p>I'm essentially trying to populate a bunch of <code>@:file(...)</code> embed classes at the bottom of a Module.</p>  <pre><code>//This is the module I'm targeting to append embedded ByteArray subtypes (see below) @:build(macros.AutoEmbed.build("some/folder/")) class Embeds {     //Empty on purpose, just let the Macro do its thing! }   // At "macro-time", it should generate these:  @:file("some/folder/ui_main.xml") class UI_MAIN_XML extends flash.utils.ByteArray { }  @:file("some/folder/config.template.json") class CONFIG_TEMPLATE_JSON extends flash.utils.ByteArray { } </code></pre>  <p>What I've been able to find so far is that I might have to alter the <code>Embeds.hx</code> module. So I looked into <code>Context.getModule( Context.getLocalModule() )</code>. I've also looked into <code>TypeDefinition</code> since it seems like the only way to define a new type from scratch. </p>  <p>The problem with <code>Context.getModule(...)</code> though is that it returns an array <code>Array&lt;Type&gt;</code>, not <code>Array&lt;TypeDefinition&gt;</code>, so I can't append new <code>TypeDefinition</code> to it (plus I have to figure out how to write those, <em>ughh</em>). That's probably a bad assumption on my part, but I thought by simply appending more <code>TypeDefinition</code> to it I could dynamically provide more types in the module.</p>  <p>I'm still very new to Macros as you can tell!</p>  <p><strong>EDIT</strong></p>  <p>It's true that I could just dynamically write/overwrite a new <code>Embeds.hx</code> file at compile-time with a <strong>FileSystem / File write</strong> solution, but that implies needing to compile at least once before your IDE's auto-completion can pickup the generated <code>Embeds.*</code> classes (FlashDevelop in my case). Plus anytime new files are dropped in the defined folder, same problem: you need to compile first before the IDE detects it. Yes, I really like auto-completion :)</p>