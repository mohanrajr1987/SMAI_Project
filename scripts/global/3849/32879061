<p>I have the javascript modules <strong>Node</strong> and <strong>user</strong>.</p>  <p><strong>Node</strong> is a class:</p>  <pre><code>define(["underscore", "user"], function(_, User) {  class Node {    // one of the Node attributes needs to access user.prefs in order to figure out what style to output its output in.  user should already be initialized at that point, and it is this initialized version of user that Node must access. }  return Node  }) // end of define </code></pre>  <p><strong>user</strong> is <em>not</em> a class:</p>  <pre><code>define(['underscore'], function(_) {  user = {} function init({username, password}) {         user.username = username         // open oauth stuff with username and password         user.prefs = _.defaults(this._initPrefs(), {             display_name_capitalization: "title", // bla             underline_definitions: false, // blablabla             show_description_on_hover: false, // blabla         }) }  return user  }) // end of define </code></pre>  <p>Then I run everything in <strong>main</strong>, which grabs the dependencies via RequireJS, initializes user, then creates some Nodes, and then calls that Node attribute which depends on user:</p>  <pre><code>require(["node", "user"], function(Node, user) {  user.init({   username: 'Tim',   password: 'TinyButMighty!', }) for (n of retrieved_nodes) {   n = new Node(n)   doSomethingWith(n.attribute_that_depends_on_user) }  }) // end of require </code></pre>  <p>There are some very specific questions that come out of this.</p>  <ol> <li><p>Even though there will only be ONE instance of user, is there a good reason to make it a class? (this is a less important question, and mostly it's importance depends upon its connection to the following question...)</p></li> <li><p>Both Node and main import user.  Does that mean there will be TWO copies of user?  If I initialize user in main, and then try to access it from Node, will I access that SAME INITIALIZED user?</p></li> <li><p>What is the "best practice" for getting this behavior where there is only one user object that is shared across multiple modules (main, Node, and possibly others)?  I was thinking of using <code>window.user = user</code> instead of using <code>return user</code>, but I want to make sure I do things the right way.  (It is also important to consider that I am currently using RequireJS, but will soon switch to Browserify.  A solution to specific to any one tool could be a bad thing.  I am open to using ES6 features that are supported by Babel, and therefore will work today and in the future.)</p></li> </ol>