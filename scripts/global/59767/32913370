<p>I got this to work after tinkering with it, but am unclear on some of the -1s and +1s going on. my code below as well as my questions in the comments.  Also recapping the questions up here:</p>  <ol> <li>In the return statement inside the "centeredPalindrome" helper function why is it "left + 1"? Is that because you are expanding but only care about what's "in the expansion", not the outer limit?</li> <li>In that same return statement, why right and not right +1? is it because you are doing "length" and NOT "length-1" in the while condition?</li> <li>if it is odd, we expand one extra to the left - why? is it because an odd palindrome will always have "one extra at the beginning"?</li> </ol>  <hr>  <pre><code>var longestPalindrome = function(string){   var length = string.length;   var result = "";    //helper function   var centeredPalindrome = function(left, right){     //while loop with conditions for it being a palindrome. iterate to left/right while those conditions are met:     while(left&gt;= 0 &amp;&amp; right &lt; length&amp;&amp; string[left] === string[right]){       left--;       right++;     }      //why right and not right + 1? is it because you are doing length (and NOT length -1) in the while loop?     //why left + 1? Is that because you are expanding but only care about what's "in the expansion", not the outer limit?     return string.slice(left + 1, right);   }    //iterate through the string and apply the helper function    for (var i = 0; i &lt; string.length; i++) {     //handle case for it being odd or even     var evenPal = centeredPalindrome(i, i);     // if it is odd, we expand one extra to the left via "i -1" - why? is it because an odd palindrome will always have "one extra at the beggining"?     var oddPal = centeredPalindrome(i-1, i);       //overwrite the result with the longest one between them     if(oddPal.length &gt; result.length){       result = oddPal;     }      if(evenPal.length &gt; result.length){       result = evenPal;     }   };    //return the final result   return result; }   console.log(longestPalindrome("racecar"));  // returns "racecar" if I change the return inside "centerPalindrome" to string.slice(left, right), this becomes: //"ra" console.log(longestPalindrome("radar")); // returns "radar" console.log(longestPalindrome("abba")); // returns "abba" </code></pre>  <hr>  <p>probably better to name the variables like this per @DrewGaynor:</p>  <pre><code>    var oddPal = centeredPalindrome(i - 1, i + 1);     var evenPal = centeredPalindrome(i, i + 1); </code></pre>  <p>in the case of the odd palindrome, you want to look to the left and to the right of the center, as below.</p>  <pre><code>var oddPal = centeredPalindrome(i - 1, i + 1);         racecar            ^            |            Center is one character because the string has an odd length (7 characters) </code></pre>  <p>in the case of the even palindrome, you want to look at the center which is two chars long, to do this, you need to account for the extra length of the center.  you could have also done i-1 for the "left" instead of i+1 for the "right".  but you don't want to do it for both since then you will be looking at a three letter center or starting the left at -1!</p>  <pre><code>     var evenPal = centeredPalindrome(i, i + 1);            abba           ^^           |           Center is two characters because the string has an even length (4 characters) </code></pre>