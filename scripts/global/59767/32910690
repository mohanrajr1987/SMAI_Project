<p>I came across the following code for detecting LinkedList Cycles in JavaScript, but I'm unclear on why a "pause" variable is needed? Also, why does <code>fast</code> need to increment at twice the speed rather than just one ahead?</p>  <pre><code>var fast = linkedList; var slow = linkedList; var pause = true;  while (fast = fast.next) {   if (fast === slow) {     return true;   }   if (!pause) {     slow = slow.next;   }   pause = !pause } return false; </code></pre>  <p>walk-through, assuming while condition is true up to 6 iterations:</p>  <pre><code>//first iteration ----&gt; pause is true     //fast = linkedList.next     //slow = linkedList     //pause is now false. //second iteration ----&gt; pause is now false!     //fast = linkedList.next.next     //slow = linkedList.next     //pause is now true //third iteration ---&gt; pause is now true.     //fast = linkedList.next.next.next     //slow = linkedList.next     //pause is now false //fourth iteration ----&gt; pause is now false!     //fast = linkedList.next.next.next.next     //slow = linkedList.next.next     //pause is now true //fifth iteration ---&gt; pause is true     //fast = linkedList.next.next.next.next.next     //slow = linkedList.next.next //sixth iteration ---&gt; pause is false     //fast = linkedList.next.next.next.next.next.next     //slow = linkedList.next.next.next </code></pre>  <p>My original attempt at the problem is below, curious what was wrong with my original approach? </p>  <pre><code>var slower = linkedList.value; // this is the head value var faster = linkedList.next; //start faster one ahead  //if there is no next value or faster itself does not have a next value if (!faster || !faster.next || !slower.next) {   return false;  } //if faster ever equals slower, then there are duplicates! if (faster === slower || faster.next === slower || faster === faster.next ||   slower === slower.next) {   return true; } // keep advancing the pointers! else {   faster = faster.next.next;   slower = slower.next; } </code></pre>