<p>ATOM means a pointer, which point to exclusive and constant string. A string in 'C' should be end with '\0'.</p>  <p>I will show two ways to define an 'ATOM TABLE' structure in 'C':</p>  <pre><code>struct atom1 {     struct atom1 *link;     int len;     char *str; } *bucket[2048] </code></pre>  <p>and </p>  <pre><code>struct atom2 {     struct atom2 *link;     int len;     char str[1]; } *bucket[2048] </code></pre>  <p>So, when I want to allocate memory for these two type of ATOM, I also have two ways.</p>  <pre><code>// memory + 1 for '\0' struct atom1 *p = malloc(sizeof(*p) + len + 1); </code></pre>  <p>and </p>  <pre><code>// memory for '\0' is already in the define of struct atom struct atom2 *p = malloc(sizeof(*p) + len); </code></pre>  <p>So we can see, when we want to allocate memory, <strong>'atom2'</strong> looks better. But on the other side, if we want to access the memory of the string, we will break the rule of 'C', because <strong>'char str[1];'</strong> in <strong>'atom2'</strong>.</p>  <p><strong>Is 'atom2' really good?</strong> </p>