<p>I'm trying to build a simple red-black tree in C. Unfortunately, I have encountered a segmentation fault that I'm not sure how to fix. I've included the code below and marked to line where the fault is occurring.</p>  <pre><code>#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;string.h&gt; #include &lt;unistd.h&gt;  #define RED 1 #define BLACK 0  typedef struct RBNode {     char key[50];     int color;     struct RBNode *left;     struct RBNode *right;     struct RBNode *parent; } RBNode;  typedef struct RBTree {     struct RBNode *root;     struct RBNode *nil; } RBTree;  void inorderPrint(RBTree*, RBNode*); void insertRB(RBTree*, RBNode*); void insertRBFixup(RBTree*, RBNode*); void leftRotate(RBTree*, RBNode*); void rightRotate(RBTree*, RBNode*); int count;  int main (int argc, char* argv[]) {     RBTree *tree = malloc(sizeof(RBTree));     tree-&gt;nil = malloc(sizeof(RBNode));     tree-&gt;nil-&gt;color = BLACK;     tree-&gt;root = NULL;     tree-&gt;nil-&gt;left = tree-&gt;root;     tree-&gt;nil-&gt;right = tree-&gt;root;     RBNode *curr = NULL;     curr = malloc(sizeof(RBNode));     strcpy(curr-&gt;key, "CAT");     insertRB(tree, curr);     strcpy(curr-&gt;key, "HAT");     insertRB(tree, curr);     strcpy(curr-&gt;key, "BIT");     insertRB(tree, curr);     strcpy(curr-&gt;key, "CAR");     insertRB(tree, curr);     strcpy(curr-&gt;key, "MAP");     insertRB(tree, curr);     inorderPrint(tree, tree-&gt;root);     return 1; }  void inorderPrint(RBTree* tree, RBNode *node) {     if ((node != NULL) &amp;&amp; (node != tree-&gt;nil)) {         inorderPrint(tree, node-&gt;left);         printf("%s\n", node-&gt;key);         inorderPrint(tree, node-&gt;right);     } }  void leftRotate(RBTree *tree, RBNode *x) {     struct RBNode *y = NULL;     y = x-&gt;right;     x-&gt;right = y-&gt;left;     if (y-&gt;left != tree-&gt;nil) {         y-&gt;left-&gt;parent = x;   //Segmentation fault occurs here     }      y-&gt;parent = x-&gt;parent;     if (x-&gt;parent == tree-&gt;nil) {         tree-&gt;root = y;     } else if (x == x-&gt;parent-&gt;left) {         x-&gt;parent-&gt;left = y;     } else {         x-&gt;parent-&gt;right = y;     }     y-&gt;left = x;     x-&gt;parent = y;  }  void rightRotate(RBTree *tree, RBNode *x) {     RBNode *y = x-&gt;left;     x-&gt;left = y-&gt;right;     if (y-&gt;right != tree-&gt;nil) {         y-&gt;right-&gt;parent = x;     }     y-&gt;parent = x-&gt;parent;     if (x-&gt;parent == tree-&gt;nil) {         tree-&gt;root = y;     } else if (x == x-&gt;parent-&gt;right) {         x-&gt;parent-&gt;right = y;     } else {         x-&gt;parent-&gt;left = y;     }     y-&gt;right = x;     x-&gt;parent = y; }  void insertRB(RBTree *tree, RBNode *z) {     RBNode *y = tree-&gt;nil;     RBNode *x = tree-&gt;root;     while ((x != tree-&gt;nil) &amp;&amp; (x != NULL)) {         y = x;         if (strcmp(z-&gt;key, x-&gt;key) &lt; 0) {             x = x-&gt;left;         } else {             x = x-&gt;right;         }      }     z-&gt;parent = y;     if (y == tree-&gt;nil) {         tree-&gt;root = z;     } else if (strcmp(z-&gt;key, y-&gt;key) &lt; 0) {         y-&gt;left = z;     } else {         y-&gt;right = z;     }     z-&gt;left = tree-&gt;nil;     z-&gt;right = tree-&gt;nil;     z-&gt;color = RED;     insertRBFixup(tree, z); }  void insertRBFixup(RBTree *tree, RBNode *z) {     RBNode *y = NULL;     while (z-&gt;parent-&gt;color == RED) {         if (z-&gt;parent == z-&gt;parent-&gt;parent-&gt;left) {             y = z-&gt;parent-&gt;parent-&gt;right;             if (y-&gt;color == RED) {                 z-&gt;parent-&gt;color = BLACK;                 y-&gt;color = BLACK;                 z-&gt;parent-&gt;parent-&gt;color = RED;                 z = z-&gt;parent-&gt;parent;             } else if (z == z-&gt;parent-&gt;right) {                 z = z-&gt;parent;                 leftRotate(tree, z);             } else {                 z-&gt;parent-&gt;color = BLACK;                 z-&gt;parent-&gt;parent-&gt;color = RED;                 rightRotate(tree, z-&gt;parent-&gt;parent);              }          } else {             y = z-&gt;parent-&gt;parent-&gt;left;             if (y-&gt;color == RED) {                 z-&gt;parent-&gt;color = BLACK;                 y-&gt;color = BLACK;                 z-&gt;parent-&gt;parent-&gt;color = RED;                 z = z-&gt;parent-&gt;parent;             } else if (z == z-&gt;parent-&gt;left) {                 z = z-&gt;parent;                 rightRotate(tree, z);             } else {                 z-&gt;parent-&gt;color = BLACK;                 z-&gt;parent-&gt;parent-&gt;color = RED;                 leftRotate(tree, z-&gt;parent-&gt;parent);             }         }     }     tree-&gt;root-&gt;color = BLACK; } </code></pre>  <p>I think it might have something to do with how I initialized the red-black tree in main(), but I'm not sure and I've tried many different other ways to initialize it.</p>  <p>Do any of you guys know where I'm going wrong?</p>