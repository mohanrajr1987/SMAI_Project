<p>I am using Grails 3.0.6 and am struggling with a complicated and highly interconnected domain model. I have classes with multiple many-to-many associations to other classes and I am left with no choice but to have multiple belongsTo associations on at least one class. I am unable to figure out the syntax to represent this.</p>  <p>My domain model was quite complicated, but I was able to reduce my problem to this simplified example:</p>  <pre><code>class Graph {     static hasMany = [vertices: Vertex] }  class OtherClass {     static hasMany = [vertices: Vertex] }  class Vertex {     static hasMany = [graph: Graph, other: OtherClass] } </code></pre>  <p>In this simplified example, I could get around the problem by declaring the ownership between the domain classes on Graph and OtherClass... In my complicated domain model, I don't have this choice because there are too many classes with multiple many-to-many associations.</p>  <p>I have tried this:</p>  <pre><code>class Vertex {     static hasMany = [graphs: Graph, others: OtherClass]     static belongsTo = Graph, OtherClass } </code></pre>  <p>but I get an NPE.</p>  <p>I have tried this:</p>  <pre><code>class Vertex {     static hasMany = [graphs: Graph, others: OtherClass]     static belongsTo = [graphs: Graph, others: OtherClass] } </code></pre>  <p>but I still get "GrailsDomainException: No owner defined between domain classes [Graph] and [Vertex]"</p>  <p>Is there something I could do with mappedBy to correctly represent this?</p>  <p>In many of my many-to-many associations, cascading saves are not actually wanted (although they won't hurt), so I don't need belongsTo (or an "owner") for that purpose. This makes me wonder if associations on the domain classes are really how I should be modeling these relationships. Is there something else I could be doing?</p>