<p>I have legacy database and some tables have composite ids</p>  <pre><code>class Client {    String id     static hasMany = [       settings: Setting    ]     static mapping = {       id column: 'client_id', generator: 'assigned'    } }  class Setting {    Client client    String nodeId    String ccyPairPattern    Character qualifier     static mapping = {       id composite: ['client', 'nodeId', 'pattern', 'qualifier']    } }      </code></pre>  <p>I want to delete entry from GORM association:</p>  <pre><code>client.get('1').removeFromSettings(settingToRemove) // settingToRemove.delete(flush: true)  // delete-orphans does not help </code></pre>  <p>This always raises  exception after flush</p>  <pre><code> org.hibernate.StaleObjectStateException: Row was updated or deleted by      another transaction (or unsaved-value mapping was incorrect) : </code></pre>  <p>This happens because method removeFrom* sets client property to null and generates query to delete with clientId = null as client is part of composite key</p>  <p>What is the best solution in this case. Looks like GORM has poor support for composite keys or my mapping is incorrect.</p>