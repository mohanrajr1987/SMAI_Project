<p>How would one solve this? </p>  <p>An application has a form with a password and other input fields. The user must enter their password in order to submit a transaction along with other transaction info. The password is required as a security check at point of transaction submission. </p>  <p>The form input values are bound to a command object. </p>  <p>This was the way our application was handling this:</p>  <pre><code>void submitAction(FooCommand command){ if(command.hasErrors()){     render(view: ‘show’, model: [command:command]) } //else do save and redirect } </code></pre>  <p>We became aware that by using render instead of redirect, the user’s password was visible in the browser cache after user logs out. The URL used in the render is the same as the POST URL. After the user logs out, someone else could use the browser back button and resubmit the form while using a tool like firebug to inspect the POST parameters and gain access to the user's password.</p>  <p>There is also a requirement to persist the user’s input from the form back to the page that displays the validation errors. So a simple redirect with error message in the flash would fail this requirement.</p>  <p>The proposed solution is to use the <a href="https://grails.github.io/grails-doc/latest/ref/Controllers/chain.html" rel="nofollow">chain</a> method to put the command object into the flash scope so a redirect is possible to display errors and user input. This prevents someone from accessing the POST URL, and thus the password,  in browser tools.</p>  <pre><code>void submitAction(FooCommand command){     if(command.hasErrors()){     chain(action: ‘show’, model: [command:command])//redirect instead of render } //else do save and redirect } </code></pre>  <p>One potential downside is storing command objects in the flash scope (ultimately the session) that might have eagerly fetched relationships in the command. Could storing command objects in the session affect performance?</p>  <p>Is there a better solution?</p>