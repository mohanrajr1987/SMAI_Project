<p>creating hard coded json is easy, e.g.</p>  <pre><code>String createJson(Person person, list&lt;Account&gt; accounts) {     def builder = new JsonBuilder()     def json = builder {          person person          accounts accounts     }     return builder.toPrettyString() } </code></pre>  <p>The above works, and produces something like this:</p>  <pre><code>{ "person":{    username": "user"    "firstName": "test" } "accounts":[       {       "balance": "200829.00",       "currency": "CRD",       "id": 1,        }    ] } </code></pre>  <p>The problem is we have a REST api, which returns JSON. Curently, we have a lot of duplicate code, as we can't find a generic way to generate different parts of the JSON api response and combine them together and render the result, ether by merging json strings, or by dynamically buidling the json from a map, e.g the following doesnt work:</p>  <pre><code>String createJson(Map map) {     def builder = new JsonBuilder()     def root = builder {         map.collect { key, value -&gt;             "$key" value         }     }     return builder.toPrettyString() } </code></pre>  <p>then calling it like this:</p>  <pre><code>Person person = someMethodToGetAPerson() List&lt;Account&gt; accounts = someMethodToGetAccounts(person) Map map = ["person", person, "accounts", accounts] String json = createJson(map) render(status: 200, contentType: 'application/json', text: json) </code></pre>  <p>However, this fails, with a stack overflow in the bowels of grails.</p>  <p>In addition, we have defined several json marshallers which must be used, e.g.</p>  <pre><code>JSON.registerObjectMarshaller(Account) {     return [balance: formatter.format(it.balance).... } </code></pre>  <p>Any ideas?</p>