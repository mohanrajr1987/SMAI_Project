<p>My app has this url mapping:</p>  <pre><code>"/"(controller: 'app', action: 'index') </code></pre>  <p>And I'm using a domain class to store RequestMap instances in the database. The access to app/index is restricted to certain roles, so when a user hits / or /app/index, the login form is shown.</p>  <p>When a user, that has permissions to see / or /app/index logs in, the app is showing a message: <strong>"Sorry, you're not authorized to view this page."</strong>, so for some reason Spring Security is not considering my RequestMaps.</p>  <p>I tried a lot of combinations, maybe I'm missing something. What I have right now is (Bootstrap.groovy):</p>  <pre><code> new RequestMap(url: '/', configAttribute: 'ROLE_ADMIN').save()  new RequestMap(url: '/app/index', configAttribute: 'ROLE_ADMIN').save()  new RequestMap(url: '/**', configAttribute: 'ROLE_ADMIN').save() </code></pre>  <p>Before you ask, the user I'm using to login has ROLE_ADMIN assigned, this is the console log on login:</p>  <pre><code>userDetails grails.plugin.springsecurity.userdetails.GrailsUser@586034f: Username: admin; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Granted Authorities: ROLE_ADMIN auth com.cabolabs.security.UserPassOrgAuthToken@40a3c9e2: Principal: grails.plugin.springsecurity.userdetails.GrailsUser@586034f: Username: admin; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Granted Authorities: ROLE_ADMIN; Credentials: [PROTECTED]; Authenticated: true; Details: null; Granted Authorities: ROLE_ADMIN </code></pre>  <p>FYI, I customized the login to use user+pass+organization, that's why there is a UserPassOrgAuthToken instead of the standard UsernamePasswordAuthenticationToken</p>