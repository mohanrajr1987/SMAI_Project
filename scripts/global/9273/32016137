<p>I'm new to SimpleXML, and I think it claims to be able to do this, so I must be doing something wrong.  Maybe you can help me out.</p>  <p>The problem is that if I have a parent object with two links to the same child object, when the parent is deserialized, I now have two links to identical, but different objects (different locations in memory).  This breaks the structure.</p>  <p>Here is what I'm doing:</p>  <p><strong>Topic.java:</strong></p>  <pre><code>@Root (name = "Topic") public class Topic {      @Attribute (name = "name")     String name = null;      @Element (name = "id")     int id = -1;      @ElementList (name = "sparks")     ArrayList&lt;Spark&gt; sparks = null;      public Topic(             @Attribute (name = "name") String inName,             @Element (name = "id") int inID,             @ElementList (name = "sparks") ArrayList&lt;Spark&gt; inSparks) {         name = new String(inName);         id = inID;         if (inSparks == null) {             sparks = new ArrayList&lt;&gt;(50);         } else {             sparks = inSparks;         }     } [...] </code></pre>  <p><strong>Spark.java</strong></p>  <pre><code>@Root (name = "Spark") public class Spark {      @Element (name = "text", required = false)     String text = null;      @Element (name = "dateCompleted", required = false)     Date dateCompleted = null;      @Element (name = "rejected")     boolean rejected = false;      @Element (name = "delayedUntil", required = false)     Date delayedUntil = null;      @Attribute (name = "id")     int id = -1;       @Element (name = "packName", required = false)     String packName = null;      public Spark(             @Element (name = "text") String inText,             @Attribute (name = "id") int inID,             @Element (name = "packName") String inPackName) {         text = new String(inText);         id = inID;         packName = new String(inPackName);     }      [...] </code></pre>  <p><strong>Demonstration of the problem:</strong></p>  <pre><code>    Serializer serializer = new Persister();     File saveFile = new File(this.getFilesDir(), "test.xml");      Topic testTopic = new Topic("TestTopic", 1);     Spark newSpark = new Spark ("This is the sample text.", 1, "PretendPack");     testTopic.sparks.add(newSpark);     testTopic.sparks.add(newSpark);      try {         serializer.write(testTopic, saveFile);     } catch (Exception e) {         e.printStackTrace();     }      Topic newTopic = null;     try {         newTopic = serializer.read(Topic.class, saveFile);     } catch (Exception e) {         Log.e("IntimacyToolbox", "Was unable to deserialize from the savedData.");         e.printStackTrace();     }     Spark spark1 = newTopic.sparks.get(0);     Spark spark2 = newTopic.sparks.get(1);     if (spark1 == spark2) {         Log.d("IntimacyToolbox", "Good: sparks are the same.");     } else {         Log.d("IntimacyToolbox", "Bad: sparks are different objects.");     } </code></pre>  <p>After running this bit of code, the two sparks in the newTopic.sparks ArrayList are different objects.  Is there a way to have them deserialize as the same object?  I come from iOS, and the system there just magically works; seems like there should be something similar on Android; maybe SimpleXML isn't it, though.</p>  <p>Thanks in advance!</p>