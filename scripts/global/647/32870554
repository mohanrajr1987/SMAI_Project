<h2>Context:</h2>  <p>I'm working on a simple ORM (for PHP) that automatize most of queries, based on a static configuration.</p>  <p>Thus, from tables and entities definitions, the library handles joins automatically and generates appropriate fields/table alias... No problem for LEFT joins but INNER may result in duplicated results in case of relation One-to-Many. My thought was to automatically add a GROUP BY clause (on the auto-increment key) if necessary.</p>  <h2>The question</h2>  <p>Is it correct to consider that I need to add a GROUP BY clause if (and only if) the join's ON and WHERE conditions doesn't match a unique key of the joined table ?</p>  <h2>Example</h2>  <p>A very simple example, where I want to select all events with (at least) an associated Showing. <em>If there is an other way to do it without INNER JOIN, I'm interested to know how :)</em></p>  <pre><code>CREATE TABLE `Event` (     `Id` INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,     `Name` VARCHAR(255) NOT NULL ); INSERT INTO `Event` (`Name`) VALUES ('My cool event');  CREATE TABLE `Showing` (     `Id` INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,     `EventId` INT UNSIGNED NOT NULL,     `Place` VARCHAR(50) NOT NULL,      FOREIGN KEY (`EventId`) REFERENCES `Event`(`Id`),     UNIQUE (`EventId`, `Place`) ); INSERT INTO `Showing` (`EventId`, `Place`) VALUES (1, 'School'); INSERT INTO `Showing` (`EventId`, `Place`) VALUES (1, 'Park');    -- Correct queries SELECT t.* FROM `Event` t INNER JOIN `Showing` t1 ON t.Id=t1.`EventId` WHERE t1.`PlaceId` = 'School'; SELECT t.* FROM `Event` t INNER JOIN `Showing` t1 ON t.Id=t1.`EventId` AND t1.`PlaceId` = 'School';   -- Query leading to duplicate values SELECT t.* FROM `Event` t INNER JOIN `Showing` t1 ON t.Id=t1.`EventId`;   -- Group by query to prevent duplicate values SELECT t.* FROM `Event` t INNER JOIN `Showing` t1 ON t.Id=t1.`EventId` GROUP BY t.`Id`; </code></pre>  <p>Thanks !</p>