<p>A follow up to my previous question </p>  <blockquote>   <p><a href="http://stackoverflow.com/questions/32759752/doctrine2-orm-onetoone-not-working-update-changed-to-manytomany-but-not-fully-wo">Doctrine2 ORM OneToOne not working UPDATE changed to ManyToMany but not fully working</a>.</p> </blockquote>  <p>I accepted the very helpful answer given, since it pointed me in the right direction. Unfortunately, I struggle to get the rest working, but since the question got too long and confusing, I start a new question. </p>  <p>I have a page where user can write adverts. User can also bookmark adverts they like to see them later in their User Section.</p>  <p>I have got 3 Database tables</p>  <pre><code>advert (id, advert_title....) user (id, user_name....) bookmarks (advert_id, user_id) </code></pre>  <p>As adviced in my previous question, I have created 2 Entities, Advert and User Entity (see below) </p>  <p><strong>Advert.php</strong></p>  <pre><code>namespace Advert\Entity;  use Doctrine\ORM\Mapping as ORM; use Doctrine\Common\Collections\ArrayCollection; use DateTime; use Zend\Stdlib\ArrayObject;  /** Advert  *   * @ORM\Table(name="advert")  * @ORM\Entity(repositoryClass="Advert\Repository\AdvertRepository")  */  class Advert { /**  * @var integer  * @ORM\Column(name="id", type="integer", nullable=false)  * @ORM\Id  * @ORM\GeneratedValue(strategy="IDENTITY")  */      private $id;  /**  * @ORM\ManyToMany(targetEntity="Advert\Entity\User", mappedBy="bookmarks", cascade={"persist"})  * @ORM\JoinTable(name="bookmarks",  *      joinColumns={@ORM\JoinColumn(name="advert_id", referencedColumnName="id")},  *      inverseJoinColumns={@ORM\JoinColumn(name="user_id", referencedColumnName="id")}  *      )  */     private $bookmarks;       public function __construct()      {          $this-&gt;categories = new ArrayCollection();         $this-&gt;images = new ArrayCollection();         $this-&gt;advertCreated = new \DateTime("now");     }  /**   * Set ID   *   * @param integer $id   * @return Advert   */      public function setId($id)      {          $this-&gt;id = $id;          return $this;      }  /**  * Get id  *  * @return integer   */     public function getId()     {         return $this-&gt;id;     }   /**  * Set bookmark  *  * @param  $bookmark  * @return bookmark  */     public function setBookmark($bookmark)     {         $this-&gt;bookmark = $bookmark;         return $this;     }   /**  * Get bookmark  *  * @return ArrayCollection  */     public function getBookmark()     {         return $this-&gt;bookmarks;     }   /**  * @param Collection $bookmark  */     public function addBookmark($bookmarks)     {         $this-&gt;bookmarks-&gt;add($bookmarks);     }  /**  * @param Collection $bookmark  */     public function removeBookmark($bookmarks)     {         $this-&gt;bookmarks-&gt;removeElement($bookmarks);          } } </code></pre>  <p><strong>User.php</strong></p>  <pre><code>namespace Advert\Entity;  use Doctrine\ORM\Mapping as ORM; use ZfcUser\Entity\User as ZfcUser; use Doctrine\Common\Collections\ArrayCollection; use Doctrine\Common\Collections\Collection;   /**  * User  * @ORM\Table(name="user")  * @ORM\Entity(repositoryClass="Advert\Repository\UserRepository")  */  class User extends ZfcUser { /**  * @var integer  *  * @ORM\Column(name="id", type="integer", nullable=false)  * @ORM\Id  * @ORM\GeneratedValue(strategy="IDENTITY")  */ protected $id;  /**  * @ORM\ManyToMany(targetEntity="Advert\Entity\Advert", inversedBy="bookmarks", cascade={"persist"})  * @ORM\JoinTable(name="bookmarks",  *      joinColumns={@ORM\JoinColumn(name="user_id", referencedColumnName="id")},  *      inverseJoinColumns={@ORM\JoinColumn(name="advert_id", referencedColumnName="id")}  *      )  */  private $bookmarks;   public function __construct() {     $this-&gt;bookmarks = new ArrayCollection();   }  public function getBookmarks() {      return $this-&gt;bookmarks; }  /** * @param Collection $bookmarks */ public function addBookmarks(Collection $bookmarks) {    foreach ($bookmarks as $bookmark) {        $this-&gt;bookmarks-&gt;add($bookmark);    } }  /**  * @param Collection $bookmarks  */ public function removeBookmarks(Collection $bookmarks) {    foreach ($bookmarks as $bookmark) {        $this-&gt;bookmarks-&gt;removeElement($bookmark);    } }   } </code></pre>  <p>I have now got a Service to check if an Advert is already Bookmarked, to delete a Bookmark or to set a Bookmark. That means I have to enter the UserId and AdvertId direct into the Join Table Bookmarks. But how do I do that, if I don't have the Bookmark Entity with the setUserId and setAdvertId?</p>  <p>Here is my Service so far the last 2 methods (save and remove) show what I used before I removed the Bookmark Entity. How can I now read the Join Table to check if a Bookmark already exists so check for userId and advertId? And again how would I access this table to delete the Bookmark directly? The Bookmark gets deleted if an Advert gets removed by the owner which is great, but obviously a User also needs to be able to delete just a Bookmark. How do I achieve this?</p>  <p><strong>BookmarkAdvertService.php</strong></p>  <pre><code>public function checkAdvertBookmarkStatus($advertId) {     $userId = $this-&gt;getUserEntity()-&gt;getId();       $advert = $this-&gt;getEntityManager()-&gt;find('Advert\Entity\Advert', $advertId);     $bookmarkStatus= $advert-&gt;getBookmark();     return $bookmarkStatus; }  public function saveAdvertBookmark($advertId) {     //this is what I used before     $bookmark = new BookmarkEntity();     $userId = $this-&gt;getUserEntity()-&gt;getId();      // $bookmark-&gt;addBookmark($advertId); ??? like this     $bookmark-&gt;setAdvertId($advertId);     $bookmark-&gt;setUserId($userId);      # write new bookmmark to database tbl bookmark     $this-&gt;getEntityManager()-&gt;persist($bookmark);     $this-&gt;getEntityManager()-&gt;flush(); }   public function removeAdvertBookmark($advertId) {     // this is what I used before     $userId = $this-&gt;getUserEntity()-&gt;getId();     $bookmark = $this-&gt;getEntityManager()-&gt;getRepository('Advert\Entity\Bookmark')                                          -&gt;findOneBy(array('advertId' =&gt; $advertId, 'userId' =&gt; $userId));      # remove bookmmark from tbl bookmark     $this-&gt;getEntityManager()-&gt;remove($bookmark);     $this-&gt;getEntityManager()-&gt;flush(); } </code></pre>