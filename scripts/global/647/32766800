<p>when I selecting some set of data using from Hibernate Session it will listed all data. after that I'll add new records it was added but I try to get data again but there are not available last I added. here is my code.</p>  <p>hibernate.cfg.xml</p>  <pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"&gt; &lt;hibernate-configuration&gt;     &lt;session-factory&gt;         &lt;property name="hibernate.dialect"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;         &lt;property name="hibernate.connection.driver_class"&gt;com.mysql.jdbc.Driver&lt;/property&gt;         &lt;property name="hibernate.connection.url"&gt;jdbc:mysql://localhost:3306/iposLite?zeroDateTimeBehavior=convertToNull&lt;/property&gt;         &lt;property name="hibernate.connection.username"&gt;root&lt;/property&gt;         &lt;mapping class="com.isimple.intelijpos_lite.models.Grn" /&gt;         &lt;mapping class="com.isimple.intelijpos_lite.models.GrnDetail" /&gt;         &lt;mapping class="com.isimple.intelijpos_lite.models.GrnRetrunDetail" /&gt;         &lt;mapping class="com.isimple.intelijpos_lite.models.GrnReturn" /&gt;         &lt;mapping class="com.isimple.intelijpos_lite.models.Invoice" /&gt;         &lt;mapping class="com.isimple.intelijpos_lite.models.InvoiceDetail" /&gt;         &lt;mapping class="com.isimple.intelijpos_lite.models.InvoiceReturn" /&gt;         &lt;mapping class="com.isimple.intelijpos_lite.models.InvoiceReturnDetail" /&gt;         &lt;mapping class="com.isimple.intelijpos_lite.models.Item" /&gt;         &lt;mapping class="com.isimple.intelijpos_lite.models.Ledger" /&gt;         &lt;mapping class="com.isimple.intelijpos_lite.models.LedgerDetail" /&gt;         &lt;mapping class="com.isimple.intelijpos_lite.models.Receipt" /&gt;         &lt;mapping class="com.isimple.intelijpos_lite.models.Stock" /&gt;         &lt;mapping class="com.isimple.intelijpos_lite.models.Supplier" /&gt;         &lt;mapping class="com.isimple.intelijpos_lite.models.User" /&gt;     &lt;/session-factory&gt; &lt;/hibernate-configuration&gt; </code></pre>  <p>Item.java model class</p>  <pre><code>package com.isimple.intelijpos_lite.models;  import java.io.Serializable; import java.util.Date; import java.util.List; import javax.persistence.Basic; import javax.persistence.CascadeType; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.FetchType; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.NamedQueries; import javax.persistence.NamedQuery; import javax.persistence.OneToMany; import javax.persistence.Table; import javax.persistence.Temporal; import javax.persistence.TemporalType; import javax.validation.constraints.NotNull; import javax.validation.constraints.Size;  /**  *  * @author Hashan Chamikara  */ @Entity @Table(name = "item") @NamedQueries({     @NamedQuery(name = "Item.findAll", query = "SELECT i FROM Item i")}) public class Item implements Serializable {     private static final long serialVersionUID = 1L;     @Id     @GeneratedValue(strategy = GenerationType.IDENTITY)     @Basic(optional = false)     @Column(name = "id")     private Integer id;     @Basic(optional = false)     @NotNull     @Size(min = 1, max = 45)     @Column(name = "barcode")     private String barcode;     @Basic(optional = false)     @NotNull     @Size(min = 1, max = 45)     @Column(name = "reference")     private String reference;     @Basic(optional = false)     @NotNull     @Size(min = 1, max = 45)     @Column(name = "name")     private String name;     @Basic(optional = false)     @NotNull     @Size(min = 1, max = 45)     @Column(name = "category")     private String category;     @Basic(optional = false)     @NotNull     @Size(min = 1, max = 45)     @Column(name = "unit")     private String unit;     @Size(max = 45)     @Column(name = "unit_description")     private String unitDescription;     @Basic(optional = false)     @NotNull     @Column(name = "expire")     private int expire;     @Basic(optional = false)     @NotNull     @Column(name = "warranty")     private int warranty;     @Basic(optional = false)     @NotNull     @Column(name = "status")     private int status;     @Basic(optional = false)     @NotNull     @Column(name = "created")     @Temporal(TemporalType.TIMESTAMP)     private Date created;     @Basic(optional = false)     @NotNull     @Column(name = "modify")     @Temporal(TemporalType.TIMESTAMP)     private Date modify;     @OneToMany(cascade = CascadeType.ALL, mappedBy = "item", fetch = FetchType.LAZY)     private List&lt;InvoiceDetail&gt; invoiceDetailList;     @OneToMany(cascade = CascadeType.ALL, mappedBy = "item", fetch = FetchType.LAZY)     private List&lt;Stock&gt; stockList;     @OneToMany(cascade = CascadeType.ALL, mappedBy = "item", fetch = FetchType.LAZY)     private List&lt;GrnDetail&gt; grnDetailList;      public Item() {     }      public Item(Integer id) {         this.id = id;     }      public Item(Integer id, String barcode, String reference, String name, String category, String unit, int expire, int warranty, int status, Date created, Date modify) {         this.id = id;         this.barcode = barcode;         this.reference = reference;         this.name = name;         this.category = category;         this.unit = unit;         this.expire = expire;         this.warranty = warranty;         this.status = status;         this.created = created;         this.modify = modify;     }      public Integer getId() {         return id;     }      public void setId(Integer id) {         this.id = id;     }      public String getBarcode() {         return barcode;     }      public void setBarcode(String barcode) {         this.barcode = barcode;     }      public String getReference() {         return reference;     }      public void setReference(String reference) {         this.reference = reference;     }      public String getName() {         return name;     }      public void setName(String name) {         this.name = name;     }      public String getCategory() {         return category;     }      public void setCategory(String category) {         this.category = category;     }      public String getUnit() {         return unit;     }      public void setUnit(String unit) {         this.unit = unit;     }      public String getUnitDescription() {         return unitDescription;     }      public void setUnitDescription(String unitDescription) {         this.unitDescription = unitDescription;     }      public int getExpire() {         return expire;     }      public void setExpire(int expire) {         this.expire = expire;     }      public int getWarranty() {         return warranty;     }      public void setWarranty(int warranty) {         this.warranty = warranty;     }      public int getStatus() {         return status;     }      public void setStatus(int status) {         this.status = status;     }      public Date getCreated() {         return created;     }      public void setCreated(Date created) {         this.created = created;     }      public Date getModify() {         return modify;     }      public void setModify(Date modify) {         this.modify = modify;     }      public List&lt;InvoiceDetail&gt; getInvoiceDetailList() {         return invoiceDetailList;     }      public void setInvoiceDetailList(List&lt;InvoiceDetail&gt; invoiceDetailList) {         this.invoiceDetailList = invoiceDetailList;     }      public List&lt;Stock&gt; getStockList() {         return stockList;     }      public void setStockList(List&lt;Stock&gt; stockList) {         this.stockList = stockList;     }      public List&lt;GrnDetail&gt; getGrnDetailList() {         return grnDetailList;     }      public void setGrnDetailList(List&lt;GrnDetail&gt; grnDetailList) {         this.grnDetailList = grnDetailList;     }      @Override     public int hashCode() {         int hash = 0;         hash += (id != null ? id.hashCode() : 0);         return hash;     }      @Override     public boolean equals(Object object) {         // TODO: Warning - this method won't work in the case the id fields are not set         if (!(object instanceof Item)) {             return false;         }         Item other = (Item) object;         if ((this.id == null &amp;&amp; other.id != null) || (this.id != null &amp;&amp; !this.id.equals(other.id))) {             return false;         }         return true;     }      @Override     public String toString() {         return "com.isimple.intelijpos_lite.models.Item[ id=" + id + " ]";     }  } </code></pre>  <p>DatabaseUtil.java</p>  <pre><code>package com.isimple.intelijpos_lite.util;  import org.hibernate.cfg.AnnotationConfiguration; import org.hibernate.SessionFactory;  /**  * Hibernate Utility class with a convenient method to get Session Factory  * object.  *  * @author chamikara  */ public class DatabaseUtil {      private static final SessionFactory sessionFactory;      static {         try {             // Create the SessionFactory from standard (hibernate.cfg.xml)              // config file.             sessionFactory = new AnnotationConfiguration().configure().buildSessionFactory();         } catch (Throwable ex) {             // Log the exception.              System.err.println("Initial SessionFactory creation failed." + ex);             throw new ExceptionInInitializerError(ex);         }     }      public static SessionFactory getSessionFactory() {         return sessionFactory;     } } </code></pre>  <p>Item Save Method</p>  <pre><code>public boolean saveItem(Item item, Stock stock) {         Session session = DatabaseUtil.getSessionFactory().openSession();         Transaction transaction = session.beginTransaction();         try {             session.save(item);             session.save(stock);             transaction.commit();         } catch (Exception e) {             transaction.rollback();         } finally {             session.close();         }         return transaction.wasCommitted();     } </code></pre>  <p>Item List Method</p>  <pre><code>  public List&lt;Item&gt; searchItem(String text) {         Session session = DatabaseUtil.getSessionFactory().openSession();         List list = session.createCriteria(Item.class).add(                 Restrictions.and(                         Restrictions.or(                                 Restrictions.like("barcode", text, MatchMode.START),                                 Restrictions.like("reference", text, MatchMode.START),                                 Restrictions.like("name", text, MatchMode.ANYWHERE)),                         Restrictions.eq("status", Const.ITEM_ACTIVE)))                 .setMaxResults(20).list();         session.close();         return list;     } </code></pre>  <p>Application run in same thread</p>  <p>Before Adding Test 2 Item</p>  <p><a href="http://i.stack.imgur.com/3oY3B.png" rel="nofollow"><img src="http://i.stack.imgur.com/3oY3B.png" alt="enter image description here"></a> Adding Item</p>  <p><a href="http://i.stack.imgur.com/Kt82M.png" rel="nofollow"><img src="http://i.stack.imgur.com/Kt82M.png" alt="enter image description here"></a></p>  <p>After Adding Item</p>  <p><a href="http://i.stack.imgur.com/ryBNF.png" rel="nofollow"><img src="http://i.stack.imgur.com/ryBNF.png" alt="enter image description here"></a></p>