<p>I am trying to improve performance for in my Graph algorithm and I am encountering some problems. </p>  <p>My graph typedef looks like this: Â¨</p>  <pre><code>typedef boost::adjacency_list&lt;boost::multisetS, boost::vecS, boost::directedS, boost::no_property, indexProperty&gt; graph_t; typedef boost::graph_traits&lt;graph_t&gt;::vertex_descriptor vertex_descriptor_t; typedef boost::graph_traits&lt;graph_t&gt;::edge_descriptor edge_descriptor_t; </code></pre>  <p>The graph I am working on is quite big, it has around 5.8 million edges and 100 vertices. </p>  <p>What I am doing is the following: </p>  <ol> <li>Determine strongly connected components of the graph</li> <li>Perform Depth First Search on each component in order to detect cycles in the graph. </li> </ol>  <p>I look for cycles in the graph by searching for back edges within the graph. For each cycle I detect, I have to perform an operation that changes the graph. (I have to remove the cycle edges from the graph).  After removal of the cycle I restart the DFS to find the next cycle.</p>  <p>My question now is: </p>  <p><strong>How can I terminate the DFS on back edge detection?</strong></p>  <p>I did some research and found the following question: <a href="http://stackoverflow.com/questions/4711549/stop-boostdepth-first-search-along-a-particular-depth-if-certain-criteria-is-m">following question on stackoverflow</a></p>  <p>There it is proposed to use Boosts depth first visit. However, in the  <a href="http://www.boost.org/doc/libs/1_55_0/libs/graph/doc/depth_first_visit.html" rel="nofollow">documentation</a> It says that the terminator function is called immediately after the call to discover_vertex. Is it possible to terminate after a call to back_edge? </p>  <p>Also, is it possible to use depth_first_visit directly, without copying the boost source code as proposed by the aforementioned question?</p>  <p>What I am doing until now is storing a flag in the visitor that is set to true as soon as a cycle is detected and checking this flag on every function call in the visitor. This adds a lot of unnecessary function calls to the dfs and takes forever.  </p>  <p>Thanks for your help!</p>  <p><strong>To clarify:</strong> The algorithm I am using is described on geeksforgeeks dot org/detect-cycle-in-a-graph (sorry, I can't post more than two links)</p>  <p>What I am doing in pseudocode is: </p>  <pre><code> For each strongly connected component in g    do       perform dfs until first back edge       perform some task on the cycle edges       remove cycle edges from g    until no cycle in DFS </code></pre>  <p>@petr: Why do you think a restart of dfs is not needed?</p>