<p>Threre's a problem with boost::shared_array. I need to allocate an array and pass it to another thread to proccess its data, and delete array after that.  I can't understand what happens in the situation bellow:</p>  <pre><code>void deletePtr(boost::shared_array&lt;char&gt; ptr) {     std::cout &lt;&lt;"c3= " &lt;&lt;ptr.use_count() &lt;&lt; std::endl;     ptr.reset();     } int main() {     int i = 0;     while (i &lt; 3)     {         char* a = new char[3]{'3','2','1'};        boost::shared_array&lt;char&gt; ptr(a);        std::cout &lt;&lt; "c1= " &lt;&lt; ptr.use_count() &lt;&lt; std::endl;        boost::thread t(boost::bind(deletePtr, ptr));        std::cout &lt;&lt;"c2= " &lt;&lt;ptr.use_count() &lt;&lt; std::endl;        i++;     }        return 0; } </code></pre>  <p>I got this:c1 = 1, c2 = 2, c3 = 3</p>  <p>c1 and c2 results is what I expected, but c3 should be 1, so where two extra owners came from? Thanks for any help</p>