<p>I hope some one can help me a little here. I am relatively new to C++ and also to the concept of Templates.  I need to create a std::function based on some data that I am getting in a list.  The signature of the function should be according to the data available. I am looking for something like this </p>  <pre><code>template &lt;typename ret, typename... Args, typename newArg&gt; struct typeparser&lt;ret(...Args)&gt;{     typeparser&lt;ret(...Args)&gt; insertArg(newArg)     {         retrun typeparser &lt;ret(...args, newArg) &gt; ;      } }; </code></pre>  <p>What I want to do is iterate through a vector of <code>boost::variant</code> and then based on the type of value i see, add it to the list of parameters once complete, create a <code>std:function</code> and load it from a lib, then execute it. Make any sense? </p>  <pre><code>std::vector&lt;boost::varient&lt;int, char, std::string&gt;&gt; list; arglist = typeparser&lt;int()&gt;;   //all functions have int return, so start with return int and 0 args for(boost::varient&lt;int, char, std::string&gt; a : list) {     if(a.type() ==  typeid(int)){         arglist.addArg(int); // now add int to list of args     } else      if(a.type()== typeid(char)) {        arglist.add(char);     } else     if (a.type()== typeid(bla)) {         arglist.add(bla);     }   } // end for  //now create the function here  std::function&lt;arglist&gt; f = //load from library; </code></pre>  <p>Does this even seem possible? Maybe I am looking at the problem in the wrong way? Any thing will help at this time.  Thanks a lot!! </p>