<p>I am continuing to learn the Boost Spirit library and have comile issue with example that I couldn`t compile. The source of example you can find here: <a href="http://www.boost.org/doc/libs/1_59_0/libs/spirit/example/lex/word_count_lexer.cpp" rel="nofollow">source place</a>.  Also you can look at this code and compile result on <a href="http://coliru.stacked-crooked.com/a/543645e7bcea589b" rel="nofollow">Coliru</a></p>  <pre><code>#include &lt;boost/config/warning_disable.hpp&gt; #include &lt;boost/spirit/include/lex_lexertl.hpp&gt;  //#define BOOST_SPIRIT_USE_PHOENIX_V3 #include &lt;boost/spirit/include/phoenix_operator.hpp&gt; #include &lt;boost/spirit/include/phoenix_statement.hpp&gt; #include &lt;boost/spirit/include/phoenix_algorithm.hpp&gt; #include &lt;boost/spirit/include/phoenix_core.hpp&gt;  #include &lt;string&gt; #include &lt;iostream&gt;  namespace lex = boost::spirit::lex;  struct distance_func {     template &lt;typename Iterator1, typename Iterator2&gt;     struct result : boost::iterator_difference&lt;Iterator1&gt; {};      template &lt;typename Iterator1, typename Iterator2&gt;     typename result&lt;Iterator1, Iterator2&gt;::type      operator()(Iterator1&amp; begin, Iterator2&amp; end) const     {         return std::distance(begin, end);     } }; boost::phoenix::function&lt;distance_func&gt; const distance = distance_func();  //[wcl_token_definition template &lt;typename Lexer&gt; struct word_count_tokens : lex::lexer&lt;Lexer&gt; {     word_count_tokens()       : c(0), w(0), l(0)       , word("[^ \t\n]+")     // define tokens       , eol("\n")       , any(".")     {         using boost::spirit::lex::_start;         using boost::spirit::lex::_end;         using boost::phoenix::ref;          // associate tokens with the lexer         this-&gt;self              =   word  [++ref(w), ref(c) += distance(_start, _end)]             |   eol   [++ref(c), ++ref(l)]              |   any   [++ref(c)]             ;     }      std::size_t c, w, l;     lex::token_def&lt;&gt; word, eol, any; }; //]  /////////////////////////////////////////////////////////////////////////////// //[wcl_main int main(int argc, char* argv[]) {   typedef          lex::lexertl::token&lt;char const*, lex::omit, boost::mpl::false_&gt;       token_type;  /*&lt;  This defines the lexer type to use &gt;*/  typedef lex::lexertl::actor_lexer&lt;token_type&gt; lexer_type;  /*&lt;  Create the lexer object instance needed to invoke the lexical analysis  &gt;*/  word_count_tokens&lt;lexer_type&gt; word_count_lexer;  /*&lt;  Read input from the given file, tokenize all the input, while discarding      all generated tokens &gt;*/  std::string str;     char const* first = str.c_str();     char const* last = &amp;first[str.size()];  /*&lt;  Create a pair of iterators returning the sequence of generated tokens &gt;*/  lexer_type::iterator_type iter = word_count_lexer.begin(first, last);     lexer_type::iterator_type end = word_count_lexer.end();  /*&lt;  Here we simply iterate over all tokens, making sure to break the loop      if an invalid token gets returned from the lexer &gt;*/  while (iter != end &amp;&amp; token_is_valid(*iter))         ++iter;      if (iter == end) {         std::cout &lt;&lt; "lines: " &lt;&lt; word_count_lexer.l                    &lt;&lt; ", words: " &lt;&lt; word_count_lexer.w                    &lt;&lt; ", characters: " &lt;&lt; word_count_lexer.c                    &lt;&lt; "\n";     }     else {         std::string rest(first, last);         std::cout &lt;&lt; "Lexical analysis failed\n" &lt;&lt; "stopped at: \""                    &lt;&lt; rest &lt;&lt; "\"\n";     }     return 0; } </code></pre>  <p>When I try to compile it I receive a lot of errors, see full list on <a href="http://coliru.stacked-crooked.com/a/543645e7bcea589b" rel="nofollow">Coliru</a>.</p>  <p>What wrong with this example? What and why need be changed to compile it?</p>