<p>I'm new to Boost Multi Index container, and was wondering if it could solve in a more effecient way my problem, simplified thus:</p>  <pre><code>struct A {    int id; }  struct B {    int id;    std::list&lt;A&gt; products; } </code></pre>  <p>Each A having a strictly unique ID, I want to be able with a single multi index container, be able to look for B. By B's id, and by A's Id. </p>  <p>At the moment i'm working with nice std::map, and map linking A ids to B ids.  So to say. It works fine enough. But, I'm having other parameters for such a look up and it's getting really nasty :)</p>  <p>EDIT: </p>  <p>As per comment request I'll elaborate somewhat:</p>  <p>I've Satellites, which in turn have many Transponders and many Sources.  I want to be able to find a Satellite for a given Transponder id or Source id( which are indeed unique ) </p>  <p>Sadly I don't have hand on Satellite struct, means, I can't alter it.</p>  <p>Briefly it looks like that :</p>  <pre><code>struct Satellite {  int norad_id;  std::list&lt;Transponder&gt; transponders;  std::list&lt;Source&gt; sources;  ... some more data } </code></pre>  <p>What I want to do is simply search a whatever of Satellites, and find a Satellite having a specific transponder-, or source-, or norad id.</p>  <p>At the moment, I'm using 3 nice maps </p>  <pre><code>std::map&lt;int /*norad*/ ,Satellite&gt; satellites; std::map&lt;int /*transponder  id*/, int/* norad */&gt; transponder_to_satellite; std::map&lt;int /* source_id */,  int /* norad */ &gt; source_to_satellite; </code></pre>  <p>From the example @sehe provided, I see it would be somewhat easier if I were to spawn a relationnal struct. I guess I'll give it a try ... :)</p>