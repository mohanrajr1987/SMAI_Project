<p>For my C++ program, I need to read in a DOT file using Boost Graph, and later output another DOT file. However, I am encountering a weird error in the read-in stage which is really screwing up my program.</p>  <p>My read-in code (Graph type is a typedef of a bidirectional Boost graph)</p>  <pre><code>void readGraph(Graph&amp; graph, string filename) {      boost::dynamic_properties dp(boost::ignore_other_properties);      ifstream fin(filename.c_str());     boost::read_graphviz(fin, graph, dp);  } </code></pre>  <p>Ok, so <strong>the problem</strong> is that the nodes in the .DOT file are read in <em>in the wrong order</em>! I tried it with a simple example .DOT file:</p>  <pre><code>digraph G { 0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 0-&gt;1; 1-&gt;0; 1-&gt;2; 2-&gt;1; 2-&gt;3; 3-&gt;2; 3-&gt;4; 4-&gt;3; 4-&gt;5; 5-&gt;4; 5-&gt;6; 6-&gt;5; 6-&gt;7; 7-&gt;6; 7-&gt;8; 8-&gt;7; 8-&gt;9; 9-&gt;8; 9-&gt;10; 10-&gt;9; } </code></pre>  <p>This is a bi-directional chain from node 0 to node 10. However if I read this file using Boost Graph and output it immediately without changes, it becomes:</p>  <pre><code>digraph G { 0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 0-&gt;1 ; 1-&gt;3 ; 3-&gt;4 ; 4-&gt;5 ; 5-&gt;6 ; 6-&gt;7 ; 7-&gt;8 ; 8-&gt;9 ; 9-&gt;10 ; 10-&gt;2 ; 1-&gt;0 ; 3-&gt;1 ; 4-&gt;3 ; 5-&gt;4 ; 6-&gt;5 ; 7-&gt;6 ; 8-&gt;7 ; 9-&gt;8 ; 10-&gt;9 ; 2-&gt;10 ; } </code></pre>  <p>Notice, node 2 is now inexplicably connected to node 10, and is at the end of the chain. I have done <em>nothing</em> in between reading and outputting the graph. </p>  <p>Notes:</p>  <ul> <li><p>When I try this with more complicated .DOT files, the topology of the graph remains the same, it's just that the nodes have been permuted for some odd reason.</p></li> <li><p>I know it is a read, not write error, because when I output the vertices and edges during the program, they are already screwed up.</p></li> </ul>  <p>Can anyone help me understand and fix this? Thanks.</p>