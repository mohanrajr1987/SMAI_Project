<p>I am writing a client server program and it is my idea to have the server as simple as possible.  The server will need to complete tasks such as "move this file", "delete a file" , run this complex algorithm on the columns in a file and send back results.</p>  <p>I have created an abstract class that will be sent between server and client called aTodo There is one method called DoClass() in this abstract class that is to be run by the server.</p>  <p>Currently my server listens and waits for a connection.  When it receives a connection it creates an object of type aTodo via unserialization.  Then the server runs the DoClass function in that object.  The server then serializes the object and sends it back to the client. here is the code for reference:</p>  <pre><code>protocolBaseServer pBase(newSockFd); //create socket std::unique_ptr&lt;aTodo&gt; DoThis; //create object variable DoThis=protocolCom::Read&lt;aTodo&gt;(pBase); //read the stream into the variable  DoThis-&gt;DoClass();//call the do function in the  protocolCom::Write(DoThis,pBase);//write back to the client </code></pre>  <p>Is this a good way to program a server? It is VERY simple on the server. </p>  <p>Another way I was thinking was to create a delegate class that would be serialized and sent back and forth. The delegate would have a DoDelegate method. Then the user could put ANY function into the delegate's DoDelegate method.  This would in affect allow the server to run any method in a class rather than just the Single DoClass method I have the server run now.</p>  <p>Thanks</p>