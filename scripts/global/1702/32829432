<p>I'm compiling boost and libtorrent-rasterbar using homebrew on Mac OS X Yosemite. The resulting dylib (which I understand is supposed to be universal, minus architecture) seems to work on only some machines.</p>  <p>I compile boost and libtorrent-rasterbar using brew with the following commands:</p>  <pre><code>brew install boost --build-from-source --with-python --universal brew install libtorrent-rasterbar --enable-python-binding --with-python --with-boost-python=mt </code></pre>  <p>Homebrew compiles using the following configurations:</p>  <p>Boost:</p>  <pre><code>./bootstrap.sh --prefix=/usr/local/Cellar/boost/1.58.0 --libdir=/usr/local/Cellar/boost/1.58.0/lib --without-icu --without-libraries=python,context,coroutine,mpi  ./b2 --prefix=/usr/local/Cellar/boost/1.58.0 --libdir=/usr/local/Cellar/boost/1.58.0/lib -d2 -j4 --layout=tagged --user-config=user-config.jam install threading=multi,single link=shared,static address-model=32_64 architecture=x86 pch=off </code></pre>  <p>Libtorrent:</p>  <pre><code>./configure --disable-debug --disable-dependency-tracking --disable-silent-rules --enable-encryption --prefix=/usr/local/Cellar/libtorrent-rasterbar/1.0.6 --with-boost=/usr/local/opt/boost --enable-python-binding --with-boost-python=boost_python-mt  make install </code></pre>  <p>The libtorrent dylib always works on the machine it compiles on but sometimes crashes when that same dylib is used on a different machine (running the same OS and architecture too).</p>  <p>The stack trace I get is:</p>  <pre><code>Crashed Thread:        0  Dispatch queue: com.apple.main-thread  Exception Type:        EXC_BAD_INSTRUCTION (SIGILL) Exception Codes:       0x0000000000000001, 0x0000000000000000  Thread 0 Crashed:: Dispatch queue: com.apple.main-thread 0   libtorrent-rasterbar.8.dylib    0x0000000107fadb25 libtorrent::time_now_hires() + 47 1   libtorrent-rasterbar.8.dylib    0x0000000107ef71fc libtorrent::aux::settings_map() + 510 2   libtorrent-rasterbar.8.dylib    0x0000000107ed7881 libtorrent::session::init(std::__1::pair&lt;int, int&gt;, char const*, libtorrent::fingerprint const&amp;, unsigned int) + 67 3   libtorrent.so                   0x0000000107a985b5 libtorrent::session::session(libtorrent::fingerprint const&amp;, int, unsigned int) + 59 4   libtorrent.so                   0x0000000107a9846d boost::python::objects::value_holder&lt;libtorrent::session&gt;::value_holder&lt;boost::python::objects::reference_to_value&lt;libtorrent::fingerprint&gt;, int&gt;(_object*, boost::python::objects::reference_to_value&lt;libtorrent::fingerprint&gt;, int) + 73 5   libtorrent.so                   0x0000000107a983dd boost::python::objects::make_holder&lt;2&gt;::apply&lt;boost::python::objects::value_holder&lt;libtorrent::session&gt;, boost::mpl::vector2&lt;libtorrent::fingerprint, int&gt; &gt;::execute(_object*, libtorrent::fingerprint, int) + 59 6   libtorrent.so                   0x0000000107a98905 boost::python::detail::caller_arity&lt;3u&gt;::impl&lt;void (*)(_object*, libtorrent::fingerprint, int), boost::python::default_call_policies, boost::mpl::vector4&lt;void, _object*, libtorrent::fingerprint, int&gt; &gt;::operator()(_object*, _object*) + 263 7   libboost_python-mt.dylib        0x000000010828a31a boost::python::objects::function::call(_object*, _object*) const + 826 8   libboost_python-mt.dylib        0x000000010828c48a 0x10827a000 + 74890 9   libboost_python-mt.dylib        0x0000000108293391 boost::python::handle_exception_impl(boost::function0&lt;void&gt;) + 81 10  libboost_python-mt.dylib        0x000000010828bef3 0x10827a000 + 73459 </code></pre>  <p>I can confirm that in every dylib I've compiled the time_now_hires() function is there and that the assembly instructions are almost identical except for the call to Mac OS X's _mach_timebase_info and _mach_absolute_time:</p>  <pre><code>__ZN10libtorrent14time_now_hiresEv: 00000000001c0fd4    pushq   %rbp 00000000001c0fd5    movq    %rsp, %rbp 00000000001c0fd8    cmpl    $0x0, 0xef84d(%rip) 00000000001c0fdf    jne 0x1c0fed 00000000001c0fe1    leaq    __ZZN10libtorrent14time_now_hiresEvE13timebase_info(%rip), %rdi ## libtorrent::time_now_hires()::timebase_info 00000000001c0fe8    callq   0x2166d4                ## symbol stub for: _mach_timebase_info 00000000001c0fed    callq   0x2166ce                ## symbol stub for: _mach_absolute_time 00000000001c0ff2    shrq    $0x3, %rax 00000000001c0ff6    movabsq $0x20c49ba5e353f7cf, %rcx ## imm = 0x20C49BA5E353F7CF 00000000001c1000    mulq    %rcx 00000000001c1003    shrq    $0x4, %rdx 00000000001c1007    movl    __ZZN10libtorrent14time_now_hiresEvE13timebase_info(%rip), %eax ## libtorrent::time_now_hires()::timebase_info 00000000001c100d    imulq   %rdx, %rax 00000000001c1011    movl    0xef815(%rip), %ecx 00000000001c1017    xorl    %edx, %edx 00000000001c1019    divq    %rcx 00000000001c101c    popq    %rbp 00000000001c101d    retq </code></pre>  <p>Should I be compiling boost/libtorrent in a different manner?</p>