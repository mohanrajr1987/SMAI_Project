<p>So I have a strange situation here. I have the following code:</p>  <pre><code>int main() {     std::shared_ptr&lt;MyClassA&gt; classA = std::shared_ptr&lt;MyClassA&gt;(new MyClassA);     std::shared_ptr&lt;MyClassB&gt; classB = std::shared_ptr&lt;MyClassB&gt;(new MyClassB(classA));      boost::thread_group threadGroup;      // This thread is essentially an infinite loop waiting for data on a socket     threadGroup.create_thread( boost::bind(&amp;MyClassB::method1, classB) );      ...do stuff      return 0; } </code></pre>  <p>MyClassB opens several resources, that are not deallocated when the program exits. However, if I remove the call to create_thread, the resources are deallocated. I put a printout in the destructor of MyClassB, and verified that it's not being called if that thread is created.</p>  <p>Anybody have any insight into what's going on here?</p>