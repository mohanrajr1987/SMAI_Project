<p>Title says what is my problem, i can put whatever value in encoding parameter and is totally ignored.</p>  <p>Sample lines:</p>  <pre><code>fwidths = [1, 1, 1, 1] JCDColNames =[                "first", "second", "third"              ] df = pd.read_fwf(filePath, encoding="blabla", widths = fwidths, header=True) </code></pre>  <p>This line doesn't raise error because of non existing encoding. Ofcourse, puting encoding = "utf-8" doesnt help either, special eastern europian characters like "Ž" is not recognised.</p>  <p>Does anyone have any workaround or solution? I have to to analyze lots of fixed width text files using pandas and data frames, but having read_fwf function ignoring my encodings brings me to full stop.</p>  <p>Version of pandas is : 0.16.2</p>  <p>I would like to mention that read_csv function works great, and is raising error if non existing encoding is put as a parameter, and is also recognising letter "Ž" if i put "utf-8"  as encoding parameter value.</p>  <p>Thank you very much for your help.</p>  <p>I found the cause of problem. If you are using python 2.7 and use read_fwf pandas function, you should know that your encoding parameter is ignored. The reason is this code in common.py file in pandas\core\common directory:</p>  <p>if compat.PY3:             if encoding:                 f = open(path, mode, encoding=encoding)             else:                 f = open(path, mode, errors='replace')         else:             f = open(path, mode)</p>  <p>Solution is to use python 3.2 or follow this link for another solution which includes changing this file (common.py):</p>  <p><a href="http://stackoverflow.com/questions/10971033/backporting-python-3-openencoding-utf-8-to-python-2">how to resolve encoding problem</a></p>  <p>I just used codecs.open solution : f = codecs.open(path, mode, encoding = encoding)</p>