<h2>Short Question:</h2>  <p><strong>How could I get events from an axShockwavePlayer playing youtube videos?</strong></p>  <p>(events such as "video playing" and "paused")</p>  <hr>  <h2>Long Question:</h2>  <p>I have an application in winforms with a <strong>shockwave player</strong>.</p>  <p>In it I play youtube videos and I was wondering if I could <strong>interact with the youtube player</strong> in my application.</p>  <p>I'm trying to <strong>get the state of the player</strong> and change my background music according to it.</p>  <p>Searching around I found this question:  <a href="http://stackoverflow.com/questions/13260361/how-to-control-the-youtube-flash-player-with-c">How to control the youtube flash player with c#?</a> and the great  <a href="http://stackoverflow.com/questions/13260361/how-to-control-the-youtube-flash-player-with-c/16508605?noredirect=1#answer-13604903">answer</a>. </p>  <p>(both from 2012)</p>  <p>Playing around with it I found out that appearently the answer is too old, and won't work for me.</p>  <p>The posted answer includes simple debuging, and this is what i got for clicking the player (and start playing the video):</p>  <pre><code>ytbPlayer FlashCall: raw: &lt;invoke name="isNaN" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "isNaN() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="         (function() {           try {             yt.www.watch.ads.checkInit();             return true;           } catch (e) {             window['adModuleLoaded'] = true;             return false;           }         })" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "         (function() {           try {             yt.www.watch.ads.checkInit();             return true;           } catch (e) {             window['adModuleLoaded'] = true;             return false;           }         })() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.document.referrer.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.document.referrer.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.top.location.href.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.top.location.href.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.document.referrer.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.document.referrer.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="googletag.cmd.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "googletag.cmd.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="googleGetCompanionAdSlots" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "googleGetCompanionAdSlots() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="google_get_companion_slot_params" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "google_get_companion_slot_params() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.top.location.href.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.top.location.href.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.document.referrer.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.document.referrer.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.document.referrer.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.document.referrer.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.top.location.href.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.top.location.href.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.screen.height.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.screen.height.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.screen.width.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.screen.width.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="navigator.javaEnabled" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "navigator.javaEnabled() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.history.length.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.history.length.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.screen.availHeight.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.screen.availHeight.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.screen.availWidth.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.screen.availWidth.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.screen.colorDepth.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.screen.colorDepth.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.navigator.plugins.length.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.navigator.plugins.length.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.navigator.mimeTypes.length.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.navigator.mimeTypes.length.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="yt.util.activity.getTimeSinceActive" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "yt.util.activity.getTimeSinceActive() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.top.location.href.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.top.location.href.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.document.referrer.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.document.referrer.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="google_show_companion_ad" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "google_show_companion_ad() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="Goog_AdSense_Lidar_sendVastMessage" returntype="xml"&gt;&lt;arguments&gt;&lt;string&gt;expandedChanged&lt;/string&gt;&lt;string&gt;741024059.2435002&lt;/string&gt;&lt;object&gt;&lt;property id="opt_bounds"&gt;&lt;object&gt;&lt;property id="width "&gt;&lt;number&gt;431&lt;/number&gt;&lt;/property&gt;&lt;property id="height"&gt;&lt;number&gt;62&lt;/number&gt;&lt;/property&gt;&lt;property id="expanded"&gt;&lt;false/&gt;&lt;/property&gt;&lt;property id="left"&gt;&lt;number&gt;20&lt;/number&gt;&lt;/property&gt;&lt;property id="top"&gt;&lt;number&gt;128&lt;/number&gt;&lt;/property&gt;&lt;/o bject&gt;&lt;/property&gt;&lt;/object&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "Goog_AdSense_Lidar_sendVastMessage(expandedChanged741024059.24350024316220128) YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="Goog_AdSense_Lidar_getUrlSignalsList" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "Goog_AdSense_Lidar_getUrlSignalsList() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="Goog_AdSense_Lidar_sendVastMessage" returntype="xml"&gt;&lt;arguments&gt;&lt;string&gt;expandedChanged&lt;/string&gt;&lt;string&gt;741024059.2435002&lt;/string&gt;&lt;object&gt;&lt;property id="opt_fullscreen"&gt;&lt;false/&gt;&lt;/property&gt;&lt;pro perty id="opt_bounds"&gt;&lt;object&gt;&lt;property id="width"&gt;&lt;number&gt;431&lt;/number&gt;&lt;/property&gt;&lt;property id="height"&gt;&lt;number&gt;62&lt;/number&gt;&lt;/property&gt;&lt;property id="expanded"&gt;&lt;true/&gt;&lt;/property&gt;&lt;property id="left"&gt;&lt;number&gt;20&lt;/number&gt;&lt;/property&gt;&lt;prop erty id="top"&gt;&lt;number&gt;128&lt;/number&gt;&lt;/property&gt;&lt;/object&gt;&lt;/property&gt;&lt;/object&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "Goog_AdSense_Lidar_sendVastMessage(expandedChanged741024059.24350024316220128) YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="googletag.cmd.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "googletag.cmd.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="googleGetCompanionAdSlots" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "googleGetCompanionAdSlots() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="google_get_companion_slot_params" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "google_get_companion_slot_params() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.top.location.href.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.top.location.href.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.document.referrer.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.document.referrer.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.document.referrer.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.document.referrer.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.screen.height.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.screen.height.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.screen.width.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.screen.width.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="navigator.javaEnabled" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "navigator.javaEnabled() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.history.length.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.history.length.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.screen.availHeight.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.screen.availHeight.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.screen.availWidth.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.screen.availWidth.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.screen.colorDepth.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.screen.colorDepth.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.navigator.plugins.length.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.navigator.plugins.length.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.navigator.mimeTypes.length.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.navigator.mimeTypes.length.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="yt.util.activity.getTimeSinceActive" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "yt.util.activity.getTimeSinceActive() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.top.location.href.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.top.location.href.toString() YTplayer_FlashCall: unknownCommand ytbPlayer FlashCall: raw: &lt;invoke name="window.document.referrer.toString" returntype="xml"&gt;&lt;arguments&gt;&lt;/arguments&gt;&lt;/invoke&gt; ytbPlayer_FlashCall: "window.document.referrer.toString() YTplayer_FlashCall: unknownCommand </code></pre>  <p>This is the code I used:</p>  <pre><code> private void ytbPlayer_FlashCall(object sender, AxShockwaveFlashObjects._IShockwaveFlashEvents_FlashCallEvent e) //asigned as an event handler for FlashCall         {             Console.Write("ytbPlayer FlashCall: raw: " + e.request.ToString() + "\r\n");             // message is in xml format so we need to parse it             XmlDocument document = new XmlDocument();             document.LoadXml(e.request);             // get attributes to see which command flash is trying to call             XmlAttributeCollection attributes = document.FirstChild.Attributes;             String command = attributes.Item(0).InnerText;             // get parameters             XmlNodeList list = document.GetElementsByTagName("arguments");             List&lt;string&gt; listS = new List&lt;string&gt;();             foreach (XmlNode l in list)             {                 listS.Add(l.InnerText);             }             Console.Write("ytbPlayer_FlashCall: \"" + command.ToString() + "(" + string.Join(",", listS) + ")\r\n");             // Interpret command             switch (command)             {                 case "onYouTubePlayerReady": YTready(listS[0]); break;                 case "YTStateChange": YTStateChange(listS[0]); break;                 case "YTError": YTStateError(listS[0]); break;                 default: Console.Write("YTplayer_FlashCall: unknownCommand\r\n"); break;             }         }          private string ytbPlayer_CallFlash(string ytFunction)         {             string flashXMLrequest = "";             string response = "";             string flashFunction = "";             List&lt;string&gt; flashFunctionArgs = new List&lt;string&gt;();              Regex func2xml = new Regex(@"([a-z][a-z0-9]*)(\(([^)]*)\))?", RegexOptions.Compiled | RegexOptions.IgnoreCase);             Match fmatch = func2xml.Match(ytFunction);              if (fmatch.Captures.Count != 1)             {                 Console.Write("bad function request string");                 return "";             }              flashFunction = fmatch.Groups[1].Value.ToString();             flashXMLrequest = "&lt;invoke name=\"" + flashFunction + "\" returntype=\"xml\"&gt;";             if (fmatch.Groups[3].Value.Length &gt; 0)             {                 flashFunctionArgs = parseDelimitedString(fmatch.Groups[3].Value);                 if (flashFunctionArgs.Count &gt; 0)                 {                     flashXMLrequest += "&lt;arguments&gt;&lt;string&gt;";                     flashXMLrequest += string.Join("&lt;/string&gt;&lt;string&gt;", flashFunctionArgs);                     flashXMLrequest += "&lt;/string&gt;&lt;/arguments&gt;";                 }             }             flashXMLrequest += "&lt;/invoke&gt;";              try             {                 Console.Write("YTplayer_CallFlash: \"" + flashXMLrequest + "\"\r\n");                 response = ytbPlayer.CallFunction(flashXMLrequest);                 Console.Write("YTplayer_CallFlash_response: \"" + response + "\"\r\n");             }             catch             {                 Console.Write("YTplayer_CallFlash: error \"" + flashXMLrequest + "\"\r\n");             }              return response;         }          private static List&lt;string&gt; parseDelimitedString(string arguments, char delim = ',')         {             bool inQuotes = false;             bool inNonQuotes = false;             int whiteSpaceCount = 0;              List&lt;string&gt; strings = new List&lt;string&gt;();              StringBuilder sb = new StringBuilder();             foreach (char c in arguments)             {                 if (c == '\'' || c == '"')                 {                     if (!inQuotes)                         inQuotes = true;                     else                         inQuotes = false;                      whiteSpaceCount = 0;                 }                 else if (c == delim)                 {                     if (!inQuotes)                     {                         if (whiteSpaceCount &gt; 0 &amp;&amp; inQuotes)                         {                             sb.Remove(sb.Length - whiteSpaceCount, whiteSpaceCount);                             inNonQuotes = false;                         }                         strings.Add(sb.Replace("'", string.Empty).Replace("\"", string.Empty).ToString());                         sb.Remove(0, sb.Length);                     }                     else                     {                         sb.Append(c);                     }                     whiteSpaceCount = 0;                 }                 else if (char.IsWhiteSpace(c))                 {                     if (inNonQuotes || inQuotes)                     {                         sb.Append(c);                         whiteSpaceCount++;                     }                 }                 else                 {                     if (!inQuotes) inNonQuotes = true;                     sb.Append(c);                     whiteSpaceCount = 0;                 }             }             strings.Add(sb.Replace("'", string.Empty).Replace("\"", string.Empty).ToString());               return strings;         }          private void YTready(string playerID)         {             //YTState = true;             //start eventHandlers             ytbPlayer_CallFlash("addEventListener(\"onStateChange\",\"YTStateChange\")");             ytbPlayer_CallFlash("addEventListener(\"onError\",\"YTError\")");         }          private void YTStateChange(string YTplayState)         {             switch (int.Parse(YTplayState))             {                 case -1: gm_Name.Text = "not started"; break; //not started yet                 case 1: Console.WriteLine("playing");  break; //playing                 case 2: Console.WriteLine("paused"); break; //paused                                                   //case 3: ; break; //buffering                 case 0: Console.WriteLine("YOU"); break; //ended             }         }         private void YTStateError(string error)         {             Console.Write("YTplayer_error: " + error + "\r\n");         } </code></pre>  <p>Looking at the debug code, I found no keyword that could have me know that the user clicked the shockwaveplayer.</p>  <p><strong>How could I change the code to match the current youtube api?</strong></p>