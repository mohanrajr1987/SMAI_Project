<p>I am using youTube API for video upload. I am v=calling php file from my ajax request. Actually the video upload is successfully happening but the response I am getting is "ERROR".</p>  <p>I think It's happening due to the timeout issue. Can any one suggest the way to solve this issue</p>  <p>PHP file</p>  <pre><code>&lt;?php // Call set_include_path() as needed to point to your client library. header('Content-Type: application/json'); session_start(); if(isset($_POST['title']) &amp;&amp; isset($_POST['description']) &amp;&amp; isset($_POST['filepath'])) { require_once 'Google/autoload.php'; require_once 'Google/Client.php'; require_once 'Google/Service/YouTube.php';  /*  * You can acquire an OAuth 2.0 client ID and client secret from the  * {{ Google Cloud Console }} &lt;{{ https://cloud.google.com/console }}&gt;  * For more information about using OAuth 2.0 to access Google APIs, please see:  * &lt;https://developers.google.com/youtube/v3/guides/authentication&gt;  * Please ensure that you have enabled the YouTube Data API for your project.  */  $data = "";  $htmlBody="";  $videoFilePath =$_POST['filepath'];  $videotitle = $_POST['title'];  $videodescription = $_POST['description'];  if(isset($_POST['videotags']))  {     $videotags = $_POST['videotags'];  } else {     $videotags = "" ;  }   $client_id = 'asdasasdasd.apps.googleusercontent.com';     $client_secret = 'KZasdasdasdasdasdasd';     $redirect_uri = 'http://localhost/youtubeapi/upload.php';  $htmlBody="";     $client = new Google_Client();     $client-&gt;setApplicationName("Youtube API");     $client-&gt;setClientId($client_id);     $client-&gt;setClientSecret($client_secret);     $client-&gt;setRedirectUri($redirect_uri);     $client-&gt;setScopes(array('https://www.googleapis.com/auth/youtube'));     $client-&gt;setAccessType('offline');   // Gets us our refreshtoken  $youtube = new Google_Service_YouTube($client);  if (isset($_GET['logout']) == "1") {     unset($_SESSION['token']);        }    if (isset($_GET['code'])) {          $client-&gt;authenticate($_GET['code']);           $_SESSION['token'] = $client-&gt;getAccessToken();         $redirect = 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['PHP_SELF'];         header('Location: ' . filter_var($redirect, FILTER_SANITIZE_URL));     }     $jsontoken = $_POST['authtoken'];     $jsontoken = json_decode( $jsontoken, true);     $arraytoken = array('access_token'=&gt;$jsontoken['access_token'],                                 'token_type'=&gt;$jsontoken['token_type'],                                 'expires_in'=&gt;$jsontoken['expires_in'],                                 'created'=&gt;$jsontoken['issued_at']                                     );      $_SESSION['token'] = json_encode($arraytoken);   //$_SESSION['token'] ='{"access_token":"ya29.6QGkxLIlug8pA7OuIdXPstsVbScUVo3TUxgQaIbCdJSp9r0WwDutN9UoSxqGFJZLqdKz","token_type":"Bearer","expires_in":3600,"created":1441793364}';    //$_SESSION['token'] = $_COOKIE['authtoken'];     // Step 1:  The user has not authenticated we give them a link to login         if (!$client-&gt;getAccessToken() &amp;&amp; !isset($_SESSION['token'])) {         $authUrl = $client-&gt;createAuthUrl();         }           // Step 3: We have access we can now create our service     if (isset($_SESSION['token'])) {         $client-&gt;setAccessToken($_SESSION['token']);      } if ($client-&gt;getAccessToken()) {   try{     // REPLACE this value with the path to the file you are uploading.     $videoPath = $videoFilePath;     // Create a snippet with title, description, tags and category ID     // Create an asset resource and set its snippet metadata and type.     // This example sets the video's title, description, keyword tags, and     // video category.     $snippet = new Google_Service_YouTube_VideoSnippet();     $snippet-&gt;setTitle($videotitle);     $snippet-&gt;setDescription($_POST['description']);     $snippet-&gt;setTags(array($videotags));     // Numeric video category. See     // https://developers.google.com/youtube/v3/docs/videoCategories/list      $snippet-&gt;setCategoryId("22");     // Set the video's status to "public". Valid statuses are "public",     // "private" and "unlisted".     $status = new Google_Service_YouTube_VideoStatus();     $status-&gt;privacyStatus = "unlisted";     // Associate the snippet and status objects with a new video resource.     $video = new Google_Service_YouTube_Video();     $video-&gt;setSnippet($snippet);     $video-&gt;setStatus($status);     // Specify the size of each chunk of data, in bytes. Set a higher value for     // reliable connection as fewer chunks lead to faster uploads. Set a lower     // value for better recovery on less reliable connections.     $chunkSizeBytes = 1 * 1024 * 1024;     // Setting the defer flag to true tells the client to return a request which can be called     // with -&gt;execute(); instead of making the API call immediately.     $client-&gt;setDefer(true);     // Create a request for the API's videos.insert method to create and upload the video.     $insertRequest = $youtube-&gt;videos-&gt;insert("status,snippet", $video);     // Create a MediaFileUpload object for resumable uploads.     $media = new Google_Http_MediaFileUpload(         $client,         $insertRequest,         'video/*',         null,         true,         $chunkSizeBytes     );     $media-&gt;setFileSize(filesize($videoPath));     // Read the media file and upload it chunk by chunk.     $status = false;     $handle = fopen($videoPath, "rb");     while (!$status &amp;&amp; !feof($handle)) {       $chunk = fread($handle, $chunkSizeBytes);       $status = $media-&gt;nextChunk($chunk);     }     fclose($handle);     // If you want to make other calls after the file upload, set setDefer back to false     $client-&gt;setDefer(false);     $htmlBody .= "&lt;h3&gt;Video Uploaded&lt;/h3&gt;&lt;ul&gt;";     $htmlBody .= sprintf('&lt;li&gt;%s (%s)&lt;/li&gt;',         $status['snippet']['title'],         $status['id']);     $htmlBody .= '&lt;/ul&gt;';     $data = array('response'=&gt;true,                                     'auth'=&gt;true,                                     'error'=&gt;false,                                     'isSuccess'=&gt;true,                                     'streamId'=&gt;$status['id'],                                     'streamTitle'=&gt;$status['snippet']['title']                                     );   } catch (Google_Service_Exception $e) {             $data = array('response'=&gt;true,                             'auth'=&gt;true,                             'error'=&gt;true,                             'errorMessage'=&gt;$e-&gt;getMessage()               );   } catch (Google_Exception $e) {             $data = array('response'=&gt;true,                             'auth'=&gt;true,                             'error'=&gt;true,                             'errorMessage'=&gt;$e-&gt;getMessage()               );   }   $_SESSION['token'] = $client-&gt;getAccessToken(); } else {   // If the user hasn't authorized the app, initiate the OAuth flow $json = $_SESSION['token']; $json = json_decode($json, true);               $data = array('response'=&gt;true,                             'error'=&gt;false,                             'auth'=&gt;false,                             'message'=&gt; 'not authorized',                             'token'=&gt;$json['access_token']               ); }  } else {    $data = array('response'=&gt;true,                             'error'=&gt;false,                             'auth'=&gt;false,                             'message'=&gt; 'no valid inputs'               );  }  echo json_encode($data); </code></pre>  <p>AJAX Request:</p>  <pre><code>$.ajax({             url: 'http://localhost/youtubeapi/upload.php',             type: 'POST',             dataType: "json",             timeout:60000,             data: {                 title: title,              description: description,              filepath: videoupload,              authtoken : googletoken             }         }).done(function(data){                 alert(JSON.stringify(data));         })           .fail(function() {     alert( "error");   }); </code></pre>  <p>In this AJAX request I am getting error message but my video is successfully uploading to YOUTUBE.</p>