<p>I would like effectively map structures with registers to a memory. Actually I have working code like this:</p>  <p>Structure with registers for a peripheral:</p>  <pre><code>struct Periph {     volatile uint32_t REG1;     volatile uint32_t REG2; }; </code></pre>  <p>In device is this peripheral two times located on two different addresses in memory, so define these addresses:</p>  <pre><code>static constexpr size_t PERIPH1_BASE = 0x40000000; static constexpr size_t PERIPH2_BASE = 0x40001000; </code></pre>  <p>Then I have a driver which can use any of these registers:</p>  <pre><code>template&lt;size_t Base&gt; struct Driver {     inline Periph &amp;r() {         return *reinterpret_cast&lt;Periph *&gt;(base);     }     void setFoo(uint32_t x) {         r().REG1 = x;     }     uint32_t getBar() {         return r().REG2;     } }; </code></pre>  <p>To use this driver is simple, only need set address of certain peripheral to template:</p>  <pre><code>Driver&lt;PERIPH1_BASE&gt; drv; uint32_t x = drv.getBar(); drv.setFoo(x); ... </code></pre>  <p>If compiler merge all inline functions after optimization then this method works very effectively with registers and without any overhead.</p>  <p>But this is not very safe, because I can set to <code>Driver</code> any address from different peripheral.</p>  <p>My Idea to improve this is to put reference to a structure as template argument, but without success.</p>  <p>First I defined references to registers:</p>  <pre><code>static Periph &amp;PERIPH1 = *reinterpret_cast&lt;Periph *&gt;(PERIPH1_BASE); static Periph &amp;PERIPH2 = *reinterpret_cast&lt;Periph *&gt;(PERIPH2_BASE); </code></pre>  <p>This is working, I can directly access these registers like:</p>  <pre><code>PERIPH2.REG1 = 123; </code></pre>  <p>But I have no idea how to pass these references to template argument, my attempt is following:</p>  <pre><code>template&lt;Periph &amp;r&gt; struct Driver {     void setFoo(uint32_t x) {         r.REG1 = x;     }     uint32_t getBar() {         return r.REG2;     } };  Driver&lt;PERIPH2&gt; drv; drv.setFoo(x); </code></pre>  <p>From this I get following error:</p>  <pre><code>`error: the value of 'PERIPH2' is not usable in a constant expression` </code></pre>  <p>If I define PERIPH2 as constexpr then I get another error:</p>  <pre><code>`error: reinterpret_cast from integer to pointer` </code></pre>  <p>... So how to put reference to an object as template argument? Or an idea or suggestion to make this better.</p>  <p><em>Also here exists lot of other solutions (like put reference to a Driver constructor...), but this slow down access to registers.</em></p>  <p>Thanks for any help.</p>