<p>When writing code I often have checks to see if errors occurred. An example would be: </p>  <pre><code>char *x = malloc( some_bytes );  if( x == NULL ){     fprintf( stderr, "Malloc failed.\n" );      exit(EXIT_FAILURE);  } </code></pre>  <p>I've also used <code>strerror( errno )</code> in the past. </p>  <p>I've only ever written small desktop appications where it doesn't matter if the program <code>exit()</code>ed in case of an error. </p>  <p>Now, however, I'm writing C code for an embedded system (Arduino) and I don't want the system to just exit in case of an error. I want it to go to a particular state/function where it can power down systems, send error reports and idle safely. </p>  <p>I could simply call an <code>error_handler()</code> function, but I could be deep in the stack and very low on memory, leaving <code>error_handler()</code> inoperable.  </p>  <p>Instead, I'd like execution to effectively collapse the stack, free up a bunch of memory and start sorting out powering down and error reporting. There is a serious fire risk if the system doesn't power down safely. </p>  <p>Is there a standard way that safe error handling is implemented in low memory embedded systems?</p>  <p>EDIT 1: I'll limit my use of <code>malloc()</code> in embedded systems. In this particular case, the errors would occur when reading a file, if the file was not of the correct format. </p>