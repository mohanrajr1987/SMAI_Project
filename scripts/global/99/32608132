<p>I'm currently facing some strange problem on my distributed application. This application generally do the following things:</p>  <ul> <li>Read and Write Data from an NFSv3 Filesystem</li> <li>Read and Write Data from a tmpfs Filesystem</li> <li>One process generate files on tmpfs and access to them with another process (or another java thread which in the end is a pthread)</li> <li>One process generate files on NFSv3 and access to them with another process (or another java thread which in the end is a pthread)</li> <li>Write data to NFSv3 and read the same data from another machine</li> </ul>  <p>We discovered many latency problems with NFSv3 but those problems are known: If you write a file on NFS and than try to read from another machine it can take up to 90 seconds to be available when the stat syscall is executed on the other machine.</p>  <p>So we implemented some retry code to address this issue.</p>  <p>Recently we spotted a similar behaviour also on tmpfs but since it's in ram I thought that at the end of a write the same machine with another thread executed at the end of the write should see the file but we got an error about it.</p>  <p>So we decided to implement again another retry block </p>  <p>The question is: is the tmpfs transactional when the code stop to write on the file ?</p>  <p>And more in general how on the different filesystem this concept is applied ?</p>  <p>Thanks Marco</p>