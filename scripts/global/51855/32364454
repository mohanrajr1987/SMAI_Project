<p>I'm working on an Rails 4.1 engine that handles user uploads of photos and videos. I'm using Mongoid-Paperclip to handle the uploads and Paperclip-av-transcoder to encode the videos into several formats. All files are stored at S3. All of that works fine, but as you can expect, encoding the videos can take quite some time, so the next step is to make that happen in the background. I did some googling and found <a href="https://github.com/jrgifford/delayed_paperclip" rel="nofollow">Delayed_Paperclip</a> that seems to do what I need. After that it seemed that <a href="http://sidekiq.org/" rel="nofollow">Sidekiq</a> was the best option for handling the background processing.</p>  <p>Now the problem is, I can't make all this work together. Running my unit tests I get <code>NoMethodError: undefined method 'process_in_background'</code> so it seems the problem resides on Delayed_Paperclip, although there is no special setup to it.</p>  <p>This is the model firing the problem</p>  <pre><code>module MyEngine   class Video     include Mongoid::Document     include Mongoid::Paperclip      has_mongoid_attached_file :file,       :path =&gt; ':hash.:extension',       :hash_secret =&gt; "the-secret",       :storage =&gt; :s3,       :url =&gt; ':s3_domain_url',       :s3_credentials =&gt; File.join(Rails.root, 'config', 's3.yml'),       :bucket =&gt; "my-bucket-#{Rails.env}",       :styles =&gt; {         :mp4 =&gt; { :format =&gt; 'mp4', :convert_options =&gt; { :output =&gt; { :vcodec =&gt; 'libx264', :acodec =&gt; 'copy' } } },         :ogg =&gt; { :format =&gt; 'ogg', :auto_rotate =&gt; true  },         :webm =&gt; { :format =&gt; 'webm', :auto_rotate =&gt; true  },         :thumb =&gt; { :geometry =&gt; "250x187#", :format =&gt; 'jpg', :time =&gt; 10, :auto_rotate =&gt; true }       },       :processors =&gt; [:transcoder]      validates_attachment :file, :content_type =&gt; { :content_type =&gt; ["video/x-flv", "video/mp4", "video/ogg", "video/webm", "video/x-ms-wmv", "video/x-msvideo", "video/quicktime", "video/3gpp"] }      process_in_background :file   end end </code></pre>  <p>I've tried adding <code>require "delayed_paperclip"</code> to the <code>lib/myengine/myengine.rb</code> file but that didn't help.</p>  <p>Regarding Sidekiq, I have added to the <code>test_helper.rb</code> the following:</p>  <pre><code>require 'sidekiq/testing' Sidekiq::Testing.inline! </code></pre>  <p>Note that I did not forget to run <code>bundle install</code> and Redis is up and running. I'm using Mongoid, not active record.</p>  <p>What I am doing wrong? Has anyone successfully used this setup? Is there another combination of gems that I should try?</p>  <p>Aditional info:</p>  <ul> <li>Delayed_paperclip 2.9.1 </li> <li>Mongoid 4.0.2 </li> <li>Mongoid-Paperclip 0.0.9</li> <li>Paperclip 4.2.1 </li> <li>Paperclip-av-transcoder 0.6.4 </li> <li>Rails 4.1.9 </li> <li>Sidekiq 3.5.0</li> </ul>