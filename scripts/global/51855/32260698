<p><strong>Edit: This issue is resolved. The issue was caused by a conflict specific to my application</strong>. Another module dynamically created a method named <code>.sources</code>. I was able to troubleshoot by removing the relationship and inspecting the objects method list. Thanks anyways.</p>  <p>I'm using Rails 4.1 with Mongoid 4.0 and have setup a relation as follows:</p>  <pre><code>class Organization   include Mongoid::Document   has_many :sources end </code></pre>  <p>and</p>  <pre><code>class Source   include Mongoid::Document   belongs_to :organization end </code></pre>  <p>Then in my rspec test I have:</p>  <pre><code>require 'rails_helper' RSpec.describe PartnershipsController, :type =&gt; :controller do describe "POST #record" do   it "should create a partnership for the source's organization" do     organization = FactoryGirl.create(:organization)     source = FactoryGirl.create(:source)     organization.sources.push source   end end </code></pre>  <p>There's more after, but the test fails at the <code>organization.sources.push source</code> line with:</p>  <pre><code>undefined method `push' for nil:NilClass </code></pre>  <p>I don't understand why the error is happening. Looks like in the <a href="http://mongoid.github.io/en/mongoid/docs/relations.html#has_many" rel="nofollow">mongoid documentation</a> that's how I should be adding the related source, but so far no dice. What is the correct way to make this relation?</p>  <p><strong>Edit: adding factory</strong></p>  <p>Here's the organization factory, in case it helps clarify something:</p>  <pre><code>FactoryGirl.define do   factory :organization do     app_name = Faker::App.name     company_name = Faker::Company.name     sequence(:name) { |n| "#{([app_name, company_name].sample)}#{n}" }     defaults_hash = { 'item_type' =&gt; 'charity', 'child_item_type' =&gt; 'product'}     defaults defaults_hash   end end </code></pre>