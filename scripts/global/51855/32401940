<p>I'm using DelayedJobMongoid 2.1.0, and I'm trying to run a job that uses a non-Mongoid class as its basis. However, the job seems to run forever and never complete. My class is set up like so:</p>  <pre><code>class ProcessPackage   def initialize(params, package_id)     @params = params     @package_id = package_id   end    def process     ... main logic goes here ..   end end </code></pre>  <p>To queue the job I do the following:</p>  <pre><code>processor = ProcessPackage.new(params, package_id) processor.delay.process </code></pre>  <p>However, it seems that the job never completes, as evidenced in the logs:</p>  <pre><code>[Worker(host:MBP-3.home pid:16285)] Starting job worker [Worker(host:MBP-3.home pid:16285)] Job Delayed::PerformableMethod (id=55e9ba255374753252000007) RUNNING </code></pre>  <p>Also, trying to output any debug information in the <code>process</code> method doesn't work either, which leads me to believe that the method is not getting called properly. Am I missing something really obvious?</p>