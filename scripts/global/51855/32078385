<p>there is this gem Bullet (<a href="https://github.com/flyerhzm/bullet" rel="nofollow">https://github.com/flyerhzm/bullet</a>) which detects n+1 queries automatically. This is pretty cool, so I was wondering if there is a solution to detect queries with missing indexes for mongoid 4.</p>  <p>I've found dex (<a href="https://github.com/mongolab/dex" rel="nofollow">https://github.com/mongolab/dex</a>) but this is pretty outdated, and doesn't produce any good results (in my case). I also tried to come up with my own solution, but I think this is kinda hacky, and I'm not sure if I did everything right:</p>  <pre><code>require 'mongoid' ::Mongoid::Criteria.class_eval do   alias_method :origin_where, :where    def where(expression)     result = origin_where(expression)     begin       explain = result.explain()       stage = explain["executionStats"]["executionStages"]        while(stage) do         if stage["stage"] == "COLLSCAN"           puts "COLLSCAN for #{result.klass}, selector: #{result.selector}"         end         stage = stage["inputStage"]       end     rescue Exception =&gt; e       puts "ERROR: #{e}"     end     result   end end </code></pre>  <p>This script is loaded in an initializer, and runs the explain command on every <code>where</code> query. It then checks for a <code>COLLSCAN</code> which (correct me if I'm wrong) indicates a lack of indexes.</p>  <p>One problem is, that it throws an error like</p>  <pre><code>ERROR: undefined method `explain' for #&lt;Mongoid::Contextual::Memory:0x007ff9d822ff90&gt; </code></pre>  <p>I'm not 100% sure, but it seems to happen, when a <code>where</code> query is done at an embedded document. Am I right, that querying an embedded document doesn't need an <code>explain</code> method, because it already is in memory? Maybe someone can explain this a little bit better.</p>  <p>So any ideas are appreciated!</p>