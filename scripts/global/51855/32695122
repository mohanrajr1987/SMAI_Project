<p>I'm trying to create a <code>translate</code> keyword that create a class member working like a simple string but with different values, depending of the locale set.</p>  <p>Here is my code :</p>  <pre><code>module Translate   def translate(*attr_name)     _field_name = attr_name[0]     has_many :translations     define_method(_field_name) do       self.translations.where(key: _field_name, locale: I18n.locale).first     end     define_method("#{_field_name}=") do |params|       self.translations.create!(key: _field_name, locale: I18n.locale, value: params.to_s)     end   end end  class Translation   include Mongoid::Document   field :key, type: String   field :value, type: String, default: ''   field :locale, type: String    belongs_to :productend end  class Product   include Mongoid::Document   extend Translate   translate :description end </code></pre>  <p>I'm getting this error :</p>  <pre><code>Mongoid::Errors::UnsavedDocument:  Problem:   Attempted to save Translation before the parent Product. Summary:   You cannot call create or create! through the relation (Translation) who's parent (Product) is not already saved. This would case the database to be out of sync since the child could potentially reference a nonexistant parent. Resolution:   Make sure to only use create or create! when the parent document Product is persisted. from /Library/Ruby/Gems/2.0.0/gems/mongoid-3.1.7/lib/mongoid/relations/proxy.rb:171:in `raise_unsaved' </code></pre>