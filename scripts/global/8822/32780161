<p>I'm tearing my hair out about how to include thrid party libraries in my cmake project. Currently I build Poco and a bunch of others that all generate their respective Config.cmake which I use with find_package. I have a wrapping build script that builds all of my dependencies and package them separately for debug and release (I don't want to tweak their cmake-scripts unless I really really really need to because maintanance).</p>  <p>I thought I could just do:</p>  <pre><code>find_package(Foo             HINTS "${CMAKE_SOURCE_DIR}/some/path/debug/libFoo/lib/cmake"             REQUIRED ) get_target_property(LIB_FOO_DEBUG lib_foo LOCATION)  find_package(Foo             HINTS "${CMAKE_SOURCE_DIR}/some/path/release/libFoo/lib/cmake"             REQUIRED ) get_target_property(LIB_FOO_RELEASE lib_foo LOCATION)  set(LIB_FOO_LIBRARIES optimized "${LIB_FOO_RELEASE}" debug "${LIB_FOO_DEBUG}")  message("LIB_FOO_LIBRARIES: \"${LIB_FOO_LIBRARIES}\"") </code></pre>  <p>This yeilds: <code>LIB_FOO_LIBRARIES: "optimized;C:/path/to/proj/some/path/debug/libFoo/lib/foo.lib;debug;C:/path/to/proj/some/path/debug/libFoo/lib/foo.lib"</code></p>  <p>It seems like the first call to find_package for target Foo is cached, whis I don't really want.</p>  <p>Am I going about this the wrong way? How do I properly work with third party libraries with the Visual Studio generator?</p>  <p>Any pointers are greatly appreciated.</p>