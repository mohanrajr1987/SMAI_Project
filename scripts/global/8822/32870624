<p>I am working in a very big C++ project to create a big shared object where we are using an external SDK which have several header files and several shared libraries which belong to each other. This means that the declaration of SDK classes are in the header files but their definitions are in the shared objects.</p>  <p>I understand that because of the declarations in header files I can compile this code.</p>  <p>But what I do not understand exactly is <strong>when do I have to specify the used shared objects for the linker explicitly?</strong></p>  <p>Namely if I specify it (e.g. in cmake with <em>target_link_libraries</em> command) then the linker can check that a symbol will be in the shared library or not. But what happens if I do not specify it (i.e. there is not any -l[shared_object_name] flags in linkage)? My experience is (which surprised me) that is work properly (i.e. the whole building process finished). How can it possible?</p>