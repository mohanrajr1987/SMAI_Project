<p>I have a small test program that I want to link to GLFW. I am currently able to download, configure and build the .dll using <code>ExternalProject_Add</code> command. When I build my test program I get an executable that doesn't run because it can't find the .dll. If I manually copy the .dll to the directory where the executable is, it runs just fine.</p>  <p>How do I get my executable to properly link to the library?</p>  <p>Is there a way to automatically copy the .dll to where it needs to be?</p>  <p>What is the best way to ensure that, when it comes time to package my program, the library is available to use and easily accessible?</p>  <p>CMakeLists.txt:</p>  <pre><code>cmake_minimum_required (VERSION 2.8) project (GLFW-test)  # Include OpenGL find_package(OpenGL REQUIRED) if (OPENGL_FOUND)     include_directories(${OPENGL_INCLUDE_DIR})     link_libraries(${OPENGL_LIBRARIES}) endif()  # Add directories for library linkage link_directories(${CMAKE_BINARY_DIR}/deps/Build/GLFW_EX/src)  # Download and unpack dependencies at configure time configure_file(deps-CMakeLists.txt CMakeLists.txt) execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .   WORKING_DIRECTORY ${CMAKE_BINARY_DIR}) execute_process(COMMAND ${CMAKE_COMMAND} --build .   WORKING_DIRECTORY ${CMAKE_BINARY_DIR})  add_subdirectory(${CMAKE_BINARY_DIR}/deps/Source/GLFW_EX                  ${CMAKE_BINARY_DIR}/deps/Build/GLFW_EX                  EXCLUDE_FROM_ALL )  include_directories(${CMAKE_BINARY_DIR}/deps/Source/GLFW_EX/include)  add_executable(GLFW-test src/GLFW-test.cpp) target_link_libraries (GLFW-test glfw3 ${OPENGL_LIBRARIES}) </code></pre>  <p>dep-CMakeLists.txt:</p>  <pre><code>cmake_minimum_required (VERSION 2.8) project (GLFW-dl)  include(ExternalProject) set_directory_properties(PROPERTIES EP_BASE "./deps/")  # Include GLFW ExternalProject_Add (        GLFW_EX        GIT_REPOSITORY "https://github.com/glfw/glfw.git"        GIT_TAG "master"        CMAKE_ARGS -DGLFW_BUILD_EXAMPLES=OFF -DGLFW_BUILD_TESTS=OFF -DGLFW_BUILD_DOCS=OFF -DGLFW_INSTALL=OFF -DBUILD_SHARED_LIBS=ON        UPDATE_COMMAND ""        TEST_COMMAND      "" ) </code></pre>  <p><strong>UPDATE:</strong> The way I am using <code>ExternalProject_Add</code> is described on this site: <a href="http://crascit.com/2015/07/25/cmake-gtest/" rel="nofollow">http://crascit.com/2015/07/25/cmake-gtest/</a> It allows the external projects to be configured and built only once during the configure phase of my project. I have changed the directories around a bit from their test program to make things a little easier for when I eventually add more external projects. The test project on the site does not seem to account for dynamic libraries which is what I am trying to do.</p>