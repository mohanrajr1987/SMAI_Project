<p>I'm a newcomer to the world of java scripting engines and need a little help with regards to the invocation of anonymous functions inside a dynamic script.</p>  <p>Here is an example of the script I'm squirt into the script engine:</p>  <pre><code>var config = {     endpoints: {         headers: {             types: function () {                 return  '/headers/types/';             },             other: function (systemType) {                 return '/headers/other/' + systemType;             }         },         sidebars: {             content: function () {                 return '/sidebars/content';             }         },         body: {             content: function () {                 return '/body/content';             }         }     },     timelineMaxFuturePeriod: 2 };  module.exports = config; </code></pre>  <p>This is the general structure of the script. The aim is to be able to invoke all the functions and print the url..</p>  <p>The keys inside the 'endpoints' object will change, so my solution can't refer to any properties by key directly. The script will remain constant in that there will always be an object assigned to module.exports and this object will always have a key 'endpoints' which is also of type object.</p>  <p>The code i have so far: </p>  <pre><code>    ScriptEngine engine = new ScriptEngineManager().getEngineByName("javascript");      ModuleContents module = new ModuleContents();     Bindings bindings = engine.createBindings();     bindings.put("module", module);      engine.setBindings(bindings, ScriptContext.ENGINE_SCOPE);     engine.eval(fileContents);       Optional&lt;ScriptObject&gt; optionalEndpointsObject = module.getExports().entrySet().stream()             .filter(entry -&gt; entry.getKey().equals("endpoints"))             .map(entry -&gt; (ScriptObject) entry.getValue())             .findAny();      if(optionalEndpointsObject.isPresent()) {         recursivelyGetEndpoint(optionalEndpointsObject.get());     } </code></pre>  <p>This code bindings a simple Java object ModuleContents to the script object 'module', this is so I can capture the object assigned to module.exports. After the script is eval'd I iterate the entryset of the object to find the 'endpoints' object. If this is present i call a method which recursively gets children of each endpoint node. (Each endpoint object can have a child objects which is why it needs to be recursive). This method looks like:</p>  <pre><code>public static void recursivelyGetEndpoint(Object endpointItem) {      if(ScriptFunction.class.isAssignableFrom(endpointItem.getClass())) {          ScriptFunction property = (ScriptFunction) endpointItem;          // invoke function and print URL      } else {          if(ScriptObject.class.isAssignableFrom(endpointItem.getClass())) {              ScriptObject scriptObject = (ScriptObject) endpointItem;             scriptObject.entrySet().stream()                     .map(Map.Entry::getValue)                     .forEach(ConfigFileParser::recursivelyGetEndpoint);          }      }  } </code></pre>  <p>The bit i'm struggling with, is invoking the anonymous function once i have a handle on it, considering I don't have any type/argument information. Please tell me if I'm doing this completely wrong...</p>  <p>Thanks</p>