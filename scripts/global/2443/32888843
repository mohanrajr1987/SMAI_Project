<p>I'm using <a href="https://msdn.microsoft.com/en-us/library/system.net.http.httpclient.postasync(v=vs.118).aspx" rel="nofollow">HttpClient's PostAnsyc</a> method to call a REST API from service code invoked by my MVC application. I don't seem to be getting any Exception after a timeout; not TaskCancelled, Timeout, or Web.</p>  <p>The usage is synchronous, as in I don't have additional work I can be doing for the current request until I receive back the results of the PostAsync call. I'm aware of the documentation suggesting to make the whole MVC logic path async, but I would rather not have to rewrite all of the service and controller code to be asynchronous if possible.</p>  <p>Here are some variant's I've tried that didn't throw exceptions on timeout:</p>  <pre><code>//controller action [HttpPost] public JsonResult Foo(int id) {     try     {         var result = _businessService.Foo(id);         return Json(result, JsonRequestBehavior.DenyGet);     }     catch(Exception exception)     {         return Json(exception, JsonRequestBehavior.DenyGet);     } }  //infrastructure code deep in my application public HttpResponseMessage Post(Uri uri, StringContent content) {     var task = Task.Run(() =&gt; _httpClient.PostAsync(uri, content));     var result = task.Result;     return result; }  public HttpResponseMessage Post(Uri uri, StringContent content) {     var task = _httpClient.PostAsync(uri, content));     var result = task.Result;     return result; }  public HttpResponseMessage Post(Uri uri, StringContent content) {     var taskAwaiter = _httpClient.PostAsync(uri, content).GetAwaiter();     var result = task.GetResult();     return result; } </code></pre>  <p>Finally, here's a variant I tried that didn't hung every time, regardless if the request timed out.</p>  <pre><code>public HttpResponseMessage Post(Uri uri, StringContent content) {     return PostAsync(uri, content).Result; }  public async Task&lt;HttpResponseMessage&gt; PostAsync(Uri uri, StringContent content) {     var task = _httpClient.PostAsync(uri, content);     var result = await task;     return result; } </code></pre>  <p>Is there a clean way to use httpclient in synchronous calls? Do I have to use async code throughout a MVC stack to call to a REST API? Is there some setting or boilerplate code I'm missing that will give me an Exception during timeouts?</p>