<p>I'm trying to connect and recieve very small amount of data from Mysql servers from all branches asynchronously, without waiting one to finish.</p>  <p>I have my own event-driven .NET MySQL Connector Wrapper library and it works fine without asynchronously. </p>  <p>Looks like I'm missing something while multi-tasking but I could not figured why.</p>  <pre><code>public void GetALL()     {         TaskList = new Task[RemSQL.Count];          Response.Write("&lt;h1&gt;starting..........&lt;/h1&gt;");          Task t;         BranchInfo b;         Wrapper w;          for (int tx = 0; tx &lt; RemSQL.Count; tx++)         {             int txx = tx; //strongly suggested on MSDN while using tasks/threads in loops             b = RemSQL[txx];             w = b.Wrapper;             Response.Write("&lt;h2&gt;TASK #" + txx.ToString() + " branch.id #" + w.id + " starts...&lt;/h2&gt;");              w.Connecting += Wrapper_Connecting;                         w.Connected += Wrapper_Connected;             w.ConnectionError += Wrapper_ConnectionError;              //w.Connect() //disabling multitasking works just fine              t = new Task(() =&gt;             {                 w.Connect();             });              TaskList[txx] = t;             t.Start();          }          Task.WaitAll(TaskList);          Response.Write("&lt;h1&gt;Tasks completed&lt;/h1&gt;");          foreach(BranchInfo bb in RemSQL)         {             bb.Wrapper.Dispose();         }          Response.Flush();         Response.End();      }      private void Wrapper_Connected(object sender)     {         Wrapper w = (Wrapper)sender;         WriteScript("Connected('" + w.id + "');");     }      private void Wrapper_Connecting(object sender)     {         Wrapper w = (Wrapper)sender;         WriteScript("Connecting('" + w.id + "');");     }      private void Wrapper_ConnectionError(object sender, Exception ex)     {         Wrapper w = (Wrapper)sender;         WriteScript("ConnectionFailed('" + w.id + "', '" + ex.Message + "');");     }  private void WriteScript(string scr) {     Response.Write("&lt;script&gt;" + scr + "&lt;/script&gt;\n");     Response.Flush(); } </code></pre>  <p>And here is the output:</p>  <pre><code>&lt;h1&gt;starting..........&lt;/h1&gt;&lt;h2&gt;TASK #0 branch.id #2 starts...&lt;/h2&gt; &lt;h2&gt;TASK #1 branch.id #3 starts...&lt;/h2&gt; &lt;h2&gt;TASK #2 branch.id #4 starts...&lt;/h2&gt; &lt;h2&gt;TASK #3 branch.id #5 starts...&lt;/h2&gt; &lt;h2&gt;TASK #4 branch.id #6 starts...&lt;/h2&gt; &lt;h2&gt;TASK #5 branch.id #7 starts...&lt;/h2&gt; &lt;h2&gt;TASK #6 branch.id #8 starts...&lt;/h2&gt; &lt;h2&gt;TASK #7 branch.id #9 starts...&lt;/h2&gt; &lt;h2&gt;TASK #8 branch.id #10 starts...&lt;/h2&gt; &lt;h2&gt;TASK #9 branch.id #11 starts...&lt;/h2&gt; &lt;h2&gt;TASK #10 branch.id #13 starts...&lt;/h2&gt; &lt;h2&gt;TASK #11 branch.id #14 starts...&lt;/h2&gt; &lt;h2&gt;TASK #12 branch.id #15 starts...&lt;/h2&gt; &lt;h2&gt;TASK #13 branch.id #16 starts...&lt;/h2&gt; &lt;h2&gt;TASK #14 branch.id #17 starts...&lt;/h2&gt; &lt;h2&gt;TASK #15 branch.id #19 starts...&lt;/h2&gt; &lt;h2&gt;TASK #16 branch.id #20 starts...&lt;/h2&gt; &lt;script&gt;Connecting('20');&lt;/script&gt; &lt;script&gt;Connecting('20');&lt;/script&gt; &lt;script&gt;Connecting('20');&lt;/script&gt; &lt;script&gt;Connecting('20');&lt;/script&gt; &lt;script&gt;Connecting('20');&lt;/script&gt; &lt;script&gt;Connecting('20');&lt;/script&gt; &lt;script&gt;Connecting('20');&lt;/script&gt; &lt;script&gt;Connecting('20');&lt;/script&gt; &lt;script&gt;Connecting('20');&lt;/script&gt; &lt;script&gt;Connecting('20');&lt;/script&gt; &lt;script&gt;Connecting('20');&lt;/script&gt; &lt;script&gt;Connecting('20');&lt;/script&gt; &lt;script&gt;Connecting('20');&lt;/script&gt; &lt;script&gt;Connecting('20');&lt;/script&gt; &lt;script&gt;Connecting('20');&lt;/script&gt; &lt;script&gt;Connecting('20');&lt;/script&gt; &lt;script&gt;Connecting('20');&lt;/script&gt; &lt;script&gt;ConnectionFailed('20', 'There is already an open DataReader associated with this Connection which must be closed first.');&lt;/script&gt; &lt;script&gt;ConnectionFailed('20', 'There is already an open DataReader associated with this Connection which must be closed first.');&lt;/script&gt; &lt;script&gt;ConnectionFailed('20', 'There is already an open DataReader associated with this Connection which must be closed first.');&lt;/script&gt; &lt;script&gt;ConnectionFailed('20', 'There is already an open DataReader associated with this Connection which must be closed first.');&lt;/script&gt; &lt;script&gt;ConnectionFailed('20', 'There is already an open DataReader associated with this Connection which must be closed first.');&lt;/script&gt; &lt;script&gt;ConnectionFailed('20', 'There is already an open DataReader associated with this Connection which must be closed first.');&lt;/script&gt; &lt;script&gt;ConnectionFailed('20', 'There is already an open DataReader associated with this Connection which must be closed first.');&lt;/script&gt; &lt;script&gt;ConnectionFailed('20', 'There is already an open DataReader associated with this Connection which must be closed first.');&lt;/script&gt; &lt;script&gt;ConnectionFailed('20', 'There is already an open DataReader associated with this Connection which must be closed first.');&lt;/script&gt; &lt;script&gt;Connected('20');&lt;/script&gt; &lt;script&gt;ConnectionFailed('20', 'There is already an open DataReader associated with this Connection which must be closed first.');&lt;/script&gt; &lt;script&gt;ConnectionFailed('20', 'There is already an open DataReader associated with this Connection which must be closed first.');&lt;/script&gt; &lt;script&gt;ConnectionFailed('20', 'There is already an open DataReader associated with this Connection which must be closed first.');&lt;/script&gt; &lt;script&gt;ConnectionFailed('20', 'There is already an open DataReader associated with this Connection which must be closed first.');&lt;/script&gt; &lt;script&gt;ConnectionFailed('20', 'There is already an open DataReader associated with this Connection which must be closed first.');&lt;/script&gt; &lt;script&gt;ConnectionFailed('20', 'There is already an open DataReader associated with this Connection which must be closed first.');&lt;/script&gt; &lt;script&gt;Connected('20');&lt;/script&gt; &lt;h1&gt;Tasks completed&lt;/h1&gt; </code></pre>  <p>As you can see, I guess it looks like the Wrapper w always gets the reference of the last call in loop. But when I comment out the tasking part and use w.Connect() directly in the loop, it all fixes up. </p>  <p>Any ideas ? </p>