<p>I'm having some trouble getting my head around async/await. I'm helping with an existing code base that has the following code (simplified, for brevity):</p>  <pre><code>List&lt;BuyerContext&gt; buyerContexts = GetBuyers(); var results = new List&lt;Result&gt;();  Parallel.ForEach(buyerContexts, buyerContext =&gt; {     //The following call creates a connection to a remote web server that      //can take up to 15 seconds to respond     var result = Bid(buyerContext);      if (result != null)         results.Add(result); }  foreach (var result in results) {   // do some work here that is predicated on the    // Parallel.ForEach having completed all of its calls } </code></pre>  <p>How can i convert this code to asynchronous code instead of parallel using async/await? I'm suffering from some pretty severe performance issues that I believe are a result of using a parallel approach to multiple network I/O operations.</p>  <p>I've tried several approaches myself but I'm getting warnings from Visual Studio that my code will execute synchronously or that I can't use await keywords outside of an async method so I'm sure I'm just missing something simple.</p>  <p><strong>EDIT #1:</strong> I'm open to alternatives to async/await as well. That just seems to be the proper approach based on my reading so far.</p>  <p><strong>EDIT #2:</strong> This application is a Windows Service. It calls out to several "buyers" to ask them to bid on a particular piece of data. I need ALL of the bids back before processing can continue.</p>