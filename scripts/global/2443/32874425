<p>I'm facing a situation where I need help to understand how to proceed properly.</p>  <p>I have an Action that is a kind of form for budget. After the user fills all fields, the user will save the budget pressing the Send button.</p>  <p>The Send button will save the data and then, will send an e-mail to all companies. When I say all companies, I mean around 1000 companies.</p>  <p>But, the problem is that when I press the button Send, the page get locked when sending the e-mails for the companies and after sending an e-mail to all companies, the website return the view.</p>  <p>What I would like to do is, when the user press Send button, the websites saves the budget, start to send e-mail in background, and almost instantly return the view to the user, HOWEVER, while this, the website is sending e-mails in background to 1000 companies.</p>  <p>How did I do this? Here is the signature of my methods:</p>  <pre><code>public async Task&lt;PartialViewResult&gt; EnviarProposta(PostOrcamentoServicoProposta proposta) {     // persist the budget     SaveData(proposta);      // get all companies...     var companies = getCompanies(proposta);      foreach (var company in companies)         await EmailFactory.SendBudget(proposta, company).SendAsync();      return PartialView(proposta); } </code></pre>  <p>SendAsync is the async method of SMTP.</p>  <p>The question is, how do I simple throw the send e-mail method to background and return the view, without waiting the sending complete?</p>  <p>The second problem is that I'm using a framework that convert a View in an Email, so, for that we'll need the Context of the controller.</p>  <p>Should I use task.factory.startnew?</p>  <h2>Should I use Thread?</h2>  <p><strong>Considerations:</strong> Unfortunately, asynchronous controller actions does not help in this scenario, because they do not yield response to the user while waiting for the asynchronous operation to complete. They only solve internal issues related to thread pooling and application capacity.</p>