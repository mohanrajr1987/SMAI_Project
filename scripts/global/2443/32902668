<p>I'm trying to monitor a connection by performing regular 'pings' with a parallel 'timeout' task in case the ping doesn't come back in time.</p>  <pre><code>var pingTask = await Task.WhenAny(      Task.Run(() =&gt;     {         try         {             PingThing();             return true;         }         catch         {             return false;         }     }),     Task.Run(() =&gt;     {         Task.Delay(5000).Wait();         return false;      }) ); if (!pingTask.Result) //etc... </code></pre>  <p>I seem to be getting cases where 'other stuff' is taking priority, and this code gets put to one side. So where the pings normally take milliseconds, I'm getting five second timeouts. </p>  <p>The thing is, when I initially put a stopwatch inside the code to check, it didn't say anything like 5 seconds. Which has me wondering whether the CPU isn't shutting down my thread(s) to do other work. But that in turn makes me wonder why it would shut down the first Task, but keep the second one up (otherwise the 'timeout' Task would also take longer).</p>  <p>So I have several questions:</p>  <ul> <li>is this a plausible hypothesis?</li> <li>is there a way to set the priority inside a task?</li> <li>if so is that a good or bad idea?</li> <li>is using await here a bad idea (does it somehow signal low priority)?</li> <li>is there a way to monitor what all the threads are doing to try and work out what the 'other stuff' is that's stealing my processor time?</li> </ul>  <p>Leaky abstractions FTW...</p>