<p>Is there a way to store a collection as a blob in Cassandra without having to convert it to text? It appears to not be possible. Cassandra offers <a href="http://docs.datastax.com/en/cql/3.1/cql/cql_reference/blob_r.html?scroll=reference_ds_cgg_nf5_yj__blob-conversion-functions" rel="nofollow">blob conversion functions</a> that claim to support any of the native non blob types.</p>  <blockquote>   <p>For every native, nonblob type supported by CQL, the typeAsBlob function takes a argument of type type and returns it as a blob. </p> </blockquote>  <p>It is understandable that this syntax could get complicated for collections, if the collection type <em>and</em> member type were required; e.g. <code>uuidSetAsText</code>.</p>  <h2>Example</h2>  <p><strong>Column Family</strong></p>  <pre><code>&gt; create table blob_test (id text primary key, blob_field blob); </code></pre>  <p><strong><code>INSERT</code> text as blob</strong></p>  <pre><code>&gt; INSERT INTO blob_test (id, blob_field) VALUES ( '5', textAsBlob('test blob text') ); &gt; select * from blob_test ;   id | blob_field ----+--------------------------------   5 | 0x7465737420626c6f622074657874 </code></pre>  <p><strong><code>INSERT</code> set as blob</strong></p>  <pre><code>&gt; INSERT INTO blob_test (id, blob_field) VALUES ( '6', setAsBlob({'1', '2', '3'}) ); InvalidRequest: code=2200 [Invalid query] message="Unknown function setasblob called"  &gt; INSERT INTO blob_test (id, blob_field) VALUES ( '6', textSetAsBlob({'1', '2', '3'}) ); InvalidRequest: code=2200 [Invalid query] message="Unknown function textsetasblob called"  &gt; INSERT INTO blob_test (id, blob_field) VALUES ( '6', collectionAsBlob({'1', '2', '3'}) ); InvalidRequest: code=2200 [Invalid query] message="Unknown function collectionasblob called" </code></pre>