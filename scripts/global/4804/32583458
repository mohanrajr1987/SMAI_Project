<p>In a bash script, I need to pass a parameter to another program. The parameter has spaces in so must be quoted. Everything works fine in this simple case 1:</p>  <pre><code>/bin/echo /some/command --param="abc def ghi" </code></pre>  <p><em>Output:</em></p>  <pre><code>/some/command --param=abc def ghi </code></pre>  <p>The problem begins if I want to make the bash script more sophisticated, somehow the parameter value has changed in case 2 and 3:</p>  <pre><code>FOO="ghi" DEFAULTS="--param=\"abc def $FOO\"" /bin/echo /some/command $DEFAULTS  DEFAULTS='--param="abc def '$FOO'"' /bin/echo /some/command $DEFAULTS </code></pre>  <p><em>Output:</em></p>  <pre><code>/some/command --param="abc def ghi" /some/command --param="abc def ghi" </code></pre>  <p>The double quotes surrounding <code>abc def ghi</code> are shown in 2 and 3, whereas they are not shown for 1.</p>  <p>This is better illustrated by having /some/command actually print what it receives as the first parameter. Here the whole string <code>"abc def ghi"</code> is received as the value of the <code>param</code> parameter:</p>  <pre><code>perl -le'print $ARGV[0]' param="abc def ghi" </code></pre>  <p><em>Output (right):</em></p>  <pre><code>param=abc def ghi </code></pre>  <p>But here only <code>"abc</code> is received, with one leading quote:</p>  <pre><code>DEFAULTS='param="abc def ghi"' perl -le'print $ARGV[0]' $DEFAULTS  DEFAULTS="param=\"abc def ghi\"" perl -le'print $ARGV[0]' $DEFAULTS </code></pre>  <p><em>Output (wrong):</em></p>  <pre><code>param="abc param="abc </code></pre>  <p>How do I use bash to dynamically construct a string like <code>param="abc def ghi"</code> and be able to pass it intact to another command?</p>