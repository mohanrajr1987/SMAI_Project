<p>I found this link describing interrupts and how a CPU manages them.</p>  <p><a href="http://www.ni.com/white-paper/2874/en/" rel="nofollow">http://www.ni.com/white-paper/2874/en/</a></p>  <p>I remember from my studies in computer-science that when an interrupt occurrs the cpu saves whats in its registers and stores that in a PCB (process controll block) that belongs to the actual process.</p>  <p>But in this article one can read the following:</p>  <p><em>An interrupt is a special input to the processor. When the processor is signalled that an interrupt has occurred, the processor finishes the instruction currently being executed and saves the instruction pointer and a status word to the stack. The stack is a special block of memory used to keep track of information during function calls and interrupts. The processor uses a special register called the stack pointer to keep track of the location of the top of the stack, which is where the last item was added to the stack.</em> </p>  <p>So here the context seem to be saved to the stack instead, not the PCB.</p>  <p>So - whats the answer to this? Does it just differs between different systems and architectures? </p>  <p><em>(before downwoting or closing this question - give me a chance to migrate the question to another forum. I choosed stackoverflow since others seem to miss appropriate tags for the question)</em></p>