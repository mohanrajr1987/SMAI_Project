<p>Two hours ago I thought I had full understanding of how the stack works (at least how it's handled in C). But I've come to notice some unexpected (to me) behaviour in my programs.</p>  <p>We know the stack grows towards lower memory addresses (I'm talking about PCs, in my case: Intel 64 bits, Ubuntu). So when a new stack frame is created, the objects that belong to that frame have lower memory addresses that all the previous ones. What surprised me is this: the objects within a frame have higher memory addresses the later they where declared. This shocked me quite a bit because I thought variables that were declared earlier earned higher memory addresses.</p>  <p>Let me show what exactly what I mean with an example in C.</p>  <pre><code>#include &lt;stdio.h&gt;  void foo() {     int firstVar = 1;     int secondVar = 2;     printf("firstVar is at: %p\n", &amp;firstVar);     printf("secondVar is at: %p\n", &amp;secondVar); }  int main(void) {     int mainVar = 0;     printf("mainVar is at: %p\n", &amp;mainVar);     foo();     return 0; } </code></pre>  <p>After compiling with gcc (-g, -ansi and -pedantic flags) the output is:</p>  <pre><code>mainVar is at: 0x7ffd1ec0fadc firstVar is at: 0x7ffd1ec0fab8 secondVar is at: 0x7ffd1ec0fabc </code></pre>  <p>As expected, <em>mainVar</em> has a higher memory address than the ones in the <em>foo()</em> stack frame. However, <em>firstVar</em> has a lower memory address than <em>secondVar</em> even though is was declared before. Looking at the disassembling of <em>foo()</em> shows this behaviour:</p>  <pre><code>0x000000000040052d &lt;+0&gt;:    push   %rbp 0x000000000040052e &lt;+1&gt;:    mov    %rsp,%rbp 0x0000000000400531 &lt;+4&gt;:    sub    $0x10,%rsp 0x0000000000400535 &lt;+8&gt;:    movl   $0x1,-0x8(%rbp) 0x000000000040053c &lt;+15&gt;:   movl   $0x2,-0x4(%rbp) ... </code></pre>  <p>The 1 is put four bytes before the 2, showing once again that <em>firstVar</em> has a lower memory address than <em>secondVar</em>.</p>  <p>My question is: why is that? According to all the bibliography I've read, objects within the same stack frame should have higher memory addresses the earlier they where declared. And bibliography means internet (this site for example) and reputable books. I'm using a very standard system so I doubt any ELF or ABI weird stuff is going on...</p>  <p>Any ideas? Thanks for reading through.</p>