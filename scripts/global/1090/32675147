<p>I'm pretty lost at the moment on how I would go about implementing this Tree, I'm trying to construct a Tree from a string representation of input "(4 + 6) + (2 + 3)". How would I go about making a Tree from two Stacks?</p>  <pre><code>  public class Tree {          private Stack opStk = new Stack();         private Stack valStk = new Stack();         private Tree parent = null;           public Tree(String str){              System.out.println((EvaluateExpression(str)));          }             public void doOperation() {           Object x = valStk.pop();         Object y = valStk.pop();         Object op = opStk.pop();          if ((Integer) x &lt;= 0 || (Integer) y &lt;= 0){              throw new NumberFormatException();         }         if (op.equals("+")) {             int sum = (Integer) x + (Integer) y;             valStk.push(sum);         }          }          public void repeatOps(char refOp) {               while (valStk.count() &gt; 1 &amp;&amp;                  prec(refOp) &lt;= prec((char)opStk.pop())) {                  doOperation();               }             }          int prec(char op) {             switch (op) {                  case '+':                 case '-':                     return 0;                 case '*':                 case '/':                     return 1;                 case '^':                     return 2;                  default:                     throw new IllegalArgumentException("Operator unknown: " + op);             }         }          public Object EvaluateExpression(String str) {               System.out.println("Evaluating " + str);             Scanner s = null;              try {                 s = new Scanner(str);                  //while there is tokens to be read                while (s.hasNext()) {                     //if token is an int                   if (s.hasNextInt()) {                       //read it                      int val = s.nextInt();                     if(val &lt;= 0) {                          throw new NumberFormatException("Non-positive");                     }                     System.out.println("Val " + val);                     //push it to the stack                     valStk.push(val);                   } else {                        //push operator                       String next = s.next();                       char chr = next.charAt(0);                       System.out.println("Repeat Ops " + chr);                       repeatOps(chr);                       System.out.println("Op " + next);                       opStk.push(chr);                   }                   repeatOps('+');                 }                } finally {                 if (s != null) {                     s.close();                 }             }              System.out.println("Should be the result: " + valStk.pop());            return valStk.pop();          } </code></pre>