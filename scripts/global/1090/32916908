<p>My assignment is to find the number of solutions to the nqueens problem for any n. I'm having a real tough time doing this for any n other than 5. Honestly, I don't even really know what the problem with the code is anymore and it's due in 5 hours. I would really really really love to get some help/advice. (My teacher wrote the main method and printsolution method and I'm only allowed to use stacks)</p>  <p>My code:</p>  <pre><code>import java.util.Stack;  public class NQueens {  public static int solutions = 0; public static Stack&lt;Integer&gt; queens = new Stack&lt;Integer&gt;(); public static int col = 0; public static int row = 0; public static boolean done = false;  public static boolean check(int n) {     int RD = 1;     for (int i = row - 1; i &gt;= 0; i--) {         if (queens.get(i) == col + RD++) return false;     } //checks diagonally to the right     System.out.println("right " + "col: " + col + " row: " + row);      int LD = 1;     for (int i = row - 1; i &gt;= 0; i--) {         if (queens.get(i) == col - LD++) return false;     } //checks diagonally to the left     System.out.println("left " + "col: " + col + " row: " + row);      for (int i = row - 1; i &gt;= 0; i--) {         if (queens.get(i) == col) return false;     } //checks vertically     System.out.println("vert " + "col: " + col + " row: " + row);     return true; }  public static void place(int n) {     if (check(n)) {         System.out.println("Items in stack: " + queens.size());         queens.push(col);         System.out.println("place push " + "col: " + col);         col = 0;         row++;         //pushes a queen if it does not interfere with previous queens     }else if (col &lt; n) {         System.out.println("place redo " + "col: " + col);         col++;         //moves to next column as long as it is not out of bounds         if (col == n) done = true;         //if column reaches the boundary, there are no more solutions     }else {         queens.pop();         System.out.println("place pop " + "col: " + col);         col = 0;         row--;         //no possible spots in that row, backtrack     } }  //finds and prints out all solutions to the n-queens problem public static int solve(int n) {     if (queens.size() == n) {         solutions++;         printSolution(queens);         col = 0;         row--;     }//checks if program has found a solution     while (!done) {         System.out.println("solve");         place(n);         return solve(n);     }//as long as solutions are left, it keeps running     return solutions;     //all possible solutions found, return solutions }  //this method prints out a solution from the current stack private static void printSolution(Stack&lt;Integer&gt; s) {     for (int i = 0; i &lt; s.size(); i ++) {         for (int j = 0; j &lt; s.size(); j ++) {             if (j == s.get(i))                 System.out.print("Q ");             else                 System.out.print("* ");         }//for         System.out.println();     }//for     System.out.println(); }//printSolution()  // ----- the main method ----- // (you shouldn't need to change this method) public static void main(String[] args) {      int n = 8;      // pass in parameter n from command line     if (args.length == 1) {         n = Integer.parseInt(args[0].trim());         if (n &lt; 1) {             System.out.println("Incorrect parameter");             System.exit(-1);         }//if        }//if     int number = solve(n);     System.out.println("There are " + number + " solutions to the " + n + "-queens problem."); }//main() </code></pre>  <p>}</p>