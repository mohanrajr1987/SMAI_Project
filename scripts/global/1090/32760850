<p>I completed a few various conversion methods of expressions, but am struggling with PostFix to Infix. For some reason, my method is printing out the same expression that is entered. Very frustrating. Also forgot to mention there is more code, but the main part im sturggling with is the method "toInfix()"</p>  <p>Any help is appreciated.</p>  <p>Edit: After Playing around with my code, what Im finding that the method works fine until I try to run it with user input, even when the correct input is added.</p>  <pre><code>private Stack&lt;Character&gt; operatorStack;  private Stack&lt;Integer&gt; operandStack;  private StringBuilder conversion;  public char[] openParentheses = {'(', '[', '{'};  public char[] closedParentheses = {')', ']', '}'};  private static final int[] PRECEDENCE = {1,1,2,2,3,-1,-1,-1,-1,-1,-1};  private static final String OPERATORS = "+-*/%()[]{}";  private static final String OPENBRACKETS = "([{";  private static final String CLOSEDBRACKETS = ")]}";  public String toInfix(String input)     {         Stack&lt;String&gt; expression = new Stack&lt;String&gt;();          String[] postfix = input.split(" ");          for (String value: postfix)         {             if (isOperator(value))             {                 int type = precedence(value.charAt(0));                 String secondTerm = expression.pop();                  if (type == 2 || type == 3 || type == 4)                 {                     expression.push((addBrackets(expression.pop()) + " " + value + " " + secondTerm));                 }                 else if (type == 0 || type == 1)                 {                     expression.push(expression.pop() + " " + value + " " + secondTerm);                 }             }             else             {                 expression.push(value);             }         }         System.out.println(expression.size());         return expression.pop();     }      public String addBrackets(String input)     {         return ("(" + input + ")");     } </code></pre>