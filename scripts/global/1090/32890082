<p>So im having troubles with my <code>Console Application</code>. Im trying to implement a interface with some methods into my class. But i cant really get the hang of it. </p>  <ul> <li><p>im supposed to <code>push</code> letters (<code>char</code>) into my Stack with a <code>push method</code> from the class.</p></li> <li><p>I need to <code>pop</code> them from the <code>stack</code> and write out each <code>char</code> from the <code>stack</code> into the console. I should also check if the <code>Stack</code> is empty with a <code>isEmpty</code> method, which I think is correctly done ATM.</p></li> <li><p>I've also done a <code>stack</code> in the <code>class</code>, because I'm trying to do something with the <code>methods</code>. But it doesn't seem to affect the stack that is created in the program.</p></li> </ul>  <p>The problem I get is that nothing is happening. When I start the application the console pops and runs the code and waits for the <code>Console.Read()</code> to happen.</p>  <p>Hope you understand, the code is kind of straight forward. I'll post the <code>Interface, Class and program code.</code></p>  <p>Interface code:</p>  <pre><code>public interface IStackInterface {     char peek();     char pop();     void push(char nytt);     bool isEmpty(); } </code></pre>  <p>Class Code:</p>  <pre><code>public class StackClass : IStackInterface {     Stack&lt;char&gt; stacken = new Stack&lt;char&gt;();      public StackClass()     {      }     public bool isEmpty()     {         if (stacken.Count == 0)         {             return false;         }         else         {             return true;         }     }      public char peek()     {         return stacken.Peek();     }      public char pop()     {         return stacken.Pop();      }      public void push(char nytt)     {         stacken.Push(nytt);     } } </code></pre>  <p>Program code:</p>  <pre><code>static void Main(string[] args)         {                 StackClass stacken = new StackClass();                  try                 {                     stacken.push('t'); stacken.push('s');                     stacken.push('ä'); stacken.push('b');                     stacken.push(' ');                     stacken.push('r'); stacken.push('ä');                     stacken.push(' '); stacken.push('m');                     stacken.push('o'); stacken.push('g');                     stacken.push('a'); stacken.push('L');                 }                 catch (InvalidOperationException e)                 {                     Console.WriteLine(e.Message);                 }                  while (!stacken.isEmpty())                 {                     Console.WriteLine(stacken.pop());                 }                 Console.Read();         } </code></pre>  <p>Best Regards.</p>