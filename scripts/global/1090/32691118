<p>I've got a simple <code>Trace</code> class that logs entering and exiting a method:</p>  <pre><code>#include &lt;iostream&gt;  class Trace { public:     Trace()   {std::cout &lt;&lt; "Enter" &lt;&lt; std::endl;}      ~Trace()     {         std::cout &lt;&lt; "Exit" &lt;&lt; std::endl;         } };  void foo() {     Trace trace;     std::cout &lt;&lt; "foo..." &lt;&lt; std::endl;     }  int main() {     foo();     return 0; } </code></pre>  <p>output:</p>  <blockquote>   <p>Enter<br>   foo...<br>   Exit</p> </blockquote>  <p>Now I want to be able to enable/disable tracing. So I'll do something like this:</p>  <pre><code>#include &lt;iostream&gt;  class Trace { public:     Trace()   {std::cout &lt;&lt; "Enter" &lt;&lt; std::endl;}      ~Trace()     {         std::cout &lt;&lt; "Exit" &lt;&lt; std::endl;         }     static bool enabled; }; bool Trace::enabled = false;  void foo() {     if(Trace::enabled)         Trace trace;     std::cout &lt;&lt; "foo..." &lt;&lt; std::endl;     }  int main() {     Trace::enabled = true;     foo();     return 0; } </code></pre>  <p>The problem is that now the <code>trace</code> instance is scoped to the <code>if statement</code> and therefore the following output is produced:</p>  <blockquote>   <p>Enter<br>   Exit<br>   foo...</p> </blockquote>  <p>Is there any way to get the right output in the latter case, without using smart pointers? I want to have the least overhead possible if tracing is disabled.</p>  <p><strong>P.S.</strong> Please note that my real-world <code>Trace</code> class consists of a few more lines, not just "Enter" and "Exit".</p>  <p><strong>P.S.2</strong> Due to the performance considerations, I do not want the <code>trace</code> instance to be created on the stack if tracing is disabled.</p>