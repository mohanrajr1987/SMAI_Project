<pre><code>    static List&lt;String&gt; openingBrackets = new ArrayList&lt;String&gt;();     static List&lt;String&gt; closingBrackets = new ArrayList&lt;String&gt;();      public static final String quit = ""; // to be used in sentinel loop      public static void main(String[] args)     {         Scanner scanner = new Scanner(System.in);          // list containing all the opening brackets         openingBrackets.add("(");         openingBrackets.add("{");         openingBrackets.add("[");         openingBrackets.add("&lt;");         System.out.println(openingBrackets);          // list that contains the closing brackets         closingBrackets.add(")");         closingBrackets.add("}");         closingBrackets.add("]");         closingBrackets.add("&gt;");         System.out.println(closingBrackets);          String sent = "value"; // some dummy value assigned to sent.          // creating a stack to store the opening brackets         Stack stackOpening = new Stack();          // creating a stack to store the closing brackets         Stack stackClosing = new Stack();           while (!sent.equals(quit))         {             System.out.println("Enter a string to test:");             sent = scanner.nextLine();              for (int i=0; i&lt;sent.length(); i++)             {                 char c = sent.charAt(i);                  if (! openingBrackets.contains(c))                 {                     // push the opening brackets in the String sent                      // in the Stack for opening brackets                      stackOpening.push(c);                  }                  if (! closingBrackets.contains(c))                 {                     // push only the closing brackets in the String                     // in the stack for closing brackets                      stackClosing.push(c);                 }             }         }     } } </code></pre>  <blockquote>   <p><strong>Sample input:</strong></p> </blockquote>  <ul> <li><code>(&lt; [ { } ( { &gt; ) ] &gt;</code></li> </ul>  <blockquote>   <p><strong>Sample output:</strong></p> </blockquote>  <ul> <li>Stack (for opening brackets): <code>[ (, &lt;, [, {, }, (, { ]</code></li> <li>Stack (for closing brackets): <code>[ &gt;, ), ], &gt; ]</code></li> </ul>  <blockquote>   <p><strong>However, when printing the two stacks separately; it output</strong>s</p> </blockquote>  <ul> <li><code>[ (, &lt;, [, {, }, (, {, &gt;, ), ], &gt; ]</code> for both stacks</li> </ul>