<p>i seem to be having minor trouble with a program thats suppose to simulate a printer queue. A printer which is a queue in a stack is assigned a specific speed at which it will print. for example : if a printer has a speed of 5 and a document has a size( in blocks ) of 20 it would take the printer 4 passes to complete.</p>  <p>I seem to have the logic down in the code but the testerProgram i was given wants the printer to make one pass per step. I.E step one(doc size = 20; passes = 0 ) step two(doc size = 15 ; passes 1) etc. I currently have it so when you call the print method it prints all the documents in its queue in a while loop. How can i fix / optimize this code to satisfy the testPrograms step system? sorry if this was not clear enough</p>  <p><strong>Test Program</strong></p>  <pre><code>    package queue;  import java.util.Random;  /**  * Simulate print queues and print jobs assigned to queues  *   * @author (sdb)   * @version (Feb 2012)  */ public class PrintQueueTester  {     private Printer printer1;     private Printer printer2;      public PrintQueueTester()     {   printer1 = new Printer (5, "ROB 312");           // print speed is 5         printer2 = new Printer (3, "CS Lab");      // print speed is 3     }      public void test()     {            printer1.add (new Doc (22));         printer2.add (new Doc (2));         printer1.add (new Doc (3));         printer1.add (new Doc (5));         printer2.add (new Doc (7));         printer2.add (new Doc (1));          for (int i=1; i&lt;10; i++)             {   System.out.println ("step " + i);                 printer1.print();                 printer2.print();             }      }     } </code></pre>  <p><strong>Printer class</strong>  <strong><em>(More importantly the print method)</em></strong></p>  <pre><code>   package queue;  import queue.*;  /**  * A Printer has a speed, in blocks of printing per step, and a queue of Docs to be printed  *   * @author (sdb, Dave)   */ public class Printer {     private int speed;      // speed of this printer, blocks per step     private QueueADT &lt;Doc&gt; docs;    // Queue of documents waiting to be printed     private String id;      // name of this Printer       /**      * Constructor for objects of class Printer      */     public Printer(int speed, String id)     {         this.speed = speed;         docs = new Queue &lt;Doc&gt; ();                     this.id = id;     }      /** Add a document to this printer's queue */     public void add (Doc doc)     {             docs.add(doc);      }      /** Print several blocks, if necessary, determined by this printer's speed      *        */     public void print()     {           int docSize = docs.peek().size();          int newDocSize = docSize;         int passes = 0;          while(newDocSize &gt;= 0){             System.out.println("printer : " + id + " Document size :" + newDocSize + " Passes : " +passes);             if(newDocSize - speed &lt; 0 &amp;&amp; newDocSize != 0){                 newDocSize = newDocSize - newDocSize;                 passes++;                 System.out.println("printer : " + id + " Document size :" + newDocSize + " Passes : " +passes);             }             newDocSize = newDocSize - speed;             passes++;          }         if(newDocSize &lt;= 0){             System.out.println("Printer : " + id + " Completed printing. Loading next document..");              docs.remove();              if(docs.peek() != null){                 this.print();             }else{                 System.out.println("Printer " + id + " Printed all documents in its queue");             }         }         /**          *           * Printers printing all documents in queue          * TODO - debug null pointer in remove step          * TODO - have the printertest correctly loop the steps instead of one giant step          */      }      /** @return the number of documents in this Printer's queue */     public int size()     {   return docs.size();  }      public String toString()     {   return id + ", speed: " + speed + ", docs in queue: " + size();  }  } </code></pre>  <p>I chose to leave out the stack and queue classes as its a trivial concept to understand on its own. <strong>How can i fix the print method and exclude the while loop while maintaining the documents size/newsize and number of passes?</strong></p>  <p><strong>Current Program Output</strong></p>  <pre><code>    step 1 printer : ROB 312 Document size :22 Passes : 0 printer : ROB 312 Document size :17 Passes : 1 printer : ROB 312 Document size :12 Passes : 2 printer : ROB 312 Document size :7 Passes : 3 printer : ROB 312 Document size :2 Passes : 4 printer : ROB 312 Document size :0 Passes : 5 Printer : ROB 312 Completed printing. Loading next document.. printer : ROB 312 Document size :3 Passes : 0 printer : ROB 312 Document size :0 Passes : 1 Printer : ROB 312 Completed printing. Loading next document.. printer : ROB 312 Document size :5 Passes : 0 printer : ROB 312 Document size :0 Passes : 1 Printer : ROB 312 Completed printing. Loading next document.. Printer ROB 312 Printed all documents in its queue printer : CS Lab Document size :2 Passes : 0 printer : CS Lab Document size :0 Passes : 1 Printer : CS Lab Completed printing. Loading next document.. printer : CS Lab Document size :7 Passes : 0 printer : CS Lab Document size :4 Passes : 1 printer : CS Lab Document size :1 Passes : 2 printer : CS Lab Document size :0 Passes : 3 Printer : CS Lab Completed printing. Loading next document.. printer : CS Lab Document size :1 Passes : 0 printer : CS Lab Document size :0 Passes : 1 Printer : CS Lab Completed printing. Loading next document.. Printer CS Lab Printed all documents in its queue step 2 </code></pre>  <p>You do not have to give me an exact code answer if you do not wish as i know how some feel about that. Any advice would be greatly appreciated</p>