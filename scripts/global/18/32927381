<p>I am writing a simple field reporting web app that only accepts a small number of characters.</p>  <p>I have read that preg_replace has a negative affect on performance.</p>  <p>This is a problem because I want to loop through all <strong>$_POST</strong> and <strong>$_GET</strong> variables to sanitize them and some of my forms have many fields.</p>  <p>Is there a faster way to whitelist? </p>  <p>for example:</p>  <pre><code>if(isset($_GET["test_1"]) &amp;&amp; isset($_GET["test_2"])){ $white_list = str_split('0123456789                        abcdefghijklmnopqrstuvwxyz                        ABCDEFGHIJKLMNOPQRSTUVWXYZ .,?@_-');  foreach($_GET as $key =&gt; &amp;$val){     $val = array_intersect(str_split($val),$white_list);     $val = implode($val); } }    </code></pre>  <p>You can see that I am only allowing a few characters for punctuation. </p>  <p>The space character seems to work when I test in the URL bar.</p>  <p>I have also seen people use str_replace() after splitting the input into an array and replacing characters with "" if they are not in the whitelist.</p>  <pre><code>if(isset($_GET["test_1"]) &amp;&amp; isset($_GET["test_2"])){ $white_list = str_split('0123456789                        abcdefghijklmnopqrstuvwxyz                        ABCDEFGHIJKLMNOPQRSTUVWXYZ .,?@_-');  foreach($_GET as $key =&gt; &amp;$val){     $char_list = str_split($val);     foreach($char_list as $c){         if(!in_array($c,$white_list)){             $val = str_replace($c,'',$val);         }     } }    } </code></pre>  <p>Or something like that.</p>  <p>Are there performance gains to be had?</p>  <p>How would I test it.</p>