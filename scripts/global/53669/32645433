<p>I'm getting a video from <code>XMLHttpRequest</code>, encoding it into base64 and storing it in a WebSQL database. Then I retrieve it and when I try to convert it back and turn it into a blob object url as the source for a <code>video</code> element, it doesn't work.</p>  <p>FIRST DOWNLOAD OF VIDEO AND CONVERT TO BASE64</p>  <pre><code>//Start the request var videoRequest = new XMLHttpRequest();  //Get the Video file from the server. videoRequest.open( "GET", "videos/test.mp4", true );  //Array buffer videoRequest.responseType = 'arraybuffer';  //Listen for when it's done downloading the video data videoRequest.addEventListener(     "load",     function ()     {         //We got it         if ( videoRequest.status === 200 )         {             var uInt8Array = new Uint8Array(videoRequest.response);             var i = uInt8Array.length;             var binaryString = new Array(i);             while (i--)             {                 binaryString[i] = String.fromCharCode(uInt8Array[i]);             }             var data = binaryString.join('');              var base64 = window.btoa(data);              //Save to DB (this all works)             savetoDB( base64 );         }     },     false );  //Start the request videoRequest.send(); </code></pre>  <p>GETTING BACK FROM DB, DECODING BACK INTO BLOB, PUTTING IN objectURL</p>  <pre><code>//After our DB request comes back... request.onsuccess = function (event) {     /*      * Is this the right decoding process?      */      //event.target.result is the base64 data from the DB     var data = atob( event.target.result );      var asArray = new Uint8Array(data.length);      for( var i = 0, len = data.length; i &lt; len; ++i ) {         asArray[i] = data.charCodeAt(i);         }      //Is this right?     var blob = new Blob( [ asArray.buffer ], {type: "video/mp4"} );      //Get URL creator     var URL = window.URL || window.webkitURL;      //Make into a data URL     var videoURL = URL.createObjectURL( blob ) ;      //Set video src to ObjectURL     var videoElement = document.getElementById( id );     videoElement.setAttribute( "src", videoURL );      //Set the mime type     videoElement.type = videoFile.type; } </code></pre>  <p>Is that the right process? Am I doing something wrong? It does not work, the video shows as "dead".</p>  <p>When I inspect the element, I see:</p>  <pre><code>&lt;video      autoplay="true"      controls      id="savedVideo"      src="blob:http://example.com/c98f275b-5006-44fd-a34d-98676633a170"&gt; &lt;/video&gt; </code></pre>  <p>That "looks" correct, but isn't working.</p>  <p><strong>EDIT: It's throwing the error <code>MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED</code> but even if I download as a "blob" straight from XMLHttpRequest and put that into the <code>objectURL</code>, it <em>still</em> won't play the video and still throws the error!</strong></p>  <p><a href="https://bugs.webkit.org/show_bug.cgi?id=101671" rel="nofollow">This bug</a> says it was in Safari 6, but this should be fixed in 7.1.</p>