<p>I want to filter events based on checkboxes. I have reviewed the code example on the mike smith website <a href="http://www.mikesmithdev.com/demo-fullcalendar-with-event-filtering/]" rel="nofollow">http://www.mikesmithdev.com/demo-fullcalendar-with-event-filtering/]</a> but I am doing things a little differently and I can't figure out how to make it work. I created a function for my events which works fine when the calendar is initialized.  I parameterized the function so that I can send back to the server the groups that have been selected.  But I can't figure out how to use this function within the change event to refresh the events that are to be shown.  This is my initialization code that is working fine:</p>  <pre><code>$(document).ready(function () { // page is now ready, initialize the calendar... var date = new Date(); var d = date.getDate(); var m = date.getMonth(); var y = date.getFullYear(); var groupSelectedArray = [];  $('input[type="checkbox"]').each(function () {     if ($(this).is(":checked")) {         groupSelectedArray.push($(this).val());      } });  var groupData = { selectedGroups: groupSelectedArray }; $('#calendar').fullCalendar({      header:     {         left: 'prev,next today',         center: 'title',         right: 'month,agendaWeek,agendaDay'     },     titleFormat: {month: 'MMMM'},     defaultView: 'month',     editable: false,     eventSources: [         {             events: function (start, end, groupSelectedArray, callback) {                 $.ajax({                     type: "POST",                     url: '@Url.Action("GetAllEvents", "Home")',                     data: JSON.stringify(groupData),//{ selectedGroups: groupSelectedArray },                     contentType: "application/json; charset=utf-8",                     dataType: "json",                     success: function (doc) {                         var events = [];                         $(doc).each(function () {                             events.push({                                 title: $(this).attr('title'),                                 start: $(this).attr('start'),                                 end: $(this).attr('end'),                                 id: $(this).attr('id'),                                 description: $(this).attr('description'),                                 color: $(this).attr('color'),                                 textColor: 'black'                             });                          });                         callback(events);                     },                     error: function () {                         alert("There was an error fetching events!")                     }                 });             }         }     ] }); </code></pre>  <p>This is the markup:</p>  <pre><code>&lt;div id="groups" style="float:left; width: 200px; height: 100px"&gt;     &lt;div style="border: 2px solid black; background-color: lightblue"&gt;         &lt;label&gt;&lt;input type="checkbox" checked="checked" name="e1" id="e1" value="1" /&gt;Warehouse Group&lt;/label&gt;          &lt;/div&gt;     &lt;div style ="border: 2px solid black; background-color: red"&gt;         &lt;label&gt;&lt;input type="checkbox" checked="checked" name="e2" id="e2" value="2" /&gt;Interface Group&lt;/label&gt;          &lt;/div&gt; &lt;/div&gt; &lt;div id='calendar' style="float:right; width: 75%; height: 75%"&gt;&lt;/div&gt;  </code></pre>  <p>This is the code behind that makes a database call to get the event data:</p>  <pre><code> private static List&lt;Events&gt; GetEventsFromDatabase(string[] selectedGroups)         {             OnCallEntities onCallDB = new OnCallEntities();             List&lt;Events&gt; eventList = new List&lt;Events&gt;();             int[] selectedGroupIDs = Array.ConvertAll(selectedGroups, int.Parse);              var lstSchedules = (from sch in onCallDB.OnCallSchedules.AsEnumerable()                                join techs in onCallDB.OnCallTeches.AsEnumerable() on sch.MemberID equals techs.ID                                 join grp in onCallDB.OnCallGroups.AsEnumerable() on sch.GroupID equals grp.ID                                 where selectedGroupIDs.Contains(sch.GroupID)                                 orderby sch.GroupID, sch.OnCallStartTime                                select new { sch.GroupID, grp.Name, sch.ID, grp.GroupColor, techs.FirstName, techs.LastName, sch.OnCallStartTime, sch.OnCallEndTime }).ToList();              foreach (var dr in lstSchedules)             {                 Events newEvent = new Events                 {                     id = dr.ID.ToString(),                     title = dr.FirstName.ToString() + " " + dr.LastName.ToString(),                     start = Convert.ToDateTime(dr.OnCallStartTime.ToString()).ToString("s"),                     end = Convert.ToDateTime(dr.OnCallEndTime.ToString()).ToString("s"),                     allDay = true,                     description = dr.GroupID.ToString(),                     color = dr.GroupColor                 };                  eventList.Add(newEvent);             }              return eventList;         } </code></pre>  <p>When the user changes the checkbox selections I would like to call the event function above to change the events shown.  I cannot figure out how to do this.<br> This is my change function:</p>  <pre><code>$('input[type="checkbox"]').on('change', function () {     var groupSelectedArray = [];     $('input[type="checkbox"]').each(function () {         if ($(this).is(":checked")) {             groupSelectedArray.push($(this).val());         }     });     var groupData = { selectedGroups: groupSelectedArray };     $('#calendar').fullCalendar('removeEvents');     $('#calendar').fullCalendar({         events: function (start, end, groupSelectedArray, callback) {             $.ajax({                 type: "POST",                 url: '@Url.Action("GetAllEvents", "Home")',                 data: JSON.stringify(groupData),//{ selectedGroups: groupSelectedArray },                 contentType: "application/json; charset=utf-8",                 dataType: "json",                 success: function (doc) {                     var events = [];                     $(doc).each(function () {                         events.push({                             title: $(this).attr('title'),                             start: $(this).attr('start'),                             end: $(this).attr('end'),                             id: $(this).attr('id'),                             description: $(this).attr('description'),                             color: $(this).attr('color'),                             textColor: 'black'                         });                      });                     callback(events);                 },                 error: function () {                     alert("There was an error fetching events!")                 }             });         }     });     $('#calendar').fullCalendar('addEventSource', events);     $('#calendar').fullCalendar('refetchEvents'); }); </code></pre>  <p>When using an event function to get your event data, how to use the function to get changed data? Currently I have just 2 event groups but there could be several more. I do not know how many event groups there will be so I thought using a parameterized function to get the events would be the best way to get the data.</p>  <p>Thanks.</p>  <p><strong>UPDATE</strong> I removed the function:</p>  <pre><code>$('#calendar').fullCalendar('addEventSource', events); </code></pre>  <p>in the change function.  Both groups are still displayed when one is unchecked.  The array only has 1 id in the array.  Yet when I step into the method, <code>GetAllEvents</code> the array has 2 ids.</p>  <p>Why doesn't the parameter get reset when it is reset in the javascript on the client side but on the server side it is the same as the initial array with both ids?</p>  <p><strong>UPDATE</strong> I added the function 'addEventSource' and for the second parameter tried calling the event function.  The array is correctly set on the client side but on the server side code, the parameter, selectedGroupArray, is null. This is the code:</p>  <pre><code>$('#calendar').fullCalendar('removeEvents'); $('#calendar').fullCalendar('addEventSource', function (start, end, callback) {         $.ajax({             url: '@Url.Action("GetAllEvents", "Home")',             contentType: "application/json; charset=utf-8",             dataType: "json",             data: JSON.stringify(groupData),             success: function (doc) {                 var events = [];                 $(doc).each(function () {                     events.push({                         title: $(this).attr('title'),                         start: $(this).attr('start'),                         end: $(this).attr('end'),                         id: $(this).attr('id'),                         description: $(this).attr('description'),                         color: $(this).attr('color'),                         textColor: 'black'                     });                  });                 callback(events);             },             error: function () {                 alert("There was an error fetching events!")             }         });    }); $('#calendar').fullCalendar('refetchEvents'); </code></pre>  <p>How can I reset the parameter array for the event function? <strong>UPDATE</strong> I did not have the 'type' defined in the ajax call.  Once I added:</p>  <pre><code>type: "POST", </code></pre>  <p>The selectedGroupArray parameter is sending the correct value. In the code behind method, <code>GetAllEvents</code>, the correct value is set in the parameter.  The events correct events are returned from the database.  But the events are not displayed on the calendar.  There are no events displayed on the calendar.</p>  <p><strong>UPDATE</strong> If I reload the page after I uncheck a group, the correct groups are shown on the page.  After I call the 'addEventSources function, I have tried adding</p>  <pre><code>$('#calendar').fullCalendar('refetchEvents'); $('#calendar').fullCalendar('renderEvents'); </code></pre>  <p>But the correct groups still will not display unless I reload the page.</p>