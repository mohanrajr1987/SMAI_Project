<p><a href="http://i.stack.imgur.com/rfZNQ.png" rel="nofollow"><img src="http://i.stack.imgur.com/rfZNQ.png" alt="enter image description here"></a></p>  <p>Hi! I am trying to implement this pseudocode  for <strong>spider algorithm for exploring the web.</strong>  Need some idea for my next step of pseudocode : "<strong>use SpiderLeg to fetch content</strong>" ,  i have a method in another class <strong>SpiderLeg</strong> which has a method to get all the URLs of that webpage but wondering how can i use it in this class??</p>  <pre><code>// method to crawl web and print out all URLs that the spider visit public List&lt;String&gt; crawl(String url, String keyword) throws IOException{     String currentUrl;     // while list of unvisited URLs is not empty     while(unvisited != null ){         // take URL from list          currentUrl = unvisited.get(0);        //using spiderLeg to fetch content            SpiderLeg leg = new SpiderLeg();     }     return unvisited; } </code></pre>  <hr>  <p>Cheers!! Will try that...However I tried this without using queue D.S, it's almost working but doesn't stop the program while searching for some word. </p>  <p>And when it finds it shows just the link of Webpage not all the specific URLs where it finds the word.  Wondering is it possible to do this way? </p>  <pre><code>private static final int MAX_PAGES_TO_SEARCH = 10;   private Set&lt;String&gt; pagesVisited = new HashSet&lt;String&gt;();   private List&lt;String&gt; pagesToVisit = new LinkedList&lt;String&gt;();    public void crawl(String url, String searchWord)   {       while(this.pagesVisited.size() &lt; MAX_PAGES_TO_SEARCH)       {           String currentUrl;       SpiderLeg leg = new SpiderLeg();       if(this.pagesToVisit.isEmpty())       {           currentUrl = url;           this.pagesVisited.add(url);       }       else       {           currentUrl = this.nextUrl();       }       leg.getHyperlink(currentUrl);       boolean success = leg.searchForWord(searchWord);       if(success)       {           System.out.println(String.format("**Success** Word %s found at %s", searchWord, currentUrl));           break;       }       this.pagesToVisit.addAll(leg.getLinks());   }   System.out.println("\n**Done** Visited " + this.pagesVisited.size() + " web page(s)");   } </code></pre>