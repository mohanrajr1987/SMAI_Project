<p>I'm trying to get a sorted list using LINQ and Entity Framework, and I'm getting some really weird results.  My code looks something like this:</p>  <pre><code>// My class that corresponds to a database table class MyClass {    public string FirstField { get; set; }    public string SecondField { get; set; }    public string ThirdField { get; set; } }  // My Entity Framework code List&lt;MyClass&gt; firstList = (from p in context.myObjects select p).OrderBy(p =&gt; p.FirstField).ToList(); List&lt;MyClass&gt; secondList = firstList.OrderBy(p =&gt; p.FirstField).ToList(); </code></pre>  <p>When I look at my results, secondList is sorted correctly, but firstList is sorted incorrectly.  For the most part it's sorted correctly, but some elements are out of order.  For instance, firstList would look something like this:</p>  <pre><code>AAA BBB CCC DDD NNN   &lt;--- wrong order EEE FFF GGG PPP   &lt;--- wrong order HHH III </code></pre>  <p>However, secondList is sorted entirely correctly.</p>  <p>I've examined the query that LINQ is creating, and the query has the correct ORDER BY.  I ran that same query in SQL Management Studio, and the results are ordered correctly (in the same order as secondList, but not firstList).  I've tried doing this using orderby in my LINQ query rather than using OrderBy(), and the results are incorrect in the same way.</p>  <p>I don't understand what's going on here.  Shouldn't firstList be sorted, and shouldn't firstList and secondList both be the same?</p>  <p>I'm using Fluent API to map my objects to tables and properties to fields if that makes any difference.</p>