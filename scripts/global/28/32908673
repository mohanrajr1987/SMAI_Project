<p>I have a database table with a field defined in a very simplified form like that</p>  <pre><code>CREATE TABLE Product (     ProductId INT,     Price SMALLMONEY ) </code></pre>  <p>I have a LINQ entity framework query that in it's simplified form goes something like:</p>  <pre><code>Iqueryable query = from Product in testDB.Products         select new         {             Price = Product.Price         } </code></pre>  <p>The problem is that this produces unexpected and unwanted behavior describes in my other post <a href="http://stackoverflow.com/questions/32610246/aspxtextbox-how-to-make-it-to-use-displayformatstring-correctly">ASPxTextBox: How to make it to use DisplayFormatString correctly?</a></p>  <p>I have researched this and I have concluded that this unwanted behavior is due to my query result returns field Price as Decimal with 4 decimal points. This is understandable as SMALLMONEY is stored in database with 4 decimal points of precision. If I reduce the number of decimals everything works ok. Something like this in this trivial example</p>  <pre><code>Iqueryable query = from Product in testDB.Products             select new                 {                     Price = 1.12m;  // Decimal literal with 2 decimals  } </code></pre>  <p>So I thought it would be sufficient to round this number to two decimals and I will be ok.</p>  <pre><code>Iqueryable query = from Product in testDB.Products                 select new                 {                     Price = Decimal.Round(Products.Price,2) // round to two decimals                     } </code></pre>  <p>WRONG. Somehow the value Price persists the knowledge that it stores 4 decimal points and my web form is messed up.</p>  <p>I took a look at source code for DecimalRound() found at <a href="http://referencesource.microsoft.com/#mscorlib/system/decimal.cs" rel="nofollow">http://referencesource.microsoft.com/#mscorlib/system/decimal.cs</a></p>  <pre><code>[System.Security.SecuritySafeCritical]  // auto-generated public static Decimal Round(Decimal d, int decimals) {     FCallRound (ref d, decimals);     return d; } </code></pre>  <p>This passes argument value by reference, so I guess only the value of argument is changed and not it's inner "meta" data describing precision.</p>  <p>What can I do? How can I downgrade the precision to two decimals.</p>