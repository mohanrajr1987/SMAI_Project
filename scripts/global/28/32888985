<p>I'm trying to make a SQL Query with LinqToEntities which will be as efficient as possible so I would like to avoid iterating after every record I get in results to get a new corrected collection. I'm trying to create a ready collection to send as a result in API just with this one query.</p>  <p>I'm trying to get a discriminator value though with inherited models.</p>  <p>My models are somewhat like these:</p>  <pre><code>public abstract class DbEntity {     [NotMapped]     public string DiscriminatorValue     {         get         {             return ObjectContext.GetObjectType(GetType()).Name;         }     } }  public class Foo : DbEntity { }  public class Bar: DbEntity { } </code></pre>  <p>This model will create a table in database which will have a column called <code>Discriminator</code>. To get the discriminator value I used my custom <code>DiscriminatorValue</code> property but it won't work in queries like this:</p>  <pre><code>var events = context.MyTable.Select(t =&gt; new {     Discriminator = t.DiscriminatorValue }).ToList(); </code></pre>  <p>This below one will obviously work, but it will be much slower imho:</p>  <pre><code>var events = context.MyTable.ToList().Select(t =&gt; new {     Discriminator = t.DiscriminatorValue }).ToList(); </code></pre>  <p>Is it possible to get <code>Discriminator</code> value without having to write my custom <code>SQL</code> query myself (like real sql which I know is possible too).</p>