<p>I'm wondering if there's a way to use the Boolean NOT operator in a LINQ Where statement when using it with a referenced method as its function, as I consider it good programming practice to always have methods or Boolean tests check for a positive whenever possible (eg, it's best to name a boolean variable/method <em>IsHappy</em> or <em>IsMad</em>, not <em>NotIsHappy</em>)</p>  <p>So far I have the following code:</p>  <pre><code>Dim DynClass As Object Dim propInfos As List(Of PropertyInfo) ... 'determine all our current properties which are not primitives or strings propInfos = DynClass.GetType.GetProperties.Where(AddressOf NotIsPrimitiveOrStringType).ToList </code></pre>  <p>And then the methods referenced by the Where:</p>  <pre><code>Public Function IsPrimitiveOrStringType(p As PropertyInfo) As Boolean     Return Not p.PropertyType.IsPrimitive And Not p.PropertyType.Name = GetType(String).Name End Function Public Function NotIsPrimitiveOrStringType(p As PropertyInfo) As Boolean     Return Not IsPrimitiveOrStringType(p) End Function </code></pre>  <p>DynClass can be any object, and is passed in to the method.</p>  <p>Is there a more elegant way to do this, since I will need to reuse the IsPrimitiveOrStringType feature elsewhere in my application?</p>