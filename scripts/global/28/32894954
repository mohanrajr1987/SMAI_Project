<p>I have a DB table, let's call it 'People', with an Entity associated with it, and a view model class, Person, that contains a list of objects from another table, let's say 'Jobs'. Each job has a length of time held. Using LINQ, I want to make an IQueryable that contains an IQueryable. </p>  <p>The database has a lot of people in it. I want to pull the people whom have had a job longer than 6 months. </p>  <p>What I have is this:</p>  <pre><code>public IQueryable&lt;Person&gt; GetPeople() =&gt;     Repo&lt;Person&gt;.Get().Select(p =&gt; new Person      {         Name = p.Name,         Jobs = GetJobs(p.Name)     }).Where(h =&gt; h.Jobs.Count() &gt; 0);  public IQueryable&lt;Job&gt; GetJobs(string name) =&gt;      Repo&lt;Job&gt;.Get().Where(j =&gt; j.name == name &amp;&amp; j.time &gt; 6); </code></pre>  <p>The problem is that this pulls every person, then queries for jobs for each of them, which is inefficient. Is there a good way of pulling jobs first, then creating a list of people, each with their own list of qualifying jobs?</p>