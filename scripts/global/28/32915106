<p>I'm using MVC5 EF6 and Identity 2.1.</p>  <p>I have two classes:</p>  <pre><code>    public class Incident          {            public int IncidentId {get; set;}            ...//Title, Description, etc            public virtual ICollection&lt;FollowedIncident&gt; FollowedIncidents { get; set; }            public virtual ApplicationUser User { get; set; }         }          public class FollowedIncident         {            public int FollowedIncidentId { get; set; }            public string UserId { get; set; }            public int IncidentId { get; set; }             public virtual Incident Incident { get; set; }            public virtual ApplicationUser User { get; set; }         } </code></pre>  <p>So, the users will have the ability to follow an incident. (For starters, I'm not entirely sure if I need the ICollection and public virtual relationship references, but added them just in case for the time being.) </p>  <p>I'm trying to create the query that will show users the results of their followed incidents. In my controller, my query starts like this (I'm using Troy Goode's paging package... i.e. listUnpaged):</p>  <pre><code>IQueryable&lt;Incident&gt; listUnpaged = db.Incidents.OrderByDescending(d =&gt; d.IncidentDate); </code></pre>  <p>Then I want to filter by followed incidents. So, I want to show incidents where userId (parameter I pass to it) is equal to UserId in FollowedIncident. I've tried like this (error about conversion to bool from IEnumerable):</p>  <pre><code>listUnpaged = listUnpaged.Where(s =&gt; s.FollowedIncidents.Where(t =&gt; t.UserId == userId)); </code></pre>  <p>And this (no error, but doesn't filter at all):</p>  <pre><code>listUnpaged = listUnpaged.Where(s =&gt; s.FollowedIncidents.All(t =&gt; t.UserId == userId)); </code></pre>  <p>To me, it seems it should be as simple as this:</p>  <pre><code>listUnpaged = listUnpaged.Where(s =&gt; s.FollowedIncidents.UserId == userId)); </code></pre>  <p>But, the linq extensions don't seem to like related data child properties? (I apologize for my programming terminology as I haven't quite pieced together all the names for everything yet.)</p>  <p>Anyone know how to accomplish this? It seems I may not even be thinking about it correct? (...since in the past, I've always used related data to supplement or add properties to a result. This will be the first time I want to narrow results by related data.)</p>  <p>Thank you.</p>