<p>I have a rather involved routine that rebuilds LaTeX documents when necessary by walking the included classes, packages, etc. for any given file and checking when those dependencies were last updated in git. If any of the dependencies have been updated since the last PDF build, it rebuilds them.</p>  <p>To date I've been checking the timestamps using git log:</p>  <pre><code>git log -1 --format=%ct -- &lt;path_to_file&gt; </code></pre>  <p>This has been working great as long as I have the full git history to work from. I've recently switched to using a CI system to do these builds for me and suddenly it's finding the dependencies are always updated even when they haven't been. The big change is that some of the dependencies are in git submodules that are being checked out with <code>--depth 1</code>. This changes the behavior of git's log output. The time stamp being returned is now always the timestamp of the commit referenced in the submodule rather than the actual last time the file was committed.</p>  <p>Running <code>git show &lt;commit_sha&gt; --stat</code> would normally give a list of files affected by a given commit. However when the commit listed is the only commit checked out using <code>--depth 1</code>, this lists <em>all</em> files in the repository.</p>  <p>In the context of such a sparse clone, <strong>how can I tell if a file was changed in the latest commit or previously</strong>? I don't even need to know what the commit timestamp actually is, all I need is a boolean true or false value for whether a given file was directly modified in the HEAD commit or not. If it was last changed in any prior commit I don't care about it. If it was actually modified in the last commit I want to rebuild anything that depends on it during the CI run.</p>