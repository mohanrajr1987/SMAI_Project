<p>I'm having a problem with adding tabs from <code>usercontrol</code>. The Command "AddInvoice" works fine when called from a menu, and adds a tab to <code>tabcontrol</code>. But, when I try to call the command from <code>usercontrol</code> through button located in it, the command doesn't work, and a new tab doesn'tt appear in the <code>tabcontrol</code>.</p>  <p>How can I add tabs using buttons located in tabs, other than by stripping the menu?</p>  <p>Here's my code:</p>  <h3>MainWindow</h3>  <pre><code>&lt;Window x:Class="DoubleClick.MainWindow"         xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"         xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"         xmlns:vm="clr-namespace:DoubleClick"         Title="MainWindow" Height="350" Width="525"&gt;     &lt;Window.DataContext&gt;         &lt;vm:MVM&gt;&lt;/vm:MVM&gt;     &lt;/Window.DataContext&gt;     &lt;Grid&gt;         &lt;ToolBar Height="40" VerticalAlignment="Top"&gt;             &lt;Menu&gt;                 &lt;MenuItem Header="Menu" Margin="6" Foreground="White" FontSize="14" FontFamily="Times New Roman"&gt;                     &lt;MenuItem Header="Add Invoice" Command="{Binding AddInvoice}"/&gt;                   &lt;/MenuItem&gt;             &lt;/Menu&gt;         &lt;/ToolBar&gt;         &lt;TabControl x:Name="tabControl1" ItemsSource="{Binding Tabs}" ItemTemplate="{DynamicResource DataTemplateType1}" TabStripPlacement="Top" HorizontalAlignment="Stretch" Margin="10,46,0,0" VerticalAlignment="Stretch" Width="Auto"&gt;         &lt;/TabControl&gt;     &lt;/Grid&gt; &lt;/Window&gt; </code></pre>  <h3>Some View for tab</h3>  <pre><code>&lt;UserControl x:Class="DoubleClick.UC2"              xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"              xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"              xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"               xmlns:d="http://schemas.microsoft.com/expression/blend/2008"               xmlns:vm="clr-namespace:DoubleClick"              mc:Ignorable="d"               d:DesignHeight="300" d:DesignWidth="300"&gt;      &lt;UserControl.Resources&gt;         &lt;vm:MVM x:Key="ViewModel"/&gt;     &lt;/UserControl.Resources&gt;     &lt;Grid&gt;         &lt;Button Content="Button" Height="25" Name="button1" Width="115" Command="{Binding AddInvoiceList}"  /&gt;         &lt;StackPanel&gt;             &lt;TextBox Text="{Binding Text}" Height="71" HorizontalAlignment="Left" Margin="11,12,0,0" Name="textBox1" VerticalAlignment="Top" Width="116" /&gt;         &lt;/StackPanel&gt;         &lt;/Grid&gt; &lt;/UserControl&gt; </code></pre>  <h3>ViewModel</h3>  <pre><code>public class MVM : BVM {     public RelayCommand RelayCommand { get; set; }      public MVM()     {         this.RelayCommand = new RelayCommand(this);         Tabs = new ObservableCollection&lt;BVM&gt;();          Tabs.Add(new UC2Model         {          });     }      public ObservableCollection&lt;BVM&gt; Tabs { get; private set; }      int _SelectedItem;     public int SelectedItem     {         get { return _SelectedItem; }         set { _SelectedItem = value; OnPropertyChanged("SelectedItem"); }     }      ICommand _AddInvoice = null;      public ICommand AddInvoice     {         get         {             return _AddInvoice != null ? _AddInvoice : _AddInvoice.SetCommand(param =&gt;             {                 Tabs.Add(new UC2Model                 {                  });             });         }     }      } } </code></pre>  <h3>Model</h3>  <pre><code>public class UC2Model : BVM {      public UC2Model()     {      }  } </code></pre>  <h3>Command</h3>  <pre><code>public class RelayCommand : ICommand {     readonly Action&lt;object&gt; _execute;     readonly Predicate&lt;object&gt; _canExecute;      private BVM mvm { get; set; }      public RelayCommand(Action&lt;object&gt; execute)         : this(execute, null)     {     }      public RelayCommand(BVM param)     {         this.mvm = param;     }      public RelayCommand(Action&lt;object&gt; execute, Predicate&lt;object&gt; canExecute)     {         if (execute == null)             throw new ArgumentNullException("execute");          _execute = execute;         _canExecute = canExecute;     }      public bool CanExecute(object parameter)     {         return _canExecute == null ? true : _canExecute(parameter);     }      public event EventHandler CanExecuteChanged     {         add { CommandManager.RequerySuggested += value; }         remove { CommandManager.RequerySuggested -= value; }     }      public void Execute(object parameter)     {         _execute(parameter);     } }  public static class CommExpr {     public static ICommand SetCommand(this ICommand comm, Action&lt;object&gt; execute)     {         return comm != null ? comm : comm = new RelayCommand(execute);     }       public static ICommand SetCommand(this ICommand comm, Action&lt;object&gt; execute, Predicate&lt;object&gt; canExecute)     {         return comm != null ? comm : comm = new RelayCommand(execute, canExecute);     } } </code></pre>  <h3>App.Xaml</h3>  <pre><code>&lt;Application x:Class="DoubleClick.App"          xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"          xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"          xmlns:vm="clr-namespace:DoubleClick"          StartupUri="MainWindow.xaml"&gt; &lt;Application.Resources&gt;     &lt;DataTemplate x:Key="DataTemplateType1"&gt;         &lt;Border x:Name="border" Background="Transparent" Margin="-2"&gt;             &lt;DockPanel&gt;                 &lt;Button DockPanel.Dock="Right" Margin="2" Content="X" FontSize="12" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" Command="{Binding CloseMe}" CommandParameter="{Binding ItemsSource, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}"/&gt;                 &lt;TextBlock DockPanel.Dock="Left" Text="{Binding Description}" FontFamily="Segoe" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="5"/&gt;             &lt;/DockPanel&gt;         &lt;/Border&gt;         &lt;DataTemplate.Triggers&gt;             &lt;Trigger Property="IsMouseOver" Value="True" SourceName="border"&gt;                 &lt;Setter Property="Background" Value="Yellow" TargetName="border"/&gt;             &lt;/Trigger&gt;         &lt;/DataTemplate.Triggers&gt;     &lt;/DataTemplate&gt;      &lt;DataTemplate DataType="{x:Type vm:UC2Model}"&gt;         &lt;vm:UC2/&gt;     &lt;/DataTemplate&gt;  &lt;/Application.Resources&gt; </code></pre>  <p></p>