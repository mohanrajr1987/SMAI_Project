<p>So my question is more of a challenge in the end. Maybe Im going into a wrong direction so I though maybe I could ask for ideas.</p>  <p><strong>the context:</strong></p>  <p>I have a set of string (place names) and I want to suggest answers based on user inputs in a UITextView.</p>  <p><strong>The method:</strong></p>  <p>I Used a combination of two UILabels and one UITextView to achieve a working results: The suggestionLabel is in the background, the searchLabel in the middle, and a searchInput text view on the foreground. The textview enables interaction but text's alpha is set to 0 (I didn't want to consume time with padding and insets relative to the various screen size and autolayout constraints I have). When typing, the changes are reflected on the searchLabel, and the suggestion based on inputs on the suggestionLabel.</p>  <p><strong>The goal:</strong></p>  <p>It's a visual goal. when the user select a place based on suggestion, the place's profile fades in and its title is set at the exact same place than was the search text. (all of this to serve a good looking transition).</p>  <p><strong>The challenge:</strong></p>  <p>The search input, label and place's profile title have to be centered (Im speaking about text alignment here). To make this work with the different layer of text, I used a set of auto layout constraints where blocks are centered in the views, with dynamic width, and an original text alignment set to .Left</p>  <p>Having the alignment set to .Center breaks the text layers perfect overlap. So, I though about keeping it this way and make the transition from .Left alignement to .Center when users validate their choices.</p>  <p>My problem is that textAlignment doesn't seems to be something that we can smoothly animate. So I was wondering if there was a trick of some sort I could use :)</p>  <p>thanks you for any idea you could come up with.</p>  <p>Im not sure it's relevant but here is the code wrote:</p>  <pre><code>func textViewDidChange(textView: UITextView) { //Handle the text changes here          displaySearch.text = textView.text         displaySearch.textAlignment = NSTextAlignment.Left         displaySearch.font = UIFont(name: searchView.font.fontName, size: 23)          if suggestView.text!.rangeOfString(searchView.text) != nil{             println("exists")         }         else{             suggestView.text = ""         }          //USER INPUT         let scope = self.searchView.text          //SCANNING SUGGESTION DICT         for(var i = 0; i &lt; dict.count; i++){             let stringon = dict[i]["place"] as! String             println(stringon)              if let range = stringon.rangeOfString(scope.lowercaseString) {                 if range.startIndex == stringon.startIndex {                     suggestView.text = stringon.capitalizedString                     searchView.text = searchView.text.capitalizedString                     suggestView.textAlignment = NSTextAlignment.Left                     suggestView.font = UIFont(name: searchView.font.fontName, size: 23)                     suggestView.textColor = UIColor.grayColor()                 }             }         }     }   func textView(textView: UITextView, shouldChangeTextInRange range: NSRange, replacementText text: String) -&gt; Bool {         if(text == "\n") {             textView.resignFirstResponder()             //ANIMATE TEXT ALIGNMENT             return false         }         return true     } </code></pre>