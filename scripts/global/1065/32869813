<p>I'm trying to do now, using Fragments. Below I leave the code used so far. The idea is, the behavior I want is that initially the fragment with the animation and once you finish the animation display slides up to fragment and then let them see the main layout. But what is happening is that initially shows for a moment the main layout and quickly after the fragment is shown in the animation. Here I leave part of the code used.</p>  <p>This is my main activity layout</p>  <pre><code>&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"         xmlns:tools="http://schemas.android.com/tools"     android:id="@+id/container"     android:layout_width="match_parent"     android:layout_height="match_parent"     tools:context=".MainActivity"     tools:ignore="MergeRootFrame"&gt;      &lt;FrameLayout         android:layout_width="match_parent"         android:layout_height="match_parent"&gt;     &lt;/FrameLayout&gt;      &lt;FrameLayout         android:layout_width="match_parent"         android:layout_height="match_parent"&gt;          &lt;LinearLayout              android:orientation="vertical"              android:layout_width="fill_parent"             android:layout_height="fill_parent"&gt;              &lt;FrameLayout                 android:layout_width="fill_parent"                 android:layout_height="fill_parent"                 android:layout_weight="2.5"                 android:background="#8BBBC3"&gt;&lt;/FrameLayout&gt;              &lt;FrameLayout                 android:layout_width="fill_parent"                 android:layout_height="fill_parent"                 android:layout_weight="2"                 android:background="#00D9DF"&gt;&lt;/FrameLayout&gt;              &lt;FrameLayout                 android:layout_width="fill_parent"                 android:layout_height="fill_parent"                 android:layout_weight="1.5"                 android:background="#FBF0AD"&gt;                            &lt;/FrameLayout&gt;         &lt;/LinearLayout&gt;     &lt;/FrameLayout&gt; &lt;/RelativeLayout&gt; </code></pre>  <p>An this is my fragment</p>  <pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"     android:orientation="vertical"     android:layout_width="match_parent"     android:layout_height="match_parent"&gt;      &lt;ImageView         android:layout_width="match_parent"         android:layout_height="match_parent"         android:contentDescription="@string/app_name"         android:scaleType="fitXY"         android:layout_gravity="center"         android:id="@+id/imgvSplash" /&gt;  &lt;/LinearLayout&gt; </code></pre>  <p>This es the class who manage the fragment</p>  <pre><code>public class IntroFullScreenFragment extends Fragment {     private AnimationsMaker animationMaker;     private MediaPlayer mediaPlayer;      private static final int[] IMAGE_RESOURCES = getImageResources();     private static final int ANIMATION_INTERVAL = 90;// 200ms      private static int[] getImageResources()     {         return new int[]         {             R.drawable.intro_00000, R.drawable.intro_00002,                        R.drawable.intro_00004,         R.drawable.intro_00006, R.drawable.intro_00008,          R.drawable.intro_00010, R.drawable.intro_00012, R.drawable.intro_00014,         R.drawable.intro_00016, R.drawable.intro_00018,          R.drawable.intro_00020, R.drawable.intro_00022, R.drawable.intro_00024,         R.drawable.intro_00026, R.drawable.intro_00028,          R.drawable.intro_00030, R.drawable.intro_00032, R.drawable.intro_00034,         R.drawable.intro_00036, R.drawable.intro_00038,          R.drawable.intro_00040, R.drawable.intro_00042, R.drawable.intro_00044,         R.drawable.intro_00046, R.drawable.intro_00048,          R.drawable.intro_00050, R.drawable.intro_00052, R.drawable.intro_00054,         R.drawable.intro_00056, R.drawable.intro_00058,          R.drawable.intro_00060, R.drawable.intro_00062, R.drawable.intro_00064,         R.drawable.intro_00066, R.drawable.intro_00068,          R.drawable.intro_00070,     }; }  public IntroFullScreenFragment() {}      @Override public View onCreateView(LayoutInflater inflater, ViewGroup container,  Bundle savedInstanceState) {     View rootView = inflater.inflate( R.layout.fragment_intro, container, false );     return rootView; }  @Override public void onViewCreated( final View view, final Bundle savedInstanceState ) {     super.onViewCreated( view, savedInstanceState );      ImageView myAnimation = (ImageView) view.findViewById(R.id.imgvSplash);      animationMaker = AnimationsMaker.getInstance(myAnimation);     animationMaker.addAllFrames(IMAGE_RESOURCES, ANIMATION_INTERVAL);      animationMaker.setOnAnimationStoppedListener(new AnimationsMaker.OnAnimationStoppedListener()     {         @Override         public void onAnimationStopped()         {             getFragmentManager().popBackStack();         }     });      animationMaker.start(); } </code></pre>  <p>}</p>  <p>And this is my Main class</p>  <pre><code>public class MainActivity extends FragmentActivity {     @Override     protected void onCreate(Bundle savedInstanceState)     {         requestWindowFeature(Window.FEATURE_NO_TITLE);         super.onCreate(savedInstanceState);                     setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);     setContentView(R.layout.activity_main);     /*         This line of code is the one that shows the fragment that is responsible for displaying the animation    */    getSupportFragmentManager().beginTransaction()             .setCustomAnimations(R.anim.abc_fade_in, 0, 0,     R.anim.abc_slide_out_top)             .add(R.id.container, new IntroFullScreenFragment())             .addToBackStack("animation")             .commit();     }      @Override     public boolean onCreateOptionsMenu(Menu menu)     {         Inflate the menu; this adds items to the action bar if it is present.         getMenuInflater().inflate(R.menu.menu_main, menu);         return true;     }      @Override     public boolean onOptionsItemSelected(MenuItem item)     {         // Handle action bar item clicks here. The action bar will         // automatically handle clicks on the Home/Up button, so long         // as you specify a parent activity in AndroidManifest.xml.         int id = item.getItemId();          //noinspection SimplifiableIfStatement         if (id == R.id.action_settings)             return true;          return super.onOptionsItemSelected(item);     } } </code></pre>  <p>The problem is not in the AnimationMaker class, I used other times and had no problems. Probably the idea that this undertaking with Fragments not the most correct. Maybe if you wear ViewFlipper out better. Any suggestions are welcome. But the essential idea is that initially the animation appears, and then when it finished sliding up and as they do the main view is discovered.</p>