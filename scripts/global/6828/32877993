<p>I am having a problem with assigning new values to a dynamic int array that is a data member variable of the class IntersectionFlowRate(). I can initialize and print the values of the array inside the constructor. However, when I exit the constructor to the another class and then later call a function within the IntersectionFlowRate() class passing in variables to overwrite the initial values of the data member it will segmentation fault. I have debugged to find that overwriting the array is causing the seg fault. And that even attempting to access the dynamic array within one of its functions will seg fault. </p>  <p>My question is how can I edit the values of a dynamic int array member variable from within one of its functions i.e setArrayElement(int index, int x).</p>  <p>Here is some of my code. Sorry if I am unclear or missing something ridiculous. I have been stuck on this for hours.</p>  <pre><code>    #ifndef INTERSECTIONFLOWRATE_H     #define INTERSECTIONFLOWRATE_H      class IntersectionFlowRate     {     public:         IntersectionFlowRate();         ~IntersectionFlowRate();         void setFlowCycle(int index, int flow);      private:         int* m_flowRateMotorCycle;   };  #endif </code></pre>  <p>in the .h file ^</p>  <pre><code>    #include "IntersectionFlowRate.h"     #include &lt;cstdlib&gt;     #include &lt;iostream&gt;     #include &lt;new&gt;      using namespace std;     IntersectionFlowRate::IntersectionFlowRate()     {         const int SIZE = 4; //Constant for m_flowRates[] size          //DYNAMIC MEMORY DELETE LATER         m_flowRateMotorCycle = new int[SIZE];          for(int i = 0; i &lt; SIZE; i++){             m_flowRateMotorCycle[i] = 0;             cout &lt;&lt; m_flowRateMotorCycle[i] &lt;&lt; endl;             cout &lt;&lt; "WE GOT HERE" &lt;&lt; endl;         }     }      void IntersectionFlowRate::setFlowCycle(int index, int flow){         cout &lt;&lt; "INDEX: " &lt;&lt; index &lt;&lt; endl;         cout &lt;&lt; "FLOW: " &lt;&lt; flow &lt;&lt; endl;          m_flowRateMotorCycle[index] = flow; //seg fault is here     } </code></pre>  <p>I have another class that creates a pointer to a IntersectionFlowRate() object and then calls its setFlowCycle function passing in two VALID ints. With the debugging I was able pass 0 and 3 to the function setFlowCycle(0, 3) just fine and output those variables within the function. </p>  <pre><code>    #ifndef TRAFFICSIM_H     #define TRAFFICSIM_H      #include "IntersectionFlowRate.h"      using namespace std;      class TrafficSim     {     public:         TrafficSim(); //Default Constructor         TrafficSim(const char* file); //Constructor         ~TrafficSim(); //Destructor       private:         IntersectionFlowRate* m_flowRate;     };     #endif       #include "TrafficSim.h"     #include "IntersectionFlowRate.h"     #include &lt;iostream&gt;     #include &lt;string&gt;     #include &lt;fstream&gt;     #include &lt;cstdlib&gt;       using namespace std;      TrafficSim::TrafficSim()     {          IntersectionFlowRate* m_flowRate = new IntersectionFlowRate();         m_flowRate-&gt;setFlowCycle(0, 3);      } </code></pre>  <p>I replicated the error with this code. If no one else can I am completely unsure of what is possibly wrong anymore.</p>