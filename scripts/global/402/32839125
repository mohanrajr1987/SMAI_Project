<p>So I have statistics.h with this</p>  <pre><code>template&lt;typename T&gt; class OwnType { public:     OwnType() {};     virtual ~OwnType() {};      void nextValue(T value) {         nmbrCnt++;         cout &lt;&lt; "Value: " &lt;&lt; value &lt;&lt; endl;         cout &lt;&lt; "# of Values so far: " &lt;&lt; nmbrCnt &lt;&lt; endl;         average = (average + value) / nmbrCnt; // calculate average &lt;----- WRONG!          variance += pow(value - average, 2) / nmbrCnt; // calculate standard variance/deviation     };      T getAverage() { return average; }     T getVariance() { return variance; }     T getRange() { return max - min; }  private:     T max = NULL;     T min = NULL;     T average = NULL;     double variance = 0;     int nmbrCnt = 0;     bool firstCall = true; }; </code></pre>  <p>And in main.cpp I do this:</p>  <pre><code>void main() {     OwnType&lt;double&gt; list;      list.nextValue(10.5);         cout &lt;&lt; "Average: " &lt;&lt; list.getAverage() &lt;&lt; endl;     list.nextValue(5);         cout &lt;&lt; "Average: " &lt;&lt; list.getAverage() &lt;&lt; endl;     list.nextValue(3);         cout &lt;&lt; "Average: " &lt;&lt; list.getAverage() &lt;&lt; endl;     list.nextValue(24.6)         cout &lt;&lt; "Average: " &lt;&lt; list.getAverage() &lt;&lt; endl;     } </code></pre>  <p>However, there seems to be a logic error or I'm not understanding templates right. I can calculate the average just fine, if it's in an array, but without an array, without any storage whatsoever, I'm stumped. Any iedas?</p>