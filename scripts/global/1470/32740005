<p>I wrote a simple program to monitor my ping. I'm currently using <code>NumberAxis</code> with auto ranging, and after each ping, I add the new data at the end, remove the first one and increment <code>totalCount</code> variable for X axis position. </p>  <p>I would like the X axis label to either:</p>  <ul> <li>show time elapsed since start. So for example, the label for 1100th ping at 0.25s ping intervals would be <code>4m 35s</code></li> <li>show time since the ping. This would require the labels to remain static (not move with the plot) and be in reversed order.</li> </ul>  <p>Is either of these two (preferably 1st) possible to implement? I suppose I would have to use <code>CategoryAxis</code> for this, but I'm not sure how to create unlimited number of categories and choose to show only full minutes. Is it possible to keep the <code>NumberAxis</code> for easier use with incoming data and just change the label text formatting? I already have a method that converts seconds to <code>00h 00m 00s</code> format.</p>  <p>Also another thing, I think related to auto ranging, the chart doesn't refresh after every input, but only once it exceeds 10% of given range. So for 1000 range as in the picture, it will draw 100 new pings, and then move everything 100 positions to the left. Can I change it somehow to move after just 1 ping?</p>  <p><a href="http://i.stack.imgur.com/iJ3g0.jpg" rel="nofollow"><img src="http://i.stack.imgur.com/iJ3g0.jpg" alt="ping"></a></p>  <p>Not sure if relevant, but I'll post the code: </p>  <p>Controller </p>  <pre><code>public class GuiController implements Initializable {  @FXML Button startButton, stopButton; @FXML TextField sField, nField, ipField; @FXML LineChart&lt;Integer, Integer&gt; chart; @FXML Label timeLabel, pingLabel;  ScheduledService&lt;Integer&gt; scheduler; ObservableList&lt;Data&lt;Integer, Integer&gt;&gt; data; public static int totalCount = 0;  private String getTime(double seconds) {     int h = (int) (seconds / 3600);     int m = (int) ((seconds % 3600) / 60);     int s = (int) (seconds % 60);     return String.format("%dh %dm %ds", h, m, s); }  public void start() {     if (sField.getText().isEmpty() || Double.parseDouble(sField.getText()) == 0)         sField.setText("0.1");     data = FXCollections.observableArrayList();     int size = Integer.parseInt(nField.getText());     stop = false;     flip();     XYChart.Series&lt;Integer, Integer&gt; series = new Series&lt;&gt;();     for (int i = 0; i &lt; size; i++) {         series.getData().add(new XYChart.Data&lt;Integer, Integer&gt;(totalCount++, 0));     }     chart.getData().clear();     chart.getData().add(series);     scheduler.setPeriod(Duration.seconds(Double.parseDouble(sField.getText())));     scheduler.setOnSucceeded(new EventHandler&lt;WorkerStateEvent&gt;() {          @Override         public void handle(WorkerStateEvent event) {             if (series.getData().size() &gt;= size)                 series.getData().remove(0);             series.getData().add(new XYChart.Data&lt;&gt;(totalCount++, scheduler.getValue()));             updatePingLabel(scheduler.getValue());         }     });     scheduler.restart(); }  public void stop() {     scheduler.cancel();     stop = true;     flip();     totalCount = 0; }  public static boolean isNumeric(String str) {     return str.matches("?\\d+(\\.\\d+)?"); }  public void flip() {     ipField.setDisable(!ipField.isDisabled());     nField.setDisable(!nField.isDisabled());     sField.setDisable(!sField.isDisabled());     startButton.setDisable(!startButton.isDisabled());     stopButton.setDisable(!stopButton.isDisabled()); }  public void updatePingLabel(int ping) {     pingLabel.setText(ping + "ms");     if (ping &lt; 80)         pingLabel.setTextFill(Color.LAWNGREEN);     if (ping &gt;= 80 &amp;&amp; ping &lt; 150)         pingLabel.setTextFill(Color.GOLD);     if (ping &gt;=150 &amp;&amp; ping &lt; 400)         pingLabel.setTextFill(Color.ORANGE);     if (ping &gt;= 400)         pingLabel.setTextFill(Color.RED); }   @Override public void initialize(URL arg0, ResourceBundle arg1) {     chart.getXAxis().setVisible(false);     chart.getXAxis().setAutoRanging(true);     stopButton.setDisable(true);     chart.getYAxis().setAutoRanging(true);     sField.textProperty().addListener(new ParamsChangeListener());     nField.textProperty().addListener(new ParamsChangeListener());     scheduler = new ScheduledService&lt;Integer&gt;() {         @Override         protected Task&lt;Integer&gt; createTask() {             return new PingTask(ipField.getText());         }     }; }  class ParamsChangeListener implements ChangeListener&lt;String&gt; {     @Override     public void changed(ObservableValue&lt;? extends String&gt; observable, String oldValue,             String newValue) {         if (isNumeric(newValue))             timeLabel.setText(getTime(Double.parseDouble(sField.getText())                     * Integer.parseInt(nField.getText())));     } } } </code></pre>  <p>Ping Task</p>  <pre><code>public class PingTask extends Task&lt;Integer&gt; {  int time;  String address;  public PingTask(String text) {     address = text; }  @Override protected Integer call() throws Exception {     try {         String cmd = "";         if (System.getProperty("os.name").startsWith("Windows")) {             cmd = "ping -n 1 " + address;         } else {             cmd = "ping -c 1 " + address;         }         Process process = Runtime.getRuntime().exec(cmd);         process.waitFor();         BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream()));         String inputLine = in.readLine();         while ((inputLine != null)) {             if (inputLine.startsWith("Reply from")) {                 String[] parts = inputLine.split("[ =ms]");                 time = Integer.parseInt(parts[9]);                 break;             }             inputLine = in.readLine();         }     } catch (Exception e) {         e.printStackTrace();     }     return time; } } </code></pre>  <p>FXML </p>  <pre><code>&lt;BorderPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" xmlns="http://javafx.com/javafx/8.0.40" xmlns:fx="http://javafx.com/fxml/1" fx:controller="application.GuiController"&gt; &lt;center&gt;   &lt;LineChart fx:id="chart" alternativeRowFillVisible="false" animated="false" createSymbols="false" horizontalZeroLineVisible="false" legendVisible="false" maxHeight="1.7976931348623157E308" verticalGridLinesVisible="false" verticalZeroLineVisible="false" BorderPane.alignment="CENTER"&gt;     &lt;xAxis&gt;       &lt;NumberAxis animated="false" forceZeroInRange="false" minorTickCount="0" minorTickLength="0.0" minorTickVisible="false" side="BOTTOM" tickMarkVisible="false" tickUnit="1.0" upperBound="200.0" /&gt;     &lt;/xAxis&gt;     &lt;yAxis&gt;       &lt;NumberAxis animated="false" autoRanging="false" forceZeroInRange="true" minorTickCount="0" minorTickLength="0.0" minorTickVisible="false" side="LEFT" tickLabelGap="5.0" tickUnit="20.0" /&gt;     &lt;/yAxis&gt;   &lt;/LineChart&gt; &lt;/center&gt; &lt;left&gt;   &lt;VBox alignment="TOP_CENTER" spacing="10.0" BorderPane.alignment="CENTER"&gt;      &lt;children&gt;         &lt;HBox alignment="CENTER" VBox.vgrow="NEVER"&gt;            &lt;children&gt;               &lt;Label text="IP " /&gt;               &lt;TextField fx:id="ipField" prefWidth="100.0" text="euw.leagueoflegends.com"&gt;                  &lt;opaqueInsets&gt;                     &lt;Insets /&gt;                  &lt;/opaqueInsets&gt;               &lt;/TextField&gt;            &lt;/children&gt;            &lt;padding&gt;               &lt;Insets top="5.0" /&gt;            &lt;/padding&gt;         &lt;/HBox&gt;         &lt;HBox alignment="CENTER" VBox.vgrow="NEVER"&gt;            &lt;children&gt;               &lt;Label text="Ping co " /&gt;               &lt;TextField fx:id="sField" alignment="TOP_RIGHT" prefWidth="60.0" text="0.25" HBox.hgrow="NEVER"&gt;                  &lt;HBox.margin&gt;                     &lt;Insets right="5.0" /&gt;                  &lt;/HBox.margin&gt;               &lt;/TextField&gt;               &lt;Label text="s" /&gt;            &lt;/children&gt;            &lt;padding&gt;               &lt;Insets top="5.0" /&gt;            &lt;/padding&gt;         &lt;/HBox&gt;         &lt;HBox alignment="CENTER"&gt;            &lt;children&gt;               &lt;Label text="Rysuj " /&gt;               &lt;TextField fx:id="nField" alignment="CENTER_RIGHT" prefWidth="60.0" text="1000" HBox.hgrow="NEVER" /&gt;               &lt;Label text=" próbek" /&gt;            &lt;/children&gt;            &lt;padding&gt;               &lt;Insets top="5.0" /&gt;            &lt;/padding&gt;         &lt;/HBox&gt;         &lt;HBox alignment="CENTER" VBox.vgrow="NEVER"&gt;            &lt;children&gt;               &lt;Label text="Pokaż  " /&gt;               &lt;Label fx:id="timeLabel" text="0h 4m 10s" /&gt;            &lt;/children&gt;         &lt;/HBox&gt;         &lt;HBox alignment="CENTER" spacing="10.0" VBox.vgrow="NEVER"&gt;            &lt;children&gt;               &lt;Button fx:id="startButton" mnemonicParsing="false" onAction="#start" prefWidth="50.0" text="Start" /&gt;               &lt;Button fx:id="stopButton" mnemonicParsing="false" onAction="#stop" prefWidth="50.0" text="Stop" /&gt;            &lt;/children&gt;         &lt;/HBox&gt;         &lt;Label fx:id="pingLabel" text="0ms" textAlignment="CENTER"&gt;            &lt;font&gt;               &lt;Font name="System Bold" size="40.0" /&gt;            &lt;/font&gt;         &lt;/Label&gt;      &lt;/children&gt;      &lt;padding&gt;         &lt;Insets left="5.0" right="5.0" /&gt;      &lt;/padding&gt;   &lt;/VBox&gt;  &lt;/left&gt;  &lt;/BorderPane&gt; </code></pre>  <hr>  <p>EDIT </p>  <p>I tried using the formatter, but I'm getting <code>ClassCastException: java.lang.Double cannot be cast to java.lang.Integer</code> at application.GuiController$XAxisLabelConverter.toString(GuiController.java:1) and I don't know what to do with it.</p>  <pre><code>    class XAxisLabelConverter extends StringConverter&lt;Integer&gt; {      double interval;     int n;      public XAxisLabelConverter(double interval, int n) {         this.interval = interval;         this.n = n;     }      @Override     public Integer fromString(String arg0) {          return null;     }      @Override     public String toString(Integer value) {         if (value &lt; n) {             return "";         } else {             return getTime(value.intValue() * interval);         }     }  } </code></pre>  <p>In the <code>start()</code> method</p>  <pre><code>    ((ValueAxis&lt;Integer&gt;) chart.getXAxis()).setTickLabelFormatter(new XAxisLabelConverter(             Double.parseDouble(sField.getText()),size)); </code></pre>