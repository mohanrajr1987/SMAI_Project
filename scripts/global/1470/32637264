<p>So I'm trying to change the text from a WinForms project, from another class than the Form class. It should work like this: </p>  <p><a href="http://i.stack.imgur.com/yC8th.gif" rel="nofollow"><img src="http://i.stack.imgur.com/yC8th.gif" alt="right"></a></p>  <p>But instead it does this: </p>  <p><a href="http://i.stack.imgur.com/71gCa.gif" rel="nofollow"><img src="http://i.stack.imgur.com/71gCa.gif" alt="wrong"></a></p>  <p>The way I used to do it is pass along the object as a parameter to my other class and from that other class I could change the text. I do the same with the progressbar and it does work there, so it's weird that it works with the progressbar but not the label.</p>  <p>I use this method to change the progressbar:</p>  <pre><code>public void IncreaseProgress(int progBarStepSize, String statusMsg, int currentProject=-1) {    if (currentProject != -1) {       lblStatus.Text = String.Format("Status: {0} | project {1} of {2}",statusMsg,currentProject,ProjectCount);    }    else {       lblStatus.Text = String.Format("Status: {0}",statusMsg);    }     pb.Increment(progBarStepSize); } </code></pre>  <p>And here is where I use the method:</p>  <pre><code>public void InitialiseFile(List&lt;string&gt; filePaths, int eurojobType) {     foreach (string sheet in outputSheets) {         switch (sheet) {             case "Summary":                 for (int i = 0; i &lt; filePaths.Count; i++) {                             var filePath = filePaths[i];                     IncreaseProgress(1, "Reading Summary", i);                     worksheetIn = excelReader.ReadExcelSummary(filePath);                      IncreaseProgress(1, "Writing Summary", i);                     excelWriter.WriteExcelSummary(worksheetIn);                 }                 break;             case "Monthly_Cat1":                 for (int i = 0; i &lt; filePaths.Count; i++) {                     var filePath = filePaths[i];                     IncreaseProgress(1, "Reading Monthly", i);                     worksheetIn = excelReader.ReadExcelMonthly(filePath);                      IncreaseProgress(1, "Writing Monthly", i);                     excelWriter.WriteExcelMonthly(worksheetIn);                 }                 break;         }     }     IncreaseProgress(1, "Completed!"); } </code></pre>  <p>Now I know this code works because the progressbar increments. And it should jump in the first if-loop because <code>i</code> gets passed as a parameter, which is never <code>-1</code>.</p>  <pre><code>//manager class private Label lblStatus; private ProgressBar pb;  public Manager(ProgressBar pb, Label lbl){     this.pb = pb;     lblStatus = lbl; }  //Form class Manager mgr = new Manager(progressBar1, lblStatus, projectFilePaths.Count, outputSheets.ToArray(), exportPath); mgr.InitialiseFile(projectFilePaths, eurjobType); </code></pre>