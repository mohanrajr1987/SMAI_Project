<p>This is a follow up to: <a href="http://stackoverflow.com/questions/32900061/how-do-i-scale-tkinter-canvas-window-without-changing-objects">Scale Tkinter window without changing objects</a></p>  <p>This is also a bit of a style/opinion question as well.</p>  <p>I would like to put objects on to a Tkinter canvas in engineering units (inches). If I use canvas.scale(...) it will modify the objects, which is not what I wish to do. </p>  <p>Is there a way to easily clone a canvas. I would place my objects on one canvas. Then when it came time to display it. I would copy all the objects on that canvas to a second canvas. The second canvas would then get canvas.scale(...) applied to it. All of my work would be done on the first canvas. I do not see an easy / elegant way to copy objects from one canvas to another directly without having to determine what the object is, then create it, then set all of its parameters. Something like:</p>  <pre><code>WorkingCanvas=Canvas(root,width=36,height=10) ScaledCanvas=Canvas(root,width=1800,height=300) WorkingCanvas.create_oval(0,0,0.3125,0.3125) # this is in inches for object in WokingCanvas.getobjects():     ScaledCanvas.addobject(object) WorkingCanvas.scale(ScaleX,ScaleY,0,0) </code></pre>  <p>Only ScaledCanvas would ever be displayed (ScaledCanvas.pack()). Working Canvas would just remain unpacked, but all of the objects would remain in engineering units.</p>  <p>Style Question: I would like to do the above because the scaling happens once in one place. Easy to maintain. I do it once and forget about it.</p>  <p>The other approach that comes to mind to to create a sub class for all object create and manipulate functions. Each of those functions would quietly apply the scale function. This means that canvas.create_* would need the scaling as well as canvas.move() etc. I would also have to keep track of the current scale and the new scale (if the window is resized) apply that ratio to current items and then begin applying the new scale to any objects that are added / moved.</p>  <p>Even as I type this I do not at all like that approach. Seems hard to maintain.</p>