<p>I have created a custom widget with a class (myEntry) that inherits from Entry. When I instantiate myEntry, its methods work just fine, but when I try to get its attributes I get an AttributeError instead.</p>  <p>Below is a simplified version of the code. I wrote it just to test this class and try to figure out what I'm doing wrong. If I click on <em>btTest1</em>, I get "John Smith". If I click on <em>btTest2</em>, I get "This works, too". When I click on <em>btTest3</em>, though, I get the following:</p>  <pre><code>Exception in Tkinter callback Traceback (most recent call last):   File "C:\Python34\lib\tkinter\__init__.py", line 1533, in __call__ return self.func(*args)   File "C:/Users/Raquel/Documents/Controle de Pedidos/CP2/teste.py", line 15, in &lt;lambda&gt;     btTest3 = Button(myFrame, text="Get value", command=lambda: print(txtTest.myValue)) AttributeError: 'myEntry' object has no attribute 'myValue' </code></pre>  <p>So, it seems I can get the value of the fullName attribute of x (a Person instance) with x.fullName, but I can't get the value of the myValue attribute of txtTest (a myEntry instance) with txtTest.myValue? What am I missing here?</p>  <pre><code>from tkinter import *  class main(Frame):     def __init__(self, *args, **kwargs):         Frame.__init__(self, *args, **kwargs)          x = Person("John Smith")         myFrame = Frame(self, bd=10)         myFrame.grid(row=0, column=0, sticky=NSEW)         lbTest = Label(myFrame, text="My field*:")         vTest = StringVar()         txtTest = myEntry(myFrame, vTest, "testing")         btTest1 = Button(myFrame, text="Get full name", command=lambda: print(x.fullName))         btTest2 = Button(myFrame, text="Show", command=lambda: txtTest.show())         btTest3 = Button(myFrame, text="Get value", command=lambda: print(txtTest.myValue))         lbTest.grid(row=0, column=0, sticky=W)         txtTest.grid(row=0, column=1, sticky=W)         btTest1.grid(row=1, column=0)         btTest2.grid(row=1, column=1)         btTest3.grid(row=1, column=2)  class myEntry(Entry):     def __init__(self, master, myVar, myValue):         super().__init__(master, textvariable=myVar)         self = Entry(master, textvariable=myVar)         self.myValue = myValue      def show(self):         print("This works, too.")  class Person():     def __init__(self, fullName):         self.fullName = fullName  if __name__ == "__main__":     root = Tk()     main(root).pack(side=TOP, fill=BOTH, expand=True)     root.mainloop() </code></pre>