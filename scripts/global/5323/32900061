<p>How do I scale a Tkinter canvas itself. I am creating an application where it would be far more elegant ( that is to say much more readable) if I can plot things on a tkinter canvas in engineering units (inches) and simply scale the canvas to the window. The attached code is quite over simplified for what I want to to but I believe that it gets the point across. I would like to apply the scale factor once instead of each and every time I add an object to the canvas. I would like the canvas to represent 36 inches (or whatever) and be scaled so that 36 inches is 1800 pixels wide (or whatever window width). Once established this scale factor would not change. (I know that if self.canvas.coords(thing)[2]>canvaswidth will have to change as well).</p>  <p>I have seen this asked in different forms but I have not found an answer that does not involve scaling all the widgits on the canvas. I think it would be rather in-elegant to have a global scale factor and sprinkle it everywhere that I used a canvas coordinate.</p>  <pre><code>#AP moving machine from Tkinter import * MagicNumber=0.3125 MN=MagicNumber*7 PunchPositions=([MN*1,2],[MN*2,4],[MN*3,2],[MN*4,4]) PiercePositions=([MN*5,2],[MN*6,4],[MN*7,2],[MN*8,4]) class mover():     def __init__(self,root,canvas,things):         self.things=things         self.canvas=canvas         self.root=root         self.root.after(100,self.move)         self.counter=0     def addoval(self,x,y):         r=0.125         self.things.append(canvas.create_oval(x-r,y-r,x+r,y+r,fill='green'))     def addpierce(self,x,y):         r=0.0625         self.things.append(canvas.create_oval(x-r,y-r,x+r,y+r,fill='Black'))      def move(self):         for thing in self.things:             canvas.move(thing,1.250)         canvaswidth=canvas.winfo_width()         for thing in self.things:             if self.canvas.coords(thing)[2]&gt;canvaswidth :                 self.canvas.delete(thing)                 self.things.remove(thing)         root.after(100,self.move)         self.counter=self.counter+1         for x,y in PunchPositions:             self.addoval(x,y)         for x,y in PiercePositions:             self.addpierce(x,y) # root =Tk() canvas=Canvas(root,width=1800,height=200) parts=[]  def AddPierce(x,y):     radius=0.125     x1=x-radius     x2=x+radius     y1=y-radius     y2=y+radius     return canvas.create_oval(x1,y1,x2,y2,fill='Black') def AddPunch(x,y):     radius=0.250     x1=x-radius     x2=x+radius     y1=y-radius     y2=y+radius     return canvas.create_oval(x1,y1,x2,y2,fill='Blue')  for x,y in PunchPositions:     AddPunch(x,y) for x,y in PiercePositions:     AddPierce(x,y)  for l in range(1,12):     canvas.create_line(l*MagicNumber*4,0,l*MagicNumber*4,6)  canvas.pack(fill=BOTH) mover(root,canvas,parts) root.mainloop() </code></pre>