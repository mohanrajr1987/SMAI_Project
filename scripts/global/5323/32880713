<p>I'm not exactly adept when it comes to Python, but I've really put myself in a pickle.  Puns aside, I'm using Tkinter, and I have a particular function that let's me save all of my global variables with ease:</p>  <pre><code>def start_save(globals_=None) :     global quick_save_file, options     if globals_ is None:         globals_ = globals()     the_file = tkFileDialog.asksaveasfilename(**file_opt)      my_shelf = shelve.open(the_file,'c') # 'n' for new     for key, value in globals_.items():         if not key.startswith('__'):             try:                 my_shelf[key] = globals()[key]                 add_line( "Saved %r" % key)             except TypeError:                 # __builtins__, my_shelf, and imported modules can not be shelved.                 add_line(('ERROR shelving: {0}'.format(key)))             except :                 add_line( "Cannot pickle %r" % key)     quick_save_file = the_file     options['initialfile'] = quick_save_file     my_shelf.close() </code></pre>  <p>Basically we're looking at what comes after try: where it saves all of my global stuff into a file of the user's choosing.  Now, I know Tkinter widgets can't be saved, but I accidently created a widget, and gridded it on the same line, like so:</p>  <pre><code>ldrones_e = Label(frame_drones, text = "Number of drones:").grid(row = 3, column = 1, columnspan = 2) </code></pre>  <p>This caused my shelving function to read it as None as opposed to a widget! So instead of saying it can't do anything with it, it saved it as None.  Now, when I open said file, it takes my widget variable and sets it to none.  I can't save over it, with .grid on a seperate line, because then it won't be saved.  I can't use del to get rid of the variable, because it's in a different file. (Actually, I probably can, I'm just ignorant as to how to do that)</p>  <p>So my question is how do I remove that pesky ldrones_e variable from my pickle file so my program will use the new ldrones_e variable that doesn't have.grid attached to it.</p>