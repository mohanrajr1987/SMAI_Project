<p>I am fairly new to programming and am making a program that searches through information about rugby players in a file (about 123,300 players) and displays the players that match the users search criteria with <code>tkinter</code> in Python 3. </p>  <p>I have a search button that is binded to a <code>search()</code> method, which gets the users input, calls run_search to search the file for matches, and displays the matches to a canvas. It works fine except that the GUI freezes when the button is pressed, and only unfreezes a few seconds later when the search is finished and the matching players' info is drawn to the canvas. The actual searching function of the search() method is written in a different .py file, player_search_engine.</p>  <p>So far I understand that <code>tkinter</code> executes things serially, and so the GUI cannot be redrawn until the <code>run_search()</code> part is done. I looked around and the solution is to do the search in a different thread, or manually call <code>update()</code> on the GUI. The latter was advised against and wouldn't work for me anyway, and most solutions just say to "start another thread". I have no idea how to do this, and am not even sure what a thread is except that it might let the code run in parallel. I tried to copy a few examples that used classes for progress bars, but the GUI still froze the same.</p>  <p>Here is all the relevant (I think) code</p>  <pre><code>import player_search_engine import tkinter as tk import tkinter.ttk as ttk import threading  class scouting_tool(tk.Tk):     def __init__(self, parent):         tk.Tk.__init__(self, parent)         self.root = parent         self.draw_search_panel()         self.draw_results_panel()      def draw_search_panel(self):         ...      def draw_results_panel(self):         ...      def draw_found_players(self):         #displays a row showing the details of a player for every found player      def search(self, event):         #gets the input from all the search fields, applies them to the search engine settings,         #and searches the database using them. Then displays all matching players          #get the nationality from the combobox         player_search_engine.target_nationality = self.nat_list.get()          #get the inputs from the entry boxes         player_search_engine.min_weight = self.get_entry_box_data(self.min_weight_box, 60)         player_search_engine.max_weight = self.get_entry_box_data(self.max_weight_box, 160)         ..etc            #run the search         self.search_thread = searchThread()         self.search_thread.start()         self.search_done_check()       def search_done_check(self):          if self.search_thread.done_event.is_set():              self.draw_found_players()          else:             super(scouting_tool, self).after(20, self.search_done_check)  class searchThread(threading.Thread):     def __init__(self):         threading.Thread.__init__(self)         self.done_event = threading.Event()      def run(self):         player_search_engine.search_database()           self.done_event.set()  app = scouting_tool(None) app.title("BR Scout") app.wm_resizable(False, False) app.mainloop() </code></pre>  <p>So, how do I create a working thread for the <code>search_database()</code> function so that the GUI will not freeze while the function runs?</p>