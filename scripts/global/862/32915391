<p>In my JavaFX application I need to update it to handle window resizing. What I want to do is for when the window gets bigger keep everything aligned the same and just have the TextArea grow to be proportionate with the window and similar when making it smaller.</p>  <p>I will set a min and max height to fit the buttons on the right-hand side (decreasing the spacing a little as it gets smaller).</p>  <p>I'm figuring out that an AnchorPane is not the best option for this and I was hoping I could get a little guidance on a better approach. The text area I am using is custom, extending StyledTextArea (RichTextFX API).</p>  <p>Last spec is I want the text field and button under the text to be aligned with the text area and I think the Pane to make distance between the TextField and button will be a cumbersome approach (I was planning on not making it resizable).</p>  <p>Image for reference : <a href="http://s22.postimg.org/fgopi6781/textapp.png" rel="nofollow">text app image</a></p>  <p>Any help would be really appreciated. If it makes a difference, this entire layout is inside a BorderPane center.</p>  <pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;  &lt;?import java.lang.*?&gt; &lt;?import javafx.geometry.*?&gt; &lt;?import javafx.scene.control.*?&gt; &lt;?import javafx.scene.layout.*?&gt; &lt;?import javafx.scene.layout.AnchorPane?&gt; &lt;?import javafx.scene.shape.*?&gt; &lt;?import javafx.scene.text.*?&gt; &lt;?scenebuilder-stylesheet ../application.css?&gt;  &lt;AnchorPane fx:id="leftPane" minWidth="-1.0" prefHeight="582.0" prefWidth="855.0" xmlns:fx="http://javafx.com/fxml/1" xmlns="http://javafx.com/javafx/2.2" fx:controller="application.TextProController"&gt;   &lt;!-- TODO Add Nodes --&gt;   &lt;children&gt;     &lt;VBox alignment="CENTER_LEFT" layoutX="649.0" layoutY="0.0" prefHeight="582.0" prefWidth="205.0" spacing="55.0" styleClass="right-split"&gt;       &lt;children&gt;         &lt;Button mnemonicParsing="false" onAction="#handleLoadText" prefHeight="21.0" prefWidth="160.0" text="Load Text"&gt;           &lt;font&gt;             &lt;Font size="14.0" fx:id="x1" /&gt;           &lt;/font&gt;         &lt;/Button&gt;         &lt;Button font="$x1" mnemonicParsing="false" onAction="#handleFleschIndex" prefWidth="160.0" text="Flesch Index" /&gt;         &lt;Button font="$x1" mnemonicParsing="false" onAction="#handleEditDistance" prefHeight="21.0" prefWidth="160.0" text="Edit Distance" /&gt;         &lt;Button mnemonicParsing="false" onAction="#handleMarkovText" prefHeight="25.0" prefWidth="160.0" text="Generate Markov Text"&gt;           &lt;font&gt;             &lt;Font size="13.5" /&gt;           &lt;/font&gt;         &lt;/Button&gt;         &lt;CheckBox fx:id="spellingBox" font="$x1" mnemonicParsing="false" onAction="#handleSpelling" text="Spelling Suggestions" /&gt;         &lt;CheckBox fx:id="autocompleteBox" font="$x1" mnemonicParsing="false" onAction="#handleAutoComplete" text="AutoComplete" /&gt;       &lt;/children&gt;       &lt;padding&gt;         &lt;Insets bottom="20.0" left="5.0" /&gt;       &lt;/padding&gt;     &lt;/VBox&gt;     &lt;AnchorPane layoutX="0.0" layoutY="0.0" minHeight="0.0" minWidth="0.0" prefHeight="582.0" prefWidth="650.0" styleClass="left-split"&gt;       &lt;children&gt;         &lt;HBox alignment="CENTER_LEFT" layoutX="0.0" layoutY="525.0" prefHeight="32.0" prefWidth="642.0" spacing="15.0"&gt;           &lt;children&gt;             &lt;TextField fx:id="fleschField" prefWidth="72.0" /&gt;             &lt;Label text="Flesch Index"&gt;               &lt;font&gt;                 &lt;Font name="System Bold" size="14.0" /&gt;               &lt;/font&gt;             &lt;/Label&gt;             &lt;Pane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="32.0" prefWidth="322.0" /&gt;             &lt;Button font="$x1" mnemonicParsing="false" onAction="#handleClear" text="Clear" /&gt;           &lt;/children&gt;           &lt;padding&gt;             &lt;Insets left="39.0" /&gt;           &lt;/padding&gt;         &lt;/HBox&gt;       &lt;/children&gt;     &lt;/AnchorPane&gt;   &lt;/children&gt; &lt;/AnchorPane&gt; </code></pre>  <p><br></p>  <pre><code>import java.io.IOException; import java.util.List; import javafx.application.Application; import javafx.fxml.FXMLLoader; import javafx.geometry.Pos; import javafx.stage.Modality; import javafx.stage.Stage; import javafx.scene.Scene; import javafx.scene.control.Alert; import javafx.scene.control.Alert.AlertType; import javafx.scene.layout.AnchorPane; import javafx.scene.layout.BorderPane; import javafx.scene.layout.HBox; import javafx.scene.layout.VBox; import javafx.scene.text.Text;          public class MainApp extends Application {         private Stage primaryStage;         private BorderPane rootLayout;          private LaunchClass launch;         spelling.WordPath wp;         textgen.MarkovTextGenerator mtg;            // called at start of application         @Override         public void start(Stage primaryStage) {              this.primaryStage = primaryStage;              this.primaryStage.setTitle("TextProApp");             //primaryStage.setResizable(false);              try {                 // Load root layout from fxml                 FXMLLoader loader = new FXMLLoader(MainApp.class.getResource("view/RootLayout.fxml"));                 rootLayout = (BorderPane) loader.load();                 Scene scene = new Scene(rootLayout);                 primaryStage.setScene(scene);                 primaryStage.show();              } catch(Exception e) {                 e.printStackTrace();             }              launch = new LaunchClass();              showTextProApp();         }          /**          * Shows the main TextApplication scene          */         public void showTextProApp() {             try {                 // Load the fxml file and set into the center of the main layout                 FXMLLoader loader = new FXMLLoader(getClass().getResource("view/TextAppLayout.fxml"));                  AnchorPane textProPage = (AnchorPane) loader.load();                 rootLayout.setCenter(textProPage);                  // Connect controller and main app                 TextProController controller = loader.getController();                 controller.setMainApp(this);              } catch (IOException e) {                 // Exception gets thrown if the fxml file could not be loaded                 e.printStackTrace();             }         }      } </code></pre>  <p><br></p>  <pre><code>import javafx.concurrent.Task; import javafx.fxml.FXML; import javafx.scene.control.CheckBox; import javafx.scene.control.TextField; import javafx.scene.layout.AnchorPane; import javafx.scene.layout.VBox; import javafx.stage.Stage;   public class TextProController {      private MainApp mainApp;      // UI Controls     private AutoSpellingTextArea textBox;      @FXML     private AnchorPane leftPane;      @FXML     private TextField fleschField;      @FXML     private CheckBox autocompleteBox;      @FXML      private CheckBox spellingBox;      @FXML     private VBox rightBox;         /**      * Initializes the controller class. This method is automatically called      * after the fxml file has been loaded.      */     @FXML     private void initialize() {         // make field displaying flesch score read-only         fleschField.setEditable(false);          // instantiate and add custom text area         textBox = new AutoSpellingTextArea();         textBox.setPrefSize(570, 492);         textBox.setWrapText(true);         textBox.setLayoutX(40);         textBox.setLayoutY(25);          leftPane.getChildren().add(textBox);       }         /**      * Is called by the main application to give a reference back to itself.      * Also give reference to AutoSpellingTextArea      *       *       * @param mainApp      */     public void setMainApp(MainApp mainApp) {         this.mainApp = mainApp;         textBox.setMainApp(mainApp);         textBox.setReferences();     } } </code></pre>