<p>I have a Asp.net MVC program in which i want to get a list from the View using Javascript and pass that list to the controller. I want to the variables in the list to be string type except for one to be int32.  The problem is the list is either empty or does not pass.  I tried to use stringify but it doesn't fill the requirments.</p>  <p>Here is the code from the javascript part:</p>  <pre><code>$('#AddColumn').click(function () {      var nodeURL = document.getElementById("IDHolder").innerHTML;     var nodeConfig= nodeURL+".CONFIG";     var nodeAdd=nodeURL+".CONFIG.AddColumn";     var nodeName = $("#ColumnName").val();     var nodeType = $("#ColumnType").data("kendoComboBox").value();     var ListNodedet = [nodeName, nodeType];     var Listmet = [nodeConfig, nodeAdd];     var ListNodeDetails = JSON.stringify(ListNodedet);      var ListMethod = JSON.stringify(Listmet);      var select = 1;     var url = "/Configuration/CallMethod";      $.get(url, { ListNodeDetails:ListNodeDetails, ListMethod:ListMethod }, function (data) {         $("#Data2").html(data);     }); }) </code></pre>  <p>The C# code for the controller were it calls another method in models:</p>  <pre><code> public bool CallMethod(List&lt;Variant&gt; ListNodeDetails, List &lt;string&gt; ListMethod)     { var AddMethod = RxMUaClient.CallMethod(ListNodeDetails, ListMethod, "127.0.0.1:48030");         return AddMethod;     } </code></pre>  <p>The Model:</p>  <pre><code>public static bool CallMethod(List&lt;Variant&gt; ListNodeDetails, List&lt;string&gt; ListMethod, string iPAddress)     {         var serverInstance = GetServerInstance(iPAddress);         if (serverInstance == null)             return false;         return serverInstance.CallMethod(ListNodeDetails, ListMethod);      } </code></pre>  <p>The service model</p>  <pre><code>     public bool CallMethod(List&lt;Variant&gt; ListNodeDetails, List&lt;string&gt; ListMethod)     {         try         {             if (_mSession == null)             {                 return false;             }             NodeId objectID = NodeId.Parse(ListMethod[0]);             NodeId Methodtype = NodeId.Parse(ListMethod[1]); ;             List&lt;Variant&gt; inputArguments = ListNodeDetails;              List&lt;StatusCode&gt; inputArgumentErrors = null;             List&lt;Variant&gt; outputArguments = null;             StatusCode error = _mSession.Call(                 objectID,                 Methodtype,                 inputArguments,                 new RequestSettings() { OperationTimeout = 10000 },                 out inputArgumentErrors,                 out outputArguments);             if (StatusCode.IsBad(error))             {                 Console.Write("Server returned an error while calling method: " + error.ToString());                 return false;             }             return true;         }         catch (Exception exception)         {              Console.WriteLine(exception.ToString());             return false;         }      } </code></pre>  <p>At the end it calls some functions using OPC UA to add data.</p>