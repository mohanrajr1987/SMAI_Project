<p>I have a class like this:</p>  <pre><code>public class BE_CategoryBase {     public Int32 CategoryID { get; set; }     public String CategoryName     {         get;         set;     }     public String CategorySanitized { get; set; }     public Boolean IsActive { get; set; }     public DateTime? ModificationDate { get; protected set; }     public Int64? ModifiedBy { get; set; } } </code></pre>  <p><strong>In the Web API I have Action Method like this.</strong></p>  <blockquote>   <p>So far I am fetching all records from the server in single request.   The above API call is Post because there are many filters being used.   As the Get has limited length in query string...so I used Post.</p> </blockquote>  <pre><code>[Route("api/v1/CategoryList"), HttpPost] public async Task&lt;IHttpActionResult&gt; CategoryList([FromBody]BE_Category obj) {     var result = await _category.CategoryList(obj);      if (!string.IsNullOrEmpty(result.Key))         await _log.CreateLog(new BE_Logs { Message = result.Key });      return Ok(new { ErrorMessage = result.Key, result = result.Value }); } </code></pre>  <p>Now, In order to use Paging, I was thinking of adding <code>startPage</code> and <code>PageSize</code> columns in the <code>BE_CategoryBase</code> class. As I am using Entity Framework Code First, adding the column in the class will add these columns in Database Table also.</p>  <p>Is there any elegant way to implement paging with Post Action Method ?</p>