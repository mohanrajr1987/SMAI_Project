<p><strong>This is the model part:- I have taken one list and string list for column value and string for column hearder</strong></p>  <pre><code> public class MRAprofileGridNew     {         public string DBColumnName { get; set; }         public List&lt;string&gt; DBColumnvalue { get; set; }       } </code></pre>  <p><strong>This is CONTROLLER parts:-model is return over here</strong></p>  <pre><code>public ActionResult RiskScorePatientData([DataSourceRequest]DataSourceRequest request, string ACOName)         {             return Content(reportRepository.MedicalRiskScorePatientData(User.EmailId, ACOName).KendoJsonResult(request), "application/json");         } </code></pre>  <p><strong>View Part:- Her i want to bind the data dynamicale here i have struck how to bind data dynamicale</strong></p>  <pre><code> @*@if (!string.IsNullOrEmpty(Model))     {*@ @(Html.Kendo().Grid&lt;Guardian.Core.Model.ViewModels.MRAprofileGridNew&gt;()                         .TableHtmlAttributes(new { @class = "table table-condensed Patient-Grid" })                       .Name(gridId)                 .ToolBar(tb =&gt;                 {                     tb.Excel().HtmlAttributes(new { @class = "btn btn-danger btn-xs pull-right " });                  })  .Columns(columns =&gt;                         {                             //    foreach (var ColumnName in Model)                             //    {                              //        columns.Bound(gl =&gt; gl.DBColumnvalue).Title(ColumnName.DBColumnName).Width(200).Filterable(false).Sortable(false);                             //    }                               columns.Bound(team =&gt; team.DBColumnName).Title("Team Name");                             columns.Bound(team =&gt; team.DBColumnvalue);                              //foreach (var tem in Model)                             //{                             //    string blabal = tem.DBColumnName.ToString();                             //    columns.Template(gl =&gt; gl.DBColumnvalue[0]).Title(blabal).Width(100);                             //}                              //columns.Bound(p =&gt; p.FirstName).Title("First Name").Width(90);                             //columns.Bound(p =&gt; p.LastName).Title("Last Name").Width(90);                             //columns.Bound(p =&gt; p.HICN).Title("HICN").Width(70).HtmlAttributes(new { @class = "text text-left" });                             //columns.Bound(p =&gt; p.year).Title("Year").Width(50).HtmlAttributes(new { @class = "text text-right" });                             //columns.Bound(p =&gt; p.ProviderName).Title("Provider Name").Width(200);                             //columns.Bound(p =&gt; p.ACOID).Title("ACOID").Width(50).HtmlAttributes(new { @class = "text text-left" });                             //columns.Bound(p =&gt; p.V22MedicalRiskScore).Width(10).HtmlAttributes(new { @class = "text text-right" }).HeaderTemplate("&lt;span class='kh-Grid-tooltip' data-toggle='tooltip' data-placement='top' title='CMS-HCC V22 Risk Score'&gt;CMS-HCC V22 RS&lt;/span&gt;");                             //columns.Bound(p =&gt; p.RxRiskScore).Width(20).HtmlAttributes(new { @class = "text text-right" }).HeaderTemplate("&lt;span class='kh-Grid-tooltip' data-toggle='tooltip' data-placement='top' title='RxRiskScore'&gt;RxRscore&lt;/span&gt;");                         })           .Excel(excel =&gt; excel                         .FileName("")                         .Filterable(true)                         .AllPages(true))                          .Filterable()                         .Pageable()                         .Sortable()                                 .Events(events =&gt; events.DataBound("onDataBoundPreservePatientGrid"))                         .Filterable()                         .DataSource(dataSource =&gt; dataSource                             .Ajax()                             .PageSize(10)                                                             .Read(read =&gt; read.Action("RiskScorePatientData", "Reports", new { ACOName = Convert.ToString(ViewBag.CurrAcoName) }))                                     .ServerOperation(false)                         )                           .Resizable(resize =&gt; resize.Columns(true))                          .Reorderable(reorder =&gt; reorder.Columns(true)) ) @*}*@ </code></pre>