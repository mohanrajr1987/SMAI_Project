<p>I have a website in ASP.NET MVC3 C# that makes requests to a web service using <code>HttpWebRequest</code>.  I use the following code to make the request:</p>  <pre><code>HttpWebRequest loginRequest = (HttpWebRequest)WebRequest.Create(url); loginRequest.ContentType = "application/xml"; loginRequest.Credentials = CredentialCache.DefaultNetworkCredentials; loginRequest.Proxy.Credentials = CredentialCache.DefaultNetworkCredentials;  loginRequest.Method = "GET"; loginRequest.CachePolicy = new HttpRequestCachePolicy(HttpRequestCacheLevel.NoCacheNoStore); loginRequest.Headers["Cache-Control"] = "no-cache"; loginRequest.Headers["Pragma"] = "no-cache";  HttpWebResponse loginResponse = (HttpWebResponse)loginRequest.GetResponse(); using (StreamReader sr = new StreamReader(loginResponse.GetResponseStream())) {     string results = sr.ReadToEnd(); } logonToken = loginResponse.Headers["X-SAP-LogonToken"].ToString(); loginResponse.Close(); </code></pre>  <p>On my laptop, this works great.  But when I deploy to my server running IIS 7.5, I got an HTTP 401.  After enabling ASP.NET impersonation that changed to an HTTP 403.  </p>  <p>My <code>web.config</code> contains:</p>  <pre><code>&lt;authentication mode="Windows" /&gt; &lt;identity impersonate="true"/&gt; </code></pre>  <p>If I replace the code to use my hardcoded credentials, it will work on the server:</p>  <pre><code>loginRequest.Credentials = new NetworkCredential("username", "password", "domain"); </code></pre>  <p>So, what could be different about my server environment that is causing <code>DefaultNetworkCredentials</code> to fail?</p>  <p>Thanks!</p>