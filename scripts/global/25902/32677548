<p>I'm using the Gaussian blur algorithm found in Apple's <a href="https://developer.apple.com/library/ios/samplecode/UIImageEffects/Listings/UIImageEffects_main_m.html" rel="nofollow">UIImageEffects</a> example:</p>  <pre><code>CGFloat inputRadius = blurRadius * inputImageScale; if (inputRadius - 2. &lt; __FLT_EPSILON__)     inputRadius = 2.; uint32_t radius = floor((inputRadius * 3. * sqrt(2 * M_PI) / 4 + 0.5) / 2);  radius |= 1; // force radius to be odd so that the three box-blur methodology works.  NSInteger tempBufferSize = vImageBoxConvolve_ARGB8888(inputBuffer, outputBuffer, NULL, 0, 0, radius, radius, NULL, kvImageGetTempBufferSize | kvImageEdgeExtend); void *tempBuffer = malloc(tempBufferSize);  vImageBoxConvolve_ARGB8888(inputBuffer, outputBuffer, tempBuffer, 0, 0, radius, radius, NULL, kvImageEdgeExtend); vImageBoxConvolve_ARGB8888(outputBuffer, inputBuffer, tempBuffer, 0, 0, radius, radius, NULL, kvImageEdgeExtend); vImageBoxConvolve_ARGB8888(inputBuffer, outputBuffer, tempBuffer, 0, 0, radius, radius, NULL, kvImageEdgeExtend);  free(tempBuffer);  vImage_Buffer *temp = inputBuffer; inputBuffer = outputBuffer; outputBuffer = temp; </code></pre>  <p>I'm also working with some fairly large images. Unfortunately, when the radius gets over 280, the blurred image suddenly becomes almost completely blank, regardless of the resolution. What's going on here? Does <code>vImageBoxConvolve_ARGB8888</code> have an undocumented kernel width/height limit? Or does it have to do with the way the box kernel width is computed from the radius?</p>  <hr>  <p><strong>EDIT:</strong></p>  <p>Found a similar question here: <a href="http://stackoverflow.com/questions/20203402/vimageboxconvolve-errors-when-kernel-size-255">vImageBoxConvolve: errors when kernel size > 255</a>. A Gaussian radius of 280 roughly translates to a 260 size kernel, so that part matches up.</p>