<p>I am trying to made my first Push Notification script with using NodeJs and Socket.io I found this tutorial: <a href="http://www.gianlucaguarini.com/blog/push-notification-server-streaming-on-a-mysql-database/" rel="nofollow">http://www.gianlucaguarini.com/blog/push-notification-server-streaming-on-a-mysql-database/</a></p>  <p>It's really helpfull but I stuck for few hours and can not go further.</p>  <p>I created both server.js and client.html files. When I call node server it's working and console is updated when someone enter etc. but while I visit my website on browser I do not see anything from my database.</p>  <p>While I try to run client.html on console (node client.html) I get following error:</p>  <pre> root@Node:~# node client.html /root/client.html:1 (function (exports, require, module, __filename, __dirname) { &lt;html&gt;                                                                                   ^  SyntaxError: Unexpected token &lt;      at exports.runInThisContext (vm.js:53:16)      at Module._compile (module.js:413:25)      at Object.Module._extensions..js (module.js:452:10)      at Module.load (module.js:355:32)      at Function.Module._load (module.js:310:12)      at Function.Module.runMain (module.js:475:10)      at startup (node.js:117:18)      at node.js:951:3 </pre>  <p>client.html:</p>  <pre><code>&lt;html&gt; &lt;head&gt; &lt;title&gt;Test&lt;/title&gt; &lt;/head&gt;     &lt;body&gt;         &lt;time&gt;&lt;/time&gt;         &lt;div id="container"&gt;Loading ...&lt;/div&gt;     &lt;script src="socket.io/socket.io.js"&gt;&lt;/script&gt;     &lt;script src="http://code.jquery.com/jquery-latest.min.js"&gt;&lt;/script&gt;     &lt;script&gt;          // create a new websocket         var socket = io.connect('http://46.101.226.135:8000/');         // on message received we print all the data inside the #container div         socket.on('notification', function (data) {         var usersList = "&lt;dl&gt;";         $.each(data.test_payout,function(index,user){             usersList += "&lt;dt&gt;" + user.nick + "&lt;/dt&gt;\n" +                          "&lt;dd&gt;" + user.payout + "\n" +                             "&lt;figure&gt; &lt;img class='img-polaroid' width='50px' src='" + user.country + "' /&gt;&lt;/figure&gt;"                          "&lt;/dd&gt;";         });         usersList += "&lt;/dl&gt;";         $('#container').html(usersList);          $('time').html('Last Update:' + data.time);       });     &lt;/script&gt;     &lt;/body&gt; &lt;/html&gt; </code></pre>  <p>server.js:</p>  <pre><code>var app                 = require('http').createServer(handler),     io                  = require('socket.io').listen(app),     fs                  = require('fs'),     mysql               = require('mysql'),     connectionsArray    = [],     connection          = mysql.createConnection({         host        : '46.105.14.241',         user        : 'user',         password    : 'password',         database    : 'database',         port        : 2083     }),     POLLING_INTERVAL = 3000,     pollingTimer;  // If there is an error connecting to the database connection.connect(function(err) {   // connected! (unless `err` is set)   console.log( err ); });  // create a new nodejs server ( http://46.101.226.135:8000/ ) app.listen(8000);  // on server ready we can load our client.html page function handler ( req, res ) {     fs.readFile( __dirname + '/client.html' , function ( err, data ) {         if ( err ) {             console.log( err );             res.writeHead(500);             return res.end( 'Error loading client.html' );         }         res.writeHead( 200 );         res.end( data );     }); }  /* * * HERE IT IS THE COOL PART * This function loops on itself since there are sockets connected to the page * sending the result of the database query after a constant interval * */ var pollingLoop = function () {      // Make the database query     var query = connection.query('SELECT * FROM test_payout'),         test_payout = []; // this array will contain the result of our db query       // set up the query listeners     query     .on('error', function(err) {         // Handle error, and 'end' event will be emitted after this as well         console.log( err );         updateSockets( err );      })     .on('result', function( user ) {         // it fills our array looping on each user row inside the db         test_payout.push( user );     })     .on('end',function(){         // loop on itself only if there are sockets still connected         if(connectionsArray.length) {             pollingTimer = setTimeout( pollingLoop, POLLING_INTERVAL );              updateSockets({test_payout:test_payout});         }     });  };  // create a new websocket connection to keep the content updated without any AJAX request io.sockets.on( 'connection', function ( socket ) {      console.log('Number of connections:' + connectionsArray.length);     // start the polling loop only if at least there is one user connected     if (!connectionsArray.length) {         pollingLoop();     }      socket.on('disconnect', function () {         var socketIndex = connectionsArray.indexOf( socket );         console.log('socket = ' + socketIndex + ' disconnected');         if (socketIndex &gt;= 0) {             connectionsArray.splice( socketIndex, 1 );         }     });      console.log( 'A new socket is connected!' );     connectionsArray.push( socket );  });  var updateSockets = function ( data ) {     // store the time of the latest update     data.time = new Date();     // send new data to all the sockets connected     connectionsArray.forEach(function( tmpSocket ){         tmpSocket.volatile.emit( 'notification' , data );     }); }; </code></pre>