<p>I have following models:</p>  <pre><code>Project Zone Stage ZoneStage SubStage ZoneSubStage </code></pre>  <p>I have following views:</p>  <pre><code>ProjectStatusView ProjectDetailView ProjectStageDetailView </code></pre>  <p>and I have following urls:</p>  <pre><code>url(r'^$', views.ProjectStatusView.as_view(), name='projectstatus'), url(r'^project/(?P&lt;pk&gt;\d+)/$', views.ProjectDetailView.as_view(), name='project'), url(r'^project/(?P&lt;pk&gt;\d+)/(?P&lt;stage_pk&gt;\d+)', views.ProjectStageDetailView.as_view(), name='projectdetail'), </code></pre>  <p><strong><em>Description of current situation</em></strong> I display my project with 'projectstatus' url and use template which displays projects e.g. ProjectA, ProjectB</p>  <p>When I click on <strong>ProjectA</strong> I go to 'project' url and go to 'ProjectDetailView' and use template that displays Stages, Zones and ZoneStage_values related to ProjectA. I am able to click on each <strong>Stage</strong> and go to 'projectdetail' url and go to ProjectStageDetailView and display blank template.</p>  <p>here is the point where my problems starts:</p>  <p><strong><em>Description of the problem</em></strong></p>  <p>I do not know what view to create so I can display objects 'SubStages' related to 'Stage' and display Project related to that Stage as well.</p>  <p>for example: if I click on ProjectA I display Stages and other objects related to ProjectA and if I click on any Stage I display all the Substages of that Stage and ProjectA only that is related to that Stage. I do not know what View, what url to create.</p>  <p><strong><em>Code</em></strong></p>  <p><strong>MODELS</strong></p>  <pre><code>class Project(models.Model):     name = models.CharField(max_length=10, unique=True)     class Zone(models.Model):     project = models.ForeignKey(Project, default = 'project0')     zone_name = models.CharField(max_length = 10)     zone_number = models.CharField(max_length = 10)   class Stage(models.Model):     project = models.ForeignKey(Project, default = 'project0')     stage_number = models.CharField(max_length = 10)     stage_name = models.CharField(max_length = 10)     zones = models.ManyToManyField(Zone, through='ZoneStage')      @property     def value(self):         return ZoneSubStage.objects.filter(substage__stage=self).aggregate(Sum('value')).get('value__sum', 0)     class ZoneStage(models.Model):     zone = models.ForeignKey(Zone)     stage = models.ForeignKey(Stage)     value = models.PositiveSmallIntegerField(default=0)   class SubStage(models.Model):     sub_name = models.CharField(max_length=10)     stage = models.ForeignKey(Stage)     zones = models.ManyToManyField(Zone, through='ZoneSubStage')   class ZoneSubStage(models.Model):     zone = models.ForeignKey(Zone)     substage = models.ForeignKey(SubStage)     value = models.PositiveSmallIntegerField(default=0) </code></pre>  <p><strong>VIEWS</strong></p>  <pre><code>class ProjectStatusView(generic.ListView):     template_name = 'autostages/projectstatus.html'     context_object_name = 'projects'     queryset = Project.objects.all()      def get_context_data(self, **kwargs):         context = super(ProjectStatusView, self).get_context_data(**kwargs)         context['stages'] = Stage.objects.all()         context['zones'] = Zone.objects.all()         return context             class ProjectDetailView(generic.DetailView):     template_name = 'autostages/projectdetail.html'     context_object_name = 'projects'     queryset = Project.objects.all()      def get_context_data(self, **kwargs):         context = super(ProjectDetailView, self).get_context_data(**kwargs)         context['zones'] = Zone.objects.all()         context['stages'] = Stage.objects.all()          return context     class ProjectStageDetailView(generic.DetailView):      template_name = 'autostages/projectstagedetail.html'     context_object_name = 'stages'     queryset = Stage.objects.all() </code></pre>  <p><strong>URLS</strong></p>  <pre><code>urlpatterns = [     url(r'^$', views.ProjectStatusView.as_view(), name='projectstatus'),     url(r'^project/(?P&lt;pk&gt;\d+)/$', views.ProjectDetailView.as_view(), name='project'),     url(r'^project/(?P&lt;pk&gt;\d+)/(?P&lt;stage_pk&gt;\d+)', views.ProjectStageDetailView.as_view(), name='projectdetail'),     ] </code></pre>  <p><strong>TEMPLATES</strong></p>  <p>projectstatus.html</p>  <pre><code>{% for project in projects|dictsort:"name" %} &lt;li&gt; &lt;a href="{% url 'projects:project' project.pk %}"&gt;{{ project.name }}&lt;/a&gt; &lt;/li&gt; {% endfor %} </code></pre>  <p>projectdetail.html</p>  <pre><code>&lt;table border="1"&gt;     &lt;tr&gt;         &lt;td style="width:40px" &gt;         &lt;td style="width:100px"&gt;         {% for zone in projects.zone_set.all|dictsort:"zone_name" %}             &lt;td style="width:40px" align="center"&gt;{{ zone.zone_name }}&lt;/td&gt;         {% endfor %}         &lt;/tr&gt;   {% for stage in projects.stage_set.all|dictsort:"stage_number" %}         &lt;tr&gt;  &lt;td style="width:40px"&gt;&lt;a href="{% url 'projects:projectdetail' projects.pk stage.pk %}"&gt;{{ stage.stage_number }} &lt;/a&gt;&lt;/td&gt;              &lt;td style="width:40px"&gt;{{ stage.stage_name }}&lt;/td&gt;                  {% for zone in projects.zone_set.all|dictsort:"zone_name" %}                 &lt;td style="width:40px" align="center"&gt;                        {% for zs in stage.zonestage_set.all %}                       {% if zs.zone_id == zone.id %} {{ stage.value }}                     {% endif %}                      {% endfor %}                     &lt;/td&gt;                  {% endfor %}         &lt;/tr&gt;     {% endfor %}     &lt;/table&gt; </code></pre>  <p>projectstagedetail.html</p>  <pre><code># blank at the moment </code></pre>  <p>EDIT:</p>  <p>I can do what I need but it is not the right way of what I want to do. It is not done via the project.pk in relation to project as per ProjectDetailView. </p>  <p>I have changed the ProjectStageDetailView to following:     </p>  <pre><code>template_name = 'autostages/projectstagedetail.html' queryset = Stage.objects.all() context_object_name = 'stage'  def get_context_data(self, **kwargs):     context = super(ProjectStageDetailView, self).get_context_data(**kwargs)     context['subs'] = SubStage.objects.all()     return context     </code></pre>  <p>I have changed urls to:</p>  <pre><code>r'^(?P&lt;slug&gt;[-\w]+)/$', views.TaskView.as_view(), name='stageobjectdetail' </code></pre>  <p>I have added slug Field to my Stages class. </p>  <p>I have changed projectstagedetail.html to following:</p>  <pre><code>Stage: {{ stage }} &lt;br&gt; Project: {{ stage.project }}  {% for substage in subs %} {% if substage.stage == stage %} {{ substage.sub_name }} {% endif %} {% endfor %} </code></pre>  <p>and it does the job but now as it should be.</p>  <p>I would like to use similar idea to what I have in ProjectDetailView. So, I query Project. How to do this ? </p>