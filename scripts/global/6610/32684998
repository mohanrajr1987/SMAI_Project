<p>I need to handle an infinite HTTP response (with <a href="https://en.wikipedia.org/wiki/Chunked_transfer_encoding" rel="nofollow"><code>Transfer-Encoding: chunked</code></a> header). </p>  <p>This response contains a stream of images, so it must be handled as efficiently as possible.</p>  <p><code>XmlHttpRequest</code> is <strong>not</strong> a solution here since it keeps all the reply in memory. Plus, if reading <code>ArrayBuffer</code>, the response isn't populated before the end of streaming, which means never here.</p>  <p>So, since I am under Firefox OS, the <a href="https://developer.mozilla.org/en-US/docs/Web/API/TCPSocket" rel="nofollow"><code>TCPSocket</code></a> API seems to be my only hope.</p>  <p>I already started to implement a dirty HTTP stack (<a href="https://github.com/eliemichel/fxos-AlphaRemote/blob/master/js/libs/Stream.js" rel="nofollow">here</a> and <a href="https://github.com/eliemichel/fxos-AlphaRemote/blob/master/js/libs/HttpStreamParser.js" rel="nofollow">here</a>), getting inspiration from the IMAP/SMTP implementations but it is still <strong>very</strong> slow.</p>  <p>So, two questions:</p>  <ol> <li><p>Is it worth spending time on this, or did I miss something easier?</p></li> <li><p>If I want to implement it, what are the best practices not to foget about?</p></li> </ol>  <p>PS: I communicate with an external device, so changes on the server side are just not possible here.</p>