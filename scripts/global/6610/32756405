<p>I have an angular application making async requests to an API service. Since a lot of the resources are protected on the API Service, I need to intercept the HTTP requests made to the service. But as far as I can see, the interceptor I have defined only intercept page load requests.</p>  <p>Here is an experimental setup I have come up with to illustrate my problem:</p>  <pre><code>myApp = angular.module('myApp', []);  myApp.config(['$httpProvider', function($httpProvider) {     $httpProvider.interceptors.push(function() {         return {             response: function(response) {                 console.log(response);                 return response;             }         };     }); }); </code></pre>  <p>What I am able to see is that, the interceptor intercepts all calls except the API call as you can see from the attached screen shot showing the console output.</p>  <p>The console output, as you can see from the screen shot below, contains the responses logged when the partial templates have been loaded but not when the GET request was made to the API service.</p>  <p>Why does this happen?</p>  <p><a href="http://i.stack.imgur.com/GU4nC.png" rel="nofollow"><img src="http://i.stack.imgur.com/GU4nC.png" alt="screenshot showing dev tools with the console output"></a></p>  <h1>Update</h1>  <p>I have changed my setup to include all possible combinations of requests and responses now:</p>  <pre><code>$httpProvider.interceptors.push(function() {     return {         request: function(request) {             console.log(request);             return request;         },         requestError: function(request) {             console.log(request);             return config;         },         response: function(response) {             console.log(response);             return response;         },         responseError: function(response) {             console.log(response);             return response;         }     }; }); </code></pre>  <p>Now the interceptor intercepts the message but weirdly shows the status of the  caught responseError as:</p>  <pre><code>status: -1 </code></pre>  <p>although it clearly is a 401.</p>  <h1>Update 2</h1>  <p>As it turns out, even 401 responses require the CORS header to be added to it. The problem came up since the REST API I was calling used Spring-CORS library which does not include CORS headers on 401 and 403 responses.</p>