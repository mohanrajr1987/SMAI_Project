<p>I've made a web app that makes use of PDF.js to display PDF files (opened from local disk using HTML5 FileReader):</p>  <pre><code>var fileReader; fileInput.addEventListener("change", function(e){   var files = e.target.files;   if (!files || files.length === 0) return;   var file = files[0];    // Read the local file into a Uint8Array.   fileReader = new FileReader();   fileReader.onload = function(e){     var uint8Array = new Uint8Array(e.target.result);      // Use uint8Array to open PDF in PDF.js   };   fileReader.readAsArrayBuffer(file); }); </code></pre>  <p>On the request of the user, I want to transfer the loaded file to the server to modify the PDF:</p>  <pre><code>var xhr = new XMLHttpRequest(); xhr.open("POST", "/uploadPdf");  xhr.onreadystatechange = function(){   if (xhr.readyState === 4){     if (xhr.status === 200){       console.log(xhr.responseText);     }     else {       console.log(xhr);     }   } }; xhr.send(fileReader.result); </code></pre>  <p>This works just fine, until I try using a big PDF (65 MB in Chrome) - the browser just freezes for ~30 seconds while uploading the file.</p>  <p>Any suggestions to alternative approaches that will not freeze the browser, nor require the user to select the file again and preferably with a progress function?</p>