<p>I have a regular Bootstrap form with one of the inputs being a file upload:</p>  <pre><code>&lt;div class='input-group'&gt;   &lt;input class='files' id='files' multiple='' name='files' type='file'&gt; &lt;/div&gt; </code></pre>  <p>I am grabbing the files alongs with the other input fields like this:</p>  <pre><code>$(document).off("submit"); $(document).on("submit", ".submittable-form", function(e) {   e.preventDefault();   var file, files, formData, i, xhr;   files    = document.getElementById('files').files;   formData = new FormData;   i        = 0;    while (i &lt; files.length) {     file = files[i];     formData.append('files[]', file, file.name);     i++;   }    formData.append('other-input', $(".other-input").val());   xhr = new XMLHttpRequest();   xhr.open('POST', 'api/submit_form.json', true);   xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'));    xhr.onload = function() {     if (xhr.status === 200) {       $.getScript(document.URL);     } else {       console.log('Error!');     }   };    xhr.send(formData); }); </code></pre>  <p>This does infact submit the form so the files can each be properly picked up by my Ruby on Rails controller action as an <a href="http://api.rubyonrails.org/classes/ActionDispatch/Http/UploadedFile.html" rel="nofollow">ActionDispatch::Http::UploadedFile</a>.</p>  <p>And once I get the <code>xhr.status === 200</code> I can refresh the page with <code>$.getScript(document.URL)</code> so the result of my submitted form can be displayed.</p>  <p>But this feels a littlebit like a hack. The proper way would be for my controller to receive a GET request in js and then respond with a script that can be excecuted in the browser (in Rails this is done by responding with a <code>js.erb</code> file).</p>  <p>How can I acheive this?</p>