<p>I am creating a Serial Port cloner, where it takes the input of a physical port, and clones the output to 2 Virtual ports (A and B).</p>  <p>It also reads the Input of each virtual serial port and then writes its back to the other Virtual Serial Port and the physical serial port.</p>  <p>There is monitor program on Virtual Port A, and an application on Virtual Port B. Application B sent a command through and was pickup by the serial cloner, and was send through ports. The application on the physical responded and sent out its data the other Serial ports.</p>  <p>However I never got now call back from Application B that it got its message received from the physical port. But Port A saw it.</p>  <p>Here is my code:</p>  <pre><code>import serial, threading  portIn = "/dev/pts/2" portOutA = "/dev/pts/4" portOutB = "/dev/pts/7" def ClonePort(serialIn, serialOutA, serialOutB, name):     while True:         if serialIn.inWaiting():             data = serialIn.read(serialIn.inWaiting())             if data:                 serialOutA.write(data)                 serialOutB.write(data)                 print(str(name) + "Number of bytes out: " + str(len(data)))   def main():     serialIn = serial.Serial(port = portIn, baudrate = 19200, timeout = 0.1, parity=serial.PARITY_NONE, bytesize=serial.EIGHTBITS, stopbits=serial.STOPBITS_ONE)     serialOutA = serial.Serial(port = portOutA, baudrate = 19200, timeout = 0.1, parity=serial.PARITY_NONE, bytesize=serial.EIGHTBITS, stopbits=serial.STOPBITS_ONE)     serialOutB = serial.Serial(port = portOutB, baudrate = 19200, timeout = 0.1, parity=serial.PARITY_NONE, bytesize=serial.EIGHTBITS, stopbits=serial.STOPBITS_ONE)       dataIn = threading.Thread(target=ClonePort, args = (serialIn, serialOutA, serialOutB, "In"))     dataOutA = threading.Thread(target=ClonePort, args = (serialOutB, serialIn,  serialOutA, "OutB"))     dataOutB = threading.Thread(target=ClonePort, args = (serialOutA, serialIn,  serialOutB, "OutA"))      dataIn.daemon = True     dataOutB.daemon = True     dataOutA.deamon = True      dataIn.start()     dataOutB.start()     dataOutA.start()       while True:         pass  if __name__ == '__main__':     main() </code></pre>  <p>The code is in python and is running on Debian Linux. </p>