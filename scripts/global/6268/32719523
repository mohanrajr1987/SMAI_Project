<p>I'm currently in an operating systems class. One of our projects involves creating a simple shell. This involves parsing the line and resolving the path. So I need to account for things like ~ . .. / etc.. Right now I'm trying to come up with a code for easily resolving ".." -- the parent directory. </p>  <p>This is my code so far. My goal is to locate an occurrence of .., then save the second half of the string if there is one, and then strip the .. as well as up to the second '/' before it. So for instance we have: /1/2/3/../../4/5/6 My goal is, on the first location of .. to save /../4/5/6 and then save 1/2 and concatenate. Then it should find the next .. and save /4/5/6 to the second half and the first half should save /1</p>  <pre><code>void expandParentDirectory (){  char firstHalf[ 255 ]; char secondHalf[ 255 ];  for( int i = 1; i &lt; tokenSize; i++ ){      // checking token list for appearance of ".."     ////// tests     size_t len = strlen(parsedArguments[i]);     printf("string length is: %lu \n", len);      for(int j = 0; j &lt; strlen(parsedArguments[i]); ++j){         if(parsedArguments[ i ][ j ] == '.' )             if(parsedArguments[ i ][ j + 1 ] == '.' ){                  if(parsedArguments[ i ][ j + 2 ] != '\0' ){                     strcpy(secondHalf, &amp;parsedArguments[ i ] [ j + 2 ]);                 }                 // code to expand PWD and move up a directory                 // if (j == 0) {}                  for (int k = j - 2 ; k &gt; 0 ; k--) {                     if( parsedArguments[ i ][ k ] == '/' ){                         strncpy( firstHalf, parsedArguments[ i ], k );                         //firstHalf[ k ] = '\0';                          free ( parsedArguments[ i ]);                         parsedArguments[ i ] = strdup( strcat( firstHalf, secondHalf                     }                 }                  ));               }     } } } </code></pre>  <p>Any suggestions on getting this working correctly?  Any suggestions on a better approach?  Thanks!</p>