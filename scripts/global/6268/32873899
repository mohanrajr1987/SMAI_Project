<p>I'm having trouble coverting from a URI to a <code>nio.Path</code> in the general case. Given a URI with multiple schemas, I wish to create a single <code>nio.Path</code> instance to reflect this URI.</p>  <pre><code>    //setup     String jarEmbeddedFilePathString = "jar:file:/C:/Program%20Files%20(x86)/OurSoftware/OurJar_x86_1.0.68.220.jar!/com/our_company/javaFXViewCode.fxml";     URI uri = URI.create(jarEmbeddedFilePathString);      //act     Path nioPath = Paths.get(uri);      //assert --any of these are acceptable     assertThat(nioPath).isEqualTo("C:/Program Files (x86)/OurSoftware/OurJar_x86_1.0.68.220.jar/com/our_company/javaFXViewCode.fxml");     //--or assertThat(nioPath).isEqualTo("/com/our_company/javaFXViewCode.fxml");     //--or assertThat(nioPath).isEqualTo("OurJar_x86_1.0.68.220.jar!/com/our_company/javaFXViewCode.fxml")     //or pretty well any other interpretation of jar'd-uri-to-path any reasonable person would have. </code></pre>  <p>This code currently throws <code>FileSystemNotFoundException</code> on the <code>Paths.get()</code> call. </p>  <p>The actual reason for this conversion is to ask the resulting path about things regarding its package location and file name --so in other words, as long as the resulting path object preserves the <code>...com/our_company/javaFXViewCode.fxml</code> portion, then its still very convenient for us to use the NIO Path object.</p>  <p>Most of this information is actually used for debugging, so it would not be impossible for me to retrofit our code to avoid use of Paths in this particular instance and instead use URI's or simply strings, but that would involve a bunch of retooling for methods already conveniently provided by the <code>nio.Path</code> object.</p>  <p>I've started digging into <a href="http://docs.oracle.com/javase/7/docs/technotes/guides/io/fsp/filesystemprovider.html" rel="nofollow">the file system provider API</a> and have been confronted with more complexity than I wish to deal with for such a small thing. Is there a simple way to convert from a class-loader provided URI to a path object corresponding to OS-understandable traversal in the case of the URI pointing to a non-jar file, and not-OS-understandable-but-still-useful traversal in the case where the path would point to a resource inside a jar (or for that matter a zip or tarball)?</p>  <p>Thanks for any help</p>