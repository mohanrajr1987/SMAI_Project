<p>Given a project structure like this:</p>  <pre><code>my_project/     __init__.py     config.json     utils/         __init__.py         config_manager.py     foo/         __init__.py         foo.py         bar/             __init__.py             bar.py         baz/             __init__.py             baz.py             quux/                 __init__.py                 quux.py </code></pre>  <p>I've got a function in <code>config_manager.py</code> that takes an optional path to a config file, but should default to use <code>my_project/config.json</code>. That function should be the only way to interact with the config--call it, get the config, pull out whatever's needed. I'd like to be able to run code using the config from anywhere, e.g., not just from the top-level directory, and have it "just work". </p>  <p>I can hack out something like</p>  <pre><code># config_manager.py def get_config(config_path=None):     if config_path is None:         cdir = os.path.dirname(__file__)         config_path = os.path.join(cdir, '..', 'config.json')         ... </code></pre>  <p>but that's brittle (what if the location of <code>config.json</code> or <code>config_manager.py</code> changes?) and ugly. Any patterns/tips/suggestions/practices to handle this kind of situation?</p>  <p>(I'm sure I'm not the first person to wonder about this, it's just kind of hard to google.)</p>