<p>I need to create a WebService client <strong>WITHOUT</strong> using WebReferences created by visual studio because this client will be used with different instances and providers of webservices obtained from database.</p>  <p>I found on internet an example of doing this , so this is the working code I have now:</p>  <pre><code>Imports System.CodeDom Imports System.CodeDom.Compiler Imports System.Security.Permissions Imports System.Web.Services.Description Imports System.Reflection       Module Module1          Sub Main()             Dim sSessionID As New Object             Dim WebserviceUrl As String = _                 "http://domain.com/SelfUsersMgmt.WSDL"              'specify service name             Dim serviceName As String = "SelfUsersMgmt"              'specify method name to be called             Dim methodName As String = "SOAPValidateUser"              'Arguments passed to the method             Dim arArguments(1) As String             arArguments(0) = "user"             arArguments(1) = "password"              Dim client As System.Net.WebClient = New System.Net.WebClient()                  sSessionID = Module1.CallWebService(WebserviceUrl, serviceName, _                                                   methodName, arArguments, client)             Console.WriteLine("new SessionID: " &amp; sSessionID.ToString)                  sSessionID = Module1.CallWebService(WebserviceUrl, serviceName, _                                                   "SOAPGetAllCampus", Nothing, client)             Console.WriteLine("new SessionID: " &amp; sSessionID.ToString)               Console.Read()           End Sub           Public Function CallWebService(ByVal webServiceAsmxUrl As String, _                ByVal serviceName As String, ByVal methodName As String, _                ByVal args() As Object, ByRef client As System.Net.WebClient) As Object              Try                    '-Connect To the web service                 Dim stream As System.IO.Stream = _                     client.OpenRead(webServiceAsmxUrl)                   'Read the WSDL file describing a service.                 Dim description As ServiceDescription = ServiceDescription.Read(stream)                  'LOAD THE DOM'''''''''''''''''''''''''''                  '--Initialize a service description importer.                 Dim importer As ServiceDescriptionImporter = New ServiceDescriptionImporter()                 importer.ProtocolName = "Soap" ' Use SOAP 1.2.                 importer.AddServiceDescription(description, Nothing, Nothing)                  '--Generate a proxy client.                   importer.Style = ServiceDescriptionImportStyle.Client                 '--Generate properties to represent primitive values.                 importer.CodeGenerationOptions = _                      System.Xml.Serialization.CodeGenerationOptions.GenerateProperties                  'Initialize a Code-DOM tree into which we will import the service.                 Dim nmspace As CodeNamespace = New CodeNamespace()                 Dim unit1 As CodeCompileUnit = New CodeCompileUnit()                 unit1.Namespaces.Add(nmspace)                  'Import the service into the Code-DOM tree.                  'This creates proxy code that uses the service.                  Dim warning As ServiceDescriptionImportWarnings = _                                importer.Import(nmspace, unit1)                  If warning &lt;&gt; 0 Then                      '--Generate the proxy code                     Dim provider1 As CodeDomProvider = _                               CodeDomProvider.CreateProvider("VB")                     '--Compile the assembly proxy with the // appropriate references                     Dim assemblyReferences() As String                     assemblyReferences = New String() {"System.dll", _                         "System.Web.Services.dll", "System.Web.dll", _                         "System.Xml.dll", "System.Data.dll"}                     Dim parms As CompilerParameters = New CompilerParameters(assemblyReferences)                     parms.GenerateInMemory = True '(Thanks for this line nikolas)                     Dim results As CompilerResults = provider1.CompileAssemblyFromDom(parms, unit1)                      '-Check For Errors                     If results.Errors.Count &gt; 0 Then                          Dim oops As CompilerError                         For Each oops In results.Errors                             System.Diagnostics.Debug.WriteLine("========Compiler error============")                             System.Diagnostics.Debug.WriteLine(oops.ErrorText)                         Next                         Throw New System.Exception("Compile Error Occurred calling webservice.")                     End If                      '--Finally, Invoke the web service method                     Dim wsvcClass As Object = results.CompiledAssembly.CreateInstance(serviceName)                     Dim mi As MethodInfo = wsvcClass.GetType().GetMethod(methodName)                      Return mi.Invoke(wsvcClass, args)                  Else                     Return Nothing                 End If              Catch ex As Exception                 Throw ex             End Try         End Function      End Module </code></pre>  <p>As you can see I have <strong>CallWebService</strong> function that dinamically generates the required code and makes the invoke to the webservice specified method.</p>  <p>In Main() I try to call different Methods of the WebService:</p>  <ul> <li>The first one <strong>"SOAPValidateUser"</strong> works correctly.</li> <li>The problem is with <strong>"SOAPGetAllCampus"</strong> because I'm not able to keep session cookie alive  from the first request to second one.</li> </ul>  <p>Is there any approach to reach this?. How can I keep the session alive?</p>