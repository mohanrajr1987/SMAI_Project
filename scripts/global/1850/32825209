<p>I have a custom formatter to support my web calls, but a bug report shed some light on an issue.  I was overriding the <code>WriteToStreamAsync()</code> method as such:</p>  <pre><code>public override Task WriteToStreamAsync(Type type,                                         object value,                                         Stream writeStream,                                         HttpContent content,                                         TransportContext transportContext) {     return Task.Run(() =&gt;         {             if (value == null) return;             using (var sw = new StreamWriter(writeStream))             {                 var serialized = _serializer.Serialize(value);                 sw.Write(serialized);             }         }); } </code></pre>  <p>According to <a href="http://forums.asp.net/t/1775891.aspx?Using+custom+MediaTypeFormatter+causing+test+to+hang" rel="nofollow">this post</a>, the issue was that the <code>using</code> statement was causing the stream to close.  The solution was to remove the <code>using</code> statement and use an explicit <code>Flush()</code> call, but it feels wrong to depend on the GC to dispose of the <code>StreamWriter</code>.</p>  <pre><code>public override Task WriteToStreamAsync(Type type,                                         object value,                                         Stream writeStream,                                         HttpContent content,                                         TransportContext transportContext) {     return Task.Run(() =&gt;         {             if (value == null) return;             var sw = new StreamWriter(writeStream);             var serialized = _serializer.Serialize(value);             sw.Write(serialized);             sw.Flush();         }); } </code></pre>  <ol> <li>Is this a major concern?</li> <li>Is there a better (more "best practice") way of doing this?</li> </ol>