<p>I wonder whether <code>Action&lt;T&gt;</code> prevents an enclosing class instance to be garbage collected when all other references to such class instance are removed during runtime? </p>  <pre><code>public class Class1 {     private Action&lt;string&gt; _callback;      public Class1(Action&lt;string&gt; callback)     {         _callback = callback;     }      public void DoSomething(string msg)     {         _callback(msg);     }  }  public class Class2 {     private List&lt;Class1&gt; _class1s;      public Class2()     {         _class1s = new List&lt;Class1&gt;();     }      public void AddClass1Instance()     {         _class1s.Add(new Class1(OnClass1DoSomething));     }      public void RemoveLastClass1Instance()     {         if(_class1s.Count &gt; 0)         {             _class1s.RemoveAt(_class1s.Count - 1);         }     }      private void OnClass1DoSomething(string msg)     {      }  } </code></pre>  <p>In this simplistic example, when I call <code>RemoveLastClass1Instance()</code> within <code>Class2</code> will the <code>Class1</code> instance be garbage collected or does it remain to hold reference to <code>OnClass1DoSomething()</code> via <code>Action&lt;string&gt;</code>? My goal is to completely remove <code>Class1</code> instances and have them garbage collected. </p>  <p><strong>EDIT: (further to Jon Skeet's comments, I added the following code to better understand</strong></p>  <pre><code>public class Class1 {     public event Action&lt;string&gt; Event;      public Class1()     {      }      public void DoSomething(string msg)     {         var handle = Event;         if (handle != null)         {             handle(msg);         }     }  }  public class Class2 {     private List&lt;Class1&gt; _class1s;      public Class2()     {         _class1s = new List&lt;Class1&gt;();     }      public void AddClass1Instance()     {         var newClass1Instance = new Class1();         newClass1Instance.Event += OnClass1DoSomething;         _class1s.Add(newClass1Instance);     }      public void RemoveLastClass1Instance()     {         if(_class1s.Count &gt; 0)         {             _class1s.RemoveAt(_class1s.Count - 1);         }     }      private void OnClass1DoSomething(string msg)     {      }  } </code></pre>