<p>I have a C# program that calls a C++ dll.  In the C++ dll API (DE.dll), I have the following method signature: </p>  <pre><code>void DE_DoCycle(char* Path, INT32 Id, double SysTime, UINT32 serialNum, TS pTs, UINT* pF, Bool16* isValid); </code></pre>  <p>where Ts is a struct that is defined both in the C++ dll and in my C# program like this:</p>  <pre><code>[StructLayout(Layoutkind.Explicit] public struct Ts {     [FieldOffset(0)]     public UINT16 Status;     [FieldOffset(2)]     public UINT16 R1;     [FieldOffset(4)]     public UINT16 R2;     [FieldOffset(6)]     public UINT32 A;     [FieldOffset(6)]     public UINT32 B; };` </code></pre>  <p>In the C# program I import the dll:</p>  <pre><code>[DllImport("DE.dll", CallingConvention=CallingConvention.Cdecl,EntryPoint="DE_DoCycle")] public static extern void DE_DoCycle(     StringBuilder Path,     Int32 Id,     double SysTime,     UInt32 SerialNum,     ref Ts pts,     ref UInt16 pF,     ref bool isValid); </code></pre>  <p>When I call the function, I call GCHandle.Alloc after I create the objects, in order to prevent from the GC to acess them:</p>  <pre><code>Ts ts = new Ts(); bool isValid = false; var path = new StringBuilder(@"C:\"); UInt16 pF = 0;  var pinnedObjects = new List&lt;GCHandle&gt; {     GCHandle.Alloc(ts),     GCHandle.Alloc(pF),     GCHandle.Alloc(isValid),     GCHandle.Alloc(path), };  for(int i=0; i&lt;10;i++)     DE_DoCycle(path, i, 500.0, 0, ref ts, ref pF, ref isValid);  foreach (var obj in pinnedObjects ) {     obj.Free(); } </code></pre>  <p>From time to time I'm getting an access violation exception when calling this method.</p>  <p>Can anyone help and see some mistakes in my code? I read some and I found the I should use GCHandleType.Pinned argument, to prevent the GC to move the objects (and not don't remove them), but in order to do that I need to declare my struct as Layoutkind.Sequential, which caused my other problems.</p>  <p>Or maybe my problem is not there at all, but in the way I use the pointers (as ref - is that correct?!), should I use Marshaling? and if so, so how? I would love to get some explanations.</p>  <p>Thanks, Yossi.</p>  <p>`</p>