<p><strong>tl;dr:</strong> In Java, which is better, reusing of container object or creating object every time and let garbage collector do the work</p>  <p>I am dealing with huge amount of data in Java where frequently I have following type of code structure:-</p>  <p><strong>Version1:</strong></p>  <pre><code>for(...){//outer loop    HashSet&lt;Integer&gt; test = new HashSet&lt;&gt;(); //Some container    for(...){       //Inner loop working on the above container Data Structure    }    //More operation on the container defined above }//Outer loop ends </code></pre>  <p>Here I allocated new memory every time in a loop and do some operations in inner/outer loop before allocating empty memory again.</p>  <p>Now I am concerned about the memory leaks in Java. I know that Java has a fairly good Garbage Collector but instead of relying on that should I modify my code as follows:-</p>  <p><strong>Version2:</strong></p>  <pre><code>HashSet&lt;Integer&gt; test = null; for(...){//outer loop    if(test == null){       test = new HashSet&lt;&gt;(); //Some container    }else{       test.clear()    }    for(...){       //Inner loop working on the above container Data Structure    }    //More operation on the container defined above }//Outer loop ends </code></pre>  <p>I have three questions:-</p>  <ol> <li>Which will perform better, or there is no definitive answer.</li> <li>Will second version will have more time complexity? In other other words is clear() function O(1) of O(n) in complexity. I didn't anything in javadocs.</li> <li>This pattern is quite common, which version is more recommended one?</li> </ol>