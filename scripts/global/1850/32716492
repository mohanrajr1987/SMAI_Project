<p>Consider this code which uses the System.Threading.Timer class.</p>  <pre><code>mTimer = new System.Threading.Timer(someTimer, null, dueTime.TotalMilliseconds, Timeout.Infinite); </code></pre>  <p>Now I have a list with times  every day the timer function must execute and then it resets the timer to the next time it should execute.</p>  <pre><code>private static void someTimer(object state) {   TimeSpan dueTime = GetDueTime();   mTimer = new System.Threading.Timer(someTimer, null,      (int)dueTime.TotalMilliseconds, System.Threading.Timeout.Infinite); } </code></pre>  <p>but I noticed that the timer function executes multiple times after a while and it seems to have to do with the garbage collector. The old object will still be firing events <strong>until</strong> it is garbage collected.</p>  <p>So a simple GC.Collect(0) fixed it, timer function executes only once. I know the common opinion is that one should never have to use manually call the garbage collector, so my question is if this is a legitimate use of GC.Collect? How else should one fix this?</p>