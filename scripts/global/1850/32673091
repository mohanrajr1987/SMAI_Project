<p>I am currently reading garbage collection realization at sicp and resulting code at the book have no sense for me.</p>  <pre><code>begin-garbage-collection   (assign free (const 0))   (assign scan (const 0))   (assign old (reg root))   (assign relocate-continue (label reassign-root))   (goto (label relocate-old-result-in-new)) reassign-root   (assign root (reg new))   (goto (label gc-loop))   gc-loop   (test (op =) (reg scan) (reg free))   (branch (label gc-flip))   (assign old (op vector-ref) (reg new-cars) (reg scan))   (assign relocate-continue (label update-car))   (goto (label relocate-old-result-in-new))   update-car   (perform (op vector-set!) (reg new-cars) (reg scan) (reg new))   (assign old (op vector-ref) (reg new-cdrs) (reg scan))   (assign relocate-continue (label update-cdr))   (goto (label relocate-old-result-in-new))   update-cdr   (perform (op vector-set!) (reg new-cdrs) (reg scan) (reg new))   (assign scan (op +) (reg scan) (const 1))   (goto (label gc-loop))   relocate-old-result-in-new   (test (op pointer-to-pair?) (reg old))   (branch (label pair))   (assign new (reg old))   (goto (reg relocate-continue)) pair   (assign oldcr (op vector-ref) (reg the-cars) (reg old))   (test (op broken-heart?) (reg oldcr))   (branch (label already-moved))   (assign new (reg free)) ;new location for pair   ;; update free pointer   (assign free (op +) (reg free) (const 1))   ;; Copy the car and cdr to new memory.    (perform (op vector-set!) (reg new-cars) (reg new) (reg oldcr))   (assign oldcr (op vector-ref) (reg the-cdrs) (reg old))   (perform (op vector-set!) (reg new-cdrs) (reg new) (reg oldcr))   ;; Construct the broken heart.   (perform (op vector-set!) (reg the-cars) (reg old) (const broken-heart))   (perform (op vector-set!) (reg the-cdrs) (reg old) (reg new))   (goto (reg relocate-continue)) already-moved   (assign new (op vector-ref) (reg the-cdrs) (reg old))   (goto (reg relocate-continue))   gc-flip   (assign temp (reg the-cdrs))   (assign the-cdrs (reg new-cdrs))   (assign new-cdrs (reg temp))   (assign temp (reg the-cars))   (assign the-cars (reg new-cars))   (assign new-cars (reg temp)) </code></pre>  <p>First of all registers "free", "scan", "old", "new", "root" appears to be just indexes of values stored in "the-cars", "the-cdrs", "new-cars", "new-cdrs" for me. The book says: <em>The state of the garbage-collection process is controlled by maintaining two pointers: <strong>free</strong> and <strong>scan</strong>. These are initialized to point to the beginning of the new memory. The algorithm begins by relocating the pair pointed at by <strong>root</strong> to the beginning of the new memory.</em></p>  <p>So assuming that <strong>root</strong> is not a pair leads us straight to <strong>gc-loop</strong> point without changing <strong>free</strong> and <strong>scan</strong> which ends program. Assuming that <strong>root</strong> is a pair makes <strong>new</strong>=0, <strong>free</strong>=1, moves first element to the new memory and adjust old memory (which is only sane part for me), then it goes to <strong>reassign-root</strong> where <strong>root</strong>=0 (i see root as index of first element at the-car/cdr so root=0 at the very beginning for me), then we get to <strong>gc-loop</strong> (free!=scan) and</p>  <pre><code>  (assign old (op vector-ref) (reg new-cars) (reg scan)) </code></pre>  <p>which is pointless for me because we push value to a indexer. And later this code has no sense:</p>  <pre><code>(assign oldcr (op vector-ref) (reg the-cars) (reg old)) </code></pre>  <p>What do I get wrong?</p>