<p>I am a beginner in haskell and I need to display the value in a tree based on directions specified in a List (Path). I have liste below the Data structures , I want to understand why my recursive feature that i have implemented is wrong</p>  <pre><code>import Data.List   data Step = L | R  deriving(Eq,Show)  type Path = [Step]     data Tree a = Node a (Tree a) (Tree a)              | End         deriving (Eq,Show)        leaf :: a -&gt; Tree a       leaf x = Node x End End       ex :: Tree Int        ex = Node 4 (Node 3 (leaf 2) End)                (Node 7 (Node 5 End (leaf 6))                      (leaf 8))            valueAt :: Path -&gt; Tree a -&gt; Maybe a         valueAt (p:ps) (Node a l r)                                  | p == L = valueAt ps l                                 | p == R = valueAt ps r                                | ps == [] = Just                                           | otherwise = Nothing </code></pre>  <p>// When i execute this it says non exhaustive function at valueAt. So im guessing my recursive idea was implemented wrong. Can anyone explain why .</p>