<p>My task is to translate the algorithm below into a method for my class but it has to be in recursive form.  </p>  <p>x^n = 0 if x == 0.</p>  <p>x^n = 1 if n == 0.</p>  <p>x^n = (x^2)^ n/2 if n is even.</p>  <p>x^n = x * x^ n-1 if n is odd</p>  <p>This is my code so far. </p>  <pre><code>public double XToTheN(double x, int n){     this.counter++;     assert(x==0 &amp;&amp; n==0) : "Indeterminant form, x = "+x+", n = "+n;  assert( n &lt; 0)  : "'n' cannot be negative";  double one = 1.0;  // Complete the recursive algorithm here      if(x == 0.0){          return 0.0;      }else if(n == 0) {         return 1.0;      }else if(n% 2 == 0){         math.pow(x,n)= math.pow(x,2*(n/2));      }else          math.pow(x,n) = x* math.pow(x, n-1);       return;     } </code></pre>  <p>This is what I have for now. I am guessing there is an easier way to deal with the exponents, as I am still new to learning java. Any advice would be great! </p>