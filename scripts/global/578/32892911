<p>My Neo4j database contains relationships that may have a special property:</p>  <p><code>(a) -[{sustains:true}]-&gt; (b)</code></p>  <p>This means that <code>a</code> <em>sustains</em> <code>b</code>: when the last node that sustains <code>b</code> is deleted, <code>b</code> itself should be deleted. I'm trying to write a Cypher statement that deletes a given node PLUS all nodes that now become unsustained as a result. This may set off a chain reaction, and I don't know how to encode this in Cypher. Is Cypher expressive enough?</p>  <p>In any other language, I could come up with a number of ways to implement this. A recursive algorithm for this would be something like:</p>  <pre><code>delete(a) :=     MATCH (a) -[{sustains:true}]-&gt; (b)     REMOVE a     WITH b     MATCH (aa) -[{sustains:true}]-&gt; (b)     WHERE count(aa) = 0     delete(b) </code></pre>  <p>Another way to describe the additional set of nodes to delete would be with a <em>fixed point</em> function:</p>  <pre><code>setOfNodesToDelete(Set) :=     RETURN Set' ⊆ Set such that for all n ∈ Set'            there is no (m) -[{sustains:true}]-&gt; (n) with m ∉ Set </code></pre>  <p>We would start with the set of all <code>z</code> such that <code>(a) -[{sustains:true}*1..]-&gt; (z)</code>, then delete <code>a</code>, run <code>setOfNodesToDelete</code> on the set until it doesn't change anymore, then delete the nodes specified by the set. This requires an unspecified number of iterations.</p>  <p>Any way to accomplish my goal in Cypher?</p>