<p>I am writing a recursive function for merge sort but I am getting the wrong output.</p>  <pre><code>#include &lt;stdio.h&gt;  int arr[] = {6, 5, 4, 3, 2, 1};  void mrg(int arr[], int low, int mid, int high) {     int b[6];     int h, j, i, k;      h = low;     j = high;     i = low;      while (h &lt;= mid &amp;&amp; j &lt;= high) {         if (arr[h] &lt; arr[j]) {             b[i] = arr[h];             h = h + 1;         } else {             b[i] = arr[j];             j = j + 1;         }         i = i + 1;     } //end of while loop;      if (h &gt; mid) // first/left  part of array exausted;     {         int k;         for (k = j; j &lt;= high; k++) {             b[i] = arr[k];             i = i + 1;         }     } else //second /right part of array exausted;     {         for (k = h; j &lt;= mid; k++) {             b[i] = arr[k];             i = i + 1;         }     }      for (k = low; k &lt; high; k++) {         arr[k] = b[k];     } } //  end of merge function;   void mrgsort(int arr[], int low, int high) {     int mid, i;     if (low &lt; high) //checking for small problem;     {         mid = ((low + high) / 2);         mrgsort(arr, low, mid);         mrgsort(arr, mid + 1, high);         mrg(arr, low, mid, high);     } }  int main(int argc, char *argv[]) {      int i = 0, low, high;      low = 0;     high = 6;      while (i &lt; high) {         printf("%d \t", arr[i]);         i++;     }      printf("\n");      mrgsort(arr, low, high);     for (i = low; low &lt; high; low++) {         printf("%d \t", arr[i]);     }     printf("\n");      return 0; }  </code></pre>  <p>output:</p>  <pre><code>-1  -1  -1  -1  -1  -1  </code></pre>