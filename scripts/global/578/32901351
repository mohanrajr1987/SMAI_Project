<p>I'm trying to build a flattened array that preserves metadata from a pretty tricky array coming from a view in my CodeIgniter project. That metadata is things like an identifier, depth, and parent node. </p>  <p>The data is from a query builder JavaScript library that allows a user to generate rules that will be used in business logic. I need to persist this data, and the model I've gone with to represent the tree-like nature of these rules is an adjacency list. </p>  <p>Here's what I have, and it does work for most cases, but it's ugly, it's made of bubble gum and duct tape, and 'most' cases are not 'all' cases. After reading the SPL docs, I suspect a RecursiveIteratorIterator may be more suited to the problem. </p>  <p>Sorry for the long winded post, but I'm pretty sure my approach sucks. Any advice? </p>  <p>Here's the input (e.g., places I would rather not be), sample image showing it in action too:</p>  <p><a href="http://i.stack.imgur.com/hyzWl.jpg" rel="nofollow"><img src="http://i.stack.imgur.com/hyzWl.jpg" alt="Sample of the Query Builder"></a></p>  <pre><code>stdClass Object (     [condition] =&gt; OR     [rules] =&gt; Array         (             [0] =&gt; stdClass Object                 (                     [id] =&gt; Any                     [field] =&gt; Any                     [type] =&gt; string                     [input] =&gt; select                     [operator] =&gt; not equal                     [value] =&gt; Any                 )             [1] =&gt; stdClass Object                 (                     [condition] =&gt; AND                     [rules] =&gt; Array                         (                             [0] =&gt; stdClass Object                                 (                                     [id] =&gt; Place                                     [field] =&gt; Place                                     [type] =&gt; string                                     [input] =&gt; select                                     [operator] =&gt; equal                                     [value] =&gt; France                                 )                             [1] =&gt; stdClass Object                                 (                                     [id] =&gt; Month                                     [field] =&gt; Month                                     [type] =&gt; string                                     [input] =&gt; select                                     [operator] =&gt; equal                                     [value] =&gt; January                                 )                         )                 )             [2] =&gt; stdClass Object                 (                     [condition] =&gt; AND                     [rules] =&gt; Array                         (                             [0] =&gt; stdClass Object                                 (                                     [id] =&gt; Place                                     [field] =&gt; Place                                     [type] =&gt; string                                     [input] =&gt; select                                     [operator] =&gt; equal                                     [value] =&gt; Rio                                 )                             [1] =&gt; stdClass Object                                 (                                     [id] =&gt; Month                                     [field] =&gt; Month                                     [type] =&gt; string                                     [input] =&gt; select                                     [operator] =&gt; equal                                     [value] =&gt;  August                                 )                         )                 )             [3] =&gt; stdClass Object                 (                     [condition] =&gt; AND                     [rules] =&gt; Array                         (                             [0] =&gt; stdClass Object                                 (                                     [id] =&gt; Place                                     [field] =&gt; Place                                     [type] =&gt; string                                     [input] =&gt; select                                     [operator] =&gt; equal                                     [value] =&gt; Liberia                                 )                             [1] =&gt; stdClass Object                                 (                                     [id] =&gt; Month                                     [field] =&gt; Month                                     [type] =&gt; string                                     [input] =&gt; select                                     [operator] =&gt; equal                                     [value] =&gt; July                                 )                             [2] =&gt; stdClass Object                                 (                                     [condition] =&gt; OR                                     [rules] =&gt; Array                                         (                                             [0] =&gt; stdClass Object                                                 (                                                     [id] =&gt; Year                                                     [field] =&gt; Year                                                     [type] =&gt; string                                                     [input] =&gt; select                                                     [operator] =&gt; equal                                                     [value] =&gt; 2014                                                 )                                             [1] =&gt; stdClass Object                                                 (                                                     [id] =&gt; Year                                                     [field] =&gt; Year                                                     [type] =&gt; string                                                     [input] =&gt; select                                                     [operator] =&gt; equal                                                     [value] =&gt; 2015                                                 )                                         )                                 )                         )                 )         ) ) </code></pre>  <p>Here is the desired output for persistence. (See the values at the far right of each entry for the important bits of metadata). </p>  <pre><code>Array (     stdClass Object ( [id] =&gt; Any [field] =&gt; Any [type] =&gt; string [input] =&gt; select [operator] =&gt; not equal [value] =&gt; Any [condition] =&gt; OR [subgroup] =&gt; 0 [parent_subgroup] =&gt; )     stdClass Object ( [id] =&gt; Place [field] =&gt; Place [type] =&gt; string [input] =&gt; select [operator] =&gt; equal [value] =&gt; France) [condition] =&gt; AND [subgroup] =&gt; 1 [parent_subgroup] =&gt; 0 )     stdClass Object ( [id] =&gt; Month [field] =&gt; Month [type] =&gt; string [input] =&gt; select [operator] =&gt; equal [value] =&gt; January [condition] =&gt; AND [subgroup] =&gt; 1 [parent_subgroup] =&gt; 0 )     stdClass Object ( [id] =&gt; Place [field] =&gt; Place [type] =&gt; string [input] =&gt; select [operator] =&gt; equal [value] =&gt; Rio [condition] =&gt; AND [subgroup] =&gt; 2 [parent_subgroup] =&gt; 0 )     stdClass Object ( [id] =&gt; Month [field] =&gt; Month [type] =&gt; string [input] =&gt; select [operator] =&gt; equal [value] =&gt; August[condition] =&gt; AND [subgroup] =&gt; 2 [parent_subgroup] =&gt; 0 )     stdClass Object ( [id] =&gt; Place [field] =&gt; Place [type] =&gt; string [input] =&gt; select [operator] =&gt; equal [value] =&gt; Liberia [condition] =&gt; AND [subgroup] =&gt; 3 [parent_subgroup] =&gt; 0 )     stdClass Object ( [id] =&gt; Month [field] =&gt; Month [type] =&gt; string [input] =&gt; select [operator] =&gt; equal [value] =&gt;  July[condition] =&gt; AND [subgroup] =&gt; 3 [parent_subgroup] =&gt; 0 )     stdClass Object ( [id] =&gt; Year [field] =&gt; Year [type] =&gt; string [input] =&gt; select [operator] =&gt; equal [value] =&gt; 2014 [condition] =&gt; OR [subgroup] =&gt; 4 [parent_subgroup] =&gt; 3 )     stdClass Object ( [id] =&gt; Year [field] =&gt; Year [type] =&gt; string [input] =&gt; select [operator] =&gt; equal [value] =&gt; 2015 [condition] =&gt; OR [subgroup] =&gt; 4 [parent_subgroup] =&gt; 3 )     ) </code></pre>  <p>Note: parses this correctly. Problems would arise if I had changed the order of subgroups 2 and 3, as the subgroup of group 3, the one that has rules (Year = 2014 OR Year = 2015) has a different nesting level and severely messes up my recursion.</p>  <p>Here is my code:</p>  <pre><code>function deserialize_criteria_group($criteria, $subgroup = null) {     $array = array();      if ($subgroup == null) {         $first_run = true;         $subgroup = 0;         $condition = $criteria-&gt;condition;         $criteria = $criteria-&gt;rules;     }      foreach ($criteria as $rule) {         if ($rule-&gt;rules) {             $subgroup++;             $children = $this-&gt;deserialize_criteria_group($rule-&gt;rules, $subgroup);             foreach($children as $child) {                 if ($child-&gt;condition == null) {                     $child-&gt;condition = $rule-&gt;condition;                 }                 if ($child-&gt;parent_subgroup == null) {                     $child-&gt;parent_subgroup = $first_run ? 0 : $subgroup - 1;                 }                     array_push($array, $child);             }         } else {             $rule-&gt;condition = $condition;             $rule-&gt;subgroup = $subgroup;             $rule-&gt;parent_subgroup = null;             array_push($array, $rule);         }      }      if ($first_run) {         //Ensure a root node exists, if not stub one out.          $criteria_group = json_decode(json_encode($array), true);         $root_encountered = $criteria_group[0]['subgroup'] &gt; 0 ? false : true;         if (!$root_encountered) {             $root = array(  'subgroup'          =&gt; 0,                              'parent_subgroup'   =&gt; null,                              'condition'         =&gt; $condition);             array_unshift($criteria_group, $root);              array_unshift($array, $root);         }          //Ensure the ALM is not broken.          $subgroup = 0;         foreach($criteria_group as $c) {             if($c['subgroup'] &gt; $subgroup + 1) {                 $msg = "Bad Order. Halting execution.";                 print $msg;                  log_message('error', $msg);                  log_message('debug', 'expected: ' . $subgroup . ' actual: ' . $c['subgroup']);                 log_message('debug', print_r($criteria_group, true));                 die;             }             $subgroup = $c['subgroup'];         }     }     return $array; } </code></pre>