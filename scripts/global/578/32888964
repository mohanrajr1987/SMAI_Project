<p>Here I use BruteForce function to generate all possible passwords used the array characters listed below. The java console run very slow and finally go to out of memory error. the number of passwords 42 power 5. And my total memory will reach 910M, which is also my max memory for java VM. Any suggestions to solve problem.</p>  <pre><code>public class BruteForce2 {  int [] pw; char [] chars;  Queue&lt;StringBuilder&gt; queue=new Queue&lt;StringBuilder&gt;(); public BruteForce2(){ pw=new int[6];   chars=new char[]{'','0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f','g','h','i','j','k','l','m',    'n','o','p','q','r','s','t','u','v','w','x','y','z','!','@','$','%','&amp;','*'};   //code run fine when with smaller char array  chars2=new char[]{'','0','1','a','b','c','!','@','$'};  Arrays.fill(pw,1,pw.length,1);   } public Queue&lt;StringBuilder&gt; run(){     while(pw[0]==0){     print();     enumerate();     }     if(queue.isEmpty()) {         System.out.println("BruteForce return empty password");      }else{         System.out.println("all possible passwords got");     }     return queue; }  private void enumerate() {     // TODO Auto-generated method stub     for(int i=pw.length-1;i&gt;=0;i--){         if(pw[i]&lt;chars.length-1){             pw[i]++;             return;         }         pw[i]=1;     }   } //store all possible passwords into queue, each is stringbuilder private void print() {     // TODO Auto-generated method stub     StringBuilder sb =new StringBuilder();     for(int k=1;k&lt;pw.length;k++){          sb.append(chars[pw[k]]);        // System.out.print(chars[pw[k]]);         }      queue.enqueue(sb);          System.out.println(sb); }  public static void main(String[] args) {  BruteForce2 bf=new BruteForce2();     bf.run(); }   } </code></pre>