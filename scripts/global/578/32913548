<p>I have a piece of Haskell code which capitalises words appropriately. For example, it will take "rObOT" and change it to "Robot". One function is list comprehension, the other is recursive. Both seem to work exactly the same (according to all values I have passed through them) but despite this quickCheck claims that they are not equivalent and that they are falsifiable after 1 test.</p>  <pre><code>-- List-comprehension version capitalise :: String -&gt; String capitalise xs = toUpper (head xs): [toLower x | x &lt;- tail xs]  -- Recursive version capitalFuncRec :: String -&gt; String capitalFuncRec [] = [] capitalFuncRec (x:xs) = toLower(x) : capitalFuncRec xs  capitaliseRec :: String -&gt; String capitaliseRec [] = [] capitaliseRec (x:xs) = (toUpper x) : capitalFuncRec xs  -- Mutual test --- prop_capitalise :: String -&gt; Bool prop_capitalise xs = capitaliseRec xs == capitalise xs </code></pre>