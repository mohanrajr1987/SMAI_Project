<p>I am looking at a permutation program written <a href="http://stackoverflow.com/questions/4240080/generating-all-permutations-of-a-given-string">here</a>. The code looks like this:</p>  <pre><code>public static void main(String[] args) {     permutation("", "CAT"); }  private static void permutation(String prefix, String str) {     int n = str.length();     if (n == 0) {         System.out.println(prefix);     } else {         for (int i = 0; i &lt; n; i++) {             permutation(prefix + str.charAt(i), str.substring(0, i) + str.substring(i + 1));         }     } } </code></pre>  <p>For the word CAT, I get the following output:<br> CAT <br> CTA <br> ACT <br> ATC <br> TCA <br> TAC <br></p>  <p>I can trace through the steps of the recursion and understand how it works to get CAT and CTA, but I don't see how it keeps going. After n == 0 (which is the base case) everything should stop (which would happen after we get CTA).</p>  <p><strong>Other sources:</strong> <br> I read the explanation <a href="http://www.ericleschinski.com/c/java_permutations_recursion/" rel="nofollow">here</a>, but I'm still having trouble understanding how it keeps going. I feel like I get the concept of recursion. I can use it blindly, but I want to understand HOW it is working here. </p>  <p>There is another version of permutation recursion <a href="http://stackoverflow.com/questions/31811002/string-permutation-how-does-this-backtracking-recursion-work">here</a>, but that is using backtracking, and I understand that one a bit better. It's this tail recursive one I don't understand.</p>  <p><strong>Question:</strong> <br> Can someone please explain how the recursion is working so that we get past CTA in the example above? This isn't homework. I'm just looking into different programs and working through some skillbuilders.</p>  <p>Thanks!</p>