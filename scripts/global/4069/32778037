<p>In our setup we're using camel, jms, spring and hibernate and we have a lot of the same kind of messages. So they needs to be processed by one Processor, wich is created by Spring. But I can see, that the Processor runs only on once.</p>  <p><a href="http://i.stack.imgur.com/qEadZ.png" rel="nofollow"><img src="http://i.stack.imgur.com/qEadZ.png" alt="enter image description here"></a></p>  <p>I inspected the threaddump and the logs too, so I can say now, it's a fact, that the software doesn't scale the right way.</p>  <p>So what I'm doing wrong? Thanks in advance.</p>  <pre><code>public class MyRouteBuilder extends SpringRouteBuilder {  @Autowired ApplicationContext context;  @Override public void configure() throws Exception {     final String endpointUri ="...."     final RouteDefinition rd = this.from(endpointUri);     final ThreadsDefinition td = rd.threads();     td.process(this.context.getBean(MyProcessor.class)); }   @Component public class MyProcessor implements Processor { private final Logger log = LogManager.getLogger(this.getClass());  @Autowired ApplicationContext context;  @PostConstruct public void init() {     // Do something }  @Override public void process(Exchange exchange) throws Exception {     //Process the message and doing some stuff with the database } </code></pre>  <p>}</p>  <pre><code>&lt;camel:camelContext&gt;     &lt;camel:package&gt;tld.mycompany&lt;/camel:package&gt;     &lt;camel:threadPool id="camelsThreadPool" poolSize="8"         rejectedPolicy="CallerRuns" maxPoolSize="32" maxQueueSize="50000"         threadName="CamelsThreadPool"&gt;&lt;/camel:threadPool&gt; &lt;/camel:camelContext&gt; </code></pre>