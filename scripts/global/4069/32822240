<p>Is it possible to connect to a queue deployed in Websphere Liberty from a remote application server?</p>  <p>I use the free version of the product (Liberty 8.5.5.7). I configured connection factory in server.xml:</p>  <pre class="lang-xml prettyprint-override"><code>&lt;messagingEngine&gt;     &lt;queue id="Queue1" receivedAllowed="false" maxMessageDepth="1000"/&gt; &lt;/messagingEngine&gt;  &lt;jmsQueueConnectionFactory jndiName="qcf/ConnectionFactory" connectionManagerRef="ConMgr2"&gt;     &lt;properties.wasJms nonPersistentMapping="ExpressNonPersistent" persistentMapping="ReliablePersistent"/&gt; &lt;/jmsQueueConnectionFactory&gt; &lt;connectionManager id="ConMgr2" maxPoolSize="10"/&gt; </code></pre>  <p>The jms server is listening on localhost:7276.</p>  <p>I wrote a simple client application and include the necessary client jars in the classpath (com.ibm.ws.ejb.thinclient_8.5.0.jar, com.ibm.ws.orb_8.5.0.jar and com.ibm.ws.sib.client.thin.jms_8.5.0.jar):</p>  <pre class="lang-java prettyprint-override"><code>Properties env = new Properties(); env.put(Context.PROVIDER_URL,"iiop://localhost:7276"); env.put(Context.INITIAL_CONTEXT_FACTORY, "com.ibm.websphere.naming.WsnInitialContextFactory"); InitialContext ctx = new InitialContext(env); Object qcf = ctx.lookup("qcf/ConnectionFactory"); </code></pre>  <p>Running the program produces this exception:</p>  <pre><code>javax.naming.ServiceUnavailableException: A communication failure occurred while attempting to obtain an initial context with the provider URL: "iiop://localhost:7276".  Make sure that any bootstrap address information in the URL is correct and that the target name server is running.  A bootstrap address with no port specification defaults to port 2809.  Possible causes other than an incorrect bootstrap address or unavailable name server include the network environment and workstation network configuration. [Root exception is org.omg.CORBA.TRANSIENT: java.net.ConnectException: Connection refused: connect:host=192.168.9.208,port=7276  vmcid: 0x4942f000  minor code: 3586  completed: No] at com.ibm.ws.naming.util.WsnInitCtxFactory.mapInitialReferenceFailure(WsnInitCtxFactory.java:2373) </code></pre>  <p>The original IBM documentation does not discuss clearly, if this feature is disabled or not in Liberty.</p>  <p><strong>Solution:</strong> It is not possible to use remote lookup with JNDI in Liberty. Using this forum topic: <a href="https://www.ibm.com/developerworks/community/forums/html/topic?id=77777777-0000-0000-0000-000014949432" rel="nofollow">link</a>, it is possible to construct the ConnectionFactory programatically.</p>  <pre class="lang-java prettyprint-override"><code>JmsFactoryFactory jff = JmsFactoryFactory.getInstance(); JmsQueueConnectionFactory qcf = jff.createQueueConnectionFactory(); qcf.setBusName("myBus"); qcf.setProviderEndpoints("localhost:7276:BootstrapBasicMessaging"); qcf.setTargetTransportChain("InboundBasicMessaging"); </code></pre>  <p>You need only this jars in the classpath: com.ibm.ws.orb_8.5.0.jar, com.ibm.ws.sib.client.thin.jms_8.5.0.jar. (Found in WebSphere\AppServer\runtimes, where WebSphere is the full WAS installation directory)</p>