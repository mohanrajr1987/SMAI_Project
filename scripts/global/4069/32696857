<p>I am trying to implement a process consisting of several webservice-calls, initiated by a JMS-message read by Spring-integration. Since there are no transactions across these WS-calls, I would like to keep track of how far my process has gone, so that steps that are already carried out are skipped when retrying message processing. </p>  <p>Example steps:</p>  <ol> <li>Retrieve A (get A.id)</li> <li>Create new B for A (using A.id, getting B.id)</li> <li>Create new C for B (using B.id, getting C.id)</li> </ol>  <p>Now, if the first attempt fails in step 3, I already have a created a B, and know it's id. So if I want to retry the message, it will skip the second step, and not leave me with an incomplete B.</p>  <p>So, to the question: Is it possible to decorate a JMS-message read by Spring-integration with additional header properties upon message processing failures? If so, how could I do this?</p>  <p>The way it works at the moment:</p>  <ol> <li>Message is read</li> <li>Some exception is thrown</li> <li>Message processing halts, and ActiveMQ places the message on DLQ</li> </ol>  <p>How I would like it to work:</p>  <ol> <li>Message is read</li> <li>Some exception is thrown</li> <li>The exception is handled, with the result of this handling being an extra header property added to the original message</li> <li>ActiveMQ places the message on DLQ</li> </ol>  <p>One thing that might achieve this is the following:</p>  <ol> <li>Read the message</li> <li>Start processing, wrapped in try-catch</li> <li>On exception, get the extra information from the exception, create a new message based on the original one, add extra info to header and send it directly to the DLQ</li> <li>Swallow the exception so the original message dissappears</li> </ol>  <p>This feels kinda hackish though, hopefully there is a more elegant solution.</p>