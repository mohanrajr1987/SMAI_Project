<p>I was under the impression that java supports unicode characters. I made this test and sadly found that it fails. The question is why? Is it a bug or somewhere documented?</p>  <pre><code>// MATHEMATICAL SANS-SERIF "ùü®" String unicodeNum6 = "\uD835\uDFE8"; int codePoint6 = unicodeNum6.codePointAt(0);     int val6 = Character.getNumericValue(codePoint6); System.out.println("unicodeNum6 = "+ unicodeNum6     + ", codePoint6 = "+ codePoint6+ ", val6 = "+val6); int unicodeNum6Int = Integer.parseInt(unicodeNum6); </code></pre>  <p>This fails with a <code>Exception in thread "main" java.lang.NumberFormatException: For input string: "ùü®"</code></p>  <p>Unexpected I think, since the println works and prints the expected line:</p>  <pre><code>unicodeNum6 = ùü®, codePoint6 = 120808, val6 = 6 </code></pre>  <p>So Java perfectly knows the numerical value of the unicode character but does not use it in parseInt. </p>  <p>Can someone give a good reason why it should fail?</p>