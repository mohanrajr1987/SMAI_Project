<p>Sorry for a possible duplicate post, I saw many similar topics here but none was exactly I needed. Before actually posting a question I want to explicitly state that this question is NOT A HOMEWORK. </p>  <p>So the question is: how to convert a large integer number into binary representation? The integer number is large enough to fit in primitive type (Java long cannot be used). An input might be represented as a string format or as an array of digits. Disclaimer, This is not going to be a solution of production level, so I don't want to use BigInteger class. Instead, I want to implement an algorithm.</p>  <p>So far I ended up with the following approach: Input and output values represented as strings. If the last digit of input is even, I prepend the output with "0", otherwise - with "1". After that, I replace input with input divided by 2. I use another method - <strong>divideByTwo</strong> for an arithmetical division. This process runs in a loop until input becomes "0" or "1". Finally, I prepend input to the output. Here's the code:</p>  <p>Helper Method</p>  <pre><code>/** * @param s input integer value in string representation * @return the input divided by 2 in string representation **/ static String divideByTwo(String s) {     String result = "";     int dividend = 0;     int quotent = 0;     boolean dividendIsZero = false;      while (s.length() &gt; 0)     {         int i = 1;                   dividend = Character.getNumericValue(s.charAt(0));          while (dividend &lt; 2 &amp;&amp; i &lt; s.length())         {             if (dividendIsZero) {result += "0";}             dividend = Integer.parseInt(s.substring(0, ++i));         }          quotent = dividend / 2;         dividend -= quotent * 2;                     dividendIsZero = (dividend == 0);          result += Integer.toString(quotent);         s = s.substring(i);          if (!dividendIsZero &amp;&amp; s.length() != 0)         {             s = Integer.toString(dividend) + s;         }     }     return result;       } </code></pre>  <p>Main Method</p>  <pre><code>/** * @param s the integer in string representation * @return the binary integer in string representation **/ static String integerToBinary(String s) {     if (!s.matches("[0-9]+"))     {         throw new IllegalArgumentException(s + " cannot be converted to integer");     }      String result = "";     while (!s.equals("0") &amp;&amp; !s.equals("1"))     {         int lastDigit = Character.getNumericValue(s.charAt(s.length()-1));         result = lastDigit % 2 + result; //if last digit is even prepend 0, otherwise 1         s = divideByTwo(s);     }     return (s + result).replaceAll("^0*", ""); } </code></pre>  <p>As you can see, the runtime is O(n^2). O(n) for <strong>integerToBinary</strong> method and O(n) for <strong>divideByTwo</strong> that runs inside the loop. Is there a way to achieve a better runtime? Thanks in advance!</p>