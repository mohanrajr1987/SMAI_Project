<p><strong>Background</strong>:</p>  <p>I have an integer property that I want to display in a property grid using a list of values instead of the standard UpDown control. It is defined like this:</p>  <pre><code>private int _MyInt; [Browsable(true), TypeConverter(typeof(MyIntegerConverter))] public int MyInt {     get { return _MyInt; }     set { Set(() =&gt; MyInt, ref _MyInt, value); } } </code></pre>  <p>the <code>MyIntegerConverter</code> is defined like this:</p>  <pre><code>public class MyIntegerConverter : TypeConverter {     public override bool GetStandardValuesSupported(ITypeDescriptorContext context)     {         return true;     }      public override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)     {         return new StandardValuesCollection(new int[] { 1, 2, 3, 4, 5 });     }      //...also overridden methods for CanConvertTo/From as well as ConvertTo/From checking     //String and int (although string is the only type ever passed to these methods) } </code></pre>  <p><strong>Problem</strong>:</p>  <p>The issue is that neither <code>GetStandardValuesSupported</code> nor <code>GetStandardValues</code> are ever called and the property grid just uses an UpDown control to display the integer property. I have also tried implementing <code>Int32Converter</code> as well as <code>StringConverter</code>, but those don't seem to change anything.</p>  <p><strong>Question</strong>:</p>  <p>What am I missing? How can I make the property grid edit my integer property using a drop-down list?</p>  <p><strong>Edit</strong>:</p>  <p>For what it's worth, <code>ConvertTo</code> and <code>ConvertFrom</code> are also never called. Only <code>CanConvertFrom</code> and <code>CanConvertTo</code> are called, always with the <code>string</code> type. Also, returning <code>false</code> for <code>CanConvertTo/From</code> for the <code>string</code> type doesn't seem to make a difference either (just kind of trying things here to see if I get different results).</p>  <p><strong>Another Edit</strong></p>  <p>I realize now the control being used is a Wpf Toolkit PropertyGrid. It is apparently different than the WinForms PropertyGrid.</p>