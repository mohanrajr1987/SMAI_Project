<p>I had a strange error the other day at work. One of my developers was having an issue getting back an identity value from a SQL query using the following function. She queried the parent table and it returned an identity key of <code>32455</code>, then she used that key as the foreign key to return the child table, which kept returning 0. When we manually queried the SQL table, I noticed the Identity columns (primary key) had a value of <code>35335</code>. This lead me to think that the function below could not handle a value greater than <code>32767</code>. To get around this issue, I created a similar function but used "long" instead of "int". From everything I read online it looks like "int" or "int32" should have a maximum value of <code>2,147,483,647</code>. I can't figure out why this issue occurred according to the documentation I read. Here is the calling statement:</p>  <pre><code>Int32 intLeaseID = GetIntegerScalarWithTransaction(objConnection,     objTransaction, strSQLConnectionString, strSQLCommand); </code></pre>  <p>And here is the function:</p>  <pre><code>    public static int GetIntegerScalarWithTransaction(SqlConnection objConnection, SqlTransaction objTransaction, string strSQLConnection, string strSQLCommand)     {         // http://www.java2s.com/Code/VB/Database-ADO.net/SimpleTransactionCommitandRollBackSqlTransactionhascompleteditisnolongerusable.htm         // http://stackoverflow.com/questions/3650894/how-to-get-a-return-value-from-a-stored-procedure-in-vb-net         SqlCommand objCommand = new SqlCommand();         Int32 intRetValue = 0;          try         {             objCommand.Connection = objConnection;             objCommand.CommandText = ProcLibrary.SQLDelimiter(strSQLCommand);             objCommand.Transaction = objTransaction;             intRetValue = objCommand.ExecuteNonQuery();         }         catch (Exception ex)         {             ProcLibrary.WriteLog(ex.ToString(), System.Reflection.Assembly.GetExecutingAssembly().GetName().Name);         }          return intRetValue;     } </code></pre>