<p>I have a string that contains unicode characters (I don't know if I am using the correct nomenclature). I can look character by character, but I can't compare directly to it:</p>  <p><strong>What is the correct way to look for the presence of a wide character?</strong></p>  <p>Here it is MWE, I get an error when trying to compare the character with for example, "α".</p>  <pre><code>#include&lt;iostream&gt;  int main(){      std::string s = " α a ";     std::cout &lt;&lt; "s = " &lt;&lt; s &lt;&lt; std::endl;     for(std::string::iterator c = s.begin(); c != s.end(); ++c){         if(*c == 'a') std::cout &lt;&lt; "letter a" &lt;&lt; std::endl; // ok         if(*c == 'α') std::cout &lt;&lt; "greek letter alpha" &lt;&lt; std::endl; // error: character too large          std::cout &lt;&lt; *c &lt;&lt; std::endl;     }        return 0; } </code></pre>  <p>I am using clang 3.5 in Linux.</p>  <p>What I want to do is to (copy) replace a character by a word. I could use regular expressions but that seems to be an overkill.</p>