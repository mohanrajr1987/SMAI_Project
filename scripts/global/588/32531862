<p>I have a maddeningly simple task (and be patient with me, I'm new to all this): I have a div with a table inside, and the table contains one row and two cells, side-by-side. One cell contains header text, the next cell contains a paragraph of body text. It looks great on large screens, bad on small ones. So when the viewport width goes below 890px, I want to pile the two on top of each other by breaking the cells into two different rows.</p>  <p>First, just let me say that, yes, I have to use the table. I know using tables for layout is clunky, but it's necessary for vertically centering everything inside the div.</p>  <p>So my solution to this problem was to write some JQuery that would take the current contents of the table, fetched using the <code>html()</code> method, compare them to the "initial state" contents of the table (at larger viewport widths), and then replace the contents with a "final state" string that just has <code>&lt;/tr&gt;&lt;tr&gt;</code> inserted after the first cell's <code>&lt;/td&gt;</code> tag.</p>  <p>The variable containing the initial state table contents is exactly the same as the table contents returned by the <code>html()</code> method but with <code>\n\</code> at the end of each line except the last (the extra backslash to tell JS that it's a multiline string). I ran a <code>strcmp</code> on the strings in MATLAB to ensure I didn't make any stupid mistakes, came back true. And when I ask JS to print both strings to the console, they look identical. But when I ask JS if they're <code>==</code>, I get a false.</p>  <p>So I made a second variable for the initial state with <code>\r\n\</code> instead of <code>\n\</code> because I read that some browsers do newlines differently. Checked if the current table contents were equal to either of them. Nope.</p>  <p>What's going on here?</p>