<p>Moving this question to game dev. please mark as closed.</p>  <p>I am quite new to the world of game development and i am trying really hard to wrap my mind around some finer details. </p>  <p><strong><em>This question ended up being quite large so please refer to the summary at the end if you prefer not having to read everything</em></strong></p>  <p>I am trying to create an online sandbox MMO with persistent world. I'll allow the players to terraform and dig the terrain quite like you can see in Space Explorers or like the asteroids in space engineers.</p>  <p>that being said, I've spent quite a lot of hours online reading infos here and there but i never could find unified info on how everything should fit together to give the result i am aiming for. After so many sessions of neurons burning transcendental reflection, I think I came up with a unified way of doing things and would like the insight of more experienced programmers to guide me.</p>  <p>1- first of all, I guess that i need some kind of outline for my world, since it's gonna be a prefabricated world, i can pregenerate a surface and store it server side and only feed part of it to players based on where they are standing in that world. I think the term isosurface works in this case but i'm not quite certain. I would generate a surface with something like perlin noise and store its x,y and z coordinates as a "mesh" server side. </p>  <p>2- then, the client would need to draw the actual terrain from that surface, here comes marching cubes i think. I don't think the terrain "mesh" needs to be the same scale as the world for it to work but i might be wrong. For example, my terrain "mesh", sever side, could be only 10x10x10 but my actual world, client side, could have a resolution of 100x100x100 and compute the shape of each cubes from this 10^3 isosurface.</p>  <p>3- now, not being sure on how this would reflect (since i got lots of examples of marching cubes but none with a visual isosuface dataset to clearly see the whole picture), but if i'm right, i take 2 vertices on my isosurface and compute a vector between them. then, client side, I check all the cubes in the same area of those 2 vertices and check whether they are inside or outside of the terrain and shape them accordingly. Rince and repeat for all pairs of vertices on the isofurvace and this should give my my world right?</p>  <p>gosh, this question became quite the exercise of summarisation! </p>  <p><strong><em>so, in short, to generate a deform able terrain in my sandbox i would need to:</em></strong></p>  <ol> <li>generate a rough map of the surface and store its vertices, as a mesh, server side.</li> <li>feed part of it to the client based on where they are and used the surface "mesh" to generate marching cubes.</li> <li>the process of generating marching cubes is to take 2 vertices from the isosurface and test them on corresponding regions of my client side world to see whether the block vertices are above or below the terrain and thus shape the cubes?</li> </ol>  <p>is this line of approach viable for a large scale multiplayer game? <strong>or rather, do you see any major flaws in my logic?</strong></p>  <p>I have quite a lot to code and would find myself quite displeased if by the end it was all for nothing!</p>