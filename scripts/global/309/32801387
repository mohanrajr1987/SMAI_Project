<p>I am writing a ray tracer and my lights are giving me problems.My Sphere is at 0,0,0(x,y,z) and my camera is at 0,0,30 and my light it 0,0,40.The problem is that everything above the light is in shadow and i cannot figure out why.Everything below the Light's position is fine.</p>  <p><img src="https://photos-2.dropbox.com/t/2/AADWWnrlN4jUDqLH0Q8htzbp3eqaZ2Cm2xrB7nLBucvqWw/12/442986265/png/32x32/1/1443301200/0/2/Lighing%20Bug.png/CJnendMBIAEgAiADIAQgBSAGIAcoBw/bD2Q-b_h71O9fHo5e9KTmeVevnY0CXDCJBZ-U_KCRU0?size=1024x768&amp;size_mode=2" alt="Lighting Bug"></p>  <p>Here are the normals.Normal direction.x*255,direction.y*255,direction.z*255 rgb.</p>  <p><img src="https://photos-3.dropbox.com/t/2/AAARaqzS5uboMB2EqvR_cUEzWTv_rwu2XYHzMsclrGQz5Q/12/442986265/png/32x32/1/1443315600/0/2/LightBugsNormal.png/CJnendMBIAEgAiADIAQgBSAGIAcoBw/R1YHn6gW6eM39rcBn5be_ak7_La52kPvVaIOm7qDBMk?size=1024x768&amp;size_mode=2" alt="Lightng Bug Normals"></p>  <p>Here is the code for my lighting calculations.</p>  <pre><code>public Color Cal_Light2(Color color, Normal normal) {         // Color Maths Stuff         ArrayList&lt;Color&gt; PixelShade = new ArrayList&lt;Color&gt;();         Color Final = new Color();          // Calculate Lighting For Pixel         for (int l = 0; l &lt; LightObjects.size(); l++) {              // Calculate Direction To Each Light(Shadow Ray)             LightObject light = LightObjects.get(l);             Vector3D r_Ori = normal.Origin.Add(normal.Direction.Mul(1E-10));             Vector3D r_Dir = light.Pos.Sub(r_Ori);             r_Dir.normalize();             Ray raytolight = new Ray(r_Ori, r_Dir);             int WAS_HIT = 0;              // Checks If In Light Is Blocked(Shadows)             for (int o = 0; o &lt; GeoObjects.size(); o++) {                 GeometricObject NGO = GeoObjects.get(o);                 double hit = NGO.hit(raytolight);                 if (hit != 0.0) {                     WAS_HIT = 1;                 }             }              // Light Shades Pixel With Given Info             PixelShade.add(light.ShadePixel(WAS_HIT, normal, r_Dir, color, AmbientLight, DiffuseLight));         }          // Color Averaging         for (int s = 0; s &lt; PixelShade.size(); s++) {             Final.Add(PixelShade.get(s));         }         Final.Divide(PixelShade.size());          // Final         return Final;     }     Here is the light shade pixel.  public Maths.Color ShadePixel(int WAS_HIT, Normal normal, Vector3D r_Dir,  Color color, double AmbientLight, double DiffuseLight) {     if(WAS_HIT == 0){         double Dot = normal.Direction.Dot(r_Dir);          Color Color = new Color(color);          double Shade = AmbientLight + DiffuseLight*Dot;          Color.Mul(Shade);          double lightIntesity = Dot*Intensity;          Color lightColor = new Color(color);          lightColor.Mul(lightIntesity);          Color.Add(lightColor);          Color.Divide(2);         return Color;     }else{          Color Color = new Color(color);          double Shade = AmbientLight;          Color.Mul(Shade);          Color.Divide(2);          return Color;     } } </code></pre>  <p>I was running it in debug and it was saying WAS_HIT = 1.So it says it is hitting something but i do not know what.</p>  <p>If you need me to share more code please just ask.</p>