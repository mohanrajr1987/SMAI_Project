<p>i'm having problems with my program witch give me the following error : Warning : "warning: incompatible pointer types passing 'sem_t **' (aka 'int **') to parameter of type 'const char *' [-Wincompatible-pointer-types]" Error : "note: passing argument to parameter here" </p>  <p>I'm trying to use semaphore in a structure. </p>  <pre><code>#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;time.h&gt; #include &lt;math.h&gt; #include &lt;pthread.h&gt; #include &lt;semaphore.h&gt; #include&lt;sys/mman.h&gt; #include&lt;unistd.h&gt; #include&lt;sys/types.h&gt; #include&lt;sys/wait.h&gt;  struct parametres {     double *T;     int N; //taille     sem_t *Semaphore; };   void *MARIT(void *param) {     struct parametres *parametres = (struct parametres*)param;      sem_wait(parametres-&gt;Semaphore);     printf("Debut du calcul de la moyenne arithmetique");     printf("\n");      int somme =0;     double moyenne = 0, *ret;     int i;     for(i = 0; i &lt; parametres-&gt;N; i++)         somme = somme + parametres-&gt;T[i];     moyenne = ((somme+0.0)/(parametres-&gt;N+0.0));     ret = malloc(sizeof ret);     *ret = moyenne;     pthread_exit(ret);      sem_post(parametres-&gt;Semaphore);     printf("Fin du calcul de la moyenne arithmetique");     printf("\n"); }  void *MQUAD(void *param) {     struct parametres *parametres = (struct parametres*)param;      sem_wait(parametres-&gt;Semaphore);     printf("Debut du calcul de la moyenne quadratique");     printf("\n");      double moyenne = 0,*ret;     double total = 0;     int i;      // calcul de la premi√®re partie de la formule ( somme des x carre )     for(i = 0; i &lt; parametres-&gt;N; i++) {         total = total + (parametres-&gt;T[i]*parametres-&gt;T[i]);     }       // calcul de la racine     moyenne=sqrt((1.0/parametres-&gt;N)*(total));     ret = malloc(sizeof ret);     *ret = moyenne;      pthread_exit(ret);      sem_post(parametres-&gt;Semaphore);     printf("Fin du calcul de la moyenne quadratique");     printf("\n");  }   void *SCUB(void *param) {     double total = 0, *ret;     struct parametres *parametres = (struct parametres*)param;     int i;      sem_wait(parametres-&gt;Semaphore);     printf("Debut du calcul de SCUB");     printf("\n");      for(i = 0; i &lt; parametres-&gt;N; i++) {         total = total + (parametres-&gt;T[i]*parametres-&gt;T[i]*parametres-&gt;T[i]);      }     ret = malloc(sizeof ret);     *ret = total;      pthread_exit(ret);      sem_post(parametres-&gt;Semaphore);     printf("Fin du calcul de SCUB");     printf("\n"); }  int main(int argc, char* argv[]) {     float temps;     clock_t t1, t2;     t1 = clock();      struct parametres params;      if(sem_open(params.Semaphore,1,1) == -1) {         perror("sem_init");         exit(1);     }      printf("Salut √† toi !\n");     printf("Donnez la taille du tableau :" );     scanf("%d", &amp;params.N);      //Creation du tableau d'entiers rempli aleatoirement     params.T = malloc( params.N * sizeof(double) );     int i = 0;     int nombre_aleatoire = 0;     for(i=0; i&lt;params.N; i++){         nombre_aleatoire =  (rand() % 1000000) + 1;         params.T[i]=nombre_aleatoire;     }      //Creation des threads     pthread_t arith,quadrat,cubi;      if(pthread_create(&amp;arith, NULL, MARIT, (void*)&amp;params) != 0) {         perror("pthread_create");         exit(1);      }      if(pthread_create(&amp;quadrat, NULL, MQUAD, (void*)&amp;params) != 0) {         perror("pthread_create");         exit(1);     }      if(pthread_create(&amp;cubi, NULL, SCUB, (void*)&amp;params) != 0) {         perror("pthread_create");         exit(1);     }      //Recuperation des resultats     double *marit;     double *mquad;     double *scub;      pthread_join(arith, (void**)&amp;marit);     pthread_join(quadrat, (void**)&amp;mquad);     pthread_join(cubi, (void**)&amp;scub);      printf("Taille du tableau : %d",params.N);     printf("\n");     printf("Moyenne arithemtique : %f",*marit);     printf("\n");     printf("Moyenne quadratique : %f",*mquad);     printf("\n");     printf("Somme des cubes : %f",*scub);     printf("\n");      //Calcul du temps d'execution     t2 = clock();     temps = (float)(t2-t1)/CLOCKS_PER_SEC;     printf("Temps d'execution = %f ms\n", temps);      return 0; } </code></pre>