<p>I don't think this is possible, but I thought I'd ask anyway. Assume, for example, that I have a constructed object that is closely coupled with another [private] variable in its scope:</p>  <pre><code>(function() {      var coupledVariable = "test", id = 0;     function Constructor() { this.id = id++; }     Constructor.prototype.talk = function() {         if (this.id === 0) { console.log(coupledVariable); }         else { console.log("something else"); }     };     var c = new Constructor();     c.talk(); // "test"     new Constructor().talk(); // "something else"     delete c;  })(); </code></pre>  <p>Is there a way that I can also delete the <code>coupledVariable</code> automatically when the first object, <code>c</code>, is deleted, since it is only related to that object. I like keeping it separate from the constructor, since that way it's private (i.e. inaccessible, except via the functions), but this means that it's not garbage collected when the object is deleted. It would be nice if there were a "delete" event listener that ran before object deletion where I could put some code, but I don't think there is.</p>