<p>I am building some extensibility into an bespoke application, basically just plugins that adhere to a specific interface, and have thrown down a simple custom attribute, </p>  <pre><code>[AttributeUsage(AttributeTargets.Assembly)] public class ExtensibilityMetaData : Attribute {     private readonly string _extentName;     private readonly string _version;     private readonly string _DllLocation;     private readonly string _author;     private readonly ExtensibilityType _extensibilityType;      public string ExtensionName { get { return _extentName; } }     public string Version { get { return _version; } }     public string Location { get { return ""; } }     public string Author { get { return _author; } }      public ExtensibilityMetaData(string name, string author, ExtensibilityType type)     {         _extentName = name;         _author = author;         _extensibilityType = type;         _DllLocation = null;         _version = null;     } } </code></pre>  <p>What I'm hoping to achieve, is that when I create an assembly, and assign this custom attribute to it ( wish I could make this attribute mandatory on the Interface ! ), the constructor will simply be along the lines of...</p>  <pre><code>[ExtensibilityMetaData("X509 from Network Share", "Ian O'Friel", ExtensibilityType.X509CertificateModule)]     public class X509CertFromFile : IMyInterface     {         public X509Certificate2 GetX509Certificate()         {             // blah blah         }          public byte[] GetCertificateThumbPrint()         {             // blah blah         }     } </code></pre>  <p>Now the bit that is confusing to explain, the plug-in assembly that this attribute is applied to, will have a selection of other custom attributes, depending on the type of plug-in, so for example, the 'Location' and 'Version' fields, I would like to be able to auto-populate in the constructor, without any other developer having to repeat themselves with information that is already defined in the assembly.</p>  <p>Is there an equivalent to [CallerMemberName] for attributes, so that the constructor can pull down the info about the external assembly, and populate the required fields, such as version, DLL Location, etc, without bogging down developers having to manually do it ?</p>  <p>I'm guessing that the replies are either going to specify that I pass an <code>AssemblyInfo</code> ( from <code>Microsoft.VisualBasic.ApplicationService</code> ) or the path to the assembly etc, however, thinking of the long term goal, we want to be able to supply a simple SDK to customers, that if they want to extend x, y or z, the just need to create a class that implements interface x, and assign the attribute 'whatever' to it, compile it, drop it in the appropriate directory and they are cooking with gas...</p>  <p>I may be missing something, but I can't even seem to step through the custom attributes .ctor(), it never hits any breakpoints ?</p>