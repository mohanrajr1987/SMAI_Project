<p>I am creating this software for a project and what i did was i created a method "Salad" here what happens is user can select maximum number of 2 salads.the names of the salad are coming from the database and i created checkboxes  dynamically.</p>  <p>This works fine and I can get the values and insert it to the database.so then what i wanted was to update the inserted row.i created a method to <code>setselected()</code> the all the check-boxes that user selected before. so as i told above i created this method to select maximum no of 2 check boxes .when i try to insert it works fine..but when i try to update that ActionListener does not work.</p>  <p>I am using <code>setSelected(true)</code> in constructor that  <code>ActionListener</code>  is not triggering. What should I do this in the <code>Salad()</code> ??</p>  <pre><code> public void Salad() {      int count =0 ;//to count rows in result set      String sql="Select name from foodmenue where type='Salad' and menue='"+selecmenue+"'  ";      try {         pst=con.prepareStatement(sql);         rs=pst.executeQuery();         while(rs.next())         {             count++;         }         if(count!=0)         {             rs=pst.executeQuery();             JCheckBox [] a=new JCheckBox[count];             jPanel7.setLayout(new GridLayout());             int x=0;              while(rs.next())            {              a[x]=new JCheckBox(rs.getString("name"));              a[x].setName(rs.getString("name"));                jPanel7.add(a[x]);               a[x].setVisible(true);               a[x].addActionListener(new ActionListener() {         @Override         public void actionPerformed(ActionEvent e) {              if( e.getSource() instanceof JCheckBox){                 String s=((JCheckBox) e.getSource()).getName();                 if(((JCheckBox) e.getSource()).isSelected())                 {                     if(selsalad&lt;2)//selsalad is 0 in the bigining                     {                         selectedsalad[selsalad]=((JCheckBox) e.getSource()).getName();                         selsalad=selsalad+1;                     }                     else                     {                         ((JCheckBox) e.getSource()).setSelected(false);                         showMessageDialog(null, "you cant have more than 2 salads");                     }                 }                 if(!((JCheckBox) e.getSource()).isSelected())                 {                       if(selectedsalad[0].equals(s)||  selectedsalad[1].equals(s)   )                     {                         if(selsalad&lt;2)                         {                         selectedsalad[selsalad]="";                         }                         selsalad=selsalad-1;                         showMessageDialog(null, selsalad);                     }                      }               }             }     });                 x++;             }         }       } catch (Exception e) {         showMessageDialog(null, e);     } }   </code></pre>  <p>this is how i filled the check boxex </p>  <pre><code>    for(Component c : jPanel7.getComponents())    {        if(c instanceof JCheckBox)        {            JCheckBox temp=(JCheckBox) c;            if(temp.getName().equals(s1)){                temp.setSelected(true);             }            if(temp.getName().equals(s2)){                temp.setSelected(true);            }        }    }  </code></pre>  <p><strong>MCVE</strong> : <em>To give a better idea</em></p>  <pre><code>import javax.swing.*; import java.awt.*; import java.awt.event.ActionEvent; import java.awt.event.ActionListener;  import static javax.swing.JOptionPane.showMessageDialog;   public class NewJFrame extends javax.swing.JFrame {       int selsalad=0;//count of the selected checkbox this cant go more than 2     String selectedsalad[]=new String[2];     // Variables declaration - do not modify     private javax.swing.JPanel jPanel1;      public NewJFrame() {         initComponents();         Salad();         showMessageDialog(null, "uncomment promlemmethod to see the probelm after you try this one");         problemmehtod();     }      public static void main(String args[]) {          java.awt.EventQueue.invokeLater(new Runnable() {             public void run() {                 new NewJFrame().setVisible(true);             }         });     }      @SuppressWarnings("unchecked")     // &lt;editor-fold defaultstate="collapsed" desc="Generated Code"&gt;     private void initComponents() {          jPanel1 = new javax.swing.JPanel();          setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);          javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);         jPanel1.setLayout(jPanel1Layout);         jPanel1Layout.setHorizontalGroup(                 jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)                         .addGap(0, 561, Short.MAX_VALUE)         );         jPanel1Layout.setVerticalGroup(                 jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)                         .addGap(0, 470, Short.MAX_VALUE)         );          javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());         getContentPane().setLayout(layout);         layout.setHorizontalGroup(                 layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)                         .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)         );         layout.setVerticalGroup(                 layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)                         .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)         );          pack();     }// &lt;/editor-fold&gt;      public void problemmehtod(){ // this is the problem now i can select any much when i call this i commented this one          for(Component c : jPanel1.getComponents())         {             if(c instanceof JCheckBox)             {                 JCheckBox temp=(JCheckBox) c;                 if(temp.getName().equals("a1")){                     temp.setSelected(true);                  }                 if(temp.getName().equals("a2")){                     temp.setSelected(true);                 }             }         }      }      public void Salad()     {         JCheckBox a[]=new JCheckBox[5];         // int count =0 ;//to count rows in result set           try {              for(int x=0;x&lt;5;x++)             {                  jPanel1.setLayout(new GridLayout());                   a[x]=new JCheckBox("a"+String.valueOf(x));                 a[x].setName("a"+String.valueOf(x));                  jPanel1.add(a[x]);                 a[x].setVisible(true);                 a[x].addActionListener(new ActionListener() {                     @Override                     public void actionPerformed(ActionEvent e) {                          if( e.getSource() instanceof JCheckBox){                              String s=((JCheckBox) e.getSource()).getName();                             if(((JCheckBox) e.getSource()).isSelected())                             {                                 if(selsalad&lt;2)                                 {                                     selectedsalad[selsalad]=((JCheckBox) e.getSource()).getName();                                     selsalad=selsalad+1;                                 }                                 else                                 {                                     ((JCheckBox) e.getSource()).setSelected(false);                                     showMessageDialog(null, "you cant have more than 2 salads");                                 }                             }                             if(!((JCheckBox) e.getSource()).isSelected())                             {                                 if(selectedsalad[0].equals(s)||  selectedsalad[1].equals(s)   )                                 {                                     if(selsalad&lt;2)                                     {                                         selectedsalad[selsalad]="";                                     }                                     selsalad=selsalad-1;                                     //showMessageDialog(null, selsalad);                                 }                             }                         }                     }                 });             }         } catch (Exception e) {             showMessageDialog(null, e);         }     }     // End of variables declaration } </code></pre>