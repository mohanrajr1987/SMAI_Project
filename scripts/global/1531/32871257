<p>Hi guys I have run into a problem. I'm recievin the following errors after moving by class definition to its own header file. If I have the class definition inside of the .cpp file everything complies just fine. However when I move it out into its own file I get the errors.</p>  <pre><code>    24  IntelliSense: no instance of overloaded function "RequestListener::RequestListener" matches the specified type  c:\users\yan\documents\visual studio 2010\projects\casablanca\inputservice\inputservice\requestlistener.cpp 25  18  InputService </code></pre>  <p>as well as the following for all of the handle functions</p>  <pre><code>    26  IntelliSense: declaration is incompatible with "void RequestListener::handle_get(&lt;error-type&gt; request)" (declared at line 10 of "c:\users\yan\documents\visual studio 2010\projects\casablanca\inputservice\inputservice\RequestListener.h")    c:\users\yan\documents\visual studio 2010\projects\casablanca\inputservice\inputservice\requestlistener.cpp 34  23  InputService </code></pre>  <p>Here is <strong>RequestListener.cpp</strong></p>  <pre><code>#include "RequestListener.h"  using namespace web::http::experimental::listener; using namespace web::http; using namespace web;  RequestListener::RequestListener(const http::uri &amp;url) : m_listener(http_listener(url))     {     m_listener.support(methods::GET, std::tr1::bind(&amp;RequestListener::handle_get, this, std::tr1::placeholders::_1));     m_listener.support(methods::POST, std::tr1::bind(&amp;RequestListener::handle_post, this, std::tr1::placeholders::_1));     m_listener.support(methods::PUT, std::tr1::bind(&amp;RequestListener::handle_put, this, std::tr1::placeholders::_1));     m_listener.support(methods::DEL, std::tr1::bind(&amp;RequestListener::handle_delete, this, std::tr1::placeholders::_1)); }   void RequestListener::handle_get(http_request message) {     message.reply(status_codes::OK, U("Hello, World!")); }  void RequestListener::handle_post(http_request message) {     message.reply(status_codes::NotFound); }  void RequestListener::handle_put(http_request message) {     message.reply(status_codes::NotFound); }  void RequestListener::handle_delete(http_request message) {     message.reply(status_codes::NotFound); } </code></pre>  <p><strong>RequestListener.h</strong></p>  <pre><code>#include &lt;cpprest\http_listener.h&gt; class RequestListener  { public:     RequestListener(const http::uri &amp;url);     pplx::task&lt;void&gt; open() { return m_listener.open(); }     pplx::task&lt;void&gt; close() { return m_listener.close(); }  private:     void handle_get(http_request request);     void handle_put(http_request request);     void handle_post(http_request request);     void handle_delete(http_request request);      http_listener m_listener;         }; </code></pre>  <p>I cannot spot the error. It works when its all in one .cpp which I find very strange. Here is the complete .cpp that compiles:</p>  <pre><code>#include &lt;cpprest\http_listener.h&gt;  using namespace web::http::experimental::listener; using namespace web::http; using namespace web;   class RequestListener  { public:     RequestListener(const http::uri&amp; url);       pplx::task&lt;void&gt; open() { return m_listener.open(); }     pplx::task&lt;void&gt; close() { return m_listener.close(); }  private:     void handle_get(http_request request);     void handle_put(http_request request);     void handle_post(http_request request);     void handle_delete(http_request request);      http_listener m_listener;         };  RequestListener::RequestListener(const http::uri &amp;url) : m_listener(http_listener(url))     {     m_listener.support(methods::GET, std::tr1::bind(&amp;RequestListener::handle_get, this, std::tr1::placeholders::_1));     m_listener.support(methods::POST, std::tr1::bind(&amp;RequestListener::handle_post, this, std::tr1::placeholders::_1));     m_listener.support(methods::PUT, std::tr1::bind(&amp;RequestListener::handle_put, this, std::tr1::placeholders::_1));     m_listener.support(methods::DEL, std::tr1::bind(&amp;RequestListener::handle_delete, this, std::tr1::placeholders::_1)); }   void RequestListener::handle_get(http_request message) {     message.reply(status_codes::OK, U("Hello, World!")); }  void RequestListener::handle_post(http_request message) {     message.reply(status_codes::NotFound); }  void RequestListener::handle_put(http_request message) {     message.reply(status_codes::NotFound); }  void RequestListener::handle_delete(http_request message) {     message.reply(status_codes::NotFound); } </code></pre>  <p>Any insight would be greatly appreciated.</p>