<p>In golang, say I have a type that needs some setup done on it before use beyond just setting default values. ex:</p>  <pre><code>type dice struct {     input   string     count   int     sides   int     result  int }  func (d *dice) Roll() {     //initialize random seed     rand.Seed(time.Now().UnixNano())     for i := 0; i &lt; d.count; i++ {         d.result = d.result + rand.Intn(d.sides)+1)     } } </code></pre>  <p>Simple example but say if I wanted to have d.Roll() called automatically when creating an instance of the 'dice' type is there a way to do that? More in line with the issue I'm trying to solve, say I wanted the rand.Seed(time.Now().UnixNano()) bits to be called automatically before I call Roll() is there an idiomatic golang way to do this?</p>  <p>Basically "How do you handle constructor functionality in golang?" is my question. Is there an interface for this I can add?</p>