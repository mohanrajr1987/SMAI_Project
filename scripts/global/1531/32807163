<p>In JavaScript, I can define a constructor function which can be called with or without <code>new</code>:</p>  <pre class="lang-js prettyprint-override"><code>function MyClass(val) {     if (!(this instanceof MyClass)) {         return new MyClass(val);     }      this.val = val; } </code></pre>  <p>I can then construct <code>MyClass</code> objects using either of the following statements:</p>  <pre class="lang-js prettyprint-override"><code>var a = new MyClass(5); var b = MyClass(5); </code></pre>  <p>I've tried to achieve a similar result using the TypeScript class below:</p>  <pre class="lang-js prettyprint-override"><code>class MyClass {     val: number;      constructor(val: number) {         if (!(this instanceof MyClass)) {             return new MyClass(val);         }          this.val = val;     } } </code></pre>  <p>But calling <code>MyClass(5)</code> gives me the error <code>Value of type 'typeof MyClass' is not callable. Did you mean to include 'new'?</code></p>  <p>Is there any way I can make this pattern work in TypeScript?</p>