<p>I have this simple piece of code.</p>  <pre><code>abstract class X {     X() {         read();     }      private void read() {         Object obj = new Object();         readValue(obj);     }     protected abstract void readValue(Object obj); }  class Y extends X {      Object obj = null;     Y() {         super();     }      @Override     protected void readValue(Object obj) {         this.obj = obj;     }      void printer() {         System.out.println("Object = " + obj);     } }  class Runner {     public static void main(String[] args) {         Y y = new Y();         y.printer();     } } </code></pre>  <p>When I run the above code, the object gets printed as null. (I get <strong>"Object = null"</strong>)<br/> Surprisingly, in class Y when I remove null declaration</p>  <pre><code>Object obj; </code></pre>  <p>The actual value of the object is printed. <br/> Something like (<strong>"Object = java.lang.Object@3cd1a2f1"</strong>)<br/> Why is such a behavior observed? What is 'this' pointing to? Any object is initialized by null if we just declare it, then why such an aberrant behavior?</p>