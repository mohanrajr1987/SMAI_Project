<p>In python 3 I found that class attribute can be used as a argument in <code>__init__()</code> function, like below:</p>  <p>file test.py:</p>  <pre><code>class Foo:     var1 = 23333     def __init__(self, var=var1):         self.var = var </code></pre>  <p>run in cmd:</p>  <pre><code>C:\Users\rikka\Desktop&gt;py -3 -i test.py &gt;&gt;&gt; f1=Foo() &gt;&gt;&gt; f1.var 23333 </code></pre>  <p>but by using a dot.expression, when init this class, interpreter will report an error:</p>  <p>file test2.py:</p>  <pre><code>class Foo:     var1 = 23333     def __init__(self, var=Foo.var1):        self.var = var </code></pre>  <p>run in cmd:</p>  <pre><code>C:\Users\rikka\Desktop&gt;py -3 -i test2.py Traceback (most recent call last):   File "test2.py", line 1, in &lt;module&gt;     class Foo:   File "test2.py", line 3, in Foo     def __init__(self, var=Foo.var1): NameError: name 'Foo' is not defined </code></pre>  <p>I just don't know why interpreter cannot find name 'Foo' since Foo is a name in the global frame in the environment. is there something scope related concept about python class that I don't fully understand? </p>