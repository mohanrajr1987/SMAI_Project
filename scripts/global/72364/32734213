<p>Here is a PHPUnit test for the implementation of post DATA, for a ZF2 Controler :</p>  <pre><code>public function testEditActionPost()     {         $this-&gt;routeMatch-&gt;setParam('action', 'editaffaire');         $this-&gt;routeMatch-&gt;setParam('idaffaire', '400');          $data = array(             'foo' =&gt; 'bar',             'bar' =&gt; 'foo'         );          $this-&gt;request-&gt;setMethod('POST')                       -&gt;setPost($data);          $result   = $this-&gt;controller-&gt;dispatch($this-&gt;request);         $response = $this-&gt;controller-&gt;getResponse();          $this-&gt;assertEquals(200, $response-&gt;getStatusCode());     } </code></pre>  <p>But this does not work ... PHPUnit sends me an error : </p>  <blockquote>   <p>1) MaintenanceTest\Controller\SitesControllerTest::testEditActionPost   Argument 1 passed to Zend\Http\Request::setPost() must be an instance   of Zend\St dlib\ParametersInterface, array given</p> </blockquote>  <p>Here is my setUp :</p>  <pre><code>protected function setUp() {     $serviceManager = Bootstrap::getServiceManager();      $this-&gt;controller = new SitesController();      $this-&gt;request    = new Request();     $this-&gt;routeMatch = new RouteMatch(array('controller' =&gt; 'index'));     $this-&gt;event      = new MvcEvent();     $config = $serviceManager-&gt;get('Config');     $routerConfig = isset($config['router']) ? $config['router'] : array();     $router = HttpRouter::factory($routerConfig);     $this-&gt;event-&gt;setRouter($router);     $this-&gt;event-&gt;setRouteMatch($this-&gt;routeMatch);     $this-&gt;controller-&gt;setEvent($this-&gt;event);     $this-&gt;controller-&gt;setServiceLocator($serviceManager); } </code></pre>  <p>How can I dispatch my test controller ? Thanks !</p>  <p><strong>Edit - controler code :</strong></p>  <pre><code>public function editaffaireAction()     {         try {             $iMaiAffaireId = $this-&gt;params('idaffaire');              $oAffaire = $this-&gt;maiAffaireService-&gt;selectByIdOrCreate($iMaiAffaireId);              $maiAffairesForm = new FMaiAffaireForm(                 $oAffaire             );              if ($this-&gt;getRequest()-&gt;isPost()) {                 $maiAffairesForm-&gt;setInputFilter($oAffaire-&gt;getInputFilter());                 $postData = $this-&gt;getRequest()-&gt;getPost();                 $maiAffairesForm-&gt;setData($postData);                 if ($maiAffairesForm-&gt;isValid()) {                     $aData = $maiAffairesForm-&gt;getData();                     $oAffaire-&gt;exchangeArray($aData);                     $iMaiAffaireId = $this-&gt;maiAffaireService-&gt;save($oAffaire);                 }             }              $viewModel = new ViewModel([                 'oAffaire'        =&gt; $oAffaire             ]);             return $viewModel;         } catch (\Exception $e) {             throw new \Exception($e);         }     } </code></pre>