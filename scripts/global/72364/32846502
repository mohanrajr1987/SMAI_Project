<p>So I created a test service set :</p>  <pre><code>class FMaiAffaireServiceTest extends TestCase {     /**      * @var MyService      */     private $myService;     private $typeaffaireTable;      private $mockDriver;     private $mockConnection;     private $mockPlatform;     private $mockStatement;     private $adapter;     private $sql;      public function setUp()     {         $this-&gt;mockDriver = $this-&gt;getMock('Zend\Db\Adapter\Driver\DriverInterface');         $this-&gt;mockConnection = $this-&gt;getMock('Zend\Db\Adapter\Driver\ConnectionInterface');         $this-&gt;mockDriver-&gt;expects($this-&gt;any())-&gt;method('checkEnvironment')-&gt;will($this-&gt;returnValue(true));         $this-&gt;mockDriver-&gt;expects($this-&gt;any())-&gt;method('getConnection')-&gt;will($this-&gt;returnValue($this-&gt;mockConnection));         $this-&gt;mockPlatform = $this-&gt;getMock('Zend\Db\Adapter\Platform\PlatformInterface');         $this-&gt;mockStatement = $this-&gt;getMock('Zend\Db\Adapter\Driver\StatementInterface');         $this-&gt;mockDriver-&gt;expects($this-&gt;any())-&gt;method('createStatement')-&gt;will($this-&gt;returnValue($this-&gt;mockStatement));         $this-&gt;adapter = new Adapter($this-&gt;mockDriver, $this-&gt;mockPlatform);         $this-&gt;sql = new Sql($this-&gt;adapter);          $mockTableGateway = $this-&gt;getMock('Zend\Db\TableGateway\TableGateway', array(), array(), '', false);          $maiAffaireTable = $this-&gt;getMockBuilder('Maintenance\Model\BDD\FMaiAffaireTable')                                 -&gt;setMethods(array())                                 -&gt;setConstructorArgs(array($mockTableGateway, $this-&gt;adapter, $this-&gt;sql))                                 -&gt;getMock();          $stub = $this-&gt;returnValue(new ResultSet());         $maiAffaireTable-&gt;expects($this-&gt;any())-&gt;method('listAffaires')-&gt;will($stub);           $this-&gt;myService = new FMaiAffaireService(             $maiAffaireTable         );     }      public function testListAffaires()     {         $this-&gt;myService-&gt;listAffaires(1,10);     } } </code></pre>  <p>My service looks like this, it is a call to my Zend Db function :</p>  <pre><code>class FMaiAffaireService {     private $maiAffaireTable;       public function __construct(         $maiAffaireTable,     ) {         $this-&gt;maiAffaireTable      = $maiAffaireTable;     }      public function listAffaires($iOffset, $iLimit) {         $aResults = $this-&gt;maiAffaireTable-&gt;listAffaires($iOffset, $iLimit);         return $aResults-&gt;toArray();     } } </code></pre>  <p>And here is the sample of my Zend DB function :</p>  <pre><code>class FMaiAffaireTable {     protected $tableGateway;     protected $adapter;     protected $sql;      public function __construct(         TableGateway $tableGateway,         Adapter $adapter,         Sql $sql     ) {         $this-&gt;tableGateway = $tableGateway;         $this-&gt;adapter      = $adapter;         $this-&gt;sql          = $sql;     }      public function listAffaires($iOffset, $iLimit)     {         try {             $resultSet = $this-&gt;tableGateway-&gt;select(                 function (Select $select) use (                     $iOffset,                     $iLimit                 ) {                     $select-&gt;offset($iOffset);                     $select-&gt;limit($iLimit);                 }             );             return $resultSet;         } catch (\Exception $e) {             throw new \Exception($e);         }     } } </code></pre>  <p>And there is a big problem at the execution of PHPUnit :</p>  <blockquote>   <p>1) <em>Directories</em>\FMaiAffaireServiceTest::testListAffaires reset() expects parameter 1 to be array, null given</p> </blockquote>  <p>I don't call reset() ANYWHERE ! That's the problem ... I think it's a PDO function but ... I'm a bit lost.</p>  <p>Thanks.</p>