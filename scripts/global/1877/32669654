<p>I'm using a custom logging API in my OSGi application. This is because I want to simplify the interface, and also provide additional API that is unique to my application. It looks something like this:</p>  <pre><code>private static final ILogger LOGGER = LoggerWrapper.wrap(LoggerFactory.getLogger(XXX.class)); </code></pre>  <p>And the LoggerWrapper:</p>  <pre><code>public class LoggerWrapper {    public static ILogger wrap(org.slf4j.Logger logger) {       return new MyLogger(logger);    } } </code></pre>  <p>The reason I need to do this "ugly" wrapping around the SLF4J logger API is to not lose functionality that Pax Logging provides. For example, it automatically sets the MDC values "bundle.name", "bundle.version" and "bundle.id".</p>  <p>I would like to be able to use a custom factory, like this:</p>  <pre><code>private static final ILogger LOGGER = MyLoggerFactory.getLogger(XXX.class); </code></pre>  <p>But doing this will alway give me the same MDC keys (the bundle which MyLoggerFactory reside in). Is this possible to do this and still get the correct MDC-keys, somehow?</p>  <p>I could not find any information about this, all I found was custom appenders in Pax Logging, but that's not what I'm after.</p>  <p>Thanks in advance!</p>