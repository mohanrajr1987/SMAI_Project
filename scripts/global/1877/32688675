<p>I’m currently working on a large refactoring of a project with the goal of using the JPA Aries within an OSGi  container for persistence (rather than plain old J2EE stack).</p>  <p>Currently so far so good, I’m following the guidance of the tasklit blueprint (it is managed jpa) example from your website and everything works fine (I’m using felix 5, with the aries jpa 2.1 version and hibernate 4.3+ as orm)</p>  <p>I’m trying to make the solution the most configurable as possible, currently my persistence.xml look like this:</p>    <p></p>  <pre><code>&lt;persistence-unit name="Audit" transaction-type="JTA"&gt;         &lt;jta-data-source&gt;osgi:service/javax.sql.DataSource/(osgi.jndi.service.name=jdbc/audit)&lt;/jta-data-source&gt;      &lt;properties&gt;         &lt;property name="hibernate.dialect" value="org.hibernate.dialect.DerbyDialect"/&gt;         &lt;property name="hibernate.hbm2ddl.auto" value="create-drop"/&gt;     &lt;/properties&gt; &lt;/persistence-unit&gt; </code></pre>  <p></p>  <p>I have externalized the dataSource configuration using blueprint-cm with configAdmin so for the dataSource it is working good.</p>  <p>But now I’m left with these properties in red (like the hibernate.dialect), what do you think would be the most elegant way of externalizing them ?</p>  <p>Note that my entityManager is injected like this:</p>  <pre><code>/**  * EntityManager, injected by blueprint jpa. */ @PersistenceContext(unitName = "Audit") private EntityManager entityManager; </code></pre>  <p>Thanks for your help!</p>