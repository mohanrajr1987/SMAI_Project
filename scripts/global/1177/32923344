<p>My Spring MVC application receives PDF data from a distributed service.  It must then take 2 actions:  (1) display the PDF and (2) change the view to the main application page.  It should open a new browser tab to display the PDF and then change the view in the existing tab.</p>  <p>I've tried setting the Content-Disposition header in the HttpServletResponse object to "attachment; filename=_blank".  The PDF data are converted to a ByteArrayOutputStream and written to the response object's OutputStream, which is flushed and closed.  The controller method code is set up to return a reference to the target view following the PDF data write.  Here's a code fragment from the controller method:</p>  <pre><code>if ((applicationData.getPdf() != null) {   streamFileToResponse(response, applicationData.getPdf(), "_blank", true); }  return "mainView"; </code></pre>  <p>Method streamFileToResponse() handles setting various response headers and writing the PDF data to its output stream.</p>  <p>This results in the PDF being downloaded.  In Chrome, at least, the user can open the download in a separate browser tab.  However, the change of view never happens -- the existing tab shows the same view that was used to launch the request for the PDF.</p>  <p>Is there a way to display the PDF data in a separate tab and cause the existing tab to change the view it's showing?</p>