<p>I have a one page website, <em>example.com</em>. There are two sections: <em>intro</em> at the top of the page, and <em>contact</em> at the bottom of the page. If I want someone to visit the <em>contact</em> section without having to scroll through the <em>intro</em>, I give them this link: <em>example.com/#contact</em>. I'm talking about these visits below.</p>  <p>The browser automatically scrolls down to the <em>contact</em> section, but it ignores the fixed navigation at the top of the page, so the <em>contact</em> section is scrolled behind the navigation so the top of the <em>contact</em> section becomes invisible. This is what I want to correct using JavaScript, by subtracting the height of the fixed navigation from the scroll position. Let's call this function the <code>scrollCorrector</code>. The problem is that I don't know exactly when such an automatic scrolling happens, so the <code>scrollCorrector</code> isn't called everytime it should be.</p>  <p>When should the <code>scrollCorrector</code> be called? When the automatic scrolling happens because of the hash portion. Why not to use <code>onscroll</code>? Because this way I can't differenciate an auto scroll from a user scroll. Why not to use <code>onclick</code> on every <code>&lt;a href="example.com/#contact"&gt;</code>? I'll use it, but what if a user navigates by the browser's back button? Okay, I'll use <code>onpopstate</code> as well. But what if the user comes from <em>example.com/#intro</em> by manually rewriting the URL to <em>example.com/#contact</em>?  Okay, I'll use <code>onhashchange</code> as well. But what if the user is already on <em>example.com/#contact</em>, clicks to the address bar, and presses enter without any modification? None of the above helps then.</p>  <p>What event should I listen to then? If such an event doesn't exist, how could the <code>scrollCorrector</code> know that an automatic scroll has just happened?</p>