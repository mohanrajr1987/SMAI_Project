<p>I need to call a delegate method using reflection, passing the name of the method as a string.</p>  <p>For example, I'll pass <code>My.Controls.TestDelegate.myConverterAction</code> where <code>TestDelegate</code> is the class name and <code>myConverterAction</code> is the delegate:</p>  <pre><code>namespace My.Controls {     public static class TestDelegate     {         public static CustomConversionHandler myConverterAction = new CustomConversionHandler(doSomething);          private static ulong doSomething(object[] values)         {             return 2;         }     } } </code></pre>  <p>I thought to use the <code>GetMethod()</code> method in this way:</p>  <pre><code>int separator = actionDelegate.LastIndexOf('.'); string className = actionDelegate.Substring(0, separator); string methodName = actionDelegate.Substring(separator + 1, actionDelegate.Length - className.Length - 1);  var t = Type.GetType(className); //This works MethodInfo m = t.GetMethod(methodName, BindingFlags.Public | BindingFlags.Static); //This returns null...even with different BindingFlags options </code></pre>  <p>but I obtain a null reference. How can I solve this problem?</p>