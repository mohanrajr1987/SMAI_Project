<p>I have a simple function for special handling while typecasting:</p>  <pre><code>private static void TestRecord&lt;T&gt;(RecordBase record, Action&lt;T&gt; action) where T : RecordBase {     T answer = record as T;     if ((action != null) &amp;&amp; (answer != null)) action(answer); } </code></pre>  <p>It will include more validations based on the RecordBase class but the purpose is simple: Check if the object is of type T and if it is, call the specific action.<br> The problem is in the action itself. If I call this like:</p>  <pre><code>TestRecord&lt;RecordSpecific&gt;(answer, record =&gt; Console.WriteLine("* {0} =&gt; {1}", record.GetType().Name, record.Name)); </code></pre>  <p>The IDE now warns me that record might be null. No, it is not and I can safely ignore that warning, but I like to keep my IDE free from this warning and I don't want to include checks in the action to make double sure it's not null. So, is there any way that I can specify that this action always has a non-null value?</p>