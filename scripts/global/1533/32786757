<p>Hello I have 2 classes :</p>  <p>1st class is a sender that inherits from UIViewController:</p>  <pre><code>class Sender: UIViewController {  // ReceiverDelegate property for communicating with viewmodel // var delegate: ReceiverDelegate?  // loginButtonClicked - IBAction called after login button clicked // @IBAction func loginButtonClicked(sender: AnyObject) {     delegate?.didPressLoginWithCredentials("xx", password: "ss")  }  override func viewDidLoad() {     super.viewDidLoad()     Receiver(vc: self)     // Do any additional setup after loading the view, typically from a nib. } override func didReceiveMemoryWarning() {     super.didReceiveMemoryWarning()     // Dispose of any resources that can be recreated. } </code></pre>  <p>}</p>  <p>2nd Class is just Receiver class like a Model and its not a UIViewController:</p>  <pre><code>protocol ReceiverDelegate { func didPressLoginWithCredentials(username: String, password: String) }   class Receiver: ReceiverDelegate { init(vc: Sender) {     vc.delegate = self }  func didPressLoginWithCredentials(username: String, password: String) {     println("THE MESSAGE") }  } </code></pre>  <p>I wanted to ask if thats a good approach of assigning a delegate. I need to do it inside my Sender somehow, cause Receiver would never get initialised ?</p>  <p>I assigned my delegate in viewDidLoad of Sender.</p>  <p>If there is any better approach please help ! (perhaps i should just do something like var receiver = Receiver() ? and then just call receiver methods without the delegation ?)</p>