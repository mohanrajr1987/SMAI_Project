<p>short version:<br> - take the code, run it, (all you need is two png icons)<br> - resize the window to be a lot larger<br> - dragndrop one of the icon far away (at least 300+ pixels away)<br> - then resize window back to original size<br> - then try to scroll to see the icon you dragndropped away.<br> - you will not be able. because scrollarea is too small.<br> - why?   </p>  <p>long version:<br> i'm having trouble figuring how to update my scrollarea to reflect added or modified contents in my application.<br> i'm displaying icons, i can dragndrop them.<br> if i make the window bigger, dragndrop one icon to the bottom,<br> and then size back my window,<br> the scrollarea does not allow me to scroll to the bottom to see my icon.<br> basicaly, once the app started, scrollarea dimension never change.<br> how can i make the scrollarea, upon dragndrop, to update to new size ?<br> it could be bigger like shown in the screenshot below,<br> or smaller if all my icons are grouped in upper left corner for example..<br> if the content fit in the window, i will not show the slider.</p>  <p>here's a screenshot showing the problem,<br> it's the same window, i just resize it, and dragndrop one icon at the bottom:<br> <br/> <a href="http://i.stack.imgur.com/Fi2FF.png" rel="nofollow"><img src="http://i.stack.imgur.com/Fi2FF.png" alt="scrollarea_not_updated"></a> (scrollarea is not updated, so i cannot scroll down to my icon i've put at the bottom)<br> <br/> <br/> here's the code so far:</p>  <pre><code>#!/usr/bin/python3  from PyQt5.QtGui import * from PyQt5.QtCore import * from PyQt5.QtWidgets import * import sys   class DragWidget(QFrame):      def __init__(self, parent=None):         super(DragWidget, self).__init__(parent)          self.setMinimumSize(200, 200)         self.setAcceptDrops(True)          test_icon1 = QLabel(self)         test_icon1.setPixmap(QPixmap('./images/closeicon.png'))         test_icon1.move(20, 20)         test_icon1.show()         test_icon1.setAttribute(Qt.WA_DeleteOnClose)          test_icon2 = QLabel(self)         test_icon2.setPixmap(QPixmap('./images/openicon.png'))         test_icon2.move(60, 20)         test_icon2.show()         test_icon2.setAttribute(Qt.WA_DeleteOnClose)      def dragEnterEvent(self, event):         if event.mimeData().hasFormat('application/x-dnditemdata'):             if event.source() == self:                 event.setDropAction(Qt.MoveAction)                 event.accept()             else:                 event.acceptProposedAction()         else:             event.ignore()      dragMoveEvent = dragEnterEvent      def dropEvent(self, event):         if event.mimeData().hasFormat('application/x-dnditemdata'):             itemData = event.mimeData().data('application/x-dnditemdata')             dataStream = QDataStream(itemData, QIODevice.ReadOnly)              pixmap = QPixmap()             offset = QPoint()             dataStream &gt;&gt; pixmap &gt;&gt; offset              newIcon = QLabel(self)             newIcon.setPixmap(pixmap)             newIcon.move(event.pos() - offset)             newIcon.show()             newIcon.setAttribute(Qt.WA_DeleteOnClose)              if event.source() == self:                 event.setDropAction(Qt.MoveAction)                 event.accept()             else:                 event.acceptProposedAction()         else:             event.ignore()      def mousePressEvent(self, event):         child = self.childAt(event.pos())         if not child:             return          pixmap = QPixmap(child.pixmap())          itemData = QByteArray()         dataStream = QDataStream(itemData, QIODevice.WriteOnly)         dataStream &lt;&lt; pixmap &lt;&lt; QPoint(event.pos() - child.pos())          mimeData = QMimeData()         mimeData.setData('application/x-dnditemdata', itemData)          drag = QDrag(self)         drag.setMimeData(mimeData)         drag.setPixmap(pixmap)         drag.setHotSpot(event.pos() - child.pos())          tempPixmap = QPixmap(pixmap)         painter = QPainter()         painter.begin(tempPixmap)         painter.fillRect(pixmap.rect(), QColor(127, 127, 127, 127))         painter.end()          child.setPixmap(tempPixmap)         if drag.exec_(Qt.CopyAction | Qt.MoveAction) == Qt.MoveAction:             child.close()         else:             child.show()             child.setPixmap(pixmap)   class Window(QWidget):      def __init__(self, parent=None):         super(Window, self).__init__()          widget = QWidget()         palette = QPalette()         palette.setBrush(QPalette.Background, QBrush(QPixmap("images/pattern.png")))         widget.setPalette(palette)         layout = QVBoxLayout(self)         layout.addWidget(DragWidget())         widget.setLayout(layout)         scroll = QScrollArea()         scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)         scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)         scroll.setWidgetResizable(True)         scroll.setWidget(widget)         vlayout = QVBoxLayout(self)         vlayout.setContentsMargins(0, 0, 0, 0)         vlayout.setSpacing(0)         vlayout.addWidget(scroll)         self.setLayout(vlayout)         self.show()  if __name__ == '__main__':     app = QApplication(sys.argv)     window = Window('./')     sys.exit(app.exec_()) </code></pre>