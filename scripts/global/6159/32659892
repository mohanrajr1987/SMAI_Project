<pre><code>from PyQt4 import QtGui import threading import sys  class Window(QtGui.QWidget):     def __init__(self):         super().__init__()         self.button = QtGui.QPushButton('click', self)         self.button.clicked.connect(self.mythread)      def mythread(self):         self.t=threading.Thread(target=self.action)         self.t.start()      def action(self):         try:             raise FileExistsError          except FileExistsError:             self.errorwindow = QtGui.QWidget()             self.errorwindow.setGeometry(200, 200, 200, 100)             self.errortext = QtGui.QLabel('error', self.errorwindow)             self.errorwindow.show()             print('1')  def main():     program = QtGui.QApplication(sys.argv)     a=Window()     a.setGeometry(300, 300, 200, 100)     a.show()     sys.exit(program.exec_())  if __name__=='__main__':     main() </code></pre>  <p>As it can easily be seen here, I am trying to make an "oops! an error occured" kind of window that would be created on an exception by a thread. This is an example code showing how I'm trying to do it and when you run this, you'll see that a window shows for a brief moment and then disappears. With my actual program, it even causes crashes. That <code>print('1')</code> was to see if the interpreter even gets to that line, and yeah it does, it prints '1'. So it's not that it doesn't run the exception block at all, it does but it just won't create a qwidget. What am I doing wrong?</p>