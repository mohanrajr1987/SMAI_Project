<p>I have a very complex loop, that depends on things like network and a peripheral, and I'd like to make it asynchronous.</p>  <pre><code>def Foo(QObject):     @pyqtSlot(int)     def complexloop(self):         do_something_complex      @pyqtSlot(int, result=int)     def something_simple(self):         return "something easy" </code></pre>  <p>This class is added to a webkit window, in PyQt5, like this:</p>  <pre><code>class Window(QWidget): def __init__(self):     super(Window, self).__init__()     self.view = QWebView(self)      self.foo = Foo(self)     self.view.page().mainFrame().addToJavaScriptWindowObject("foo", self.foo) </code></pre>  <p>This way, in JavaScript, I can call <code>foo.complexloop()</code> to start the process.</p>  <p>The problem is that when I do that, the whole browser freezes until the loop is completed. I need a way to run this loop in background.</p>  <p>I've tried to define <code>complexloop</code> with <code>async def</code>, but I can't find any documentation on how to call it from JavaScript then.</p>  <p>I tried to wrap the call into something like:</p>  <pre><code>def call_loop(self):     try:         self.complex_loop.send(None)     except StopIteration:         pass </code></pre>  <p>But that doesn't help, since the call to <code>foo.call_loop()</code> will block the window.</p>