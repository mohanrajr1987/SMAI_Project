<p>I have some nested loops in Less. It should create css rules for padding with 3 sizes and 4 direction. Code sample:</p>  <pre><code>@sizes: normal, small, large; @size-normal: 1em; @size-small: 0.8 * @size-normal; @size-large: 1.2 * @size-normal;   .l-padding {    @directions: top, left, right, bottom;     .s(@i: length(@sizes)) when (@i &gt; 0) {      .s((@i - 1));      .d(@j: length(@directions)) when (@j &gt; 0) {        .d((@j - 1));        @dir: extract(@directions, @j);        @s: extract(@sizes, @i);        @size: "size-@{s}";        &amp;_@{dir}_@{s} {          .l-padding-mixin(@dir, @@size);        }     }     .d();   }   .s(); } </code></pre>  <p>I don't know where is the problem but it compile to many duplacates. However each independet loop do their job.</p>  <pre><code>.l-padding_top_normal {   padding-top: 1em; } .l-padding_left_normal {   padding-left: 1em; } .l-padding_right_normal {   padding-right: 1em; } .l-padding_bottom_normal {   padding-bottom: 1em; } .l-padding_top_normal {   padding-top: 1em; } .l-padding_left_normal {   padding-left: 1em; } .l-padding_right_normal {   padding-right: 1em; } .l-padding_bottom_normal {   padding-bottom: 1em; } .l-padding_top_normal {   padding-top: 1em; }  ...  .l-padding_top_normal {   padding-top: 1em; } .l-padding_top_small {   padding-top: 0.8em; } .l-padding_left_small {   padding-left: 0.8em; } .l-padding_right_small {   padding-right: 0.8em; } .l-padding_bottom_small {   padding-bottom: 0.8em; } .l-padding_top_normal {   padding-top: 1em; } .l-padding_left_normal {   padding-left: 1em; } .l-padding_right_normal {   padding-right: 1em; } .l-padding_bottom_normal {   padding-bottom: 1em; }  ... </code></pre>  <p>To many duplicates. Can any one help with this?</p>  <p><strong>UPD</strong> thanks to @Harry find solution:</p>  <pre><code>.l-padding-mixin(@direction, @size: 1em) {   padding-@{direction}: @size; }  @sizes: normal, small, large;  @size-normal: 1em; @size-small: 0.8 * @size-normal; @size-large: 1.2 * @size-normal;  //==== layouts ==== .l-padding {   @directions: top, left, right, bottom;   @i: length(@sizes);   @j: length(@directions);    .d(@j) when (@j &gt; 0) {     .d((@j - 1));     @dir: extract(@directions, @j);     @s: extract(@sizes, @i);     @size: "size-@{s}";     &amp;_@{dir}_@{s} {       .l-padding-mixin(@dir, @@size);     }   }    .-(@i) when (@i &gt; 0) {     .-((@i - 1));     .d(@j);   } .-(@i); } </code></pre>