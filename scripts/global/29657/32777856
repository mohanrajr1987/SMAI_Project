<p>Given this example: </p>  <pre><code>&lt;div class=component&gt;      &lt;div class=top&gt;&lt;/div&gt;     &lt;div class=bottom&gt;         &lt;div class=bar&gt;               a bar is inserted here         &lt;/div&gt;     &lt;/div&gt;  &lt;/div&gt; </code></pre>  <p>Less:</p>  <pre><code>.component {     .bar {         position:fixed;         left:0;         right:0;          // ------ If bar is included in parent bottom, then we want to add bottom:0 ----          &amp;.bottom {                 bottom:0;                  // This won't work, because it will result in:                  .component.bar.bottom {                         bottom: 0                 }         }          // What we actually desire to have is:          .component &gt; .bottom &gt; .bar {                 bottom:0;         }          // One way to achive this would be to allow the parent selector to walk up          // The &amp;(1) would be all of &amp; minus the last one.         // The $(0, 1) would be all of &amp; minus all of &amp;(1)         &amp;(1) &gt; .bottom &gt; &amp;(0, 1) {                 bottom: 0;         }          // This should result in:          .component &gt; .bottom &gt; .bar {          }     }   } </code></pre>  <p>Please read the inline comments in .bar() to understand the question. </p>  <p>A) Is there a way to do this in less already?  B) Is this not a good feature to have?</p>  <p>Also, one should be able to cut off not only the end of the parent selector, but also the beggining. There are cases where elements are wrapped and the parent selector just don't work in such cases. </p>