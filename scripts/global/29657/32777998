<p>I am using grunt-contrib-watch to compile JS/CSS files and livereload. The issue here is that i want to compile ONLY JS when I save a JS file, and ONLY CSS when I save a CSS file. After both of these I livereload. I tried this configuration :</p>  <pre><code>watch: {   JS: {     options: {       livereload: true,     },     files: ['client/js/**', 'client/lib/**'],     tasks: ['rebuild:dev']   },   CSS:      options: {       livereload: true,     },     files: ['client/style/*', 'client/style/lib/*'],     tasks: ['buildCSS']   } } </code></pre>  <p>But I can't have those two watch running at the same time. So I tried to put the livereload taks in a separate watch</p>  <pre><code>watch: {   JS: {     files: ['client/js/**', 'client/lib/**'],     tasks: ['compile:JS']   },   CSS:      files: ['client/style/*', 'client/style/lib/*'],     tasks: ['compile:CSS']   },   live: {     options: {       livereload: true,     },     files:['client/**']   }, } </code></pre>  <p>Then I call it using concurrent: {</p>  <pre><code> serverAndClient: {         tasks: ['nodemon', 'watch:JS', 'watch:CSS', 'watch:live'],         options: {           logConcurrentOutput: true         }       },     } </code></pre>  <p>It kind of works, but it livereloads twice : once before the JS/CSS is done compiling, and one afterwards. What is the correct way to do this ? Of course the livereload must occur after the JS or CSS compiling tasks are done</p>