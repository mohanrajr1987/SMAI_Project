<p>When the backup is happening then it should display a progress bar. How to do that?</p>  <pre><code>    //View Model Constructor      public BackUpViewModel()     {          BackUpContext servObj = new BackUpContext();         _ServerNameList = servObj.GetServer("ServerName");         _DBNameList = servObj.GetDBNames();          serverCommand = new RelayCommand(fetchServer);         backUpCommand = new RelayCommand(Backup);         restoreCommand = new RelayCommand(Restore);         OpenCommand = new RelayCommand(ExecuteOpenFileDialog);         this.instigateWorkCommand = new RelayCommand(o =&gt; this.worker.RunWorkerAsync(), o =&gt; !this.worker.IsBusy);          if (worker == null)         {             this.worker = new BackgroundWorker();             this.worker.DoWork += new DoWorkEventHandler(DoWork);             this.worker.ProgressChanged += this.ProgressChanged;             this.worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(RunWorkerCompleted);             worker.WorkerReportsProgress = true;             worker.WorkerSupportsCancellation = true;         }          if (worker.IsBusy != true)         {             worker.RunWorkerAsync();         }     }      public void Backup(object backup)     {         BackUpContext bckObj = new BackUpContext();         DBEntity bck = new DBEntity();         bck.ServerName = serverSelected;         bck.DataBaseName = backup.ToString();         bckObj.GetBackup(bck.DataBaseName);     }      private  BackgroundWorker worker;     private ICommand instigateWorkCommand;     private int currentProgress;      public ICommand InstigateWorkCommand     {          get { return this.instigateWorkCommand; }      }      public int CurrentProgress     {         get { return this.currentProgress; }         private set         {             if (this.currentProgress != value)             {                 this.currentProgress = value;                 RaisePropertyChanged("CurrentProgress");                // this.OnPropertyChanged(() =&gt; this.CurrentProgress);             }         }     }      private void DoWork(object sender, DoWorkEventArgs e)     {         // do time-consuming work here, calling ReportProgress as and when you can         // Backup(sender);          for (int i = 0; i &lt; 101; i++)         {             (sender as BackgroundWorker).ReportProgress(i);              Thread.Sleep(100);         }      }      private void ProgressChanged(object sender, ProgressChangedEventArgs e)     {         this.CurrentProgress = e.ProgressPercentage;     }      private void RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)     {         this.CurrentProgress = 100;        // System.Windows.MessageBox.Show("Back Up Completed", "Completed", MessageBoxButton.OK, MessageBoxImage.Information);     } } </code></pre>