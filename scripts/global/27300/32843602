<p>I am migrating my application from <code>log4j</code> to <code>log4j2</code>. Please find below the below lines of code in <code>log4j.xml</code> and <code>ClientModeFilter</code> is a customized filter containing application customization and it takes a map of strings.</p>  <pre><code>&lt;filter class="com.it.test.logging.ClientModeFilter"&gt;   &lt;param name="ClientMode" value="Test" /&gt;   &lt;param name="Deny" value="true" /&gt; &lt;/filter&gt; </code></pre>  <p>So, in <code>log4j2</code>, I saw the equivalent as mentioned below but application customization will be lost and hence, I cannot use the below. using how can I implement the same ?</p>  <pre><code>&lt;ThreadContextMapFilter onMatch="DENY" onMismatch="NEUTRAL" operator="or"&gt;      &lt;KeyValuePair key="ClientMode" value="Test" /&gt;     &lt;KeyValuePair key="Deny" value="true" /&gt; ... &lt;/ThreadContextMapFilter&gt; </code></pre>  <p>I have modified the custom filter as per <code>log4j2</code> as mentioned below.</p>  <pre><code>@Plugin(name = "ClientModeFilter", category = "Core", elementType = "filter", printObject = true) public final class ClientModeFilter extends AbstractFilter {  private static final long serialVersionUID = 1L;  private static Map&lt;String,String&gt; _threadMap = Collections.synchronizedMap(new HashMap&lt;String,String&gt;());  private String _clientMode; private boolean _deny;    private ClientModeFilter(final Result onMatch, final Result onMismatch) {     super(onMatch, onMismatch);     }  @Override     public Result filter(LogEvent event) {     if (ClientModeConfig.cmlEnabled()) {          String threadName = event.getThreadName();         if (_clientMode.equalsIgnoreCase(_threadMap.get(threadName))) {             return _deny ? onMatch : onMismatch;         }      }     return Result.NEUTRAL; }  public String getClientMode() {     return _clientMode; }  public void setClientMode(String mode) {     _clientMode = mode; }  public boolean getDeny() {     return _deny; }  public void setDeny(boolean deny) {     _deny = deny; }  ... ... @PluginFactory     public static ClientModeFilter createFilter(@PluginAttribute(value = "onMatch", defaultString = "DENY") Result match,             @PluginAttribute(value = "onMismatch", defaultString = "ACCEPT") Result mismatch) {         return new ClientModeFilter(match, mismatch); } </code></pre>  <p>But how can I send the map values to the custom filter class from <code>log4j2.xml</code> ? </p>  <pre><code>&lt;ClientModeFilter onMatch="DENY" onMismatch="NEUTRAL" ???map_values??? /&gt; </code></pre>  <p>Also, should all the custom filter types extend <code>AbstractFilter</code> only as my need it to take map as input ?</p>  <p>I am new to <code>log4j2</code> and my question may not be straight. Please help about how to write a custom filter that takes a map as input.</p>