<p>I'm getting a weird error, i'm not able to debug. I'll be obliged if you can go through the details and suggest me something my friends.</p>  <p>I'm using Jboss Server 7.1. </p>  <p>Web App working fine for all modules. But when I'm done with products in Cart, and do "Checkout", then it cause the exception. </p>  <p>I provided almost all the required information, Please if you need anything else let me know. I'd really appreciate your kind responses. Thanks a lot viewing my request.</p>  <p><strong>Libraries i Included in the Project</strong> ( Except JBoss own included Libraries )</p>  <p><img src="http://i.imgur.com/HNoPrB6.png" alt="Libraries"></p>  <p><strong>HibernateUtil.java</strong></p>  <pre><code>public static SessionFactory getSessionFactory() {         try{             Configuration conf=new Configuration();             conf.configure("/com/webshop/hb/config/mycfg-mysql.xml");              sessionFactory =conf.buildSessionFactory();              }catch(Exception e){                 e.printStackTrace();             }         return sessionFactory; } </code></pre>  <p><strong>ShoppingCart.java</strong></p>  <pre><code>package domain;  import java.text.DateFormat; import java.text.SimpleDateFormat; import java.util.Calendar; import java.util.Date; import java.util.HashMap; import java.util.Map; import java.util.Set;  import javax.enterprise.context.SessionScoped; import javax.inject.Named; import javax.persistence.Column; import javax.persistence.ElementCollection; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.JoinColumn; import javax.persistence.ManyToOne; import java.io.Serializable;  @Named @SessionScoped @Entity public class ShoppingCart implements Serializable { private static long currentId =1;      @Id     @GeneratedValue(strategy = GenerationType.AUTO)     @Column(name="ID")     private long id;     @Column(name="date")     private Date date;     @ManyToOne     @JoinColumn(name="user")     private User user;      @ElementCollection     private Map&lt;Product, Integer&gt; orders = new HashMap&lt;Product, Integer&gt;();      @Column(name="status")     private OrderStatus status; // String       public ShoppingCart() {         this(new Date());     }      public ShoppingCart(Date date) {         super();         this.id = currentId++; // Simple way of getting an unique id. To be deferred to the DBMS later.         this.date = date;         this.status = OrderStatus.EMPTY;     }      public ShoppingCart(Date date, User user) {         this(date);         this.user = user;     }      public ShoppingCart(Date date, User user, OrderStatus status) {         this(date, user);         if (((status == OrderStatus.COMPLETED) || (status == OrderStatus.PAID)) &amp;&amp; (this.getUser() == null)) {             throw new IllegalStateException("No user specified for complete or paid orders");         }     }      public Date getDate() {         return date;     }      public void setDate(Date date) {         this.date = date;     }      public User getUser() {         return user;     }      public void setUser(User user) {         this.user = user;     }      public Map&lt;Product, Integer&gt; getOrders() {         return orders;     }      public void setOrders(Map&lt;Product, Integer&gt; orders) {         this.orders = orders;     }      public OrderStatus getStatus() {         return status;     }      public void setCompleted(OrderStatus status) throws IllegalStateTransitionException {         if ((status == OrderStatus.COMPLETED) &amp;&amp; (this.getUser() == null)) {             throw new IllegalStateTransitionException(this.getStatus().toString(), OrderStatus.COMPLETED.toString(), "Customer empty");         }         if ((status == OrderStatus.PAID) &amp;&amp; (this.getUser() == null)) {             throw new IllegalStateTransitionException(this.getStatus().toString(), OrderStatus.PAID.toString(), "Customer empty");         }         if ((status == OrderStatus.PAID) &amp;&amp; (this.getStatus() != OrderStatus.COMPLETED)) {             throw new IllegalStateTransitionException(this.getStatus().toString(), OrderStatus.PAID.toString(), "Can only go to paid for completed orders");         }         this.status = status;     }      public long getId() {         return id;     }      public void addToCart(Product product, int amountSelected) {         if (orders.containsKey(product)) {             int amount = orders.get(product);             amount +=amountSelected;             orders.put(product, amount);         }         else {             orders.put(product, amountSelected);         }     }      public void removeFromCart(Product product) {         if (orders.containsKey(product)) {             int amount = orders.get(product);             amount --;             if (amount &lt;= 0) {                 orders.remove(product);             }             else {                 orders.put(product, amount);             }         }     }      public int getNumberOfItems() {         Set&lt;Product&gt; uniqueProducts = orders.keySet();         int amount = 0;         for (Product aProduct: uniqueProducts) {             amount += orders.get(aProduct);         }         return amount;     }      @Override     public String toString() {         DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");         Calendar cal = Calendar.getInstance();         return "Order of " + this.user + ", date " + dateFormat.format(cal.getTime());     } } </code></pre>  <p><strong>mycfg-mysql.xml</strong></p>  <pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN"                                          "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt; &lt;hibernate-configuration&gt;   &lt;session-factory&gt;   &lt;property name="hibernate.connection.driver_class"&gt;com.mysql.jdbc.Driver&lt;/property&gt;   &lt;!-- &lt;property name="hibernate.bytecode.use_reflection_optimizer"&gt;false&lt;/property&gt; --&gt;   &lt;property name="hibernate.connection.username"&gt;root&lt;/property&gt;   &lt;property name="hibernate.connection.password"&gt;root&lt;/property&gt;   &lt;!-- &lt;property name="hibernate.connection.url"&gt;jdbc:mysql://localhost:3306/test&lt;/property&gt;  --&gt;    &lt;property name="connection.datasource"&gt;java:jboss/datasources/webshopstudent&lt;/property&gt;    &lt;property name="hibernate.connection.pool_size"&gt;100&lt;/property&gt;   &lt;property name="dialect"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;   &lt;property name="show_sql"&gt;true&lt;/property&gt;    &lt;!-- Automatic schema creation (begin) === --&gt;   &lt;property name="hibernate.hbm2ddl.auto"&gt;update&lt;/property&gt;    &lt;property name="hibernate.cache.provider_class"&gt;org.hibernate.cache.HashtableCacheProvider&lt;/property&gt;   &lt;property name="current_session_context_class"&gt;thread&lt;/property&gt;    &lt;mapping class="domain.User"/&gt;   &lt;mapping class="domain.Product"/&gt;    &lt;mapping class="domain.Wax"/&gt;   &lt;mapping class="domain.Miscellaneous"/&gt;   &lt;mapping class="domain.Honey"/&gt;   &lt;mapping class="domain.Flower"/&gt;   &lt;mapping class="domain.ShoppingCart"/&gt;   &lt;/session-factory&gt; &lt;/hibernate-configuration&gt; </code></pre>  <p><strong>Exception I'm getting when I Checkout from Cart</strong></p>  <p><a href="http://i.stack.imgur.com/xIkQP.png" rel="nofollow"><img src="http://i.stack.imgur.com/xIkQP.png" alt="enter image description here"></a></p>  <p><strong>Function which is causing the Issue</strong></p>  <pre><code>public String confirmOrder() throws IllegalStateTransitionException {          shoppingcart.setUser(userholder.getCurrentUser());         shoppingcart.setCompleted(OrderStatus.COMPLETED);         shoppingcart.setDate(new Date());          // Setting up sessions          Session session = HibernateUtil.getSessionFactory().openSession();         session.beginTransaction();         session.save(shoppingcart); // This Line is causing the Exception, I checked by debugging         session.close();          updateStocks();          FacesContext fc = FacesContext.getCurrentInstance();         fc.getELContext().getELResolver().setValue(fc.getELContext(), null, "shoppingCart", null);          //printing Invoice          //writing to file         try {             String content = "Customer Name: " + shoppingcart.getUser().firstName + " " + shoppingcart.getUser().lastName +"\r\n" +                               "Address : " + shippingAddress + "\r\n" +                              "Date Received: " + shoppingcart.getDate() + "\r\n" +                              "Order Items :" + shoppingcart.getOrders() + "\r\n" +                              "Money to be received :" + productHolder.subTotal();  //          File file = new File("/Users/Vinod/Documents/newfile.txt");             File file = new File("F:/" + shoppingcart.getId() + shoppingcart.getUser().firstName + "invoice.txt");              if (!file.exists()) {                 file.createNewFile();             }              FileWriter fw = new FileWriter(file.getAbsoluteFile());             BufferedWriter bw = new BufferedWriter(fw);             bw.write(content);             bw.close();              System.out.println("Done");              }catch (IOException e) {                 e.printStackTrace();             }           return "orderComplete";      } </code></pre>