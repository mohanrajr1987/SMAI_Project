<p>Env:</p>  <pre><code>Wildfly 8.2.0 Final JDK 8 Java EE 7 </code></pre>  <p><strong>Please note that by 'POJO' i am referring to the classes that serve the other classes i.e other than value objects, entities.</strong></p>  <p>This question was on back of my head for some time. Just wanted to put it out. </p>  <p>Based on CDI and Managed Beans specs and various other books/articles, its pretty clear that CDI injection starts with a 'managed' bean instance. By 'managed' i mean servlet, EJBs etc. which are managed by a container. From there, it injects POJOs (kind of crawl through layers) till every bean gets its dependencies. This all makes very sense to me and i see very little reason why developers ever need to use "new" to create an instance of their dependent POJO's.</p>  <ol> <li>One scenario that comes to my mind is when developer would like to have logic similar to</li> </ol>  <blockquote> <pre><code>if(something) {   use-heavy-weight-A-instance } else {  use-heavy-weight-B-instance } </code></pre> </blockquote>  <p>But, that also can be achieved via @Produces.</p>  <ol start="2"> <li><a href="http://stackoverflow.com/questions/7385723/cdi-injection-in-a-jsp">Here</a> is one scenario that i verified to be true in wildfly 8.2.0 Final i.e. CDI is not able to inject bean when the JSP has</li> </ol>  <blockquote> <pre><code>&lt;%!   @Inject   BeanIntf bean; %&gt; </code></pre> </blockquote>  <p>But, the alternative to use a servlet works fine.</p>  <p>That said, would like to know if there is any scenario(s) where a developer has to use 'new'. As i understand, by using 'new', developer owns the responsibility of fulfilling dependencies into that bean and all its dependent beans, and their dependent beans etc..</p>  <p>Thanks in advance,</p>  <p>Rakesh</p>