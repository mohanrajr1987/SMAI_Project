<p>I'm trying to do cross origin requests on a local *.dev style domain on my Mac OS 10.10 machine using Chrome 45.0.2454.85 (64-bit) for an extension I am developing.</p>  <p>I can't get a message through to <code>testbox.dev</code> because every time I do the following code I get value <code>0</code> for <code>status</code> and <code>responseText</code> is always empty. Inspecting the view for the background page shows the console error <code>net::ERR_CONNECTION_REFUSED</code> when those connections are attempted.</p>  <p>I tried closing all instances of Chrome and then relaunching using command <code>open -a Google\ Chrome --args --disable-web-security</code> but still not working.</p>  <p>I tried the <code>CORS</code> Chrome extension so I could at least test on local server, but that didn't work.</p>  <p>Tried prefixing my live <code>api.example.com</code> URL with <code>https://www.corsproxy.com/</code> but the request never completes.</p>  <p>Tried using <code>cors-anywhere.herokuapp.com</code> prefix but I get back the error <code>origin header required</code>. To fix that I tried sending the origin header using <code>xhr.setRequestHeader('Origin', http + '//' + window.location.host);</code> but Chrome does not allow me to proceed with error <code>Refused to set unsafe header "Origin"</code>.</p>  <p>I tried adding the following response to my server's Laravel controller method, but did not help:</p>  <pre><code>return Response::json($stock, 200, ['Access-Control-Allow-Origin' =&gt; '*']); </code></pre>  <p>manifest.json:</p>  <pre><code>{     "name": "__MSG_appName__",     "version": "1.0.0",     "manifest_version": 2,     "description": "__MSG_appDescription__",     "icons": {         "16": "images/icon-16.png",         "48": "images/icon-48.png",         "128": "images/icon-128.png"     },     "default_locale": "en",     "background": {         "scripts": [             //"scripts/chromereload.js"             "scripts/background.js"         ],         "persistent": false     },     "browser_action": {         "default_icon": {             "16": "images/icon-16.png",             "32": "images/icon-32.png",             "38": "images/icon-38.png",             "48": "images/icon-48.png",             "64": "images/icon-64.png",             "128": "images/icon-128.png"         },         "default_title": "Workflow Enhancer"     },     "options_page": "options.html",     "content_scripts": [         {             "matches": [                 "http://www.example.com/*",                 "https://www.example.com/*",                 "https://*.freshbooks.com/*",                 "https://*.highrisehq.com/*"             ],             "css": [                 "styles/content.css"             ],             "js": [                 "scripts/jquery.min.js",                 "scripts/xhrproxy.js",                 "scripts/content.js"             ],             "run_at": "document_end",             "all_frames": false         }     ],     "permissions": [         "activeTab",         "&lt;all_urls&gt;",         "http://*.dev/*",         "https://*.dev/*",         "http://testbox.dev/*",         "https://testbox.dev/*",         "http://*.example.com/*",         "https://*.example.com/*"     ],     "web_accessible_resources": [         "*"     ] } </code></pre>  <p>background.js</p>  <pre><code>chrome.extension.onConnect.addListener(function(port) {     if (port.name != 'XHRProxy_')         return;      port.onMessage.addListener(function(xhrOptions) {         var http = (window.location.protocol === 'http:' ? 'http:' : 'https:');         var xhr = new XMLHttpRequest();          xhr.open(xhrOptions.method || "GET", http + xhrOptions.url, true);         //xhr.setRequestHeader('Origin', http + '//' + window.location.host);         xhr.setRequestHeader('X-Requested-With', 'XHRProxy');         xhr.setRequestHeader('X-API-key', 'JSFLIESLIFDFDHSLFEHSLFHSFH');          xhr.onreadystatechange = function() {             if (this.readyState == 4) {                 port.postMessage({                     status : this.status,                     data   : this.responseText,                     xhr    : this                 });             }         };          xhr.send();     }); }); </code></pre>  <p>xhrproxy.js</p>  <pre><code>var proxyXHR = {};  proxyXHR.get = function (url) {     var port     = chrome.extension.connect({ name: 'XHRProxy_' });     var settings = {         method : 'GET',         url    : url     };     var onSuccess;     var onFailure;     var self = {         onSuccess: function (callback) {             onSuccess = callback;             return self;         },         onFailure: function (callback) {             onFailure = callback;             return self;         }     };     port.onMessage.addListener(function (msg) {         if (msg.status === 200 &amp;&amp; typeof onSuccess === 'function') {             onSuccess(msg.data, msg.xhr);         } else if (typeof onFailure === 'function') {             onFailure(msg.data, msg.xhr);         }     });     port.postMessage(settings);     return self; }; </code></pre>  <p>content.js</p>  <pre><code>// Localhost test domain. proxyXHR.get('testbox.dev/api/XYZ/quantity')             .onSuccess(function (data) {                 console.log(data);             })             .onFailure(function (data, xhr) {                 console.log("HTTP Error while retrieving data.", data, xhr.status);             });  // Production server domain....produces same error as local domain test above. proxyXHR.get('api.example.com/api/XYZ/quantity')             .onSuccess(function (data) {                 console.log(data);             })             .onFailure(function (data, xhr) {                 console.log("HTTP Error while retrieving data.", data, xhr.status);             }); </code></pre>  <p>If I change the URL from <code>testbox.dev</code> to my production URL <code>api.example.com</code> I still get the same cross origin denial.</p>  <p>Any ideas what is wrong here?</p>