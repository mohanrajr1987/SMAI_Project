<p>I have a class called <strong>AppSettings</strong> where I store some settings of my application. So far, I only used Lists in my DbContext like </p>  <pre><code>public class MyDbContext: DbContext {     public DbSet&lt;User&gt; Users { get; get; } } </code></pre>  <p>But for the settings, I need <em>no</em> list. I only want to store a single instance of my AppSettings class. I tried to set it as a normal member </p>  <pre><code>public class AppSettingsContext: DbContext {     public AppSettings AppSetting { get; get; } } </code></pre>  <p>But this is not working: EF will throw an exception that the entity type <strong>AppSettings</strong> is not a part of the model for the current context. The Code:</p>  <pre><code>using(var db = new AppSettingsContext()) {     var setting = new AppSettings() {         AttributeA = "Test",         //...     };     db.Entry(setting).State = EntityState.Added;     db.SaveChanges(); } </code></pre>  <p>Is it possible to do this with EF? Or am I forced to implement this logic on my own by using a not mapped attribute where I make sure that only one single instance is stored and returned by the database? </p>