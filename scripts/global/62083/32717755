<p>I am developing a small web application and I decided to work with Entity Framework (v6.1.x) Code First.  I want to create a new database entry - an "offer". On the "Offer" class the "Customer" to whom the offer belongs is also stored. </p>  <p>Alright, nothing special, I guess... Before I create a new offer, I retrieve the customer from the database.  I create the new offer and set the Customer property. After calling SaveChanges on the context, I have a duplication of the customer in the customer database. After doing some debugging, I found out, that the customer-entity hast EntryState Detached... WHY?</p>  <p>Here are some code snippets:</p>  <p>MVC Controller</p>  <pre><code> var customer = default(Customer);  if (model.SelectedCustomerID &gt; 0)             customer= _customerRepository.FindById(model.SelectedCustomerID );  // create new instance of offer var offer = new Offer {   // set all necessary properties   // ...   Customer = customer }  _offerRepository.AddOffer(offer); _offerRepository.Save(); </code></pre>  <p>Customer Repository.cs</p>  <pre><code>private readonly IDatabaseContext _context;  // DatabaseContext is injected by AutoFac public CustomerRepository(IDatabaseContext context) {      _context = context; }  public CustomerFindById(long id) {     return _context.Customer.Find(id); } </code></pre>  <p>OfferRepository.cs</p>  <pre><code>private readonly IDatabaseContext _context;  // DatabaseContext is injected by AutoFac public OfferRepository(IDatabaseContext context) {      _context = context; }  public void AddOffer(Offer offer) {     // _context.Entry(offer.Customer) --&gt; Detached     _context.Offers.Add(offer); } </code></pre>  <p>I honestly cannot understand why the customer entry is detached. Can someone please help me with this?</p>