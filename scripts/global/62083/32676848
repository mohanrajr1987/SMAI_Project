<p>I have this CodeFirst Entity models </p>  <pre><code>public partial class Initial {      [DatabaseGenerated(DatabaseGeneratedOption.Identity)]     public int Id { get; set; }      // more Properties      [Column(TypeName = "ntext")]     [Required]     public string CUD { get; set; }      [Key]     [DatabaseGenerated(DatabaseGeneratedOption.None)]     public int Cuenta_Id { get; set; }      public virtual Cuentas Cuenta { get; set; } }  public partial class Cuentas {     public Cuentas()     {        //hash set for collection properties     }      public int Id { get; set; }      [Required]     [StringLength(50)]     public string CUI { get; set; }      //properties       public virtual Initial Initial { get; set; }      public virtual Matriz Matriz { get; set; }  } </code></pre>  <p><code>Initial</code> class and <code>Matriz</code> are two identical objects and any of those are loaded when I execute:</p>  <pre><code>Cuentas account = context.CuentasCtxt.Find( 1 );  account.Initial.Counter++;// this give a null reference because 'Initial' is not loaded </code></pre>  <p>all the other properties are well loaded but this two, the singularity is this two entities is that they have a One-to-One relationship with <code>Cuentas</code> entity</p>  <p>The SQL schema looks like this<a href="http://i.stack.imgur.com/mdQpe.png" rel="nofollow"><img src="http://i.stack.imgur.com/mdQpe.png" alt="sql schema"></a></p>  <p>EDIT: This is how Entity Framework Codefirst from database made the relationships</p>  <pre><code>protected override void OnModelCreating(DbModelBuilder modelBuilder)     {         base.OnModelCreating(modelBuilder);          modelBuilder.Entity&lt;Cuentas&gt;()             .HasOptional(e =&gt; e.Inicial)             .WithRequired(e =&gt; e.Cuenta);          modelBuilder.Entity&lt;Cuentas&gt;()             .HasOptional(e =&gt; e.Matriz)             .WithRequired(e =&gt; e.Cuenta);          modelBuilder.Entity&lt;Cuentas&gt;()             .HasMany(e =&gt; e.Movimientos)             .WithRequired(e =&gt; e.Cuenta)             .HasForeignKey(e =&gt; e.Cuenta_Id)             .WillCascadeOnDelete(false);     } </code></pre>