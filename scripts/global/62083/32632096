<p>Many times I have a general purpose entity that other entities contain a collection of.  I don't want to have a new collection entity for each parent entity type that needs it but would like to re-use a single general purpose entity.  For performance reasons, I also don't want to explicitly define many-to-many relationships as in <a href="http://stackoverflow.com/a/25871028/1170116">this answer</a>. The simplest example would be a collection of strings.</p>  <pre><code>public class MyString {     public Guid Id { get; set; }     public string Value { get; set; } }  public class MyEntity {     public Guid Id { get; set; }     public virtual List&lt;MyString&gt; { get; set; } }  public class MyOtherString {     public Guid Id { get; set; }     public string Value { get; set; } }  public class MyOtherEntity {     public Guid Id { get; set; }     public virtual List&lt;MyOtherString&gt; { get; set; } } </code></pre>  <p>I'd really like to combine <code>MyString</code> and <code>MyOtherString</code> into a single entity:</p>  <pre><code>public class GeneralPurposeString {     public Guid Id { get; set; }     public string Value { get; set; } }  public class MyEntity {     public Guid Id { get; set; }     public virtual List&lt;GeneralPurposeString&gt; { get; set; } }  public class MyOtherEntity {     public Guid Id { get; set; }     public virtual List&lt;GeneralPurposeString&gt; { get; set; } } </code></pre>  <p>Except now I'm going to have an additional foreign key in <code>GeneralPurposeString</code> for every entity that contains a collection of <code>GeneralPurposeString</code>.</p>  <p>What I would like would be a way to have an additional parent category column on the <code>GeneralPurposeString</code> table (but not the entity) that would specify which entity the item belongs to.  I use <code>Guid</code> for primary keys, so the tables could look something like this:</p>  <pre><code>CREATE TABLE [GeneralPurposeString] (     [Id] uniqueidentifier NOT NULL           CONSTRAINT PK_GeneralPurposeString PRIMARY KEY,     [ParentEntityCategory] uniqueidentifier NOT NULL,     [ParentEntityId] uniqueidentifier NOT NULL,     [Value] nvarchar(MAX) ) </code></pre>  <p>And some how in Code First to specify that <code>MyEntity</code> has a certain category, and that it's collection of <code>GeneralPurposeString</code> uses that category, and <code>MyOtherEntity</code> uses another category (Guid) for it's collections of <code>GeneralPurposeString</code>.</p>  <p>The key would be that <code>GeneralPurposeString</code> could be a collection in any other entity and that loading the parent entity and including the collection would automatically load without having to explicitly specify the category.  </p>  <p>The purposes for all of this are</p>  <ol> <li>Allow .NET code to have <code>GeneralPurposeString</code> code that wasn't replicated everywhere (actual utility or business logic code).  This can probably also be accomplished through inheritance and explicit mapping but that would still leave multiple tables in the database (see #2).</li> <li>Have only one table in the database for <code>GeneralPurposeString</code>.  This is more of a tidiness issue.  Performance would possibly be better with multiple tables, but indexing on <code>ParentEntityCategory</code>/<code>ParentEntityId</code> and covering <code>Value</code> should be good performance for lookups.</li> <li>Not have to explicitly code this relationship and the lookups everywhere it's needed.</li> </ol>