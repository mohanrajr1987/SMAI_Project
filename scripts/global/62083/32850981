<p>I have a class structure like</p>  <pre><code>public class Foo {     public virtual int Id { get; set; }     public virtual ICollection&lt;Bar&gt; PropA { get; set; }     public virtual ICollection&lt;Bar&gt; PropB { get; set; }     public virtual ICollection&lt;Bar&gt; PropC { get; set; }     // There are 14 such properties     public virtual ICollection&lt;Bar&gt; PropN { get; set; } }  public class Bar {     public virtual int Id { get; set; }     public virtual string Text { get; set; } } </code></pre>  <p>When EF creates the initial migration, I see the following</p>  <pre><code>CreateTable(     "dbo.Foos",     c =&gt; new         {             Id = c.Int(nullable: false, identity: true),         })     .PrimaryKey(t =&gt; t.Id);  CreateTable(     "dbo.Bars",     c =&gt; new         {             Id = c.Int(nullable: false, identity: true),             Foo_Id = c.Int(),             Foo_Id1 = c.Int(),             Foo_Id2 = c.Int(),             // etc...             Foo_Id13 = c.Int(),         })     .PrimaryKey(t =&gt; t.Id)     .ForeignKey("dbo.Foos", t =&gt; t.Foo_Id)     .ForeignKey("dbo.Foos", t =&gt; t.Foo_Id1)     .ForeignKey("dbo.Foos", t =&gt; t.Foo_Id2)     // etc...     .ForeignKey("dbo.Foos", t =&gt; t.Foo_Id13) </code></pre>  <p>Any instance of Bar will only ever be assigned to a single property of a single instance of Foo.  It seems rather inefficient to have 14 columns for the reference back to Foo, 13 of which will be null for a given row.  Is there a more efficient way to handle this?</p>