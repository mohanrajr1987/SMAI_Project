<p>I have the following class and DbContext. I've tried both data annotations and fluent api but both are somehow ignored and I get the exception listed below. What am I doing wrong?</p>  <p>my class</p>  <pre><code>[Table("Users")] public class EFUser : IUser&lt;int&gt; {     // [DatabaseGenerated(DatabaseGeneratedOption.None)]     // [Column("EmployeeId")]     public int Id     {         get;         set;     }      public string UserName     {         get;         set;     }      public string PasswordHash { get; set; } } </code></pre>  <p>and here is my DbContext.</p>  <pre><code>public class XceleratorContext : DbContext {     protected override void OnModelCreating(DbModelBuilder modelBuilder)     {         modelBuilder.Entity&lt;EFUser&gt;()             .Property(c =&gt; c.Id)             .HasColumnName("EmployeeId")             .HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);          // base.OnModelCreating(modelBuilder);     }      public IEnumerable&lt;EFUser&gt; GetUser(int? employeeId = null, string userName = null, string passwordHash = null)     {         return this.Database.SqlQuery&lt;EFUser&gt;(             " exec dbo.GetUser @employeeId, @userName, @passwordHash ",             GetSqlParameter("employeeId", System.Data.SqlDbType.Int, value: employeeId),             GetSqlParameter("userName", System.Data.SqlDbType.NVarChar, 100, userName),             GetSqlParameter("passwordHash", System.Data.SqlDbType.NVarChar, 100, passwordHash));     }      private static SqlParameter GetSqlParameter&lt;T&gt;(string name, System.Data.SqlDbType type, int? size = null, T? value = null) where T : struct     {         var res = new SqlParameter(name, type) { Value = value ?? (object)DBNull.Value };          if (size.HasValue)             res.Size = size.Value;          return res;     }      private static SqlParameter GetSqlParameter(string name, System.Data.SqlDbType type, int size, string value)     {         return new SqlParameter(name, type, size) { Value = value ?? (object)DBNull.Value };     } } </code></pre>  <p>and finally the exception</p>  <pre><code>System.Data.Entity.Core.EntityCommandExecutionException was unhandled by user code HResult=-2146232004 Message=The data reader is incompatible with the specified 'EFUser'. A member of the type, 'Id', does not have a corresponding column in the data reader with the same name. Source=EntityFramework </code></pre>  <p>EDIT: It seems to be that if there is a base class (in this case an interface), the column mapping does not work. Is there a way around this or a fix?</p>  <p>EDIT2: I revoke my last statement. I removed the interface and the problem still exists.</p>  <p>EDIT3: It seems to be that the Column data annotation does not work with EntityFramework SqlQuery. I have the same problem as an older post here <a href="http://stackoverflow.com/questions/17733523/entityframework-sqlquery-does-not-work-with-custom-mapping-dataannotation-colum">EntityFramework SqlQuery does not work with custom mapping (DataAnnotation Column)</a></p>