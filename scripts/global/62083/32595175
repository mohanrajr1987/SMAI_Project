<p>We are currently implementing an OData Service as an alternative to using our own rigid WebApi endpoint.  This sounds great on paper but we have been running into some major issues - most of them having to do with maintainability between updates of the OData endpoint.   </p>  <p>We are using the EF Database First method to model our data.  This has issues because once you get the data modeled it doesn't annotate primary keys.  I would expect it to place [Key] attributes on properties but we are having to do this manually:</p>  <pre><code>using System.ComponentModel.DataAnnotations; ... [Key] public long Id { get; set; } </code></pre>  <p>This seems like something the edmx template file could do automatically but apparently its not built in.  </p>  <p>To make matters even more complicated, Updating the model is a pain.  We can't actually just right click on the designer diagram and use the Update Model functionality because its not reliable.  We tried to include a stored procedure into a Model we have already created and it didn't update.  So we have to redo the whole diagram every time we want to make a change.  Plus the code generated for the modeled stored procedure didn't have the return value we desired.  Meaning not only do we have to re-create the diagram every time we make a change and add the keys - but we have to update the stored procedure returns.  That's just a nightmare!</p>  <p>So the real questions are - is there a better practice?  Is using Code First the better solution?  If so, what is the general flow for using Code First and exposing entities via OData?  </p>  <p>We are really trying to find a solution that makes OData worth the effort and haven't been able to achieve any success without tons of headaches.  Any perspective on similar projects would be much appreciated.</p>