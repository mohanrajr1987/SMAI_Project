<p>I am trying to show a pdf as the output on browser. Here is my code in dofilter class of servlet. I am already getting a byte array that renders pdf correctly on this line --> <code>byte[] pdfArray = pdfConverter.convertToDoc(bytes);</code> I do see pdf file saved in --> <code>File someFile = new File("C:\\log\\java2.pdf");</code> but it's not outputting on servletresponse, only mixed characters show up. Any help is appreciated. Please look inside <code>dofilter</code> method.  I have pdfconverter take the whole site as byte array and convert into pdf. </p>  <pre><code>import java.io.ByteArrayOutputStream; import java.io.File; import java.io.FileOutputStream; import java.io.IOException; import java.io.OutputStream; import java.io.PrintWriter; import javax.servlet.Filter; import javax.servlet.FilterChain; import javax.servlet.FilterConfig; import javax.servlet.ServletException; import javax.servlet.ServletOutputStream; import javax.servlet.ServletRequest; import javax.servlet.ServletResponse; import javax.servlet.WriteListener; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpServletResponseWrapper;  import org.slf4j.Logger; import org.slf4j.LoggerFactory;  public class ItextFilter implements Filter{      private static final Logger logger = LoggerFactory.getLogger(ItextFilter.class);      private FilterConfig filterConfig = null;     private String encoding;         private static class ByteArrayServletStream extends ServletOutputStream{             ByteArrayOutputStream baos;             ByteArrayServletStream(ByteArrayOutputStream baos){                 this.baos = baos;             }             public void write(int param) throws IOException{                 baos.write(param);             }             @Override             public boolean isReady() {                 // TODO Auto-generated method stub                 return true;             }             @Override             public void setWriteListener(WriteListener paramWriteListener) {                 // TODO Auto-generated method stub              }         }          private static class ByteArrayPrintWriter{             private ByteArrayOutputStream baos = new ByteArrayOutputStream();             private PrintWriter pw = new PrintWriter(baos);             private ServletOutputStream sos = new ByteArrayServletStream(baos);             public PrintWriter getWriter(){                 return pw;             }             public ServletOutputStream getStream(){                 return sos;             }             byte[] toByteArray(){                 return baos.toByteArray();             }         }          public class CharResponseWrapper extends HttpServletResponseWrapper{             private ByteArrayPrintWriter output;             private boolean usingWriter;             public CharResponseWrapper(HttpServletResponse response){                 super(response);                 usingWriter = false;                 output = new ByteArrayPrintWriter();             }             public byte[] getByteArray(){                 return output.toByteArray();             }              @Override             public ServletOutputStream getOutputStream() throws IOException{                 // will error out, if in use                 if (usingWriter) {                     super.getOutputStream();                 }                 usingWriter = true;                 return output.getStream();             }              @Override             public PrintWriter getWriter() throws IOException{                 // will error out, if in use                 if (usingWriter) {                     super.getWriter();                 }                 usingWriter = true;                 return output.getWriter();             }             public String toString(){                 return output.toString();             }         }          @Override         public void init(FilterConfig filterConfig) throws ServletException {             this.filterConfig = filterConfig;             this.encoding = filterConfig.getInitParameter("encoding");         }          public void destroy() {             this.filterConfig = null;         }         protected String selectEncoding(ServletRequest request) {             return (this.encoding);         }        public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {         String encoding = selectEncoding(request);         if (encoding != null)             request.setCharacterEncoding(encoding);          HttpServletResponse httpServletResponse = (HttpServletResponse) response;          CharResponseWrapper wrappedResponse = new CharResponseWrapper((HttpServletResponse)response);          logger.info("ITextFilter invoked...passing on to the chain");         chain.doFilter(request, wrappedResponse);         logger.info("Chain filter is complete...processing the respose now");         logger.info("Response Content type from the chain is: " + wrappedResponse.getContentType());          //Get the bytes from the response...these bytes should be text/html         byte[] bytes = wrappedResponse.getByteArray();         //logger.info("byte array before conversion: " + bytes.toString());          //process these bytes by the local PDF converter         PdfConverter pdfConverter = new PdfConverter();         //pdfConverter.convertToDoc(bytes);         byte[] pdfArray = pdfConverter.convertToDoc(bytes);          ByteArrayOutputStream baos = new ByteArrayOutputStream(pdfArray.length);         baos.write(pdfArray, 0, pdfArray.length);          File someFile = new File("C:\\log\\java2.pdf");         FileOutputStream fos = new FileOutputStream(someFile);         fos.write(pdfArray);         fos.flush();         fos.close();         System.out.println("wrote it");           wrappedResponse.setHeader("Expires", "0");         wrappedResponse.setHeader("Cache-Control","must-revalidate, post-check=0, pre-check=0");         wrappedResponse.setHeader("Pragma", "public");         // setting the content type         wrappedResponse.setContentType("application/pdf");         // the contentlength         wrappedResponse.setContentLength(baos.size());         // write ByteArrayOutputStream to the ServletOutputStream         OutputStream os = wrappedResponse.getOutputStream();         baos.writeTo(os);         os.flush();         os.close();           //response.setCharacterEncoding(StandardCharsets.UTF_8.toString());          //response.getOutputStream().write(pdfArray);                 } } </code></pre>