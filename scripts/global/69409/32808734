<p>As I am trying to create a game as a project in the university I am in need of information how to create collision for QuadCurve objects in javafx 2. when I move my curves up and down with the code below, you can see that the curve movement fills the are between start and end points of the curve. This confuses me as I try to create a collision for the object that is moving between these curves.</p>  <p>Maybe you could tell me, am I doing the right or should I use some different ways to solve this problem.</p>  <pre><code>import java.util.ArrayList; import javafx.animation.AnimationTimer; import javafx.application.Application; import javafx.beans.property.DoubleProperty; import javafx.event.EventHandler; import javafx.scene.*; import javafx.scene.input.KeyCode; import javafx.scene.input.MouseEvent; import javafx.scene.layout.BorderPane; import javafx.scene.paint.Color; import javafx.scene.shape.*; import javafx.stage.Stage;  public class testsdfasdf extends Application { private static final double KEYBOARD_MOVEMENT_DELTA = 10;  public static void main(String[] args) throws Exception { launch(args); }   @Override public void start(Stage primaryStage) throws Exception {    QuadCurve curve = createStartingCurve(100, 500, 300, 500, 500, 500);   QuadCurve curve2 = createStartingCurve(100, 600, 300, 600, 500, 600);    final BorderPane root = new BorderPane();    Scene scene = new Scene(root, 1000, 1000);  final Anchor control2 = new Anchor(Color.GOLDENROD, curve.controlXProperty(), curve.controlYProperty()); final Anchor control3 = new Anchor(Color.GOLDENROD, curve2.controlXProperty(), curve2.controlYProperty());  ArrayList&lt;String&gt; input = new ArrayList&lt;String&gt;();  scene.setOnKeyPressed((event) -&gt; {     String code = event.getCode().toString();      if (!input.contains(code)) {         input.add( code );     } }); scene.setOnKeyReleased( (event) -&gt; {     String code = event.getCode().toString();     input.remove( code ); });  new AnimationTimer() {     public void handle(long currentNanoTime)     {          if (input.contains("UP")) {             control2.setCenterY(control2.getCenterY() - KEYBOARD_MOVEMENT_DELTA);             control3.setCenterY(control3.getCenterY() - KEYBOARD_MOVEMENT_DELTA);         }         else if (input.contains("DOWN")) {             control2.setCenterY(control2.getCenterY() + KEYBOARD_MOVEMENT_DELTA);             control3.setCenterY(control3.getCenterY() + KEYBOARD_MOVEMENT_DELTA);         }      } }.start();   root.getChildren().add(curve); root.getChildren().add(curve2); root.getChildren().add(control2);   primaryStage.setTitle("Cubic Curve Manipulation Sample"); primaryStage.setScene(scene); primaryStage.show(); } private QuadCurve createStartingCurve(int startX, int startY, int controlX, int controlY, int endX, int endY) {     QuadCurve curve = new QuadCurve();     curve.setStartX(startX);     curve.setStartY(startY);     curve.setControlX(controlX);     curve.setControlY(controlY);     curve.setEndX(endX);     curve.setEndY(endY);     curve.setStroke(Color.BLACK);     curve.setStrokeWidth(10);     curve.setStrokeLineCap(StrokeLineCap.ROUND);     curve.setFill(Color.CORNSILK.deriveColor(0, 1.2, 1, 1));     return curve;    } class Anchor extends Circle {       Anchor(Color color, DoubleProperty x, DoubleProperty y) {     super(x.get(), y.get(), 10);     setFill(color.deriveColor(1, 1, 1, 0.5));      y.bind(centerYProperty());     } }  } </code></pre>