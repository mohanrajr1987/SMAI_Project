<p>I've read and implemented Observable/Observer Design Pattern. But somehow it does not work. And I Can't find the solution. Maybe I'm passing something. I would be happy and thankfull for Your advice. Codes are below:</p>  <p>Observable:</p>  <pre><code>import java.io.ByteArrayOutputStream; import java.util.Observable;  public class ObservableOfOutput extends Observable {      private ByteArrayOutputStream baos;      public ObservableOfOutput(ByteArrayOutputStream baos) {         synchronized (this) {             this.baos = baos;         }         setChanged();         notifyObservers();     }      public synchronized ByteArrayOutputStream getBaos() {         return this.baos;     } } </code></pre>  <p>Observer:</p>  <pre><code>import java.util.Observable; import java.util.Observer;  import javafx.scene.control.TextArea;  public class ObserverOfOutput implements Observer {     private TextArea ta;      public ObserverOfOutput(TextArea ta) {         super();         this.ta = ta;     }      public void observe(Observable o) {         o.addObserver(this);     }     @Override     public void update(Observable o, Object arg) {         ObserverOfOutput.this.ta.setText(((ObservableOfOutput) o).getBaos().toString());     } } </code></pre>  <p>Class that uses them:</p>  <pre><code>// do something usefull  // Change outputs into the custom output stream ByteArrayOutputStream baos = new ByteArrayOutputStream(); System.setOut(new PrintStream(baos)); System.setErr(new PrintStream(baos)); ObservableOfOutput observableBAOS = new ObservableOfOutput(baos);  // text area to print results TextArea console = new TextArea(); ObserverOfOutput observerTA = new ObserverOfOutput(console); observerTA.observe(observableBAOS);  // show console showCustomConsole(console); // shows new window with this TextArea  System.out.println("Starting the tool using following parameters:\n"); System.out.println("Blabla"); System.out.println("Blablabla2"); System.out.println("Tool finished its work."); </code></pre>  <p>Just forwarding the last output to the TextArea is easy with console.setText(baos.toString()) writing it at the end. But it is not what I need. I need this listener to make a real-time output on the TextArea. The tool runs for a long time and throws strings using System.out/err.println. I want to catch them when they are thrown and put them in to the TextArea.</p>  <p>Thanks in Advance. :-)</p>