<p>I discovered that some instance of a (java) class that I used in Maps and Sets sometimes fails to be found using the <code>contains</code> method.</p>  <p>The problem was <em>simply</em> that the class did not implement "hashCode" (but it has <code>equals</code>). And the subtlety was that it actually works most of the time: I only found out about the error when running some code with concurrency.</p>  <p>My problem now is that I'd like to make a unit test that assert that this class can be used reliably in a Set/Map (i.e that <code>.contains</code> works) but I cannot reproduce the bug. </p>  <p>As I say, almost all the time it actually works. I tried to make a Set of a couple of instances, then run multiple times <code>contains</code> with copies of these instances, in parallel. But it always works.</p>  <p>What test of <code>mySet.contains(item-copy)</code> would fails for sure if item class has not <code>hashCode</code>?</p>  <p>Here is the test pseudo code that don't fails when <code>MyItem</code> does not implements hashCode:</p>  <pre><code>def testFindInSet(): Unit ={   val items = Seq(---list of args---).map( args =&gt; new MyItem(args)}.toSet   items.par.foreach{ item =&gt;     (1 to 100).par.foreach{ k =&gt;       val itemCopy = new MyItem(item)  // that's a copy constructor       assertTrue("item not found", items(itemCopy))     }   } } </code></pre>