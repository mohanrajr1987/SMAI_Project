<p>As I understand the semantics of a custom constructor may be typically added to a class via a companion object. Is there then, any way to inherit a custom constructor while inheriting a class? </p>  <p>On the one hand I have found that companion objects are not synthetically inherited along a case class, and on the other, I am not aware of a way of creating custom constructors inside a class itself, so that they are inherited. And yet inheriting custom constructors seems to be a perfectly valid use case to me. So is it supported in some (straightforward) way in Scala?</p>  <p>A naive demonstration of intent:</p>  <pre><code>class A {} object A {   def apply(n: Int) = {     println(n)     new A   } }  class B extends A {}  object Test {   val a1 = A   val a2 = A(3)   val b1 = B    // compile error   val b2 = B(3) // compile error </code></pre>  <p>P.S. I have even found <a href="http://daily-scala.blogspot.co.il/2009/11/multiple-constructors.html" rel="nofollow">the arcane/deviant technique of defining <code>this</code> custom constructors</a> result in a custom constructor that does not in actuality get inherited (it does work for just creating custom constructors, but quite oddly and unfortunately those do not get inherited). Demonstrating code:</p>  <pre><code>class A {   def this(n: Int) = {     this     println(n)   } }  class B extends A {}  object Test {   val a1: A = new A   val a2: A = new A(3)   val b1 = new B       val b2 = new B(3) // compile error } </code></pre>  <h3>Clarification of Intent Edit:</h3>  <p>consider "constructor" and "companion factory methods" interchangeable for the sake of this question.</p>