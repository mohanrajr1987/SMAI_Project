<p>I try to define a recursive function in Scala with following code:</p>  <pre><code>object Factorial {     val almostFactorial = (f: Int =&gt; Int) =&gt; (n: Int) =&gt; if(n == 0) 1 else n * f(n - 1)     val factorial: Int =&gt; Int = almostFactorial(factorial)     def main(args: Array[String]) {         println(factorial(5))     } } </code></pre>  <p>The above code compiles but runs with exception: </p>  <pre><code>Exception in thread "main" java.lang.NullPointerException </code></pre>  <p>But if I change</p>  <pre><code>val factorial: Int =&gt; Int = almostFactorial(factorial) </code></pre>  <p>into</p>  <pre><code>val factorial: Int =&gt; Int = almostFactorial(factorial(_)) </code></pre>  <p>Then it runs well.</p>  <p>What's the difference between these two declaration, and why does the first one cause that exception?</p>