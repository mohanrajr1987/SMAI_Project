<p>What might be the straightforward way to make a class's private member accessible in a self typed trait bearing that class's type?</p>  <p>It seems that <code>protected</code> does the job, but AFAIK that allows access also for subclasses, which is kind of too wide an access scope bundling to me, unless, traits with self types and subclasses are more closely related than I imagine. Can you shed some light on this?</p>  <p>Code fiddle:</p>  <pre><code>trait CakeLayer {   self: A =&gt;     println(a) }  class A {   protected val a: Int = 3 } </code></pre>  <p>To me, the semantics of a self-typed trait are very different from those of a subclass, when I use it for the cake pattern: I'd not like any subclass to have access, but only the specific self typed trait.</p>