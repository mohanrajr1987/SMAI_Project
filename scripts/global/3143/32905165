<p>I'm trying to test a new feature of Akka 2.4 - <code>PersistentFSM</code> (<a href="http://doc.akka.io/docs/akka/2.4.0/scala/persistence.html#Persistent_FSM" rel="nofollow">http://doc.akka.io/docs/akka/2.4.0/scala/persistence.html#Persistent_FSM</a>) with the simple example below.</p>  <p>This example generates 5 random integers and ads it to the sequence. What I'd like it to do is to persist the data and on the next run of the application keep appending to existing sequence of numbers. Current documentation on <code>PersistentFSM</code> is a little scarce and there's no clear way how to make this work. Any ideas?</p>  <p>TestFSM.scala:</p>  <pre><code>import akka.actor.{Actor, ActorSystem, Props} import akka.persistence.fsm.PersistentFSM import akka.persistence.fsm.PersistentFSM.FSMState import scala.reflect._ import scala.util.Random  final case class SetNumber(num: Integer)  sealed trait State extends FSMState case object Idle extends State {     override def identifier: String = "Idle" } case object Active extends State {     override def identifier: String = "Active" }  sealed trait Data {     def add(number: Integer): Data } case object Empty extends Data {     def add(number: Integer) = Numbers(Vector(number)) } final case class Numbers(queue: Seq[Integer]) extends Data {     def add(number: Integer) = Numbers(queue :+ number) }  sealed trait DomainEvt case class SetNumberEvt(num: Integer) extends DomainEvt  class Generator extends Actor with PersistentFSM[State, Data, DomainEvt] {      override def applyEvent(domainEvent: DomainEvt, currentData: Data): Data = {         domainEvent match {             case SetNumberEvt(num) =&gt; currentData.add(num)         }     }      override def persistenceId: String = "generator"      override def domainEventClassTag: ClassTag[DomainEvt] = classTag[DomainEvt]      startWith(Idle, Empty)      when(Idle) {         case Event(SetNumber(num), Empty) =&gt;             goto(Active) applying SetNumberEvt(num)     }      when(Active) {         case Event(SetNumber(num), numbers: Data) =&gt;             println(numbers)             stay applying SetNumberEvt(num)     }      initialize()  }  object TestFSM extends App {      val system = ActorSystem()      val actor = system.actorOf(Props[Generator])      actor ! SetNumber(Random.nextInt())     actor ! SetNumber(Random.nextInt())     actor ! SetNumber(Random.nextInt())     actor ! SetNumber(Random.nextInt())     actor ! SetNumber(Random.nextInt())      Thread.sleep(1000)     system.terminate()  } </code></pre>  <p>reference.conf:</p>  <pre><code>akka.persistence.journal.plugin = "akka.persistence.journal.inmem" akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local" akka.persistence.journal.leveldb.dir = "target/journal" akka.persistence.snapshot-store.local.dir = "target/snapshots" </code></pre>