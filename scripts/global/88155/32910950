<p>I'm using the Malhar AngularJS Dashboard Framework located here on github: <a href="https://github.com/DataTorrent/malhar-angular-dashboard" rel="nofollow">https://github.com/DataTorrent/malhar-angular-dashboard</a> , and a simple demo here: <a href="http://datatorrent.github.io/malhar-angular-dashboard/#/" rel="nofollow">http://datatorrent.github.io/malhar-angular-dashboard/#/</a> .</p>  <p>Their system uses JQuery Sortable Widgets, which allows me to load up some charts and grids into a dashboard.</p>  <p>The way I load my charts and grids is by using their <code>templateUrl</code> property on the widget definition, as follows :</p>  <p><code>{    name: myWidgetEnum.TREELIST,    title: 'Tree List',    templateUrl: 'app/shared/gadget-templates/tree-list.html'  }</code></p>  <p>Here's a more complete sample of the Malhar Widget Definitions, which is where I define my UI "gadgets" to be rendered within the sortable widgets :</p>  <p><div class="snippet" data-lang="js" data-hide="false"> <div class="snippet-code"> <pre class="snippet-code-js lang-js prettyprint-override"><code>(function () { 'use strict'; angular.module('rage')     .factory('widgetDefinitions', ['ColumnChartDataModel', 'TreeListDataModel', 'TreeMapDataModel', 'GridDataModel', widgetDefinitions])  var myWidgetEnum = Object.freeze({         TREELIST: 'chart_treelist', TREEMAP: 'chart_treemap', HEATMAP: 'chart_heatmap', GRID: 'chart_grid' });  /* Define the widget definitions - base properties are defined in WidgetModel factory. */ function widgetDefinitions(ColumnChartDataModel, TreeListDataModel, TreeMapDataModel, GridDataModel) {  var size = { width: '20%', height: 90 }; var fixedSize = { width: '50%', height: 320 };  // keep height as a number, and add 'px' in directive var initImagePath = 'images4/256x256/';  return [     {                 	name: myWidgetEnum.TREELIST, 	title: 'Tree List', 	templateUrl: 'app/shared/gadget-templates/tree-list.html',                 	dataModelType: TreeListDataModel, 	dataModelOptions: {},               // this property will be persisted in DashboardState factory	 	gadgetType: 'table', 	chartType: 'treelist', 	settingsModalOptions: {	}                     },         { 	name: myWidgetEnum.HEATMAP, 	title: 'Heat Map', 	templateUrl: 'app/shared/gadget-templates/grid.html', 	dataModelType: GridDataModel, 	dataModelOptions: {},               // this property will be persisted in DashboardState factory 	gadgetType: 'table', 	chartType: 'heatmap', 	settingsModalOptions: {} // see 'MainCtrl' controller     } ]; }    })();</code></pre> </div> </div> </p>  <p>And the dashboard options in my main controller :</p>  <p><div class="snippet" data-lang="js" data-hide="false"> <div class="snippet-code"> <pre class="snippet-code-js lang-js prettyprint-override"><code>$scope.dashboardOptions = {     widgetButtons: false,   // 'false' makes it a dropdown of options     widgetDefinitions: widgetDefinitions,   // see dashboard-widget-factory.js     defaultWidgets: defaultWidgets,     storage: $window.localStorage,     storageId: $scope.defaultDashboardId,       // 'rage.ui' - no longer hard code the storage Id - 06/11/2015 BM:     hideWidgetSettings: false,     settingsModalOptions: {    	templateUrl: 'app/shared/include/gadget-config-new/gadget-config-container.html', 	controller: 'GadgetSettingsCtrl_NEW as settings', 	backdrop: true     },     onSettingsClose: function (result, widget) { 	jQuery.extend(true, widget, result); 	widget.dataModelOptions = result.dataModelOptions;     },     onSettingsDismiss: function (reason) {         console.log('widget settings were dismissed. Reason: ', reason);     } };</code></pre> </div> </div> </p>  <p>When Malhar first loads up the widgets, it <code>compiles</code> the <code>templateUrl</code> within the JQuery sortable widget. </p>  <p>However, if I launch the widget settings modal and choose a different "widget" from the Widget Definitions list, I'm having an issue when I try to <code>recompile</code> the new <code>templateUrl</code>.</p>  <p>In other words if the first widget loaded up is the <code>TREELIST</code>, then in it's modal settings I choose a new widget called <code>HEATMAP</code>, I need to somehow force a recompile on the new html template that was loaded by Malhar.</p>  <p>Here on github, you can find the main directive, <code>malhar-angular-dashboard.js</code> <a href="https://github.com/DataTorrent/malhar-angular-dashboard/blob/master/dist/malhar-angular-dashboard.js" rel="nofollow">https://github.com/DataTorrent/malhar-angular-dashboard/blob/master/dist/malhar-angular-dashboard.js</a> , and if you search down for the <code>'DashboardWidgetCtrl'</code> controller you'll find the <code>$scope.makeTemplateString</code> function as well as the <code>$scope.compileTemplate</code> function further below that.</p>  <p>I'm experimenting with the resolve section of the $modal instance as follows, but this seems to be more of a hack than an elegant solution:</p>  <p>See the <code>angular.element</code> below inside the <code>try...catch</code> section :</p>  <p><div class="snippet" data-lang="js" data-hide="false"> <div class="snippet-code"> <pre class="snippet-code-js lang-js prettyprint-override"><code>// Set resolve and reject callbacks for the result promise modalInstance.result.then( function (result) {  // Call the close callback onClose(result, widget, scope);  // CHECK IF FIRST TIME CONFIGURING THE GADGET - 04/22/2015 BM: if (!widget.gadgetConfigured) {     widget.gadgetConfigured = true;                                 widget.setHeight(widget.fixedSize.height);      widget.setWidth(widget.fixedSize.width);                             }                         scope.$broadcast('widgetSettingsClosed', widget, result);                                                //AW Persist title change from options editor          scope.$emit('widgetChanged', widget);  // hack to recompile the widget if user has swapped gadget types in gadget config modal - 10/01/2015 BM: if (widget.chartType == "heatmap" || widget.chartType == "treelist") {     try { 	angular.element(document.getElementById('dash')).scope().$$childHead.compileTemplate();     } catch (e) { 	console.log("In modalInstance.result.then, cannot compile template " + e);     } } }, function (reason) { // Call the dismiss callback onDismiss(reason, scope); } );</code></pre> </div> </div> </p>  <p>If there's anyone with experience in Mahlar Dashboard, or in compiling directives, I would appreciate any guidance in this area.</p>  <p>thank you,</p>  <p>Bob</p>