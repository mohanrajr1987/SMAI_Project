<p>I'm trying to create directives on the fly, actually I achived that, but seams pretty hacky. </p>  <p>This was my first approach:</p>  <pre><code>function create(myDir) {    angular.module("app").directive(myDir.name, function() {    return {      template:myDir.template    };   }); } </code></pre>  <p>It didn't work because you can't register directives after application started.</p>  <p>based on this post: <a href="http://weblogs.thinktecture.com/pawel/2014/07/angularjs-dynamic-directives.html" rel="nofollow">http://weblogs.thinktecture.com/pawel/2014/07/angularjs-dynamic-directives.html</a></p>  <p>I found out that I could use compileProvider to do the work, but since compileProvider isn't available outside config block, you need to put it out, so I did:</p>  <pre><code>var provider = {}; angular.module("app",[]);          angular.module('app') .config(function ($compileProvider) {     //It feels hacky to me too.     angular.copy($compileProvider, provider);  }); ....  function create(myDir) {     provider.directive.apply(null, [myDir.name, function () {          return { template: myDir.template } }]);     render(myDir); //This render a new instance of my new directive } </code></pre>  <p>Surprisingly it worked. But I can't feel like being <em>hacking</em> the <strong>compileProvider</strong>, because I'm using it not in the way it was suppose to be, I would really like to know if is it possible to use the <strong>compileProvider</strong> properly after the application has started.</p>