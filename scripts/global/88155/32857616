<p>I am trying to create a directive that encapsulates a label and an input field:</p>  <pre><code>&lt;form-field label="Name" ng-model="person.name"&gt;&lt;/form-field&gt; </code></pre>  <p>Directive definition:</p>  <pre><code>app.directive("formField", function(){     var ignoreAttrs = ["label"];     return {       priority: 3, //so it executes before ngModel.       template: "&lt;div&gt;" +                      "&lt;label&gt;{{label}}&lt;/label&gt;" +                      "&lt;input type='text' /&gt;" +                     "&lt;/div&gt;",       scope: true,       compile: function(tElement, tAttrs){         var $input = tElement.find("input");          //copy attributes from directive element to inner input field         var attrs = [];         $.each(tElement[0].attributes, function(index, attr){           if(ignoreAttrs.indexOf(attr.label) &lt; 0){             attrs.push(attr.name);             $input.attr(attr.name, attr.value);           }         });          //remove the attributes from the directive element         $.each(attrs, function(index, attr){           tElement.removeAttr(attr);         });          return function postLink(scope, element, attrs){           scope.label = attrs.label;         };       }     };   }); </code></pre>  <p>The problem I'm running into is that when angular traverses the DOM it finds two directives: form-field and ng-model. This causes the ng-model to get set up in the <strong>form-field</strong> element and then in the <strong>input</strong>, when my intent is to only have ng-model in the <strong>input</strong>.</p>  <p>Is there a way to tell angular to ignore a directive or is there an earlier moment in the lifecycle when I can run the logic that copies and removes the attributes so angular does not find the ng-model directive in the form-field?</p>  <p>A possible solution could be to have all other directives have a prefix so angular does not recognize them, then in compile function of the <strong>form-field</strong> I could remove the prefix before copying to the <strong>input</strong> but I'm looking for a cleaner solution.</p>