<p>I have written a custom directive to ensure that a text box can take only integer values.  But After using the directive, my $error.required flag always stay false irrespective of whether I have a value in the text field or not.</p>  <p>It works fine if I use the native input type, </p>  <pre><code>  &lt;input name="name" ng-model="testvalue.number" required /&gt; </code></pre>  <p>but when I use the custom directive,</p>  <pre><code>&lt;number-only-input input-value="testvalue.number" input-name="name"/&gt; </code></pre>  <p>shippingForm.name.$error.required is always false and it doesn't show the error "Please enter a value" even if the field is empty This is the code</p>  <pre><code>    &lt;body ng-controller="ExampleController"&gt;         &lt;form name="shippingForm" novalidate&gt;                  &lt;!--&lt;input name="name" ng-model="testvalue.number" required /&gt;--&gt;                 &lt;number-only-input input-value="testvalue.number" input-name="name"/&gt;                          &lt;span class="error" ng-show="shippingForm.name.$error.required"&gt;                     Please enter a value                 &lt;/span&gt;          &lt;/form&gt;     &lt;/body&gt;  &lt;script&gt;           angular.module('TextboxExample', [])             .controller('ExampleController', ['$scope', function($scope) {                $scope.testvalue =  {number: 1, validity: true}             }])             .directive('numberOnlyInput', function () {         return {             restrict: 'EA',             template: '&lt;input name="{{inputName}}" ng-model="inputValue" required /&gt;',             scope: {                 inputValue: '=',                 inputName: '='             },             link: function (scope) {                  scope.$watch('inputValue', function(newValue,oldValue) {                     if (newValue == undefined || newValue == null || newValue == "") {                      return;                     }                     if (isNaN(newValue))                     {                         scope.inputValue = oldValue;                         return;                     }                 });             }         };     });           &lt;/script&gt; </code></pre>  <p>Please guide</p>  <p>Sunil</p>