<p>I wrote this function that inserts another linked list to the existing linked list. The output is correct when I print out the value of "this" object in the function. However, the program encounters run time error when the destructor gets invoked in the end. I figured that the run time error is caused by having 2 pointers pointing to the same address; therefore when one gets de-allocated, another one becomes the dangling pointer.</p>  <p>Is there any ways I can insert another linked list to the existing linked list (in the middle) without causing this problem? </p>  <pre><code>void List::insert(const List&amp; otherList, const int &amp;index) {     Node* insertion = head;     int x = index;     while (x &gt; 0){         insertion = insertion-&gt;next;         x--;     }      if (index == 0){  //this works fine         otherList.tail-&gt;next = insertion;         *this = otherList;  /*I implemented a copy ctor                                that performs deep copy                                so this is also fine */     }     else{ // this block causes problems         Node* tmp = insertion-&gt;next;         insertion-&gt;next = otherList.head;         otherList.tail-&gt;next = tmp;     }     cout &lt;&lt; "after the copy\n" &lt;&lt; (*this) &lt;&lt; endl; } </code></pre>