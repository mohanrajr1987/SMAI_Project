<p>Given the following line:</p>  <pre><code> int *digits = (int *) malloc(3 * sizeof(int)); </code></pre>  <p>Say we store the values <em>1, 2 and 3</em> in locations, <em>digits[0], digits[1], digits[2]</em>. As follows:</p>  <pre><code>digits[0] = 1; digits[1] = 2; digits[2] = 3; </code></pre>  <p>If the following line is called:</p>  <pre><code>free(++digits); </code></pre>  <p>Is the entire memory range returned by malloc freed, or just the <em>int</em> sized block currently pointed to by <em>digits</em> - at that time, <em>digits[1]</em>? Or is the correct way, to free the entire range by iteration, i.e:</p>  <pre><code>for (i = 0; i &lt; 3; i++) {     free(digits[i]); } </code></pre>  <p>I am trying to understand the range of a call to <em>free</em>. Is the entire memory chunk returned by <em>malloc</em> freed, or is only a sub-portion, currently referenced by the pointer <em>digits</em> freed?</p>