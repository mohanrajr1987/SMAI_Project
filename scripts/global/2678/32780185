<p>I have one viewController and 3 SKscenes that I want to transition between. Every time I do that the memory starts stacking up.</p>  <p>I think I need to do this as ZeMoon answers, <a href="http://stackoverflow.com/questions/22007391/deallocate-skscene-after-transition-to-another-skscene-in-spritekit">Deallocate SKScene after transition to another SKScene in SpriteKit</a> </p>  <p>But I dont understand how? can anyone explain a little more in detail how I should change my code to free memory between each transition? </p>  <p>Heres my viewController.</p>  <pre><code>#import "GameViewController.h"   @implementation SKScene (Unarchive)  + (instancetype)unarchiveFromFile:(NSString *)file { /* Retrieve scene file path from the application bundle */ NSString *nodePath = [[NSBundle mainBundle] pathForResource:file     ofType:@"sks"]; /* Unarchive the file to an SKScene object */ NSData *data = [NSData dataWithContentsOfFile:nodePath                                       options:NSDataReadingMappedIfSafe                                         error:nil]; NSKeyedUnarchiver *arch = [[NSKeyedUnarchiver alloc] initForReadingWithData:data]; [arch setClass:self forClassName:@"SKScene"]; SKScene *scene = [arch decodeObjectForKey:NSKeyedArchiveRootObjectKey]; [arch finishDecoding];  return scene; }  @end  @implementation GameViewController {  SKView *_startSkView; SKScene *_startScene;   } - (void)viewWillLayoutSubviews { [super viewWillLayoutSubviews];  // Configure the view. // SKView * skView = (SKView *)self.view  if (!_startSkView) {     _startSkView =[[SKView alloc] initWithFrame:self.view.bounds];      [self.view addSubview:_startSkView];      _startSkView.showsFPS = YES;     _startSkView.showsNodeCount = YES;     /* Sprite Kit applies additional optimizations to improve rendering   performance */     _startSkView.ignoresSiblingOrder = NO;      // Create and configure the scene.      _startScene = [startScene sceneWithSize:CGSizeMake(2048, 1536) ];     _startScene.scaleMode = SKSceneScaleModeAspectFill;       // Present the scene.      [_startSkView presentScene:_startScene];    //  _startScene.delegate =self;   }  }  - (BOOL)shouldAutorotate { return YES; }  - (NSUInteger)supportedInterfaceOrientations { if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone) {     return UIInterfaceOrientationMaskAllButUpsideDown; } else {     return UIInterfaceOrientationMaskAll; } }  - (void)didReceiveMemoryWarning { [super didReceiveMemoryWarning]; // Release any cached data, images, etc that aren't in use. }  - (BOOL)prefersStatusBarHidden { return YES; }  @end </code></pre>  <p>Here is my SKscene levelScene the other 2 is similar.</p>  <pre><code>#import "levelScene.h" #import "GameScene.h" #import "startScene.h"   @implementation levelScene  { int _playableHeight;   }  -(void)didMoveToView:(SKView *)view { /* Setup your scene here */  _playableHeight = 1536-192; SKSpriteNode *background  = [SKSpriteNode spriteNodeWithImageNamed:@"background"]; background.position = CGPointMake(self.size.width/2,self.size.height/2);  [self addChild:background];  SKSpriteNode *foreGround  = [SKSpriteNode spriteNodeWithImageNamed:@"background"]; foreGround.position = CGPointMake(self.size.width/2,self.size.height/2);  [self addChild:foreGround];  SKSpriteNode *foreGround2  = [SKSpriteNode spriteNodeWithImageNamed:@"background"]; foreGround2.position = CGPointMake(self.size.width/2,self.size.height/2);  [self addChild:foreGround2];  SKSpriteNode *foreGround3  = [SKSpriteNode spriteNodeWithImageNamed:@"background"]; foreGround3.position = CGPointMake(self.size.width/2,self.size.height/2);  [self addChild:foreGround3];  SKSpriteNode *foreGround4  = [SKSpriteNode spriteNodeWithImageNamed:@"background"]; foreGround4.position = CGPointMake(self.size.width/2,self.size.height/2);  [self addChild:foreGround4];  SKSpriteNode *foreGround5  = [SKSpriteNode spriteNodeWithImageNamed:@"background"]; foreGround5.position = CGPointMake(self.size.width/2,self.size.height/2);  [self addChild:foreGround5];   SKLabelNode *myLabel = [SKLabelNode labelNodeWithFontNamed:@"Chalkduster"];  myLabel.text = @"levelScene"; myLabel.name =@"LevelSceneLabel"; myLabel.fontSize = 65; myLabel.position = CGPointMake(CGRectGetMidX(self.frame),                                CGRectGetMidY(self.frame));  [self addChild:myLabel];  SKLabelNode *myBackLabel = [SKLabelNode labelNodeWithFontNamed:@"Chalkduster"];  myBackLabel.text = @"BACK"; myBackLabel.name =@"myBackLabel"; myBackLabel.fontSize = 30; myBackLabel.position = CGPointMake(50,                                _playableHeight-myBackLabel.frame.size.height);   [self addChild:myBackLabel];   }  -(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event { /* Called when a touch begins */ UITouch *touch = [touches anyObject]; CGPoint positionInScene = [touch locationInNode:self]; SKSpriteNode *touchedNode = (SKSpriteNode*)[self nodeAtPoint:positionInScene];   if ([[touchedNode name] isEqualToString:@"LevelSceneLabel"]) {      SKTransition *transition = [SKTransition pushWithDirection:SKTransitionDirectionUp duration:1];      GameScene *Scene = [[GameScene alloc]initWithSize:CGSizeMake(self.size.width, self.size.height)];      Scene.scaleMode = SKSceneScaleModeAspectFill;      [self.scene.view presentScene:Scene transition:transition];   }   if ([[touchedNode name] isEqualToString:@"myBackLabel"]) {      SKTransition *transition = [SKTransition pushWithDirection:SKTransitionDirectionUp duration:1];      startScene *Scene = [[startScene alloc]initWithSize:CGSizeMake(self.size.width, self.size.height)];      Scene.scaleMode = SKSceneScaleModeAspectFill;      [self.scene.view presentScene:Scene transition:transition];   }    }    -(void)update:(CFTimeInterval)currentTime { /* Called before each frame is rendered */ }  @end </code></pre>