<p>I have a basic class that has four attributes (<code>Patient</code>).  In <code>Main()</code> I have reserved the memory for the array and before I actually create the instance, I ask the user for the account number to ensure it doesn't already exist within the array.  So <code>BinarySearch</code> requires it to be sorted but as soon as I sort it the ability to do the <code>for</code> loop is lost.</p>  <pre><code>//Variables int intMaxNum = 5; //set max number of patients to 5 int intInputValue; int intResult; string strTempName; int intTempAge; double dblTempTotal;  Patient[] objectPatient = new Patient[intMaxNum]; //create an array of references  for (int x = 0; x &lt; objectPatient.Length; ++x) {    //attempt to create a 'shadow' class to search through and keep integrity of main class (objectPatient)    Patient[] tempobjectPatient = new Patient[intMaxNum];    tempobjectPatient = objectPatient;    if (x &gt; 0)    {        Console.Write("\n***Next Patient***");        Array.Sort(tempobjectPatient); //this will sort both objects even though I send the temporary class only - interface impact I'm sure    }     //ask for the Patient Account number    Console.Write("\nEnter Patient Account Number: ");    ReadTheAccountNumber:    intInputValue = Convert.ToInt32(Console.ReadLine());    //create temporary class for comparison    Patient SeekPatient = new Patient();    SeekPatient.PatientNumber=intInputValue; // reset the default info with the input Pateint Account Number     //verify the Patient Account number doesn't already exist    intResult = Array.BinarySearch(tempobjectPatient, SeekPatient);    //intResult = Array.BinarySearch(objectPatient, SeekPatient);     //if (objectPatient.Equals(SeekPatient)) //Can not get the .Equals to work at all...    if (intResult &gt;= 0)    {       Console.Write("\nSorry, Patient Account Number {0} is a duplicate.", intInputValue);       Console.Write("\nPlease re-enter the Patient Account Number: ");       goto ReadTheAccountNumber;    }    else //no match found, get the rest of the data and create the object    {       if (x &gt; 0) { Console.Write("***Patient Account Number unique and accepted***\n"); } //looks silly to display this if entering the first record       Console.Write("Enter the Patient Name: ");       strTempName = Console.ReadLine();       Console.Write("Enter the Patient Age: ");       intTempAge = Convert.ToInt32(Console.ReadLine());       Console.Write("Enter the total annual Patient amount due: ");       dblTempTotal = Convert.ToDouble(Console.ReadLine());       objectPatient[x] = new Patient(intInputValue, strTempName, intTempAge, dblTempTotal);    } } </code></pre>  <p>Here is the class:</p>  <pre><code>class Patient : IComparable {     //Data fields     private int patientNumber;     private string patientName;     private int patientAge;     private double patientAmountDue;      //Constructors     public Patient(): this(9,"ZZZ",0,0.00)     {     }     public Patient(int _patientNumber, string _patientName, int _patientAge, double _patientAmountDue)     {        PatientNumber = _patientNumber;        PatientName = _patientName;        PatientAge = _patientAge;        PatientAmountDue = _patientAmountDue;     }     //Properties     public int PatientNumber     {         get { return patientNumber; }        set { patientNumber = value; }     }     public string PatientName     {        get { return patientName; }        set { patientName = value; }     }     public int PatientAge     {        get { return patientAge; }        set { patientAge = value; }     }     public double PatientAmountDue     {        get { return patientAmountDue; }        set { patientAmountDue = value; }     }      //Interfaces     int IComparable.CompareTo(Object o)     {        int returnVal; //temporary value container         Patient temp = (Patient)o; //create temp instance of the class        if (this.PatientNumber &gt; temp.PatientNumber)           returnVal = 1;        else           if (this.PatientNumber &lt; temp.PatientNumber)              returnVal = -1;           else              returnVal = 0; //exact match        return returnVal;     } } </code></pre>