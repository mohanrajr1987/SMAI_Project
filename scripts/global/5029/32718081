<p>Why does the following code cause a warning when I try to compile it?</p>  <p>Bag.java:</p>  <pre><code>import java.util.List;  public interface Bag&lt;T&gt; {   public List&lt;String&gt; getOwnerNames(); } </code></pre>  <p>BagException.java:</p>  <pre><code>public class BagException extends Exception {      public BagException(Bag badBag) {         super(buildMessage(badBag));     }      private static String buildMessage(Bag badBag) {          //   BagException.java:10: warning: [unchecked] unchecked conversion         //                   List&lt;String&gt; owners = badBag.getOwnerNames();         //                                                             ^         //     required: List&lt;String&gt;         //     found:    List         List&lt;String&gt; owners = badBag.getOwnerNames();          return "Something went wrong with the bag of " + String.join(", ", owners);     }  } </code></pre>  <p><code>List&lt;String&gt; owners = badBag.getOwnerNames()</code> in <code>buildMessage</code> causes the warning even though the method is declared to return <code>List&lt;String&gt;</code>.</p>  <p>It seems really odd that these changes make the warning disappear:</p>  <ul> <li><p>Using <code>Bag&lt;Integer&gt; badBag</code> instead of <code>Bag badBag</code> in argument of <code>buildMessage</code>:</p>  <p><code>private static String buildMessage(Bag&lt;Integer&gt; badBag) {</code></p></li> <li><p>Using <code>Bag</code> instead of <code>Bag&lt;T&gt;</code> in interface:</p>  <p><code>public interface Bag {</code></p></li> </ul>  <p>I was expecting the method <code>getOwnerNames</code> to be independant of the type <code>T</code> of <code>Bag</code>. It would be helpful if you could answer one of these questions:</p>  <ul> <li>Why do I get a warning?</li> <li>What can I do about it other than suppressing it?</li> </ul>