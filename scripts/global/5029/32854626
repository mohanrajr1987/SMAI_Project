<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" rel="nofollow">WebWorkers API</a> in javascript allows you to pass objects between worker's thread and main thread using <code>worker.postMessage</code> in browser and <code>postMessage</code> in Worker.</p>  <p>I've been playing around, and not only that the <code>postMessage</code> passed arrays and objects but even RegExp instances, so I assume there's some interface these objects implement. For example for string conversion, you implement <code>.toString</code> method:</p>  <pre><code>"" + {toString: function() {return "Hello world!"}}; //prints `Hello world!` </code></pre>  <p>Similarly, you can implement <code>toJSON</code> method:</p>  <pre><code>JSON.stringify({toJSON: alert}); //Throws `TypeError: 'alert' called on an object that does not implement interface Window.` //  - demonstrating that toJSON is being called </code></pre>  <p>My question is, what should I implement for <code>postMessage</code> to get my <code>Player</code> class pass through communication channel:</p>  <pre><code>function Player(name) {   this.name = name; } Player.prototype = Object.create(EventEmitter2.prototype); </code></pre>  <p>I intentionally added the inheritance part here - I need for the object to remain <strong>instance</strong> of something, not just data holder. Just as with <code>RegExp</code>, I need it to be <em>reconstructed</em> through method or methods that I define - which must fail if required context (type definitions, such as <code>EventEmitter2</code>) are not defined in new scope.</p>