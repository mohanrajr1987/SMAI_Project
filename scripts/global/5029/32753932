<p>I'm trying to write a library of collection interfaces that implement most of the methods in the standard Collection API using the new default method syntax in Java 8. Here's a small sample of what I'm going for:</p>  <pre><code>public interface MyCollection&lt;E&gt; extends Collection&lt;E&gt; {     @Override default boolean isEmpty() {         return !iterator().hasNext();     }     //provide more default overrides below... }  public interface MyList&lt;E&gt; extends MyCollection&lt;E&gt;, List&lt;E&gt; {     @Override default Iterator&lt;E&gt;iterator(){         return listIterator();     }     //provide more list-specific default overrides below... } </code></pre>  <p>However, even this simple example is met with a compiler error:</p>  <pre><code>error: interface MyList&lt;E&gt; inherits abstract and default        for isEmpty() from types MyCollection and List </code></pre>  <p>From my understanding of default methods, this should be allowed since only one of the extended interfaces provides a default implementation, but apparently that's not the case. What's going on here? Is there a way to get this to do what I want?</p>