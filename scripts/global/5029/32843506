<p>I have the following calling of the Helper method in the controller:</p>  <pre><code>DialogHelper.showListDialog(R.string.select_recipient_please, recipientsArr, null, context); </code></pre>  <p>And helper method:</p>  <pre><code>public static void showListDialog(int title, String[] items, Drawable icon, Context ctx) {         new MaterialDialog.Builder(ctx)                 .title(title)                 .items(items)                 .itemsCallbackSingleChoice(-1, new MaterialDialog.ListCallbackSingleChoice() {                     @Override                     public boolean onSelection(MaterialDialog dialog, View view, int which, CharSequence text) {                         Logger.d("Selected");                         Logger.d(String.valueOf(which));                         /**                          * If you use alwaysCallSingleChoiceCallback(), which is discussed below,                          * returning false here won't allow the newly selected radio button to actually be selected.                          **/                         return true;                     }                 })                 .positiveText("Select")                 .show();     } </code></pre>  <p>And i would like to process overridden <strong>onSelection</strong> method in the Controller instead of the helper.</p>  <p>How can i do it in the right way please? Should I Use interface for this?</p>  <p>Many thanks for any advice or example.</p>  <p><strong>EDIT: ADDED EXAMPLE WHICH IS NOT WORKING FOR ME</strong></p>  <p>Controller method:</p>  <pre><code>public void showRecipientsPicker(ArrayList&lt;String&gt; recipents){         try {             String[] recipientsArr = new String[recipents.size()];             recipientsArr = recipents.toArray(recipientsArr);             DialogHelper dh = new DialogHelper(context);              dh.showListDialog(R.string.select_recipient_please, recipientsArr, null, new DialogHelperListener() {                 @Override                 public void onSelection(MaterialDialog dialog, View view, int which, CharSequence text) {                     Logger.d("TEST");                     Logger.d(String.valueOf(which));                 }             });           } catch (Exception e){             Logger.d(e.getMessage());             toastHelper.showToast(R.string.cannot_show_recipients,                     Constants.Global.TOAST_DURATION_MEDIUM);             TrackingEventLogHelper.logException(e, Constants.Global.EXCEPTION,                     Constants.ExceptionMessage.EXC_CANNOT_SHOW_RECIPIENT_LIST, true);          }     } </code></pre>  <p>Interface class:</p>  <pre><code>public interface DialogHelperListener  {     void onSelection(MaterialDialog dialog, View view, int which, CharSequence text); } </code></pre>  <p>Helper class:</p>  <pre><code>public class DialogHelper {      private Context mCtx;      public DialogHelper(Context ctx) {         mCtx = ctx;     }       /**      * Creating a list dialog only requires passing in an array of strings      */     public void showListDialog(int title, String[] items, Drawable icon, DialogHelperListener callback) {         new MaterialDialog.Builder(this.mCtx)                 .title(title)                 .items(items)                 .itemsCallbackSingleChoice(-1, (MaterialDialog.ListCallbackSingleChoice) callback)                 .positiveText("Select")                 .show();     }      } </code></pre>  <p><strong>It is throwing the following exception:</strong></p>  <pre><code>controller.MessageController$2 cannot be cast to com.afollestad.materialdialogs.MaterialDialog$ListCallbackSingleChoice </code></pre>