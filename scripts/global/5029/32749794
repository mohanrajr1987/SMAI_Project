<p>Sorry if the question title is not clear but I needed more characters to fully explain myself.</p>  <p>Before people start jumping to conclusions, YES I know about isInstance and instanceof but hear me out first.</p>  <p>Let's say I generate a java ".class" file of an interface (called MyInterface) from a UML model. Then, lets say that there is a directory somewhere that contains two ".class" files where one represents an interface that is IDENTICAL to the generated one (same fully qualified name, both using the default package) and the other represents the concrete class that implements MyInterface.</p>  <p>In a separate program, I load in the generated interface and concrete class with separate classloaders (URLClassLoader). When I try to check if the concrete class implements the generated version of the interface, isInstance() returns False. I suspect this is because when the concrete class is loaded, the non-generated interface gets pulled in with it because it implements it. If I use Class.getInterfaces() on the concrete class and compare it's interface with the generated one using equals, this also fails.</p>  <p>Since isInstance() does not work does anyone know of a way to  verify that a class implements an interface with the same fully qualified name and not necessarily the one it was compiled with? </p>