<p>I'm designing the interface as follows:</p>  <pre><code>public interface Parameters {      public &lt;T&gt; T getValue(ParameterName pn, Class&lt;T&gt; valueType) throws ClassCastException; } </code></pre>  <p>An implementation is obligated to throw <code>ClassCastException</code> if the <code>Class</code> instance of the value to be returned is not an <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Class.html#isAssignableFrom%28java.lang.Class%29" rel="nofollow">assignableForm</a> of the <code>Class</code> passed as a parameter.</p>  <p>Does it make sesnse? It provides compile-time type-safety, but we can do the same with just explicit cast.</p>  <p>Or it's much better to declare just </p>  <pre><code>public Object getValue(ParameterName pn) </code></pre>  <p>leaving all class-cast issues to the client.</p>