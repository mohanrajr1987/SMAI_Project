<p>I'm trying to find a way to let my database support fast location-based searches (for example, all items that lie within a certain distance from some geopoint <code>(LAT, LON)</code>). I guess the brute-force solution which calculates the distances between every point in the database and the query point probably won't work for large dataset, so some kind of indexing should be necessary. I'm not sure if there are any existing standard ways to do this (well I know they are out there but Google failed me), but here is a method (or more like a hack?) that I think might work:</p>  <p>Calculate a value from <code>(LAT, LON)</code> and store it in an indexed column. For example, something like <code>floor(LAT / 10) * 10 * 100 + floor(LON / 10) * 10</code>. Each time a query arrives, we first calculate this value for the query and find all the corresponding rows, and then calculate the Euclid distances between all points and the query point.</p>