<p>I was given a <code>decrypt.jar</code> and <code>encrypt.jar</code> file, which are used to prepare files before transmitting.</p>  <p>When I launch the terminal and type:</p>  <pre><code>/usr/bin/java -jar /path/to/jar/decrypt.jar </code></pre>  <p>I get the output:</p>  <pre><code>No input file specified </code></pre>  <p>Which is OK! The jar works. Now in my code, when I launch the jar with execl(), I get this as output:</p>  <pre><code>Error: Could not find or load main class util.decrypt.jar Decryptor exited with 0 </code></pre>  <p>Notice that the issue here is that java tried to launch the class which is actually the path to the jar (the path is util/decrypt.jar, and it executed it as a class util.decrypt.jar)</p>  <p>My code:</p>  <pre><code>bool decrypt_file(const std::string&amp; file) {     int result;     int pipefd[2];     FILE *cmd_output;     char buf[1024];     int status;      result = pipe(pipefd);     if (result &lt; 0) {         throw "pipe error!";     }      pid_t pid = fork(); /* Create a child process */     const std::string decryptJar = "util/decrypt.jar";     int ex;     if ( !fileExists(decryptJar) ) throw "File decryptor does not exist!";      switch (pid) {         case -1: /* Error */ #ifdef _DEBUG             std::cout&lt;&lt;"fork() failed!\n"; #endif             return false;         case 0: /* Child process */             dup2(pipefd[1], STDOUT_FILENO); /* Duplicate writing end to stdout */             close(pipefd[0]);             close(pipefd[1]);              //getJava() returns "/usr/bin/java"             ex = execl(Config::getInstance().getJava().c_str(), "-jar", decryptJar.c_str(), file.c_str(), NULL); /* Execute the program */ #ifdef _DEBUG             std::cout &lt;&lt; "execl() failed! returned "&lt;&lt;ex&lt;&lt;", errno = "&lt;&lt;errno&lt;&lt;"\n"; /* execl doesn't return unless there's an error */             //todo if returned val is 2, java was not found on the system, let the user know! #endif             return false;         default: /* Parent process */             int status;             close(pipefd[1]); /* Close writing end of pipe */             cmd_output = fdopen(pipefd[0], "r"); #ifdef _DEBUG             if (fgets(buf, sizeof buf, cmd_output)) {                 std::string str(buf);                 std::cout&lt;&lt;"OUTPUT: "&lt;&lt;str&lt;&lt;"\n";             } #endif             while (!WIFEXITED(status)) {                 waitpid(pid, &amp;status, 0); /* Wait for the process to complete */             }  #ifdef _DEBUG             std::cout &lt;&lt; "Decryptor exited with " &lt;&lt; WEXITSTATUS(status) &lt;&lt; "\n"; #endif             return true;     } } </code></pre>  <p>The manifest inside the jar is correct (it was generated by eclipse):</p>  <pre><code>Manifest-Version: 1.0 Class-Path: . Main-Class: com.{...}.Decryptor </code></pre>  <p><strong>Add:</strong>  </p>  <p>Trying to change the path to the absolute path of the jar didn't fix the problem.</p>  <pre><code>const std::string decryptJar = workingDir() + "/util/decrypt.jar"; </code></pre>