<p>I wrote a small Java application that I compiled into an executable jar file. The program makes use of a .txt file that is compiled inside the jar file. In order to access the .txt file within the jar, you need to use ClassLoader.getSystemResourceAsSteam("");</p>  <p>Here is the method in the jar file:</p>  <pre><code> private ArrayList&lt;String&gt; loadChainRestaurantsList() throws IOException {         ArrayList chains = new ArrayList();         InputStream in = ClassLoader.getSystemResourceAsStream("chains.txt");         BufferedReader reader = new BufferedReader(new InputStreamReader(in));          String name;         while((name = reader.readLine()) != null) {             chains.add(name);         }          return chains;     } </code></pre>  <p>This code works if I run the jar from cmd-line as a standalone Java program, or from Eclipse. It even works if I export as a jar and then throw it into another Java program and use it, it works as expected. The problem is when I throw the jar into an Android project. I get this error:</p>  <pre><code>FATAL EXCEPTION: AsyncTask #1 10-01 10:40:59.650 8821-8879/? E/AndroidRuntime: Process: com.jasonjohn.unchainedandroid, PID: 8821 10-01 10:40:59.650 8821-8879/? E/AndroidRuntime: java.lang.RuntimeException: An error occured while executing doInBackground() 10-01 10:40:59.650 8821-8879/? E/AndroidRuntime:     at android.os.AsyncTask$3.done(AsyncTask.java) 10-01 10:40:59.650 8821-8879/? E/AndroidRuntime:     at java.util.concurrent.FutureTask.finishCompletion(FutureTask.java:355) 10-01 10:40:59.650 8821-8879/? E/AndroidRuntime:     at java.util.concurrent.FutureTask.setException(FutureTask.java:222) 10-01 10:40:59.650 8821-8879/? E/AndroidRuntime:     at java.util.concurrent.FutureTask.run(FutureTask.java:242) 10-01 10:40:59.650 8821-8879/? E/AndroidRuntime:     at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java) 10-01 10:40:59.650 8821-8879/? E/AndroidRuntime:     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112) 10-01 10:40:59.650 8821-8879/? E/AndroidRuntime:     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587) 10-01 10:40:59.650 8821-8879/? E/AndroidRuntime:     at java.lang.Thread.run(Thread.java:818) 10-01 10:40:59.650 8821-8879/? E/AndroidRuntime:  Caused by: java.lang.NullPointerException: lock == null 10-01 10:40:59.650 8821-8879/? E/AndroidRuntime:     at java.io.Reader.&lt;init&gt;(Reader.java:64) 10-01 10:40:59.650 8821-8879/? E/AndroidRuntime:     at java.io.InputStreamReader.&lt;init&gt;(InputStreamReader.java:120) 10-01 10:40:59.650 8821-8879/? E/AndroidRuntime:     at java.io.InputStreamReader.&lt;init&gt;(InputStreamReader.java:57) 10-01 10:40:59.650 8821-8879/? E/AndroidRuntime:     at com.jasonjohn.unchainedapi.UnchainedAPI.loadChainRestaurantsList(UnchainedAPI.java:123) 10-01 10:40:59.650 8821-8879/? E/AndroidRuntime:     at com.jasonjohn.unchainedapi.UnchainedAPI.getUnchainedRestaurants(UnchainedAPI.java:71) 10-01 10:40:59.650 8821-8879/? E/AndroidRuntime:     at com.jasonjohn.unchainedandroid.MainActivity$UnchainedAsync.doInBackground(MainActivity.java:69) 10-01 10:40:59.650 8821-8879/? E/AndroidRuntime:     at com.jasonjohn.unchainedandroid.MainActivity$UnchainedAsync.doInBackground(MainActivity.java:62) 10-01 10:40:59.650 8821-8879/? E/AndroidRuntime:     at android.os.AsyncTask$2.call(AsyncTask.java) 10-01 10:40:59.650 8821-8879/? E/AndroidRuntime:     at java.util.concurrent.FutureTask.run(FutureTask.java:237) 10-01 10:40:59.650 8821-8879/? E/AndroidRuntime:     at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java)  10-01 10:40:59.650 8821-8879/? E/AndroidRuntime:     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)  10-01 10:40:59.650 8821-8879/? E/AndroidRuntime:     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)  10-01 10:40:59.650 8821-8879/? E/AndroidRuntime:     at java.lang.Thread.run(Thread.java:818)  </code></pre>  <p>I've never seen this error before. Can anyone explain what's going on? I'm assuming the InputStream/InputStreamReader is null, but I don't know how I'd fix this issue.</p>