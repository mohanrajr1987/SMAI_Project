<p>Actually my question was kind of answered already but I can't understand it properly. here is a code snippet:</p>  <pre><code>public class Superclass {     public static void main (String[] args){       Superclass obj = new Subclass();       obj.doSomething(); #prints "from Superclass"    }     private void doSomething(){System.out.println("from Superclass");} }  class Subclass extends Superclass {      private void doSomething(){System.out.println("from Subclass");}  } </code></pre>  <p>It prints out : "from Superclass"</p>  <blockquote>   <p>Since the reference type of the object obj is SuperClass, a call to   doSomething() tries to access the private method defined in SuperClass   itself (private methods cannot be overridden). As doSomething() is   accessible within SuperClass, the main method can call doSomething()   without giving any error/s.</p> </blockquote>  <p>As far as I can imagine the method calling works this way: <em>(maybe I am totally wrong about this)</em>:</p>  <p>The instances of an object store only the data in themselves and when I call an instance method Java takes a look at the type of the reference variable and calls the method from the class of that type. (It seems logical to me and explains why the code above prints "from Superclass") </p>  <p>But changing the access modifier in the first <code>doSomething()</code> method to protected confuses me, because I can't understand how Java knows there is an overriding if the reference type is the <code>SuperClass</code> and not the <code>SubClass</code>. Does overriding change the method in the <code>Superclass</code> as well?</p>  <p>Or am I totally wrong about how method calling and overriding works?</p>  <p>I would really appreciate If someone could help me out and explain what I am missing.</p>