<p>I recently found out that julia assigns objects in a different way than say C# or Java. While the analogue to this:</p>  <pre><code>type Chain     value :: Int     son :: Chain      #Make the last link in the chain point to itself     #so as to spare us from the julia workaround for nulls     Chain(value::Int) = (chain = new(); chain.value = value; chain.son = chain; chain) end  #Create three separate nodes c=Chain(5) d=Chain(2) e=Chain(1)  #Link an object to another and then modify the linked object c.son = d son = d.son son = e c </code></pre>  <p>would effectively change the link for the son in the parent in other languages. In Julia it only works if I do this:</p>  <pre><code>c.son = d d.son = e c </code></pre>  <p>This creates a problem in recursive functions, where if you pass an object to the function which is linked to another object and change it in the body of the function then the link isn't changed, only the object itself.</p>  <p>I have tried using the julia function <code>pointer_from_objref</code>, but this used for handling c functions and the assigning with <code>unsafe_store!</code> didn't work.</p>  <p>How would I go about to create a variable that when assigned to also changes the link to which I referred to?</p>