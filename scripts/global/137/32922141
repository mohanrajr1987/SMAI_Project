<p>I have the following interface (some methods ommited for simplicity):</p>  <pre><code>public interface Container{      public void put(String s, Object o);     public Object get(String s);  } </code></pre>  <p>and its implementation:</p>  <pre><code>public class ContainerImpl implements Container{      private Map&lt;Stirng, Object&gt; m;      public ContainerImpl(){         m = new HashMap&lt;&gt;();     }      //This constructor is used in the case if a client is not satisfied     //by the HashMap, e.g. in case of Enum it's better to use EnumMap     protected ContainerImpl(Map&lt;String, Object&gt; m){         this.m = m;     }      public void put(String s, Object o){         m.put(s, o);     }     public Object get(String s){         m.get(s);     } } </code></pre>  <p>My question is about if providing such a protected constructor contraries to incapsulation. In fact we give to clients some knowledge that internally we use <code>Map</code>. If the dataStructure changed, we'll have to perform a conversion from the map passed as a parameter which may probably cause some bugs, I think.</p>