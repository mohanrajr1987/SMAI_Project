<p>I am trying understand OOP concepts in C#.</p>  <p>In the following sample code:</p>  <ol> <li>why the <code>ins1</code> prefers generic method</li> <li>why the <code>ins2</code>, <code>ins3</code> prefers non-generic method</li> </ol>  <p>Note:when I comment out either of the "MyTestMethod" method, still the program continues to run successfully. This snippet is not something from production. This is just my training sample. So, please do not mind the naming conventions and standards.</p>  <pre><code>using System;  namespace ConsoleApplication1 {     class Program     {         public static void MyTestMethod(J input)         {             Console.WriteLine($"Program.MyTestMethod: {input.Val}");         }         public static void MyTestMethod&lt;T&gt;(T input) where T : J         {             Console.WriteLine($"Program.MyTestMethod&lt;T&gt;: {input.Val}");         }          static void Main(string[] args)         {             J2 ins1 = new J2(1);             MyTestMethod(ins1);              J ins2 = new J(2);             MyTestMethod(ins2);              J ins3 = new J2(3);             MyTestMethod(ins3);              Console.ReadKey();         }     }     internal class J     {         public int Val { get; set; }         public J(int i)         {             Console.WriteLine($"concrete base {i}");             Val = i;         }     }     internal class J2 : J     {         public J2(int i) : base(i * -1)         {             Console.WriteLine($"concrete {i}");         }     } } </code></pre>