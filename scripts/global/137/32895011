<p>I need to write a method that returns a class.</p>  <pre><code>@implementation MyFactory  - (Class)defaultViewClass {   return [MyView class]; }  @end </code></pre>  <p>The returned class is not type safe. You can cast it to any random class. You can also call any random initializer method without a compiler error.</p>  <pre><code>MyFactory *factory = [MyFactory new]; Class viewClass = [factory defaultViewClass]; RandomView *view = [[viewClass alloc] initWithRandomStuff]; </code></pre>  <p>How do I redefine my method to return a Class of a particular type? I want to do something like this, but the compiler complains that it can't return specific class types.</p>  <pre><code>- (AbstractViewClass)defaultViewClass {     return [ConcreteViewClass class]; } </code></pre>  <p>The reason why I need to deal with classes rather than object pointers is because I need to call a static function polymorphically.</p>