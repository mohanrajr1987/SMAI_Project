<p>I'm trying to read a bunch of csv files in SQL Server using SQL Bulk Insert and DataContext.ExecuteCommand. (Maybe this isn't the best way to do it, but it does allow me stay in the Type Provider context--as opposed to with SqlBulkCopy I think.) Now the upload is glitchy with intermittent success. Some files read in, some fail with "Data conversion error (truncation)". I think this has to do with the row terminators not always working. </p>  <p>When the upload works, it seems to be with the '0x0A' terminator. But when that fails, I want to try repeatedly again with other row terminators. So I want to go into a Try statement, and on failure go into another Try statement, and another if that one fails, ... . This may not be the best way to upload, but I am still curious about the Try logic for it's own state. </p>  <p>Here's what I've come up with so far and it's not too pretty (but it works). Cutting out a few nested layers:</p>  <pre><code>let FileRead path =       try         db.DataContext.ExecuteCommand(@"BULK INSERT...ROWTERMINATOR='0x0A')") |&gt; ignore          true     with         | exn -&gt;              try                 db.DataContext.ExecuteCommand(@"BULK INSERT...ROWTERMINATOR='\r')") |&gt; ignore                  true             with                 | exn -&gt;                      try                         db.DataContext.ExecuteCommand(@"BULK INSERT...ROWTERMINATOR='\n')") |&gt; ignore                          true                     with                         | exn -&gt;                              false </code></pre>  <p>This doens't feel right but I haven't figured out any other syntax. </p>