<p>I develop an Universal App that need several custom exceptions to catch errors encountered when calling webservices: NoInternetAccessException, NoJSONException, UserTimeoutException, ...</p>  <p>Here is an example of <strong>one of these classes</strong>:</p>  <pre><code>    public class NoInternetAccessException : Exception     {         private DateTime time;          public DateTime Time { get { return time; } }          public NoInternetAccessException(string message, DateTime time)              : base(message)         {             this.time = time;         }     } </code></pre>  <p>I catch these exceptions at several places:</p>  <p>in a <strong>JSONParser</strong>, where I create the URI and call the Client.GetAsync method:</p>  <pre><code>    ...     try     {         CancellationTokenSource cts = new CancellationTokenSource(Timeout);         response = await client.GetAsync(uri, HttpCompletionOption.ResponseHeadersRead).AsTask(cts.Token);         if (response.IsSuccessStatusCode)             return response;                        }     catch (TaskCanceledException)     {         if ((_currentRetries == MaxRetries)             throw new UserTimeoutException("User Timeout Exception", DateTime.Now);         else             _currentRetries++;     }     catch (Exception e)     {         if (e.HResult == -2147012889)             throw new WrongUrlException("Wrong URL Exception", e, DateTime.Now);     }     ... </code></pre>  <p>in a <strong>WebService helper</strong> where I manage all the webservices calls:</p>  <pre><code>    public static async Task&lt;Infos&gt; GetInfos(String url, List&lt;KeyValuePair&lt;String, String&gt;&gt; parameters, String protocol)     {                 var response = await JSONParser.getJSONFromUrl(url, parameters, "");         Infos infos = new Infos();          try         {             WsResponse wsResponse = JsonConvert.DeserializeObject&lt;Infos&gt;(response.ToString());             infosCe = JsonConvert.DeserializeObject&lt;Infos&gt;(wsResponse.data.ToString());             return infosCe;         }         catch (Exception e)         {             throw new DeserializeException("Deserialize exception", e, DateTime.Now, "Infos");         }     } </code></pre>  <p>All these exceptions are <strong>finally catched by the ViewModels</strong>, after the call to the webservices:</p>  <pre><code>    private async Task&lt;Infos&gt; WebServiceGetInfos()     {         ...         try         {             Infos infos = await WebServices.GetInfos(url, parameters, "");             return infosCe;         }          // Exceptions         catch (DeserializeException dE)         {             ExceptionsMsgboxHelper.MsgboxDeserialize(dE);             return null;         }         catch (NoInternetAccessException niaE)         {             ExceptionsMsgboxHelper.MsgboxNoInternetAccess(niaE, true, "");             return null;         }         catch (NoJSONException njsonE)         {             ExceptionsMsgboxHelper.MsgboxNoJSON(njsonE);             return null;         }         ...     } </code></pre>  <p>I would like so that each exception calls the <strong>ExceptionsMsgboxHelper</strong> helper, that shows a specific Message Dialog per exception:</p>  <pre><code>    public async static void MsgboxNoJSON(NoJSONException njsonE)     {         Windows.UI.Popups.MessageDialog msgbox =         new Windows.UI.Popups.MessageDialog("There is a problem when retrieving data. If the problem persists, please contact your administrator.",             "Unexpected data received");         await msgbox.ShowAsync();     } </code></pre>  <p><strong><em>=> But this doesn't work, as the Message Dialog doesn't work in a Try-Catch clause...</em></strong></p>  <p>I also look for a solution on stackoverflow:</p>  <p><a href="http://stackoverflow.com/questions/20199410/message-dialog-not-showing-in-catch-clause">Message dialog not showing in catch clause</a></p>  <p><a href="http://stackoverflow.com/questions/20198498/try-catch-doesnt-show-message-dialog-box-with-await">Try-Catch doesn't show Message Dialog box with await</a></p>  <p>But I don't see how to adapt this solution to my case, as I use several custom exceptions:</p>  <pre><code>    public static async Task Foo()     {         Exception e = null;         try         {             //just something to throw an exception             int a = 0;             int n = 1 / a;         }         catch (Exception ex)         {             e = ex;         }         if (e != null)             await ShowDialog();     } </code></pre>  <p><strong><em>=> Is it a better way to do this than duplicate this code to each custom exception?</em></strong></p>  <pre><code>    ...     DeserializeException dEx = null;     NoInternetAccessException niaEx = null;     NoJSONException njsonEx = null;     try     {         Infos infos = await WebServices.GetInfos(url, parameters, "");         return infosCe;     }      // Exceptions     catch (DeserializeException dE)     {         dEx = de;     }     catch (NoInternetAccessException niaE)     {         niaEx = niaE;     }     catch (NoJSONException njsonE)     {         njsonEx=njsonE;     }     ...     if (dEx != null)     {         ExceptionsMsgboxHelper.MsgboxDeserialize(dEx);         return null;     }     if (niaEx != null)     {         ExceptionsMsgboxHelper.MsgboxNoInternetAccess(niaEx);         return null;     }     if (njsonEx != null)     {         ExceptionsMsgboxHelper.MsgboxNoJSON(njsonEx);         return null;     }     ... </code></pre>  <p><strong><em>=> It doesn't seem to be powerfull or maintainable...</em></strong></p>