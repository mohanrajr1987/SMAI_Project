<p>At the top of my program, I have an exception handler.<br> It looks something like this:  </p>  <pre><code>try{     //majority of program } catch(...){    Handle_All_Exceptions(); }   void Handle_All_Exceptions(){    try{throw;}    catch(TypeA const&amp; e){Handle(e)       ;}    catch(TypeB const&amp; e){Handle(e)       ;}    catch(TypeC const&amp; e){Handle(e)       ;}    catch(TypeD const&amp; e){Handle(e)       ;}    catch(...)           {Handle_Unknown();}  }  void Handle(TypeA const&amp; e){     //... } void Handle(TypeB const&amp; e){     //... } void Handle(TypeC const&amp; e){     //... } void Handle(TypeD const&amp; e){     //... } void Handle_Unknown(){     //... } </code></pre>  <p>As I obtain more an more exception types,<br> I'd like to take a more generic approach.<br> <strong>How can I apply generic programming to the</strong> <code>Handle_All_Exceptions</code> <strong>function?</strong></p>  <hr>  <p>Would something like this be possible in newer versions of C++?  </p>  <pre><code>catch(auto e){Handle(e)}; catch(...){Handle_Unknown();} </code></pre>