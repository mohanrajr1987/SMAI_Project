<p>I have the following interfaces:</p>  <pre><code>//define a method to create a Stream from a generic source interface IStream {     Stream GetStream(); } </code></pre>  <p>and</p>  <pre><code>//define a method to deserialize an object from a stream interface IDeserializer&lt;T&gt; {     T GetObject(); } </code></pre>  <p>and the two following classes that implement them:</p>  <pre><code>//create a new Stream from a URL source class UrlReader : IStream {     private String url;      public UrlReader(String u)     { url = u; }      public Stream GetStream()     {         using (var client = new WebClient())         {             Stream stream = client.OpenRead(url);             return stream;         }     } } </code></pre>  <p>and</p>  <pre><code>//deserialize a JSON object implementing the interface IDeserializer class JsonDeserializer&lt;T&gt; : IDeserializer&lt;T&gt; {     private String json;      public JsonDeserializer(String j)     { json = j; }      public T GetObject()     {         return JsonConvert.DeserializeObject&lt;T&gt;(json);     } } </code></pre>  <p>I would like to add the try and catch block to both methods to manage exceptions however if I do so not all code paths will return a value. I know a way to resolve this problem is to decalre and initialize the variable to return before the try block. However I cannot initialize a variable of type Stream as this is an abstract class and I cannot initialize a variable of generic type T. Can you please advise how to solve this problem?</p>