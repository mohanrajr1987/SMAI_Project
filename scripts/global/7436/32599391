<p>So I have a class with two methods in it:</p>  <pre><code>class Test:     def cycle(self, n=float("inf"), block="x"):         try:                         self.cycle(n-1, block)         except RuntimeError as e:             if str(e) == "maximum recursion depth exceeded":                 print("... forever")                 return 10     def f(self):         try:              raise Exception()         except:             return 10         return 20   x = Test() print(x.cycle()) print(x.f()) </code></pre>  <p>and it outputs:</p>  <pre><code>... forever None 10 </code></pre>  <p>What gives? Why can I return from one except and not the other? I can print normally from the first except as well, but it always returns <code>None</code></p>