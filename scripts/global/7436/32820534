<p>I have a generic function to catch all exceptions included in my package <a href="https://github.com/jangorecki/logR/blob/804b6177e70043c92c83dc8840de391d9a107b76/R/logR.R#L21" rel="nofollow"><code>logR::tryCatch2</code></a>  defined as:    </p>  <p></p>  <pre><code>tryCatch2 &lt;- function(expr){     V=E=W=M=I=NULL     e.handler = function(e){         E &lt;&lt;- e         NULL     }     w.handler = function(w){         W &lt;&lt;- c(W, list(w))         invokeRestart("muffleWarning")     }     m.handler = function(m){         attributes(m$call) &lt;- NULL         M &lt;&lt;- c(M, list(m))     }     i.handler = function(i){         I &lt;&lt;- i         NULL     }     V = suppressMessages(withCallingHandlers(         tryCatch(expr, error = e.handler, interrupt = i.handler),         warning = w.handler,         message = m.handler     ))     list(value=V, error=E, warning=W, message=M, interrupt=I) } </code></pre>  <p>As you can see in the last line it returns a list which is more or less self describing.<br> It makes the real reaction to the exceptions delayed after the <code>tryCatch2</code> call by simple <code>!is.null</code>:  </p>  <p></p>  <pre><code>f = function(){ warning("warn1"); warning("warn2"); stop("err") } r = tryCatch2(f()) if(!is.null(r$error)) cat("Error detected\n") # Error detected if(!is.null(r$warning)) cat("Warning detected, count", length(r$warning), "\n") # Warning detected, count 2  </code></pre>  <p>It works as expected, I can react with my own code. But in some cases I would like to not stop the <em>interrupt</em> process which is catch too. At the moment it seems I would need to add additional parameter to <code>tryCatch2</code> which would control if interrupts should be catch or not. So the question asks about some <code>invokeInterrupt</code> function which I could use in the following way:  </p>  <pre><code>g = function(){ Sys.sleep(60); f() } r = tryCatch2(g()) # interrupt by pressing ctrl+c / stop while function is running! if(!is.null(r$interrupt)) cat("HERE I would like to invoke interrupt\n") # HERE I would like to invoke interrupt </code></pre>  <p>I think if R is able to catch one it should be also able to invoke one.<br> How can I achieve <code>invokeInterrupt</code> functionality?  </p>