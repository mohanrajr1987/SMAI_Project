<p>Hi I am trying to display the FB login button (js Facebook sdk) in my app, but the button doesn't show. Can you help please ?</p>  <p>app.js:</p>  <pre><code>.run(['$rootScope', '$window', 'sAuth',  "isPhoneGap","connectionStatus", 'updateProDB', "$ionicPlatform", '$q', 'sessionService', 'imagesService', function($rootScope, $window, sAuth, isPhoneGap, connectionStatus, updateProDB, $ionicPlatform, $q, sessionService, imagesService) {   $ionicPlatform.ready(function() {     // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard     // for form inputs)     if(window.cordova &amp;&amp; window.cordova.plugins.Keyboard) {       cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);     }     if(window.StatusBar) {       // org.apache.cordova.statusbar required       StatusBar.styleDefault();     }   });    //CHECK IF PhoneGap and if online using the services.   // console.log("avant connectionStatus, isPhoneGap = "+isPhoneGap);   // console.log("ok connectionStatus = "+connectionStatus);    //DEBUG   //updateProDB(connectionStatus, debugOptionUseLocalDB);   var promise = updateProDB.get();   //console.log('promise dans app.js');   //console.log(promise);   promise.then(           function(prodata) {               var prodata = sessionService.get('prodata');                var imagesUrls = imagesService.manage(prodata);               console.log('imagesUrls in app.js :');               console.log(imagesUrls);               sessionService.store('imagesUrls', imagesUrls);           },           function(error) {            });     // FOR FACEBOOK LOGIN:    $rootScope.user = {};    $window.fbAsyncInit = function() {     // Executed when the SDK is loaded     console.log("fbAsyncInit is launching FB.init...");     FB.init({        //  The app id of the web app; To register a new app visit Facebook App Dashboard ( https://developers.facebook.com/apps/ )       appId: '583996261696416',        // Adding a Channel File improves the performance  of the javascript SDK, by addressing issues  with cross-domain communication in certain browsers.       channelUrl: 'templates/channel.html',        //  Set if you want to check the authentication status at the start up of the app        status: true,        //        Enable cookies to allow the server to access the session         cookie: true,       // Parse XFBML       xfbml: true      });      //sAuth.logout();     sAuth.watchLoginChange();     sAuth.getLoginStatus();     };    (function(d){     // load the Facebook javascript SDK     var js,      id = 'facebook-jssdk',      ref = d.getElementsByTagName('script')[0];     if (d.getElementById(id)) {       return;     }     js = d.createElement('script');      js.id = id;      js.async = true;     js.src = "//connect.facebook.net/en_US/all.js";     ref.parentNode.insertBefore(js, ref);   }(document));  }]) </code></pre>  <p>login.html:</p>  <pre><code>&lt;div class="modal"&gt;   &lt;ion-header-bar&gt;     &lt;h1 class="title"&gt;Login&lt;/h1&gt;     &lt;div class="buttons"&gt;       &lt;button class="button button-clear" ng-click="closeLogin()"&gt;Close&lt;/button&gt;     &lt;/div&gt;   &lt;/ion-header-bar&gt;   &lt;ion-content&gt;    &lt;fb:login-button show-faces="true" max-rows="1" size="large"&gt;Login with Facebook&lt;/fb:login-button&gt;    &lt;/ion-content&gt; &lt;/div&gt; </code></pre>  <p>service.js:</p>  <pre><code>.service('sAuth', ['$rootScope', function ($rootScope) {      this.watchLoginChange = function() {         var _self = this;         FB.Event.subscribe('auth.authResponseChange', function(res) {         if (res.status === 'connected') {             console.log('connected');           /* The user is already logged,  is possible retrieve his personal info    */           _self.getUserInfo();           /* This is also the point where you should create a             session for the current user.            For this purpose you can use the data inside the             res.authResponse object.           */         }          else {             console.log("the user is not logged");           /*   The user is not logged to the app, or into Facebook:  destroy the session on the server.   */         }         });     };      this.getLoginStatus = function(){         FB.getLoginStatus(function(response) {           if (response.status === 'connected') {             // the user is logged in and has authenticated your             // app, and response.authResponse supplies             // the user's ID, a valid access token, a signed             // request, and the time the access token              // and signed request each expire             var uid = response.authResponse.userID;             var accessToken = response.authResponse.accessToken;             console.log('connected selon getLoginStatus ');           } else if (response.status === 'not_authorized') {             // the user is logged in to Facebook,              // but has not authenticated your app            } else {             // the user isn't logged in to Facebook.             console.log('not connected selon getLoginStatus ');           }         });     };      this.getUserInfo = function() {       var _self = this;       FB.api('/me', function(res) {         $rootScope.$apply(function() {            $rootScope.user = _self.user = res;          });       });     };      this.logout = function() {       var _self = this;       FB.logout(function(response) {         $rootScope.$apply(function() {            $rootScope.user = _self.user = {};          });        });     }      return this; }]) </code></pre>