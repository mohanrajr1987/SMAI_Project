<p>I'm putting together a repo that will be available on npm. The repo consists of multiple modules, similar to <a href="https://github.com/PaulLeCam/react-leaflet" rel="nofollow">react-leaflet</a> and <a href="https://github.com/esbullington/react-d3" rel="nofollow">react-d3</a>. Application developers will include modules from within the npm package via <code>require</code>/<code>import</code>, e.g.:</p>  <pre><code>import { ModuleOne, ModuleTwo } from 'myNpmPackage`; </code></pre>  <p>I need to package CSS along with each of these modules, and that CSS will be compiled from Sass files within each module.</p>  <p>Given a folder structure for <code>myNpmPackage</code> like:</p>  <pre><code>├── src │   ├── ModuleOne │   │   ├── index.js │   │   ├── style.scss │   ├── ModuleTwo │   │   ├── index.js │   │   ├── style.scss ├── package.json </code></pre>  <p>What is a good publish flow to make those <code>.scss</code> files (compiled into <code>.css</code>) available to consumers of <code>myNpmPackage</code>, without requiring that consumers explicitly include / <code>@import</code> / <code>link rel="stylesheet"</code> the CSS?</p>  <p>I'm using <a href="http://gulpjs.com/" rel="nofollow">gulp</a> and <a href="http://browserify.org/" rel="nofollow">browserify</a> and would prefer to stick with that pipeline.</p>  <hr>  <p><strong>UPDATE:</strong> I've found <a href="https://github.com/rotundasoftware/parcelify" rel="nofollow"><code>parcelify</code></a> does <em>some</em> of what I need. I add the following to <code>myNpmPackage/package.json</code>:</p>  <pre><code>"style": "src/**/*.scss", "transforms": [   "sass-css-stream" ] </code></pre>  <p>and add <code>parcelify</code> to <code>dependencies</code>, so that it's installed along with <code>myNpmPackage</code>.</p>  <p>Consumers of <code>myNpmPackage</code> must then add the following to their <code>gulpfile</code>:</p>  <pre><code>parcelify(b, {     bundles: {         style: './build/modules.css'     } }); </code></pre>  <p><code>parcelify</code> will use the <code>"style"</code> glob in <code>myNpmPackage/package.json</code> to round up all the <code>.scss</code> files in <code>myNpmPackage</code>'s modules and bundle them into <code>./build/modules.css</code>.</p>  <p>This is getting there, but not ideal for two reasons:</p>  <ol> <li>The CSS files from each module are all included in the consumer application build, even if not all the modules are included;</li> <li>This strategy requires the consumer application developer to add code to their <code>gulpfile</code> instead of "just working".</li> </ol>