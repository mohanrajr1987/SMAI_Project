<p>I've looked all over to try to find a solution to this problem, but so far no luck - even using the <a href="https://gist.github.com/branneman/8048520" rel="nofollow">awesome gist about better local require paths</a> and reading and re-reading the Browserify handbook's entry on <a href="https://github.com/substack/browserify-handbook#avoiding-" rel="nofollow">Avoiding ../../../../..</a>, I can't seem to find a working solution for this problem.</p>  <p>I have a library, built with Browserify, that I'm trying to publish to npm, which you can <a href="https://github.com/mmlc/Classy" rel="nofollow">find for yourself</a> if you want to test what I'm describing here. The catch is: <strong>I want to publish it to NPM without using relative paths in my calls to <code>require()</code>, which is how it works when I'm using Browserify.</strong></p>  <p>See, using Browserify's <code>opts.paths</code> I'm able to change my <code>require()</code>s from stuff like</p>  <pre><code>var Classy$Base = require('./base') // and in another file var Classy$Module = require('../../module') </code></pre>  <p>to</p>  <pre><code>var Classy$Base = require('classy/base') // and in another file var Classy$Module = require('classy/module') </code></pre>  <p>Which is great! And it works great! And when I <code>gulp bundle</code> I get a working <code>classy.bundle.js</code> back and life is good.</p>  <p>So then I <code>npm link</code> and, in another project (which also uses Browserify), <code>npm link classy-js</code>, and nothing works. I get errors from inside of <code>require('classy-js')</code> saying things like "could not find module 'classy/base' from 'node_modules/classy-js/src...'" etc.</p>  <p>I want to be able to create a library where I can <code>require('classy-js')</code> and <code>require('classy-js/classy/module')</code> and get access to all the other useful submodules of the library, without sacrificing the non-relative paths inside of the library's own code.</p>  <p><strong>Is there a way I can do this?</strong></p>  <p>I have tried using <a href="http://npmjs.com/package/app-module-path" rel="nofollow">app-module-path</a> but Browserify errors-out when using that, and I tried using <a href="http://npmjs.com/package/require-root" rel="nofollow">require-root</a> with a similar result.</p>  <p>I have also tried symlinks, and adding an npm postInstall script for automatically generating symlinks, also to no avail.</p>  <p>It really seems like this shouldn't be so hard to do...</p>