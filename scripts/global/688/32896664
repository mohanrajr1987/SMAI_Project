<p>I have a NodeJs Express proxy front-ending a cloud OData API that works on a OAuth Bearer token. The express proxy serves as an authentication middleware </p>  <ol> <li>handling SAML2 interaction with an ADFS server to fetch the nameId</li> <li>uses the nameId and other a OAuth Client token to obtain a bearer token with a 30 min validity.(/logon flow)</li> </ol>  <p>Now the question is: whether to create a session in the Express proxy or not?</p>  <p>If yes, then I would use <a href="https://github.com/expressjs/session" rel="nofollow">https://github.com/expressjs/session</a>. </p>  <p>If no, then I would use <a href="https://github.com/mozilla/node-client-sessions" rel="nofollow">https://github.com/mozilla/node-client-sessions</a> to create a client session only. This way I can just pass on the client session (Bearer 32asdsadsadsadsdTOKEN ) to the backend proxy.</p>  <p><strong>Con</strong>: Since /logon flow that returned a bearer token has already created a session in the backend cloud, creating another session in the proxy wouldn't be performant. Moreso when we are dealing with a multi cluster setup and the session needs to be stored in MySQL or PostgresSQL.</p>  <p><strong>Pro</strong>: With a proxy level session (with for e.g. <a href="https://github.com/expressjs/session" rel="nofollow">https://github.com/expressjs/session</a>), I can completely obfuscate the cloud backend from the user. And also there is no easy way to break the sid cookie.</p>  <p>Is there anything that I am missing? What's the ideal choice?</p>