<p>I have a set of public APIs that take in an id and some parameters.  Clients (could be browsers or mobile phones), each having their own <code>int</code> ids, can interact with these public APIs.  Of course, we don't want a situation where client changes his id and send a request screwing things up for other people thus, when authentication takes place, a <code>GUID</code> is sent to the client as an authentication token.  All subsequent request must include that authentication token.  On the server, the back end does a look up in the DB to match the <code>GUID</code> with the id.  If they match, the process can go forward otherwise UnauthorizedAccessException is thrown.  All works fine and dandy.</p>  <p>But of course, the problem is that every operation does a db look up.  I did some caching but then caching the authentication token has its own issues (tears tears).  </p>  <p>One other way to do it is to encrypt something and pass it in the query string.  But then when the request comes in, I have decrypt the string to see if it's valid.  There is no free lunch there.</p>  <p>asp.net sets an encrypted cookie for authentication.  But the view state encrypts things in the hidden field.  The encrypted cookie doesn't work for me since I'm passing around JSON/SOAP (some clients send json some send xml).  </p>  <p>If you actually read all the above, then thank you and I look forward to your input! Otherwise and for others, <strong>the question is</strong> , is there a "best-practice" around my dilemma?  </p>