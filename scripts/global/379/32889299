<p>I am using a lot of string functions like <em>strncpy</em>, <em>strncat</em>, <em>sprintf</em> etc. in my code. I know there are better alternatives to these, but I was handed over an old project, where these functions were used, so I have to stick with them for compatibility and consistency. My supervisor is very fussy about error checking and robustness, and insists that I check for buffer-overflow violations everytime I use these functions. This has created a lot of if-else statements in my code, which do not look pretty. My question is, is it really necessary to check for overflow everytime I call one of these functions? Even if I know that a buffer overflow can't possibly occur e.g. when storing an integer in a string using the sprintf function</p>  <p><code>sprintf(buf,"%d",someInteger);</code></p>  <p>I know that the maximum length of an unsigned integer on a 64-bit system can be 20 digits. <em>buf</em> on the other hand is well over 20 characters long. Should I still check for buffer overflow in this case?</p>