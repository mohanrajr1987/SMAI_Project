<p>I am currently tackling this assignment for my computer science class:</p>  <p>Make your own dynamic array template. It should allow creating contiguous arrays (filled with things of the same type) which you can extend without worrying about running out of space.</p>  <p>Do one version using malloc and free.</p>  <p>Do one version using new and delete.</p>  <p>My version using new and delete works flawlessly; however, in trying to convert my new/delete code to using malloc/free, I keep getting a seg fault. I have narrowed down the segfault (I think), to being in a single function: addData. Take a look at the code in my main I used to test this:</p>  <pre><code>Array2&lt;int&gt; *testArray3 = new Array2&lt;int&gt;(5); Array2&lt;int&gt; *testArray4; testArray3-&gt;initArray(); testArray3-&gt;printArray(); testArray4 = testArray3-&gt;addData(7); testArray4-&gt;printArray();  return 0; </code></pre>  <p>This gives a seg fault; however, when I change it to this: </p>  <pre><code>Array2&lt;int&gt; *testArray3 = new Array2&lt;int&gt;(5); Array2&lt;int&gt; *testArray4; testArray3-&gt;initArray(); testArray3-&gt;printArray(); testArray4 = testArray3; //-&gt;addData(7); testArray4-&gt;printArray(); return 0; </code></pre>  <p>There is no seg fault. This makes me believe the issue is in my addData function. Here is the code for that: </p>  <pre><code>Array2&lt;T&gt; *addData(T dataToAdd){     Array2 &lt;T&gt; *tmp;     tmp-&gt;data = this-&gt;getData();     Array2 &lt;T&gt; *newData;     newData-&gt;data = (T *) malloc(sizeof(T)*(this-&gt;size + 1));      for (int i = 0; i &lt; tmp-&gt;getSize() + 1; ++i){         if (i &lt; tmp-&gt;getSize()){             //newData-&gt;data[i] = tmp-&gt;data[i];             newData-&gt;setData(tmp-&gt;getData()[i], i);         }         else{             //newData-&gt;data[i] = dataToAdd;             newData-&gt;setData(dataToAdd, i);         }     }      free(tmp-&gt;data);     free(this-&gt;data);     return newData; }; </code></pre>  <p>I am new to programming as a whole and have not completely wrapped my head around pointers and memory allocation, etc. Any advice you could give me would be greatly appreciated! In case you need to see the rest of the code, here is the entire file I coded my template in. Thank you so much for your time!</p>  <pre><code>#include &lt;iostream&gt; #include &lt;string&gt; #include &lt;cstdlib&gt; #include &lt;sstream&gt; using namespace std;  template&lt;typename T&gt; class Array2{ public:     Array2(int size){         this-&gt;size = size;         data = (T *) malloc(sizeof(T)*size);      };     Array2&lt;T&gt; *addData(T dataToAdd){         Array2 &lt;T&gt; *tmp;         tmp-&gt;data = this-&gt;getData();         Array2 &lt;T&gt; *newData;         newData-&gt;data = (T *) malloc(sizeof(T)*(this-&gt;size + 1));          for (int i = 0; i &lt; tmp-&gt;getSize() + 1; ++i){             if (i &lt; tmp-&gt;getSize()){                 //newData-&gt;data[i] = tmp-&gt;data[i];                 newData-&gt;setData(tmp-&gt;getData()[i], i);             }             else{                 //newData-&gt;data[i] = dataToAdd;                 newData-&gt;setData(dataToAdd, i);             }         }          free(tmp-&gt;data);         free(this-&gt;data);         return newData;    };     ~Array2(){         free(this-&gt;data);       };     void initArray(){         for (int i = 0; i &lt; this-&gt;size; ++i){             //this-&gt;data[i] = i;             this-&gt;setData(i, i);         }     };     void printArray(){         //ostringstream oss;         string answer = "";          for (int i = 0; i &lt; this-&gt;size; ++i){             //oss &lt;&lt; this-&gt;data[i] + " ";             cout &lt;&lt; this-&gt;data[i] &lt;&lt; " ";         }          //answer = oss.str();          cout &lt;&lt; answer &lt;&lt; endl;     };     T* getData(){         return this-&gt;data;     }     int getSize(){         return this-&gt;size;     }     void setData(T data, int index){         this-&gt;getData()[index] = data;     } private:     int size;     T* data; }; </code></pre>