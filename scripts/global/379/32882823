<p>Consider the following code:</p>  <pre><code>enum MyErrorType:ErrorType {     case BadTimes }  var mightHaveAValue: String?  do {      if let value = mightHaveAValue {         // do stuff with value     } else {         throw MyErrorType.BadTimes     }      // do stuff with NSFileManager using mightHaveAValue which might throw  } catch {     // handle error } </code></pre>  <p>...in which I have a large do/try/catch block. In this instance the error handling will be the same, whether <code>mightHaveAValue</code> is empty or something bad happens with <code>NSFileManager</code> later on. So it makes sense to re-use the error handling code.</p>  <p>Is this the cleanest approach going in Swift2, or is there some way I can automatically throw/catch on unwrapping an optional with no value?</p>