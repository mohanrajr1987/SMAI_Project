<p>I am getting the below error when trying to send a mail from my store.</p>  <pre><code>PHP Notice:  Error: DATA not accepted from server! in /var/www/html/system/library/mail.php on line 417   Opencart version - 2.0.3.1 Email Settings:   Protocol : SMTP   Hostname : ssl://smtp.zoho.com   port : 465   Timeout : 15 </code></pre>  <p>Source code of mail.php is as below:</p>  <pre><code>&lt;?php class Mail { protected $to; protected $from; protected $sender; protected $replyto; protected $subject; protected $text; protected $html; protected $attachments = array(); public $protocol = 'mail'; public $smtp_hostname; public $smtp_username; public $smtp_password; public $smtp_port = 25; public $smtp_timeout = 5; public $newline = "\n"; public $verp = false; public $parameter = '';  public function __construct($config = array()) {     foreach ($config as $key =&gt; $value) {         if ($value) {             $this-&gt;$key = $value;         }     } }  public function setTo($to) {     $this-&gt;to = html_entity_decode($to, ENT_QUOTES, 'UTF-8'); }  public function setFrom($from) {     $this-&gt;from = html_entity_decode($from, ENT_QUOTES, 'UTF-8'); }  public function setSender($sender) {     $this-&gt;sender = html_entity_decode($sender, ENT_QUOTES, 'UTF-8'); }  public function setReplyTo($reply_to) {     $this-&gt;replyto = html_entity_decode($reply_to, ENT_QUOTES, 'UTF-8'); }  public function setSubject($subject) {     $this-&gt;subject = html_entity_decode($subject, ENT_QUOTES, 'UTF-8'); }  public function setText($text) {     $this-&gt;text = html_entity_decode($text, ENT_QUOTES, 'UTF-8'); }  public function setHtml($html) {     $this-&gt;html = html_entity_decode($html, ENT_QUOTES, 'UTF-8'); }  public function addAttachment($filename) {     $this-&gt;attachments[] = $filename; }  public function send() {     if (!$this-&gt;to) {         trigger_error('Error: E-Mail to required!');         exit();     }      if (!$this-&gt;from) {         trigger_error('Error: E-Mail from required!');         exit();     }      if (!$this-&gt;sender) {         trigger_error('Error: E-Mail sender required!');         exit();     }      if (!$this-&gt;subject) {         trigger_error('Error: E-Mail subject required!');         exit();     }      if ((!$this-&gt;text) &amp;&amp; (!$this-&gt;html)) {         trigger_error('Error: E-Mail message required!');         exit();     }      if (!$this-&gt;replyto) {         $this-&gt;setReplyTo($this-&gt;sender);     }      if (is_array($this-&gt;to)) {         $to = implode(',', $this-&gt;to);     } else {         $to = $this-&gt;to;     }      $boundary = '----=_NextPart_' . md5(time());      $header = 'MIME-Version: 1.0' . $this-&gt;newline;      if ($this-&gt;protocol != 'mail') {         $header .= 'To: ' . $to . $this-&gt;newline;         $header .= 'Subject: ' . '=?UTF-8?B?' . base64_encode($this-&gt;subject) . '?=' . $this-&gt;newline;     }      $header .= 'Date: ' . date('D, d M Y H:i:s O') . $this-&gt;newline;     $header .= 'From: =?UTF-8?B?' . base64_encode($this-&gt;sender) . '?=' . ' &lt;' . $this-&gt;from . '&gt;' . $this-&gt;newline;     $header .= 'Reply-To: =?UTF-8?B?' . base64_encode($this-&gt;replyto) . '?=' . ' &lt;' . $this-&gt;from . '&gt;' . $this-&gt;newline;     $header .= 'Return-Path: ' . $this-&gt;from . $this-&gt;newline;     $header .= 'X-Mailer: PHP/' . phpversion() . $this-&gt;newline;     $header .= 'Content-Type: multipart/related; boundary="' . $boundary . '"' . $this-&gt;newline . $this-&gt;newline;      if (!$this-&gt;html) {         $message  = '--' . $boundary . $this-&gt;newline;         $message .= 'Content-Type: text/plain; charset="utf-8"' . $this-&gt;newline;         $message .= 'Content-Transfer-Encoding: 8bit' . $this-&gt;newline . $this-&gt;newline;         $message .= $this-&gt;text . $this-&gt;newline;     } else {         $message  = '--' . $boundary . $this-&gt;newline;         $message .= 'Content-Type: multipart/alternative; boundary="' . $boundary . '_alt"' . $this-&gt;newline . $this-&gt;newline;         $message .= '--' . $boundary . '_alt' . $this-&gt;newline;         $message .= 'Content-Type: text/plain; charset="utf-8"' . $this-&gt;newline;         $message .= 'Content-Transfer-Encoding: 8bit' . $this-&gt;newline . $this-&gt;newline;          if ($this-&gt;text) {             $message .= $this-&gt;text . $this-&gt;newline;         } else {             $message .= 'This is a HTML email and your email client software does not support HTML email!' . $this-&gt;newline;         }          $message .= '--' . $boundary . '_alt' . $this-&gt;newline;         $message .= 'Content-Type: text/html; charset="utf-8"' . $this-&gt;newline;         $message .= 'Content-Transfer-Encoding: 8bit' . $this-&gt;newline . $this-&gt;newline;         $message .= $this-&gt;html . $this-&gt;newline;         $message .= '--' . $boundary . '_alt--' . $this-&gt;newline;     }      foreach ($this-&gt;attachments as $attachment) {         if (file_exists($attachment)) {             $handle = fopen($attachment, 'r');              $content = fread($handle, filesize($attachment));              fclose($handle);              $message .= '--' . $boundary . $this-&gt;newline;             $message .= 'Content-Type: application/octet-stream; name="' . basename($attachment) . '"' . $this-&gt;newline;             $message .= 'Content-Transfer-Encoding: base64' . $this-&gt;newline;             $message .= 'Content-Disposition: attachment; filename="' . basename($attachment) . '"' . $this-&gt;newline;             $message .= 'Content-ID: &lt;' . basename(urlencode($attachment)) . '&gt;' . $this-&gt;newline;             $message .= 'X-Attachment-Id: ' . basename(urlencode($attachment)) . $this-&gt;newline . $this-&gt;newline;             $message .= chunk_split(base64_encode($content));         }     }      $message .= '--' . $boundary . '--' . $this-&gt;newline;      if ($this-&gt;protocol == 'mail') {         ini_set('sendmail_from', $this-&gt;from);          if ($this-&gt;parameter) {             mail($to, '=?UTF-8?B?' . base64_encode($this-&gt;subject) . '?=', $message, $header, $this-&gt;parameter);         } else {             mail($to, '=?UTF-8?B?' . base64_encode($this-&gt;subject) . '?=', $message, $header);         }     } elseif ($this-&gt;protocol == 'smtp') {         $is_tls = substr($this-&gt;smtp_hostname, 0, 3) == 'tls';         $hostname = $is_tls ? substr($this-&gt;smtp_hostname, 6) : $this-&gt;smtp_hostname;         $handle = fsockopen($hostname, $this-&gt;smtp_port, $errno, $errstr, $this-&gt;smtp_timeout);          if (!$handle) {             trigger_error('Error: ' . $errstr . ' (' . $errno . ')');             exit();         } else {             if (substr(PHP_OS, 0, 3) != 'WIN') {                 socket_set_timeout($handle, $this-&gt;smtp_timeout, 0);             }              while ($line = fgets($handle, 515)) {                 if (substr($line, 3, 1) == ' ') {                     break;                 }             }              fputs($handle, 'EHLO ' . getenv('SERVER_NAME') . "\r\n");              $reply = '';              while ($line = fgets($handle, 515)) {                 $reply .= $line;                  if (substr($line, 3, 1) == ' ') {                     break;                 }             }              if (substr($reply, 0, 3) != 250) {                 trigger_error('Error: EHLO not accepted from server!');                 exit();             }              if ($is_tls) {                 fputs($handle, 'STARTTLS' . "\r\n");                  $reply = '';                  while ($line = fgets($handle, 515)) {                     $reply .= $line;                      if (substr($line, 3, 1) == ' ') {                         break;                     }                 }                  if (substr($reply, 0, 3) != 220) {                     trigger_error('Error: STARTTLS not accepted from server!');                     exit();                 }                  stream_socket_enable_crypto($handle, true, STREAM_CRYPTO_METHOD_TLS_CLIENT);             }              if (!empty($this-&gt;smtp_username)  &amp;&amp; !empty($this-&gt;smtp_password)) {                 fputs($handle, 'EHLO ' . getenv('SERVER_NAME') . "\r\n");                  $reply = '';                  while ($line = fgets($handle, 515)) {                     $reply .= $line;                      if (substr($line, 3, 1) == ' ') {                         break;                     }                 }                  if (substr($reply, 0, 3) != 250) {                     trigger_error('Error: EHLO not accepted from server!');                     exit();                 }                  fputs($handle, 'AUTH LOGIN' . "\r\n");                  $reply = '';                  while ($line = fgets($handle, 515)) {                     $reply .= $line;                      if (substr($line, 3, 1) == ' ') {                         break;                     }                 }                  if (substr($reply, 0, 3) != 334) {                     trigger_error('Error: AUTH LOGIN not accepted from server!');                     exit();                 }                  fputs($handle, base64_encode($this-&gt;smtp_username) . "\r\n");                  $reply = '';                  while ($line = fgets($handle, 515)) {                     $reply .= $line;                      if (substr($line, 3, 1) == ' ') {                         break;                     }                 }                  if (substr($reply, 0, 3) != 334) {                     trigger_error('Error: Username not accepted from server!');                     exit();                 }                  fputs($handle, base64_encode($this-&gt;smtp_password) . "\r\n");                  $reply = '';                  while ($line = fgets($handle, 515)) {                     $reply .= $line;                      if (substr($line, 3, 1) == ' ') {                         break;                     }                 }                  if (substr($reply, 0, 3) != 235) {                     trigger_error('Error: Password not accepted from server!');                     exit();                 }             } else {                 fputs($handle, 'HELO ' . getenv('SERVER_NAME') . "\r\n");                  $reply = '';                  while ($line = fgets($handle, 515)) {                     $reply .= $line;                      if (substr($line, 3, 1) == ' ') {                         break;                     }                 }                  if (substr($reply, 0, 3) != 250) {                     trigger_error('Error: HELO not accepted from server!');                     exit();                 }             }              if ($this-&gt;verp) {                 fputs($handle, 'MAIL FROM: &lt;' . $this-&gt;from . '&gt;XVERP' . "\r\n");             } else {                 fputs($handle, 'MAIL FROM: &lt;' . $this-&gt;from . '&gt;' . "\r\n");             }              $reply = '';              while ($line = fgets($handle, 515)) {                 $reply .= $line;                  if (substr($line, 3, 1) == ' ') {                     break;                 }             }              if (substr($reply, 0, 3) != 250) {                 trigger_error('Error: MAIL FROM not accepted from server!');                 exit();             }              if (!is_array($this-&gt;to)) {                 fputs($handle, 'RCPT TO: &lt;' . $this-&gt;to . '&gt;' . "\r\n");                  $reply = '';                  while ($line = fgets($handle, 515)) {                     $reply .= $line;                      if (substr($line, 3, 1) == ' ') {                         break;                     }                 }                  if ((substr($reply, 0, 3) != 250) &amp;&amp; (substr($reply, 0, 3) != 251)) {                     trigger_error('Error: RCPT TO not accepted from server!');                     exit();                 }             } else {                 foreach ($this-&gt;to as $recipient) {                     fputs($handle, 'RCPT TO: &lt;' . $recipient . '&gt;' . "\r\n");                      $reply = '';                      while ($line = fgets($handle, 515)) {                         $reply .= $line;                          if (substr($line, 3, 1) == ' ') {                             break;                         }                     }                      if ((substr($reply, 0, 3) != 250) &amp;&amp; (substr($reply, 0, 3) != 251)) {                         trigger_error('Error: RCPT TO not accepted from server!');                         exit();                     }                 }             }              fputs($handle, 'DATA' . "\r\n");              $reply = '';              while ($line = fgets($handle, 515)) {                 $reply .= $line;                  if (substr($line, 3, 1) == ' ') {                     break;                 }             }              if (substr($reply, 0, 3) != 354) {                 trigger_error('Error: DATA not accepted from server!');                 exit();             }              // According to rfc 821 we should not send more than 1000 including the CRLF             $message = str_replace("\r\n", "\n", $header . $message);             $message = str_replace("\r", "\n", $message);              $lines = explode("\n", $message);              foreach ($lines as $line) {                 $results = str_split($line, 998);                  foreach ($results as $result) {                     if (substr(PHP_OS, 0, 3) != 'WIN') {                         fputs($handle, $result . "\r\n");                     } else {                         fputs($handle, str_replace("\n", "\r\n", $result) . "\r\n");                     }                 }             }              fputs($handle, '.' . "\r\n");              $reply = '';              while ($line = fgets($handle, 515)) {                 $reply .= $line;                  if (substr($line, 3, 1) == ' ') {                     break;                 }             }              if (substr($reply, 0, 3) != 250) {                 trigger_error('Error: DATA not accepted from server!');                 exit();             }              fputs($handle, 'QUIT' . "\r\n");              $reply = '';              while ($line = fgets($handle, 515)) {                 $reply .= $line;                  if (substr($line, 3, 1) == ' ') {                     break;                 }             }              if (substr($reply, 0, 3) != 221) {                 trigger_error('Error: QUIT not accepted from server!');                 exit();             }              fclose($handle);         }     } } </code></pre>  <p>}</p>  <p>FYI: I have already tried the solution mentioned <a href="https://forums.zoho.com/topic/solution-of-problem-553-relaying-disallowed-data-not-accepted-from-server-for-opencart" rel="nofollow">here</a></p>