<p>I have a entity class strucure like:</p>  <pre><code>public class Base {     public int ID { get; set; } }  public class Instance : Base  {     public int Prop1 { get; set; } } </code></pre>  <p>I can query this normally like (on IQueryable&lt; Base >):</p>  <pre><code>.Where(p =&gt; (p as Instance).Prop1 == 1) </code></pre>  <p>This works great.... but i need this in a flexible Expression so i tried:</p>  <pre><code>var param = Expression.Parameter(typeof(Base)); var property = typeof(Instance).GetProperty("Prop1"); var constant = Expression.Constant(1);  //NOT WORKING LIKE THIS var convertedParam = Expression.Convert(param, typeof(Instance));  var memberAccess = Expression.MakeMemberAccess(convertedParam, property); var equals = Expression.Equal(memberAccess, constant); </code></pre>  <p>This results in a nice error : Unable to cast the type 'Base' to type 'Instance'. LINQ to Entities only supports casting EDM primitive or enumeration types. So i need an Expression version of (p as Instance)</p>  <p>What should i do (I need to use expressions...)?</p>