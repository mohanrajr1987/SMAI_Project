<p>I have something along the lines:</p>  <pre><code>class Parent { private:     std::thread t1; protected:     void ThreadFunction()     {         while(true)         {             SpecializedFunction();         }     }     void CreateThread()     {         t1 = std::thread(&amp;Parent::ThreadFunction, *this);     }     virtual void SpecializedFunction() = 0; public:     void Run()     {         CreateThread();     } }  class Child1 : public Parent { protected:     void SpecializedFunction()     {         //code     } }  class Child2 : public Parent { protected:     void SpecializedFunction()     {         //code     } } </code></pre>  <p>But I have compile errors(It compiles if I comment the thread creation line). It says that it cannot specialize the decay method. I think the problem is either that Parent is abstract, either that the thread function is protected, but I'm not sure. Could you suggest a workaround/a solution?</p>  <p>Thanks!</p>