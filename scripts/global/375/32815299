<p><code>std::shared_ptr</code> allows for polymorphism of the stored type, for instance:</p>  <pre><code>class A {}; class B: public A {}; </code></pre>  <p>I can have <code>std::vector&lt;std::shared_ptr&lt;A&gt;&gt;</code> that holds <code>B</code> objects.</p>  <p>But what if I want to take this a step further and make <code>A</code> a template and store <code>std::shared_ptr</code>s of different specializations of <code>A</code>. For instance:</p>  <pre><code>template&lt;typename T&gt; class A {};  class Strategy {}; class StrategyOne : public Strategy {}; class StrategyTwo : public Strategy {}; </code></pre>  <p>Is it possible to have a <code>std::vector&lt;std::shared_ptr&lt;A&lt;Strategy&gt;&gt;&gt;</code> that can store <code>StrategyOne</code> and <code>StrategyTwo</code> type objects at the same time?</p>