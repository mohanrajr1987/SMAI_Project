<p>Say I have this well known <a href="http://www.refactoring.com/catalog/replaceConditionalWithPolymorphism.html" rel="nofollow">example</a>:</p>  <pre><code>   double getSpeed() {        switch (_type) {            case EUROPEAN:               return getBaseSpeed();            case AFRICAN:               return getBaseSpeed() - getLoadFactor() * _numberOfCoconuts;            case NORWEGIAN_BLUE:               return (_isNailed) ? 0 : getBaseSpeed(_voltage);        }        throw new RuntimeException ("Should be unreachable");    } </code></pre>  <p>Obviously, I'd refactor into subclasses and everything will be made right in the world again. But what if I have:</p>  <pre><code>   double getSpeed() {        switch (_type) {            case EUROPEAN:               inform_gary(_count);                 return getBaseSpeed();            case AFRICAN:               increment_package_counter();               transmit_coordinates(_coordinates);               return getBaseSpeed() - getLoadFactor() * _numberOfCoconuts;            case NORWEGIAN_BLUE:                             return (_isNailed) ? 0 : getBaseSpeed(_voltage);        }        throw new RuntimeException ("Should be unreachable");    } </code></pre>  <p>Now it would be useless to subclass because then I'd have to tightly couple the subclasses to code they shouldn't know about. Is there a solution to this problem?</p>