<p>I am writing an REST API client that needs to deal with different versions of objects, depending on the API version selected (embedded in the URL). </p>  <p>The semantics of the CRUD operations are version independent, it's only the format of the objects themselves that is API dependent</p>  <p>How it I've done it so far: </p>  <pre><code>type Connection struct {    APIversion     Endpoint string // this is top level &lt;IP&gt;:&lt;port&gt; API endpoint    token string // populated when an authenticated API connection is made } </code></pre>  <p>The only thing that is API version specific above is <code>Connection.APIversion</code>, which gets populated at runtime.</p>  <p>OTOH the format of the objects I need to implement CRUD for is API version dependent. </p>  <p>E.g. for API version "v1" and "v2":</p>  <pre><code>type ObjectA_v1 struct {    // some fields }  type ObjectA_v2 struct {    // some fields as above    // maybe some more } </code></pre>  <p>As I mentioned, the semantics of the CRUD operations is independent of the API version.</p>  <p>For example, obtaining a list of all "ObjectA" can be obtained via a "GET" from</p>  <pre><code>&lt;IP:Port&gt;/&lt;APIversion&gt;/objectAs  </code></pre>  <p>That returns an array of JSON encoded <code>ObjectA</code> but with the object format dependent on the API version selected, i.e. either <code>ObjectA_v1</code> or <code>ObjectA_v2</code> for  <code>APIversion=v1</code> respectively <code>APIversion=v2</code>  </p>  <p>One way I could implement that is as </p>  <pre><code>func (c *Connection) List-ObjectAs_v1 ([]ObjectA_v1) {     // Do a "GET" from c.Endpoint + c.APIversion + "/objectAs"    // JSON decode the response and return a slice of ObjectA_v1 }  </code></pre>  <p>respectively </p>  <pre><code>func (c *Connection) List-ObjectAs_v2 ([]ObjectA_v2) {     // Do a "GET" from c.Endpoint + c.APIversion + "/objectAs"    // JSON decode the response and return a slice of ObjectA_v2 }  </code></pre>  <p>Now, that comes to me as straight silly, since the only thing different between the two is the basic type of the slice. </p>  <p>"Create" operations are similiar, but with "POST"s at an URI that is API version dependent (and accepting an object format according to this selected API version).  </p>  <p>Any better way to do this i.e. write a single <code>List_OjectAs</code> and have the version of <code>ObjectA</code> selected on the basis of <code>c.APIversion</code> at runtime ? </p>  <p>TIA for any help</p>