<p>I have a generic class with many subtypes:</p>  <pre><code>public abstract class MyClass&lt;T&gt; : MyBaseClass where T : class {...}  public class MySubClassA : MyClass&lt;A&gt; {...}  public class MySubClassB : MyClass&lt;B&gt; {...} </code></pre>  <p>Is there an easy way to search for subclasses of MyClass and obtain an <code>IEnumerable&lt;Type&gt;</code> containing MySubClassA and MySubClassB?</p>  <p>I have used this method before, but I am not sure how to adapt it for use with generics:</p>  <pre><code>public static IEnumerable&lt;Type&gt; GetSubTypesOf(Type t, bool baseAssemblyOnly = false) {     List&lt;Type&gt; types = new List&lt;Type&gt;();     Assembly[] searchAssemblies = baseAssemblyOnly         ? new[] { Assembly.GetAssembly(t) }         : AppDomain.CurrentDomain.GetAssemblies();     foreach (Assembly a in searchAssemblies)     {         types.AddRange(a.GetTypes()                         .Where(myType =&gt; myType.IsClass                                       &amp;&amp; !myType.IsAbstract                                       &amp;&amp; myType.IsSubclassOf(t)));     }     return types; } </code></pre>