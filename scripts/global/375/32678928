<p>While the main principle of polymorphism is decoupling "what from who" in term of <code>types</code>, but what confuses me how does method-call mechanism finds out and calls the correct method body in polymorphism.</p>  <p>Since in java all method binding is <code>late-binding</code> unless the method is <code>static</code>, <code>final</code> or <code>private</code>, and late-binding is done by JVM which precomputes <code>method table</code> for each class and then do a table look up during runtime in normal method call.</p>  <p>But the same thing happens during polymorphism too. For example </p>  <p>Suppose I've a Generic class <code>Cycle</code> with a <code>ride()</code> method</p>  <pre><code>class Cycle {      public void ride(){         System.out.println("I'm Riding generic Cycle()");     }  } </code></pre>  <p>And i have three Specialized Class <code>Bicycle</code> <code>Tricycle</code> and <code>Unicycle</code> which extends Generic class <code>Cycle</code> and overrides its <code>ride()</code> method.</p>  <pre><code>class Bicycle extends Cycle {      public void ride() {         System.out.println("I'm riding Bicycle");      }  }  class Tricycle extends Cycle{      public void ride() {         System.out.println("I'm riding Tricycle ");      }  }  class Unicycle extends Cycle {      public void ride() {         System.out.println("I'm Riding Unicycle ");      }  } </code></pre>  <p>This is the <code>TestRide</code> class to Test the above Polymorphism.</p>  <pre><code>public class TestRide {      public static void ride(Cycle c){         c.ride();     }      public static void main(String[] args){          Cycle Cycling = new Cycle();         ride(Cycling);          Bicycle bi = new Bicycle();         ride(bi);          Tricycle tri = new Tricycle();         ride(tri);          Unicycle uni = new Unicycle();         ride(uni);     }  } </code></pre>  <p>The Output is </p>  <pre><code>I'm Riding generic Cycle() I'm riding Bicycle I'm riding Tricycle  I'm Riding Unicycle  </code></pre>  <p>Byte Code:</p>  <pre><code>public static void main(java.lang.String[]);     flags: ACC_PUBLIC, ACC_STATIC     Code:       stack=2, locals=5, args_size=1          0: new           #17                 // class com/polymorphism/Cycle          3: dup          4: invokespecial #24                 // Method com/polymorphism/Cycle." &lt;init&gt;":()V          7: astore_1          8: aload_1          9: invokestatic  #25                 // Method ride:(Lcom/polymorphism/ Cycle;)V         12: new           #27                 // class com/polymorphism/Bicycle         15: dup         16: invokespecial #29                 // Method com/polymorphism/Bicycle ."&lt;init&gt;":()V         19: astore_2         20: aload_2         21: invokestatic  #25                 // Method ride:(Lcom/polymorphism/ Cycle;)V         24: new           #30                 // class com/polymorphism/Tricycle          27: dup         28: invokespecial #32                 // Method com/polymorphism/Tricycl e."&lt;init&gt;":()V         31: astore_3         32: aload_3         33: invokestatic  #25                 // Method ride:(Lcom/polymorphism/ Cycle;)V         36: new           #33                 // class com/polymorphism/Unicycle          39: dup         40: invokespecial #35                 // Method com/polymorphism/Unicycl e."&lt;init&gt;":()V         43: astore        4         45: aload         4         47: invokestatic  #25                 // Method ride:(Lcom/polymorphism/ Cycle;)V         50: return </code></pre>  <p>Even in the bytecode its just as usual method call with <code>invokestatic</code> and <code>invokespecial</code> while i thought it would use <code>invokedynamic</code> to figure out the version of the method that is appropriate for the actual type of the object. But that was not the case. </p>  <p>So how does Java figure out the actual method call during polymorphism while we just pass an upcasted Object in the <code>ride()</code> method  like <code>ride(bi)</code> in <code>TestRide</code> class ?</p>  <p>EDIT: RIDE method ByteCode</p>  <pre><code>public static void ride(com.polymorphism.Cycle);     flags: ACC_PUBLIC, ACC_STATIC     Code:       stack=1, locals=1, args_size=1          0: aload_0          1: invokevirtual #16                 // Method com/polymorphism/Cycle.r ide:()V          4: return </code></pre>