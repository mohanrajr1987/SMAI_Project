<p>I need help understanding how to get something to work.</p>  <p>I've got my base class <code>Hero()</code>, from which I derive other instances of, i.e., a <code>Fighter()</code> or an <code>Archer()</code>. I am trying to set up a lot of the logic in the Hero() class specifically so I reduce the amount of retyping needed. Below are my classes:</p>  <pre><code>class Hero {     public String Name { get; set; }      public int MaxHP { get; set; }      public int BaseHP { get; set; }      public int CurrentHP { get; set; }      public int BaseDodge { get; set; }      public int Dodge { get; set; }      public int BaseAttack { get; set; }      public int Attack { get; set; }      public int Damage { get; set; }      public int BaseXP { get; set; }      public int CurrentXP { get; set; }      public int NeededXP { get; set; }      public int Level { get; set; }      public int HPLevelInc { get; set; }      public int AttackLevelInc { get; set; }      public int DodgeLevelInc { get; set; }      public int DodgeCap { get; set; }      public string Ability1Name { get; set; }      public string Ability2Name { get; set; }      public string Ability3Name { get; set; }      public int Ability1Mod { get; set; }      public int Ability2Mod { get; set; }      public int Ability3Mod { get; set; }      public int Ability2CoolDown { get; set; }      public int Ability3CoolDown { get; set; }      public int BaseHealMod { get; set; }      public int HealMod { get; set; }      public int HealCap { get; set; }      public int HealLevelInc { get; set; }      public Hero(int lvl)     {         BaseXP = 1000;         NeededXP = 1000;         /*         MaxHP = BaseHP;         Dodge = BaseDodge;         Attack = BaseAttack;         HealMod = BaseHealMod;         */         if (lvl &gt; 1)         {             for (int i = 0; i &lt; lvl; i++)             {                 LevelUp();             }         }     }     public int getDamage(int abilMod)     {         Random r = new Random();         int randDmg = r.Next(1, Level);         Damage = Attack + abilMod + randDmg;         return Damage;     }     public void LevelUp()     {         BaseXP = (int)Math.Floor(BaseXP * 2.5);         NeededXP = BaseXP - CurrentXP;         Level++;         MaxHP = MaxHP + HPLevelInc;         CurrentHP = MaxHP;         Attack = Attack + AttackLevelInc;         if (Level % 5 == 0 &amp;&amp; Dodge &lt; DodgeCap)             Dodge = Dodge + DodgeLevelInc;         if (Level % 5 == 0 &amp;&amp; HealMod &lt; HealCap)             HealMod = HealMod + HealLevelInc;     }     public void Heal()     {         CurrentHP += HealMod;         if (CurrentHP &gt; BaseHP)         {             CurrentHP = BaseHP;         }     }     public void Heal(int extra)     {         CurrentHP += HealMod + extra;         if (CurrentHP &gt; BaseHP)         {             CurrentHP = BaseHP;         }     } } </code></pre>  <p>Then my <code>Figher()</code> looks like this:</p>  <pre><code>class Fighter : Hero {     public Fighter(int lvl) : base(lvl)     {         Name = "Fighter";         BaseAttack = 10;         BaseHP = 50;         BaseDodge = 5;         HPLevelInc = 7;         AttackLevelInc = 3;         DodgeLevelInc = 1;         DodgeCap = 45;         BaseHealMod = 5;         HealCap = 30;         HealLevelInc = 3;         Ability1Name = "Ability 1";         Ability2Name = "Ability 2";         Ability3Name = "Ability 3";         Ability2CoolDown = 3;         Ability3CoolDown = 5;     } } </code></pre>  <p>The problem I'm running in to, is that when I make an instance of my <code>Fighter()</code>, it is increasing the level and the XP, but nothing else.</p>  <pre><code>class Program {     static void Main(string[] args)     {         Fighter F = new Fighter(7);          Console.WriteLine("Level: " + F.Level + " " + F.Name);         Console.WriteLine("Hit Points: " + F.CurrentHP);         Console.WriteLine("cXP: " + F.CurrentXP + "  XP2L: " + F.NeededXP);          Console.ReadKey();     } } </code></pre>  <p>This outputs as:</p>  <pre><code>Level: 7 Fighter Hit Points: 0 cXP: 0  XP2L: 610342 </code></pre>  <p>Can someone help me to understand how to implement this and get it to work? I think I'm missing something simple, but I'm not certain what.</p>