<p>The dwelling.py file currently defines a Dwelling class and a subclass named House. This code is working. I need to add two more subclasses (Apt and Condo) as described below. The program111.py file creates an instance of house and runs its str method. This also works.  In program111.py I need to create instances of both new subclasses and display the status of each. </p>  <p>Class Apt:</p>  <p>inherits from Dwelling and requires two more attributes: rent, a numeric attribute for monthly rent. terrace, a boolean attribute that is True for an apartment that has a terrace or balcony. requires a str method to display the status of an Apt instance (all attributes). Code as you see fit. Class Condo:</p>  <p>also inherits from Dwelling and requires two additional attributes: <strong>mtce</strong>, a numeric attribute for the monthly maintenance. <strong>amenities</strong>, a string attribute listing Condo amenities such as pool, gym, etc. also requires a str method to display the status of a Condo instance (all attributes).  In program111.py, create instances of both new subclasses and display their attributes.</p>  <p>Code for dwelling.py and then program111.py below:</p>  <pre><code>#### dwelling.py # defines classes Dwelling, House, Apt, and Condo  class Dwelling:     def __init__(self,address,area,price):         self.__address = address         self.__area = area         self.__price = price      def get_address(self):         return self.__address      def get_area(self):         return self.__area      def get_price(self):         return self.__price      def set_price(self, price):         self.__price = price      def __str__(self):         return self.__address + ', ' + str(self.__area) + ' sq ft, $' +     str(self.__price)  class House(Dwelling):     def __init__(self,address,area,price,detached,storeys):         Dwelling.__init__(self,address,area,price)         self.__detached = detached         self.__storeys = storeys      def get_detached(self):         return self.__detached      def get_storeys(self):         return self.__storeys      def __str__(self):         s = Dwelling.__str__(self)         s += '\n' + 'Detached:' + str(self.__detached) + ', storeys:' +     str(self.__storeys)         return s  ####################### Complete these class definitions here  ##class Apt ##  ##class Condo </code></pre>  <p>------------------------------------end of dwelling program------------------</p>  <p>------------------------start of program111.py------------------------------</p>  <pre><code>### program111.py  import dwelling  def main():      home = dwelling.House('5 Ash Dr',1800,200000,True,2)     print(home)      ### repeat for an Apt instance      ### repeat for a Condo instance   main() </code></pre>  <p>This should be clarification enough but if anybody has any questions please feel free to ask and i'll elaborate as best I can! (note this is all being written in <strong>python 3.0</strong> and I am trying to stress using sub/superclasses and inheritance here)</p>