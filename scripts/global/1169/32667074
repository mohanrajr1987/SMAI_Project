<p>I've got something like a serious problem. I made a UserControl which is movable (like a window) in its parent, by using  the <code>MouseDown, MouseMove,MouseUp</code> events . The <code>[Designer("System.Windows.Forms.Design.ParentControlDesigner, System.Design", typeof(IDesigner))]</code> Attribute is used that I can add Controls to this UserControl in VS's Designer.</p>  <p>State:</p>  <ul> <li>Moving those UserControls works fine (the Usercontrol moves as expected...)</li> <li>Controls can be added in VS's Designer and appear  as designed in Runtime[visible, like it should be]</li> <li>throught Moving the UserControl, the Children get invisible, but <code>.Visible=true</code> doesn't change</li> <li><code>.BringToFront();</code> has no affect (I thought they might be behind the container)</li> </ul>  <p>Here's the UserControl class:</p>  <pre><code>  [Designer("System.Windows.Forms.Design.ParentControlDesigner, System.Design", typeof(IDesigner))]     public partial class MovableContainer : UserControl     {         bool mdown = false;         Point mpos;         [EditorBrowsable(EditorBrowsableState.Always)]         [SettingsBindable(true)]         [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]         public Axis Rasta { get; set; }         public static int DefautlRasta = 10;         public MovableContainer()         {             rasta = DefautlRasta;             InitializeComponent();             this.MouseDown += ((object o, MouseEventArgs e) =&gt;             {                 mdown = true;                 mpos = this.PointToClient(MousePosition);             });             this.MouseUp += ((object o, MouseEventArgs e) =&gt; mdown = false);             this.MouseMove += MovableContainer_MouseMove;             this.Paint += (object o, PaintEventArgs e) =&gt;             {                 Console.WriteLine("BTF");                 this.Parent.Controls.OfType&lt;Control&gt;().ToList().ForEach(x =&gt; x.BringToFront());                 this.Controls.OfType&lt;Control&gt;().ToList().ForEach(x =&gt; x.BringToFront());                 this.Controls.OfType&lt;Control&gt;().ToList().ForEach(x =&gt; x.Show());              };              this.ParentChanged += ((object o, EventArgs e) =&gt;                 {                     if (this.Parent == null)                     {                         try { this.Parent.SizeChanged -= Parent_SizeChanged; }                         catch { }                     }                     else                     {                         try { this.Parent.SizeChanged += Parent_SizeChanged; }                         catch { }                     }                 }                 );              // this.KeyDown += ((object o, KeyEventArgs e) =&gt; {             ///kdown = (RastaKey == e.KeyCode); Console.WriteLine("K:"+kdown);             //});              //this.KeyUp += ((object o, KeyEventArgs e) =&gt; kdown = false);         }          void Parent_SizeChanged(object sender, EventArgs e)         {             this.Boundis = new Rectangle(Parent.Padding.Left, Parent.Padding.Top, Parent.Size.Width - Parent.Padding.Horizontal, Parent.Size.Height - Parent.Padding.Vertical);             {                 this.Location = this.Location.Add(this.PointToClient(MousePosition).Sub(mpos)).Rasta(Rasta, rasta);                 Rectangle rct = new Rectangle(this.Location, this.Size);                 if (this.Boundis.X &gt; rct.X)                 {                     this.Location = new Point(this.Boundis.X, this.Location.Y);                     Console.Write("R");                 }                 //left                 if (this.Boundis.Right &lt; rct.Right)                 {                     this.Location = new Point(this.Boundis.Right - rct.Width, rct.Y);                     Console.Write("L");                 }                 //top                 if (this.Boundis.Y &gt; rct.Y)                 {                     this.Location = new Point(rct.X, this.Boundis.Y);                     Console.Write("T");                 }                 //bottom                 if (this.Boundis.Bottom &lt; rct.Bottom)                 {                     this.Location = new Point(rct.X, this.Boundis.Bottom - rct.Height);                     Console.Write("B");                  }                 Console.WriteLine();             }         }           void MovableContainer_MouseMove(object sender, MouseEventArgs e)         {             if (mdown)             {                 this.Location = this.Location.Add(this.PointToClient(MousePosition).Sub(mpos)).Rasta(Rasta, rasta);                 Rectangle rct = new Rectangle(this.Location, this.Size);                 if (this.Boundis.X &gt; rct.X)                 {                     this.Location = new Point(this.Boundis.X, this.Location.Y);                     Console.Write("R");                 }                 //left                 if (this.Boundis.Right &lt; rct.Right)                 {                     this.Location = new Point(this.Boundis.Right - rct.Width, rct.Y);                     Console.Write("L");                 }                 //top                 if (this.Boundis.Y &gt; rct.Y)                 {                     this.Location = new Point(rct.X, this.Boundis.Y);                     Console.Write("T");                 }                 //bottom                 if (this.Boundis.Bottom &lt; rct.Bottom)                 {                     this.Location = new Point(rct.X, this.Boundis.Bottom - rct.Height);                     Console.Write("B");                  }                 Console.WriteLine();              }          }         public Rectangle Boundis { get; set; }      }     public enum Axis { X, Y, None } </code></pre>  <p>So, how can I fix this?</p>