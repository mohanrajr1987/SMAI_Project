<p>I'm working on a project that requires users to create an unspecified number of capture fields for their customers. In doing so, I would like to create a generic template, wherein they type the name of their new field, and select a type from a combobox. The values for the combobox ('free text', 'boolean', 'decimal', etc.) can be stored anywhere (i.e. I'm not picky about how they're bound). The selectedIndexChanged event will handle the addition of the appropriate usercontrol. However, since I don't know how many value-types I will be handling (looks like 7 - 9 for now), I would like to avoid code of the following kind:</p>  <pre><code>Private Sub cbxType_SelectedIndexChanged(sender As Object, e As EventArgs)     If cbxType.SelectedItem = "Free Text" Then         Dim vText As VTText = New VTText() ' This is the usercontrol for text         Controls.Add(vText)     ElseIf cbxType.SelectedItem = "Boolean" Then         Dim vBool As VTBool = New VTBool() ' etc.     ... </code></pre>  <p>My first thought was to use some sort of list/dictionary of key-value pairs when the form loads</p>  <pre><code>Dim kList As List(Of KeyValuePair(Of String, Object)) = New List(Of KeyValuePair(Of String, Object)) kList.Add(New KeyValuePair(Of String, Object)("Text", New vText()) For each kpair As KeyValuePair(Of String, Object) In kList     cbx.Items.Add(kPair.Key) Next </code></pre>  <p>with something like this in the change event handler</p>  <pre><code>Dim myControl = DirectCast(cbxType.SelectedItem, KeyValuePair(Of String, Object)).Value Controls.Add(myControl) </code></pre>  <p>However, the selectedvalue attribute is empty, and I get an invalid cast exception. I tried casting to Control, and UserControl, but those, of course, didn't work. Is this approach, barring my incorrect implementation, sound? Is there a better way to do this? Ideally, I want a line that effectively does something like this:</p>  <pre><code>Controls.Add(cbxType.SelectedValue) </code></pre>