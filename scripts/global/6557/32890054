<p>I have created an application for capturing an image and displaying it in an Imageview in customized size (150x150). The application did the process exactly what I needed (i.e. it shows the small image instead of the original larger size image).</p>  <p>I would like to know whether the custom sized image will be stored in phone memory or I have to manually store that image to view it later for confirming whether it is compressed to the customized size or not.</p>  <p>Thanks for looking and spending your valuable time on this issue. My code is given below.</p>  <pre><code>@Override public void onClick(View UserView)  {     try     {          if( UserView != null &amp;&amp; initializePMFunction() != null )         {             if( UserView == CsCameraButton )             {                 takePhoto(UserView);             }         }        }     catch( Exception e )     {         e.printStackTrace();     } }    public void takePhoto(View UserView) throws Exception {     Log.v(CSTAG,"The camera is clicked!");     Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);     fileUri = getOutputMediaFileUri(MEDIA_TYPE_IMAGE); // create a file to save the image     cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, fileUri); // set the image file name                                 startActivityForResult(cameraIntent, CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE); }  @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) {     super.onActivityResult(requestCode, resultCode, data);     if(requestCode==100)     {         CsProductImage.setImageBitmap(decodeSampledBitmapFromFile(fileUri.getPath(), 150, 150));         Log.v(CSTAG,"The image is set into the imageview!");     } }  public static Bitmap decodeSampledBitmapFromFile(String path , int reqWidth, int reqHeight) {      final BitmapFactory.Options options = new BitmapFactory.Options();     options.inJustDecodeBounds = true;     BitmapFactory.decodeFile(path, options);     final int height = options.outHeight;     final int width = options.outWidth;     options.inPreferredConfig = Bitmap.Config.RGB_565;     int inSampleSize = 1;     if (height &gt; reqHeight)     {         inSampleSize = Math.round((float)height / (float)reqHeight);     }     int expectedWidth = width / inSampleSize;     if (expectedWidth &gt; reqWidth)     {         inSampleSize = Math.round((float)width / (float)reqWidth);     }     options.inSampleSize = inSampleSize;     options.inJustDecodeBounds = false;     return BitmapFactory.decodeFile(path, options); }  private static Uri getOutputMediaFileUri(int type) {     return Uri.fromFile(getOutputMediaFile(type)); }  @SuppressLint("SimpleDateFormat") private static File getOutputMediaFile(int type) {     File mediaStorageDir = new File(Environment.getExternalStoragePublicDirectory(     Environment.DIRECTORY_PICTURES), "MyCameraApp");     if (! mediaStorageDir.exists())     {         if (! mediaStorageDir.mkdirs())         {             return null;         }     }     String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());     File mediaFile;     if (type == MEDIA_TYPE_IMAGE)     {         mediaFile = new File(mediaStorageDir.getPath() + File.separator +"IMG_"+ timeStamp + ".jpg");     }     else      {         return null;     }     return mediaFile; } </code></pre>  <p><strong>Note:</strong> I used the file concept and didn't use any streaming functions.  I have searched for this but didn't get any answer related to this issue.</p>