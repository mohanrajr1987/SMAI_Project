<p>I'm tyring to upload an image for my application, here when I choose an Image from my Gallery it works fine, now If I select the same image from "Recent" folder the picture path is null and I'm unable to upload the image. Can you please help me resolving this issue.</p>  <p>Here's my code for your reference:</p>  <pre><code>@Override protected void onCreate(Bundle savedInstanceState) {     super.onCreate(savedInstanceState);     setContentView(R.layout.activity_main);      // find the views     image = (ImageView) findViewById(R.id.uploadImage);     uploadButton = (Button) findViewById(R.id.uploadButton);     takeImageButton = (Button) findViewById(R.id.takeImageButton);     selectImageButton = (Button) findViewById(R.id.selectImageButton);      selectImageButton.setOnClickListener(new OnClickListener() {          @Override         public void onClick(View v) {             selectImageFromGallery();          }     });      takeImageButton.setOnClickListener(new View.OnClickListener() {          @Override         public void onClick(View v) {             // TODO Auto-generated method stub              Intent cameraIntent = new Intent(                     android.provider.MediaStore.ACTION_IMAGE_CAPTURE);             startActivityForResult(cameraIntent, CAMERA_REQUEST);              /*              * Picasso.with(MainActivity.this) .load(link) .into(image);              */          }     });      // when uploadButton is clicked     uploadButton.setOnClickListener(new OnClickListener() {          @Override         public void onClick(View v) {             // new ImageUploadTask().execute();             Toast.makeText(MainActivity.this, "clicked", Toast.LENGTH_SHORT)                     .show();             uploadTask();         }     }); }  protected void uploadTask() {     // TODO Auto-generated method stub     ByteArrayOutputStream bos = new ByteArrayOutputStream();     bitmap.compress(CompressFormat.JPEG, 100, bos);     byte[] data = bos.toByteArray();     String file = Base64.encodeToString(data, 0);     Log.i("base64 string", "base64 string: " + file);     new ImageUploadTask(file).execute(); }  /**  * Opens dialog picker, so the user can select image from the gallery. The  * result is returned in the method &lt;code&gt;onActivityResult()&lt;/code&gt;  */ public void selectImageFromGallery() {     Intent intent = new Intent();     intent.setType("image/*");     intent.setAction(Intent.ACTION_GET_CONTENT);     startActivityForResult(Intent.createChooser(intent, "Select Picture"),             PICK_IMAGE); }  /**  * Retrives the result returned from selecting image, by invoking the method  * &lt;code&gt;selectImageFromGallery()&lt;/code&gt;  */ @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) {     super.onActivityResult(requestCode, resultCode, data);      if (requestCode == PICK_IMAGE &amp;&amp; resultCode == RESULT_OK             &amp;&amp; null != data) {          Uri selectedImage = data.getData();         Log.i("selectedImage", "selectedImage: " + selectedImage.toString());         String[] filePathColumn = { MediaStore.Images.Media.DATA };          Cursor cursor = getContentResolver().query(selectedImage,                 filePathColumn, null, null, null);          /*          * Cursor cursor = managedQuery(selectedImage, filePathColumn, null,          * null, null);          */          cursor.moveToFirst();          // int columnIndex = cursor.getColumnIndex(filePathColumn[0]);         int columnIndex = cursor                 .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);         cursor.moveToFirst();         String picturePath = cursor.getString(columnIndex);         Log.i("picturePath", "picturePath: " + picturePath);         cursor.close();          decodeFile(picturePath);      }  }   public void decodeFile(String filePath) {     // Decode image size     BitmapFactory.Options o = new BitmapFactory.Options();     o.inJustDecodeBounds = true;     BitmapFactory.decodeFile(filePath, o);      // The new size we want to scale to     final int REQUIRED_SIZE = 1024;      // Find the correct scale value. It should be the power of 2.     int width_tmp = o.outWidth, height_tmp = o.outHeight;     int scale = 1;     while (true) {         if (width_tmp &lt; REQUIRED_SIZE &amp;&amp; height_tmp &lt; REQUIRED_SIZE)             break;         width_tmp /= 2;         height_tmp /= 2;         scale *= 2;     }      // Decode with inSampleSize     BitmapFactory.Options o2 = new BitmapFactory.Options();     o2.inSampleSize = scale;     bitmap = BitmapFactory.decodeFile(filePath, o2);      image.setImageBitmap(bitmap); } </code></pre>  <p>Here's my <a href="http://prntscr.com/8lqttu" rel="nofollow">log</a> for your reference:</p>