<p>Working on a project that does (or will eventually do) the following:</p>  <ul> <li>Access all images in a folder (for test phase using a folder in AppData called 'Test Images')</li> <li>Place them in a new folder, where the image name is used to place it in or create a sub-folder using an algorithm</li> <li>Save images in a 'List' so that when they have been saved, they can be displayed in a picturebox on the application - where they can be cycled through using prev/next buttons</li> </ul>  <p>The first two steps work fine, and I have checked that the images (only using two image files for the test phase) have been placed in subfolders.</p>  <p>I initialised an array of strings using the <code>Directory.GetAllFiles()</code> function in order to do this, meaning this array contains the paths of all the files that are being copied and manipulated. As a part of this process, I added each file path to the <code>List&lt;Bitmap&gt;</code> so they were able to be displayed in the picturebox.</p>  <p>However, whenever I try to run the function to display the image in the picturebox, the whole application crashes. No exception thrown or anything, just the whole thing stops working. I have no idea what is going on.</p>  <p>I've tried this using <code>picbox.Image =</code> to the element on the <code>List&lt;Bitmap&gt;</code> or using <code>picbox.ImageLocation =</code> to it's file path, but neither has been successful. The code that should make this happen is shown below:</p>  <pre><code>    public void saveLatestImages()     {         //specific path for My Pictures only         string testImagesPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Test Images";         //if there is a Pictures folder         if (Directory.Exists(testImagesPath))         {                //get number of files in folder             int fileCount = Directory.GetFiles(testImagesPath).Count();              //more than one file in folder             if (fileCount &gt; 0)             {                    //create data structures to store file info                 //filePaths holds path of each file represented as a string                 string[] filePaths = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Test Images");                  //for each file in Pictures...                 for (int index = 0; index &lt; fileCount; ++index)                 {                     //get name of image at current index                     imageName = filePaths[index];                     //separate the part relating to the patient name (everything before (DD/MM/YYYY))                     string subSpecifier = imageName.Split('\\').Last();                     subSpecifier = subSpecifier.Split('_')[0];                     //add to root directory to form subfolder name                     subDirectory = Path.Combine(rootDirectory, subSpecifier);                      //subdirectory name formulated, check for pre-existing                     //subfolder does not exist                     if(!Directory.Exists(subDirectory))                     {                         //create it                         Directory.CreateDirectory(subDirectory);                     }                     //otherwise, file will be added to existing directory                      //take everything from end and folder\file division to get unique filename                     string fileName = imageName.Split('\\').Last();                     //add this to the existing subDirectory                     fileName = Path.Combine(subDirectory, fileName);                      //copy the image into the subfolder using this unique filename                     File.Copy(imageName, fileName, true); //true gives instruction to overwrite any existing file with the same path                      //add full filename to list of bitmap images                     images.Add(new Bitmap(fileName));                      //update the shortcut to the file in the image storage shortcut folder                     shortcutDirectory = getShortcut(subSpecifier, fileName);                 }             }         }     }       public void displayLatestImages()     {         //there are images in list         if (images.Count &gt; 0)         {             //picbox defaults to first image             picboxImage.ImageLocation = Path.GetFileName(images.First().ToString());         }          //check for images before or after current image to enable buttons         checkFirstLast();     } </code></pre>  <p>This shows everything that saves the images to their new file location, and should then allow the first image added to the List to be displayed.</p>  <p>Any advice on how to correct this would be greatly appreciated!</p>  <p>Thanks, Mark</p>