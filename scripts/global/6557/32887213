<p>I have implemented a ViewPager which will hold 5 BitMap's. My images are not bigger than 50kb each. When the ViewPager is initialized, first 2 image is instantiated but the memory they consume is 100 MB! After second image my app consumes around 256MB of memory, which is 190MB more than my normal memory usage. That happens only after 3 image creation. (Total 150KB)</p>  <p>I tried decoding BitMaps but did not work. I have no idea why such a small image consumes that much of memory. Image slide animations are normally soo sluggish. Do you have any idea where I'm doing wrong?</p>  <p>Log</p>  <pre><code>Initialize start ﹕ Position 0 is created ﹕ Position 1 is created  Initialize end Swipe Next image (1) ﹕ Position 2 is created Swipe Next image (2) ﹕ Position 0 is destroyed ﹕ Position 3 is created Swipe Next image (3) ﹕ Position 1 is destroyed ﹕ Position 4 is created Swipe Next image (4)(last image) ﹕ Position 2 is destroyed Swipe Previous image (3) ﹕ Position 2 is created Swipe Previous image (2) CRASHED </code></pre>  <p><strong>Here is my Adapter</strong></p>  <pre><code>class CustomPagerAdapter extends PagerAdapter {      Context mContext;     LayoutInflater mLayoutInflater;      public CustomPagerAdapter(Context context) {         mContext = context;         mLayoutInflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);     }      @Override     public int getCount() {         return NUM_PAGES;     }      @Override     public boolean isViewFromObject(View view, Object object) {         return view == ((LinearLayout) object);     }      @Override     public Object instantiateItem(ViewGroup collection, int position) {         DebugLog.debug(TAG,"Position " + position + " is created");         View itemView = mLayoutInflater.inflate(R.layout.pager_item, collection, false);         ImageView imageView = (ImageView) itemView.findViewById(R.id.imageView);                     Bitmap bitmap =  BitmapFactory.decodeResource(getResources(), mResources[position]);         imageView.setImageBitmap(bitmap);         collection.addView(itemView);         return itemView;     }      @Override     public void destroyItem(ViewGroup container, int position, Object object) {         View view = (View)object;         ImageView imageView = (ImageView) view.findViewById(R.id.imageView);         BitmapDrawable bmpDrawable = (BitmapDrawable) imageView.getDrawable();         if (bmpDrawable != null &amp;&amp; bmpDrawable.getBitmap() != null) {             bmpDrawable.getBitmap().recycle();             DebugLog.debug(TAG, "Position " + position + " is destroyed");         }         container.removeView((LinearLayout) object);         view = null;     } } </code></pre>