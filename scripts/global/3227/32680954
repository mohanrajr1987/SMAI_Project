<p>I am new to Multi Threading in java. I was trying to use locks.Here is my code sample.</p>  <pre><code>package com;  import java.util.Random; import java.util.concurrent.TimeUnit; import java.util.concurrent.locks.Lock; import java.util.concurrent.locks.ReentrantLock;  public class UsingLocks { Lock lock = new ReentrantLock(); public static void main(String[] args) {     // TODO Auto-generated method stub       UsingLocks job = new UsingLocks();     Thread [] threads= new Thread[5];     for(int i=0;i&lt;5;i++){         threads[i]= new Thread(new LockTask(job));     }     for(int i=0;i&lt;5;i++){         threads[i].start();     }  }  public void lockingJob() {     System.out.println("Thread "+Thread.currentThread().getName()+" trying to Acquire lock");     try {     lock.tryLock();     //lock.lock(); //When I use this, code works fine     int time=new Random().nextInt(10)+3;     System.out.println("Thread "+Thread.currentThread().getName()+" Acquired lock for "+time+" seconds.");     TimeUnit.SECONDS.sleep(time);     } catch (InterruptedException e) {         // TODO Auto-generated catch block         e.printStackTrace();     }     System.out.println("Now releasing lock "+Thread.currentThread().getName());     lock.unlock();     try {         TimeUnit.SECONDS.sleep(1);     } catch (InterruptedException e) {         // TODO Auto-generated catch block         e.printStackTrace();     }     System.out.println("After Unlock "+Thread.currentThread().getName());    }     } class LockTask implements Runnable{ UsingLocks job; public LockTask(UsingLocks job) {     // TODO Auto-generated constructor stub     this.job=job;  }  @Override public void run() {     // TODO Auto-generated method stub     job.lockingJob();   }  } </code></pre>  <p>Following is the output when I use tryLock() </p>  <pre><code>Thread Thread-1 trying to Acquire lock Thread Thread-0 trying to Acquire lock Thread Thread-2 trying to Acquire lock Thread Thread-1 Acquired lock for 12 seconds. Thread Thread-2 Acquired lock for 3 seconds. Thread Thread-0 Acquired lock for 8 seconds. Thread Thread-3 trying to Acquire lock Thread Thread-3 Acquired lock for 9 seconds. Thread Thread-4 trying to Acquire lock Thread Thread-4 Acquired lock for 6 seconds. Now releasing lock Thread-2 Exception in thread "Thread-2" java.lang.IllegalMonitorStateException at      java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(ReentrantLock.java:155) at java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1260) at java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:460) at com.UsingLocks.lockingJob(UsingLocks.java:37) at com.LockTask.run(UsingLocks.java:66) at java.lang.Thread.run(Thread.java:745) Now releasing lock Thread-4 Exception in thread "Thread-4" java.lang.IllegalMonitorStateException at java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(ReentrantLock.java:155) at java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1260) at java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:460) at com.UsingLocks.lockingJob(UsingLocks.java:37) at com.LockTask.run(UsingLocks.java:66) at java.lang.Thread.run(Thread.java:745) </code></pre>  <p>Now, as per my understanding, when the first thread executes tryLock(), it should acquire the lock and other threads should not be able to get lock.But as show in the output.After Thread-1 acquires lock, Thread-2 also acquired lock and so on. How can this be possible. Please tell me what I am missing here. Thanks in advance. </p>