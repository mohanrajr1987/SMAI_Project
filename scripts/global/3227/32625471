<p>I'm developing a NSE for our document management project. I'm almost finished it but i have a problem and i couldn't find the solution yet.</p>  <p>First, I'll explain my scenario. There is two application in my project one is namespace extension, the other one is working in tray and its a simple gui for notification,history and ext.</p>  <p>Both apps requires an connection, i use static class and static variable but those two apps using different AppDomains so i have two instance of same static class. That's not a problem cause i create communication between them and its working properly.</p>  <p>The problem is; When my two apps running if i logout from gui app, NSE is runs logout method too. Consider NSEfolder is open and there are items in that folder, logout from gui app. After that if you go back NSEFolder windows want to refreshes item, cause of that i need a successfully connected connection. And if there is no connection, it'll open an login screen. Windows is making asynchronous calls for all items. And i want to open login screen only once. So i used lock mechanism but when the code comes form.ShowDialog() method first time, lock mechanism lets pass through second call. Lock works perfectly till the code comes showdiolog method. It's only happens after first call comes to show screen and lock only passes second call. Before first lock operation completely finish, lock doesn't pass third call. So it works but not correctly i want to. </p>  <p>When second call passed lock and came show dialog, first show dialog works and my program waits it. But after login it sees like nothing change and keeps open login form for all calls. Do you have any idea what should i use, or what's my wrong?</p>  <p>My code is like that;</p>  <pre><code>private static object syncLock = new object();      private static Connection _con;     public static Connection Connection     {         get         {             if (_con == null &amp;&amp; TryConnect)             {                 lock (syncLock)                 {                     if (_con == null &amp;&amp; TryConnect)                     {                         LoginForm form = new LoginForm();                         form.BringToFront();                         form.TopMost = true;                         if (form.CheckAutoLogin() || form.ShowDialog() == System.Windows.Forms.DialogResult.OK)                         {                             _con = form.Connection;                             string message = string.Format("Login#{0}#{1}#{2}", _con.Server, _con.UserID, Globals.Password);                             DriveBACommon.Classes.PipeHelper.Instance.Send(message);                             TryConnect = true;                         }                         else                         {                             TryConnect = false;                         }                     }                      if (_con != null &amp;&amp; !_con.Connected)                     {                         _con.Open();                     }                     return _con;                 }             }             return _con;         }         internal set         {             _con = value;         }     } </code></pre>