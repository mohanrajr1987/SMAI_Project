<p>I don't really understand the usage of the ReaderWriterLock (have read all the docs but still don't get it). Look at the example with simple Monitor:</p>  <pre><code>    private static Random rnd = new Random();     private static object _lock;     private static int resource;      static void MyMonitorFunc()     {         // I do the same reading twice: at first here         if (resource % 2 == 0)         {             Console.Write(resource);             return;         }          lock(_lock)         {             // and now here to ensure that state of my resource is still consistent             if (resource % 2 == 0)             {                 Console.Write(resource);                 return;             }              resource = rnd.Next(500);         }     } </code></pre>  <p>Look at my resource reading: I read it twice - before acquiring the monitor and after it. This allows me to perform multiple-thread reads on the shared resource and an exclusive write when needed. Am I correct? If yes, what's the point of using ReaderWriterLock if we can just always follow the pattern of that "double" reading with Monitor?</p>