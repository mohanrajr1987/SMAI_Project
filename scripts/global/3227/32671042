<p>I have a counter, which counts the currently processed large reports     </p>  <pre><code>private int processedLargeReports; </code></pre>  <p>and I'm generating and starting five threads, where each thread accesses this method: </p>  <pre><code>public bool GenerateReport(EstimatedReportSize reportSize) {     var currentDateTime = DateTimeFactory.Instance.DateTimeNow;     bool allowLargeReports = (this.processedLargeReports &lt; Settings.Default.LargeReportLimit);     var reportOrderNextInQueue = this.ReportOrderLogic.GetNextReportOrderAndLock(         currentDateTime.AddHours(         this.timeoutValueInHoursBeforeReleaseLock),          reportSize,          CorrelationIdForPickingReport,          allowLargeReports);      if (reportOrderNextInQueue.IsProcessing)     {         Interlocked.Increment(ref this.processedLargeReports);                     }      var currentReport = this.GetReportToBeWorked(reportOrderNextInQueue);      var works = this.WorkTheReport(reportOrderNextInQueue, currentReport, currentDateTime);     if (reportOrderNextInQueue.IsProcessing)     {         Interlocked.Decrement(ref this.processedLargeReports);                     }     return works;            } </code></pre>  <p>the "reportOrderNextInQueue" variable gets a reportorder from the database and checks whether the report order is either "Normal" or "Large" (this is achieved by defining the bool IsProcessing property of reportOrderNextInQueue variable). In case of a large report, the system then Interlock Increments the processedLargeReport int and processes the large report. Once the large report is processed, the system Interlock Decrements the value.</p>  <p>The whole idea is that I'll only allow a single report to be processed at a time, so once a thread is processing a large report, the other threads should not be able to access a large report in the database. The bool allowLargeReport variable checks whether the processedLargeReports int and is above the limit or not.</p>  <p>I'm curious whether this is the proper implementation, since I cannot test it before Monday. I'm not sure whether I have to use the InterLocked class or just define the processedLargeReports variable as a volatile member. </p>