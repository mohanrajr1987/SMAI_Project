<p>I have scheduled blocking jobs (based on APScheduler 3) that must access a sqlite3 db which may be created on the fly. The function open the db file (or create it if missing). Then it creates the table if not existing and returns the db connexion.</p>  <pre><code>dbLock = threading.Lock() def getConnexion(**kwargs):     # [..., skipped for clarity sake]     with dbLock:         dbcon = sqlite3.connect(dbfile)         dbcur = dbcon.cursor()         # Ensure structure:         with open(sqlfile, 'r') as pFile:             dbcur.executescript(pFile.read())         # Commit change:         dbcon.commit()     return dbcon </code></pre>  <p>SQL generating table is the following:</p>  <pre><code>--- DATAFRAME CREATE TABLE IF NOT EXISTS DataFrame(     Id           INTEGER             NOT NULL,     AnalyserId   TEXT                NOT NULL,     Timestamps   TEXT                NOT NULL,     FrameA       BLOB                NOT NULL,     FrameB       BLOB                DEFAULT(NULL),     --- [..., skipped for clarity sake]     CONSTRAINT   PK_DataFrame        PRIMARY KEY(Id),     CONSTRAINT   UQ_DataFrame        UNIQUE(AnalyserId, Timestamps, FrameA) ); </code></pre>  <p>There is only one job started in my python script (basically a command line, configurable using <code>argparse</code>). Then I run multiple instance of this python script - I suspect it might be the issue, but I am fresh new with <code>threading</code> module. The <code>main</code> function of the script contains the following code:</p>  <pre><code>sched.add_job(poll, 'interval', seconds=CLArgs.interval, start_date=t0) sched.start() </code></pre>  <p>When the db file is recreated (some condition occurs in <code>getConnexion</code> and <code>dbfile</code> is changed), I get this error:</p>  <pre><code>Traceback (most recent call last):   File "***\apscheduler-3.0.3-py3.3.egg\apscheduler\executors\base.py", line 108, in run_job     retval = job.func(*job.args, **job.kwargs)   File "***\tcppoll.py", line 89, in poll     database = getDatabase()   File "***\tcppoll.py", line 73, in getConnexion     dbcur.executescript(pFile.read()) sqlite3.OperationalError: database schema has changed </code></pre>  <p>As far as I understand it, my two concurrent scripts connect the db file, the fastest create the table, and then the second open an empty schema and when it tries to create the table sqlite3 detect that it has changed. This is why I added a lock in <code>getConnexion</code> but it has not solved the problem.</p>  <p>How can I enforce locking this resource only, and properly access it with different instances of my script. I have shared a unique scheduler, by defining it into an external module, which collect all my jobs, but it did not solved my problem.</p>