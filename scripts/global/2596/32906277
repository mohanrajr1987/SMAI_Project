<p>I was wondering the best way to get round this issue.</p>  <p>I have created a Windows Service that connects to a mailbox, processes the emails, then cleans up after itself, waits a certain amount of time and repeats.</p>  <pre><code>protected override void OnStart(string[] args) {     this._mainTask = new Task(this.Poll, this._cancellationToken.Token, TaskCreationOptions.LongRunning);     this._mainTask.Start(); }  private void Poll() {     CancellationToken cancellation = this._cancellationToken.Token;     TimeSpan interval = TimeSpan.Zero;      while (!cancellation.WaitHandle.WaitOne(interval))     {         using (IImapClient emailClient = new S22ImapClient())         {             ImapClientSettings chatSettings = ...;              emailClient.Connect(chatSettings); // CAN SOMETIMES HANG HERE              // SOME WORK DONE HERE         }          interval = this._waitAfterSuccessInterval;          // check the cancellation state.         if (cancellation.IsCancellationRequested)         {             break;         }     } } </code></pre>  <p>Now I am using a 3rd party IMAP client "S22.Imap". When I create the email client object on occasion it will hang on creation as it is attempting to login. This in turn will hang my Windows Service indefinitely.</p>  <pre><code>public class S22ImapClient : IImapClient {     private ImapClient _client;      public void Connect(ImapClientSettings imapClientSettings)     {         this._client = new ImapClient(             imapClientSettings.Host,             imapClientSettings.Port,             imapClientSettings.EmailAddress,             imapClientSettings.Password,             AuthMethod.Login,             true);     } } </code></pre>  <p>How would I change the "S22ImapClient.Connect()" call to, behind the covers, use some method to attempt to connect for a set amount of time, then abort if it has not been able to? </p>  <p>The solution to this will also be used for anything that I need to do with the mail client, for example "GetMessage()", "DeleteMessage()" etc</p>