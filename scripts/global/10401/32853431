<p>I am writing a quick tool that will allow me to pull the list of all users in a domain.  The tool will have a list of monitored groups.  I would like to find an efficient way to obtain the list of all users, and if the user is a member of the monitored group, increase a counter.  Below is my current function to obtain all users:</p>  <pre><code>[TestClass] public class UnitTest1 {     [TestMethod]     public void GetUsers()     {         string[] domains = {"awesomedomain.local"};          foreach (var domain in domains)         {             PrincipalContext ctx = new PrincipalContext(ContextType.Domain, domain);             UserPrincipal qbeUser = new UserPrincipal(ctx);             PrincipalSearcher search = new PrincipalSearcher(qbeUser);              int disabled = 0;             int enabled = 0;              foreach (var found in search.FindAll())             {                 UserPrincipal user = found as UserPrincipal;                 if (user.Enabled == true) enabled++;                 else disabled++;             }              System.Console.WriteLine("Found " + enabled+disabled + " total users in the " + domain + ".");             System.Console.WriteLine(enabled + " enabled users.");             System.Console.Write(disabled + " disabled users.");         }     } } </code></pre>  <p>I can think of a couple of different options here:</p>  <ol> <li>Create a separate function, that loops through all of the groups in the domain that are monitored, and returns a list of users that I then compare the found user to, or</li> <li>Pull the list of group memberships using IsMemberOf (which seems needlessly expensive if I have to run this per user)</li> </ol>  <p>In Powershell, this was very easy, as MemberOf was a simple property :(</p>