<p>Our company's C# product uses <code>System.DirectoryServices.AccountManagement</code> to query Active Directory for users and groups. We use the following method to get the principal:</p>  <pre><code>... PrincipalContext principalContext = new PrincipalContext(ContextType.Domain); return principalContext; ... </code></pre>  <p>We get Active Directory groups using (e.g. groupName = "Devs"):</p>  <pre><code>... GroupPrincipal groupPrincipal = GroupPrincipal.FindByIdentity(this.principalContext, groupName); ... </code></pre>  <p>Everything works fine with this setup when we run it on a simple, one domain Active Directory database.</p>  <p>My question is, what will happen when we run this code on a big forest with more than one "Devs" group? Can there be more than one "Devs" security group in a forest? If so, how will it resolve "Devs"? Do I have to switch to using the method: </p>  <pre><code>public static GroupPrincipal FindByIdentity(     PrincipalContext context,     IdentityType identityType,     string identityValue ) </code></pre>  <p>I cannot simulate this currently (lack of resources and lack of time) and I have been reading a lot about this. I know there are local, global and universal security groups, spread among domain trees. But domain trees in a forest have some sort of trust among the roots, so they are not completely ignorant of each other. What is the worst case of having "Devs" duplicates in the forest and how could the application handle it?</p>