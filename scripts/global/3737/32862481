<p>I have following simple QML Combobox:</p>  <pre><code>import QtQuick 2.0 import QtQuick.Controls 1.4  import si.mikroelektronika 1.0  Item {     id: ueStaffSelector      width: 256     height: 96      ComboBox     {         model: uePeopleModel          editable: false          anchors.fill: parent     }   // ComboBox }   // Item </code></pre>  <p>As you can see, I assign <code>uePeopleModel</code> to it, which is working ok already in app. Once the app is executed, I get following QML runtime errors:</p>  <blockquote>   <p>file:///opt/QtOpenSource55/5.5/gcc_64/qml/QtQuick/Controls/ComboBox.qml:562:   ReferenceError: modelData is not defined   file:///opt/QtOpenSource55/5.5/gcc_64/qml/QtQuick/Controls/ComboBox.qml:562:   ReferenceError: modelData is not defined   file:///opt/QtOpenSource55/5.5/gcc_64/qml/QtQuick/Controls/ComboBox.qml:562:   ReferenceError: modelData is not defined   file:///opt/QtOpenSource55/5.5/gcc_64/qml/QtQuick/Controls/ComboBox.qml:562:   ReferenceError: modelData is not defined   file:///opt/QtOpenSource55/5.5/gcc_64/qml/QtQuick/Controls/ComboBox.qml:562:   ReferenceError: modelData is not defined</p> </blockquote>  <p>Whole application is constructed in <strong>main.cpp</strong>:</p>  <pre><code>#include &lt;QtQml&gt; #include &lt;QApplication&gt; #include &lt;QQmlApplicationEngine&gt; #include &lt;QTimer&gt;  #include "database/uepeoplemodel.h" #include "core/ueapplicationstatus.h" #include "core/uedatabaseconnectionstatus.h" #include "core/uebluetoothmanager.h" #include "core/uebluetoothprinterconnectionstatus.h"  int main(int argc, char *argv[]) {     QApplication app(argc, argv);     QQmlApplicationEngine engine;      UeApplicationStatus* ueApplicationStatus=new UeApplicationStatus(qApp);     UePeopleModel* uePeopleModel=new UePeopleModel(qApp);     UeBluetoothManager* ueBtManager=new UeBluetoothManager(qApp);      QObject::connect(uePeopleModel,                      SIGNAL(ueSignalDatabaseConnectionChanged(UeDatabaseConnectionStatus::UeTypeDatabaseConnectionStatus)),                      ueApplicationStatus,                      SLOT(ueSlotDatabaseConnectionChanged(UeDatabaseConnectionStatus::UeTypeDatabaseConnectionStatus)));      QObject::connect(ueBtManager,                      SIGNAL(ueSignalBtPrinterConnectionChanged(UeBluetoothPrinterConnectionStatus::UeTypeBluetootPrinterConnectionStatus)),                      ueApplicationStatus,                      SLOT(ueSlotBtPrinterConnectionChanged(UeBluetoothPrinterConnectionStatus::UeTypeBluetootPrinterConnectionStatus)));      engine.rootContext()-&gt;setContextProperty("uePeopleModel",                                              uePeopleModel);     engine.rootContext()-&gt;setContextProperty("ueApplicationStatus",                                              ueApplicationStatus);     engine.rootContext()-&gt;setContextProperty("ueBtManager",                                              ueBtManager);      engine.addImageProvider(QLatin1String("uePeopleModel"),                             uePeopleModel);      qmlRegisterUncreatableType&lt;UeDatabaseConnectionStatus&gt;("si.mikroelektronika",                                                            1,                                                            0,                                                            "UeTypeDatabaseConnectionStatus",                                                            "Database Connection Status");      qmlRegisterUncreatableType&lt;UeBluetoothPrinterConnectionStatus&gt;("si.mikroelektronika",                                                                    1,                                                                    0,                                                                    "UeTypeBluetootPrinterConnectionStatus",                                                                    "Bluetooth Printer Connection Status");      engine.load(QUrl(QStringLiteral("qrc:/main.qml")));      uePeopleModel-&gt;ueConnectToDatabase();     ueBtManager-&gt;ueStartPairing();      //ueApplicationStatus-&gt;ueUpdate(uePeopleModel-&gt;ueFetchUsers());      return app.exec(); } </code></pre>  <p>Here is also <code>UePeopleModel</code> header, file <strong>UePeopleModel.h</strong>:</p>  <pre><code>#ifndef UEPEOPLEMODEL_H #define UEPEOPLEMODEL_H  #include &lt;QImage&gt; #include &lt;QVariant&gt; #include &lt;QStringList&gt; #include &lt;QHash&gt; #include &lt;QByteArray&gt; #include &lt;QSqlError&gt; #include &lt;QSqlQueryModel&gt; #include &lt;QSqlRecord&gt; #include &lt;QModelIndex&gt; #include &lt;QQuickImageProvider&gt; #include &lt;QByteArray&gt; #include &lt;QSqlRecord&gt; #include &lt;QSqlQuery&gt;  #include "../settings/uedefaults.h" #include "../core/uedatabaseconnectionstatus.h" #include "../core/uetypes.h" #include "../core/ueapplicationstatus.h" #include "../core/ueuserrecord.h"  class UePeopleModel : public QSqlQueryModel,                       public QQuickImageProvider {     Q_OBJECT  private:     QSqlDatabase m_ueDb;  private:     QSqlDatabase ueDatabase() const         { return this-&gt;m_ueDb; }     void ueSetDatabase(const QSqlDatabase&amp; database)         { this-&gt;m_ueDb=database; }     QImage ueImage(const QString&amp; id) const;  public:     UePeopleModel(QObject *parent=0);     ~UePeopleModel();      QVariant data(const QModelIndex &amp;index,                   int role) const Q_DECL_OVERRIDE;     QImage requestImage(const QString &amp;id,                         QSize *size,                         const QSize &amp;requestedSize);     UeTypeRoles roleNames() const;     void ueConnectToDatabase();     UeTypeUsers* ueFetchUsers();  public:     static const int ueRoleName=Qt::UserRole+1;     static const int ueRoleImage=Qt::UserRole+2;     static const int ueRolePassword=Qt::UserRole+3;  signals:     void ueSignalDatabaseConnectionChanged(const UeDatabaseConnectionStatus::UeTypeDatabaseConnectionStatus&amp; newStatus); };  #endif // UEPEOPLEMODEL_H </code></pre>  <p>and its implementation, file <strong>UePeopleModel.cpp</strong>:</p>  <pre><code>#include "uepeoplemodel.h"  UePeopleModel::UePeopleModel(QObject* parent)     : QSqlQueryModel(parent),       QQuickImageProvider(QQmlImageProviderBase::Image,                           QQmlImageProviderBase::ForceAsynchronousImageLoading) {     emit this-&gt;ueSignalDatabaseConnectionChanged(UeDatabaseConnectionStatus::NOT_CONNECTED); }   // default constructor  UePeopleModel::~UePeopleModel() {     QString connName=this-&gt;ueDatabase().connectionName();      this-&gt;ueDatabase().close();     this-&gt;ueSetDatabase(QSqlDatabase());     this-&gt;ueDatabase().removeDatabase(connName);      emit this-&gt;ueSignalDatabaseConnectionChanged(UeDatabaseConnectionStatus::NOT_CONNECTED); }   // default destructor  QVariant UePeopleModel::data(const QModelIndex &amp;index,                              int role) const {     switch(role)     {         case ueRoleImage:         {             return QString::number(index.row());         } break;    // case          case ueRoleName:         {             return this-&gt;record(index.row()).value(UePosDatabase::UeTableIndexes::UeTablePeople::INDEX_NAME).toString();         } break;    // case          case ueRolePassword:         {             return this-&gt;record(index.row()).value(UePosDatabase::UeTableIndexes::UeTablePeople::INDEX_APPPASSWORD).toString();         } break;   // case          default:         {             return QSqlQueryModel::data(index,                                         role);         } break;    // default     }   // switch      return QVariant(); }   // data  QImage UePeopleModel::ueImage(const QString &amp;id) const {     return QImage::fromData(this-&gt;record(id.toInt()).value(UePosDatabase::UeTableIndexes::UeTablePeople::INDEX_IMAGE).toByteArray(),                             "PNG").scaled(UeDefaults::UeGraphics::PEOPLE_IMAGE_WIDTH,                                           UeDefaults::UeGraphics::PEOPLE_IMAGE_HEIGHT,                                           Qt::IgnoreAspectRatio,                                           Qt::SmoothTransformation); }   // ueImage  QImage UePeopleModel::requestImage(const QString &amp;id,                                    QSize *size,                                    const QSize &amp;requestedSize) {     Q_UNUSED(size)     Q_UNUSED(requestedSize);  //    if(size) //    { //        *size=QSize(UeDefaults::UeGraphics::PEOPLE_IMAGE_WIDTH, //                    UeDefaults::UeGraphics::PEOPLE_IMAGE_HEIGHT); //    }   // if      //return this-&gt;ueImage(id);      return QImage::fromData(this-&gt;record(id.toInt()).value(UePosDatabase::UeTableIndexes::UeTablePeople::INDEX_IMAGE).toByteArray(),                             "PNG").scaled(UeDefaults::UeGraphics::PEOPLE_IMAGE_WIDTH,                                           UeDefaults::UeGraphics::PEOPLE_IMAGE_HEIGHT,                                           Qt::IgnoreAspectRatio,                                           Qt::SmoothTransformation); }   // requestImage  UeTypeRoles UePeopleModel::roleNames() const {     UeTypeRoles roles;      const int iRoleName=UePeopleModel::ueRoleName;     const int iRoleImage=UePeopleModel::ueRoleImage;     const int iRolePassword=UePeopleModel::ueRolePassword;      roles.insert(iRoleName,                  "ueRoleName");     roles.insert(iRoleImage,                  "ueRoleImage");     roles.insert(iRolePassword,                  "ueRolePassword");      return roles; }   // roleNames  void UePeopleModel::ueConnectToDatabase() {     if(!QSqlDatabase::connectionNames().contains(UePosDatabase::UeDatabaseConnectionNames::DATABASE_CONNECTION_NAME_PEOPLE,                                                  Qt::CaseInsensitive))     {         this-&gt;ueSetDatabase(QSqlDatabase::addDatabase(UePosDatabase::DATABASE_DRIVER,                                                       UePosDatabase::UeDatabaseConnectionNames::DATABASE_CONNECTION_NAME_PEOPLE));     }   // if      this-&gt;ueDatabase().setHostName(UePosDatabase::UeDatabaseConnectionParameters::DATABASE_HOSTNAME);     this-&gt;ueDatabase().setDatabaseName(UePosDatabase::UeDatabaseConnectionParameters::DATABASE_NAME);     this-&gt;ueDatabase().setUserName(UePosDatabase::UeDatabaseConnectionParameters::DATABASE_USERNAME);     this-&gt;ueDatabase().setPassword(UePosDatabase::UeDatabaseConnectionParameters::DATABASE_PASSWORD);      if(this-&gt;ueDatabase().open())     {         this-&gt;setQuery(UePosDatabase::UeSqlQueries::UeTablePeople::SQL_QUERY_GET_ALL_PEOPLE,                        this-&gt;ueDatabase());         emit this-&gt;ueSignalDatabaseConnectionChanged(UeDatabaseConnectionStatus::CONNECTED);     }     else     {         emit this-&gt;ueSignalDatabaseConnectionChanged(UeDatabaseConnectionStatus::NOT_CONNECTED);     }   // if }   // ueConnectToDatabase  UeTypeUsers* UePeopleModel::ueFetchUsers() {     UeTypeUsers* users=new UeTypeUsers();      for(int iIndex=0; iIndex&lt;this-&gt;record().count(); iIndex++)     {         users-&gt;append(new UeUserRecord(this,                                        this-&gt;record(iIndex).value(UePosDatabase::UeTableIndexes::UeTablePeople::INDEX_ID).toString(),                                        this-&gt;record(iIndex).value(UePosDatabase::UeTableIndexes::UeTablePeople::INDEX_NAME).toString(),                                        this-&gt;record(iIndex).value(UePosDatabase::UeTableIndexes::UeTablePeople::INDEX_APPPASSWORD).toString()));     }   // for      return users; }   // ueFetchUsers </code></pre>  <p>Why am I getting this error?</p>