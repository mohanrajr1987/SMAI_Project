<p>I have two custom binders to get <code>DateTime</code> and <code>DateTime?</code> to bind.</p>  <p>I'm registering them in the <code>Global.asax</code> like:</p>  <pre><code>public class MvcApplication : HttpApplication {     protected void Application_Start()     {         AreaRegistration.RegisterAllAreas();         FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);         RouteConfig.RegisterRoutes(RouteTable.Routes);         BundleConfig.RegisterBundles(BundleTable.Bundles);          ModelBinders.Binders[typeof (DateTime)] = new DateTimeModelBinder();         //ModelBinders.Binders[typeof (DateTime?)] = new NullableDateTimeModelBinder();          //ModelBinders.Binders.Add(typeof (DateTime), new DateTimeModelBinder());         //ModelBinders.Binders.Add(typeof(DateTime?), new NullableDateTimeModelBinder());     } } </code></pre>  <p>I've also tried it like this:</p>  <pre><code>ModelBinders.Binders.Add(typeof (DateTime), new DateTimeModelBinder()); ModelBinders.Binders.Add(typeof(DateTime?), new NullableDateTimeModelBinder()); </code></pre>  <p>However, they are never being hit.</p>  <p>The model binding classes are here (stolen from the Internet):</p>  <pre><code>public class DateTimeModelBinder : IModelBinder {     public object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext)     {         var value = bindingContext.ValueProvider.GetValue(bindingContext.ModelName);          DateTime dateTime;          var isDate = DateTime.TryParse(value.AttemptedValue,             Thread.CurrentThread.CurrentUICulture,             DateTimeStyles.None,             out dateTime);          if (!isDate)         {             bindingContext.ModelState.AddModelError(bindingContext.ModelName,                 $"Cannot bind value {value.AttemptedValue} to a DateTime");             return DateTime.UtcNow;         }          return dateTime;     } } </code></pre>  <p>and here:</p>  <pre><code>public class NullableDateTimeModelBinder : IModelBinder {     public object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext)     {         var value = bindingContext.ValueProvider.GetValue(bindingContext.ModelName);          if (string.IsNullOrWhiteSpace(value.AttemptedValue))         {             return null;         }          DateTime dateTime;          var isDate = DateTime.TryParse(value.AttemptedValue, Thread.CurrentThread.CurrentUICulture, DateTimeStyles.None, out dateTime);          if (!isDate)         {             bindingContext.ModelState.AddModelError(bindingContext.ModelName, $"Cannot convert {value.AttemptedValue} to a DateTime.");             return DateTime.UtcNow;         }          return dateTime;     } } </code></pre>  <p>What as I missing?</p>