<p>I am very puzzled at the result of this bit of code:</p>  <pre><code>std::vector&lt;int&gt; v; std::cout &lt;&lt; (v.end() - v.begin()) &lt;&lt; std::endl; v.reserve(1); std::cout &lt;&lt; (v.end() - v.begin()) &lt;&lt; std::endl; v[9] = 0; std::cout &lt;&lt; (v.end() - v.begin()) &lt;&lt; std::endl; </code></pre>  <p>The output:</p>  <pre><code>0 0 0 </code></pre>  <p>So... first of all... <code>end()</code> does not point to the end of the internal array but the last occupied cell... ok, that is why the result of the iterator subtraction is still <code>0</code> after <code>reserve(1)</code>. But, why is it still <code>0</code> after one cell has been filled. I expected <code>1</code> as the result, because <code>end()</code> should now return the iterator to the second internal array cell. Furthermore, why on earth am I not getting a seg fault for accessing the tenth cell with <code>v[9] = 0</code>, while the vector is only 1 cell long?</p>