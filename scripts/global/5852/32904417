<p>I am trying to create a Ruby wrapper for dynamic *.so library which deals with image processing. One of the functions <code>convert_x_to_z</code> has a custom typedef input parameter. How can I pass in the vector of <code>A</code> objects if I mapped the <code>A</code> struct</p>  <pre><code>typedef struct image {     uint16_t image_width;     uint16_t image_height;     uint16_t image_depth;     uint8_t* data; } A; </code></pre>  <p>into a <code>FFI:Structure</code> like this</p>  <pre><code> class A  &lt; FFI::Struct     layout :image_width , :int,            :image_height, :int,            :image_depth, :int,            :data, :pointer   end </code></pre>  <p>Suppose I have a variable <code>single</code> which is a instance of class A. How can I wrap this into an array of class B, which will represent the vector/array of classes <code>A</code> and pass it as a parameter <code>const B &amp;x</code> to the function <code>int32_t convert_x_to_z</code>?</p>  <pre><code>int32_t convert_x_to_z(     const B &amp;x,     uint32_t &amp;t,     uint8_t* z); </code></pre>  <p>This is the <code>B</code> vector or array struct of <code>A</code> class.</p>  <pre><code>typedef std::vector&lt;A&gt; B; </code></pre>