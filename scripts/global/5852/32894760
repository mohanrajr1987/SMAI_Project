<p>my biggest problem is getting the quickSortHelper class to work. i know what i want the parameters to be, and the stuff inside i need to call on is what i can't figure out. i've tried a mixture of using the partition and quicksort but i can't figure it out. the code is written like this because i will be using a timesort class in the future to solve and time 6+ sorting algorithms. i got it to work by just throwing the code inside main. but all i want inside main is what i have here.</p>  <pre><code>#include &lt;iostream&gt; #include &lt;algorithm&gt; #include &lt;vector&gt; #include &lt;chrono&gt; #include &lt;functional&gt; #include &lt;random&gt;   //i know not all the above libraries are being used, once quickSort is  //working i plan on adding it to 5 other sorting algorithms, where these //are neccessary.  using namespace std;  void quickSort(vector&lt;int&gt;&amp;, int, int); int partition(vector&lt;int&gt;&amp;, int, int); double timeSort(vector&lt;int&gt; &amp;v, function&lt;void(vector&lt;int&gt;&amp;)&gt;f);  int main() {     vector&lt;int&gt;intVec(1000);     generate(intVec.begin(), intVec.end(), rand);      int p = 0;     int q = 1000;     quickSort(intVec, p, q);      auto time = timeSort(intVec, quickSort);     for (auto i = 0u; i != intVec.size(); ++i)     cout &lt;&lt; intVec[i] &lt;&lt; " ";     cout &lt;&lt; "\nQuick sort took " &lt;&lt; time &lt;&lt; " nanoseconds\n";      char chubby;     cin &gt;&gt; chubby;     return 0; } double timeSort(vector&lt;int&gt; &amp;v, function&lt;void(vector&lt;int&gt;&amp;)&gt;f) {     auto start = chrono::high_resolution_clock::now();     f(v);     auto end = chrono::high_resolution_clock::now();     return static_cast&lt;double&gt;(((end - start).count())); } int partition(vector&lt;int&gt;&amp;intVec, int p, int q) {     int x = intVec[p];     int i = p;     int j;  for (j = p + 1; j &lt; q; j++) {     if (intVec[j] &lt;= x)     {         i = i + 1;         swap(intVec[i], intVec[j]);     } }      swap(intVec[i], intVec[p]);     return i; }  void quickSort(vector&lt;int&gt;&amp;intVec, int p, int q) {     int r;     if (p &lt; q)     {         r = partition(intVec, p, q);         quickSort(intVec, p, r);         quickSort(intVec, r + 1, q);     } } void quickSortHelper(vector&lt;int&gt;&amp;intVec) {     //i want to make a call to the timeSort function with     //quickSortHelper, i can't use quickSort directly because timeSort     //only has 2 parameters, the vector to be solved, and the method of     //solving it. i know   } </code></pre>