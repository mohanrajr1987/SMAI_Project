<p>I have a Datagrid that I am attempting to display the value in a combo box. The combobox's values are dynamic and are several lists concatenated together. I am having trouble getting the Node Name column to display its initial value after I Deserialize the XML and set the data context. </p>  <p>All other columns and bound data works. The only one I am having trouble with is the Node Name column. </p>  <p>The values in the combo appear when I drop it down, I am able to select a value, and the value displays after the selection and the combobox has lost focus. This is only the initial deserialization and displaying of the value that I am having trouble with. It is also worth noting that <strong>SelectedTest</strong> changes when a column in another datagrid is selected, Updating the currently selected test and changing the data in this datagrid. This works, all other data populates except the Node Name column. </p>  <p>I have also verified that the object is deserialized properly and the data is present in the object.</p>  <p>XAML:</p>  <pre><code>&lt;DataGrid AutoGenerateColumns="False"                           Name="ParamsGrid"                           Background="White"                           Grid.Column="0"                           Grid.Row="2"                           Height="auto"                           Width="auto"                           Margin="5"                           CanUserAddRows="True"                           CanUserDeleteRows="True"                           SelectedCellsChanged="ParamsGrid_SelectedCellsChanged"                           ItemsSource="{Binding Path=SelectedTest.Param}"                           IsSynchronizedWithCurrentItem ="True"                           SelectionMode="Single"                           VirtualizingPanel.IsVirtualizing="True"&gt;                         &lt;DataGrid.Columns&gt;                             &lt;DataGridTemplateColumn Width="*"  Header="Node Type"&gt;                                 &lt;DataGridTemplateColumn.CellTemplate&gt;                                     &lt;DataTemplate&gt;                                         &lt;ComboBox ItemsSource="{Binding Source={StaticResource EnumDataProvider}}"                                                     SelectedItem="{Binding Path=NodeType, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" /&gt;                                      &lt;/DataTemplate&gt;                                 &lt;/DataGridTemplateColumn.CellTemplate&gt;                             &lt;/DataGridTemplateColumn&gt;                              &lt;DataGridTemplateColumn Width="*"  Header="Node Name"&gt;                                 &lt;DataGridTemplateColumn.CellTemplate&gt;                                     &lt;DataTemplate&gt;                                         &lt;ComboBox ItemsSource="{Binding Path=Nodes, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"                                                     SelectedItem="{Binding Path=NodeName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"&gt;                                         &lt;/ComboBox&gt;                                     &lt;/DataTemplate&gt;                                 &lt;/DataGridTemplateColumn.CellTemplate&gt;                             &lt;/DataGridTemplateColumn&gt;                              &lt;DataGridTextColumn Width="*"                                                  Header="Value"                                                  Binding="{Binding Path=Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" /&gt;                         &lt;/DataGrid.Columns&gt;                     &lt;/DataGrid&gt; </code></pre>  <p>Binding (note the TriggerNodeUpdate happens when one of the concatenated lists changes):</p>  <pre><code>public ObservableCollection&lt;string&gt; Nodes     {         get         {             var col = new ObservableCollection&lt;string&gt;();              if (TestSetData != null)             {                 foreach (string s in TestSetData.TestSetSettings.ControlNodes.Settings.St)                     col.Add(s);                  foreach (string s in TestSetData.TestSetSettings.ControlNodes.Measurements.Ch)                     col.Add(s);                  foreach (string s in TestSetData.TestSetSettings.ControlNodes.Alarms.Al)                     col.Add(s);                  foreach (string s in TestSetData.TestSetSettings.ControlNodes.Events.Ev)                     col.Add(s);             }              return col;         }     }      public void TriggerNodeUpdate()     {         PropertyChanged.TriggerEvent(this, "Nodes");     }      private void SetDataContext()     {         base.DataContext = TestSetData;     }      private void Load_Click(object sender, RoutedEventArgs e)     {         OpenFileDialog openFileDialog = new OpenFileDialog();         openFileDialog.Filter = "Xml File (*.xml)|*.xml|All Files (*.*)|*.*";         openFileDialog.Title = "Select Test Script to load";          if (openFileDialog.ShowDialog() == true)         {             var strXml = File.ReadAllText(openFileDialog.FileName);              try             {                 TestSetData = Helpers.XmlDeserializeFromString&lt;TestPlan&gt;(strXml);                 SetDataContext();             }             catch (Exception ex)             {                 Logger.LogError(ex);                 MessageBox.Show("There was an error loading the test script. \r\n" + ex.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);                 NewTestSet();             }         }     } </code></pre>  <p>Object:</p>  <pre><code>[XmlRoot(ElementName = "TestSet")] public class TestPlan : INotifyPropertyChanged {     ObservableCollection&lt;TestSet&gt; _tests;     TestSetSettings _testSetSettings;     TestSet _selectedTest;      public TestPlan()     {           _tests = new ObservableCollection&lt;TestSet&gt;();         _testSetSettings = new TestSetSettings();     }      [XmlElement(ElementName = "TestSetSettings")]     public TestSetSettings TestSetSettings      {         get { return _testSetSettings; }         set { _testSetSettings = value; PropertyChanged.TriggerEvent(this, "TestSetSettings"); }     }      [XmlElement(ElementName = "Test")]     public ObservableCollection&lt;TestSet&gt; Tests     {         get { return _tests; }         set { _tests = value; PropertyChanged.TriggerEvent(this, "Tests"); }     }      [XmlIgnore]     public TestSet SelectedTest     {         get { return _selectedTest; }         set { _selectedTest = value; PropertyChanged.TriggerEvent(this, "SelectedTest"); }     }      public event PropertyChangedEventHandler PropertyChanged; }  [XmlRoot(ElementName = "Test")] public class TestSet : INotifyPropertyChanged {     string _name;     ObservableCollection&lt;DataCapture&gt; _dataCaptures;     ObservableCollection&lt;Param&gt; _param;      public TestSet()     {         _dataCaptures = new ObservableCollection&lt;DataCapture&gt;();         _param = new ObservableCollection&lt;Param&gt;();     }      [XmlElement(ElementName = "Name")]     public string Name     {         get { return _name; }         set { _name = value; PropertyChanged.TriggerEvent(this, "Name"); }     }      [XmlElement(ElementName = "Data")]     public ObservableCollection&lt;DataCapture&gt; DataCaptures     {         get { return _dataCaptures; }         set { _dataCaptures = value; PropertyChanged.TriggerEvent(this, "DataCaptures"); }     }      [XmlElement(ElementName = "Param")]     public ObservableCollection&lt;Param&gt; Param     {         get { return _param; }         set { _param = value; PropertyChanged.TriggerEvent(this, "Param"); }     }      public event PropertyChangedEventHandler PropertyChanged; }   [XmlRoot(ElementName = "Param")] public class Param : INotifyPropertyChanged {     string _nodeName;     CPCNodeType _nodeType;     string _value;     ParamVentModes _ventModes;      public Param()     {         _ventModes = new ParamVentModes();     }      [XmlElement(ElementName = "NodeName")]     public string NodeName     {         get { return _nodeName; }         set { _nodeName = value; PropertyChanged.TriggerEvent(this, "NodeName"); }     }      [XmlElement(ElementName = "NodeType")]     public CPCNodeType NodeType     {         get { return _nodeType; }         set { _nodeType = value; PropertyChanged.TriggerEvent(this, "NodeType"); }     }      [XmlElement(ElementName = "Value")]     public string Value     {         get { return _value; }         set { _value = value; PropertyChanged.TriggerEvent(this, "Value"); }     }      [XmlElement(ElementName = "VentModes")]     public ParamVentModes VentModes     {         get { return _ventModes; }         set { _ventModes = value; PropertyChanged.TriggerEvent(this, "VentModes"); }     }      public event PropertyChangedEventHandler PropertyChanged; } </code></pre>