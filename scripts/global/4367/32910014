<p>I'm developing one web app that uses PayPal for payments, and when I'm creating a payment the process seems to be ok but the resultant URLs aren't targeting to sandbox environment, however, it's targeting to live environment. I'm viewing this situation from yesterday.</p>  <p>Some idea of this?</p>  <p>I'm using CakePHP. This is my code</p>  <pre><code>private $host = 'https://api.sandbox.paypal.com'; private $clientId = 'AXgApps4Dl9e_HYgTYJyTA-Trb_KTc9LOCJABNhdj79YB4NhnHfQIaNyCXxjBlrvIa1jSUKaeLXtxUP2'; private $clientSecret = 'EBXD0GJWMP-d9Jqe8ADP9Y6NBFo2j9ZOjO21W1MVlIYI7DHMTzcjbkvcH8CDtnZUxGdkY12_zhDPzUYy'; private $token = '';  private function read_stdin() {     $fr = fopen("php://stdin", "r");     $input = rtim(fgets($fr, 128));     fclose($fr);     return $input; }  private function get_access_token($url, $postdata) {     $curl = curl_init($url);     curl_setopt($curl, CURLOPT_POST, true);     curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);     curl_setopt($curl, CURLOPT_USERPWD, $this-&gt;clientId . ":" . $this-&gt;clientSecret);     curl_setopt($curl, CURLOPT_HEADER, false);     curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);     curl_setopt($curl, CURLOPT_POSTFIELDS, $postdata);     #curl_setopt($curl, CURLOPT_VERBOSE, TRUE);     $response = curl_exec($curl);     if (empty($response)) {         die(curl_error($curl));         curl_close($curl);     } else {         $info = curl_getinfo($curl);         curl_close($curl);         if ($info['http_code'] != 200 &amp;&amp; $info['http_code'] != 201) {             die();         }     }     $jsonResponse = json_decode($response);     return $jsonResponse-&gt;access_token; }  private function make_post_call($url, $postdata) {     $this-&gt;token = $this-&gt;getOauthAccessToken();     $curl = curl_init($url);     curl_setopt($curl, CURLOPT_POST, true);     curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);     curl_setopt($curl, CURLOPT_HEADER, false);     curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);     curl_setopt($curl, CURLOPT_HTTPHEADER, array(         'Authorization: Bearer ' . $this-&gt;token,         'Accept: application/json',         'Content-Type: application/json'     ));     curl_setopt($curl, CURLOPT_POSTFIELDS, $postdata);     #curl_setopt($curl, CURLOPT_VERBOSE, TRUE);     $response = curl_exec($curl);     if (empty($response)) {         die(curl_error($curl));         curl_close($curl);     } else {         $info = curl_getinfo($curl);         curl_close($curl);         if ($info['http_code'] != 200 &amp;&amp; $info['http_code'] != 201) {             die();         }     }     $jsonResponse = json_decode($response, TRUE);     return $jsonResponse; }  private function make_get_call($url) {     $curl = curl_init($url);     $this-&gt;token = $this-&gt;getOauthAccessToken();     curl_setopt($curl, CURLOPT_POST, false);     curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);     curl_setopt($curl, CURLOPT_HEADER, false);     curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);     curl_setopt($curl, CURLOPT_HTTPHEADER, array(         'Authorization: Bearer ' . $this-&gt;token,         'Accept: application/json',         'Content-Type: application/json'     ));     #curl_setopt($curl, CURLOPT_VERBOSE, TRUE);     $response = curl_exec($curl);     if (empty($response)) {         die(curl_error($curl));         curl_close($curl);     } else {         $info = curl_getinfo($curl);         curl_close($curl);         if ($info['http_code'] != 200 &amp;&amp; $info['http_code'] != 201) {             die();         }     }     $jsonResponse = json_decode($response, TRUE);     return $jsonResponse; }  private function getOauthAccessToken() {     $url = $this-&gt;host . '/v1/oauth2/token';     $postArgs = 'grant_type=client_credentials';     return $this-&gt;get_access_token($url, $postArgs); }     public function initiatePaymentWithPayPalAccount() {     if ($this-&gt;request-&gt;is('post')) {         if ($this-&gt;checkUser($this-&gt;request-&gt;data['user_id'], $this-&gt;request-&gt;data['token'])) {             $payment_execute_url = "";             $payment_execute_method = "";             $payment_approval_url = "";             $payment_approval_method = "";             $amount = number_format((int) $this-&gt;request-&gt;data['amount'], 2, '.', '');             $description = $this-&gt;request-&gt;data['description'];             try {                 $url = $this-&gt;host . '/v1/payments/payment';                 $payment = array(                     'intent' =&gt; 'sale',                     'payer' =&gt; array(                         'payment_method' =&gt; 'paypal'                     ),                     'transactions' =&gt; array(array(                             'amount' =&gt; array(                                 'total' =&gt; $amount,                                 'currency' =&gt; 'USD'                             ),                             'description' =&gt; $description                         )),                     'redirect_urls' =&gt; array(                         'return_url' =&gt; 'http://localhost/xxxx/Purchases/executePayment?approved=true',                         'cancel_url' =&gt; 'http://localhost/xxxx/Purchases/executePayment?approved=false'                     )                 );                 $json = json_encode($payment);                 $json_resp = $this-&gt;make_post_call($url, $json);                 foreach ($json_resp['links'] as $link) {                     if ($link['rel'] == 'execute') {                         $payment_execute_url = $link['href'];                         $payment_execute_method = $link['method'];                     } else if ($link['rel'] == 'approval_url') {                         $payment_approval_url = $link['href'];                         $payment_approval_method = $link['method'];                     }                 }                 $this-&gt;Purchase-&gt;create();                 $this-&gt;Purchase-&gt;set('campaign_id', $this-&gt;request-&gt;data['campaign_id']);                 $this-&gt;Purchase-&gt;set('amount', (int) $this-&gt;request-&gt;data['amount']);                 $this-&gt;Purchase-&gt;set('purchase_date', date('Y-m-d'));                 $this-&gt;Purchase-&gt;set('payment_approval_url', $payment_approval_url);                 $this-&gt;Purchase-&gt;set('payment_approval_method', $payment_approval_method);                 $this-&gt;Purchase-&gt;set('payment_execute_url', $payment_execute_url);                 $this-&gt;Purchase-&gt;set('payment_execute_method', $payment_execute_method);                 $this-&gt;Purchase-&gt;set('payment_id', $json_resp['id']);                 $this-&gt;Purchase-&gt;set('status', $this-&gt;getStatusForPayment($json_resp['state']));                 if ($this-&gt;Purchase-&gt;save()) {                     $this-&gt;Campaign-&gt;id = $this-&gt;request-&gt;data['campaign_id'];                     if ($this-&gt;Campaign-&gt;saveField('purchase_id', $this-&gt;Purchase-&gt;getLastInsertId())) {                         return new CakeResponse(array('body' =&gt; json_encode(array('Status' =&gt; 200, 'Result' =&gt; $this-&gt;Campaign-&gt;findById($this-&gt;request-&gt;data['campaign_id'])), JSON_ERROR_RECURSION)));                     } else {                         return new CakeResponse(array('body' =&gt; json_encode(array('Status' =&gt; 202), JSON_ERROR_RECURSION)));                     }                 }             } catch (Exception $ex) {                 return new CakeResponse(array('body' =&gt; json_encode(array('Status' =&gt; 500), JSON_ERROR_RECURSION)));             }         }     }     return new CakeResponse(array('body' =&gt; json_encode(array('Status' =&gt; 403), JSON_ERROR_RECURSION))); } </code></pre>