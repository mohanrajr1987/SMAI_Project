<p>I want to set the compile-time condition in macros when it generates code outside the functions. I need something like that: </p>  <pre><code>macro_rules! cond {     ( $cond_el:expr ) =&gt; {          #[if $cond_el == "i32"]              struct A {                  x: i32              }          #[else]              struct A {                  x: f64              }     } }  cond!("i32"); cond!("f64");  fn main() {} </code></pre>  <p>Or maybe something like that: </p>  <pre><code>macro_rules! cond {     ( $cond_el:expr ) =&gt; {          match $cond_el {             "i32" =&gt; {                 struct A {                    x: i32                 }             }             _ =&gt; {                 struct A {                     x: f64                 }             }         }     } }  cond!("i32"); cond!("f64");  fn main() {} </code></pre>  <p>Is it possible with current Rust macros state?</p>