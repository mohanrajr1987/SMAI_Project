<p>So I started writing a template in C using X-Macros and had the desire to use _Generic() to overload them. Problem is that would require extending a macro. I know I can't have a self-referential macro. And I believe I can't expand the definition of a macro like I would wish. I know I could use other techniques and be done with the code (like flipping my node inside-out and use container_of) but I'll eventually have the same problem when implementing typeof() so I figured it would be best to solve it now if possible.</p>  <p>A toy example (of what I wish would work) is:</p>  <pre><code>#include &lt;stdio.h&gt;  void a(int x){printf("a\n");} void b(char x){printf("b\n");}  #define mat(x) _Generic((x), int: a(x)) #define temp(x) mat(x) #define mat(x) _Generic((x), char: b(x), default: temp(x))  int main(void)     {     int x;     mat(x);     } </code></pre>  <p><strong>Is there any way to accomplish this redefinition or something equivalent? If not is there a way to do it in a POSIX compliant way (M4, sh, other)?</strong></p>  <p>For answers: This code pattern seems generally useful in C11 so only using C if possible. I really hate most preprocessors so if its not the CPP then it's definitely my last choice.</p>