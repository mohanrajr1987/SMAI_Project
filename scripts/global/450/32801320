<p>I recently saw some code like this:</p>  <pre><code>#define JOIN(lhs, rhs)   JOIN_(lhs, rhs) #define JOIN_(lhs, rhs)  JOIN__(lhs, rhs) #define JOIN__(lhs, rhs) lhs##rhs </code></pre>  <p>I tested the code, calling like these:</p>  <pre><code>JOIN(Foo, 0); JOIN_(Foo, 1); JOIN__(Foo, 2);  JOIN(Foo, JOIN(A,B)); JOIN_(Foo, JOIN(A,B)); JOIN__(Foo, JOIN(A,B)); </code></pre>  <p>The macros expand into the following symbols:</p>  <pre><code>Foo0 Foo1 Foo2 FooAB FooAB FooJOIN </code></pre>  <p>I get the purpose, it's resolving arguments differently. Calling any of the variations of <code>JOIN</code> is clearly not the same on the last case. But how are these macros being expanded? Why do the arguments behave differently?</p>  <p>Edit: <a href="https://github.com/gpakosz/Assert/blob/master/src/pempek_assert.h" rel="nofollow">Here's</a> the file</p>