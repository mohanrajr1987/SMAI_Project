<p>I'm having a lot of trouble getting macros from another crate to work in Rust. My lib.rs file looks like this:</p>  <pre><code>#[macro_use] extern crate session_types;  mod main; </code></pre>  <p>And here's a simplified part of my main.rs, demonstrating proper use of the <code>offer!</code> macro:</p>  <pre><code>use session_types::*;  type Server = Offer&lt;Choose&lt;Var&lt;Z&gt;, Var&lt;Z&gt;&gt;, Choose&lt;Var&lt;Z&gt;, Var&lt;Z&gt;&gt;&gt;;  struct Foo;  impl Foo {     fn server(&amp;self, c: Chan&lt;(), Rec&lt;Server&gt;&gt;) {         let mut c = c.enter();         loop {             c = offer!{ c,                 LEFT_BRANCH =&gt; c.sel1().zero(),                 RIGHT_BRANCH =&gt; c.sel2().zero()             };         }     } } </code></pre>  <p>I know the compiler is able to expand <code>offer!</code> because I've debugged code in blocks inside that macro, and I get warnings about unused variables in that macro which look like this:</p>  <pre><code>&lt;session_types macros&gt;:1:1: 5:16 note: in expansion of offer! src/main.rs:107:21: 133:14 note: expansion site &lt;session_types macros&gt;:3:53: 3:57: warning: unused variable: 'right', #[warn(unused_variables)] on by default &lt;session_types macros&gt;:3 Branch:: Left ( $id ) =&gt; $code, Branch:: Right ( $id ) =&gt; offer! { </code></pre>  <p>which obviously includes part of the macro. However, I get compilation errors saying that, on the lines they're used, the macro <code>offer!</code> is undefined.</p>  <pre><code>src/main.rs:107:21: 133:14 note: in this expansion of offer! (defined in &lt;session_types macros&gt;) src/main.rs:57:17: 57:22 error: macro undefined: 'offer!' src/main.rs:57             c = offer!{ c,                                ^~~~~ src/main.rs:107:21: 107:26 error: macro undefined: 'offer!' src/main.rs:107             night = offer!{ night, </code></pre>  <p>Note: this occurs on the nightly branch of the compiler.</p>