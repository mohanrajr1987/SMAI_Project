<p>I am new to Rust and am learning to write my own macros. This macro should fill my struct <code>MatrixXf</code> like the macro <code>vec!</code> does for <code>Vec&lt;T&gt;</code>.</p>  <pre><code>//fills matrix with matlab like syntax macro_rules! mat {     [ $($( $x: expr ),*);* ] =&gt; {{         let mut tmp_vec = Vec::new();         let mut rows = 0;         let mut cols = 0;         let mut is_first_row_collected = false;         $(             let mut inner_cols = 0;             $(                 tmp_vec.push($x);                 inner_cols += 1;             )*             if is_first_row_collected {//if we read first row we can check that other rows have same length                 assert!(inner_cols == cols);             } else {                 is_first_row_collected = true;                 cols = inner_cols;             }             rows += 1;         )*         MatrixXf::construct(tmp_vec, rows, cols)//fills MatrixXf fields     }} } </code></pre>  <p>And I use it this way:</p>  <pre><code>let mat = mat![1.0, 2.0, 3.0; 4.0, 5.0, 6.0]; </code></pre>  <p>Everything is ok, but the compiler shows me the following warning:</p>  <blockquote>   <p>7:23 warning: value assigned to <code>is_first_row_collected</code> is never read, #[warn(unused_assignments)] on by default   :7 is_first_row_collected = true ; cols = inner_cols ; } rows += 1 ; ) *</p> </blockquote>  <p>Maybe I misunderstood something, but I do use <code>is_first_row_collected</code> when checking that the first row was visited. Is it possible to rewrite my code to avoid this warning? </p>