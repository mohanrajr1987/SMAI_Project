<p>I need to have signals/slots analog (with no boost) of Qt's signals/slots system. The problem is that if I want to call signal's slots, I need to generate some code. Look at this example:</p>  <pre><code>struct Test {     void on_mouse_click_event(int x, int y) // #1     {         using Function = void (Test::*)(int x, int y); // #2         auto event_id_receivers_pair = event_id_to_receivers_.find(typeid(Function).hash_code());         if(event_id_receivers_pair != event_id_to_receivers_.end())         {             FunctionArgs&lt;Function&gt; args(x, y); // #3             for(auto&amp; p_receiver : event_id_receivers_pair-&gt;second)                 p_receiver-&gt;call(&amp;args);         }         on_mouse_click(x, y);     }      virtual void on_mouse_click(int x, int y)     {         std::cout &lt;&lt; "On click: " &lt;&lt; x &lt;&lt; ", " &lt;&lt; y             &lt;&lt; " - " &lt;&lt; this &lt;&lt; "\n";     }      std::unordered_map&lt;         std::size_t/*Function (event) ID*/,         std::vector&lt;std::unique_ptr&lt;ICallee&gt;&gt;/*Array of receivers*/&gt;         event_id_to_receivers_;  };  struct Foo {     void test_click(int x, int y)     {         std::cout &lt;&lt; "On test click: " &lt;&lt; x &lt;&lt; ", " &lt;&lt; y             &lt;&lt; " - " &lt;&lt; this &lt;&lt; "\n";     } };  template&lt;typename Sender, typename Receiver, typename Signal, typename Slot&gt; void connect(Sender* sender, Signal signal,     Receiver* receiver, Slot slot) {     auto callee = create_callee&lt;Receiver, Slot&gt;(receiver, slot);     sender-&gt;event_id_to_receivers_[         typeid(Signal).hash_code()].             push_back(std::move(callee)); }  int main() {     Test test;     Foo foo;     Foo foo1;      connect(&amp;test, &amp;Test::on_mouse_click_event,         &amp;foo, &amp;Foo::test_click);      connect(&amp;test, &amp;Test::on_mouse_click_event,         &amp;foo1, &amp;Foo::test_click);      test.on_mouse_click_event(10, 20); } </code></pre>  <p>class <code>Test</code> has an event <code>on_mouse_click()</code>. In main, I have 2 connections to this event and last line is event's emit. As a result, I want to see something like this:</p>  <pre><code>On click: 10, 20 - 009CFC63 On click: 10, 20 - 009CFC57 On test click: 10, 20 - 009CFC6C </code></pre>  <p>The question: is there a way for me to have some macro to write the code like this:</p>  <pre><code>class Test {     SIGNAL(on_mouse_click)(int x, int y); }; </code></pre>  <p>I need to have:</p>  <ol> <li>Type of pointer to member function : <code>void (Test::*)(int x, int y); // #2</code></li> <li>Names of function parameters to pass them around: <code>args(x, y); // #3</code></li> </ol>  <p>Is this possible ? Are there any workarounds ?</p>  <p>Thanks</p>