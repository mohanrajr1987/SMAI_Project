<p>I would like to inject code into a function. For concreteness, consider a simple simulater:</p>  <pre><code>function simulation(A, x)     for t in 1:1000         z = randn(3)         x = A*x + z     end end </code></pre>  <p>Sometimes I would like to record the values of x every ten time-steps, sometimes the values of z every 20 time-steps, and sometimes I don't want to record any values. I could, of course, put some flags as arguments to the function, and have some if-else statements. But I would like to rather keep the simulation code clean, and only inject a piece of code like</p>  <pre><code>if t%10 == 0     append!(rec_z, z) end </code></pre>  <p>into particular places of the function whenever I need it. For that, I'd like to write a macro such that monitoring a particular value becomes</p>  <pre><code>@monitor(:z, 10) simulation(A, x) </code></pre>  <p>Is that possible with Julia's Metaprogramming capabilities?</p>