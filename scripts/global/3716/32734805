<p>I have problems reading from a serial port, I’m trying the code below to read and write from a serial port, I run the program and I enter some data in console and I can write to serial ports. I’m using an application “Free Device Monitoring Studio” to watch the serial port’s behavior. But when I run my program it doesn’t read any data. This is the Program which I got from this <a href="http://rxtx.qbang.org/wiki/index.php/Two_way_communcation_with_the_serial_port" rel="nofollow">link</a>:</p>  <pre><code>import gnu.io.CommPort; import gnu.io.CommPortIdentifier; import gnu.io.SerialPort; import gnu.io.SerialPortEvent; import gnu.io.SerialPortEventListener;  import java.io.IOException; import java.io.InputStream; import java.io.OutputStream;  /**  * This version of the TwoWaySerialComm example makes use of the  * SerialPortEventListener to avoid polling.  *  */ public class TwoWaySerialComm {     public TwoWaySerialComm()     {         super();     }      void connect ( String portName ) throws Exception     {         CommPortIdentifier portIdentifier = CommPortIdentifier.getPortIdentifier(portName);         if ( portIdentifier.isCurrentlyOwned() )         {             System.out.println("Error: Port is currently in use");         }         else         {             CommPort commPort = portIdentifier.open(this.getClass().getName(),2000);              if ( commPort instanceof SerialPort )             {                 SerialPort serialPort = (SerialPort) commPort;                 serialPort.setSerialPortParams(57600,SerialPort.DATABITS_8,SerialPort.STOPBITS_1,SerialPort.PARITY_NONE);                   OutputStream out = serialPort.getOutputStream();                  (new Thread(new SerialWriter(out))).start();                 InputStream in = serialPort.getInputStream();      // serialPort.notifyOnDataAvailable(true);                 serialPort.addEventListener(new SerialReader(in));                  serialPort.notifyOnDataAvailable(true);              }             else             {                 System.out.println("Error: Only serial ports are handled by this example.");             }         }     }          public static class SerialWriter implements Runnable     {         OutputStream out;          public SerialWriter ( OutputStream out )         {             this.out = out;         }          public void run ()         {             try             {                 int c = 0;                 while ( ( c = System.in.read()) &gt; -1 )                 {                     this.out.write((byte)c);                     System.out.println((byte)c);                 }             }             catch ( IOException e )             {                 e.printStackTrace();                 System.exit(-1);             }         }     }        /**      * Handles the input coming from the serial port. A new line character      * is treated as the end of a block in this example.      */     public static class SerialReader implements SerialPortEventListener     {         private InputStream in;         private byte[] buffer = new byte[1024];          public SerialReader ( InputStream in )         {             this.in = in;         }          public void serialEvent(SerialPortEvent arg0) {             int data;              try             {                 data = in.read();                 int len = 0;                 while ( in.available()&gt;0 )                 {                     if ( data == '\n' ) {                         break;                     }                     buffer[len++] = (byte) data;                 }                 System.out.print("read"+new String(buffer,0,len));             }             catch ( IOException e )             {                System.out.println(e.getMessage());                System.out.println("error");                e.printStackTrace();             }         }      }      /** */         public static void main ( String[] args )     {         try         {             (new TwoWaySerialComm()).connect("COM5");         }         catch ( Exception e )         {             // TODO Auto-generated catch block             e.printStackTrace();             System.out.print(e.toString());         }     }   } </code></pre>  <p>I put a breakpoint at While loop in serialEvent(SerialPortEvent arg0) method,</p>  <pre><code> while ( ( data = in.read()) &gt; -1 ) </code></pre>  <p>But it never arrives at breakpoint. And It can't read data and so it doesn't write something in console with this line:</p>  <pre><code>System.out.print("read"+new String(buffer,0,len)); </code></pre>  <p>I need some help to know what the problem is.</p>