<p>I have problem with my code. I will explain the task of the code. I have 3 serial ports and i have maked socket server. I want to transmit/receive the data from serial ports and send the data to other pc via telnet. The problem: I receive at "fd1data" (serial port1 at 115000 boud rate), 400k bytes of data and send it to (connection.send(fd1data)). I want to receive 400k bytes of data, at the other pc via telnet. but i receive only 200k bytes and at huge delay maybe after 10 seconds. Serial port stop receiving data but socket still send data. the system isn't real time. the code:</p>  <pre><code>import socket import select import time import serial import RPi.GPIO as GPIO  # create serial object fd0=serial.Serial('/dev/ttyUSB0',115200,timeout=0)  # pc  fd1=serial.Serial('/dev/ttyUSB1',115200,timeout=0)  # monitor  fd2=serial.Serial('/dev/ttyUSB2',115200,timeout=0)  #   port = 5518  #Create socket server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)  #bind to our desired port (on any available address) server_socket.bind(('', port))  #set to non-blocking operation server_socket.setblocking(0) ####################################  ## global paameters  buffer_rx=""    ##################################################             #################################### ####################################### ############################################################  #main loop for the threaded script  ############################################################ while 1:#not event.wait_should_exit(1):     print 'Waiting for a connection...'     #outputs[0].value_set(0.0)      #listen for incoming connection requests     server_socket.listen(1)      #use select to determine when a connection is available     server_rfds, server_wfds, server_xfds = select.select([server_socket], [], [], 2) if server_socket in server_rfds:     #accept the connection     connection, address = server_socket.accept()      #make new connection non-blocking     connection.setblocking(0)      print 'connected'       #loop receiving data and calculate bit rate      while 1:#not event.wait_should_exit(1):         #use select to wait for data on connection, timeout after 2 seconds         conn_rfds, conn_wfds, conn_xfds = select.select([connection], [], [connection], 0)          #break on error         if connection in conn_xfds:             break          #check for data received, calculate bit rate         elif connection in conn_rfds:             data = connection.recv(1024)                  #print 'Write received data to serial port'             if len(data)&gt;0:    ##                    print data                 fd1.write(data)                  pc_commands(data)              #if len(data) == 0:              #   break              #########################################################      # the problem is here:  # fd1data receives always data, but server (connection.send(fd1data)) sends     the data with huge delay  #               ########################################################          #if no data from client cheack serial ports        fd1data=fd1.read() # data from monitor        if len(fd1data)&gt;0:                 #print fd1data           connection.send(fd1data)        fd2data=fd2.read() # data from         if len(fd2data)&gt;0:                 #print fd2data           connection.send(fd2data)            fd0data=fd0.read() # data from pc        if len(fd0data)&gt;0:                 #print fd0data                # df1.write(fd0data)          pc_commands(fd0data)             #break        #close the inbound connection     connection.close()  #close the server on exit  server_socket.close()  print 'not running' </code></pre>