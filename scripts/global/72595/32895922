<p>Is there a reason why if I use a <code>ViewPager</code> in an <code>Activity</code> the <code>Fragments</code> don't get recreated on rotation versus if the <code>ViewPager</code> is in a <code>Fragment</code>, they do get recreated?</p>  <p><strong>Fragments don't get recreated here</strong></p>  <pre><code>    public abstract class SwipeableTabsActivity extends BaseActivity {      private static final int LAYOUT_ID = R.layout.tabbed_layout;      private ViewPager mPager;     private FragmentPagerAdapter mAdapter;     private TabPageIndicator mIndicator;      @Override     protected void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         setContentView(getLayoutId());          mAdapter = createPagerAdapter();          mPager = (ViewPager) findViewById(R.id.pager);         mPager.setAdapter(mAdapter);          mIndicator = (TabPageIndicator) findViewById(R.id.indicator);         mIndicator.setViewPager(mPager);         mIndicator.setOnPageChangeListener(getOnPageChangeListener());          mPager.setCurrentItem(0);     }      protected int getLayoutId() {         return LAYOUT_ID;     }      protected abstract FragmentPagerAdapter createPagerAdapter();      protected abstract ViewPager.OnPageChangeListener getOnPageChangeListener();      protected ViewPager getViewPager() {         return mPager;     }      protected FragmentPagerAdapter getViewPagerAdapter() {         return mAdapter;     }      } </code></pre>  <p><strong>Fragments get created here</strong></p>  <pre><code>public abstract class SwipeableTabsFragment extends BaseFragment {      private static final int LAYOUT_ID = R.layout.tabbed_layout;      private ViewPager mPager;     private TabPageIndicator mIndicator;     private OnPageChangeListener mListener;      @Override     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {          final View view = inflater.inflate(getLayoutId(), container, false);          final FragmentPagerAdapter pagerAdapter = createPagerAdapter();          mPager = (ViewPager) view.findViewById(R.id.pager);         mPager.setAdapter(pagerAdapter);          mIndicator = (TabPageIndicator) view.findViewById(R.id.indicator);         mIndicator.setViewPager(mPager);         mIndicator.setOnPageChangeListener(new OnPageChangeListener() {              @Override             public void onPageSelected(int position) {                  EventBus.post(new TabSwipeEvent());                  if (mListener != null) {                     mListener.onPageSelected(position);                 }             }              @Override             public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {                 if (mListener != null) {                     mListener.onPageScrolled(position, positionOffset, positionOffsetPixels);                 }             }              @Override             public void onPageScrollStateChanged(int state) {                 if (mListener != null) {                     mListener.onPageScrollStateChanged(state);                 }             }         });          // Note: This needs to be called after the TabPageIndicator is initialized.         mPager.setCurrentItem(getInitialItemIndex());          return view;     }      protected ViewPager getPager() {         return mPager;     }      protected TabPageIndicator getIndicator() {         return mIndicator;     }      protected int getLayoutId() {         return LAYOUT_ID;     }      protected void setOnPageChangeListener(OnPageChangeListener listener) {         mListener = listener;         mPager.setOnPageChangeListener(listener);     }      /**      * Gets the initial page to show. Subclasses can override this method to show a page      * other than the first page.      */     protected int getInitialItemIndex() {         return 0;     }      protected abstract FragmentPagerAdapter createPagerAdapter();      /**      * Otto event triggered when a tab is swiped.      */     public static final class TabSwipeEvent {     }  } </code></pre>