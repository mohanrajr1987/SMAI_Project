<p>I have a problem. I made a viewpager with an adapter that loads a RecyclerView  with 2 adapter with different items. When I open app first adapter of RecyclerView load and show its items on view pager, but when I want to load the second adapter of RecyclerView, the view pager doesn't change items. My code is as under:</p>  <p>PagerAdapter:</p>  <pre><code>public class CalendarPagerAdapter extends FragmentPagerAdapter {  private static final int ITEMS = 3; private int type; private CalendarFragment calendarFragment; private FragmentManager fragmentManager;  public CalendarPagerAdapter(FragmentManager fm, int type) {     super(fm);     fragmentManager = fm;     this.type = type; }  @Override public Fragment getItem(int position) {     calendarFragment = CalendarFragment.getInstance(type, position + 8);     return calendarFragment; }  @Override public int getCount() {     return ITEMS; }  @Override public CharSequence getPageTitle(int position) {     switch(position) {         case 0:             return "08 october";         case 1:             return "09 october";         case 2:             return "10 october";     }     return "october"; } } </code></pre>  <p>CalendarFragment :</p>  <pre><code>public class CalendarFragment extends Fragment { public static final String ARG_PAGE = "ARG_PAGE"; public static final String ARG_TYPE = "ARG_TYPE";  private static final String EIGHT = "2015-10-08"; private static final String NINE = "2015-10-09"; private static final String TEN = "2015-10-10";  public static final int EVENT = 1; public static final int PEOPLE = 2;  private static CalendarFragment mInstance;  private SmoothRecyclerView mRecyclerView;  private int mPage; private int mType; private EventListAdapter mEventAdapter = null; private PeopleAdapter mPeopleAdapter = null; private Context mContext;  public static CalendarFragment getInstance(int type, int page) {     if (mInstance == null) {         createInstance(type, page);     } else {         if (page != mInstance.getArguments().getInt(ARG_PAGE)) {             createInstance(type, page);         }     }     return mInstance; }  private static void createInstance(int type, int page) {     Bundle args = new Bundle();     args.putInt(ARG_PAGE, page);     args.putInt(ARG_TYPE, type);     mInstance = new CalendarFragment();     mInstance.setArguments(args); }  @Override public void onCreate(Bundle savedInstanceState) {     super.onCreate(savedInstanceState);     mPage = getArguments().getInt(ARG_PAGE);     mType = getArguments().getInt(ARG_TYPE);     List&lt;Event&gt; eventList = new ArrayList&lt;&gt;();     List&lt;People&gt; peopleList = new ArrayList&lt;&gt;();      mContext = getContext();      switch (mPage) {         case 8:             eventList = setOrder(DatabaseHelper.getInstance(mContext).getEventForDate(EIGHT));             peopleList = DatabaseHelper.getInstance(mContext).getPeopleForDate(EIGHT);             break;          case 9:             eventList = setOrder(DatabaseHelper.getInstance(mContext).getEventForDate(NINE));             peopleList = DatabaseHelper.getInstance(mContext).getPeopleForDate(NINE);             break;          case 10:             eventList = setOrder(DatabaseHelper.getInstance(mContext).getEventForDate(TEN));             peopleList = DatabaseHelper.getInstance(mContext).getPeopleForDate(TEN);             break;     }      mEventAdapter = new EventListAdapter(eventList, getActivity());     mPeopleAdapter = new PeopleAdapter(peopleList, getActivity()); }    @Override public View onCreateView(LayoutInflater inflater, ViewGroup container,                          Bundle savedInstanceState) {     View view = inflater.inflate(R.layout.fragment_page, container, false);      mRecyclerView = (SmoothRecyclerView) view.findViewById(R.id.recycle_view);     mRecyclerView.setLayoutManager(new LinearLayoutManager(mContext));     mRecyclerView.setHasFixedSize(true);     setAdapter();      return view; }  public void setAdapter() {     if (mType == EVENT) {         mRecyclerView.setAdapter(mEventAdapter);     } else if (mType == PEOPLE) {         mRecyclerView.setAdapter(mPeopleAdapter);     } }   private List&lt;Event&gt; setOrder(List&lt;Event&gt; list) {     Collections.sort(list, new Comparator&lt;Event&gt;() {         @Override         public int compare(Event lhs, Event rhs) {             return lhs.getStartTime().compareTo(rhs.getStartTime());         }     });     return list; } } </code></pre>  <p>and in the mainActivity I call this method to load viewpager :</p>  <pre><code>calendarEventPagerAdapter = new CalendarPagerAdapter(getSupportFragmentManager(), CalendarFragment.EVENT);     mPager.setAdapter(calendarEventPagerAdapter); </code></pre>  <p>Now I want to load CalendarFragment.PEOPLE, how can I do this ?</p>