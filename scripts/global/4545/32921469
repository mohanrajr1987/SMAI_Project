<p>First of all I will say that I've changed my design and no longer need that but getting a good answer for that will still be nice</p>  <p>I have the following <code>class</code>, <code>ListContainer</code>, in my code <em>(The attached codes are all <a href="http://stackoverflow.com/help/mcve">mcve</a>)</em>:</p>  <pre><code>class ListContainer {     public object ContainedList     {         get; private set;     }      public int Value     {         get; private set;     }      public ListContainer(object list, int value)     {         ContainedList = list;         Value = value;     } } </code></pre>  <p>And in some other <code>class</code> in my code I have a <code>List&lt;ListContainer&gt;</code> and I need each <code>ListContainer</code> to contain this <code>List&lt;ListContainer&gt;</code>, so I can implement it like that:</p>  <pre><code>//Field in the class List&lt;ListContainer&gt; mContainers = null;  //In the constructor: mContainers = new List&lt;ListContainer&gt;(); mContainers.Add(new ListContainer(mContainers, SOME_CONST)); mContainers.Add(new ListContainer(mContainers, SOME_OTHER_CONST)); </code></pre>  <p>Than it works fine, but when I've tried to use <strong><em>list initializer</em></strong>:</p>  <pre><code>//Field in the class List&lt;ListContainer&gt; mContainers = null;  //In the constructor: mContainers = new List&lt;ListContainer&gt; {     new ListContainer(mContainers, SOME_CONST),     new ListContainer(mContainers, SOME_OTHER_CONST) } </code></pre>  <p>You would expect the results to be equivalent but in reality the result looks like that:</p>  <pre><code>mContainers     [0] - ListContainer               ContainedList = null               Value = SOME_CONST     [1] - ListContainer               ContainedList = null               Value = SOME_OTHER_CONST </code></pre>  <p>Seeing this results I've inspected the output MSIL of this C# compilation and seen the following code:</p>  <p><a href="http://i.stack.imgur.com/DVTHJ.jpg" rel="nofollow"><img src="http://i.stack.imgur.com/DVTHJ.jpg" alt="MSIL lists"></a></p>  <p>Now, this explains why the problem occurs, and I've even checked out in the <strong><em>CSharp Language Specification</em></strong> document and this is the defined behavior:</p>  <blockquote>   <p>A List can be created and initialized as follows:</p>  <pre><code>var contacts = new List&lt;Contact&gt; {     new Contact {         Name = "Chris Smith",         PhoneNumbers = { "206-555-0101", "425-882-8080" }     },     new Contact {         Name = "Bob Harris",         PhoneNumbers = { "650-555-0199" }     } }; </code></pre>      <p>which has the same effect as</p>  <pre><code>var __clist = new List&lt;Contact&gt;(); Contact __c1 = new Contact(); __c1.Name = "Chris Smith"; __c1.PhoneNumbers.Add("206-555-0101"); __c1.PhoneNumbers.Add("425-882-8080"); __clist.Add(__c1); Contact __c2 = new Contact(); __c2.Name = "Bob Harris"; __c2.PhoneNumbers.Add("650-555-0199"); __clist.Add(__c2); var contacts = __clist; </code></pre>      <p>where __clist, __c1 and __c2 are temporary variables that are otherwise invisible and inaccessible.</p> </blockquote>  <p>So obviously this behaviour is intended. Is there a good reason everything is done on the temporary variable and not on the original one? since it seems like a wrong behaviour to me.</p>