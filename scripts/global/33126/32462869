<p>I know that there are several similar questions here on SO regarding comparing a list to a query using the Sql 'Like' operation as the comparer. </p>  <p>What I do know is that there is no direct translation using Linq2Sql for this type of comparison. That the provided method Contains() translates to 'IN' in Sql and is a exact comparer. I also know that non-exact comparison methods (SqlMethods.Like(), String.Contains(), StartsWith() and EndsWith()) all work on a single item, and not a list.</p>  <p>Currently, I have my query inside of a foreach loop to provide the required functionality, however, I am concerned about bandwidth on my network as well as the strain on the DB server for large loops.</p>  <p>My question then is this: <strong>what is the most efficient method to perform this operation, while minimizing the network / server load?</strong></p>  <p>code snippet of my current implementation:</p>  <pre><code>using (var context = new GeoDataContext()) {     var originalSuggestions = new List&lt;SuggestItem&gt;();     foreach (var suggestItem in suggestionList)     {         var item = suggestItem;         var placeNameList = context.tl_2014_39_places.Where(placeName =&gt;                        placeName.NAME.Contains(item.Term)).Select(                            place =&gt; place.NAME).ToList();    } } </code></pre>