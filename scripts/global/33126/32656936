<p>i've got the code that performs slowly, because is transformed to weird SQL:</p>  <pre><code>        // Create LINQ query for retrieving objects on which user has permissions to perform supplied action         var result =              // Select objects from supplied queryable             from secureObject in source              // Create some shorthands for code readablility             let ownerId = secureObject.AccessControl.OwnerId             let groupOwner = secureObject.AccessControl.GroupOwner             let permissions = secureObject.AccessControl.Permissions             let objectStatus = secureObject.AccessControl.Status              // Filter out actions that do not apply to this object source             from ia in this.ImplementedActions                 .Where(ia =&gt;                     ia.ObjectType == objectType &amp;&amp;                     ia.ActionType == actionType &amp;&amp;                     ((ia.Statuses == Status.None) || ((ia.Statuses &amp; objectStatus) != 0))                 )              // Get action entry for supplied action             from ac in this.SecureActions.Where(ac =&gt; ac.Type == actionType &amp;&amp; secureObject != null)              // Get user matching current principal id             from u in this.Users.Where(user =&gt; user.Name.Equals(userName))              // Create left outer join for Privileges             from pr in this.Privileges.Where(pr =&gt;                 pr.ObjectType == objectType                 &amp;&amp; pr.Action == actionType                 &amp;&amp; (                     pr.Type == PrivilegeType.Global                     || (pr.Type == PrivilegeType.Object &amp;&amp; pr.RelatedObjectId == secureObject.SecureId)                     || (pr.Role == RoleType.Self &amp;&amp; u.SecureId == secureObject.SecureId &amp;&amp; objectType == typeof(User).Name)                 )             ).DefaultIfEmpty()              where                 // The action must apply to objects                 ac.AppliesToObject == true                 //ac.AppliesToObject == true                  &amp;&amp; (                 // Administrators are always allowed to do everything                     ((u.Groups &amp; Groups.Administrators) == Groups.Administrators)                      // Read permissions in the bit field                      || (actionType == ActionType.Read &amp;&amp; (                          // The OtherRead access permission bit is on                         ((permissions &amp; AccessPermissions.OtherRead) != 0)                          // The OwnerRead access permission bit is on, and the member is the owner                         || ((permissions &amp; AccessPermissions.OwnerRead) != 0 &amp;&amp; ownerId == u.SecureId)                          // The GroupRead permission bit is on, and the member is in the group                         || ((permissions &amp; AccessPermissions.GroupRead) != 0 &amp;&amp; (groupOwner &amp; u.Groups) != 0))                     )                      // Write permissions in the bit field                                             || (actionType == ActionType.Write &amp;&amp; (                          // The OtherWrite access permission bit is on                         ((permissions &amp; AccessPermissions.OtherWrite) != 0)                          // The OwnerWrite acccess permission bit is on, and the member is the owner                         || ((permissions &amp; AccessPermissions.OwnerWrite) != 0 &amp;&amp; ownerId == u.SecureId)                          // The GroupWrite permission bit is on, and the member is in the group                         || ((permissions &amp; AccessPermissions.GroupWrite) != 0 &amp;&amp; (groupOwner &amp; u.Groups) != 0))                     )                       // Delete permissions in the bit field                            || (actionType == ActionType.Delete &amp;&amp; (                          // The OtherDelete access permission bit is on                         ((permissions &amp; AccessPermissions.OtherDelete) != 0)                          // The OwnerDelete access permission bit is on, and the member is the owner                         || ((permissions &amp; AccessPermissions.OwnerDelete) != 0 &amp;&amp; ownerId == u.SecureId)                          // The GroupDelete access permission bit is on, and the member is in the group                         || ((permissions &amp; AccessPermissions.GroupDelete) != 0 &amp;&amp; (groupOwner &amp; u.Groups) != 0))                     )                      // User privileges                     || (pr.Role == RoleType.User &amp;&amp; pr.Who == u.SecureId)                      // Owner privileges                     || (pr.Role == RoleType.Owner &amp;&amp; ownerId == u.SecureId)                      // OwnerGroups privileges                     || (pr.Role == RoleType.OwnerGroup &amp;&amp; ((groupOwner &amp; u.Groups) != 0))                      // Group privileges                     || (pr.Role == RoleType.Group &amp;&amp; ((pr.Who &amp; (int)u.Groups) == pr.Who))                 )                  //self privileges                 || (pr.Role == RoleType.Self)              select secureObject; </code></pre>  <p>Here, ImplementedActions and Privileges are transformed to INNER / LEFT JOINs correspondingly, but SecureActions and Users are just CROSS JOINed (?!)</p>  <p>I'm suprised, because it's seen from the condition, that there should be only ONE user selected, for instance, so I expected something like:</p>  <pre><code>INNER JOIN "XXX"."USER" "ExtentY" ON ("ExtentY"."USER_NAME" = :p__linq__Z) </code></pre>  <p>instead of</p>  <pre><code>CROSS JOIN "XXX"."USER" </code></pre>  <p>Could you please tell, what's the problem here?</p>