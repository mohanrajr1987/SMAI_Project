<p>I just wanted to make my code and linq queries to look better, and made an extension method for my Bank entity, as I would like to make queries look something like this </p>  <pre><code>db.Banks.Where(x =&gt; x.SomeBooleanParam).Select(x =&gt; x.ToSummary()) </code></pre>  <p>But I run into exception </p>  <blockquote>   <p>Linq-to-Entities does not recognize the method 'X.X.Summary ToSummary(X.X.Models.Bank)' method, and this method cannot be translated into a store expression.</p> </blockquote>  <p>My question: is it possible to somehow modify my <code>ToSummary()</code> function, so it is possible to use it on entities in queries? I have provided how my db would look like in JSON format, how simple select looks like and how summary looks like. I have read, that the function must return something like <code>Expression&lt;Func&lt;somethingHere, bool&gt;&gt;</code> but I have never understood it..</p>  <pre><code>//How it looks in the DB Items: [     {Id: 1, Name: "Item1"},     {Id: 2, Name: "Item2"},     {Id: 3, Name: "Item3"} ]  Banks: [     {Id: 1, Name: Bank1, SomeBooleanParam: true} ]  BankChanges: [     {Id: 1, BankId: 1},     {Id: 2, BankId: 1} ]  BankItems: [     {Id: 1, ItemId: 1, BankChangeId: 1, Added: 10, Generated: 0},     {Id: 2, ItemId: 2, BankChangeId: 1, Added: 1, Generated: 1}     {Id: 3, ItemId: 1, BankChangeId: 2, Added: -10, Generated: 0},     {Id: 4, ItemId: 2, BankChangeId: 2, Added: 3, Generated: 0},     {Id: 5, ItemId: 3, BankChangeId: 2, Added: 7, Generated: 0} ]  // How simple select looks like, by including everything simpleSelect: [{     Id: 1,     Name: Bank1,     BankChanges: [         {             Id: 1,             BankItems: [                 {                     Id: 1,                     Item: {Id: 1, Name: "Item1"},                     BankChangeId: 1,                     Added: 10,                     Generated: 0                 },                 {                     Id: 2,                     Item: {Id: 2, Name: "Item2"},                     BankChangeId: 1,                     Added: 1,                     Generated: 1                 }             ]         },         {             Id: 2,             BankItems: [                 {                     Id: 3,                     Item: {Id: 1, Name: "Item1"},                     Added: -10,                     Generated: 0                 },                 {                     Id: 4,                     Item: {Id: 2, Name: "Item2"},                     Added: 3,                     Generated: 0                 },                 {                     Id: 5,                     Item: {Id: 3, Name: "Item3"},                     Added: 7,                     Generated: 0                 }             ]         }     ] }] // How summary looks like summary: [{     Id: 1,     Name: Bank1,     ItemSummaries: [         // Note: No Item1, because total of Item1 = 0 or less         {             Item: "Item2",             TotalAdded: 4,             TotalGenerated: 1,             Total: 5         },         {             Item: "Item3",             TotalAdded: 7,             TotalGenerated: 0,             Total: 7         }     ] }]  public static class BankExtensions {     public static Summary ToSummary(this Bank bank)     {         return new Summary          {             Id = bank.Id,             Name = bank.Name,             ItemSummaries = bank.BankChanges                                 .SelectMany(x =&gt; x.BankItems)                                 .GroupBy(x =&gt; x.Item)                                 .Select(x =&gt; new ItemSummary                                 {                                     Item = x.Key.Name,                                     TotalAdded = x.Sum(y =&gt; y.Added),                                     TotalGenerated = x.Sum(y =&gt; y.Generated),                                     Total = x.Sum(y =&gt; y.Added) + x.Sum(y =&gt; y.Generated)                                 })                                 .Where(x =&gt; x.Total &gt; 0)         };     } } </code></pre>