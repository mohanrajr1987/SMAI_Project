<p>I have migrated the my project from Linq-to-SQL to Entity Framework 6. After resolving so many problems, I finally came to one I am not sure what to do with it. After conversion about one third of my unit tests are failing because stored procedures returning scalar values <a href="http://www.devtoolshed.com/using-stored-procedures-entity-framework-scalar-return-values" rel="nofollow">just work different way</a>.</p>  <p>In Linq-to-SQL, the stored procedure return the returned value. In EF they return number of rows affected. There are workarounds which requires changing the stored procedure (generally from <code>RETURN @retvalue</code> to <code>SELECT @retvalue</code>). But this requires changes in T-SQL. The project still contains some legacy code from old days of ASP.NET like <code>aspnet_Membership_CreateUser</code> and so on. It means that I cannot change these stored procedures, because there are partly used by ASP.NET ADO.NET Membership provider, partly by the Linq-to-SQL code. The solution I consider is to make T-SQL wrappers of these parts legacy code.</p>  <p>Another reason why I would like to keep the stored procedure unchanged is the possibility of reverting to previous commit if the upgrade to EF is not successful. A don't want to change database forth and back again. But this reason is not so strong, it is only about my laziness.</p>  <p>I know that membership provider is old fashioned but I cannot rewrite entire application in one commit, I need to keep it stable.</p>  <p>The best way to finish the migration would be to call the stored procedure from EF like Linq-to-SQL, but I didn't found a way how to it. The EF disappointed me in this. How is possible that after years of development EF does not support returning scalar value from stored procedure? </p>  <p>How would you solved this issue?</p>