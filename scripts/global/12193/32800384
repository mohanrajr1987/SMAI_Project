<p>Let's say I have a really simple rails app that runs on one 1 app server and supports one language (<code>en_US</code>).</p>  <p>The <code>i18n</code> gem works great and provides all translations as read from my <code>en.yml</code> file. Woohoo.</p>  <p>But let's say I scale my app and it now supports the following -</p>  <ul> <li>Enterprise versions of the app, so it runs on several app (and db) servers</li> <li>Multiple languages other than <code>en_US</code> (e.g. <code>ja_JP</code>, <code>ms_MY</code>, <code>en_GB</code>, etc..)</li> </ul>  <p>I'm now supporting multiple instances of the app, each with several <code>*.yml</code> files that are starting to pile up. Plus, the app is getting more complex so each YML file is getting huge because there are a lot of translations.</p>  <p>Is there a clean way to move these YML files and <code>i18n</code> translations out of the core app? I'm envisioning an HTTP that functions as an "<code>i18n</code> service". Every time an app starts up it queries the <code>i18n</code> service and gets all the translations it needs for particular locale.</p>  <p>Is this a scalable way to approach this? Anyone have any experience in using a different design pattern?</p>  <p>Thanks!</p>