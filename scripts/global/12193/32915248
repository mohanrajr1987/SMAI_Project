<p>I'm trying to add an item including multiple translations <strong>in one form</strong> with the CakePHP <a href="http://book.cakephp.org/3.0/en/orm/behaviors/translate.html" rel="nofollow">translate behaviour</a>.</p>  <p><strong>How can I validate the translation fields?</strong> E.g. make specific languages required?</p>  <p>Let's assume you have a simple <code>items</code> table with a <a href="http://book.cakephp.org/3.0/en/orm/behaviors/translate.html#using-a-separate-translations-table" rel="nofollow">separate translations table</a> <code>items_i18n</code>, set up as described in the book. As simple example the <code>items</code> table has only one field <code>title</code> to translate and I want to save the <code>title</code> in five languages. So I make a form like this (in <code>add</code> view template):</p>    <pre class="lang-php prettyprint-override"><code>echo $this-&gt;Form-&gt;create($item, ['controller' =&gt; 'Items', 'action' =&gt; 'add']); echo $this-&gt;Form-&gt;input('title', ['label' =&gt; __('English')]); echo $this-&gt;Form-&gt;input('_translations.spa.title', ['label' =&gt; __('Spanish'); echo $this-&gt;Form-&gt;input('_translations.fre.title', ['label' =&gt; __('French'); echo $this-&gt;Form-&gt;input('_translations.deu.title', ['label' =&gt; __('German'); echo $this-&gt;Form-&gt;input('_translations.ita.title', ['label' =&gt; __('Italian'); echo $this-&gt;Form-&gt;button(__('Save'), ['type' =&gt; 'submit']); echo $this-&gt;Form-&gt;end(); </code></pre>  <p>And saving in the controller (<code>add</code> action/function) like this:</p>  <pre class="lang-php prettyprint-override"><code>$item = $this-&gt;Items-&gt;newEntity(); if ($this-&gt;request-&gt;is('post')) {   $translations = [     'spa' =&gt; ['title' =&gt; $this-&gt;request-&gt;data['_translations']['spa']['title']],     'fre' =&gt; ['title' =&gt; $this-&gt;request-&gt;data['_translations']['fre']['title']],     'deu' =&gt; ['title' =&gt; $this-&gt;request-&gt;data['_translations']['deu']['title']],     'ita' =&gt; ['title' =&gt; $this-&gt;request-&gt;data['_translations']['ita']['title']],   ];   foreach ($translations as $lang =&gt; $data) {     $item-&gt;translation($lang)-&gt;set($data, ['guard' =&gt; false]);   }   $item = $this-&gt;Items-&gt;patchEntity($item, $this-&gt;request-&gt;data, ['validate' =&gt; 'default'] );   if ( $this-&gt;Items-&gt;save($item) ) { $this-&gt;Flash-&gt;success(__('Saved.')); }   else { $this-&gt;Flash-&gt;error(__('Not saved.')); } } $this-&gt;set('item', $item); </code></pre>  <p>This is working without validation or if I only have validation rules for the "native" <code>title</code> field (well it should, I simplified the code for stackoverflow and renamed some parts for the example, so maybe there are some typos, but you should get the idea...).</p>  <p>Now let's further assume the languages <em>English</em> (default) and <em>Spanish</em> are <strong>required</strong>, other language fields are optional. How can I achieve that?</p>  <p>In the <code>ItemsTable</code> I tried something like this for validation:</p>  <pre class="lang-php prettyprint-override"><code>class ItemsTable extends Table {   public function validationDefault(Validator $validator) {     $validator       // Title English (default field)       -&gt;requirePresence('title')       -&gt;notEmpty('title', __('Required field'))       // Title Spanish (translate behaviour field)       -&gt;requirePresence('_translations.spa.title')       -&gt;notEmpty('_translations.spa.title', __('Required field'))       ;     return $validator;   } } </code></pre>  <p>But this allways brings a validation error "This field is required" because <code>patchEntity($item, $this-&gt;request-&gt;data);</code> results in the translations being thrown away. I know this by an open <a href="https://github.com/cakephp/cakephp/issues/4902" rel="nofollow">issue on GitHub</a> about the saving workflow (btw +1 for this request :).</p>  <p>So currently I'm not sure if there is a way to define validation rules for translation fields when using the CakePHP translation behaviour... <em>Required</em> language fields is only an example, the same problem occurs if you want to validate e.g. the min/max lenght of a input field for a foreign language...</p>