<p>I have just started working on a project where there is a lot of interaction between Ruby and 5-6 levels deep YAML files. Since Ruby will respond with <code>NoMethodError: undefined method '[]' for nil:NilClass</code> when you are trying to access a key that doesn't exist there are lots of methods with the following setup:</p>  <pre><code>def retrieve_som_data(key1, key2)   results = []   if data(key1, key2)     if data_set_2(key, key2)["my_key"]       results = data_set_2(key, key2)["my_other_key"]     end   end   return results.clone end </code></pre>  <p>This looks horrible, so I am looking at a way to refactor it. I have tried working on a version where I would replace a method like this:</p>  <pre><code>def data(key1, key2)   if data = names_data(key1)     return data[key2]   end end </code></pre>  <p>with this instead:</p>  <pre><code>def data(key1, key2)   names_data(key1).fetch(key2) end </code></pre>  <p>This raises a more specific error <code>KeyError</code> which can than be rescued and acted on in any method calling <code>.data()</code>, but this also doesn't seem like a good solution readability wise.</p>  <p>I'd love to get some input on how you are handling situations where you are trying to access <code>YAML_DATA[key][key1][key2][key3][key4]</code> and take into account that any of the provided keys could hit something thats <code>nil</code>.</p>  <p>What are your preferred workflows for this?</p>