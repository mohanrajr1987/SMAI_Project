<p>I have the following doubt.</p>  <p>For refactoring, I have read that is good create methods that has a very specific responsability, so if it is possible, it is a good idea to split a complex method in others small methods.</p>  <p>But imagine that I have this case:</p>  <p>I have to create a list of objects, and insdie this objects, I have to create another object. Something like that:</p>  <pre><code>public void myComplexMethod(List&lt;MyTypeA&gt; paramObjectsA) {     foreach(MyTypeA iteratorA in paramObjectsA)     {         //Create myObjectB of type B          //Create myObjectC of type C          myObjectB.MyPorpertyTpyeC = myObjectC;     } } </code></pre>  <p>I can split this method in two methods.</p>  <pre><code>public void myMethodCreateB(List&lt;MyTypeA&gt; paramObjectsA) {     foreach(MyTypeA iteratorA in paramObjectsA)     {         //Create myObjectB of type B     } }    public void myMethodCreateB(List&lt;MyTypeB&gt; paramObjectsB) {     foreach(MyTypeB iteratorB in paramObjectsB)     {         //Create myObjectC of type C         iteratorB.PropertyC = myObjectC;     } } </code></pre>  <p>In the second option, when I use two methods instead one, the unit tests are less complex, but the problem is that I use two foreach loops, so it is less efficient than use only one loop like in the first option.</p>  <p>So, what is the best practice, at least in general, to use a method a bit more complex to be more efficient or to use more methods?</p>  <p>Thanks so much.</p>