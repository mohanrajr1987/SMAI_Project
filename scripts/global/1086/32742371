<p>I use Rails 4.2 and i want to refactor my helper method to get rid of duplicate code:</p>  <p>In app/helpers/admin/tasks_helper.rb</p>  <pre><code>def chosen_select(name, method, chzes, selected = nil, options = {}, html_options = {})   options[:value_method] ||= :id   options[:text_method] ||= :name   if options.key?(:placeholder)     html_options['data-placeholder'.intern] = options[:placeholder]     options.delete(:placeholder)   end   if html_options.key?(:class)     html_options[:class] = 'chosen-select ' + html_options[:class]   else     html_options[:class] = 'chosen-select'   end   chzes = options_from_collection_for_select(chzes, options[:value_method], options[:text_method], selected)   options.delete(:value_method)   options.delete(:text_method)   select(name, method, chzes, options.merge!(include_hidden: false), html_options) end  def chosen_select_array(name, method, chzes, selected = nil, options = {}, html_options = {})   options[:value_method] ||= :id   options[:text_method] ||= :name   if options.key?(:placeholder)     html_options['data-placeholder'.intern] = options[:placeholder]     options.delete(:placeholder)   end   if html_options.key?(:class)     html_options[:class] = 'chosen-select ' + html_options[:class]   else     html_options[:class] = 'chosen-select'   end   chzes = options_for_select(chzes, selected)   options.delete(:value_method)   options.delete(:text_method)   select(name, method, chzes, options.merge!(include_hidden: false), html_options) end </code></pre>  <p>I my view i have a lot of method calls like app/views/admin/tasks/index.html.erb</p>  <pre><code>  &lt;%= chosen_select(:select, :project_id, [TaskFilterOptgroups.active_projects, TaskFilterOptgroups.inactive_projects] , @task_filter_configuration.project_id, {:include_blank =&gt; true, :placeholder =&gt; 'Project'}, {'data-last-project_id' =&gt; @task_filter_configuration.project_id, :style =&gt; 'width: 150px;'}) %&gt; </code></pre>  <p>so that i don't want to change my method calls in the view. My attempt is to make a generic method "chosen_select_generic" that will be called from the specific method like "chosen_select":</p>  <pre><code>def chosen_select_generic(name, method, chzes, selected = nil, options = {}, html_options = {})   options[:value_method] ||= :id   options[:text_method] ||= :name   if options.key?(:placeholder)     html_options['data-placeholder'.intern] = options[:placeholder]     options.delete(:placeholder)   end   if html_options.key?(:class)     html_options[:class] = 'chosen-select ' + html_options[:class]   else     html_options[:class] = 'chosen-select'   end   # 2 different chzes in 2 methods:   # 1) chosen_select(...)   # chzes = options_from_collection_for_select(chzes, options[:value_method], options[:text_method], selected)   # 2) chosen_select_array(...)   # chzes = options_for_select(chzes, selected)        yield chzes    options.delete(:value_method)   options.delete(:text_method)   select(name, method, chzes, options.merge!(include_hidden: false), html_options) end </code></pre>  <p>and then chosen_select could look like:</p>  <pre><code>def chosen_select(name, method, chzes, selected = nil, options = {}, html_options = {})   chosen_select_generic(name, method, chzes, selected = nil, options = {}, html_options = {}) do |contents|     chzes = option_groups_from_collection_for_select(chzes, :entries, :status, options[:value_method], options[:text_method], selected)   end end </code></pre>  <p>But this doesn't work. How can i extract the duplicate code in a block without changing the method calls in the view?</p>