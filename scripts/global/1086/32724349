<p>I'm looking to refactor the c++ code for if conditions which will reduce the number of lines of code as well as it should have min complexity.</p>  <p>Here is the example:</p>  <pre><code>if (xyz-&gt;a != cmd-&gt;aa) {    xyz-&gt;a = cmd-&gt;aa;    obj-&gt;isFound = true;  //common code for all ifs }   if (xyz-&gt;b != cmd-&gt;bb) {     xyz-&gt;b = cmd-&gt;bb;     obj-&gt;isFound = true;  } </code></pre>  <p>And so on.. Here a, b, aa, bb are defined as a struct element.</p>  <p>Another example having if condition with arrays:</p>  <pre><code> if (abc-&gt;r16[0] != cmd-&gt;r0m)     {         abc&gt;r16[0] = cmd-&gt;r0m;         obj-&gt;isFound = true; //some common code for all ifs     }   if (abc-&gt;r16[1] != cmd-&gt;r1m)         {             abc&gt;r16[1] = cmd-&gt;r1m;             obj-&gt;isFound = true; //some common code for all ifs         } </code></pre>  <p>And so on for r16[0] to r16[15]. Here r16[15] is defined inside struct.</p>  <p>Last scenario is for if condition with multidimensional array:</p>  <pre><code>     if (pqr-&gt;c_0_15_r_0_15[0][0] != cmd-&gt;obj0000)            {               pqr-&gt;c_0_15_r_0_15[0][0] = cmd-&gt;obj0000               obj-&gt;isFound = true; //some common code for all ifs            }  if (pqr-&gt;c_0_15_r_0_15[1][0] != cmd-&gt;obj0100)            {               pqr-&gt;c_0_15_r_0_15[1][0] = cmd-&gt;obj0100               obj-&gt;isFound = true; //some common code for all ifs            }  if (pqr-&gt;c_0_15_r_0_15[2][0] != cmd-&gt;obj0000)            {               pqr-&gt;c_0_15_r_0_15[2][0] = cmd-&gt;obj0200               obj-&gt;isFound = true; //some common code for all ifs            } </code></pre>  <p>Here c_0_15_r_0_15[2][0] will go through [0][0] to [15][0] and then [0][1] to [15][1] and so on...</p>  <p>For all such if condition scenario there will me 100's of if statements which should be reduced. How can we refactor such code?</p>