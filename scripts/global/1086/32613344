<p>I'm making an influence algorithm, it's fairly straight forward. In my calculate method I have:</p>  <pre><code>public function calculate() {     $influenceFactors = $this-&gt;calculateInfluenceFactors($this-&gt;votes);     $influenceFactorsSum = array_sum($influenceFactors);      $ratingsWithInfluence = $this-&gt;calculateRatingsWithInfluence(         $this-&gt;ratingsBeforeInfluence, $influenceFactors     );     $ratingsWithInfluenceSum = array_sum($ratingsWithInfluence);      $totalRating = round(($ratingsWithInfluenceSum) / ($influenceFactorsSum), 2);      return $totalRating; } </code></pre>  <p>I'm thinking I can refactor the part where the method gets the sum of the influenceFactors and ratingsWithInfluence. Preferable, I'd like to have a method called <code>calculateSum</code>, that accepts a closure (<code>calculateInfluenceFactors()</code> and <code>calculateRatingsWithInfluence()</code>), so the method would look something like this:</p>  <pre><code>private function calculateSum(Closure $closure) {     $array = $closure();      $sum = array_sum($array);      return $sum } </code></pre>  <p>The problem is, the closure has different arguments. Is this a sign that I shouldn't be refactoring this way? It makes the most sense to me, though. I might be missing something. My main question is, is there anyway to let the closure have different amounts of arguments?</p>