<p>I'm working on some kind of basic telnet program. There is a websocket server, each client should connect to it. And if I want to connect to someone, I should ask him to give me his ID and password to open connection. Even after authorization, connection established through server (server will route messages between these users. No problem with authorization, and routing but...</p>  <p>As you might know, websockets work asynchronous. So when I send a request, I will receive response in another thread. Currently I'm using command pattern to deal with it. Requests (commands) serialized by json and deserialized in other machine, which will look to request name and parameters and will execute that request.</p>  <p>After that, it must sent response. Which will deserialized, and displayed. So for now, I want to implement "Download" command. So when sending large files, I cant just load it into one packet and send it.</p>  <p>So here is some code. There is a main Request class:</p>  <pre><code>public class Request {     public string Name { get; set; }     public string SourceAddress { get; set; } } </code></pre>  <p>SourceAddress is needed so the server should know, to whom sent a response.</p>  <pre><code>public class StartRequest : Request {     public StartRequest(string path, int address)     {         this.Name = "START";         this.FilePath = path;          this.AddressID = address;     }     public string FilePath { get; private set; } } </code></pre>  <p>Request to open some file. And here is how it works:</p>  <pre><code>private Dictionary&lt;string, ICommand&gt; Commands { get; set; }  if (this.Commands.ContainsKey(request.Name)) {     Response response;     ICommand cmd = this.Commands[request.Name];     response = cmd.Execute(data);     Socket.SendResponse(response); } </code></pre>  <p>So how can I implement a download function? I have a basic idea, that I should use BinaryReader/Writer and send information with chunks, but I cant implement it. I think I need to change something. I even dont know how to store those Request/Response history (because some Requests (commands) needn't response. Like that one which opens file. It will send response only when execution error will occur.</p>  <p>Any ideas?</p>