<p>The return statement is being used in void methods to break out of the logic here. The problem is the consumers of the method wouldnâ€™t know whether the logic in the method ran completely or not, when we do this. However my architect and teams don't agree with that. The reason is that the current consumer in this case doesn't care about the outcome. </p>  <p>I think this is coding anti-pattern. It is like eating exception with out bubbling it up. What's everyone's opinion on this? </p>  <p>Existing code:</p>  <pre><code>Private void XXX(final String parameter) {         try {             if (parameter==null){                 return;             }             ....     } </code></pre>  <p>My version</p>  <pre><code>Private boolean XXX(final String parameter) {         try {             if (parameter==null){                 return false;             }             ....     return true;     } </code></pre>