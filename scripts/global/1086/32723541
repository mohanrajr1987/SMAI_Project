<p>I am trying to determine the best way to refactor this code. As you can see, the try... catch.. catch.. catch... code lines are identical. The only difference between the two methods is one is async while the other is not. </p>  <pre><code>public override int SaveChanges() {     try     {         return base.SaveChanges();     }     catch (DbEntityValidationException ex)     {         var entityValidationErrors = ex.EntityValidationErrors             .SelectMany(e =&gt; e.ValidationErrors)             .Select(x =&gt; string.Format("{0} - {1}", x.PropertyName, x.ErrorMessage));          var fullErrorMessage = string.Join(Environment.NewLine, entityValidationErrors);         var exceptionMessage = string.Concat(ex.Message, " Entity validation errors: ", fullErrorMessage);          throw new DbEntityValidationException(exceptionMessage, ex.EntityValidationErrors);     }     catch (DbUpdateConcurrencyException ex)     {         Debug.WriteLine(ex.Message);         throw;     }     catch (DbUpdateException ex)     {                         var sqlException = ex.GetBaseException() as SqlException;          if (sqlException == null || sqlException.Errors.Count &lt;= 0)              throw;          var errors = new List&lt;string&gt;();          for (var i = 0; i &lt; sqlException.Errors.Count; i++)         {             errors.Add(string.Format("{0} - {1}", sqlException.Errors[i].Number, sqlException.Errors[i].Message));         }          throw new DbUpdateException(string.Join(Environment.NewLine, errors));     } } public override async Task&lt;int&gt; SaveChangesAsync() {     try     {         return await base.SaveChangesAsync();     }     catch (DbEntityValidationException ex)     {         var entityValidationErrors = ex.EntityValidationErrors             .SelectMany(e =&gt; e.ValidationErrors)             .Select(x =&gt; string.Format("{0} - {1}", x.PropertyName, x.ErrorMessage));          var fullErrorMessage = string.Join(Environment.NewLine, entityValidationErrors);         var exceptionMessage = string.Concat(ex.Message, " Entity validation errors: ", fullErrorMessage);          throw new DbEntityValidationException(exceptionMessage, ex.EntityValidationErrors);     }     catch (DbUpdateConcurrencyException ex)     {         Debug.WriteLine(ex.Message);         throw;     }     catch (DbUpdateException ex)     {         var sqlException = ex.GetBaseException() as SqlException;          if (sqlException == null || sqlException.Errors.Count &lt;= 0)             throw;          var errors = new List&lt;string&gt;();          for (var i = 0; i &lt; sqlException.Errors.Count; i++)         {             errors.Add(string.Format("{0} - {1}", sqlException.Errors[i].Number, sqlException.Errors[i].Message));         }          throw new DbUpdateException(string.Join(Environment.NewLine, errors));     } } </code></pre>