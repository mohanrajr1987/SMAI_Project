<p>I'd like to create a Roslyn code fix that changes attributed code such as this:</p>  <pre><code>public class CommandHandler {     [Command("Cmd1")]     public void Foo()     {         // do something     }      [Command("Cmd2")]     public void Bar()     {         // do something     } } </code></pre>  <p>to this:</p>  <pre><code>public class CommandHandler {     public void Foo()     {         // do something     }      public void Bar()     {         // do something     }      public void Execute(string command)     {         switch(command)         {             case "Cmd1":                 Foo();                 break;             case "Cmd2":                 Bar();                 break;         }     } } </code></pre>  <p>The main requirements are:</p>  <ul> <li>The signature for the refactoring is any method attributed with the <code>[Command]</code> attribute.</li> <li>There can be multiple such methods in a class.</li> <li>The synthesized <code>Execute()</code> method must preserve existing cases and add new ones.</li> </ul>  <p>Is it possible to create such a refactoring such that I can ask it to fix all instances in a project at one go? This is a feasibility question, to help me avoid running into a dead end, if there is one.</p>