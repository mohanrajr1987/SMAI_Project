<p>I'm trying to figure out how pixel shaders work in WPF, and so far have had a good amount of success. But my current project is causing me some issues that I can't seem to be able to figure out.</p>  <p>I've got a "tiling" shader that I'm using as a sort of image view port (by using values between 0 and 1, I zoom into the picture rather than tiling it). It's been working fine until I started trying larger and larger images on it in order to test its performance. I noticed that when I used a large enough image, the sampling would start to pixelate out and not maintaining the clarity of the source image. My best guess would be that this is an artifact of using the 32-bit floats in the shader.</p>  <p>Here is my shader code:</p>  <pre><code>sampler2D input : register(S0); float2 tl : register(C0); // Top-Left UV Corner float2 br : register(C1); // Bottom-Left UV Corner  float4 main(float2 uv : TEXCOORD) : COLOR  {     float2 diff = br - tl;     float2 nuv = uv * diff + tl;     nuv = nuv - floor(nuv); // Use this to wrap the texture      return tex2D(input, nuv); } </code></pre>  <p>And here is a snippet of the image I am trying to use (the source image's dimensions are 23043x816):</p>  <p><a href="http://i.stack.imgur.com/Yzxrc.png" rel="nofollow"><img src="http://i.stack.imgur.com/Yzxrc.png" alt="Source Image Snippet"></a></p>  <p>And the same snippet as seen through the shader:</p>  <p><a href="http://i.stack.imgur.com/wsyjs.png" rel="nofollow"><img src="http://i.stack.imgur.com/wsyjs.png" alt="Image Snippet post-Shader"></a></p>  <p>Is there something I could do to fix this, or should I be doing it differently? Or maybe there's an existing shader that I could use for this exact purpose?</p>