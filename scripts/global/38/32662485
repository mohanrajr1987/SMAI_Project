<p>I'd like to create a layout that I can animate my items in. So when a dataprovider gets set on my List, the List's layout will then animate those items onto the screen. </p>  <p>So I've created a CustomLayout and added an update() function.</p>  <p>In the updateDisplayList the items are traced out just fine.</p>  <p>But in the update() function where I want to do the animation, the items are tracing out as null even though if I trace layoutTarget's numElement's I get four! If I use a setTimeout after setting the _dataProvider in my Main app of a second or two, then call update() in the ListLayout, then the traces work fine. So my question is, how can I ensure that I call update() to animate the items in when they are actually available??</p>  <p>Main app:</p>  <pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"     xmlns:s="library://ns.adobe.com/flex/spark"     xmlns:mx="library://ns.adobe.com/flex/mx"     xmlns:custom="*"     creationComplete="handleCreationComplete()"&gt;     &lt;fx:Declarations&gt;         &lt;!-- Place non-visual elements (e.g., services, value objects) here --&gt;     &lt;/fx:Declarations&gt;      &lt;fx:Script&gt;         &lt;![CDATA[             import mx.collections.ArrayCollection;              [Bindable]             private var _dataProvider:ArrayCollection;             public function set dataProvider(value:ArrayCollection):void             {                 _dataProvider = value;                 listLayout.update();             }              private function handleCreationComplete():void             {                 var arr:Array = new Array( { label:"1" }, { label:"2" }, { label:"3" }, { label:"4" } );                 dataProvider = new ArrayCollection(arr);             }         ]]&gt;     &lt;/fx:Script&gt;      &lt;s:List id="list"         dataProvider="{ _dataProvider }"         labelField="label"&gt;         &lt;s:layout&gt;             &lt;custom:ListLayout id="listLayout"  /&gt;         &lt;/s:layout&gt;     &lt;/s:List&gt; &lt;/s:WindowedApplication&gt; </code></pre>  <p>ListLayout:</p>  <pre><code>package {     import mx.core.ILayoutElement;     import spark.components.supportClasses.GroupBase;     import spark.layouts.supportClasses.LayoutBase;      /**      * ...      * @author      */     public class ListLayout extends LayoutBase     {         public function update():void         {             var layoutTarget:GroupBase = target;             //layoutTarget.autoLayout = false;              var count:int = layoutTarget.numElements;             trace(count); //traces 4              for (var i:int = 0; i &lt; count; i++)             {                 var item:ILayoutElement = useVirtualLayout ? layoutTarget.getVirtualElementAt(i) :  layoutTarget.getElementAt(i);                 trace(item); //traces null             }         }          override public function updateDisplayList(width:Number, height:Number):void         {             super.updateDisplayList(width, height);              var layoutTarget:GroupBase = target;              var count:int = layoutTarget.numElements;              for (var i:int = 0; i &lt; count; i++)             {                 var item:ILayoutElement = useVirtualLayout ? layoutTarget.getVirtualElementAt(i) : layoutTarget.getElementAt(i);                 trace(item); //traces out the item             }         }     } } </code></pre>