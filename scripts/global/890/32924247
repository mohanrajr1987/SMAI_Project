<p>Hello I'm using the JSF technology to upload files from users using some kind of javascript uploader.</p>  <p>I have found this servlet :</p>  <pre><code>import java.io.File; import java.io.IOException; import java.io.PrintWriter; import java.text.SimpleDateFormat; import java.util.Date; import java.util.List;  import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse;  import org.apache.commons.fileupload.FileItem; import org.apache.commons.fileupload.FileUploadException; import org.apache.commons.fileupload.disk.DiskFileItemFactory; import org.apache.commons.fileupload.servlet.ServletFileUpload;  @WebServlet("/UploadServlet") public class UploadFile extends HttpServlet {     private static final long serialVersionUID = 1L;      /**      * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse      *      response)      *       */     protected void doGet(HttpServletRequest request,             HttpServletResponse response) throws ServletException, IOException {         PrintWriter writer = response.getWriter();         writer.write("call POST with multipart form data");     }      /**      * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse      *      response)      *       */      protected void doPost(HttpServletRequest request,             HttpServletResponse response) throws ServletException, IOException {         if (!ServletFileUpload.isMultipartContent(request)) {             throw new IllegalArgumentException(                     "Request is not multipart, please 'multipart/form-data' enctype for your form.");         }          ServletFileUpload uploadHandler = new ServletFileUpload(                 new DiskFileItemFactory());         PrintWriter writer = response.getWriter();         response.setContentType("text/plain");          System.out.println(new File("mypath" + "images/"));            try {                List&lt;FileItem&gt; items = uploadHandler.parseRequest(request);                 for (FileItem item : items) {                    if (!item.isFormField()) {                        SimpleDateFormat fmt = new SimpleDateFormat("yyyyMMddHHmmss");                        String name = fmt.format(new Date()) + item.getName();                             File file = new File("mypath" +"images/", name);                            item.write(file);                             System.out.println("uploaded");                    }                }         } catch (FileUploadException e) {             throw new RuntimeException(e);         } catch (Exception e) {             throw new RuntimeException(e);         } finally {             writer.close();         }      }  } </code></pre>  <p>but as my form is a registration form, and my uploader runs automatically when user choose a picture, the form is readed as non multipart and I get this :</p>  <pre><code>javax.servlet.ServletException: Request is not multipart, please 'multipart/form-data' enctype for your form. </code></pre>  <p>I want to mention that I don't know how to make this servlet intercept the upload process, I was getting the error as I was putting the servlet part of code in the managed bean, and calling the bean like this from the js script :</p>  <pre><code>url: "#{thebean.fileUpload()}", maxFiles: 1, maxfilesexceeded: function(file) { this.removeAllFiles(); this.addFile(file);                                                                             }  </code></pre>  <p>It should be done through a method in the bean, as after the upload succeeds, it should return a filepath to the bean which is used to register the user and his uploaded picture path and name. Thank you ! </p>