<p>In my web app I am trying to achieve the functionality, that an admin is able to logout other currently logged in users.</p>  <p>What I have done so far:</p>  <ul> <li>I created a POJO to store significant user information, including a referrence to the users HTTP session.</li> <li>This POJO is implementing <code>HttpSessionBindingListener</code></li> <li>During the login process I put an instance of this POJO into the SessionMap. Via the <code>valueBound</code> method I am putting into a static Map, which stores all such logged-in-userinformation (on the unbound-Event I am removing it again</li> <li>In a seperated admin section I am now able to access the <code>HttpSession</code> of a specific user and invalidate it</li> <li>the logged-out user gets informed via websocket that he has been logged-out</li> </ul>  <p>Invalidating the <code>HttpSession</code> works fine and the mentioned <code>unbound</code> method is called. However, the problem is that if a in that way logged out user is still able to do AJAX requests. A new instance of hte ViewScoped Bean is created and assigned to the client and the request goes against this new instance. </p>  <p>What I would expect (or what I would like to achieve) is that sth like a ViewExpiredException is thrown instead and redirecting the user to the login page instead.<br/>Or am I missing an important part in my concept?</p>  <p>Would it be enough to set up proper security-constraints in <code>web.xml</code> or would it just hide the conceptual problem?</p>  <p>(If it's important, the Bean is not a JSF Bean but a CDI ViewScoped bean.)</p>  <p>Application is running on Glassfish 4.1,, Mojarra 2.2.12</p>  <hr>  <p>SessionBindingListener:</p>  <pre><code>@RequiredArgsConstructor @EqualsAndHashCode(of = {"user"}) public class UserSessionInfo implements HttpSessionBindingListener {      @Getter private static final Map&lt;UserSessionInfo, UserSessionInfo&gt; sessions           = new HashMap&lt;&gt;(10);      @Getter private final String user;     @Getter private HttpSession session;      @Override     public void valueBound(HttpSessionBindingEvent event) {         UserSessionInfo usi = sessions.remove(this);         if (usi != null) {             HttpSession hs = usi.session;             if (hs != null) {                 hs.invalidate();             }         }         this.session = event.getSession();         sessions.put(this, this);     }      @Override     public void valueUnbound(HttpSessionBindingEvent event) {         sessions.remove(this);     }  } </code></pre>  <p>Login-method</p>  <pre><code>public String login() {         FacesContext context = FacesContext.getCurrentInstance();                 HttpServletRequest request =             (HttpServletRequest) context.getExternalContext().getRequest();         try {             request.login(username, password);             context                 .getExternalContext()                 .getSessionMap().put(username, new UserSessionInfo(/* ...*/)));             // ..         }          // ....         return "/index?faces-redirect=true";     } </code></pre>  <p>Admin-Method for logging out some other user:</p>  <pre><code>public void logoff(UserSessionInfo usr) {     EventBus eventBus = EventBusFactory.getDefault().eventBus();             eventBus.publish(CHANNEL, new DialogMessage(/*...*/));             usr.getSession().invalidate();            } </code></pre>