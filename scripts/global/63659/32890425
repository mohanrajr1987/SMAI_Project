<p>I originally had an animate function in place for my three.js scene that is loaded within an AngularJS Modal, but found that after closing the Modal, the animation keeps going, and that is unneeded since I don't require constant animation like a video game would have. </p>  <p>At this point, I switched it to only render when someone uses the OrbitControls to move the simple box in my example, and have an initial call to render the scene so that users can see the box instead of a big blacked out square. </p>  <p>However, upon initial render, the texture does not appear to be applied until I use the orbit controls and move the box, at which point they appear. This is odd, since both my initial call and the listener tied to the OrbitControls are to the same function. How do I get the initial load to show the texture?</p>  <pre><code>$scope.generate3D = function () {     // 3D OBJECT - Variables     var texture0 = baseBlobURL + 'Texture_0.png';     var boxDAE = baseBlobURL + 'Box.dae';     var scene;     var camera;     var renderer;     var box;     var controls;     var newtexture;      // Update texture     newtexture = THREE.ImageUtils.loadTexture(texture0);      //Instantiate a Collada loader     var loader = new THREE.ColladaLoader();      loader.options.convertUpAxis = true;     loader.load(boxDAE, function (collada) {          box = collada.scene;          box.traverse(function (child) {              if (child instanceof THREE.SkinnedMesh) {                  var animation = new THREE.Animation(child, child.geometry.animation);                 animation.play();              }         });          box.scale.x = box.scale.y = box.scale.z = .2;         box.updateMatrix();          init();          // Initial call to render scene, from this point, Orbit Controls render the scene per the event listener         render();      });      function init() {         scene = new THREE.Scene();         camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);         renderer = new THREE.WebGLRenderer();          renderer.setClearColor(0xdddddd);         //renderer.setSize(window.innerWidth, window.innerHeight);         renderer.setSize(500, 500);          // Load the box file         scene.add(box);          // Lighting         var light = new THREE.AmbientLight();         scene.add(light);          // Camera         camera.position.x = 40;         camera.position.y = 40;         camera.position.z = 40;          camera.lookAt(scene.position);          // Rotation Controls         controls = new THREE.OrbitControls(camera, renderer.domElement);          controls.addEventListener('change', render);          controls.rotateSpeed = 5.0;         controls.zoomSpeed = 5;          controls.noZoom = false;         controls.noPan = false;          var myEl = angular.element(document.querySelector('#webGL-container'));         myEl.append(renderer.domElement);      }      function render() {         renderer.render(scene, camera);         console.log('loaded');     } } </code></pre>