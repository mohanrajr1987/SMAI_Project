<p>I have numerous potentially long polylines (or short, vertices count is highly volatile) to display, so I was thinking about packing them in a bunch of fixed size (let's say 10000 vertices) position BufferAttribute and sending one drawcall per polyline. And if a polyline crosses the 10000 limit boundary, I can just split it, repeat the last vertex from the previous buffer as the first vertex of the new buffer and carry on with multiple THREE.Line objects.</p>  <p>My understanding is that a drawcall is defined by addGroup() in the recent three.js, but I have troubles understanding the link with setDrawRange().</p>  <p>I replaced setDrawRange() by addGroup() in this example: <a href="http://jsfiddle.net/1v00pxx5/" rel="nofollow">http://jsfiddle.net/1v00pxx5/</a> and it doesn't animate anymore ( <a href="http://stackoverflow.com/questions/31399856/drawing-a-line-with-three-js-dynamically">Drawing a line with three.js dynamically</a> ).</p>  <p>I replaced :</p>  <pre><code>line.geometry.setDrawRange( 0, drawCount ); </code></pre>  <p>by </p>  <pre><code>line.geometry.clearGroups(); line.geometry.addGroup( 0, drawCount ); </code></pre>  <p>It looks like I misunderstood something, because it's rendering everything instead of just the single group I was defining.</p>  <p>Here is my crazy context: I am building a chrome packaged application that accesses the USB, and both webgl and USB have to be on the main JS thread, but sometimes when uploading the geometries to webgl, it starves the USB, and I can't use a bigger USB buffer because the device on the other side of the usb cable doesn't have enough memory.</p>