<p>I have loaded an OBJ file with MTL file textures using OBJMTLLoader. I copied the example from <a href="http://threejs.org/examples/webgl_loader_obj_mtl.html" rel="nofollow">http://threejs.org/examples/webgl_loader_obj_mtl.html</a>.</p>  <p>The main object (man in business suit with hair, hands and shoes) displays OK with correct textures (e.g. eyes, mouth, tie, buttons). </p>  <p>The loaded object is a THREE.Group with 10 children, each child being a THREE.Object3D which has further 3, 5 or 7 child THREE.Mesh objects.</p>  <p>Here is the js code for loading the OBJ and MTL...</p>  <p>//==================================================</p>  <pre><code>function SOW_F_Load_OBJMTL_Model ( givenFilespec, mtlFilespec, givenName, givenScene, givenHexColorStr, posX, posY, posZ,  rotX, rotY, rotZ, scaleX, scaleY, scaleZ )     {            THREE.Loader.Handlers.add( /\.dds$/i, new THREE.DDSLoader() );            var ObjMtl_loader = new THREE.OBJMTLLoader();            ObjMtl_loader.load( givenFilespec, mtlFilespec, SOW_F_make_LoadedOBJ_Handler ( givenName, givenScene, givenHexColorStr, posX, posY, posZ,  rotX, rotY, rotZ, scaleX, scaleY, scaleZ ) );         }      }     //=============================================  function SOW_F_make_LoadedOBJMTL_Handler( givenName, givenScene, givenHexColorStr, posX, posY, posZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ ) {      return function ( object )     {         object.position.set( posX, posY, posZ );         object.rotation.set( rotX, rotY, rotZ );         object.name = givenName;          object.scale.set( scaleX, scaleY, scaleZ );         givenScene.add( object );          object.traverse (  function ( child )                 {                     if ( child instanceof THREE.Mesh )                      {                         child.userData.rootObject = object;                                                  //... following are for when material doesn't load                         child.geometry.computeFaceNormals();                          child.geometry.computeVertexNormals();                            child.geometry.normalsNeedUpdate = true;                      }                 }              )            object.updateMatrix(); //... without this the next command is not effective.         xxx = SOW_F_grob_Add_to_Target_Set( object );     };  } </code></pre>  <p><strong>My problem</strong> is that object picking does not report the name of the intersected object loaded with OBJMTLLoader.  It either reports the name of a texture material or a blank.</p>  <p>Object picking works OK on mesh objects which I create in my THREE.js code.</p>  <p>I have tried the fixes suggested in <a href="http://stackoverflow.com/questions/22228203/picking-object3d-loaded-via-objmtlloader">Picking Object3D loaded via OBJMTLLoader</a> including (in the intersection picking code):</p>  <pre><code>var intersects = ray.intersectObjects( scene.children, true ); </code></pre>  <p>and (in the object child processing code):</p>  <pre><code>child.userData.rootObject = object;  </code></pre>  <p>but they dont fix it.</p>  <p>Please can somebody suggest what I need to do to make object picking report the parent object for an object loaded with OBJMTLLoader?</p>  <p><strong>EDIT - SOLUTION</strong></p>  <p>Select the object (whose name is to be reported or whatever) when an object is intersected:-</p>  <pre><code>var intersected_object = intersects[ 0 ].object; //... nearest object  if ( intersected_object.userData.rootObject ) { var selectedObject = intersected_object.userData.rootObject } else { var selectedObject = intersected_object }  var reportedName = selectedObject.name; </code></pre>