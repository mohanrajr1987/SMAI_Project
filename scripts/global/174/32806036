<p>I have a question concerning the design of a class in one of the projects I have been working on. To be more precise I will explain the scenario and would require feedback on the same if its the correct approach or not. </p>  <p>We have a validation class to validate business data input by user before persisting it, say for example I have a validation method to check if the user name starts with a blank, another method to validate that for a particular type of user the address should be provided, like this we have several validation methods and we will have more such validations as the project grows. These validation methods are declared as private with a public interface method in the service class which only calls all these private methods when user clicks on save. Now the problem here is when writing junits for suppose nth validation method I have to traverse through all the previous validations preparing test data accordingly as there is a common public interface for them. Also if there is a change in logic of any other validation it is likely that my junits will fail. I suggested my colleagues to have package or protected visibility if not public for these methods but they say just for unit testing changing the visibility is not correct. </p>  <p>Also I have found another solution using reflection to access private members but it seems to be more of a hack and is not recommended as per some of the answers given in stack overflow. So now I am begining to think if this is a design smell as its possible in future that we might require some of these validations in other parts of the project and then will have to make it public anyways. But I am not sure about it so before suggesting this change I thought it would be good to go for some experts advice on the same.</p>  <p>Could you please tell if this is a design issue and we should have had these methods as public and this is not a design issue then how should this be handled best? </p>