<p>I used the repository pattern because we will be updating the database schema at some point in the future. The current schema was badly designed, many attributes that constitute a single <code>Unidade</code> entity are spread out in 3 tables, each table created specifically for that <code>Unidade</code> with only one row, they switched rows for tables) and a fourth that has a row for each <code>Unidade</code> entity (follows the correct convention).</p>  <p>Due to this situation I was recommended to use the repository interface, so I could easily integrate a new database schema in the future while unifying those 4 tables in a single database interface.</p>  <p>This is what I have:</p>  <pre><code>public function createObject($un)  {     $produto       = $this-&gt;configRepository-&gt;getProduto($un);     $ultimoNivel   = $this-&gt;configRepository-&gt;getDataUltimoNivel($un);     $nivelEstimado = $this-&gt;configRepository-&gt;getUltimoNivel($un);     $ultimaMedia   = $this-&gt;configRepository-&gt;getDataUltimaMedia($un);     $mediaInterna  = $this-&gt;configRepository-&gt;getUltimaMedia($un);     $nrCabos       = $this-&gt;configRepository-&gt;getQtdCabosTotal($un);     $nivelLivre    = $this-&gt;configRepository-&gt;getNivelEstimadoLivre($un);      $nCabosLaterais = $this-&gt;configRepository-&gt;getQtdCaboLateral($un);     $nSensoresCabosLaterais = $this-&gt;configRepository-&gt;getQtdSensorCaboLateral($un);     $nSensoresCaboCentral = $this-&gt;configRepository-&gt;getQtdSensorCaboCentral($un);               // I'm creating a generic object :/     $unidade = (object) compact(         'produto',          'ultimoNivel',          'nivelEstimado',          'ultimaMedia',          'mediaInterna',          'nrCabos',          'nivelLivre',         'arquivoCss'         );      return $unidade; } </code></pre>  <p>Sorry for the variables in portuguese, but what those <code>configRepository</code> methods do basically is query the database for some configuration option (it is actually an attribute) and return it, like number of cables, space occupied, some dates and basic information. Each option is actually an attribute of an <code>Unidade</code> entity.</p>  <p>I was thinking of refactoring something that would work like this:</p>  <pre><code>$this-&gt;configRepository-&gt;setUnidadeID($un);  $produto       = $this-&gt;configRepository-&gt;getProduto(); $ultimoNivel   = $this-&gt;configRepository-&gt;getDataUltimoNivel(); // ..... other methods </code></pre>  <p>But then I have this other thing that doesn't look pretty:</p>  <pre><code>    // I'm creating a generic object :/     $unidade = (object) compact(         'produto',          'ultimoNivel',          'nivelEstimado',          'ultimaMedia',          'mediaInterna',          'nrCabos',          'nivelLivre'              ); </code></pre>  <p>All this information describe one object <code>Unidade</code>.</p>  <p>Ideally, I think it would be more correct to create a new class called "Unidade" class, dependency inject the repository into it and initialize the attributes so I could reference the options as class attributes:</p>  <pre><code>class Unidade{     public function __construct($un, ConfigRepositoryInterface $configRepo)     {         $this-&gt;configRepository = $configRepo-&gt;setUnidadeID($un);         $this-&gt;produto = $this-&gt;configRepository-&gt;getProduto();         $this-&gt;ultimoNivel = $this-&gt;configRepository-&gt;getUltimoNivel();         //etc ...     } } </code></pre>  <p>And then use it in my code like this:</p>  <pre><code>$unidadeObj = new Unidade($un); </code></pre>  <p>Whats the best way to refactor it? I'm using Laravel 4.2.</p>