<p>I have an application in which I want to have strict separation between backend and frontend(GUI).</p>  <p>The backend is the application logic with cpp classes and the frontend are QML files with some cpp classes which mainly works as adapters to the backend.</p>  <p>Now I was wondering if it is okay to have classes derived from QAbstract*Model in the backend form a design point of view.</p>  <p>My first thought was that they should NOT belong to the backend because they are just a wrapper around some Qt Container classes to reflect their data in the GUI. So a pointer to the actual data can be injected and they should only be used in the frontend for displaying purpose but they should not be used anywhere in the backend.</p>  <p>The Qt Container classes of course should belong to the backend.</p>  <p>Now I also need some conversion and utilities functions which act and maybe modifies the data of the containers. Therefore I wrote a 'handler' class. But now it is starting to get tricky to keep everything in sync especially without getting bindingloops.</p>  <p>The other solution would be to have a class derived from QAbstract*Model which wraps the data and also have these conversion and utilities functions. They could then call the dataChanged etc. functions. Then I could use this class also in the backend. But would that be good design or should the backend be free of QAbstract*Model derived classes?</p>  <p>Since I find it quite difficult to express my issue clearly, I hope my question is understandable in some way :-)</p>