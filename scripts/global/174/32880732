<p>I have a enterprise application where there are multiple sub applications doing different tasks. These sub applications will interact with each other with Web Services to share functionalities among each other and complete a task for a user either themselves exclusively or combination from two application functionalities.</p>  <p>There is a common set of large number of assets (items) present in a sub application say Asset Store on which these sub applications work which is also exposed to all these sub applications through its Web Services. This Asset store may be an external system or not deployed in same environment or may be outside cloud in which other sub apps are present. So, performance might be a hit outside the network.</p>  <p>No, considering a user of Sub App - 1 who want to perform a task on a selected set of these assets, will login to Sub App 1, go to a screen which will show him all the assets available. He selects those assets and add in his kitty to perform some actions on them, process these assets and then complete the task for him. Similarly, different sub applications will access this common Asset store to process them in different manner based on the sub application user is logged into.</p>  <p>While processing these assets in Sub App 1, we can do it in three ways:</p>  <ol> <li><p>We make LIVE Web Services calls to Asset Store sub application to return us set of these products based on user search or criteria. In this case we are not storing anything in Sub App 1 database till now. Once the user selects an asset, process it in Sub App 1, we just store an ID of that processed asset in Sub App 1 database.</p></li> <li><p>We follow the same steps as of 1 but instead of always making Live Web Services call to Asset store, we first check in local cache at application server of Sub App 1 in case it is present there, return the asset else make a live call to Asset store to fetch the asset. Rest same processing follows and we just store the Asset ID in sub app 1 database for that processed asset.</p></li> <li><p>I duplicate all the assets data of Asset Store in database of Sub App 1, create sync jobs to nightly sync contents between external Asset Sore and Sub App 1. Now, instead of making a Live call to external Asset store, I choose my sub app 1 database to return me the results from local db which will be quite fast in response. Process the asset and save the relational IDs of asset in the sub app 1 database which can be used to pull all other info. associated to that asset from the local DB only of sub app 1. However, since I said though I have gained the performance by duplicating the asset database locally. However, since all my Sub applications in this application uses this common asset store for one kind of processing or other, I will have to duplicate this data and write night jobs to sync data between all these applications and my common asset store.</p></li> </ol>  <p>My question is, which of these approaches are best suited for the current context of the application and why? The number of assets in the asset store are around 30-35000</p>  <p>Any help in defining the reasons is highly appreciated. Thanks a lot.</p>