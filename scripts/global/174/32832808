<p>I am developing a text editor somewhat similar to Emacs in Jython, although the language is not important in this case. </p>  <p>I have an independent <strong>data model</strong>, a few <strong>views</strong> for the menu, the text area and a console where I display log messages and will receive commands from the user, and a <strong>controller</strong> for each view. Moreover, I have a <strong>main controller</strong>, which is the entry point of the application and puts together all the views and creates the view controllers.</p>  <p>When a user interacts with a view, the view calls its controller and the controller decides what needs to be done. If a user selects in the menu an option to show an about pop up, the menu controller will handle that itself. However, when there is an option in the menu that involves changes in another view, e.g. when a user chooses to close a file, then the text area needs to be cleared. In this case, the menu controller delegates the action to the main controller, which in turn figures out the text area controller needs to tell its view to clear up the text. Something like:</p>  <pre><code>1. User clicks "close file" in menu view 2. Menu view tells menu controller user selected "close file" 3. Menu controller delegates this actions to the Main controller since it has no access to the text area view. 4. Main controller tells text area controller to clear up text area 5. Text area controller clears up its view's text area. </code></pre>  <p>I find that most user actions can't be handled by the immediate controller of the view the user is interacting with, and need to be passed to the main controller, leaving the main controller being a huge class, whilst the other controllers are just delegating actions. </p>  <p>This looks like it's not the best way to go. Am I missing something? Is there a better way to do this? Should I forget about the intermediate controllers and rethink the main controller?</p>  <p>Any insights on this would be greatly appreciated.</p>