<p>So My task is to implement a simple messaging system. Basically a set of clients send messages to a middleware and the middleware stores the messages in the database. The messages can be retrieved by querying for them, ie if I can check anytime as a client if a message is stored in the database for me, if so I get the message. This is what I have decided:</p>  <ol> <li>I am using Postgres DB, and I will have a connection pool open to DB.</li> <li>for the middleware I have a selector thread(java NIO non blocking) that interacts with the clients threads, and then assigns tasks to worker threads( each middleware has a worker thread pool)</li> <li>Here is my doubt I am not sure if I should asynchronous sockets, synchronous  sockets or if I should just use the selector thread concept for my clients? Clients login then pretty much just send messages, my system is such that they only send a message once the previous task is over. </li> </ol>  <p>Each client will be implemented as a thread.So should I use:</p>  <ol> <li>Java nio for clients</li> <li>asynchronous sockets</li> <li>or synchronous sockets would do?</li> </ol>  <p>(If I got something wrong here please let me know, also it would be great if you could tell me why one would be better than the other)</p>