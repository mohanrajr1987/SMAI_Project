<p>I have several entities and use <a href="http://projects.spring.io/spring-data-jpa/" rel="nofollow">Spring Data JPA</a> repositories with <a href="http://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/domain/Specifications.html" rel="nofollow">specifications</a> query my database. Therefore I created a generic class <code>SpecBuilder</code> to build my queries based on a query description (<code>MyQueryDescriptor</code>).</p>  <pre><code>public class Specs {   public static &lt;T extends MyEntityIFace&gt; Specification&lt;T&gt; myfind(final MyQueryDescriptor qDesc) {     return new Specification&lt;T&gt;() {       @Override       public Predicate toPredicate(Root&lt;T&gt; root,                 CriteriaQuery&lt;?&gt; criteriaQuery, CriteriaBuilder criteriaBuilder) {         try {           return SpecBuilder.mySpec(root, criteriaQuery, criteriaBuilder, qDesc);         } catch (Exception e) {           ...handle error...         }       }     };   } } </code></pre>  <p>My repositories:</p>  <pre><code>public interface Entity1DAO extends Repository&lt;Entity1,Long&gt;,                                      JpaSpecificationExecutor { } </code></pre>  <p>and</p>  <pre><code>public interface Entity2DAO extends Repository&lt;Entity2,Long&gt;,                                      JpaSpecificationExecutor { } </code></pre>  <p>Now there are 3 things I am not quite sure about:<br> 1)<br> Is this use of a generic SpecBuilder a clean design?</p>  <p>2)<br> Is there a way to avoid writing those repository interfaces for each entity? Let's say a generic repository?  </p>  <p>3)<br> The <code>MyQueryDescriptor</code> class has a method to return an instance of an Entity, which will be queried.<br> What would be a clean way to obtain the according repository based on the entity class, avoiding a switch case? I was thinking about putting an annotation with the specific repository class to each entity but it feels a bit smelly.<br> Should I create a factory and inject a map like</p>  <pre><code>Entity1.class =&gt; Entity1DAO Entity2.class =&gt; Entity2DAO </code></pre>  <p>?</p>