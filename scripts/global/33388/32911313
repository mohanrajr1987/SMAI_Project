<p>I am using golang to build a web backend. Framework and tools I am using are listed as follow:</p>  <ol> <li>Go  github.com/gin-gonic/gin  as backend</li> <li>Go github.com/gorilla/sessions as session manager</li> <li>AWS elastic cache as seesion storage </li> </ol>  <p>My code is list as follow</p>  <pre><code>package session  import (     "encoding/gob"     "github.com/boj/redistore"     "github.com/gin-gonic/gin"     "github.com/gorilla/sessions"     "log" )  const (     //REDIS_HOST = "test-cache.abcde.0001.use1.cache.amazonaws.com"     REDIS_HOST  = "localhost"     REDIS_PORT  = "6379"     SESSION_KEY = "mypassword" )  var Store *redistore.RediStore  type SessionType sessions.Session  func init() {     var err error     Store, err = redistore.NewRediStore(10, "tcp", REDIS_HOST+":"+REDIS_PORT, "", []byte(SESSION_KEY))     if err != nil {         log.Fatal(err)     }     Store.SetMaxLength(0) // NOTE: default is 4096      gob.Register(model.MyStruct{} ) }  func Get(c *gin.Context, name string) *sessions.Session {     s, err := Store.Get(c.Request, name)     if err != nil {         log.Println(err)     }     return s } </code></pre>  <p>which work perfectly in http request like follow</p>  <pre><code>func Login(c *gin.Context) {     var req map[string]string     errBinding := c.BindWith(&amp;req, binding.JSON)     if errBinding != nil {         c.JSON(400, "request format error")         return     }     uid, _ := // save database get reutn id     var _resp struct {         Success bool `json:"success"`         UID     int  `json:"uid"`     }     if uid &lt;= 0 {         _resp.Success = false         _resp.UID = uid         c.JSON(200, _resp)         return     } else {         userCookie := cookie.BuildCookie(uid) //set user cookie here         http.SetCookie(c.Writer, userCookie)         s, _ := session.Store.Get(c.Request, "session")         sessions := (*session.SessionType)(s)         sessions.Values["uid"] = uid         err := s.Save(c.Request, c.Writer)         if err != nil {             log.Println(err)         }         _resp.Success = true         _resp.UID = uid         c.JSON(200, _resp)     } }  func Logout(c *gin.Context) {     s, _ := session.Store.Get(c.Request, "session")     s.Options.MaxAge = -1     s.Save(c.Request, c.Writer)     http.SetCookie(c.Writer, &amp;http.Cookie{         Name:   "user",         Path:   "/",         Domain: ".mytest.com",         MaxAge: -1,     })     c.String(200, "") } </code></pre>  <p>My problem is.  I want to pop up a message to ask user to relogin, when user long time AFK or session expire?  How can I catch session expire event happen?   Do I need change front end, add a call that keep send call to check seesion expire or not.   </p>