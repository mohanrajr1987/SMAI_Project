<p>I have a program that returns an error after I've compiled it in g++, then run it in a Unix environment. The error is that my program says 'Segmentation error' before it can do anything. This error is occurring when I try to set a new nodes data pointer equal to something. I know this because when I test this code in Visual Studio when I try to  check <code>if(curr-&gt;data == ch);</code> with <code>curr</code> being a pointer, <code>data</code> being the <code>char</code> element that the list is made up of, and <code>ch</code> being the <code>char</code> passed into the <code>bool LinkedList::find(char ch)</code> function, Visual Studio breaks (stops) at that line of code. For context, here's part of my header file (with <code>if(curr-&gt;data == ch);</code> towards the end):</p>  <pre><code>#include &lt;ostream&gt;  class LinkedList { public:         LinkedList();         ~LinkedList();          bool find(char ch); private:     struct node     {             node();             char data;             node * next;     };     node * head;     node * curr;     node * prev; }; LinkedList::LinkedList() : head(nullptr), curr(nullptr), prev(nullptr); LinkedList::node::node() : data('\0'), next(nullptr); LinkedList::~LinkedList() {     if (!head) // head is null and so list is empty     {             return; //nothing to delete     }      for(curr = head; head; /* head isn't NULL*/ delete curr /*delete first element*/)     {             curr = head;  // set curr to head of list             head = curr-&gt;next;  // move head over to next element (or make it null)     } } bool LinkedList::find(char ch) {         if(head)         {                 for(curr = head; curr &amp;&amp; curr-&gt;data != ch; curr = curr-&gt;next);                 if(curr-&gt;data == ch)                 {                         //std::cout &lt;&lt; "'" &lt;&lt; ch &lt;&lt; "' is in the list." &lt;&lt; std::endl;                         return true;                 }                 else                 {                         //std::cout &lt;&lt; "'" &lt;&lt; ch &lt;&lt; "' isn't in the list." &lt;&lt; std::endl;                         return false;                 }                 //std::cout &lt;&lt; "The list is empty" &lt;&lt; std::endl;                 return false;         }         else         {                 //std::cout &lt;&lt; "The list is empty" &lt;&lt; std::endl;                 return false;         } } </code></pre>  <p>I wish I could give you guys more context, but I have no idea how to fix this. I thought a char and a pointer to a char were the same type; after all, Visual Studio doesn't break when the for loop checks: <code>curr-&gt;data != ch;</code>.</p>