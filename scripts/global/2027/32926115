<p>I have a structure as follows</p>  <pre><code>typedef struct runData{    byte                 curentCycle = 0;    sensorData           sensor[8]; } </code></pre>  <p>where sensorData is the following structure</p>  <pre><code>    typedef struct sensorData{     float currentValue=NULL;     float lastValue;     float maxValue[2] = {-50 ,-50};     float minValue [2]= {1001,1001};     byte trend=0;                    byte mode = 1;                   sensorSetPoints setPoints[2];    }; </code></pre>  <p>and sensorSetPoints is</p>  <pre><code>typedef struct sensorSetPoints{   float setPoint;                      float rise;                          float drop; }; </code></pre>  <p>I create and add data by</p>  <pre><code>runData     *thisRun; thisRun-&gt;sensor[0].setPoints[0].setPoint = 26.77; </code></pre>  <p>Now I want to get this value, not using the structure but by an offset pointer. I get the address of thisRun and add an offset to it, this offset comes from an array I have created on the principle that this is the 11th item in the structure and the 10 items before it (6 floats and 4 bytes) give the offset of 28. When I add this to the address of thisRun I reckon I should have a pointer pointing to thisRun->sensor[0].setPoints[0].setPoint</p>  <p>So if you agree with me so far why does the following not work</p>  <pre><code>uint16_t *baseAddress = (uint16_t *)thisRun; uint16_t offset = readOffset(10);//returns offset baseAddress += offset; float *f; memcpy(f,baseAddress,4); </code></pre>  <p>When I print f it is 0.00 What am I missing?</p>