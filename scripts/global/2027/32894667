<p>I realize this sounds like a duplicate question, and it probably is, but I've been looking for a few days. My messed up code is this:</p>  <pre><code>node* deSerialize(FILE *fp) {     char key[20];     char value[MAXSIZE];     node *n = NULL;     while (fscanf(fp, " %[^*]*%[^*]* ",key,value)==2) {         if (n) {             n = add_node(n,key,value);         }         else{             n = new_node(key,value);         }     }     return n; } </code></pre>  <p>But when I save the deserialized structure back to a disk, it only saves the last key/value. Like this:</p>  <p><code>test*value* test*value* test*value* test*value* test*value* test*value* test*value* test*value*</code></p>  <p>Whereas the serialized struct looked like this:</p>  <p><code>key1*value1* key2*value2* key3*value3* key4*value4* key5*value5* key6*value6* key7*value7* test*value*</code></p>  <p>I understand that the string pointers (or array pointers, not sure what to call it really) <code>key</code> and <code>value</code> are getting updated and hence they all point to the same thing in the end, but how can I prevent that?</p>  <p>For completeness, here are the other involved functions:</p>  <pre><code>void serialize(FILE *fp, node *n) {     node *j = n;     while (j) {         while(j-&gt;left) {             serialize(fp,j-&gt;left);             j-&gt;left=NULL;         }         while(j-&gt;right) {             serialize(fp,j-&gt;right);             j-&gt;right=NULL;         }          fprintf(fp,"%s*%s* ",j-&gt;key,j-&gt;value);         j=NULL;     } }  node* new_node(char *key, char *value) {     struct node* result = malloc(sizeof(struct node));     memset(result, 0, sizeof(struct node));     result-&gt;key = key;     result-&gt;hash = hash(key);     result-&gt;value = value;     result-&gt;left = result-&gt;right = NULL;     return result; }  node* add_node(node* tree, char *key, char *value ) {     unsigned long h = hash(key);     if (tree==NULL)         tree=new_node(key,value);     if (h&lt;tree-&gt;hash)         tree-&gt;left = add_node(tree-&gt;left,key,value);     if (h&gt;tree-&gt;hash)         tree-&gt;right = add_node(tree-&gt;right,key,value);     return tree; } </code></pre>