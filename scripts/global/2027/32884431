<p>I'm creating a source files containing buffer functionality that I want to use for my other library that I'm creating. </p>  <p>It is working correctly but I'm having trouble getting rid of the buffer structure that I'm creating in one of the functions. The following snippets should help illustrate my problem:</p>  <p>C header:</p>  <pre><code>//dbuffer.h ...  typedef struct{     char *pStorage;     int *pPosition;     int next_position;     int number_of_strings;     int total_size;     }DBUFF;  ... </code></pre>  <p>C source:</p>  <pre><code>//dbuffer.c ... DBUFF* dbuffer_init(char *init_pArray)     {     //Find out how many elements the array contains     int size = sizeof_pArray(init_pArray);                               //Initialize buffer structure     DBUFF *buffer = malloc(sizeof(DBUFF));                                             //Initialize the storage     buffer-&gt;pStorage = malloc( (sizeof(char)) * (size) );      strncpy( &amp;(buffer-&gt;pStorage)[0] ,  &amp;init_pArray[0] , size);     buffer-&gt;number_of_strings = 1;      buffer-&gt;total_size = size;     buffer-&gt;next_position = size; //size is the next position because array allocates elements from 0 to (size-1)      //Initialize the position tracker which keeps record of starting position for each string     buffer-&gt;pPosition = malloc(sizeof(int) * buffer-&gt;number_of_strings );     *(buffer-&gt;pPosition + (buffer-&gt;number_of_strings -1) ) = 0;      return buffer;     }  void dbuffer_destroy(DBUFF *buffer)     {     free(buffer-&gt;pStorage);     free(buffer);     } ... </code></pre>  <p>Main: </p>  <pre><code>#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include "dbuffer.h"   int main(int argc, char** argv)     {     DBUFF *buff;       buff = dbuffer_init("Bring the action");     dbuffer_add(buff, "Bring the apostles");     printf("BUFFER CONTENTS: ");     dbuffer_print(buff);       dbuffer_destroy(buff);      // Looks like it has been succesfully freed because output is garbage     printf("%s\n", buff-&gt;pStorage);         //Why am I still able to access struct contents after the pointer has been freed ?     printf("buff total size: %d\n", buff-&gt;total_size);      return (EXIT_SUCCESS);     } </code></pre>  <p>Output: </p>  <pre><code>BUFFER CONTENTS: Bring the action/0Bring the apostles/0 ��/� buff total size: 36  RUN SUCCESSFUL (total time: 94ms) </code></pre>  <p><strong>Question:</strong></p>  <p>Why am I still able to access struct contents using the line below after the pointer to the struct has been freed ?</p>  <pre><code>printf("buff total size: %d\n", buff-&gt;total_size); </code></pre>