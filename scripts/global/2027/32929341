<p>Say I have this struct:</p>  <pre><code>struct Book {    int book_id;    struct Book *book_ptr; }; /* navigation pointers */ struct Book *front; struct Book *rear; </code></pre>  <p>and I want to add a new <code>Book</code> to my memory, so I have this function:</p>  <pre><code>void add_book() {     struct Book *temp;       temp = (struct Book*)malloc(sizeof(struct Book));         temp-&gt;book_id = t;     t++;         temp-&gt;book_ptr = NULL;            if (rear  ==  NULL)     {         front = temp;         rear = temp;     }     else     {         rear-&gt;book_ptr = temp;         rear = temp;     }         } </code></pre>  <p>and if I want a list of my <code>Books</code>:</p>  <pre><code>void see_all_the_books() {     struct Book *temp;          temp = front;         if (front  ==  NULL)     {         printf("&gt; YOU HAVEN'T ADDED ANY BOOK YET\n");     }     while (temp)     {         printf("Book #%d\n", temp-&gt;book_id);         temp = temp-&gt;book_ptr;     } } </code></pre>  <p>Fairly straightforward, and it works.  <strong>But</strong> what if I don't want to use Linked List. What I want to do is to move my <code>rear</code> pointer one block every time that I am making a new book.</p>  <p>Then my struct would be something like this:</p>  <pre><code>struct Book {    int book_id; }; /* navigation pointers */ struct Book *front; struct Book *rear; </code></pre>  <p>and I need to move my pointer 1 block every time I want to add a <code>Book</code>:</p>  <pre><code> void add_book() {     struct Book *temp;     temp = (struct Book*)malloc(sizeof(struct Book));      temp-&gt;book_id = t;     t++;      if (rear  ==  NULL)     {         printf("Your FIRST book has been added\n");                 front = temp;          rear = temp;     }     else     {         rear++;         // MOVED TO NEXT BLOCK         rear = temp;    // OBVIOUSLY WRONG               printf("ANOTHER book has been added\n");      }         } </code></pre>  <p>What do I need to change in my last code?</p>