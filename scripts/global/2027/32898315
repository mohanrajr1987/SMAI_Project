<p>I have a function here that will remove a node from a sorted list of any type.  I am having difficulties with one specific case: when there is 1 node in the list and you want to delete it.</p>  <p>In this case, I want to make the list empty, so when the list is printed out, no data is printed to the screen, but I can't seem to get that result. Just say, for example, the list is of type double, and the list consists of just one node 2.0. If this node is the target for deletion, the proceeding output should be an empty list. Instead my code prints out 0.0.</p>  <p>I am not sure how to handle this error. I have found the specific part of the function where this is to be taken care of, but its implementation escapes me. I first check if the previous node is null, and then check if the list length is equal to 1.</p>  <p>The function returns 1 if it was successful and 0 if it failed. </p>  <pre><code> int SLRemove(SortedListPtr list, void *newObj) {     Node ptr, iterptr, prev = NULL;     if(list==NULL || newObj ==NULL) {       return 0;    }     int size= listlength(list);     for(ptr=list-&gt;start; ptr!=NULL; ptr=ptr-&gt;next) {      if(list-&gt;cf(newObj, ptr-&gt;info)==0){//found matching entry in list        //deleting first node;        if(prev==NULL) {          if(size == 1) {             printf("attempting to delete list with 1 node\n");             /*code to delete node where it's the only element in the ist, should make the list empty.*/             return 1;          }           list-&gt;start = ptr-&gt;next;          destroyNode(ptr);          return 1;        } else {          prev-&gt;next = ptr-&gt;next;          destroyNode(ptr);          return 1;        }     }     prev = ptr;   }    return 0; } </code></pre>  <p>Any help you can provide would be much appreciated. Thank you.</p>