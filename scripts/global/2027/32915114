<p>I am trying to write a tetris dynamic 2D array of rows and cols named data; I make a function called edit_2Darray to duplicate the original 2D array and make each column longer, and for the rest I fill with space;</p>  <pre><code>==21909== Invalid read of size 1 ==21909==    at 0x100002C0A: Tetris::print() const (main.cpp:300) ==21909==    by 0x1000011CB: test_example() (main.cpp:59) ==21909==    by 0x100001053: main (main.cpp:36) ==21909==  Address 0x10080a9c1 is 1 bytes inside a block of size 2 free'd ==21909==    at 0x1000132F7: free (in /usr/local/Cellar/valgrind/3.11.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so) ==21909==    by 0x100005188: Tetris::edit_2Darray(int, int) (tetris.cpp:214) ==21909==    by 0x1000056EC: Tetris::add_piece(char, int, int) (tetris.cpp:279) ==21909==    by 0x10000118F: test_example() (main.cpp:57) ==21909==    by 0x100001053: main (main.cpp:36) ==21909==  Block was alloc'd at ==21909==    at 0x100012EBB: malloc (in /usr/local/Cellar/valgrind/3.11.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so) ==21909==    by 0x10005743D: operator new(unsigned long) (in /usr/lib/libc++.1.dylib) ==21909==    by 0x1000050DD: Tetris::edit_2Darray(int, int) (tetris.cpp:208) ==21909==    by 0x1000056EC: Tetris::add_piece(char, int, int) (tetris.cpp:279) ==21909==    by 0x10000118F: test_example() (main.cpp:57) ==21909==    by 0x100001053: main (main.cpp:36) ==21909== </code></pre>  <p>Here are my add_piece function for I size piece and edit_2Darray();</p>  <pre><code>private: int width; int* heights; char** data;  Tetris::Tetris(int aWidth) {   width = aWidth;   heights = new int[aWidth];   for (unsigned int i = 0; i &lt; aWidth; i++) {       heights[i] = 0;   }   data = new char* [aWidth];   for (unsigned int j = 0; j &lt; aWidth; j++) {       data[j] = new char[1];       data[j][0] = ' ';   } }  void Tetris::add_piece(char c, int m, int n) { int l = 0; int max_h = 0; if (m != 0 &amp;&amp;     m != 90 &amp;&amp;     m != 180 &amp;&amp;     m != 270) {     cerr &lt;&lt; "INCORRECT ANGLE!" &lt;&lt; endl; } if (n &lt; 0 ||     n &gt; width-1) {     cerr &lt;&lt; "INCORRECT POSITION" &lt;&lt; endl; } if (c == 'I') {     if (m == 0 || m == 180) {         max_h = get_max_height();         heights[n] += 4;         if (heights[n] &gt;= max_h) {             edit_2Darray(heights[n], heights[n] - max_h);         }         data[n][heights[n]-4] = c;         data[n][heights[n]-3] = c;         data[n][heights[n]-2] = c;         data[n][heights[n]-1] = c;     }     if (m == 90 || m == 270) {         l = 0;         for (unsigned int k = 0; k &lt; 4; k++) {             if (l &lt; heights[n+k]) {                 l = heights[n+k];             }         }         max_h = get_max_height();         heights[n] = l+1;         heights[n+1] = heights[n];         heights[n+2] = heights[n];         heights[n+3] = heights[n];         if (heights[n] &gt;= max_h) {             edit_2Darray(heights[n], heights[n] - max_h);         }         data[n][heights[n]-1] = c;         data[n+1][heights[n]-1] = c;         data[n+2][heights[n]-1] = c;         data[n+3][heights[n]-1] = c;         }     } }  void Tetris::edit_2Darray(int h, int num) { for (unsigned int i = 0; i &lt; width; i++) {     char* temp = new char [h];     for (unsigned int j = 0; j &lt; h; j++) {         if (j &gt;= (h-num)) {             temp[j] = ' ';         }         else {             temp[j] = data[i][j];         }     }     delete[] data[i];     data[i] = temp;     delete[] temp;     } }  void test_example() { std::cout &lt;&lt; "=====================================================================" &lt;&lt; std::endl; std::cout &lt;&lt; "test_example()" &lt;&lt; std::endl;  Tetris tetris(6); std::cout &lt;&lt; "empty board with width = 6:" &lt;&lt; std::endl; tetris.print(); assert (tetris.get_width() == 6);  tetris.add_piece('O',0,1); std::cout &lt;&lt; "after adding first piece:" &lt;&lt; std::endl; tetris.print(); } </code></pre>