<p>My model is two related fields, one ForeignKey and one ManyToMany.</p>  <p>When I POST a json-representation of an Experiment, I get following error:</p>  <pre><code>"error_message": "Cannot resolve keyword 'resource_uri' into field. Choices are: algorithm, algorithm_id, experiment, id, name, parameters, supported_assays" </code></pre>  <p>'resource_uri' is a Tastypie's own additional field specifying the REST uri to this particular instance.</p>  <p>algorithm, algorithm_id, experiment, id being fields belonging to my model Algorithm.</p>  <p>The resource description in tastypie's api.py is:</p>  <pre><code>class ExperimentResource(ModelResource): cohort = fields.ForeignKey(     'classifier.api.CohortResource',     'cohort',     null=True,     **full_switch )  methods = fields.ToManyField(     'classifier.api.MethodResource',     'methods',     null=True,     **full_switch )  class Meta( GenericMeta ):     resource_name = 'experiment'     queryset = Experiment.objects.all() </code></pre>  <p>My incoming request to tastypie contains other fields than specified by the models (of children and the parent Experiment). One of those fields is 'fromServer', which is a Restangular metafield. </p>  <p>In order to successfully POST, I have to restangularize all objects and collections in my request, and then get a plain() representation:</p>  <pre><code>  experiment: Restangular.restangularizeElement( '', {}, 'experiment' ),    prepare: function() {      var candidate = Restangular.restangularizeElement(       '', angular.copy(this.experiment), 'experiment' );      candidate.cohort = candidate.cohort.plain();     candidate.methods = Restangular.restangularizeCollection(       '', candidate.methods, 'method' );      candidate.methods = candidate.methods.plain();     candidate = candidate.plain(); </code></pre>  <p>This is quite cumbersome to do every time, so I was wondering</p>  <p><strong>Is it possible to force Tastypie to ignore extra meta-fields that Restangular automatically adds to the related objects?</strong></p>