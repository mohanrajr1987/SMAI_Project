<p>I'm trying to implement a RESTful API for my web app. <br /> I have learned from some tutorials how to write the classes for REST API service.</p>  <p>However, in one of the tutorials, they use AngularJS to send HTTP.delete requests to the server on button clicks. <br /> If I don't want to use AngularJS, how can I set the request method in the HTML form to delete a specified user?</p>  <p>For example, if I go to <code>localhost/app/api/user/3</code><br /> I will get the information of User of id 3 in JSON representation because the default request method is <code>GET</code>.</p>  <p>How can I send delete request to <code>localhost/app/api/user/3</code> and to delete this user?</p>  <p>In HTML forms, there are only POST and GET methods.</p>  <p>I also don't know how the <code>PUT</code> works...</p>  <p>The following are the classes:</p>  <pre><code>&lt;?php class REST {   public $_request_args = array();   private $_method = "";   public $_content_type = "application/json";   private $_code = 200;    public function __construct() {       $this-&gt;inputs();   }    private function inputs() {     $this-&gt;_method = $this-&gt;get_request_method();     switch($this-&gt;_method){         case "POST":             $this-&gt;_request_args = $this-&gt;cleanInputs($_POST);             break;         case "GET":             $this-&gt;_request_args = $this-&gt;cleanInputs($_GET);             break;         case "DELETE":         case "PUT":             parse_str(file_get_contents("php://input"),$this-&gt;_request_args);             $this-&gt;_request_args = $this-&gt;cleanInputs($this-&gt;_request_args);             break;         default:             $this-&gt;response('Method Not Allowed',405);             break;       }   }    private function get_status_message(){       $status = array(         200 =&gt; 'OK',          204 =&gt; 'No Content',           404 =&gt; 'Not Found',           405 =&gt; 'Method Not Allowed',         406 =&gt; 'Not Acceptable',         500 =&gt; 'Internal Server Error');       return ($status[$this-&gt;_code]) ? $status[$this-&gt;_code] : $status[500];   }    public function get_request_method(){       $request_method = $_SERVER['REQUEST_METHOD'];       if ($request_method == 'POST' &amp;&amp; array_key_exists('HTTP_X_HTTP_METHOD', $_SERVER)) {           if ($_SERVER['HTTP_X_HTTP_METHOD'] == 'DELETE') {             $request_method = 'DELETE';           } else if ($_SERVER['HTTP_X_HTTP_METHOD'] == 'PUT') {             $request_method = 'PUT';           } else {             throw new Exception("Unexpected Header");           }       }       return $request_method;   }    private function cleanInputs($data){       $clean_input = array();       if (is_array($data)) {          foreach ($data as $k =&gt; $v) {             $clean_input[$k] = $this-&gt;cleanInputs($v);          }       } else {          if(get_magic_quotes_gpc()) {             $data = trim(stripslashes($data));          }          $data = strip_tags($data);          $clean_input = trim($data);       }       return $clean_input;    }             private function set_headers() {       header("HTTP/1.1 ".$this-&gt;_code." ".$this-&gt;get_status_message());       header("Content-Type:".$this-&gt;_content_type);    }     public function response($data, $status = 200) {        $this-&gt;_code = ($status)? $status : 200;        $this-&gt;set_headers();        if (is_array($data))           echo json_encode($data, JSON_PRETTY_PRINT);        else           echo $data;        exit;     } }    ?&gt;   &lt;?php class API extends REST { public $data = ""; public function processApi() {     $request_args = explode('/', rtrim($_SERVER["REQUEST_URI"], '/'));     $func = $request_args[3];     if(method_exists($this, $func))         $this-&gt;$func();     else {         $this-&gt;response('',404); // If the method not exist with in this class "Page not found".      }   }    private function users() {     if($this-&gt;get_request_method() != "GET"){         $this-&gt;response('',405);     }     $conn = DBManager::getConnection();     $stmt = $conn-&gt;prepare("SELECT * FROM USER");     $stmt-&gt;execute();     $result = $stmt-&gt;fetchAll();     $this-&gt;response($result);   }    private function courses() {     if($this-&gt;get_request_method() != "GET"){         $this-&gt;response('',405);     }     $conn = DBManager::getConnection();       $stmt = $conn-&gt;prepare("SELECT * FROM COURSE");       $stmt-&gt;execute();       $result = $stmt-&gt;fetchAll();       $this-&gt;response($result);    }     private function subjects() {        if($this-&gt;get_request_method() != "GET"){           $this-&gt;response('',405);        }        $conn = DBManager::getConnection();        $stmt = $conn-&gt;prepare("SELECT * FROM SUBJECT");        $stmt-&gt;execute();        $result = $stmt-&gt;fetchAll();        $this-&gt;response($result);    } }  $api = new API; $api-&gt;processApi(); ?&gt; </code></pre>  <p>So my question is if I have a form like the following:</p>  <pre><code>&lt;form action='api/users/3' method='POST'&gt;     &lt;input type='submit' value='Delete User' /&gt; &lt;/form&gt; </code></pre>  <p>How can I actually delete this user with that request even though the method is <code>POST</code> not <code>DELETE</code>?</p>