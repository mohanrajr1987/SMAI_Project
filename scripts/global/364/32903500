<p>I have a restful service written in Java using the Jersey Framework that implements an Advanced Message Queuing Protocol on top of a RabbitMQ server. </p>  <p>When a consumer gets a message from a given channel he is given a delivery tag. This delivery tag is used in a separate rest call to acknowledge receipt of the message and remove it from the queue entirely. However, since each channel has it's own set of delivery tags starting with tag id 1, the acknowledgement request must know which channel to send the acknowledgement back to, otherwise we get an unknown delivery tag exception.</p>  <p>One way I have thought of tracking this is by using some kind of dictionary that stores a generated GUID as the key and stores the channel and delivery tag id as the value. I could pass the GUID to the consumer on a consume call, store the GUID with its associated channel and delivery tag in the dictionary, and then when the ack call comes back with the GUID, I could then look up the proper channel and delivery tag and ack it. </p>  <p>There is one problem with this method though, the restful java application that is running on top of the single running RabbitMQ server must run in a load balanced environment, which means a consume request could come in and hit one running instance of the application and store the channel/delivery tag in its local dictionary. Then when it calls to ack that message it could hit another running instance of the application, which would have a different set of GUIDs in it's local dictionary and thus would not be able to look up the necessary channel/delivery tag needed to ack. </p>  <p>Of course I could store the channel/delivery tag info in an external database, but that would kind of defeat the purpose of using a queue in the first place.</p>  <p>How would you have a restful RabbitMQ service that requires acknowledging messages, can be load balanced, and has one channel per thread, if you have to send the acknowledgment on the same channel you consumed from?</p>