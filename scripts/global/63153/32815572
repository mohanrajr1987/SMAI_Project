<p>In iOS 9 beta, a bug (<a href="https://openradar.appspot.com/22186109" rel="nofollow">https://openradar.appspot.com/22186109</a>) was introduced that meant that setting <code>window.location.hash</code> to some new value was not being updated until "some time" later. The exact meaning of "some time" is up for debate, but seems to be at least until the next js event loop tick.</p>  <p>As an example, you would do something like this:</p>  <pre><code>location.hash = "abcd"; console.log(location.hash); // probably not "abcd"  setImmediate(function () {   console.log(location.hash); // probably "abcd" }); </code></pre>  <p>This has caused an issue in our site which is using backbone.js router with hashchange navigation. Imagine that at the start of this example, the route is 'foo', and that before 'foo' in the history was 'quux'.</p>  <p>We do something like this:</p>  <pre><code>router.navigate('bar', { trigger: true, replace: false }); </code></pre>  <p>The backbone.js history class would be invoked and call the routers to handle the navigation:</p>  <pre><code>function onFooRoute() {   router.navigate('baz', { trigger: true, replace: true }); } </code></pre>  <p>So we started on 'foo', went to 'bar' and then went to 'baz' (with replace set to true for the last one).</p>  <p>We expect that we should end up on 'baz', and going back in history will take us back to 'foo'.</p>  <p>The issue we saw is that having done all of this, and once everything was settled down, going back in the history via <code>window.history.back()</code>, we go back to 'quux' and not 'foo'. It appears that because of the bug, the entry for 'bar' doesn't stick into the browser history stack, and so the navigation to 'baz' replaces 'foo' instead of 'bar'.</p>  <p>My question is how best to fix this? Can I patch backbone.js to work-around this issue?</p>