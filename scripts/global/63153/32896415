<p>I'm trying to use the require.js optimizer (via Grunt) to build my Backbone based app but I'm running into a problem.  When I used the optimizer it finds all of the dependant libraries (of which there are a lot) as I see them included in the build.txt.  </p>  <p>This is a version of the Gruntfile.js I am using:</p>  <pre><code>module.exports = function(grunt) {      // Load plugins     grunt.loadNpmTasks('grunt-contrib-clean');     grunt.loadNpmTasks('grunt-contrib-requirejs');     grunt.loadNpmTasks('grunt-contrib-copy');     grunt.loadNpmTasks('grunt-contrib-imagemin');      // Project configuration.     grunt.initConfig({          pkg:        grunt.file.readJSON('package.json'),          buildPath:  'build',          distPath:   'dist/&lt;%= pkg.name %&gt;/&lt;%= pkg.version %&gt;',          clean:      {                     build:      ['&lt;%= buildPath %&gt;'],                     dist:       ['&lt;%= distPath %&gt;'],                     all:        ['&lt;%= buildPath %&gt;', '&lt;%= distPath %&gt;']                     },          requirejs:  {             buildApp:   {                 options:    {                     appDir:         'public',                     baseUrl:        'js',                     mainConfigFile: 'public/js/MyApp.js',                     dir:            '&lt;%= buildPath %&gt;',                     paths:          {                                     require:    'lib/require'                                     },                     modules:        [{                                     name:       'MyApp',                                     include:    ['require']                                     }],                     optimize:       'none', //'uglify2',                     optimizeCss:    'standard',                     wrapShim:       true,                     removeCombined: true                     }                 }             },          copy:   {             buildServer:    {                 files:  [                         {src: ['my-server.js'], dest: '&lt;%= distPath %&gt;/my-server.js'},                         {src: ['images/favicon.ico'], dest: '&lt;%= distPath %&gt;/images/favicon.ico'},                         {expand: true, cwd: 'config/', src: ['**'], dest: '&lt;%= distPath %&gt;/config/'},                         {expand: true, cwd: 'models/', src: ['**'], dest: '&lt;%= distPath %&gt;/models/'},                         {expand: true, cwd: 'routes/', src: ['**'], dest: '&lt;%= distPath %&gt;/routes/'},                         {expand: true, cwd: 'views/', src: ['**'], dest: '&lt;%= distPath %&gt;/views/'}                         ]                         },             buildApp:   {                 files:  [                         {expand: true, cwd: '&lt;%= buildPath %&gt;/js/', src: ['**'], dest: '&lt;%= distPath %&gt;/public/js/'},                         {expand: true, cwd: '&lt;%= buildPath %&gt;/css/', src: ['**'], dest: '&lt;%= distPath %&gt;/public/css/'},                         {expand: true, cwd: '&lt;%= buildPath %&gt;/fonts/', src: ['**'], dest: '&lt;%= distPath %&gt;/public/fonts/'}                         ]                         }                     },          imagemin:   {             buildApp:   {                 files: [{expand: true, cwd: '&lt;%= buildPath %&gt;', src: ['**/*.png'], dest: '&lt;%= distPath %&gt;/public/' }]                         }                     },         });      grunt.registerTask('build', ['clean:all', 'copy:buildServer', 'requirejs:buildApp', 'copy:buildApp', 'imagemin:buildApp']);     }; </code></pre>  <p>There are two things to note in this Gruntfile.js.  First, in the requirejs buildApp options, the line:</p>  <pre><code>mainConfigFile: 'public/js/MyApp.js', </code></pre>  <p>This references the shim from which all of my dependancies are referenced.  A cutdown version of this file is here:</p>  <pre><code>require.config({      paths: {         lodash:                     'lib/lodash',         jquery:                     'lib/jquery-2.0.3',         bootstrap:                  'lib/bootstrap',          fuleux:                     'lib/fuelux',          Backbone:                   'lib/backbone-1.2.1',          modal:                      'lib/backbone.bootstrap-modal',          models:                     'models',         templates:                  '../templates',         fonts:                      '../fonts',         MyView:                     'MyView'         },      shim: {         Backbone:       {                         deps:       ['lodash', 'jquery'],                         exports:    'Backbone'                         },         lodash:         {exports:   '_'},         bootstrap:      {                         deps:       ['jquery'],                         exports:    'bootstrap'                         },         fuleux:         {                         deps:       ['bootstrap'],                         exports:    'fuleux'                         },         modal:          {                         deps:       ['Backbone'],                         exports:    'Backbone.BootstrapModal'                         },         MyApp:          {                         deps:       ['Backbone', 'bootstrap', 'fuleux', 'modal'],                         exports:    'MyApp'                         }         }     });  require(['MyInit'], function(MyInit) {     MyInit.initialize();     }); </code></pre>  <p>When I first ran this configuration everything appeared to work but on running up the client side application I got the message 'Backbone not defined'.  Hence the second thing to note, the option:</p>  <pre><code>wrapShim: true </code></pre>  <p>Following this advice <a href="http://jrburke.com/2014/02/16/requirejs-2.1.11-released/" rel="nofollow">http://jrburke.com/2014/02/16/requirejs-2.1.11-released/</a> I added the option to ensure Backbone can be located.  This works but now other libraries no longer appear to be defined.</p>  <p>Is there a recommended way to break this deadlock so that I can wrap the third party dependancies that need wrapping but skip the libraries that don't need this treatment?</p>