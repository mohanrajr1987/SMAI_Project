<p><a href="http://i.stack.imgur.com/uXQ2u.jpg" rel="nofollow"><img src="http://i.stack.imgur.com/uXQ2u.jpg" alt="enter image description here"></a></p>  <p>My <code>OrderView</code> is the main view that encloses the rest of the views</p>  <p>When ever there is a change in the DropDownView it updates the OrderListView</p>  <pre><code>events: {     "change #channelDrop": "channelDropChange" }, channelDropChange: function (e) {     var self = this;     if (self.order != null) {         self.order.undelegateEvents();     }     if ($(e.currentTarget).val() != "") {         var channel_id = $(e.currentTarget).val();         this.order = new orderActionView({ channel_id: channel_id });         return this.order;     }  }, </code></pre>  <p>OrderActionView</p>  <pre><code>    var OrderActionView = Backbone.View.extend({       el: "#id-order-action",       initialize: function (options) {         if (this.orderListView != null) {           this.orderListView.undelegateEvents();         }         if (options != null &amp;&amp; options != undefined) {           var self = this;           this.channel_id = options.channel_id;           this.orderListView = new orderListView({             channel_id: self.channel_id,             el: "#id-to-pack"           })         }         else {           this.orderListView = new orderListView({             el: "#id-to-pack"           })          }          return this.orderListView;       },       events: {         "click #id-open-orders-topack": "openOrdersToPack"       },       openOrdersToPack: function () {         Backbone.history.navigate('orders/topack', {           trigger: true         });        },       render: function () {         this.$el.html(orderActionTemplate);         this.$el.append(this.orderListView.render().el);       }     });   OrderListView      var $ = jQuery = require('jquery'),   Backbone = require('backbone'),   Handlebars = require('handlebars'),   _ = require('underscore'),   moment = require('moment'),   Urls = require("../../libs/urls"),   orderListCollection = require('../../collections/order/OrderListCollection'),   orderListTemplate = require("../../templates/order/OrderList.html"); var OrderListView = Backbone.View.extend({   el: "#id-order-list",   initialize: function (options) {     var self = this;     if (options != null) {       self.channel_id = options.channel_id;     }     var passStartDate = new Date(0);     this.passStartDate = moment(passStartDate).toISOString();     this.page = 1;     this.collection = new orderListCollection({ since: this.passStartDate, channel_id: self.channel_id, action: "topack" });      this.collection.getPage(this.page, { reset: true }).then(function (response) {     });     this.listenTo(self.collection, 'add', self.render);     this.listenTo(self.collection, 'change', self.render);     this.listenTo(self.collection, 'reset', self.render);     this.listenTo(self.collection, 'request', this.showSpinner); //start fetching     this.listenTo(self.collection, 'sync', this.hideSpinner); //finish fetching     this.listenTo(self.collection, 'error', this.hideSpinner); //error fetching   },   events: {     "click .previous": "getPreviousPage",     "click .next": "getNextPage",     "click .getPage": "getCurrentPage",     "click .first": "getCurrentPage",     "click .last": "getCurrentPage"   },   getCurrentPage: function (ev) {     var self = this;     var pageNumber = parseInt($(ev.target).attr("pageNo"));     this.page = pageNumber;     console.log(this.channel_id);     if (pageNumber != 0) {       self.collection.getPage(pageNumber).then(function (response) {       });     }   } </code></pre>  <p>During pagination it loads the previous collection first and re renders the view with new data </p>  <p>So that previous request is loading first and then my current request so on.</p>