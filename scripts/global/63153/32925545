<p>I cloned this todo application. I'm now debugging it so I'll have a better understanding of how a ReactJS application works. I'm an AngularJS person and was told to forget about AngularJS so I can easily and better understand ReactJS.</p>  <p>So I put breakpoints in each method. However, when I added an item in the running application(that's after pressing ENTER key), it goes directly to the render method but doesn't go to handleKeyDown method. I was expecting that </p>  <pre><code>if (event.which === ENTER_KEY) { </code></pre>  <p>will be called because I pressed ENTER key. However, it did not.</p>  <pre><code>/**  * @jsx React.DOM  */ /*jshint quotmark: false */ /*jshint white: false */ /*jshint trailing: false */ /*jshint newcap: false */ /*global React */ var app = app || {};  (function () {   'use strict';    var ESCAPE_KEY = 27;   var ENTER_KEY = 13;    app.TodoItem = React.createClass({     getInitialState: function () {       return {         editText: this.props.todo.get('title')       };     },      handleSubmit: function() {       var val = this.state.editText.trim();       if (val) {         this.props.onSave(val);         this.setState({           editText: val         });       } else {         this.props.onDestroy();       }       return false;     },      handleEdit: function () {       // react optimizes renders by batching them. This means you can't call       // parent's `onEdit` (which in this case triggeres a re-render), and       // immediately manipulate the DOM as if the rendering's over. Put it as a       // callback. Refer to app.jsx' `edit` method       this.props.onEdit(function() {         var node = React.findDOMNode(this.refs.editField);         node.focus();         node.setSelectionRange(node.value.length, node.value.length);       }.bind(this));       this.setState({         editText: this.props.todo.get('title')       });     },      handleKeyDown: function (event) {       if (event.which === ESCAPE_KEY) {         this.setState({           editText: this.props.todo.get('title')         });         this.props.onCancel();       } else if (event.which === ENTER_KEY) {         this.handleSubmit();       }     },      handleChange: function (event) {       this.setState({         editText: event.target.value       });     },      render: function () {       return (         &lt;li className={classNames({           completed: this.props.todo.get('completed'),           editing: this.props.editing         })}&gt;           &lt;div className="view"&gt;             &lt;input               className="toggle"               type="checkbox"               checked={this.props.todo.get('completed')}               onChange={this.props.onToggle}             /&gt;             &lt;label onDoubleClick={this.handleEdit}&gt;               {this.props.todo.get('title')}             &lt;/label&gt;             &lt;button className="destroy" onClick={this.props.onDestroy} /&gt;           &lt;/div&gt;           &lt;input             ref="editField"             className="edit"             value={this.state.editText}             onBlur={this.handleSubmit}             onChange={this.handleChange}             onKeyDown={this.handleKeyDown}           /&gt;         &lt;/li&gt;       );     }   }); })(); </code></pre>  <p>And also, for another big question. Where did this.props come from? I searched my js directory and this is what silver searcher found, only.</p>  <pre><code>footer.jsx 16:         var activeTodoWord = this.props.count === 1 ? 'item' : 'items'; 19:         if (this.props.completedCount &gt; 0) { 23:                     onClick={this.props.onClearCompleted}&gt; 29:         var nowShowing = this.props.nowShowing; 33:                     &lt;strong&gt;{this.props.count}&lt;/strong&gt; {activeTodoWord} left  app.jsx 54:         return [this.props.todos]; 76:         this.props.todos.fetch(); 83:         this.props.todos.forEach(function (todo) { 95:             this.props.todos.create({ 98:                 order: this.props.todos.nextOrder() 108:            this.props.todos.forEach(function (todo) { 128:            this.props.todos.completed().forEach(function (todo) { 136:            var todos = this.props.todos;  todoItem.jsx 20:        editText: this.props.todo.get('title') 27:        this.props.onSave(val); 32:        this.props.onDestroy(); 42:      this.props.onEdit(function() { 48:        editText: this.props.todo.get('title') 55:          editText: this.props.todo.get('title') 57:        this.props.onCancel(); 72:          completed: this.props.todo.get('completed'), 73:          editing: this.props.editing 79:              checked={this.props.todo.get('completed')} 80:              onChange={this.props.onToggle} 83:              {this.props.todo.get('title')} 85:            &lt;button className="destroy" onClick={this.props.onDestroy} /&gt; </code></pre>  <p>Btw, this is the code that I cloned - <a href="https://github.com/tastejs/todomvc/tree/gh-pages/examples/react-backbone" rel="nofollow">https://github.com/tastejs/todomvc/tree/gh-pages/examples/react-backbone</a></p>