<p>Here's the flow I'm following:</p>  <ul> <li><code>master</code> branch is always in sync with production</li> <li><code>develop</code> branch is always the next version to be released</li> <li><code>feature/feature-name</code> branch is the feature currently being developed.</li> </ul>  <p>After the feature is done, a pull request is raised from <code>feature/feature-name</code> into <code>develop</code> branch, then from <code>develop</code> branch into master branch. We do all these in github.</p>  <p>However, whenever there is a pull request on github, here's the merge branch created. Therefore, after <code>feature/feature-name</code> merged into <code>develop</code> branch, a merge commit is created; after a <code>develop branch</code> merged into <code>master branch</code>, another merge commit is created.</p>  <p>Therefore, in order to have 1 feature merged, I have to create 2 merge commits.</p>  <p>What is worse, now master branch and develop branch are no longer in sync, because master branch has 1 extra merge commit.</p>  <p>I got 2 questions: 1) am I following the right structure / practice? 2) how to avoid extra merge commits? Esp. how to keep the master branch do not create extra commit when fast-forwarding from develop?</p>