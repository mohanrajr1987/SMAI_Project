<p>According to the Java Language Specification, <a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html#jls-5.1.7" rel="nofollow">section 5.1.7</a>, Java caches <code>Integer</code>s from -128 to 127 for performance optimization. </p>  <p>So when you compare <code>a == b</code>, with <code>a</code> &amp; <code>b</code> Integers in the caching range, it returns true even though they're different objects.</p>  <p>Mechanically, what performance benefits result from this caching? According to <a href="http://stackoverflow.com/a/3131208/2029568">this</a> answer, "The purpose is mainly to save memory, which also leads to faster code due to better cache efficiency." How does it lead to faster code? How might I use this feature to improve performance in real code I write?</p>  <p>Does it have anything to do with the following method found in the <code>IntegerCache</code> class?</p>  <pre><code>public static Integer valueOf(int i) {     assert IntegerCache.high &gt;= 127;     if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)         return IntegerCache.cache[i + (-IntegerCache.low)];     return new Integer(i); } </code></pre>