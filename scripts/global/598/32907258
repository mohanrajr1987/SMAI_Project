<p>I am developing some engineering simulations. This involves implementing some long equations such as this equation to calculate stress in a rubber like material:</p>  <pre><code>T = (     mu * (             pow(l1 * pow(l1 * l2 * l3, -0.1e1 / 0.3e1), a) * a             * (                 pow(l1 * l2 * l3, -0.1e1 / 0.3e1)                 - l1 * l2 * l3 * pow(l1 * l2 * l3, -0.4e1 / 0.3e1) / 0.3e1             ) * pow(l1 * l2 * l3, 0.1e1 / 0.3e1) / l1             - pow(l2 * pow(l1 * l2 * l3, -0.1e1 / 0.3e1), a) * a / l1 / 0.3e1             - pow(l3 * pow(l1 * l2 * l3, -0.1e1 / 0.3e1), a) * a / l1 / 0.3e1         ) / a     + K * (l1 * l2 * l3 - 0.1e1) * l2 * l3 ) * N1 / l2 / l3  + (     mu * (         - pow(l1 * pow(l1 * l2 * l3, -0.1e1 / 0.3e1), a) * a / l2 / 0.3e1         + pow(l2 * pow(l1 * l2 * l3, -0.1e1 / 0.3e1), a) * a         * (             pow(l1 * l2 * l3, -0.1e1 / 0.3e1)             - l1 * l2 * l3 * pow(l1 * l2 * l3, -0.4e1 / 0.3e1) / 0.3e1         ) * pow(l1 * l2 * l3, 0.1e1 / 0.3e1) / l2         - pow(l3 * pow(l1 * l2 * l3, -0.1e1 / 0.3e1), a) * a / l2 / 0.3e1     ) / a     + K * (l1 * l2 * l3 - 0.1e1) * l1 * l3 ) * N2 / l1 / l3  + (     mu * (         - pow(l1 * pow(l1 * l2 * l3, -0.1e1 / 0.3e1), a) * a / l3 / 0.3e1         - pow(l2 * pow(l1 * l2 * l3, -0.1e1 / 0.3e1), a) * a / l3 / 0.3e1         + pow(l3 * pow(l1 * l2 * l3, -0.1e1 / 0.3e1), a) * a         * (             pow(l1 * l2 * l3, -0.1e1 / 0.3e1)             - l1 * l2 * l3 * pow(l1 * l2 * l3, -0.4e1 / 0.3e1) / 0.3e1         ) * pow(l1 * l2 * l3, 0.1e1 / 0.3e1) / l3     ) / a + K * (l1 * l2 * l3 - 0.1e1) * l1 * l2 ) * N3 / l1 / l2; </code></pre>  <p>I use Maple to generate the C++ code to avoid mistakes. As this code is executed many many times the performance is a concern. Unfortunately the math only simplifies so far, the long equations are unavoidable.</p>  <p><strong>What approach should I take to optimize this implementation?</strong> I'm looking for high-level strategies that I should be applying when implementing such equations, not necessarily specific optimizations for the example shown above.</p>  <p>I'm compiling using g++ with <code>--enable-optimize=-O3</code>.</p>