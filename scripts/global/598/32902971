<p>In <code>R</code>, what is the fastest way to convert a list containing suites of character numbers into numeric?</p>  <p>With the following dummy data:</p>  <pre><code>set.seed(2) N = 1e7 ncol = 10 myT = formatC(matrix(runif(N), ncol = ncol)) # A matrix converted to characters # Each row is collapsed into a single suite of characters: myT = apply(myT, 1, function(x) paste(x, collapse=' ') )  head(myT) </code></pre>  <p>Producing:</p>  <pre><code>[1] "0.1849 0.855 0.8272 0.5403 0.3891 0.5184 0.7776 0.5533 0.1566 0.01591"   [2] "0.7024 0.1008 0.9442 0.8582 0.3184 0.9289 0.9957 0.1311 0.2131 0.07355"  [3] "0.5733 0.5493 0.3915 0.4423 0.8522 0.6042 0.9265 0.006878 0.7052 0.71"    [... etc ...]  </code></pre>  <p>I could do </p>  <pre><code>library(stringi)  # In the actual dataset, the number of spaces between numbers may vary, hence "\\s+" system.time(newT &lt;- lapply(stri_split_regex(myT, "\\s+", omit_empty=T), as.numeric))  newT &lt;- unlist(newT) # Final goal is to have a single vector of numbers </code></pre>  <p>On my Intel Core i7 2.10GHz with 64-bit and 16GB system (under ubuntu):</p>  <pre><code>   user  system elapsed    3.748   0.008   3.757  </code></pre>  <p>With the real dataset (<code>ncol=150</code> and <code>N~1e9</code>), this is way too long. Any better option?</p>