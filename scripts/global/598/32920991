<p>I am trying to isolate specific items in a list (e.g. <code>[0, 1, 1]</code> will return <code>[0, 1]</code>). I managed to get through this, but I noticed something strange.</p>  <p>When I tried to append to list it ran about 7 times slower then when I was concatenating strings and then splitting it.</p>  <p>This is my code:</p>  <pre><code>import time start = time.time()  first = [x for x in range(99999) if x % 2 == 0] second = [x for x in range(99999) if x % 4 == 0]  values = first + second  distinct_string = ""  for i in values:     if not str(i) in distinct_string:         distinct_string += str(i) + " "  print(distinct_string.split())  print(" --- %s sec --- " % (start - time.time())) </code></pre>  <p><strong>This result end in about 5 seconds...</strong> Now for the lists:</p>  <pre><code>import time start = time.time()  first = [x for x in range(99999) if x % 2 == 0] second = [x for x in range(99999) if x % 4 == 0]  values = first + second  distinct_list = []  for i in values:     if not i in distinct_list:         distinct_list.append(i)  print(distinct_list)  print(" --- %s sec --- " % (start - time.time())) </code></pre>  <p><strong>Runs at around 40 seconds.</strong></p>  <p>What makes string faster even though I am converting a lot of values to strings?</p>