<p>Ruby 2.2 , Rails 3.21</p>  <p>I got the following error when I try to destroy my object. This happen with any object whose model has an association with <code>:dependent =&gt; :restrict</code> option</p>  <p>This error is strange because it suggests a NIL object, though when I log the class and Id of the related object just before the error, it shows the expected class with correct ID.</p>  <blockquote>   <p>NoMethodError in Projects::ProjClefsRepartitionController#destroy</p>      <p>undefined method `name' for nil:NilClass</p>      <p>app/controllers/projects/proj_clefs_repartition_controller.rb:322:in   block in destroy</p>      <p>app/controllers/projects/proj_clefs_repartition_controller.rb:315:in destroy</p> </blockquote>  <p>This is the related code of the ProjClefsRepartitionController controller :</p>  <pre><code>294# def destroy 295# 296#    messages = {} 297# 298#    # Create the @proj_clef_repartition objet 299#    unless creer_instance_objet_et_render_parent_si_impossible(ProjClefRepartition, params[:id], params[:proj_sous_projet_id], [{:proj_sous_projet =&gt; [:proj_charges, {:proj_projet =&gt; {:proj_mesure =&gt; :proj_paquet_mesures}}]}]) then 300# 301#      enregistrement_ok = false 302#  303#      @objet_de_l_erreur = @proj_clef_repartition 304#      @proj_sous_projet = @proj_clef_repartition.proj_sous_projet 305#      @proj_projet = @proj_sous_projet.proj_projet 306#      @proj_mesure = @proj_projet.proj_mesure 307#      @proj_paquet_mesures = @proj_mesure.proj_paquet_mesures 308#      @hist_version_sous_projet = HistVersionSousProjet.where(:proj_sous_projet_id =&gt; @proj_sous_projet.id).order{version.desc}.limit(1)[0] 309# 310#      @proj_clefs_repartition = @proj_sous_projet.proj_clefs_repartition 311#      @proj_charges = @proj_sous_projet.proj_charges 312#      @total_charges =  BigDecimal.new('0', 18) 313# 314#      # =================== DEBUT DE LA TRANSACTION =================== 315#      ProjClefRepartition.transaction do 316# 317# 318#        if sauver_version(@proj_clef_repartition, messages, nil, 3, nil, true) then 319# 320#          logger.debug "#{@proj_clef_repartition.blank?}" 321#          logger.debug "#{@proj_clef_repartition.class} (#{@proj_clef_repartition.id})" 322#          if @proj_clef_repartition.destroy then 323#            ajouter_message(t('activerecord.successful.messages.deleted', :model =&gt; ProjClefRepartition.model_name.human), :success, messages) 324#            enregistrement_ok = true 325#          else 326#            ajouter_message(t('activerecord.warning.messages.deleted', :model =&gt; ProjClefRepartition.model_name.human), :alert, messages) 327#          end # proj_clef_repartition.destroy 328# 329#        end # sauver_version(@proj_clef_repartition, messages, nil, 3, nil, true)  330# 331# 332#        raise ActiveRecord::Rollback unless enregistrement_ok 333# 334#      end # ProjClefRepartition.transaction 335#      # =================== FIN DE LA TRANSACTION =================== 336# 337# 338#      afficher_maintenant(messages) 339# 340#      render 'projects/proj_sous_projets/show' 341# 342#    end # creer_instance_objet_et_render_parent_si_impossible(ProjClefRepartition, params[:id], params[:proj_sous_projet_id]) 343# 344# 345#  rescue ActiveRecord::StatementInvalid =&gt; exception 346# 347# 348# 349# 350# 351#    @hist_sous_projet = @hist_version_sous_projet.hist_sous_projet 352#    ajouter_message(t('activerecord.warning.messages.invalid_db_statement'), :error, messages) 353#    ajouter_erreur_concernant_exception_statement_invalid(exception, @objet_de_l_erreur) 354#    afficher_maintenant(messages) 355#    render 'projects/proj_sous_projets/show' 356# 357# 358#  rescue ActiveRecord::DeleteRestrictionError =&gt; exception 359# 360# 361#    @hist_sous_projet = @hist_version_sous_projet.hist_sous_projet 362# 363#    ajouter_message(t('activerecord.warning.messages.delete_restriction', :model =&gt; ProjClefRepartition.model_name.human), :error, messages) 364#    afficher_maintenant(messages) 365#    render 'projects/proj_sous_projets/show' 366# 367#  end # destroy </code></pre>  <p>Following is an extract of the log that is related to the error. You can see that the object is not blank and has a class with a valid ID.</p>  <p>It shows <code>false</code> for <code>@proj_clef_repartition.blank?</code> logging. It shows <code>ProjClefRepartition (96)</code> for <code>@proj_clef_repartition.class</code> and <code>@proj_clef_repartition.id</code></p>  <blockquote>   <p>QUITTING ||| historisation_nouvelle_version_avec_origine   (pub_modification_id = 2) ||| ===>   output_hash[:id_hist_origine_modification] = 1202    (0.4ms)  SELECT   COUNT(*) FROM "proj_charges" WHERE   "proj_charges"."proj_clef_repartition_id" = 96</p>      <p>false</p>      <p>ProjClefRepartition (96)</p>      <p>(0.4ms)  ROLLBACK</p>      <p>Completed 500 Internal Server Error in 298.9ms</p>      <p>NoMethodError (undefined method <code>name' for nil:NilClass):<br>   app/controllers/projects/proj_clefs_repartition_controller.rb:322:in   </code>block in destroy'</p>      <p>app/controllers/projects/proj_clefs_repartition_controller.rb:315:in   `destroy'</p>      <p>Rendered   /home/douglas/.rvm/gems/ruby-2.2.0@rail3/gems/actionpack-3.2.21/lib/action_dispatch/middleware/templates/rescues/_trace.erb   (2.4ms)   Rendered   /home/douglas/.rvm/gems/ruby-2.2.0@rail3/gems/actionpack-3.2.21/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb   (1.9ms)   Rendered   /home/douglas/.rvm/gems/ruby-2.2.0@rail3/gems/actionpack-3.2.21/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb   within rescues/layout (21.8ms)</p> </blockquote>  <p>It does not make sense. I checked the full trace, and noticed that the "Nil" object error which happened in active_record has_many association. Here it is the full trace :</p>  <hr>  <blockquote>   <p>NoMethodError in Projects::ProjClefsRepartitionController#destroy</p>      <p>undefined method `name' for nil:NilClass Rails.root: /var/www/odpf</p>      <p>Application Trace | Framework Trace | Full Trace</p>      <p>activerecord (3.2.21)   lib/active_record/associations/has_many_association.rb:58:in   `cached_counter_attribute_name'</p>      <p>activerecord (3.2.21)   lib/active_record/associations/has_many_association.rb:54:in   `has_cached_counter?'</p>      <p>activerecord (3.2.21)   lib/active_record/associations/has_many_association.rb:37:in   `count_records'</p>      <p>activerecord (3.2.21)   lib/active_record/associations/collection_association.rb:261:in `size'</p>      <p>activerecord (3.2.21)   lib/active_record/associations/collection_association.rb:280:in   `empty?'</p>      <p>activerecord (3.2.21)   lib/active_record/associations/collection_proxy.rb:46:in `empty?'</p>      <p>activerecord (3.2.21)   lib/active_record/associations/builder/has_many.rb:63:in `block in   define_restrict_dependency_method'</p>      <p>activesupport (3.2.21) lib/active_support/callbacks.rb:418:in   `_run__1417810521555210605__destroy__1154072583585286936__callbacks'</p>      <p>activesupport (3.2.21) lib/active_support/callbacks.rb:405:in   `__run_callback'</p>      <p>activesupport (3.2.21) lib/active_support/callbacks.rb:385:in   `_run_destroy_callbacks'</p>      <p>activesupport (3.2.21) lib/active_support/callbacks.rb:81:in   `run_callbacks'</p>      <p>activerecord (3.2.21) lib/active_record/callbacks.rb:254:in `destroy'</p>      <p>activerecord (3.2.21) lib/active_record/transactions.rb:254:in `block   in destroy'</p>      <p>activerecord (3.2.21) lib/active_record/transactions.rb:313:in `block   in with_transaction_returning_status'</p>      <p>activerecord (3.2.21)   lib/active_record/connection_adapters/abstract/database_statements.rb:192:in   `transaction'</p>      <p>activerecord (3.2.21) lib/active_record/transactions.rb:208:in   `transaction'</p>      <p>activerecord (3.2.21) lib/active_record/transactions.rb:311:in   `with_transaction_returning_status'</p>      <p>activerecord (3.2.21) lib/active_record/transactions.rb:254:in   `destroy'</p>      <p>app/controllers/projects/proj_clefs_repartition_controller.rb:322:in   `block in destroy'</p>      <p>activerecord (3.2.21)   lib/active_record/connection_adapters/abstract/database_statements.rb:192:in   `transaction'</p>      <p>activerecord (3.2.21) lib/active_record/transactions.rb:208:in   `transaction'</p>      <p>app/controllers/projects/proj_clefs_repartition_controller.rb:315:in   `destroy'</p> </blockquote>  <p>So I checked my model ProjClefRepartition.</p>  <p>I made a successful test without error when I removed the <code>, :dependent =&gt; :restrict</code> part of the two line :</p>  <pre><code>  has_many :proj_contributions, :dependent =&gt; :restrict   has_many :proj_charges, :dependent =&gt; :restrict </code></pre>  <hr>  <pre><code>require Rails.root.to_s + '/lib/opf_modules/opf_outils_models.rb'  class ProjClefRepartition &lt; ActiveRecord::Base    include OutilsModels    # Renforcement de la sécurité avec declarative_authorization Gem   using_access_control    # Modifier les attributs contenant des string vides en des nil   before_validation :blank_string_attributes_to_nil    attr_accessible :code, :designation, :proj_sous_projet_id, :motivation, :pub_modification_id    validates :code, :designation, :proj_sous_projet_id, :pub_modification_id, :admin_utilisateur_id, :presence =&gt; true    attr_accessor :montant_contributions_total    validates  :code, :length =&gt; { :in =&gt; 2..19 }, :uniqueness =&gt; { :case_sensitive =&gt; false }    validates :designation, :length =&gt; { :in =&gt; 2..60 }   validates :motivation, :length =&gt; { :in =&gt; 5..600 }, :allow_blank =&gt; true    validate :clef_repartition_exclusive_a_un_unique_sous_projet    belongs_to :proj_sous_projet   belongs_to :pub_modification   belongs_to :admin_utilisateur   has_many :proj_contributions, :dependent =&gt; :restrict   has_many :proj_charges, :dependent =&gt; :restrict   has_many :hist_versions_clefs_repartition, :class_name =&gt; HistVersionClefRepartition    # Méthode utilisée par la collection_select box   def texte_pour_collection_select     # Groupé les attributs afin d'améliorer la compréhension de l'utilisateur lors du choix par la select box     self.code + ' - ' + self.designation   end  # ------------------------------------------------------------- #  Validations speciale # ------------------------------------------------------------- private    def clef_repartition_exclusive_a_un_unique_sous_projet      # Lors de la création d'une nouvelle clé de répartition, l'ID est nil, et il n'y a aucun risque que la clef soit déjà utilisée par une charge     unless id.nil? then        # Trouver toutes les charges utilisant cette clé de répartition       proj_charges = ProjCharge.where(:proj_clef_repartition_id =&gt; id)        proj_charges.each do |c|         if c.proj_sous_projet_id != proj_sous_projet_id then           errors.add(:proj_sous_projet_id, I18n.t('activemodel.warning.messages.reaffectation_impossible', :modele_enfant =&gt; I18n.t('projects.proj_charges.model'), :modele_parent =&gt; I18n.t('projects.proj_sous_projets.model'), :modele =&gt; I18n.t('projects.proj_clefs_repartition.model')))           break         end # c.proj_sous_projet_id != proj_sous_projet_id       end # proj_charges.each      end # id.nil?   end # clef_repartition_exclusive_a_un_unique_sous_projet end </code></pre>  <p>So I'm really wondering if this could be a bug in Ruby on Rails version 3.21.</p>  <p>Any help is more than welcome.</p>  <p>=== EDIT ===</p>  <p>The two other associated models (proj_charge and proj_contribution) do have the following line :</p>  <pre><code>belongs_to :proj_clef_repartition </code></pre>