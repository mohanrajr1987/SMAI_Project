<p>Consider the following the model:</p>  <pre><code>class Store(models.Model):     id = models.CharField()     products = JsonField(default='[]')     regexp = models.CharField(max_length=255) </code></pre>  <p>I am using Django REST Framework and I have a serializer which serializes this model for a <code>StoreView</code>. </p>  <p>I have some validation I would like to enforce. For example, I want <code>products</code> to take the form: <code>{"id":x, "optional-title":y}</code> and I would like to enforce some regex validation for <code>regexp</code>.</p>  <p>How would I enforce validation for this model in one single place and still get correct error returns. By 'correct error returns', I mean that I should return a <code>400 BAD REQUEST</code> when I receive some bad payload in from an <code>API</code> client but I should also return a normal Django <code>ValidationError</code> if I create an object on the model level.</p>  <p>I can't see the advantage of serializer level validation. It appears to me that I would just need to duplicate my validations in the model level if I want to guarantee that a bad object never gets into the DB.</p>