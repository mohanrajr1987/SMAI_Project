<p>I'm trying to implement a set-based solution for a problem and have been running into some issues. </p>  <p>The problem is: I have 2 sets of <code>Group</code> objects. These sets should be unique on <code>email</code> (so we can check if an object from one set is <code>in</code> the other set).</p>  <p>However, two <code>Group</code> objects are not <code>__eq__()</code> if they only have an email match (for example, one set may contain an updated <code>Group</code> object that has a new <code>description</code>). The goal is to have a set where I can perform set operations (intersection and difference) based only on the <code>email</code> field... then check equality based on other fields (<code>description</code> and <code>name</code>)</p>  <pre><code>    class Group:         def __init__(self, name, email, description):             self.name = name             self.email = email             self.description = description          def __hash__(self):             return hash(self.email)          def __eq__(self, other):             return self.email == other.email                      and self.description == other.description                      and self.name == other.name          def __ne__(self, other):             return not self.__eq__(other)          def __str__(self):             return "Description: {0} Email: {1} Name: {2}".format(self.description, self.email, self.name) </code></pre>  <p>So i'd expect all assert statements to pass here:</p>  <pre><code>    group_1 = Group('first test group', 'testing@example.com', 'example description')     group_2 = Group('second test group', 'real@example.com', 'example description')     group_3 = Group('third group', 'testing@example.com', 'example description')     group_5 = Group('updated name', 'testing@example.com', 'example description')      group_set = set([group_1, group_2, group_3])     group_set_2 = set([group_3, group_5])      self.assertTrue(group_5 in group_set.intersection(group_set_2))     self.assertEqual(2, len(group_set))     self.assertTrue(group_5 in group_set) </code></pre>