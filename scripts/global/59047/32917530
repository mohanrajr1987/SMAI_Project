<p>I'm trying to write a script that in some way represents algebraic expressions, and I'm trying to make it as general as possible so that it can accommodate, eventually, things like multivariable expressions, e.g. <code>xy^2 = z</code> and other things like trig functions.  However, I need my script to be able to simplify expressions, e.g. simplifying <code>x^2 + 2x^2 = 3x^2</code> and in order to that I need it to recognize like terms.  However, in order to get it to recognize like terms I need it to be able to tell me when two expressions are identical, even if they don't look the same.  So for instance I need == to be defined in such a way that the computer will know that <code>(x^2)^2 is x^4</code>.</p>  <p>Now so far, the only way that I can see to make a computer know when two algebraic expressions are identical like this, is to try to create some kind of a "normal form" for all expressions, and then compare the normal forms.  So for instance, if I distribute all exponents over multiplication, multiply powers of sums, distribute multiplication over addition, and calculate all simple expressions of just numbers, then this might be at least close to something like a normal form.  So for example the normal form of <code>(x^2)^2</code> would be <code>x^4</code> and the normal form of <code>x^4</code> would be <code>x^4</code>.  Since they have the same normal form, the computer can tell me they're equivalent expressions.  It would say the normal form of <code>(2x)^2+x^2</code> is <code>4x^2+x^2</code> and so wouldn't recognize that this normal form is the same as the normal form of <code>5x^2</code>, though.</p>  <p>I'm thinking, at this stage I could try to define some "weak" notion of equality, that of equality of normal-form-components.  Use this notion of equality, group like terms in the normal form, and this would get me a more universally correct normal form.  </p>  <p>But all of this sounds like an absolute ton of work.  So far I've defined classes for Expressions, which have subclasses of Variables, Sums, Products, powers, and so on, and right now I'm about 1/4 of the way through defining the function that would produce the normal form of a power object--I haven't even begun on the normal form for a Sum or Product class--and already the code is many pages long, and I'm still not sure that it'll ultimately work the way I want it to.  </p>  <p>So my question is, how do you accomplish this goal?  Will my current method work?  Does anyone know how software like <code>Wolfram|Alpha</code> or the sympy package accomplish this functionality?</p>