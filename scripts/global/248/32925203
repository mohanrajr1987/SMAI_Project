<pre><code>#KNN use strict;  use warnings; use List::Util qw(shuffle);  my $fh; my $out; #Handle data by opening the file open ($fh,"irisdat.txt"); my @data = &lt;$fh&gt;; close ($fh); #open ($out,"&gt;result1.txt"); my @val1; #Split the data into training and test sets by regression foreach(@data) {     my @values = split(',', $_);     push (@val1,[@values]); } #Spliting into iris-setosa and iris-versi my @setosa = shuffle @val1[0..49]; my @versi = shuffle @val1[50..99];  #shuffling arrays setosa and versi and spliting them into trainset and testset my @trainset = (@setosa[0..39],@versi[0..39]); my @testset = (@setosa[40..49],@versi[40..49]);  my $k=3; my $set=0; my $versi=0; my $tp=0; my $tn=0;  my $fp=0; my $fn=0; foreach my $test(@testset) {     #calculate the distance with each of the train data point     foreach my $t(@trainset)     {         my $d=&amp;euclidist($test,$t);         $t-&gt;[5]=$d;     }      @trainset = sort{$a-&gt;[5]&lt;=&gt;$b-&gt;[5]}@trainset;      for(my $i=0; $i&lt;$k; $i++){         if ($trainset[$i]-&gt;[4] eq "Iris-setosa")         {             $set++;         }         else         {             $versi++;         }     }      $test-&gt;[5] = "Iris-setosa";     if($set &lt; $versi)     {         $test-&gt;[5] = "Iris-versicolor";         print "aeee\n";          if($test-&gt;[4] eq "Iris-setosa" &amp;&amp; $test-&gt;[5] eq "Iris-setosa")         {             $tp++;             print "afff\n";         }         elsif($test-&gt;[4] eq "Iris-setosa" &amp;&amp; $test-&gt;[5] eq "Iris-versicolor")         {             $fn++;             print "aggg\n";         }         elsif($test-&gt;[4] eq "Iris-versicolor" &amp;&amp; $test-&gt;[5] eq "Iris-setosa")         {             $fp++;             print "ahhhh\n";         }         elsif($test-&gt;[4] eq "Iris-versicolor" &amp;&amp; $test-&gt;[5] eq "Iris-versicolor")         {             $tn++;             print "aiiii\n";         }     }    } print "$tn\t, $fp\t, $tp\t, $fn\t";   sub euclidist  {     my $dist = 0;      for(my $i=0;$i&lt;4;$i++)     {         $dist += (($_[0]-&gt;[$i])- ($_[1]-&gt;[$i]))**2;      }     my $distfinal = sqrt $dist;     return($distfinal);  } </code></pre>  <p>This code is not working :/</p>