<p>I have a list of pencils and a list of erasers. The goal it to check whether or not all the erasers can be put on pencils. An eraser may fit on multiple different pencils. Pencils can have at most 1 eraser. </p>  <p>If I just loop through all the erasers and put them on pencils, I end up with erasers that fit no unoccupied pencils even though there is a solution that has all the erasers on pencils.</p>  <p>What algorithm could I use to figure out a combination that fits all the erasers on pencils?</p>  <pre><code>public class Eraser(){     public boolean matches(Pencil p){     //unimportant     } }  public class Pencil(){ } </code></pre>  <p>My attempt</p>  <pre><code>public boolean doMatch(List&lt;Eraser&gt; erasers, List&lt;Pencil&gt; pencils){ for (Eraser e : erasers) {         boolean found = false;         Iterator it = pencils.iterator();         while (it.hasNext()) {             Pencil p = (Pencil) it.next();             if (e.matches(p)) {                 found = true;                 it.remove();                 break;             }         }         if (!found) {             return false;         } } return true; } </code></pre>