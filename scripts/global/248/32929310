<p>I've been working on trying to adapt the game 'crozzle' to digital format. For those of you who don't know it is essentially a crossword game. My program takes a wordlist and based on difficulty it tries to calculate the best possible placement of words. However I can't seem to achieve that and thought that someone might be able to help out.Basically I want the most amount of words possible to archive the highest score.</p>  <pre><code>namespace CrozzleApplication {     public class CreateCrozzle     {         #region properties         public List&lt;String&gt; StartList;         public List&lt;String&gt; List;         public String[,] theGrid;         public List&lt;TemporaryCrozzle&gt; LastList;      const Int32 DOWN = 1;     const Int32 RIGHT = 2;     const Int32 UP = 3;     const Int32 LEFT = 4;      String lastword = "";     String pendingWord = "";     public int index1 = -1;     public static int Total = 0;      Int32 Horizon1 = 0, Horizon2 = 0;     Int32 Vertical1 = 0, Vertical2 = 0;     #endregion      #region create     /// &lt;summary&gt;     /// Creating the crozzle     /// &lt;/summary&gt;     /// &lt;param name="input"&gt;&lt;/param&gt;     public CreateCrozzle(List&lt;String&gt; input)     {         LastList = new List&lt;TemporaryCrozzle&gt;();         StartList = input;         List = input;         theGrid = new String[TemporaryCrozzle.MaxRow, TemporaryCrozzle.MaxColumn];          int i, j;         for (i = 0; i &lt; TemporaryCrozzle.MaxRow; i++)         {             for (j = 0; j &lt; TemporaryCrozzle.MaxColumn; j++)             {                 theGrid[i, j] = "";             }         }     }     #endregion      #region showgrid     /// &lt;summary&gt;     /// showing the grid     /// &lt;/summary&gt;     public void displayGrid()     {         Console.WriteLine("******************************************************");         int i, j;         for (i = 0; i &lt; TemporaryCrozzle.MaxRow; i++)         {             for (j = 0; j &lt; TemporaryCrozzle.MaxColumn; j++)             {                 if (theGrid[i, j].Equals(""))                 {                     Console.Write("-     ");                 }                 else Console.Write(theGrid[i, j] + "     ");             }             Console.WriteLine("");         }          Console.WriteLine("******************************************************");     }     #endregion      #region process     /// &lt;summary&gt;     /// Processing the crozzle creating and searching for the best crozzle to display as a final product     /// &lt;/summary&gt;     public void Process()     {         List = null;         List = new List&lt;string&gt;();         foreach (String ss in StartList)             List.Add(ss);          index1++;         if ((index1 + 1) &gt;= StartList.Count) return;          int i, j;         for (i = 0; i &lt; TemporaryCrozzle.MaxRow; i++)         {             for (j = 0; j &lt; TemporaryCrozzle.MaxColumn; j++)             {                 theGrid[i, j] = "";             }         }          if (index1 == List.Count) return;          Horizon1 = 0; Horizon2 = 0;         Vertical1 = 0; Vertical2 = 0;          lastword = List[index1];         pendingWord = List[index1];         putWord(List[index1], 0, 0, RIGHT);         List.Remove(List[index1]);         displayGrid();          if (FindinTheGridDown(lastword, 1, 0, 0))         {             displayGrid();             if (pendingWord.Length &lt;= 1)             {                 CrozzleFill();                 Process();                 return;             }              pendingWord = pendingWord.Remove(0, 1);              if (Vertical2 == Vertical1)             {                 if (!FindinTheGridRight(pendingWord, 1, Horizon2 + 2, Vertical2))                 {                     CrozzleFill();                     Process();                     return;                 }                 displayGrid();             }             else             {                 if (!FindinTheGridRight(pendingWord, Vertical2 - Vertical1 - 1, Horizon2 + 1, Vertical2))                 {                     CrozzleFill();                     Process();                     return;                 }                 displayGrid();             }         }         else         {             CrozzleFill();             Process();             return;         }          displayGrid();          if (pendingWord.Length &lt;= 1)         {             CrozzleFill();             Process();             return;         }          pendingWord = pendingWord.Remove(0, 1);          while (FindinTheGridDown(pendingWord, Horizon2 - Horizon1 - 1, Horizon2, Vertical2 + 2))         {             displayGrid();             if (pendingWord.Length &lt;= 1)             {                 CrozzleFill();                 Process();                 return;             }             pendingWord = pendingWord.Remove(0, 1);              if (!FindinTheGridRight(pendingWord, Vertical2 - Vertical1 - 1, Horizon2 + 2, Vertical2))             {                 CrozzleFill();                 Process();                 return;             }             displayGrid();              if (pendingWord.Length &lt;= 1)             {                 CrozzleFill();                 Process();                 return;             }             pendingWord = pendingWord.Remove(0, 1);         }         CrozzleFill();         Process();         return;      }     #endregion      #region putting word     /// &lt;summary&gt;     /// putting the words in the correct place     /// &lt;/summary&gt;     /// &lt;param name="word"&gt;length of the word&lt;/param&gt;     /// &lt;param name="r"&gt;r is represented by the row&lt;/param&gt;     /// &lt;param name="c"&gt;c is represented by the coloumn&lt;/param&gt;     /// &lt;param name="dir"&gt;dir is repsented by direction&lt;/param&gt;     private void putWord(String word, Int32 r, Int32 c, Int32 dir)     {         Int32 WordLength = word.Length;         int i;          if (dir == DOWN)         {             for (i = 0; i &lt; WordLength; i++) theGrid[i + r, c] = word[i].ToString();             Vertical1 = Vertical2;             Vertical2 = c;         }         if (dir == RIGHT)         {             for (i = 0; i &lt; WordLength; i++) theGrid[r, i + c] = word[i].ToString();             Horizon1 = Horizon2;             Horizon2 = r;         }         if (dir == UP)         {             for (i = 0; i &lt; WordLength; i++) theGrid[r - i, c] = word[i].ToString();         }         if (dir == LEFT)         {             for (i = 0; i &lt; WordLength; i++) theGrid[r, c - i] = word[i].ToString();         }         lastword = word;         List.Remove(word);     }     #endregion      #region can put the word     /// &lt;summary&gt;     /// Checking if the word can be put into the crozzle     /// &lt;/summary&gt;     /// &lt;param name="word"&gt;length of the word&lt;/param&gt;     /// &lt;param name="r"&gt;r is represented by the row&lt;/param&gt;     /// &lt;param name="c"&gt;c is represented by the coloumn&lt;/param&gt;     /// &lt;param name="dir"&gt;dir is repsented by direction&lt;/param&gt;     /// &lt;returns&gt;returns the crozzle&lt;/returns&gt;     private Boolean CanPutWord(String word, Int32 r, Int32 c, Int32 dir)     {         Int32 WordLength = word.Length;         Int32 MaxInteraction = 0;          if (dir == DOWN)         {             if (r + WordLength &gt; TemporaryCrozzle.MaxRow) return false;             int i;             for (i = 0; i &lt; WordLength; i++)             {                 if (theGrid[i + r, c] != "")                 {                     if (word[i] != theGrid[i + r, c][0]) return false;                     else                     {                         MaxInteraction++;                         pendingWord = word.Substring(i + 1, word.Length - i - 1);                         if (MaxInteraction == 2) return false;                     }                 }             }             return true;         }         else if (dir == RIGHT)         {             if (c + WordLength &gt; TemporaryCrozzle.MaxColumn) return false;             int i;             for (i = 0; i &lt; WordLength; i++)             {                 if (theGrid[r, i + c] != "")                 {                     if (word[i] != theGrid[r, i + c][0]) return false;                     else                     {                         MaxInteraction++;                         pendingWord = word.Substring(i + 1, word.Length - i - 1);                         if (MaxInteraction == 2) return false;                     }                 }             }             return true;          }         else if (dir == UP)         {              if (r &gt;= (WordLength - 1)) return false;             int i;             for (i = 0; i &lt; WordLength; i++)             {                 if (theGrid[r - i, c] != "")                 {                     if (word[i] != theGrid[i + r, c][0]) return false;                     else                     {                         MaxInteraction++;                         if (MaxInteraction == 2) return false;                     }                 }             }              return true;          }         else if (dir == LEFT)         {          }          return false;     }     #endregion      #region the grid down     /// &lt;summary&gt;     /// checking the crozzle step by step to identify the word     /// &lt;/summary&gt;     /// &lt;param name="characters"&gt;represents the letters&lt;/param&gt;     /// &lt;param name="TopSpaces"&gt;checks the top of the crozzle&lt;/param&gt;     /// &lt;param name="StartRow"&gt;checks the start of the row in the crozzle&lt;/param&gt;     /// &lt;param name="StartCol"&gt;check the start of the coloumn in the crozzle&lt;/param&gt;     /// &lt;returns&gt;&lt;/returns&gt;     private Boolean FindinTheGridDown(String characters, Int32 TopSpaces, Int32 StartRow, Int32 StartCol)     {         try         {             String WordTop = "";             foreach (String s in List)             {                 WordTop = s.Substring(0, TopSpaces);                 int i, j;                  for (i = 0; i &lt; WordTop.Length; i++)                     for (j = 0; j &lt; characters.Length; j++)                     {                         if (characters[j] == WordTop[i])                         {                             if (CanPutWord(s, StartRow - i, StartCol + j, DOWN))                             {                                 putWord(s, StartRow - i, StartCol + j, DOWN);                                 Total++;                                 return true;                             }                         }                     }              }             return false;         }         catch (Exception e)         {             CrozzleFill();             return false;         }     }     #endregion      #region finding the grid right     /// &lt;summary&gt;     /// checking the crozzle step by step to identify the word     /// &lt;/summary&gt;     /// &lt;param name="characters"&gt;represents the letters&lt;/param&gt;     /// &lt;param name="TopSpaces"&gt;checks the top of the crozzle&lt;/param&gt;     /// &lt;param name="StartRow"&gt;checks the start of the row in the crozzle&lt;/param&gt;     /// &lt;param name="StartCol"&gt;check the start of the coloumn in the crozzle&lt;/param&gt;     /// &lt;returns&gt;&lt;/returns&gt;     private Boolean FindinTheGridRight(String characters, Int32 LeftSpaces, Int32 StartRow, Int32 StartCol)     {         try         {             String WordTop = "";             foreach (String s in List)             {                 WordTop = s.Substring(0, LeftSpaces);                 int i, j;                  for (i = 0; i &lt; WordTop.Length; i++)                     for (j = 0; j &lt; characters.Length; j++)                     {                         if (characters[j] == WordTop[i])                         {                             if (CanPutWord(s, StartRow + j, StartCol - i, RIGHT))                             {                                 putWord(s, StartRow + j, StartCol - i, RIGHT);                                 Total++;                                 return true;                             }                         }                     }              }         }         catch (Exception e)         {             CrozzleFill();             return false;         }         return false;     }     #endregion      #region fill     /// &lt;summary&gt;     /// filling in the crozzle     /// &lt;/summary&gt;     public void CrozzleFill()     {         TemporaryCrozzle temp = new TemporaryCrozzle(theGrid, TemporaryCrozzle.MaxRow, TemporaryCrozzle.MaxColumn);         if (temp.isValidCrozzle())         {             LastList.Add(temp);             CreateCSV(temp);         }     }     #endregion      #region create csv     /// &lt;summary&gt;     /// Creates a csv once the grid is shown     /// &lt;/summary&gt;     /// &lt;param name="write"&gt;write into a csv file&lt;/param&gt;     public void CreateCSV(TemporaryCrozzle write)     {         if (!Directory.Exists(Path.GetDirectoryName(Application.ExecutablePath) + "\\CreatedCrozzle"))         {             Directory.CreateDirectory(Path.GetDirectoryName(Application.ExecutablePath) + "\\CreatedCrozzles");         }         String csvpath;         String Line = "";         int i, j;          csvpath = Path.GetDirectoryName(Application.ExecutablePath) + "\\CreatedCrozzles\\" + write.index + ".txt";         using (System.IO.StreamWriter file = new System.IO.StreamWriter(csvpath, true))         {             Console.WriteLine("******************************************************");             //file.WriteLine("******************************************************");              for (i = 0; i &lt; TemporaryCrozzle.MaxRow; i++)             {                 for (j = 0; j &lt; TemporaryCrozzle.MaxColumn; j++)                 {                     if (theGrid[i, j].Equals(""))                     {                         Console.Write("-     ");                         file.Write(" ");                     }                     else                     {                         Console.Write(theGrid[i, j] + "     ");                         file.Write(theGrid[i, j]);                     }                 }                 Console.WriteLine("");                 file.WriteLine("");              }              Console.WriteLine("******************************************************");          }     }     #endregion } </code></pre>  <p>Cheers. Let me know what you guys think.</p>