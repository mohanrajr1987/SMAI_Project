<p>Incorrect code to check if a word can be made of smaller given words (word break).This is the code I wrote for the above mentioned problem, however an online judge declares it as incorrect, what could be the possible reasons? And how should I modify my code?</p>  <pre><code>#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;string.h&gt;  /* Node structure */ typedef struct node {     int letter[26];     struct node* next[26];     int is_word; } node;   /* Create node   */ node* getnode(void) {     node* p = malloc(sizeof(node));     int i;     for (i = 0; i &lt; 1004; i++) {         p-&gt;letter[i] = 0;         p-&gt;next[i] = NULL;     }     p-&gt;is_word = 0;      return p; }  /* make dictionary  */ void fill_dictionary(char word[], node* start) {     int len = strlen(word), i;     node* temp = start;      for (i = 0; i &lt; len; i++) {         if (temp-&gt;letter[word[i] % 'a'] == 0) {             temp-&gt;letter[word[i] % 'a'] = 1;             temp-&gt;next[word[i] % 'a'] = getnode();             temp = temp-&gt;next[word[i] % 'a'];         } else {             temp = temp-&gt;next[word[i] % 'a'];         }     }      temp-&gt;is_word = 1;     return; }  int spell_check(char line[100003], node* start) {     int len = strlen(line), i, flag = 0;     node* temp = start;      for (i = 0; i &lt; len; i++) {         if (temp-&gt;letter[line[i] % 'a'] == 0) {             return 1;         } else {             temp = temp-&gt;next[line[i] % 'a'];             flag = 0;              if (temp-&gt;is_word == 1) {                 flag = 1;                 temp = start;             }         }     }      if (flag == 1) {         return 0;     } else {         return 1;     } }  int main(void) {     int n, i, ans, m;     scanf("%d %d", &amp;n,&amp;m);  // no. of words in dictionary     node* start = getnode();      for (i = 0; i &lt; n; i++) {         char word[11];      // max length of dictionary word         scanf("%s", word);         fill_dictionary(word, start);     }      scanf("%d", &amp;n);        // no. of lines to be checked      for (i = 0; i &lt; n; i++) {         char line[100003];  // max length of a line         scanf("%s", line);         ans = spell_check(line, start);          if (ans == 0) {             printf("YES\n");         } else {             printf("NO\n");         }     }      return 0; } </code></pre>