<h2>manager.rb (model)</h2>  <pre><code>class Manager &lt; ActiveRecord::Base   belongs_to :player   belongs_to :season   belongs_to :team    before_validation :validate_relations    validates :player_id, presence: true   validates :season_id, presence: true   validates :team_id, presence: true    private    def validate_relations     player = Player.find(self.player_id)     season = Season.find(self.season_id)     team = Team.find(self.team_id)      manager = Manager.find_by(player: player, season: season, team: team)      if !manager.nil? &amp;&amp; self.id != manager.id       errors[:manager] &lt;&lt; 'already exists.'       false     end   end end </code></pre>  <h2>managers_controller.rb (controller)</h2>  <pre><code>class ManagersController &lt; ApplicationController   before_action :get_manager, only: [:destroy, :show, :update]   rescue_from ActionController::ParameterMissing, with: :malformed_request   rescue_from ActiveRecord::RecordNotFound, with: :record_not_found    def create     @manager = Manager.create(manager_params)     status = @manager.valid? ? :no_content : :unprocessable_entity      render_manager status   end    ...    private    def manager_params     params.require(:manager).permit(:player_id, :season_id, :team_id, :league_id)   end    def malformed_request     render_manager :unprocessable_entity, 'Error message'   end    def record_not_found     render_manager :not_found, 'Error message'   end    def get_manager     @manager = Manager.includes(:player, :season, :team).find(params[:id])   end    def render_manager(status, message = nil)     ...   end    def render_managers(status, managers)     ...   end end </code></pre>  <p>As you see, my <code>managers_controller</code> rescues from <code>ActiveRecord::RecordNotFound</code> and takes care of responses accordingly when the client tries to create invalid associates ids. This works great when the request and the response were explicitly given but when I do <code>rake test</code>, the test with the invalid associates ids (for example when all the ids are <code>nil</code>) always ends with 3 errors stating that rails couldn't find each Model with the given id as below.</p>  <pre><code>  1) Error: ManagerTest#test_: Manager should require player_id to be set. : ActiveRecord::RecordNotFound: Couldn't find Player with 'id'=     app/models/manager.rb:35:in `validate_relations'     2) Error: ManagerTest#test_: Manager should require season_id to be set. : ActiveRecord::RecordNotFound: Couldn't find Player with 'id'=     app/models/manager.rb:35:in `validate_relations'     3) Error: ManagerTest#test_: Manager should require team_id to be set. : ActiveRecord::RecordNotFound: Couldn't find Player with 'id'=     app/models/manager.rb:35:in `validate_relations' </code></pre>  <p>How can I re-design the test, or model validation, or error handling to avoid these errors?</p>