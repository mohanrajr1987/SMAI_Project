<p>We've created a new control which is radiolist with an extra input.</p>  <p>This all renders and binds fine, however when coming to the [Required] validation, it becomes a problem.</p>  <p>It appears that Angular.js and Formly.js aren't playing nice as the field object is no longer a single object but now an array, which results in the [required] always failing.</p>  <p>I've tried to override the required in the defaultOptions, however the validation doesn't fire, and it's always valid.</p>  <p>Pointers?</p>  <p>FormlyBlock</p>  <pre><code>(function () {     'use strict';      angular         .module('blocks.formly')         .run(config);      config.$inject = ['formlyConfig'];      function config(formlyConfig) {         formlyConfig.setType({             name: 'radioListInput',             templateUrl: 'app/blocks/formly/formControls/templates/radioListInput.html',             controller: 'RadioListInputController'         });     } }()); </code></pre>  <p>Template</p>  <pre><code>&lt;label ng-show="options.templateOptions.label !== undefined" for="{{::id}}"&gt;     {{::options.templateOptions.label}} &lt;/label&gt;  &lt;section class="TickBox" ng-repeat="(key, option) in options.templateOptions.options"&gt;     &lt;div class="CheckboxWrapper" for="{{id}}"&gt;         &lt;input type="radio" ng-click="boxSelected(option)" id="{{id + '_'+ $index}}" ng-value=option.value                ng-model=model[options.key]&gt;          &lt;label for="{{id + '_'+ $index}}"&gt;            &lt;span class="radio-text"&gt;            {{option.label}}            &lt;input ng-show="disableTextBox(option.textInputKey, option.value)"                                  type="text" ng-model="model[option.textInputKey]"/&gt;             &lt;/span&gt;         &lt;/label&gt;      &lt;/div&gt; &lt;/section&gt; </code></pre>