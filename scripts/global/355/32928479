<p>I'm familiar with the concepts of MVVM and have used MvvmCross, but am trying out ReactiveUI and trying to wrap my head around some concepts.</p>  <p>I'm writing a tool in WPF (maybe branching to other frameworks) for designers to create and edit data files that are then used by another end-user program. I have a <code>ViewModel</code> that represents a <code>DataModel</code> document and want to perform validation on the data to inform the designers of any potentially breaking behavior. The underlying classes look like this:</p>  <pre><code>public class DataModel {     // member data here      public void Validate(Validator validator)     {         // perform specific complex validation here and add errors to validator     } }  // aggregator for validation errors public class Validator {     public IList&lt;Error&gt; Errors { get; } } </code></pre>  <p>The <code>ViewModel</code> should have a <code>ReactiveCommand Validate</code> that the <code>View</code> can bind to a button, but once it's done, I want to display a dialog to the user showing the validation errors or that none were found. Is there a direct way to pass <code>Validator.Errors</code> back to the <code>View</code>, or would I have to create an <code>IObservable</code> or <code>ReactiveList</code> property for the <code>View</code> to subscribe?</p>  <p>Similarly, I would like to have a save function that first performs validation. If no validation errors are found, it saves the <code>DataModel</code> to file. If errors are found, the <code>View</code> should inform the user and get confirmation before saving. What's the ReactiveUI way of handling this feedback loop of:</p>  <p>Execute <code>Save</code> Command -> validation (possibly call <code>Validate</code> command?) -> if errors then request confirmation from <code>View</code> -> save on confirmation or do nothing</p>