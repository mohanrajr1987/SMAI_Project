<p>First of all, I believe there must be some people, who already asked this question before but I don't know how can I google this problem. So, if it is duplicate I am sorry.</p>  <p>I am working on a social media site. I have user model, which I use to register users to the site. It validates, name, email, and password when registering.</p>  <p>I use the same model to make users edit their informations, like username. </p>  <p>This is what I have in my update controller:</p>  <pre><code>  def update     # Find an existing object using form parameters     @profile = User.find_by_id(current_user.id)     # Update the object     if @profile.update_attributes!(settings_profile_params)       # If save succeeds, redirect to itself       redirect_to request.referrer     else       # If save fails, redisplay the form so user can fix the problems       render('edit')     end   end    private # user_params is not an action, that is why it is private.   def settings_profile_params     params.require(:user).permit(:first_name, :last_name, :username, :school, :program, :website, :information)   end </code></pre>  <p>The problem is, I only want to update strong parameters that I defined there. But I am getting an exception because of password validation. I don't know why am I getting this exception. How can I set up system to update the values in strong parameter only.</p>  <p>Thank you.</p>  <p><strong>Edit</strong></p>  <p><em>User Model</em></p>  <pre><code>class User &lt; ActiveRecord::Base   has_secure_password validations: false   has_attached_file :photo    has_many :friendships   has_many :friends, -&gt; { where(friendships: {status: 'accepted'}).order('created_at') }, :through =&gt; :friendships   has_many :requested_friends, -&gt; { where(friendships: {status: 'requested'}).order('created_at') }, :through =&gt; :friendships, :source =&gt; :friend   has_many :pending_friends, -&gt; { where(friendships: {status: 'pending'}).order('created_at') }, :through =&gt; :friendships, :source =&gt; :friend    before_create {generate_token(:authorization_token)}    def generate_token(column)     begin       self[column] = SecureRandom.urlsafe_base64     end while User.exists?(column =&gt; self[column])   end    EMAIL_REGEX = /\A^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$\z/   # Matches -&gt; he_llo@worl.d.com  hel.l-o@wor-ld.museum  h1ello@123.com   # Non-Matches -&gt; hello@worl_d.com  he&amp;amp;llo@world.co1  .hello@wor#.co.uk   # http://regexlib.com/REDetails.aspx?regexp_id=333    ALL_LETTERS_REGEX = /\A^([a-zA-Z]+\s?)*$\z/    # First Name   validates :first_name,             :presence =&gt; {:message =&gt; 'First name cannot be blank'},             :length =&gt; {:maximum =&gt; 50, :message =&gt; 'First name cannot be longer than 50 characters'},             :format =&gt; {:with =&gt; ALL_LETTERS_REGEX, :message =&gt; 'First name should contain only letters and space'}    # Last Name   validates :last_name,             :presence =&gt; {:message =&gt; 'Last name cannot be blank'},             :length =&gt; {:maximum =&gt; 50, :message =&gt; 'Last name cannot be longer than 50 characters'},             :format =&gt; {:with =&gt; ALL_LETTERS_REGEX, :message =&gt; 'Last name should contain only letters and space'}    # Email   validates :email,             :presence =&gt; {:message =&gt; 'Email cannot be blank'},             :length =&gt; {:maximum =&gt; 100, :message =&gt; 'Email cannot be longer than 99 characters'},             :format =&gt; {:with =&gt; EMAIL_REGEX, :message =&gt; 'Email is not valid'},             :uniqueness =&gt; {:case_sensitive =&gt; false, :message =&gt; 'This email is already registered'},             :confirmation =&gt; {:message =&gt; 'Email address does not match'}    # Password   validates :password,             :presence =&gt; {:message =&gt; 'Password cannot be blank'},             :length =&gt; {:within =&gt; 8..99, :message =&gt; 'Password length should be within 8 and 99 characters'}  end </code></pre>