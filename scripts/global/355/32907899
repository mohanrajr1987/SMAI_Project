<p>I define a one to many relationship. A customer can have many orders but an order can belong to only one customer. An order can have many itemcodes but an item code can only belong to one order. An order has a required field: <code>DateCreated</code>. And an Item with itemcode has a required field, <code>ItemName</code>. From <a href="http://stackoverflow.com/q/25576459/807223">HERE</a> I understand the use of custom validators in breeze.</p>  <p>But say I create a customer entity with multiple orders. I then add another order with a null <code>DateCreated</code> field, thus making this entity invalid. If i try to validate the customer entity using <code>customer.entityAspect.validateEntity()</code>, should breeze be able to validate each item in the orders and result that the customer entity is invalid because it has an order with no <code>DateCreated</code>?</p>  <p>Similarly if I add an item to an order with no <code>ItemName</code>, will breeze still determine that the customer is invalid because it contains an order with one item lacking an item name? That is, will breeze validate any depth of nested relationships?</p>  <p>I have been trying this for a while but to no avail. Collections defined in EF are not just validated when I use <code>entity.entityAspect.validateEntity()</code>, but the validation fails when I try saving. If I try validating the order entity itself ('order.entityAspect.validateEntity()') or the Item Entity itself (<code>item.entityAspect.validateEntity()</code>), the validation works fine. I just does not when I try validating the parent entity: customer(<code>customer.entityAspect.validateEntity()</code>). I am wondering if this is normal or I am doing something wrong. Should this validation be handled using custom validators?</p>