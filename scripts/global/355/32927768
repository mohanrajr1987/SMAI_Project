<p>I need to validate object created from HTTP request and use own request resolver. Problem is that validation constraints in domain object are not processed when I use own <code>HandlerMethodArgumentResolver</code> and <code>org.springframework.validation.Validator</code>.</p>  <p><strong>Validator class</strong></p>  <pre><code>@Component public class AuthorizationRequestValidator implements Validator {      private static Logger LOG = Logger.getLogger(AuthorizationRequestValidator.class);      public boolean supports(Class clazz) {         return AuthorizationRequest.class.equals(clazz);     }      public void validate(Object obj, Errors e) {         AuthorizationRequest request = (AuthorizationRequest) obj;         if ("foobar".equals(request.getClientId())) {             e.rejectValue("clientId", "nomatch");         }     }  } </code></pre>  <p><strong>Controller</strong></p>  <pre><code>@RequestMapping(value = "/authorize", method = {RequestMethod.GET, RequestMethod.POST})     public String authorize(@Valid AuthorizationRequest authorizationRequest) {          BindingResult result = new BeanPropertyBindingResult(authorizationRequest, "request");             AuthorizationRequestValidator validator = new AuthorizationRequestValidator();         validator.validate(authorizationRequest, result); // the rest omitted... } </code></pre>  <p><strong>Resolver class</strong></p>  <pre><code>public class AuthorizationRequestResolver implements HandlerMethodArgumentResolver {      private static Logger LOG = Logger.getLogger(AuthorizationRequestResolver.class);      @Override     public boolean supportsParameter(MethodParameter parameter) {         return parameter.getParameterType().equals(AuthorizationRequest.class);     }      @Override     public Object resolveArgument(MethodParameter parameter,                                   ModelAndViewContainer mavContainer,                                   NativeWebRequest webRequest,                                   WebDataBinderFactory binderFactory) throws Exception {          HttpServletRequest request = (HttpServletRequest) webRequest.getNativeRequest();          AuthorizationRequest authRequest = mapFromServletRequest(request);         return authRequest;      }      private AuthorizationRequest mapFromServletRequest(HttpServletRequest request) {         AuthorizationRequest authorizationRequest = new AuthorizationRequest();         authorizationRequest.setClientId(request.getParameter("client_id"));         authorizationRequest.setRedirectUri(request.getParameter("request_uri"));         authorizationRequest.setResponseType(request.getParameter("response_type"));         authorizationRequest.setScope(request.getParameter("scope"));         authorizationRequest.setState(request.getParameter("state"));         return authorizationRequest;     }  } </code></pre>  <p><strong>Pojo class</strong></p>  <pre><code>public class AuthorizationRequest {      @NotEmpty     @JsonProperty("response_type")     private String responseType;      @NotEmpty     @JsonProperty("client_id")     private String clientId;      @NotEmpty     @JsonProperty("redirect_uri")     private String redirectUri; // the rest omitted... } </code></pre>  <p><strong>Problem</strong></p>  <p>This combination (Validator / Resolver) doesn't work, only validation that is activated is from <code>AuthorizationRequestValidator</code> and constraints from pojo file are not processed.</p>  <blockquote>   <p>fieldErrorResource=FieldErrorResource{resource='request',   field='clientId', code='nomatch', message='null'}</p> </blockquote>