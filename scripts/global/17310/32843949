<p>I have a problem with my code. I want to load a dictionary which works fine with a small one. But when i try to load the larger version, my while loop stops at the 701th word which is " acclimatization" and then the programs continues. I searched a lot on forums and tried a lot of things, but i just can't find the reason this is caused. Does anyone have an idea of how this occurs?</p>  <p>Dictionary.c</p>  <pre><code>bool load(const char* dictionary) { // reserve space for word char* word = malloc(sizeof(char*));  // open file FILE* dict = fopen(dictionary, "r");  if (dict == NULL) {     fclose(dict);     fprintf(dict, "Could not load %s.\n", dictionary);     return 1; }  root = (struct node *) malloc(sizeof(struct node)); root-&gt;is_word = false;  //Loops over word aslong the EOF is not reached while (fgets(word,LENGTH,dict) != NULL) {         printf("word = %s\n", word);         int word_length = strlen(word) -1;         node* current = root;         word_count++;         //Loops over letters         for (int i = 0; i &lt; word_length; i++)         {             int index;             node *next_node;             // checks if letter isnt a apostrophe             if(word[i] == 39)             {                 index = MAX_CHARS - 1;             }             // gets nummeric value of letter             else             {                 index = tolower(word[i]) - 'a';             }               next_node = current-&gt;children[index];              // creates new node if letter didnt exists before             if(next_node == NULL)             {                 next_node = malloc(sizeof(node));                 current-&gt;children[index] = next_node;                 current-&gt;is_word = false;                 printf("new letter: %c\n", word[i]);             }             else             {                 printf("letter: %c\n", word[i]);             }             // checks for end of the word             if(i == word_length - 1)             {                 next_node-&gt;is_word = true;             }             current = next_node;         }    } return true; } </code></pre>  <p>The node is defined by:</p>  <pre><code>// node  typedef struct node {     bool is_word;     struct node* children[27]; } node; </code></pre>