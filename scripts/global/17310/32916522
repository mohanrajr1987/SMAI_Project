<p>As a time complexity example (refreshing my mind) I am attempting to solve find the running time (in terms on n) of the following algorithm:</p>  <pre><code>for (i=1; i &lt;= n; i++) {      //O(n)   k = 1;   for (j=1; j &lt;= i; j++) {    //O(n)     k = 2*k;   }   j = k*k;   while (j &gt; 1) {             //O(..?)     j = j / 2;   } } </code></pre>  <p>I understand the first two for loops combined take O(n^2), however I am a little perplexed at how to find the running time of a while loop.  Although I know the while loop runs twice the first execution, then 4 times, then 6... all multiples of 2.  Would that just make it run O(nlog(n)) times?</p>