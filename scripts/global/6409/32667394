<p>I am currently trying to extend my own little framework for WordPress-themes by a "notification" module. This is not supposed to replace exceptions - even though the concept might be similar. Since I am trying to write the framework object-oriented and am still new to this whole concept, I ran into a problem which I can't figure out how to solve.</p>  <p><strong>The following code</strong> declares an abstract notification class with a constructor requesting notification-title and -message. Afterwards, the constructor adds the member method <code>show()</code> to the wordpress action stack. Since the user and the rest of the framework-code should not pass the type of the notification as a parameter, I created four classes for every notification type, extending the notification class. Those child classes don't need to overwrite the whole method of showing the notification, they only need to change the <code>type</code> property of the class they are extending. The base functionality works, so the notifications are shown on my page.</p>  <p><strong>The problem is:</strong> The <code>type</code> property is empty, when <code>show()</code> is called on the page-footer by WordPress' <code>do_action( 'ease_notifications' );</code>. I found out, that propertys are not set before the constructor is called (which really makes sense somehow...). Anyway, the method using the <code>type</code> property is <code>show()</code>, and this method is called long after the class has been constructed. So theoretically, the property should have been set by then. Can you explain to me why it isn't?</p>  <pre><code>abstract class EaseNotification {     private $type;     private $title;     private $message;      public function __construct( $title, $message )     {         $this-&gt;title = $title;         $this-&gt;message = $message;         add_action( 'ease_notifications', array(&amp;$this, 'show') );     }      public function show()     {         echo '&lt;div class="ease-notification type-' . $this-&gt;type . '"&gt;'            . '&lt;span class="ease-notification-title"&gt;' . $this-&gt;title . '&lt;/span&gt;'            . '&lt;p class="ease-notification-body"&gt;' . $this-&gt;message . '&lt;/p&gt;'            . '&lt;/div&gt;';     } }  class EaseError extends EaseNotification { private $type = "error"; } class EaseWarning extends EaseNotification { private $type = "warning"; } class EaseInformation extends EaseNotification { private $type = "information"; } class EaseConfirmation extends EaseNotification { private $type = "confirmation"; } </code></pre>  <p>Usage of the notification class:</p>  <pre><code>require_once( 'class.easenotification.php' );  new EaseConfirmation( 'Hurray', 'It works, so you can be very happy.' ); </code></pre>