<p>I have a custom walker class that I am using to display all parent menu items in one horizontal row.</p>  <p>When clicked on any of parent menu item, all child items of that parent show in the bottom row.</p>  <p>This works great for 2 levels only. Parent - > Child</p>  <p>I need to add a 3rd row for 3rd level of child menu items. </p>  <p>Parent - > Child -> Child</p>  <p>So when you click on parent, it should display its child . when you click on child .. it should display its own child items if present.</p>  <pre><code>class My_Custom_Walker extends Walker_Nav_Menu {    function walk( $elements, $max_depth) {      global $wp_query;     $current_page = (int) $wp_query-&gt;queried_object_id;      $tops = array(); // top level menu items     $subs = array(); // sub menu items      _wp_menu_item_classes_by_context($elements);      foreach ($elements as $element) {       if (0 == $element-&gt;menu_item_parent) {         $tops[] = $element;         if ($element-&gt;object_id == $current_page) {           $current_parent = $element;         }       }       else       {         $subs[] = $element;          if ($element-&gt;object_id == $current_page) {           $current_child = $element;         }       }     }      if (!$current_parent)        $current_parent = $this-&gt;get_current_parent_from_sub($elements, $current_child);      if ($current_parent) {       $real_subs = array();        foreach ($subs as $item) {         if ($item-&gt;menu_item_parent == $current_parent-&gt;db_id)           $real_subs[] = $item;       }     }      // show top level elements      $s = '&lt;li&gt;&lt;ul id="top-menu"&gt;';      foreach ($tops as $item) {       $s .= $this-&gt;display_item($item);     }      $s .= "&lt;/ul&gt;&lt;/li&gt;";      // show sub menu items      if (sizeof($real_subs) &gt; 0) {       $s .= "&lt;ul id='sub-menu'&gt;";       foreach ($real_subs as $item) {         $s .= $this-&gt;display_item($item);       }       $s .= '&lt;/ul&gt;';     }     return $s;   }    // get the parent page when a sub page is the current page    function get_current_parent_from_sub($elements, $current_child) {      foreach ($elements as $element) {       if ($element-&gt;db_id == $current_child-&gt;menu_item_parent) {         return $element;       }     }     return false;   }    function display_item($item) {      $i = '';     $this-&gt;start_el( $i, $item, 0, array() );     $this-&gt;end_el( $i, $item, 0, array() );      return $i;    } } </code></pre>