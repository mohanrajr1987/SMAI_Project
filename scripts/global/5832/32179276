<p>I am trying to implement a syntax highlighter for markdown for my project in PySide. The <a href="https://github.com/baudren/NoteOrganiser/blob/devel/noteorganiser/syntax.py" rel="nofollow">current code</a> covers the basic, with bold, italic, code blocks, and some custom tags. Below is an extract of the relevant part of the current code.</p>  <p>What is blocking me right now is how to implement the highlighting for titles (underlined with <code>===</code>, for the main title, or <code>---</code> for sub-titles). The method that is used by Qt/PySide to highlight the text is <a href="http://doc.qt.io/qt-4.8/qsyntaxhighlighter.html#highlightBlock" rel="nofollow">highlightBlock</a>, which processes only one line at a time.</p>  <pre><code>class MySyntaxHighlighter(QtGui.QSyntaxHighlighter):     def highlightBlock(self, text):         # do something with this line of text         self.setCurrentBlockState(0)         startIndex = 0         if self.previousBlockState() != 1:             startIndex = self.blockStartExpression.indexIn(text)          while startIndex &gt;= 0:             endIndex = self.blockEndExpression.indexIn(                 text, startIndex)             ... </code></pre>  <p>There is a way to recover the <code>previousBlockState</code>, which is useful when a block has a defined start (for instance, the <code>~~~</code> syntax at the beginning of a code-block). Unfortunately, there is nothing that defines the start of a title, except for the underlining with <code>===</code> or <code>---</code> that take place on the next line. All the examples I found only handle cases where there is a defined start of the expression, and so that the <code>previousBlockState</code> gives you an information (as in the example above).</p>  <p>The question is then: <strong>is there a way to recover the text of the next line, inside the highlightBlock</strong>? To perform a look-ahead, in some sense.</p>  <p>I though about recovering the document currently being worked on, and find the current block in the document, then find the next line and make the regular expression check on this. This would however break if there is a line in the document that has the exact same wording as the title. Plus, it would become quite slow to systematically do this for all lines in the document. Thanks in advance for any suggestion.</p>