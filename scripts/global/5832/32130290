<p>I'm working on a program that only needs to use SDL to get screen resolutions when needed. I'd like to start the SDL init, get what I need, then close it. But I'm having trouble because when I start the SDL is takes over the single interrupt handle, I can't even set it to SIG_IGN...</p>  <p>I have a <code>main</code> method that creates a <code>QApplication</code> and a <code>mainWidget</code>.</p>  <p>While running, a function in the <code>mainWidget</code> starts an SDL instance using the following code:</p>  <pre><code>bool MainWidget::getSomeSdlInformation() {     SDL_SetHint(SDL_HINT_RENDER_DRIVER, "software");     SDL_SetMainReady();     SDL_Init(0);     if (SDL_Init(SDL_INIT_VIDEO) != 0)     {         qDebug() &lt;&lt; "SDL_Init failed: " &lt;&lt; QString::fromUtf8(SDL_GetError());         SDL_Quit();         return false;     }     signal(SIGINT, SIG_DFL);     // Get the needed video information     // Quit SDL    SDL_Quit();    return true; } </code></pre>  <p>After I "Quit SDL" I'd like to return the csignal interrupt back to QT, such that when a user presses control-c the program closes gracefully.</p>  <p>I'm having some trouble figuring our how to return control of the handle back to QT.</p>  <p>Here is an a crash log from preforming the control-c operation on my existing implementation:</p>  <pre><code>Program received signal SIGSEGV, Segmentation fault. __GI___pthread_mutex_lock (mutex=0x7fffffffd2f0) at ../nptl/pthread_mutex_lock.c:66  66  ../nptl/pthread_mutex_lock.c: No such file or directory. </code></pre>  <p>(gdb) bt</p>  <pre><code>#0  __GI___pthread_mutex_lock (mutex=0x7fffffffd2f0) at ../nptl/pthread_mutex_lock.c:66  #1  0x00007ffff48070da in XrmQGetResource () from /usr/lib/x86_64-linux-gnu/libX11.so.6  #2  0x00007ffff47e4a42 in XGetDefault () from /usr/lib/x86_64-linux-gnu/libX11.so.6  #3  0x00007ffff43ab0d0 in _XcursorGetDisplayInfo () from /usr/lib/x86_64-linux-gnu/libXcursor.so.1  #4  0x00007ffff43ab1a9 in XcursorGetDefaultSize () from /usr/lib/x86_64-linux-gnu/libXcursor.so.1  #5  0x00007ffff43ad435 in XcursorLibraryLoadCursor () from /usr/lib/x86_64-linux-gnu/libXcursor.so.1  #6  0x00007ffff706ed5c in ?? () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4  #7  0x00007ffff706f485 in QCursor::handle() const () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4  #8  0x00007ffff707b364 in ?? () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4  #9  0x00007ffff7080398 in QWidgetPrivate::create_sys(unsigned long, bool, bool) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4  #10 0x00007ffff703231d in QWidget::create(unsigned long, bool, bool) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4  #11 0x00007ffff703a86a in QWidget::setVisible(bool) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4  #12 0x0000000000421270 in show (this=0x7fffffffda60) at /usr/include/qt4/QtGui/qwidget.h:497  #13 main (argc=1, argv=) at /home/jeff/Dev/openmw/apps/launcher/main.cpp:55 </code></pre>