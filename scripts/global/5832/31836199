<p>I want to store the name of a signal or slot to a container so that I can retrieve it and make connections to it.</p>  <p>One way to do it is to <a href="http://stackoverflow.com/questions/5880763/qt-signal-slot-macro-declaration">hack the SIGNAL/SLOT macro</a> and store the signal/slot's name as strings, and then use the the <a href="http://doc.qt.io/qt-4.8/qobject.html#connect" rel="nofollow">old connect syntax</a> to make the connection like this</p>  <pre><code>void connect(QObject *dst, QString slot) {     connect(this, SIGNAL(foo(void)), dst, slot.toLocal8Bit().data());     // void foo(void) is a member signal of "this" and is known      // at compile time     // but "dst" and "slot" are not known until runtime. } </code></pre>  <p>However this seems a little too hacky to me.</p>  <p>I know there is <a href="http://doc.qt.io/qt-4.8/qobject.html#connect-2" rel="nofollow">another syntax for connect</a> and there is also <a href="http://doc.qt.io/qt-4.8/qmetamethod.html" rel="nofollow">an object type for signal/slots</a>, which implies a different and (potentially) less hacky solution. (note that this is not the <a href="http://doc.qt.io/qt-5/qobject.html#connect-4" rel="nofollow">new signal/slot syntax in Qt5</a>)</p>  <p>But the problem is, <code>QMetaMethod</code> does not have a documented constructor, not does it seems to be copy-constructable.</p>  <p>A further question, how do you make connections when the names of signal/slots are dynamic?</p>  <p>For my coding environment is Qt4 and gcc 4.3.3 with <code>gnu++98</code>, so solutions that require Qt5 and C++11 although are welcome, are less useful to me.</p>