<p>I need a python script to take a screenshot of a webpage. I have the following code that works well:</p>  <pre><code>class Screenshot(QWebView): def __init__(self):     self.app = QApplication(sys.argv)     QWebView.__init__(self)     self._loaded = False     self.loadFinished.connect(self._loadFinished)  def capture(self, url, output_file):     self.load(QUrl(url))     self.wait_load()      # set to webpage size     frame = self.page().mainFrame()     self.page().setViewportSize(QSize(900,1600))      # render image     image = QImage(self.page().viewportSize(), QImage.Format_ARGB32)     painter = QPainter(image)     frame.render(painter)     painter.end()     print 'saving', output_file     image.save(output_file)  def wait_load(self, delay=0):     # process app events until page loaded      while not self._loaded:          self.app.processEvents()         time.sleep(delay)     self._loaded = False  def _loadFinished(self, result):     self._loaded = True </code></pre>  <p>However the screenshot is taken immediately after the page loads, the pages i am trying to screenshot have a JS interface that takes about 20 seconds to load everything (Large graphs). How would I delay the browser?</p>  <p>I know I can't do this with time.sleep() as it freezes the thread including the web browser, resulting the same image, so I know i need to use a QTimer() but I have tried the following but it doesn't work:</p>  <pre><code>class Screenshot(QWebView): def __init__(self):     self.app = QApplication(sys.argv)     QWebView.__init__(self)  def capture(self, url, output_file):      self._file = output_file     # set to webpage size     frame = self.page().mainFrame()     self.page().setViewportSize(QSize(900,1600))      self.timerScreen = QTimer()     self.timerScreen.setInterval(30000)     self.timerScreen.setSingleShot(True)     self.timerScreen.timeout.connect(self.grab)     self.loadFinished.connect(self.timerScreen.start)      self.load(QUrl(url))  def grab(self):      # render image     image = QImage(self.page().viewportSize(), QImage.Format_ARGB32)     painter = QPainter(image)     frame.render(painter)     painter.end()     print 'saving', self._file     image.save(self._file) </code></pre>  <p>Instead this causes calls to Screenshot.capture() to return instantly and no screenshot is take. </p>  <p>Also I can't use the app.exec_() method because this caused my application to hang, as this is part of a bigger headless command line only program this is a no-go.</p>  <p>Any input is appreciated. </p>  <p>Cheers</p>