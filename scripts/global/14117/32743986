<p>JQuery.Validate's built in method for validating Email addresses looks like this: </p>  <pre><code>return this.optional( element ) || /^[a-zA-Z0-9.!#$%&amp;'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test( value ); </code></pre>  <p>This Regular expression passes email addresses like the one below as valid</p>  <blockquote>   <p><em>testMail@test</em></p> </blockquote>  <p>In my model I'm using the datatype attribute <code>[EmailAddress]</code> which genererates the following regular expression: </p>  <pre><code>^((([a-z]|\d|[!#\$%&amp;'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&amp;'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$ </code></pre>  <p>This is the correct Regex which also validates the domain part of the email address, like: </p>  <blockquote>   <p><em>testMail@test.correct</em></p> </blockquote>  <p>will be valid and email addresses formatted like the first example will now be invalid.</p>  <p>What happens is that when posting a form using jQuery.validate's regex (the default one) it sets the form as valid even with email addresses formatted as the first example. The posted form data gets passed to the server side which detects the invalid email-format and throws an error. Is this a known bug for the validate() plugin? Because I cant seem to find a ticket regarding this in the <em>bugreport section</em> (<a href="http://bugs.jquery.com/search?ticket=on&amp;q=validate+email&amp;page=3&amp;noquickjump=1" rel="nofollow">http://bugs.jquery.com/search?ticket=on&amp;q=validate+email&amp;page=3&amp;noquickjump=1</a>). I also tried updating jQuery.validate from 1.13 to 1.14 but the regex is identical in both versions.</p>  <p>Anyway, the solution I found for this was to extend the validation plugin by adding a custom rule: </p>  <pre><code>var validCustomRegex = /^((([a-z]|\d|[!#\$%&amp;'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&amp;'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/; var custEmailValidationMessage; $.validator.addMethod('customemail', function (value, element) {     custEmailValidationMessage = $(element).data("val-regex");     return this.optional(element) || validCustomRegex.test(value); }, custEmailValidationMessage); </code></pre>  <p>and then calling my custom function instead of the default email : </p>  <pre><code>$(form).validate({somecode});          $(form).find("input[type='email']").each(function () {         var requiredMessage = $(this).data("validationmessage");         var invalidFormatMessage = $(this).data("val-regex");         var $self = $(this);         $self.rules('add', {             customemail: true,             messages: {                 required: requiredMessage,                 email: invalidFormatMessage             }         });     }); </code></pre>  <p>Is this an acceptable solution for this problem? The reason why I'm asking is that I checked this question : <a href="http://stackoverflow.com/questions/12514382/override-jquery-validate-plugin-email-address-validation">override jquery validate plugin email address validation</a>  and in the accepted answer by Tom, he says that he would'nt do this, but not why he would'nt. So why should one avoid a solution like this? I'm just curious regarding whats the "best practice" here.</p>