<p>Hello dear programmers,</p>  <p>I'm looking into setting up my development with docker containers since I'm currently working on windows, my setup is now as follows:</p>  <ul> <li><p>A docker image including a jboss which is started and already running</p></li> <li><p>An hg repo checked out on my windows file system which is imported into IntelliJ</p></li> <li><p>A shared folder which is mapped to the deploymentfolder in the docker image</p></li> </ul>  <p>Whenever I want to deploy my war, I'll let IntelliJ build the artifact as an exploded war with output directory to $THE_SHARED_FODLER/mywar.war. Then I'll touch a file in the same repo with mywar.war.deploy. Since this is shared to the deploymentfolder of the jboss docker image, the launched Jboss now deploys my war.</p>  <p>However, since all IntelliJ know is that I've built an artifact to a file-system, I can't get any of the nice support that I would get if I'd deployed the war in a normal way (e.g. having a local jboss and a jboss-run-configuration that deployed the exploded artifact). The frontend stuff (html/css) can always be solved with grunt or similar, but when it comes to the jar-libs the best solution I've come up with so far is to:</p>  <ul> <li><p>rebuild the jar with maven and copy that to the $THE_SHARED_FOLDER/mywar.war/web-inf/lib/</p></li> <li><p>touch a file mywar.war.redeploy</p></li> </ul>  <p>However this makes the turn-around-time from code change to result about 30 secs o here comes a pretty open question: What is a good way to develop towards an application server that is run in a docker image? How do you do today? Have you tried something similar and decided that docker containers is not the way to go for this?</p>  <p>Any input on the subject is highly welcome :-)</p>  <p>Brgrgs stevie the TV </p>