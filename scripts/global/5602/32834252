<p>So I have to create a linked list for class and I am stuck with my <code>List::Current()</code> function. For some reason I'm getting a handling error when I try to call the function.</p>  <p><strong>List.h</strong></p>  <pre><code>class List { private:     struct Node {         int data;         Node* next;          Node() : next(NULL){} //define our own default constructor         Node(int data) : next(NULL), data(data){}     };      typedef struct Node* NodeRef;      NodeRef head;     NodeRef tail;     NodeRef iterator; //points to one node at a time     int size;  public:     int current(); </code></pre>  <p><br> <strong>List.cpp</strong></p>  <pre><code>// initialize the values when they are instantiated List::List() : head(NULL), tail(NULL), iterator(NULL), size(0)  {}  int List::current() {     return iterator-&gt;data; }  void List::push_front(int data)             //Inserting a new node in     the front of the list { if (size == 0)                          //If there is no nodes in the        list, execute the if statement {     head = new Node(data);              //create a new node, and have head point to it     iterator = tail = head;                     //have tail point to the new node also.  } else                                    //If there are nodes in the list, execute the else statement {     NodeRef newNode = new Node(data);   //create a new node     newNode-&gt;next = head;               //have the next pointer point to the head of the next node.     head = newNode;                     //have the head pointer point to the new node inserted at the beginning of the list } size++;                                 //Increment the size counter  }  void List::push_back(int data)              //Inserting a node at the end of a list { if (size == 0)                          //If there are no nodes in the list, execute the if statement {     tail = new Node(data);              //Create a new node and have the tail pointer point to it.     iterator = head = tail;                     //Have the head pointer point to the new node also. } else                                    //If there is atleast 1 node in the list, execute the else statement {     NodeRef newNode = new Node(data);   //Create a new node     tail-&gt;next = newNode;               //Have the tail     tail = newNode;                     //Have the tail pointer point to the new node.     newNode-&gt;next = NULL; } size++;  } void List::begin() //Set the iterator to the head of the list { iterator = head; }  void List::scroll() //Allows us to scroll through the list { if (iterator == NULL)     cout &lt;&lt; "Iterator is pointing to null" &lt;&lt; endl; else     iterator = iterator-&gt;next; } </code></pre>  <p><br> <strong>LinkedList.cpp</strong></p>  <pre><code>#include "stdafx.h" #include "List.h" #include &lt;iostream&gt;  using namespace std;  int _tmain(int argc, _TCHAR* argv[]) {     List B; //Create a new list      B.push_front(5);     B.push_front(4);     B.push_front(3);     B.push_back(10);      cout &lt;&lt; B.current() &lt;&lt; endl;      system("PAUSE");     return 0; } </code></pre>  <p>I left some code out because I didn't think listing the other functions that worked properly were necessary to get the point across. If you would like everything I could post that.</p>  <p>I think this solved my issues. </p>