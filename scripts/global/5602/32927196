<p>I realize that there are a few good threads already existing which discuss how to implement a linked list in Java, however I can't seem to find one which does not use a constructor like this,</p>  <pre><code>public LinkList() {     Link = null; } </code></pre>  <p>or something along these lines. However, I have not done this in my code, and therefore I am having trouble with writing a few of the methods.</p>  <p>I have a class called Link which contains the following code, note without any constructor like the one displayed above:</p>  <pre><code>public class Link { private Link next = null; private String value = null;  public Link getNext(){     return next; }  public void setNext(Link nextLink){     next = nextLink; }  public String getValue(){     return value; }  public void setValue(String aValue){     value = aValue; } } </code></pre>  <p>and then I have my <code>LinkedList</code> class, which contains the following code:</p>  <pre><code>public class LinkedList { private Link head = null; private Link tail = null;  public Link getHead(){     return head; }  public void setHead(Link aLink){     head = aLink; }  public Link getTail(){     return tail; }  public void setTail(Link aLink){     tail = aLink; }  public boolean isEmpty(){     return(head == null &amp;&amp; tail == null); }  public void addLast(String aString){     Link link = new Link();     link.setValue(aString);     //tail.setNext(link);     if(isEmpty()){         head = link;     }else{         tail.setNext(link);     }     tail = link;      }  public void addFirst(String aString) {     Link link = new Link();     link.setValue(aString);      if(isEmpty()){           tail = link;     }else{         head.setNext(link);     }     head = link;         }  public Link removeFirst(){     Link temp = head;     head = temp.getNext();     temp.setNext(null);      return temp; } </code></pre>  <p>}</p>  <p>My <code>addFirst</code> Method, and my <code>isEmpty</code> Method both seem to be working but my <code>addLast</code> and <code>removeFirst</code> Methods are not. I have drawn pictures, looked at pseudo code, and searched around the internet, but I just cannot seem to figure this out.</p>  <p>I need to know how to get my <code>addLast</code> and <code>removeFirst</code> methods working without having to add in the constructor at the beginning like all the rest of the example code I keep seeing.</p>  <p>Here are the Tests they need to pass:</p>  <pre><code>    @Test public void testRemoveFirst(){     list.addFirst("three");     list.addFirst("two");     list.addFirst("one");     assertTrue("one".equals(list.removeFirst()));     assertTrue("two".equals(list.removeFirst()));     assertTrue("three".equals(list.removeFirst())); }  @Test public void testAddLast(){     list.addFirst("three");     list.addFirst("two");     list.addFirst("one");     assertTrue( "three".equals(list.removeLast()));     assertTrue( "two".equals(list.removeLast()));     assertTrue( "one".equals(list.removeLast()));     assertNull(list.removeLast()); } </code></pre>