<p>I'm having a hard time figuring out what is wrong with my code. I'm suppose to remove all nodes containing the specific item. In the test code below my code, it requires me to remove all the items "to" in the sentence "to be or not to be" and then return the head, which in this case is "be". Can someone please point out the problem with my code? Thank you.</p>  <pre><code>package edu.csc130.assignment; import java.util.LinkedList;  public class ListStackQueue { /**  * @param head the head of the input linked list  * @param item the given value  * @return the head of the linked list with nodes contains the given value removed  * Assume for any node in the  linked list, node.item cannot be null  */   public static Node&lt;String&gt; removeNodes(Node&lt;String&gt; head, String item) {     Node&lt;String&gt; curr = head;     Node&lt;String&gt; prev = null;      if (head == null) {         System.out.println("list is empty");     } else {         while (curr != null) {             if (curr.data != item) {                 prev = curr;                  curr = curr.next;              } else if (curr == head &amp;&amp; curr.data == item) {                 head = head.next;                  curr = curr.next;              } else if (curr != head &amp;&amp; curr.next != null &amp;&amp; curr.data == item) {                 prev.next = curr.next;                  curr = curr.next;              } else {                 curr.next = null;              }         }        }      return head;   } } </code></pre>  <p>BuildList Part of Code &lt;--I apologize, I did not put up this part of the code. Thanks to those who have helped me so far.</p>  <pre><code>/**  * @param items input array  * @return the first node of the linked list build from the input array  */ public static &lt;E&gt; Node&lt;E&gt;  buildList(E[] items) {     Node&lt;E&gt; head = null;     if (items!=null &amp;&amp; items.length&gt;0) {         head = new Node&lt;E&gt; (items[0], null);         Node&lt;E&gt; tail = head;         for (int i=1; i&lt;items.length; i++) {             tail.next = new Node&lt;E&gt;(items[i], null);             tail = tail.next;         }     }     return head; }  /**  * @param head the first node of the linked list  * @return the length of the linked list  */ public static &lt;E&gt; int getLength(Node&lt;E&gt; head) {     int length = 0;     Node&lt;E&gt; node = head;     while (node!=null) {         length++;         node = node.next;     }     return length; }  public static &lt;E&gt; E get(Node&lt;E&gt; head, int index) {     E item = null;     Node&lt;E&gt; node = head;     for (int i=0; i&lt;index; i++) {         if (node != null) {             node = node.next;         } else {             break;         }     }     if (node!=null) {         item = node.item;     }     return item; }  public static class Node&lt;E&gt; {     public Object data;      public String data();     E item;     Node&lt;E&gt; next;      public Node(E item) {         this.item = item;         this.next = null;     }      public Node(E item, Node&lt;E&gt; next) {         this.item = item;         this.next = next;     } } </code></pre>  <p>The test code:</p>  <pre><code>package edu.csc130.assignment; import org.junit.Assert; import org.junit.Test;  import edu.csc130.assignment.ListStackQueue.Node;  public class ListStackQueueTest {    @Test   public void testRemoveNodes1() {     Node&lt;String&gt; head = ListStackQueue.buildList(null);     ListStackQueue.removeNodes(head, "to");     Assert.assertNull(head);   }    @Test   public void testRemoveNodes2() {     String[] sentence = {"to", "be", "or", "not", "to", "be"};     Node&lt;String&gt; head = ListStackQueue.buildList(sentence);     head = ListStackQueue.removeNodes(head, "to");     Assert.assertEquals(4, ListStackQueue.getLength(head));     Assert.assertEquals("be", ListStackQueue.get(head, 0));     Assert.assertEquals("or", ListStackQueue.get(head, 1));     Assert.assertEquals("not", ListStackQueue.get(head, 2));     Assert.assertEquals("be", ListStackQueue.get(head, 3));   }     @Test   public void testRemoveNodes3() {     String[] sentence = {"to", "be", "or", "not", "to", "be"};     Node&lt;String&gt; head = ListStackQueue.buildList(sentence);     head = ListStackQueue.removeNodes(head, "be");     Assert.assertEquals(4, ListStackQueue.getLength(head));     Assert.assertEquals("to", ListStackQueue.get(head, 0));     Assert.assertEquals("or", ListStackQueue.get(head, 1));     Assert.assertEquals("not", ListStackQueue.get(head, 2));     Assert.assertEquals("to", ListStackQueue.get(head, 3));   }         @Test   public void testRemoveNodes4() {         String[] sentence = {"to", "be", "or", "not", "to", "be"};         Node&lt;String&gt; head = ListStackQueue.buildList(sentence);         head = ListStackQueue.removeNodes(head, "or");         Assert.assertEquals(5, ListStackQueue.getLength(head));         Assert.assertEquals("to", ListStackQueue.get(head, 0));         Assert.assertEquals("be", ListStackQueue.get(head, 1));         Assert.assertEquals("not", ListStackQueue.get(head, 2));         Assert.assertEquals("to", ListStackQueue.get(head, 3));         Assert.assertEquals("be", ListStackQueue.get(head, 4));       } } </code></pre>  <p>This is the error I'm getting when running my code in Eclipse with JUnit test. This is the error for the testRemoveNodes2 test. There is no error for testRemoveNodes1 test.</p>  <pre><code>java.lang.AssertionError: expected:&lt;4&gt; but was:&lt;6&gt; </code></pre>