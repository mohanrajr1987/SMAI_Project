<p>I have two practice problems that I'm having trouble understanding. For # 1, the answer is that the list is printed in reverse, can anyone explain this to me? Also #7, why does the list begin to go backwards once it reaches the null? If anyone can provide some quick explanations it would be greatly appreciated, thanks!</p>  <h1>1) What does the following function do for a given Linked List if we call it with the head node?</h1>  <pre><code>void method1(Node&lt;T&gt; node) {   if(node == null)     return;    method1(node.getNext());   System.out.println(node.getData().toString()); } </code></pre>  <blockquote>   <p>a. Prints the nodes of the linked list.</p>      <p>b. Prints the nodes of the linked list in reverse order.</p>      <p>c. Prints alternate nodes of the linked list.</p>      <p>d. Prints alternate nodes in reverse order.</p>      <p><strong>Answer</strong></p>      <p>b. Prints the nodes of the linked list in reverse order.</p> </blockquote>  <h1>7) What is this method going to print, if we call it with the headnode of the linked list 1 → 2 → 3 → 4 → 5 → 6 ?</h1>  <pre><code>void method1(Node&lt;Integer&gt; node) {   if (node == null)     return;   System.out.printf(“%d ”, node.getData());    if (node.getNext() != null)     method1(node.getNext().getNext());   System.out.printf(“%d ”, node.getData()); } </code></pre>  <blockquote>   <p>a. 1 6 2 5 3 4</p>      <p>b. 1 3 5 6 4 2</p>      <p>c. 1 3 5 1 3 5</p>      <p>d. 1 3 5 5 3 1</p>      <p><strong>Answer</strong></p>      <p>c. 1 3 5 5 3 1</p> </blockquote>