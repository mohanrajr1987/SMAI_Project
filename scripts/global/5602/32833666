<p>I have an assignment. I was provided with a function declaration that I cannot modify.</p>  <p>The function declaration is <code>void Insert (Item x, int p, List *L);</code> where I am supposed to change the values of the linked list struct, L.</p>  <p>Now, the code that invokes that method in my main function is </p>  <pre><code>struct List *L = malloc(sizeof(List));    Insert(x,p,L); </code></pre>  <p>How would I change my code so I can pass the address of the struct List instead of making another copy of it?</p>  <p>Like I said, I cannot change the function declaration at all.</p>  <p><code>/*********************************************************************  * FUNCTION NAME: Insert  * PURPOSE: Inserts an Item in a List.  * ARGUMENTS: . The Item to be inserted (Item)  *            . The position in the List  *              where the Item should be inserted in (int)   *            . The address of the List (List *L)  * REQUIRES (preconditions):  *            . The position should be a nonnegative integer  *              not greater than the size of the List.  *            . The List should not be full.  * ENSURES: . Empty will return false (0).  *          . Size will return the first integer greater  *            than the size of the List before the call.  *          . Peek in the same position will find  *            the Item that was inserted.  *********************************************************************/ extern void Insert (Item X, int position, List *L); </code></p>  <p>What I tried that didn't work was <code>head-&gt;next = L; //changing the next item in list to L L = head; //changing the address of L so it remains the head of the list </code></p>