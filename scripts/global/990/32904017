<p>I want to pretty-print the output of a find-like script that would take input like this:</p>  <pre><code>- 2015-10-02 19:45 102 /My Directory/some file.txt </code></pre>  <p>and produce something like this:</p>  <pre><code>-         102 /My Directory/some file.txt </code></pre>  <p>In other words: "f" (for "file"), file size (right-justified), then pathname (with an arbitrary number of spaces).</p>  <p>This would be easy in awk if I could write a script that takes $1, $4, and "everything from $5 through the end of the line".</p>  <p>I tried using the awk construct substr($0, index($0, $8)), which I <em>thought</em> meant "everything starting with field $8 to the end of $0".</p>  <p>Using index() in this way is offered as a solution on <a href="http://www.linuxquestions.org/questions/linux-newbie-8/awk-print-field-to-end-and-character-count-179078/" rel="nofollow">linuxquestions.org</a> and was upvoted 29 times in a <a href="http://stackoverflow.com/questions/1602035/print-third-column-to-last-column">stackoverflow.com</a> thread.</p>  <p>On closer inspection, however, I found that index() does not achieve this effect if the starting field happens to match an earlier point in the string.  For example, given:</p>  <pre><code>-rw-r--r-- 1 tbaker staff 3024 2015-10-01 14:39 calendar -rw-r--r-- 1 tbaker staff 4062 2015-10-01 14:39 b -rw-r--r-- 1 tbaker staff 2374 2015-10-01 14:39 now or later </code></pre>  <p>Gawk (and awk) get the following results:</p>  <pre><code>$ gawk '{ print index($0, $8) }' test.txt 49 15 49 </code></pre>  <p>In other words, the value of $8 ('b') matches at index 15 instead of 49 (i.e., like most of the other filenames).</p>  <p>My issue, then is how to specify "everything from field X to the end of the string".</p>  <p>I have re-written this question in order to make this clear.</p>