<p>I have @ManyToMany or @OneToMany associations on entity and I'm considering what will be the better use case: </p>  <ol> <li><p>using <strong>iterate</strong> for each <strong>object in objects</strong> and do <strong>criteriaBuilder.isMember(object, collection)</strong></p></li> <li><p>using <strong>root.join(collection)</strong> and than <strong>joinedRoot.in(objects)</strong></p></li> </ol>  <p>Here code example: </p>  <pre><code> List&lt;Predicate&gt; orPredicates = new ArrayList&lt;&gt;();   for(Industry industry : industries) {     orPredicates.add( criteriaBuilder.isMember(industry, provider.get(Provider_.industries)) );  }   predicates.add( criteriaBuilder.or(orPredicates.toArray(new Predicate[] { })) );  </code></pre>  <p>and the second possible solution </p>  <pre><code> Join&lt;Provider, Industry&gt; industryRoot = provider.join(Provider_.industries)  industryRoot.in(industries);   // here i need also to add .distinct(true) on select  </code></pre>  <p>I consider whether .isMember() function is making dome join with associated entity through collection attribute?</p>