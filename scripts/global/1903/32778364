<p><strong>TLDR:</strong> How do I tell doctrine's entity manager that it doesn't need to persist entities that have been recovered from cache?</p>  <p>I've recently been looking to make some optimizations in a code base and noticed that our object for describing the logged in user was proving costly to query and hydrate. It is comprises of a small number of doctrine entities. </p>  <p>Given that the user details change rarely and we can easily identify when this happens, it makes sense to me to cache this object for the duration of the users logged in session; invalidating it when any of the entities are updated by the user. </p>  <p>I made use of the Filesystem Cache driver that we use for caching of doctrine's meta data. So far so good.</p>  <p>Until of course the user tries to do something that requires saving. When we record the user's action, we use one of the user's entities as a property to relate that action to the user. </p>  <p>Doctrine reports with an <code>ORMInvalidArgumentException</code> that <code>A new entity was found through the relationship 'entity\\...' that was not configured to cascade persist operations for entity: ...</code></p>  <p>It looks like as entities are queried using doctrine, the entity manager keeps track of these such that when a save happens, it knows what entities are new and which require persisting. By recovering our user object from cache, we bypass this operation. When a user entity is used, it looks to the entity manager that it is new and thus requires persisting but the relationship isn't set to persist, and even if it was, it would fail miserably. </p>  <p>Moving forward I see two possible options:</p>  <ol> <li>When ever we make use of a user's entity, instead of passing the actual entity, we pass a doctrine reference instead. This should be simple to put in place but requires all developers to be aware of this so has a risk of future problems.</li> <li>When we recover the user from cache, somehow tell the entity manager that these entities already exist and don't require persisting. I've tracked this down to the <code>UnitOfWork</code>'s <code>$entityStates</code> property but it's marked as private.</li> </ol>  <p>I personally prefer option 2 but I have no idea how to do this. Are there any other options that I've overlooked?</p>