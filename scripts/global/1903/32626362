<p>I'm developing a game in Java and i'm having issues using and implementing my A* path finding algorithm. Currently, i have entities set up so that an entity can't exist outside of a level(each entity has access to the current level). for this reason, i stored the algorithm method 'findPath' in the base Level class. Below is the algorithm code, and the movement code for the entity, which as you can see calls the find path method in level. My issue is that when I run the code, I move the player towards the entity and the entity does nothing. I've put in some debug print lines (i'll leave those in so you can see), and the list <code>path</code> that is returned constantly returns just <code>[]</code>. I've been through everything and can;'t figure it out. Hope someone can help!</p>  <p>Thanks</p>  <p>code: in Level.java class:</p>  <pre><code>private Comparator&lt;Node&gt; nodeSorter = new Comparator&lt;Node&gt;() {     public int compare(Node n0, Node n1) {         if (n1.fCost &lt; n0.fCost) return +1;         if (n1.fCost &gt; n0.fCost) return -1;         return 0;     } };  public List&lt;Node&gt; findPath(Vector2i start, Vector2i goal) {     List&lt;Node&gt; openList = new ArrayList&lt;Node&gt;();     List&lt;Node&gt; closedList = new ArrayList&lt;Node&gt;();     Node current = new Node(start, null, 0, getDistance(start, goal));     openList.add(current);     while (openList.size() &gt; 0) {         Collections.sort(openList, nodeSorter);         current = openList.get(0);         if (current.tile.equals(goal)) {             List&lt;Node&gt; path = new ArrayList&lt;Node&gt;();             while (current.parent != null) {                 path.add(current);                 current = current.parent;             }             openList.clear();             closedList.clear();             return path;         }         openList.remove(current);         closedList.add(current);         for (int i = 0; i &lt; 9; i ++){             if (i == 4) continue;             int x = current.tile.getX();             int y = current.tile.getY();             int xi = (i % 3) - 1;             int yi = (i / 3) - 1;             Tile at = getTile(x + xi, y + yi);             if (at == null) continue;             if (at.solid()) continue;             Vector2i a = new Vector2i(x + xi, y + yi);             double gCost = current.gCost + getDistance(current.tile, a);             double hCost = getDistance(a, goal);             Node node = new Node(a, current, gCost, hCost);             if (vecInList(closedList, a) &amp;&amp; gCost &gt;= node.gCost) continue;             if (!vecInList(openList, a) || gCost &lt; node.gCost) openList.add(node);          }     }     closedList.clear();     return null; } </code></pre>  <p>And in my "Wizard.java", which extends Mob, and in turn entity:</p>  <pre><code>private List&lt;Node&gt; path = null;  public Wizard(int x, int y) {     this.x = x &lt;&lt; 4;     this.y = y &lt;&lt; 4;     sprite = animSprite.getSprite(); }  private void move() {     xa = 0;     ya = 0;     int px = (int)level.getPlayerAt(0).getX();     int py = (int)level.getPlayerAt(0).getY();     Vector2i start = new Vector2i((int)getX() &gt;&gt; 4, (int)getY() &gt;&gt; 4);     Vector2i destination = new Vector2i(px &gt;&gt; 4, py &gt;&gt; 4);     if (time % 60 == 0) path = level.findPath(start, destination);     if (path != null){         if (path.size() &gt; 0){             Vector2i vec = path.get(path.size() -1).tile;             if (x &lt; vec.getX() &lt;&lt; 4) xa += speed;             if (x &gt; vec.getX() &lt;&lt; 4) xa -= speed;             if (y &lt; vec.getY() &lt;&lt; 4) ya += speed;             if (y &gt; vec.getY() &lt;&lt; 4) ya -= speed;          }     }     if (xa != 0 || ya != 0) {         move(xa, ya);         walking = true;     } else         walking = false; }  public void update() {     time++;     if (!collision(xa, ya)){         move();     }     move();     if (walking) animSprite.update();     else         animSprite.setFrameRate(0);     if (ya &lt; 0) {         animSprite = up;         dir = Direction.UP;     } else if (ya &gt; 0) {         animSprite = down;         dir = Direction.DOWN;     }     if (xa &lt; 0) {         animSprite = left;         dir = Direction.LEFT;     } else if (xa &gt; 0) {         animSprite = right;         dir = Direction.RIGHT;     } }  public void render(Screen screen) {     sprite = animSprite.getSprite();     if (level.getTile((int)x, (int)y).solid()){         x += 16;         y += 16;     }     screen.renderMob((int)(x - 16), (int)(y - 16), this); } </code></pre>  <p>Node equals code:</p>  <pre><code>public boolean equals(Object object){     if(!(object instanceof Vector2i)) return false;     Vector2i vec = (Vector2i) object;     if (vec.getX() == this.getX() &amp;&amp; vec.getY() == this.getY()) return true;     else return false; } </code></pre>