<p>I'm using Lua for scripts in my C++ game.  I want to be able to attach scripts to entities, and based on which functions are defined in the script, register for callbacks which will run the script functions at the appropriate time.</p>  <p>I believe that I can encapsulate different scripts from each other, by making the "script" into a table.  Basically, <code>... lua source code ...</code> would become <code>ScriptName = { ... lua source code ... }</code>.  Then instead of calling <code>func()</code>, I'd call <code>ScriptName.func()</code>, and thus two scripts defining the same function (aka registering for the same event) wouldn't trample over each other.</p>  <p>My problem now is in encapsulating different entities sharing the same script.  Obviously I don't want them to be sharing variables, but with what I'm doing now, any variable defined by a script would be shared by every instance of that script, which is just really bad.  I could maybe try something similar to my above solution on the source level, by wrapping every script with <code>EntityID.ScriptName = { ... }</code> before compiling it.  Something tells me there's a better way, though, I just don't know it.</p>  <p>Another factor is that scripts need to be able to reference entities and scripts/components relative to a specific entity.  If I use the above method the best solution to this would be passing entity IDs around as strings which could reference the table specific to that entity, I think?  At this point I really have no idea what I'm doing.</p>