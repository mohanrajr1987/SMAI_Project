<p>Using code-first migrations and Entity, the class</p>  <pre><code>public partial class MyDb : DbContext {     public MyDb()         : base("name=mydb")     {     }      public virtual DbSet&lt;BannedIP&gt; BannedIPs { get; set; }     public virtual DbSet&lt;GameLog&gt; GameLogs { get; set; }     public virtual DbSet&lt;IP&gt; IPs { get; set; }     public virtual DbSet&lt;Score&gt; Scores { get; set; }      protected override void OnModelCreating ( DbModelBuilder modelBuilder )     {         modelBuilder.Entity&lt;GameLog&gt;()             .Property(e =&gt; e.logText)             .IsUnicode(false);          modelBuilder.Entity&lt;IP&gt;()             .HasMany(e =&gt; e.BannedIPs)             .WithRequired(e =&gt; e.IP)             .WillCascadeOnDelete(false);          modelBuilder.Entity&lt;Score&gt;()             .Property(e =&gt; e.name)             .IsUnicode(false);     } } </code></pre>  <p>was generated to mirror my existing database. My question is why it generates a constructor</p>  <pre><code>    public MyDb()         : base("name=mydb")     {     } </code></pre>  <p>Why would I need to make more than one instance of this class? Couldn't it be a static class since all I'm doing with it is making transactions on a single database? I'm just trying to figure out the reasoning behind it ... </p>