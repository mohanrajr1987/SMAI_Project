<p>I'm trying to write a Makefile that automatically calls BibTeX on files that match a specific wildcard but don't exist when I first run Make. Specifically, I have the following:</p>  <pre><code>.FORCE:  all: pdf  foo=something  lat: *.tex     pdflatex $(foo).tex  pdf: lat     open $(foo).pdf &amp;  %.aux: .FORCE     bibtex $@  bib: lat $(foo)?.aux     pdflatex $(foo).tex     pdflatex $(foo).tex     open $(foo).pdf &amp; </code></pre>  <p>What I want to happen is that the following will occur when I run <code>make bib</code>:</p>  <ul> <li>pdflatex will be called on $(foo).tex, generating files $(foo)1.aux, $(foo)2.aux, etc.</li> <li>bibtex will be called on $(foo)1.aux, then $(foo)2.aux, etc.</li> <li>pdflatex will be called twice on $(foo).tex</li> <li>open will be called on $(foo).pdf</li> </ul>  <p>However, this doesn't happen: in particular, it looks as if Make evaluates the prerequisites $(foo)?.aux up-front, at a point where the files $(foo)1.aux, $(foo)2.aux, etc. don't exist. As a result, BibTeX is never called on them. If I rerun <code>make bib</code>, however, things work, because the files now exist after being created on the previous run.</p>  <p><b>Question: Is forcing Make to re-evaluate prerequisites for a target the right way to fix this? If so, how can I get it to re-evaluate the prerequisites for bib after running pdflatex as part of lat? If not, how can I achieve what I want please?</b></p>