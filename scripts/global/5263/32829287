<p>I just started working on implementing a widget feature into my Swift 2.0 iOS application and after much research I found the SwiftWidget github link that uses a CoreDataStore file which contains all of the Core Data functions that are normally included in the App Delegate plus the ability to set it to main queue or private queue which is nice.</p>  <p>My question is however do I really need to set this outside of the App Delegate as my app only uses basic core data features and isn't a large database by any means. I ask only because I created a clone version of my app to experiment with changes and trying to use the file that was in the SwiftWidget modified to include all my app info.</p>  <p>For those interested in the actually code this file uses I have linked it below:</p>  <pre><code>import Foundation import CoreData  public class CoreDataStore {   class var sharedInstance : CoreDataStore { struct Static {     static let instance : CoreDataStore = CoreDataStore()     }     return Static.instance } // MARK: - Notifications  func contextDidSavePrivateQueueContext(notification: NSNotification) {     if let context = self.mainQueueCtxt {         self.synced(self, closure: { () -&gt; () in             context.performBlock({() -&gt; Void in                 context.mergeChangesFromContextDidSaveNotification(notification)             })         })     } }  func contextDidSaveMainQueueContext(notification: NSNotification) {     if let context = self.privateQueueCtxt {         self.synced(self, closure: { () -&gt; () in             context.performBlock({() -&gt; Void in                 context.mergeChangesFromContextDidSaveNotification(notification)             })         })     } }  func synced(lock: AnyObject, closure: () -&gt; ()) {     objc_sync_enter(lock)     closure()     objc_sync_exit(lock) }  // MARK: - Core Data stack  lazy var applicationDocumentsDirectory: NSURL = {     // The directory the application uses to store the Core Data store file. This code uses a directory named "com.xxx.Appname" in the application's documents Application Support directory.     let urls = NSFileManager.defaultManager().URLsForDirectory(.DocumentDirectory, inDomains: .UserDomainMask)     return urls[urls.count-1]      }()  lazy var managedObjectModel: NSManagedObjectModel = {     // The managed object model for the application. This property is not optional. It is a fatal error for the application not to be able to find and load its model.     let modelURL = NSBundle.mainBundle().URLForResource("Appname", withExtension: "momd")!     return NSManagedObjectModel(contentsOfURL: modelURL)!     }()  lazy var persistentStoreCoordinator: NSPersistentStoreCoordinator? = {     // The persistent store coordinator for the application. This implementation creates and return a coordinator, having added the store for the application to it. This property is optional since there are legitimate error conditions that could cause the creation of the store to fail.     // Create the coordinator and store     var coordinator: NSPersistentStoreCoordinator? = NSPersistentStoreCoordinator(managedObjectModel: self.managedObjectModel)      let directory = NSFileManager.defaultManager().containerURLForSecurityApplicationGroupIdentifier("group.xxx.Appname")      let url = directory?.URLByAppendingPathComponent("Appname.sqlite")     var error: NSError? = nil     var failureReason = "There was an error creating or loading the application's saved data."      do {         try coordinator!.addPersistentStoreWithType(NSSQLiteStoreType, configuration: nil, URL: url, options: nil)     } catch var error1 as NSError {         error = error1         coordinator = nil         // Report any error we got.         var dict = [String: AnyObject]()         dict[NSLocalizedDescriptionKey] = "Failed to initialize the application's saved data"         dict[NSLocalizedFailureReasonErrorKey] = failureReason         dict[NSUnderlyingErrorKey] = error         error = NSError(domain: "YOUR_ERROR_DOMAIN", code: 9999, userInfo: dict)         // Replace this with code to handle the error appropriately.         // abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.          NSLog("Unresolved error \(error), \(error!.userInfo)")         abort()      } catch {         fatalError()     }      return coordinator      }()  // MARK: - NSManagedObject Contexts  public class func mainQueueContext() -&gt; NSManagedObjectContext {     return self.sharedInstance.mainQueueCtxt! }  public class func privateQueueContext() -&gt; NSManagedObjectContext {     return self.sharedInstance.privateQueueCtxt! }  lazy var mainQueueCtxt: NSManagedObjectContext? = {     // Returns the managed object context for the application (which is already bound to the persistent store coordinator for the application.) This property is optional since there are legitimate error conditions that could cause the creation of the context to fail.     var managedObjectContext = NSManagedObjectContext(concurrencyType:.MainQueueConcurrencyType)     managedObjectContext.persistentStoreCoordinator = self.persistentStoreCoordinator     return managedObjectContext }()  lazy var privateQueueCtxt: NSManagedObjectContext? = {     // Returns the managed object context for the application (which is already bound to the persistent store coordinator for the application.) This property is optional since there are legitimate error conditions that could cause the creation of the context to fail.     var managedObjectContext = NSManagedObjectContext(concurrencyType:.PrivateQueueConcurrencyType)     managedObjectContext.persistentStoreCoordinator = self.persistentStoreCoordinator     return managedObjectContext     }()  // MARK: - Core Data Saving support  public class func saveContext (context: NSManagedObjectContext?) {     if let moc = context {         var error: NSError? = nil         if moc.hasChanges {             do {                 try moc.save()             } catch let error1 as NSError {                 error = error1                 // Replace this implementation with code to handle the error appropriately.                 // abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.                 NSLog("Unresolved error \(error), \(error!.userInfo)")                 abort()             }         }     } } }  // MARK: - NSManagedObject Extension   extension NSManagedObject {  public class func createInContext(entityName: String, context: NSManagedObjectContext) -&gt; AnyObject {     let entity = NSEntityDescription.entityForName(entityName, inManagedObjectContext: context)     return NSManagedObject(entity: entity!, insertIntoManagedObjectContext: context) }  public class func findAllInContext(entityName: String, context: NSManagedObjectContext) -&gt; [AnyObject]? {     let request = NSFetchRequest(entityName: entityName)     var error: NSError?     let result: [AnyObject]?     do {         result = try context.executeFetchRequest(request)     } catch let error1 as NSError {         error = error1         result = nil     }     return result } } </code></pre>  <p>Again to repeat the primary question can I effectively read/write to core data from both my primary application and the today extension, using just the App Delegate functions either inside of the App Delegate or by transferring those functions to a .swift file? If not and This type of file is what is needed am I going to be able to use the same fetch commands and save commands as in the app delegate or do I need to rewrite all of my view controller codes fetching and saving to call the specified function of createincontext or findallincontext? If I am not really fetching online data or exporting online data at the moment should I just use the stack build from the app delegate?</p>  <p>Is MagicRecord a better way of achieving these functions and still allowing future ability to implement abilities to fetch and send online data? I already wrote most of my code to functions related to the app delegate.</p>