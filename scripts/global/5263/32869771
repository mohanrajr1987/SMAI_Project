<p>I'm creating a <code>NSPersistentStore</code> with the code below.</p>  <pre><code>NSPersistentStore * pc = [persistentCoordinator                               addPersistentStoreWithType:EncryptedStoreType                                           configuration:nil                                                      URL:databaseURL                                                 options:options                                                    error:error];  if (*error) {     NSLog(@"Unable to add persistent store.");     NSLog(@"Error: %@\n%@\n%@", *error, [*error userInfo], [*error localizedDescription]); } </code></pre>  <p>The value of <code>options</code> is</p>  <pre><code>{     EncryptedStore = SQLite;     EncryptedStoreDatabaseLocation =   "file:///var/mobile/Containers/Data/Application/0C27F628-3FF0-467F-8EF1-5974EBBD3620/Documents/DBEncrypted.sqlite";     EncryptedStorePassphrase = "xxxxxxxxredactedxxxxxxx";     NSInferMappingModelAutomaticallyOption = 1;     NSMigratePersistentStoresAutomaticallyOption = 1;     NSSQLitePragmasOption =     {         synchronous = OFF;     }; } </code></pre>  <p>At this point <code>*error</code> is <code>nil</code> and <code>pc</code> is <code>nil</code> too.</p>  <p>According to Apple's documentation if the function returns nil should be an error. Does anyone saw it before?</p>  <p>The <code>EncryptedStoreType</code> is from <a href="https://github.com/project-imas/encrypted-core-data">https://github.com/project-imas/encrypted-core-data</a></p>  <p>The error only happens if we are migrating the Data Store</p>  <p><strong>EDIT:</strong> Full code of method:</p>  <pre><code>+ (NSPersistentStoreCoordinator *)makeStoreWithOptions:(NSDictionary *)options managedObjectModel:(NSManagedObjectModel *)objModel error:(NSError *__autoreleasing *)error {     NSPersistentStoreCoordinator * persistentCoordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:objModel];      //  NSString* appSupportDir = [NSSearchPathForDirectoriesInDomains(NSApplicationSupportDirectory, NSUserDomainMask, YES) objectAtIndex:0];      BOOL backup = YES;     NSURL *databaseURL;     id dburl = [options objectForKey:EncryptedStoreDatabaseLocation];     if(dburl != nil) {         if ([dburl isKindOfClass:[NSString class]]){             databaseURL = [NSURL URLWithString:[options objectForKey:EncryptedStoreDatabaseLocation]];             backup = NO;         }         else if ([dburl isKindOfClass:[NSURL class]]){             databaseURL = dburl;             backup = NO;         }     }      if (backup){         NSString *dbNameKey = (__bridge NSString *)kCFBundleNameKey;         NSString *dbName = NSBundle.mainBundle.infoDictionary[dbNameKey];         NSFileManager *fileManager = [NSFileManager defaultManager];         NSURL *applicationSupportURL = [[fileManager URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask] lastObject];         [fileManager createDirectoryAtURL:applicationSupportURL withIntermediateDirectories:NO attributes:nil error:nil];         databaseURL = [applicationSupportURL URLByAppendingPathComponent:[dbName stringByAppendingString:@".sqlite"]];      }      [persistentCoordinator addPersistentStoreWithType:EncryptedStoreType configuration:nil URL:databaseURL         options:options error:error];      if (*error)     {         NSLog(@"Unable to add persistent store.");         NSLog(@"Error: %@\n%@\n%@", *error, [*error userInfo], [*error localizedDescription]);     }      return persistentCoordinator; } </code></pre>  <p>I call it in</p>  <pre><code>- (void) initCoreDataProperties {     NSError *error;      // Creating the Managed Object Model from momd     NSURL *modelURL = [[NSBundle mainBundle] URLForResource:TBCoreDataModelFileName withExtension:@"momd"];     _managedObjectModel = [[NSManagedObjectModel alloc] initWithContentsOfURL:modelURL];      // Creating the Encrypted Store Persistent Coordinator     _persistentStoreCoordinator = [EncryptedStore makeStoreWithOptions: [self persistentStoreOptions]                                                     managedObjectModel: self.managedObjectModel                                                                  error: &amp;error]; </code></pre>