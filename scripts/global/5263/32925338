<p>I am working on a person project that allows users to add annotation pins to the map, followed by downloading photos from Flickr for the chosen location. The pins/annotations are clickable so as to trigger certain functions (e.g. deletion or triggering segue to a detail view). I am currently stumbled upon making the <code>callout action</code> work. Below is the code I have written:</p>  <pre><code>class ViewController: UIViewController {      @IBOutlet weak var mapView: MKMapView!      let reusedPinId = "pin"     var selectedLocation: TouringLocationAnnotation!     let initLocation = CLLocation(latitude: 21.282788, longitude: -157.829444)     let regionRadius: CLLocationDistance = 1000     var myPin: MKPinAnnotationView?     var editModeOn = false       override func viewDidLoad() {         super.viewDidLoad()         let longPressRecognizer = UILongPressGestureRecognizer()         longPressRecognizer.addTarget(self, action: "addMapAnnotation:")         mapView.addGestureRecognizer(longPressRecognizer)         mapView.delegate = self         centerMapOnLocation(initLocation)          let touringSpot = TouringSpot(title: "Picture at this touring site", coordinate: CLLocationCoordinate2D(latitude: 21.283921, longitude: -157.831661))         mapView.addAnnotation(touringSpot) //TODO: change this to the first pin         self.navigationItem.rightBarButtonItem = self.editButtonItem() //toggle edit and Done         self.navigationItem.title = "Virtual Tourist"          fetchedResultsController.delegate = self          do {             try fetchedResultsController.performFetch()              if let savedPins = fetchedResultsController.fetchedObjects {                 for pin in savedPins {                     print("retrieved a pin from coredata")                     showPinOnMap(pin as! Pin)                 }             }         } catch let error as NSError {             print("error in retrieving saved pins: \(error)")         }      }  //show the pin as an annotation on map     func showPinOnMap(pin: Pin) {         if pin.isValid() { //check if the pin has coordinate set up             let locationAnnot = TouringLocationAnnotation(tourLocationPin: pin)             //TODO: fetch photo for the pin             if pin.photos.count == 0 {                 print("about to fetch flickr photos for pin:")                 pin.fetchPhotosFromFlickr({ (success, error) -&gt; Void in                     if success {                         print("successfl in fetching flickr photos")                     } else {                         print("error in fetching flickr photos")                         //TODO: give warning to user                         return                     }                 });             }             mapView.addAnnotation(locationAnnot)         } else {             print("pin is invalid")             //TODO: give warning to user on invalid pin         }     }       func centerMapOnLocation(location: CLLocation) {         let coordinateRegion = MKCoordinateRegionMakeWithDistance(location.coordinate, regionRadius * 2.0, regionRadius * 2.0)         mapView.setRegion(coordinateRegion, animated: true)     } } </code></pre>  <p><strong>Below is the method for adding map annotations:</strong></p>  <pre><code>func centerMapOnLocation(location: CLLocation) {         let coordinateRegion = MKCoordinateRegionMakeWithDistance(location.coordinate, regionRadius * 2.0, regionRadius * 2.0)         mapView.setRegion(coordinateRegion, animated: true)     }       func addMapAnnotation(gestureRecognizer: UIGestureRecognizer) {         if gestureRecognizer.state == UIGestureRecognizerState.Began {             let touchPoint = gestureRecognizer.locationInView(mapView)             let newCoordinate = mapView.convertPoint(touchPoint, toCoordinateFromView: mapView)             let annotation = TouringSpot(title: "new spot", coordinate: newCoordinate)             var locationNameStr = ""             let locationDictionary: [String:AnyObject] = [                 Pin.Keys.Name: "\(newCoordinate.latitude, newCoordinate.longitude)",                 Pin.Keys.Latitude: newCoordinate.latitude,                 Pin.Keys.Longitude: newCoordinate.longitude             ]             defer {                 //TODO: check for duplicate pins in database first?                 let newPin = Pin(dictionary: locationDictionary, context: sharedContext)                 newPin.name = locationNameStr                  do {                 //persist the new pin to core data                     try sharedContext.save()                     print("saved a pin!")                     showPinOnMap(newPin)                 } catch let error as NSError {                     print("error saving the new pin in context")                 }             }               //problem: cannot pass the locationNameStr to the defer{} block             //TODO: retrieve the location name as title of the annotation             CLGeocoder().reverseGeocodeLocation(CLLocation(latitude: newCoordinate.latitude, longitude: newCoordinate.longitude), completionHandler: {(placemarks, error) -&gt; Void in                  if error != nil {                     print("reverse geocoding failed with error: \(error)")                     //return                 } else if placemarks!.count &gt; 0 {                     let firstPlace = placemarks![0] as CLPlacemark                      if firstPlace.country != nil {                         locationNameStr = "a place in \(firstPlace.country!)"                     }                     else if firstPlace.locality != nil {                         locationNameStr = "a place in \(firstPlace.locality!)"                     }                     print("location name: \(locationNameStr)")                 }             })          }     } </code></pre>  <p><strong>When the Edit button is clicked, the user can click on a pin for deletion:</strong></p>  <pre><code>override func setEditing(editing: Bool, animated: Bool) {         super.setEditing(editing, animated: animated)          if editing {             print("going to edit the pins")              let titleDict: NSDictionary = [NSForegroundColorAttributeName: UIColor.redColor()             ]             navigationController?.navigationBar.titleTextAttributes = titleDict as! [String : AnyObject]              self.navigationItem.title = "Click a pin for deletion"             editModeOn = true         } else {             print("done with editing the pins")             let titleDict: NSDictionary = [NSForegroundColorAttributeName: UIColor.blackColor()             ]             navigationController?.navigationBar.titleTextAttributes = titleDict as! [String : AnyObject]             self.navigationItem.title = "Tourist"             editModeOn = false         }     } </code></pre>  <p><strong>Below is my implementation of the <code>MKMapViewDelegate</code>:</strong></p>  <pre><code>extension ViewController: MKMapViewDelegate {      func mapView(mapView: MKMapView, viewForAnnotation annotation: MKAnnotation) -&gt; MKAnnotationView? {          if let anno = annotation as? TouringLocationAnnotation {             print("calling the viewForAnnotation delegate")             var pinView: MKPinAnnotationView!             if let dequeuedView = mapView.dequeueReusableAnnotationViewWithIdentifier(reusedPinId)                 as? MKPinAnnotationView {                     dequeuedView.annotation = anno                     pinView = dequeuedView             } else {                 pinView = MKPinAnnotationView(annotation: anno, reuseIdentifier: reusedPinId)              }             pinView.canShowCallout = true             if #available(iOS 9.0, *) {                 pinView.pinTintColor = UIColor.purpleColor()             } else {                 // Fallback on earlier versions             }             pinView.animatesDrop = true             // pinView.calloutOffset = CGPoint(x: -5, y: 5)              let btn = UIButton(type: .DetailDisclosure)             // btn.addTarget(self, action: Selector("showPhotosForPin:"), forControlEvents: UIControlEvents.TouchUpInside)              pinView.rightCalloutAccessoryView = btn //UIButton.buttonWithType(.DetailDisclosure) as! UIView             return pinView         }         return nil     }      //call out     func mapView(mapView: MKMapView!, annotationView view: MKAnnotationView!, calloutAccessoryControlTapped control: UIControl!) {         print("callout accessory control triggered!")         /*         if let annotation = view.annotation as? TouringLocationAnnotation {             mapView.removeAnnotation(annotation)         }         */         let annotation = view.annotation as! TouringLocationAnnotation         if control == view.rightCalloutAccessoryView {             print("right callout button is clicked")         }     }       func showPhotosForPin(sender: UIButton!) {         print("showing photos for pin")     }       func mapView(mapView: MKMapView, didSelectAnnotationView view: MKAnnotationView) {         let latitude = view.annotation!.coordinate.latitude         let longitude = view.annotation!.coordinate.longitude         //let annotation = view.annotation as! TouringLocationAnnotation          if !editModeOn {             print("did select the annotation View, getting its coordinates, latitude: \(latitude), longitude: \(longitude)")             // print("pin is: \(annotation.tourLocationPin.latitude)")         } else {             print("for deleting the pin")         }     }     } </code></pre>  <p>The pins are persisted in <code>CoreData</code>, when the app is started, they are fetched from persistence and annotated on the map. As you can see from the below screenshot, the pins are annotated in purple color (the only red pin is from my hard-coded annotation, which is not from CoreData), I think this suggests that my pins are  converted to <code>MKAnnotationView</code> type successfully. However, when I click on the pins, the callout action is not trigger, for which I would expect to see the following printout </p>  <pre><code>"callout accessory control triggered!" </code></pre>  <p><strong>Please note that the code for CoreData was ommitted for brevity, as I think they are irrelevant to my question</strong></p>  <p><a href="http://i.stack.imgur.com/hH9qR.png" rel="nofollow"><img src="http://i.stack.imgur.com/hH9qR.png" alt="enter image description here"></a></p>