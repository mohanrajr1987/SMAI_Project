<p>I have a tableview that is populated using a fetched results controller. It automatically updates when the data changes.</p>  <p>I also have a background thread processing files and when I trigger a save I want this tableview to update. Currently I'm getting some strange errors and I'm not sure if this is the correct way to set it all up.</p>  <p>I modified my main managedObjectContext in my appdelegate to be a main queue type:</p>  <pre><code>lazy var managedObjectContext: NSManagedObjectContext? = {     // Returns the managed object context for the application (which is already bound to the persistent store coordinator for the application.) This property is optional since there are legitimate error conditions that could cause the creation of the context to fail.     let coordinator = self.persistentStoreCoordinator     if coordinator == nil {         return nil     }     var managedObjectContext = NSManagedObjectContext(concurrencyType: NSManagedObjectContextConcurrencyType.MainQueueConcurrencyType)     managedObjectContext.persistentStoreCoordinator = coordinator     return managedObjectContext }() </code></pre>  <p>Then in my thread I'm creating private queue type:</p>  <pre><code>let mainManagedObjectContext = (UIApplication.sharedApplication().delegate as! AppDelegate).managedObjectContext let privateManagedObjectContext = NSManagedObjectContext(concurrencyType: .PrivateQueueConcurrencyType) privateManagedObjectContext!.parentContext = mainManagedObjectContext </code></pre>  <p>I then do a save later in my thread like this:</p>  <pre><code> do {       try self.privateManagedObjectContext!.save()  } catch {  } </code></pre>  <p>This does work.. however its not persistent and I think I need to do a save on the managedObjectContext. Is this correct?</p>  <p><strong>UPDATE</strong></p>  <p>Its now working.. I just wasn't saving to the main context here is my code if anyone gets stuck:</p>  <pre><code>do {     try self.privateManagedObjectContext!.save() } catch {     print("can't save to private context") }  mainManagedObjectContext?.performBlock({     do{         try self.mainManagedObjectContext!.save()     } catch {         print("can't save to main context")     } }) </code></pre>