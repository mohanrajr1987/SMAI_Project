<p>Yes, I know I should use <code>NSDecimalNumber</code> to deal with currency, money, price... <a href="http://stackoverflow.com/questions/421463/should-i-use-nsdecimalnumber-to-deal-with-money">I've read this.</a> The problem is, I adapted an existed project, which use <code>NSString</code> and <code>NSNumber</code> (<code>float</code>, <code>double</code>, <code>CGFloat</code>...) as currency. They deal with floating point by using <code>NSNumberFormatter</code>, as I can see it's not a big problem (yet?). Those currency is stored to coredata.</p>  <p>Now, if I want to convert all of those currency into <code>NSDecimalNumber</code>, I'll have to do a massive refactor in the code and migration in coredata. Here come the question:</p>  <blockquote>   <ol>   <li><p>If (I assume) <code>double</code>, <code>CGFloat</code>, <code>NSNumber</code> can hold the value as large as <code>NSDecimalNumber</code>, why should I use <code>NSDecimalNumber</code> since I can use   other with <code>NSNumberFormatter</code>? Is it because of performance?</p></li>   <li><p>In case of the necessary of the converting, can I do an auto migration with the help of MappingModel only, of course), or do I have   to adapt a custom migration policy?</p></li>   </ol> </blockquote>  <p>Because the coredata use both <code>NSString</code> and <code>NSNumber</code> as currency, so please help me find a solution to migrate from both data type. I'm not used to work with <code>NSDecimalNumber</code> in coredata. Thanks in advance.</p>  <p><strong>EDIT</strong></p>  <p>Okay, I got it that NSDecimalNumber is necessary. Please help me answer the second question: Can I do auto migration, using mappingModel + the thing like <code>FUNCTION($source.price, "decimalValue")</code> (this is incorrect since decimalValue return <code>NSDecimal</code>, not <code>NSDecimalNumber</code>). Do I really have to write a custom migration policy?</p>