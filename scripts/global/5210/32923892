<p>in my Android application I've to make sometimes synchronous HTTP calls. As this is not possible from the main UI thread I'm trying to circumvent the problem with the usage of the <code>com.loopj.android.http.AsyncHttpClient</code> and a handler. In my code I try to wait for the call the finished:</p>  <pre><code>public class someclass { ... //asynchronous HTTP handler for Android private static AsyncHttpClient httpClient = new AsyncHttpClient();  ... public void somemethod() { ... httpClient.get(request, handler);     ...     //waiting for call to be finished     do {         Thread.sleep(100); //for testing only         log.info("sleeping...");     } while (!handler.isFinished());       response = handler.getBody();     log.info("Async resp = " + response);  ... </code></pre>  <p>I wrote my own handler class:</p>  <pre><code>    public class MyAsyncHTTPResponseHandler extends AsyncHttpResponseHandler {        private String header = null;     private String body = null;     private int status = 0;     boolean finish = false;      public MyAsyncHTTPResponseHandler() {         super();         log.info("init Http handler ");         finish = false;     }      @Override     public void onStart() {         // called before request is started         log.info("starting Async Get");         finish = false;     }      @Override     public void onSuccess(int statusCode, cz.msebera.android.httpclient.Header[] headers, byte[] responseBody) {           body = new String(responseBody);         status = statusCode;         finish = true;          log.info("Async Get worked fine " + responseBody);     }        @Override     public void onFailure(int statusCode, cz.msebera.android.httpclient.Header[] headers, byte[] responseBody, java.lang.Throwable error) {         // called when response HTTP status is "4XX" (eg. 401, 403, 404)         log.info("Error in executing URL get " + statusCode + " " + responseBody);         finish = true;     }      @Override     public void onRetry(int retryNo) {         // called when request is retried     }      public String getBody() {         return body;     }      public int getStatusCode() {         return status;     }      public boolean isFinished() {         return finish;     }  } </code></pre>  <p>Unfortunately this is not working. The <code>onStart()</code> method will be executed but the loop is running forever. The <code>onSuccess()</code> method will not be called.</p>  <p>If I comment out the loop the body response will be empty. As I can see in the log in this case the <code>onSuccess()</code> method will be called but after my log statement in <code>somemethod()</code>.</p>  <p>What am I doing wrong here?</p>