<p>I know I can make a dictionary with particular keys:</p>  <pre><code>my_dict = dict.fromkeys(my_keys) </code></pre>  <p>and I know I can inherit the dictionary class:</p>  <pre><code>class My_Dict_Class(dict):     ... </code></pre>  <p>but how can I combine the two? I want to make a dictionary class and I already know all the keys it will ever have. I know I could set some keys inside my class, but wouldn't it be nicer and quicker if I could do:</p>  <pre><code>class My_Dict_Class(dict.fromkeys(my_keys)):     ... </code></pre>  <p>The reason I want to do this is that I've heard <code>fromkeys</code> is much quicker than looping and setting the keys <a href="http://stackoverflow.com/questions/16256913/improving-performance-of-very-large-dictionary-in-python">in this question</a>.</p>  <p>MWE:</p>  <pre><code>  my_keys = [1,2,3]   my_dict = dict.fromkeys(my_keys)    class My_Dict_Class(dict):       def my_functions(self):           return    class My_Dict_Class(dict.fromkeys(my_keys)):       def my_functions(self):           return  Traceback (most recent call last):   File "dummy.py", line 8, in &lt;module&gt;     class My_Dict_Class(dict.fromkeys(my_keys)): TypeError: Error when calling the metaclass bases     dict expected at most 1 arguments, got 3 </code></pre>