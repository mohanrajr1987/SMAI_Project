<p>I am writing a piece of code to iterate through a graph, find the degree of a node/vertex (how many edges it has connected to it) and then record this node in a dictionary so that I can later look up which nodes have a degree of, say, 2. My code for this is as follows:</p>  <pre><code>g = graph_tool.load_graph('graph.xml', fmt='auto')  k_in_hist_mems = {} k_out_hist_mems = {}  for v in g.vertices():     k_in = v.in_degree()     k_out = v.out_degree()     k_in_hist_mems[k_in].append(g.vertex_index[v])     k_out_hist_mems[k_out].append(g.vertex_index[v]) </code></pre>  <p>This obviously throws an exception because the lists in the dictionaries are not initialised yet. If I want to be crude I could instead say:</p>  <pre><code>g = graph_tool.load_graph('graph.xml', fmt='auto')  k_in_hist_mems = {} k_out_hist_mems = {}  for v in g.vertices():     k_in = v.in_degree()     k_out = v.out_degree()     if k_in_hist_mems[k_in] in k_in_hist_mems:         k_in_hist_mems[k_in].append(g.vertex_index[v])     else:         k_in_hist_mems[k_in] = [g.vertex_index[v]] </code></pre>  <p>Seeing as I will have far more vertices in my graph than keys in my dictionary I am probably adding unnecessary overhead by evaluating the <code>if</code> condition each time. Is there a better way of doing this?</p>