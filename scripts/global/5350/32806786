<p>I'm trying to create an array that sort of summarises another array. I've already received some really good ideas <a href="http://stackoverflow.com/questions/32796640/convert-multi-dimensional-array-into-single-array-javascript">here</a>, all of them are working, but all of them generate another obstacle that I, again, can't seem to solve.</p>  <p>Based on @kooiinc's <a href="http://stackoverflow.com/a/32796854/4593394">answer</a>, my current code looks like this:</p>  <pre><code>var grants = [     { id: "p_1", location: "loc_1", type: "A", funds: "5000" },     { id: "p_2", location: "loc_2", type: "B", funds: "2000" },     { id: "p_3", location: "loc_3", type: "C", funds:  "500" },     { id: "p_2", location: "_ibid", type: "D", funds: "1000" },     { id: "p_2", location: "_ibid", type: "E", funds: "3000" } ]; var projects = []; grants.map( function (v) {     if (!(v.id in this)) {         this[v.id] = v;         projects.push(v);     } else {         var current = this[v.id];         current.type = [v.type].concat(current.type);         current.funds = [v.funds].concat(current.funds);     } }, {}); </code></pre>  <p>... which gives the following desired result (<code>type</code> and <code>funds</code> joined into sub-arrays, the rest are pushed unchanged):</p>  <pre><code>[     { "id": "p_1", "location": "loc_1", "type": "A", "funds": "5000" },     { "id": "p_2", "location": "loc_2", "type": ["E","D","B"], "funds": ["3000","1000","2000"] },     { "id": "p_3", "location": "loc_3", "type": "C", "funds": "500" } ] </code></pre>  <p>However, if some of the objects have some  undefined key values, the result will have nulls in the arrays. For example like this (look at the <code>type</code> array): </p>  <pre><code>[     { "id": "p_1", "location": "loc_1", "type": "A", "funds": "5000" },     { "id": "p_2", "location": "loc_2", "type": ["E",null,null], "funds": ["3000","1000","2000"] },     { "id": "p_3", "location": "loc_3", "type": "C", "funds": "500" } ] </code></pre>  <p><em>(Here's a <a href="http://jsfiddle.net/casbaup3/" rel="nofollow">fiddle</a> with the same thing.)</em></p>  <p>I've tried to find a quick way of removing these afterwards (like <a href="http://stackoverflow.com/questions/6722873/sorting-and-removing-keys-with-null-values">here</a> or <a href="http://stackoverflow.com/questions/281264/remove-empty-elements-from-an-array-in-javascript">here</a>) but for some reason none of the usual methods (of recursively removing all keys that are undefined/null) seem to work, regardless of where I put them in my code. They don't give errors, they just won't remove anything.</p>  <p>Is it perhaps possible to already exclude the undefined keys in the mapping somehow?</p>  <p><strong>Update:</strong> So some of the object keys won't have <em>any</em> values, just <code>[null,null,null]</code> whilst others will have a few but not all like <code>["E",null,null]</code>. The idea is to remove all the null items and if there's nothing left then remove the object key as well.</p>