<p>I'm attempting to implement lazy loading into my application with sorting, but am having little issues with sorting and paginator. SortBy does work so like Paginator single but when i click on sort on first column with page > 0, the LazyDataModel#load is called with "first" parameter = 0! Then instead of sorting data of page 1 return on page 0</p>  <p>Here is my managed bean class code:</p>  <pre><code>@ViewScoped @ManagedBean public class PlayerMB implements Serializable {  private static final long serialVersionUID = 1L; private LazyDataModel&lt;Player&gt; players = null; private int sizePlayer;    private Player player;  public LazyDataModel&lt;Player&gt; getAllPlayers() {     if (players == null) {         players = new PlayerLazyList();     }     setSizePlayer(players.getRowCount());      return players; }  public Player getPlayer() {     if(player == null){         player = new Player();     }      return player; }  public void setPlayer(Player player) {     this.player = player; } public int getSizePlayer() {     return sizePlayer; }  public void setSizePlayer(int sizePlayer) {     this.sizePlayer = sizePlayer; }  } </code></pre>  <p>Player class code:</p>  <pre><code>public class Player implements Serializable{  private static final long serialVersionUID = 1L;  private int id;  private String name; private int age;  public int getId() {     return id; }  public void setId(int id) {     this.id = id; }  public String getName() {     return name; }  public void setName(String name) {     this.name = name; }  public int getAge() {     return age; }  public void setAge(int age) {     this.age = age; }  @Override public int hashCode() {     return getId(); }  @Override public boolean equals(Object obj) {     if(obj instanceof Player){         Player player = (Player) obj;         return player.getId() == getId();     }      return false; }  /*public int sortByModel(Object player1, Object player2) {     return ((Player) player1).getName().compareTo(((Player)  player2).getName()); }*/ } </code></pre>  <p>dataTable.xhtml:</p>  <pre><code>   &lt;f:view&gt;     &lt;h:form&gt;         &lt;p:dataTable id="lazyDataTable"              value="#{playerMB.allPlayers}"              var="player" paginator="true"              rows="10"             selection="#{playerMB.player}"              selectionMode="single"             paginatorTemplate="{CurrentPageReport}  {FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink} {RowsPerPageDropdown}"             rowsPerPageTemplate="5,10,15"              style="width: 80%;margin-left: 10%;             margin-right: 10%;"             lazy="true"&gt;              &lt;f:facet name="header"&gt;List of players&lt;/f:facet&gt;              &lt;p:ajax event="rowSelect" update=":playerDialogForm" oncomplete="PF('playerDetails').show();" /&gt;             &lt;p:ajax event="page"                         listener="#{playerMB.casePage}"/&gt;             &lt;p:column sortBy="#{player.name}" headerText="Name" &gt; &lt;!-- sortBy does not work with lazyDataTable  but more work occurs--&gt;                 &lt;h:outputText value="#{player.name}" /&gt;             &lt;/p:column&gt;             &lt;p:column sortBy="#{player.age}" headerText="Age"&gt;                 &lt;h:outputText value="#{player.age}" /&gt;             &lt;/p:column&gt;              &lt;f:facet name="footer"&gt;tot: #{playerMB.sizePlayer}&lt;/f:facet&gt;                         &lt;/p:dataTable&gt;     &lt;/h:form&gt; </code></pre>  <p>PlayerLazyList class code who extends LazyDataModel</p>  <pre><code>public class PlayerLazyList extends LazyDataModel&lt;Player&gt; { //private int pagina;  @Override public List&lt;Player&gt; load(int first, int pageSize, String sortField,         SortOrder sortOrder, Map&lt;String, Object&gt; filters) {     List&lt;Player&gt; allplayers = CreatePlayers.players; //here load all Player      System.out.println("first =" + first + "; pagesize =" + pageSize + "; sortField = " + sortField);     players = CreatePlayers.getPlayers(first, pageSize,allplayers.size()); //here load player from "first" for "max" element      if (sortField != null &amp;&amp; sortField.equals("name") &amp;&amp; sortOrder.name().equals("ASCENDING"))         Collections.sort(players, new NamePlayerComparatorAsc());      if (sortField != null &amp;&amp; sortField.equals("name") &amp;&amp; sortOrder.name().equals("DESCENDING"))         Collections.sort(players, new NamePlayerComparatorDesc());      System.out.println("size dopo" + players.size());      // set the total of players     if(getRowCount() &lt;= 0){         //setRowCount(playerDAO.countPlayersTotal());         setRowCount(allplayers.size());     }     // set the page dize     setPageSize(pageSize);     return players; }  private static final long serialVersionUID = 1L;  private List&lt;Player&gt; players;  //private MyTransaction transaction;   @Override public Object getRowKey(Player player) {     return player.getId(); }  @Override public Player getRowData(String playerId) {     Integer id = Integer.valueOf(playerId);      for (Player player : players) {         if(id.equals(player.getId())){             return player;         }     }      return null; } } </code></pre>  <p>Primefaces 5.2, Wildfly 8.2.0, Mojarra 2.2.8</p>