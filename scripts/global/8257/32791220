<p>I am facing a performance issue while searching the content of a file. I am using the <code>FileStream</code> class to read files (~10 files will be involved for each search with each being ~70 MB in size). However, all of these files are simultaneously being accessed and updated by an another process during my search. As such, I cannot use <code>Buffersize</code> for reading files. Using buffer size in <code>StreamReader</code> takes 3 minutes even though I am using regex.</p>  <p>Has anyone come across a similar situation and could offer any pointers on improving the performance of file search?</p>  <p>Code Snippet </p>  <pre><code>  private static int BufferSize = 32768;   using (FileStream fs = File.Open(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))         {              using (TextReader txtReader = new StreamReader(fs, Encoding.UTF8, true, BufferSize))              {                 System.Text.RegularExpressions.Regex patternMatching = new System.Text.RegularExpressions.Regex(@"(?=\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2})(.*?)(?=\n\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2})", System.Text.RegularExpressions.RegexOptions.IgnoreCase);                 System.Text.RegularExpressions.Regex dateStringMatch = new Regex(@"^\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}");                 char[] temp = new char[1048576];                 while (txtReader.ReadBlock(temp, 0, 1048576) &gt; 0)                 {                     StringBuilder parseString = new StringBuilder();                     parseString.Append(temp);                     if (temp[1023].ToString() != Environment.NewLine)                     {                         parseString.Append(txtReader.ReadLine());                         while (txtReader.Peek() &gt; 0 &amp;&amp; !(txtReader.Peek() &gt;= 48 &amp;&amp; txtReader.Peek() &lt;= 57))                         {                             parseString.Append(txtReader.ReadLine());                         }                     }                     if (parseString.Length &gt; 0)                     {                         string[] allRecords = patternMatching.Split(parseString.ToString());                         foreach (var item in allRecords)                         {                              var contentString = item.Trim();                             if (!string.IsNullOrWhiteSpace(contentString))                             {                                 var matches = dateStringMatch.Matches(contentString);                                 if (matches.Count &gt; 0)                                 {                                      var rowDatetime = DateTime.MinValue;                                     if (DateTime.TryParse(matches[0].Value, out rowDatetime))                                     {                                         if (rowDatetime &gt;= startDate &amp;&amp; rowDatetime &lt; endDate)                                         {                                             if (contentString.ToLowerInvariant().Contains(searchText))                                             {                                                 var result = new SearchResult                                                 {                                                     LogFileType = logFileType,                                                     Message = string.Format(messageTemplateNew, item),                                                     Timestamp = rowDatetime,                                                     ComponentName = componentName,                                                     FileName = filePath,                                                     ServerName = serverName                                                 };                                                 searchResults.Add(result);                                             }                                         }                                     }                                  }                              }                         }                     }                 }             }         }          return searchResults; </code></pre>