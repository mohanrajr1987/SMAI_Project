<p>I'm trying to inline preconfguration data into a dynamically generated script bundled using <code>browserify</code>.</p>  <p>To do so I generate a "module" string like:</p>  <pre><code>const moduleString = `module.exports = ${JSON.stringify(configurationData)};`; </code></pre>  <p>Now I'd like to pass this to <a href="https://github.com/substack/node-browserify#baddfile-opts" rel="nofollow"><code>browserify.add</code></a>. First option would be to write the string to a file, generate the bundle and delete the temp file. This works, but feels tedious.</p>  <p>So I thought of pushing the data to a read stream:</p>  <pre><code>var dataModuleStream = new stream.Readable(); dataModuleStream.push(moduleString); dataModuleStream.push(null); </code></pre>  <p>and then pass this to the <code>.add</code> call:</p>  <pre><code>b.add(dataModuleStream, {expose: 'config'}); </code></pre>  <p>This also works and inlines the correct data as a module named <code>config</code> into the bundle, yet when I try to require that module from my application script:</p>  <pre><code>var config = require('config'); </code></pre>  <p>browserify fails with the error message:</p>  <pre><code>Cannot find module 'config' from '/foo/bar/baz' </code></pre>  <p>which won't happen when I use the temp file approach. When using the stream and I omit the require call the file will get built, including a module named <code>config</code>.</p>  <p>Will my approach even work? Am I doing something wrong?</p>