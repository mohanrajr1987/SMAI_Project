<p>I have found some nice examples (<a href="http://blog.moertel.com/posts/2013-05-26-python-lazy-merge.html" rel="nofollow">here</a>, <a href="http://wla.berkeley.edu/~cs61a/fa11/lectures/streams.html#streams" rel="nofollow">here</a>) of implementing SICP-like streams in Python.  But I am still not sure how to handle an example like the <code>integral</code> found in SICP 3.5.3 "<a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%_sec_Temp_489" rel="nofollow">Streams as signals</a>."</p>  <p>The Scheme code found there is</p>  <pre><code>(define (integral integrand initial-value dt)   (define int     (cons-stream initial-value                  (add-streams (scale-stream integrand dt)                               int)))   int) </code></pre>  <p>What is tricky about this one is that the returned stream <code>int</code> is defined in terms of itself (i.e., the stream <code>int</code> is used in the definition of the stream <code>int</code>).</p>  <p>I believe Python could have something similarly expressive and succinct... but not sure how.  So my question is, what is an analogous stream-y construct in Python?  (What I mean by a stream is the subject of 3.5 in SICP, but briefly, a construct (like a Python generator) that returns successive elements of a sequence of indefinite length, and can be combined and processed with operations such as add-streams and scale-stream that respect streams' lazy character.)</p>