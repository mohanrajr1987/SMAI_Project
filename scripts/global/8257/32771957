<p>I'm trying to read a stream according to the "call read() after every <code>'readable'</code> event" pattern. I want to do this with a limited chunk size, to prevent draining the source stream's internal buffer too quickly. By this I mean using the <code>size</code> parameter of <code>Readable.read</code>, which is advisory but supported by core streams <a href="https://github.com/substack/stream-handbook#consuming-a-readable-stream" rel="nofollow">according</a> to the node.js stream handbook. </p>  <p>However, when using the size argument, the stream does not always generate a new <code>'readable'</code> event after reading a chunk. The node.js stream handbook <a href="https://github.com/substack/stream-handbook#consuming-a-readable-stream" rel="nofollow">suggests</a> calling <code>read(0)</code> to force a refresh of the buffer; this technique is also mentioned in the node documentation. This seems to work to a certain extent, but fails to signal the availability of the last chunk of data in the stream.</p>  <p>The following test case demonstrates the issue:</p>  <pre><code>var fs = require('fs'); fs.writeFileSync('./testfile', 'aaaabbbbcc');  readInChunks(undefined, function() {     console.log("Draining without specifying chunk size works fine\n");      // Now run it again with an explicit chunk size of 4 bytes     // According to docs chunk size is advisory but core libs do support it     readInChunks(4, function() {         console.log('This is never reached');         // Somehow, 'readable' does not emit for the leftover part of the internal buffer ('cc')         // and the terminating null, so the reading process hangs     }); });  function readInChunks(chunkSize, cb) {     console.log('Reading test file with chunk size ' + chunkSize);     var instream = fs.createReadStream('./testfile');      instream.on('readable', function() {         var chunk = instream.read(chunkSize);         if (chunk !== null) {             console.log('Read "' + chunk + '"');             // Trigger buffer refresh to indicate we want to read more if possible             instream.read(0);         } else {             console.log('Read null');         }     });      instream.on('end', function() {         console.log('End of stream');         cb();     }); } </code></pre>  <p>This outputs (Node 0.12.7):</p>  <pre class="lang-none prettyprint-override"><code>Reading test file with chunk size undefined Read "aaaabbbbcc" Read null End of stream Draining without specifying chunk size works fine  Reading test file with chunk size 4 Read "aaaa" Read "bbbb" </code></pre>  <p>What is necessary to pull all of the data from the stream when using the size parameter?</p>