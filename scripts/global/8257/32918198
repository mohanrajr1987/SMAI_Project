<p>I've read about custom streams for C++ but it seems that generally people inherit from <code>std::streambuf</code>, <code>std::istream</code>, and <code>std::ostream</code>. By inspecting those type's declarations it becomes clear that these are meant for characters:</p>  <pre><code>typedef basic_streambuf&lt;char&gt;        streambuf; </code></pre>  <p><a href="http://www.cplusplus.com/reference/istream/istream/" rel="nofollow">The docs</a> confirm this:</p>  <blockquote>   <p>Input stream objects can read and interpret input from sequences of   characters.</p> </blockquote>  <p>Obviously, that makes sense. I'm wondering what would be the correct way of implementing a stream for other types. I do not want to allow text but other forms of binary input/output (I have specific formats). The obvious step seems to be to inherit the <code>basic</code> variants of the above (<code>basic_streambuf</code>, <code>basic_istream</code>, and <code>basic_ostream</code>) and use whatever type I see fit as the template parameter. I failed to find confirmation that this would be the right procedure. So, is it?</p>  <p>Edit for clarification: I have a class called Segment. These streams will send/receive segments and only segments over a WiFi connection as these are used in the communication protocol. Sending anything else would break the protocol. This means that the stream cannot support other types.</p>