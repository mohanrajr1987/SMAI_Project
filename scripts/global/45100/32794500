<p>I'm currently following a tutorial to help me learn how JavaFX works and in the tutorial they're building a small app to manage peoples information. The tutorial is also using XML for loading/saving but I do not want to use XML and would like to use JSON. I have a <code>Person</code> model that uses <code>StringProperty</code>, <code>IntegerProperty</code> and <code>ObjectProperty</code>. My issue is that I'm not exactly sure what the best way to load and save this would be without it saving unnecessary fields and also loading without Gson throwing an error.</p>  <h2>Person</h2>  <pre><code>import java.time.LocalDate;  import javafx.beans.property.IntegerProperty; import javafx.beans.property.ObjectProperty; import javafx.beans.property.SimpleIntegerProperty; import javafx.beans.property.SimpleObjectProperty; import javafx.beans.property.SimpleStringProperty; import javafx.beans.property.StringProperty;  /**  * Model class for a Person.  *  * @author Marco Jakob  */ public class Person {      private final StringProperty firstName;      private final StringProperty lastName;      private final StringProperty street;      private final IntegerProperty postalCode;      private final StringProperty city;      private final ObjectProperty&lt;LocalDate&gt; birthday;      /**      * Default constructor.      */     public Person() {         this(null, null);     }      /**      * Constructor with some initial data.      *       * @param firstName      * @param lastName      */     public Person(String firstName, String lastName) {         this.firstName = new SimpleStringProperty(firstName);         this.lastName = new SimpleStringProperty(lastName);          // Some initial dummy data, just for convenient testing.         this.street = new SimpleStringProperty("some street");         this.postalCode = new SimpleIntegerProperty(1234);         this.city = new SimpleStringProperty("some city");         this.birthday = new SimpleObjectProperty&lt;LocalDate&gt;(LocalDate.of(1999, 2, 21));     }      public String getFirstName() {         return firstName.get();     }      public void setFirstName(String firstName) {         this.firstName.set(firstName);     }      public StringProperty firstNameProperty() {         return firstName;     }      public String getLastName() {         return lastName.get();     }      public void setLastName(String lastName) {         this.lastName.set(lastName);     }      public StringProperty lastNameProperty() {         return lastName;     }      public String getStreet() {         return street.get();     }      public void setStreet(String street) {         this.street.set(street);     }      public StringProperty streetProperty() {         return street;     }      public int getPostalCode() {         return postalCode.get();     }      public void setPostalCode(int postalCode) {         this.postalCode.set(postalCode);     }      public IntegerProperty postalCodeProperty() {         return postalCode;     }      public String getCity() {         return city.get();     }      public void setCity(String city) {         this.city.set(city);     }      public StringProperty cityProperty() {         return city;     }      public LocalDate getBirthday() {         return birthday.get();     }      public void setBirthday(LocalDate birthday) {         this.birthday.set(birthday);     }      public ObjectProperty&lt;LocalDate&gt; birthdayProperty() {         return birthday;     } } </code></pre>  <h3>Saving where <code>personData</code> is an <code>ObservableList</code> of <code>Person</code>s</h3>  <pre><code>try (Writer writer = new FileWriter(file)) {     new GsonBuilder().setPrettyPrinting().disableHtmlEscaping().create().toJson(personData, writer); } </code></pre>  <p>This way of saving currently produces a save with a lot of unnecessary fields like <code>name</code>, <code>value</code>, etc when it could be <code>"firstName": "Hans"</code></p>  <pre><code>[{     "firstName": {         "name": "",         "value": "Hans",         "valid": true,         "helper": {             "observable": {}         }     },     "lastName": {         "name": "",         "value": "Muster",         "valid": true,         "helper": {             "observable": {}         }     },     "street": {         "name": "",         "value": "some street",         "valid": true     },     "postalCode": {         "name": "",         "value": 1234,         "valid": true     },     "city": {         "name": "",         "value": "some city",         "valid": true     },     "birthday": {} }] </code></pre>  <p>Now when even trying to load the string above with Gson it produces an error, <code>Failed to invoke public javafx.beans.property.StringProperty() with no args</code>.</p>  <h2>Loader</h2>  <pre><code>Person[] persons;  try (Reader reader = new FileReader(file)) {     persons = gson.fromJson(reader, Person[].class); }  personData.clear(); personData.addAll(persons); </code></pre>  <p>I've Googled to see if it was possible to use getters and setters with Gson but it doesn't really seem possible so I'm stuck on what to do.</p>