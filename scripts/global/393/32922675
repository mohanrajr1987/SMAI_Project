<p>I'm trying to receive audio data from a custom device based on AWM 2725 cabel. </p>  <p>Everything works perfectly with test code on my PC, but I'm having problems receiving clear data on my android device.</p>  <p>I can receive 80%+ of the data perfectly, but every once in a while the audio 'sputters' and audio getting with noice.</p>  <p>It seems like there is some sort of bug in the buffering (or double-buffering) that happens within Android. </p>  <p>My question is that with usb bulkTrasfer data transfer with some extra noice.and i generate audio file in *.wav formate with set waveHead.</p>  <p>Is their any method to reset buffer every time while data receiving.</p>  <p>Below my data transfer usbcontroller code.</p>  <pre><code>private void GetSnAndVersion() {                            int cnt = 0;     while((TheApp.DeviceSN=="" || TheApp.DeviceVer=="") &amp;&amp; cnt++&lt;1)     {         for(m_DataPackIndex=0;m_DataPackIndex&lt;22;m_DataPackIndex++)         {             if (mStop)  return;                                      try{                 byte[] mRecvBuffer = new byte[64*8];                                 int p =conn.bulkTransfer(epIN, mRecvBuffer, 64*8, 100);                 if(p&gt;0) {                     if(mRecvBuffer[0]==Constants.HEADER_IN &amp;&amp; mRecvBuffer[1]&gt;4)                         AnalyseCommand(0,mRecvBuffer,6,mRecvBuffer[7]+2);                      byte[] sendByte = new byte[64];                     for(int i=0;i&lt;64;i++) sendByte[i] = 0;                     if(m_DataPackIndex == 0) {                         sendByte[0]=0x02;sendByte[1]=0x07;sendByte[6]=0x30;sendByte[7]=0x01;sendByte[8]=0x03;                     } else if(m_DataPackIndex == 1) {                         sendByte[0]=0x02;sendByte[1]=0x09;sendByte[2]=0x01;sendByte[6]=0x30;sendByte[7]=0x03;sendByte[8]=0x11;sendByte[9]=0x00;sendByte[10]=0x1e;                     } else if(m_DataPackIndex == 2) {                         sendByte[0]=0x02;sendByte[1]=0x09;sendByte[2]=0x02;sendByte[6]=0x30;sendByte[7]=0x03;sendByte[8]=0x11;sendByte[9]=0x1e;sendByte[10]=0x1e;                     } else if(m_DataPackIndex == 3) {                         sendByte[0]=0x02;sendByte[1]=0x09;sendByte[2]=0x03;sendByte[6]=0x30;sendByte[7]=0x03;sendByte[8]=0x11;sendByte[9]=0x3c;sendByte[10]=0x1e;                     } else if(m_DataPackIndex == 4) {                         sendByte[0]=0x02;sendByte[1]=0x09;sendByte[2]=0x04;sendByte[6]=0x30;sendByte[7]=0x03;sendByte[8]=0x11;sendByte[9]=0x5a;sendByte[10]=0x1e;                     } else if(m_DataPackIndex == 5) {                         sendByte[0]=0x02;sendByte[1]=0x09;sendByte[2]=0x054;sendByte[6]=0x30;sendByte[7]=0x03;sendByte[8]=0x11;sendByte[9]=0x78;sendByte[10]=0x08;                                                       } else if(m_DataPackIndex &gt; 5 &amp;&amp; m_DataPackIndex &lt;22) {                         if(m_DataPackIndex %2 == 0) {                             sendByte[0]=0x02;sendByte[1]=0x09;sendByte[2]=(byte) (m_DataPackIndex); sendByte[3]=(byte)((m_DataPackIndex-4)/2-1); sendByte[6]=0x30;sendByte[7]=0x03;sendByte[8]=0x05;sendByte[9]=0x0b;sendByte[10]=0x00;                         } else {                             sendByte[0]=0x02;sendByte[1]=0x09;sendByte[2]=(byte) (m_DataPackIndex); sendByte[3]=(byte)((m_DataPackIndex-5)/2-1); sendByte[6]=0x30;sendByte[7]=0x03;sendByte[8]=0x04;sendByte[9]=0x04;sendByte[10]=0x20;                         }                     }                     conn.bulkTransfer(epOUT, sendByte, 64, 100);                 }             }catch(Exception e){                 e("transfer:"+e.getLocalizedMessage());             }                                                                 }     void  SendDataToDevice(int iChannel,byte []pBuffer,int Length) {     byte[] pWriteBuff = new byte[64];     for(int i=0;i&lt;64;i++) pWriteBuff[i] = 0;      pWriteBuff[0] = (byte)0x02;     pWriteBuff[1] = (byte)(4+Length);     pWriteBuff[2] = m_DataPackIndex;     pWriteBuff[3] = (byte)(iChannel%8);     pWriteBuff[4] = 0x00;     pWriteBuff[5] = 0x00;      //System.arraycopy(pWriteBuff, 6, pBuffer, 0, Length);     for(int i=0;i&lt;Length;i++) {         pWriteBuff[6+i] = pBuffer[i];     }     m_WriteBuffList.add(pWriteBuff);      m_DataPackIndex ++;     if ( m_DataPackIndex &gt; 0xFF )     {         m_DataPackIndex = 0x00;     } }      private class UsbReadRunnable implements Runnable {      @Override     public void run() {         try{         while(!mStop)          {             try{                 byte[] mRecvBuffer = new byte[64];                               int p =conn.bulkTransfer(epIN, mRecvBuffer, 64, 100);                 if(mStop) break;                  if(p&gt;0 &amp;&amp; mRecvBuffer[0]==Constants.HEADER_IN &amp;&amp; mRecvBuffer[1]&gt;3) {                                                         m_ReadBuffList.add(mRecvBuffer);                 }                 //Sleep(1);             }catch(Exception e){                 e( "UsbReadRunnable Exception:"+e.getLocalizedMessage());             }         }         conn.close();         conn.releaseInterface(usbInf);         mConnectionHandler.onUsbStopped();         }catch(Exception e){             e( "UsbReadRunnable out Exception:"+e.getLocalizedMessage());         }     }  };  /*  *  Thread loop for writing data to device  *  Writing buffers is added to m_WriteBuffList   */ private class UsbWriteRunnable implements Runnable {     int         FreeTime        = 0;     @Override     public void run() {         FreeTime = 0;         boolean bOn = true;         try{             while(!mStop)             {                 try{                 if(!IsThereAnySentData()) {                     FreeTime++;                     if(FreeTime &gt;= 800) {                         FreeTime = 0;                         //SendLedControlCmd((byte)0,bOn);                         SendDeviceCheckControlCmd();                         bOn = !bOn;                     }                     Sleep(1);                     continue;                 }                  byte[] sendBuff = GetSentDataFromQueue();                 if(sendBuff == null) {                     Sleep(1);                     continue;                 }                 int p = conn.bulkTransfer(epOUT, sendBuff, 64, 100);                 }catch(Exception e) {                     e( "UsbWriteRunnable Exception:"+e.getLocalizedMessage());                 }             }             conn.close();             conn.releaseInterface(usbInf);             mConnectionHandler.onUsbStopped();         }catch(Exception e){             e( "UsbWriteRunnable out Exception:"+e.getLocalizedMessage());         }     }        };  /*  *  Thread loop to analyze reading buffers  *  Process voltage,control ack command, fsk and dtmf frame    */ private class UsbRunnable implements Runnable {     @Override     public void run() {         int iLen = 0;         int iPos = 0;         int iChannel = 0;         try{         while(!mStop)         {             try{                 try{                 if(!IsThereAnyReceivedData()) {                     Sleep(1);                     continue;                 }                    }catch(Exception e){                     e("UsbRunnable IsThereAnyReceivedData");                     Sleep(1);                     continue;                 }                 byte[] readBuff = null;                 try{                     readBuff = GetReceivedDataFromQueue();                     if(readBuff == null) {                         Sleep(1);                         continue;                     }                 }catch(Exception e){                     e("UsbRunnable Poll");                     Sleep(1);                     continue;                 }                  try{                     iLen        = readBuff[1] - 4;                               iChannel    = readBuff[3] &amp; 0x7F;                            iPos        = 6;                                                      if ( iChannel &lt; 0 || iChannel &gt;= 8 || iLen &lt; 0 )                     {                                            continue ;                     }                 }catch(Exception e){                     e("UsbRunnable Middle");                 }                 if(mStop) break;                  //get voltage                  try{                     TheApp.channelList.get(iChannel).GetVoltage(((int)readBuff[4]*256+readBuff[5]) &amp; 0xFFFF);                 }catch(Exception e){                     e("UsbRunnable Voltage");                 }                 try{                     while ( iLen &gt; 0 )                     {                         byte szPacketLen = readBuff[iPos+1];                          if ( szPacketLen &lt; iLen )                         {                             AnalyseCommand(iChannel,readBuff,iPos,szPacketLen+2);                         }                         else                         {                             break;                         }                          iLen -= (szPacketLen + 2);                         iPos += (szPacketLen + 2);                      }                 }catch(Exception e){                     e("UsbRunnable Analyze;"+e.getLocalizedMessage());                 }                  if ( (readBuff[3] &amp; 0x80) != 0 )                 {                                    //FileLog.e("readBuff[3]", readBuff[3]+" "+(readBuff[3] &amp; 0x80));                     TheApp.channelList.get(iChannel).PlayBuffer();                     TheApp.channelList.get(iChannel).PlayBuffer();                     TheApp.channelList.get(iChannel).PlayBuffer();                     TheApp.channelList.get(iChannel).PlayBuffer();                     boolean bResult = TheApp.channelList.get(iChannel).PlayBuffer();                     if ( !bResult )                     {                          if(TheApp.mainActivity.findViewById(R.id.btnStartPlay).isEnabled()) {                             TheApp.mainActivity.onClick(TheApp.mainActivity.findViewById(R.id.btnStopPlay));                         }                     }                 }              }catch(Exception e){                 e( "UsbRunnable Exception:"+e.getLocalizedMessage());             }            }         conn.close();         conn.releaseInterface(usbInf);         mConnectionHandler.onUsbStopped();         }catch(Exception e){             e( "UsbRunnable out Exception:"+e.getLocalizedMessage());         }     }  }; </code></pre>