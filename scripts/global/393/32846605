<p>I want to know when (with 0.5ms accuracy) events from multiple USB devices occur.  Currently I write the firmware for the USB devices and each one implements an ad-hoc, simplified version of NTP's <a href="https://en.wikipedia.org/wiki/Network_Time_Protocol#Clock_synchronization_algorithm" rel="nofollow">clock synchronization algorithm</a> where the USB device is a client and the host PC is the master clock.</p>  <p>This works if the USB device implements my algorithm, but that's <em>decidedly not true</em> for the majority of USB devices in the world.  How can I get this accurate kind of timing from an <em>arbitrary</em> USB device?</p>  <p>I've thought of using an RTOS as some sort of USB proxy, to get deterministic timing data from its USB stack, and then somehow pass the USB events (plus the timing data) to a conventional OS.  But I'm not sure if this is possible or where to begin.</p>