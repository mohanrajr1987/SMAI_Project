<p>I'm using Mike O'Brien's <a href="https://github.com/mikeobrien/HidLibrary" rel="nofollow" title="HidLibrary">HidLibrary</a> to communicate with a custom data acquisition device. This device sends a report when the data is ready or when user has pressed a button. The device also receives reports from a host software. So the input and output reports may arrive at any time and they aren't connected to each other. Here's a simplified version of code I use:</p>  <pre><code>class Program {     static HidDevice dev;      static void Main(string[] args)     {          dev = HidDevices.Enumerate(0x0BED, 0x1515).FirstOrDefault();          if (dev != null)         {             dev.OpenDevice();             dev.ReadReport(Dev_OnReport, 100);              while (Console.ReadKey().Key != ConsoleKey.Q)             {                 if (!dev.IsOpen)                     break;                  if (Console.ReadKey().Key == ConsoleKey.Enter)                 {                     var report = dev.CreateReport();                     report.ReportId = 1;                     dev.WriteReport(report);                     Console.WriteLine("Report is sent.");                 }             }         }         else         {             Console.WriteLine("No device found.");         }     }      static void Dev_OnReport(HidReport report)     {         Console.WriteLine("Received a report with ID=" + report.ReportId);         dev.ReadReport(Dev_OnReport, 100);     } } </code></pre>  <p>The problem is <code>ReadRport()</code> blocks <code>WriteReport()</code>. In my case the data I'm trying to send with <code>WriteReport()</code> is delivered to device only after I receive some report (after <code>Dev_OnReport</code> delegate has been called). Also I noticed the timeout specified to <code>ReadReport()</code> has no effect.</p>