<p>So, I am using jqGrid and due to the nature of this project, I need to build out the colModel dynamically. Meaning, I need to build the model itself dynamically. I am retrieving data fine with my JSON call.  So, I build an array of objects and then assign that array to the colModel property. No errors, but the data doesn't show up.... I am doing something very similar with colNames and it works fine. Does anyone see what I am missing? I have worked on this yesterday afternoon and all morning today and can't find any reason it shouldn't work.  As you can see, it am assigning the siteVal array at the top of my code to the colModel property.</p>  <pre><code>var siteVal = [{name: 'InvtId', index: 'InvtId', width:   20, editable: false, sortable: false, align: 'left', hidden: true}]; siteVal.push({name: 'Descr', index: 'Descr', width: 320, sortable: false, editable: false, align: 'left'}); siteId.forEach(function(site){     curSite = site.substr(0,1)+"Val";     siteVal.push({name: curSite, index:curSite, width: 20, editable: false, sortable: false, align: 'left', hidden: true}); }) siteVal.push({name: 'Qty', index: 'Qty', width: 100, editable: true, sortable: false, align: 'right', hidden: true});     var colData = ['', 'Description']; colData = colData.concat(siteId); colData = colData.concat('Quantity'); console.log(colData); jQuery("#list3").jqGrid({     url: 'OrdersInput.php?do=getdelvprice&amp;state=' + $("#State").val() + '&amp;city=' + $("#City").val() + '&amp;FType=' + $("#FType").val() + '&amp;siteid=' + $("#Plant").val(),     datatype: 'json',     mtype: 'GET',     colNames: colData,     colModel:  siteVal,     loadonce: true,     height: 525,     width: 605,     rowNum: 1000,     key: false,     cellEdit: true,     cellsubmit: 'clientArray',     gridComplete: function() {         $("#MsgDel2").html("");     } }); </code></pre>  <p>In using console.log to see the array right after I build it, this is what I get.</p>  <pre><code>    {"name":"InvtId","index":"InvtId","width":20,"editable":false,"sortable":false,"align":"left","hidden":true},  {"name":"Descr","index":"Descr","width":320,"sortable":false,"editable":false,"align":"left"},  {"name":"TVal","index":"TVal","width":20,"editable":false,"sortable":false,"align":"left","hidden":true},  {"name":"MVal","index":"MVal","width":20,"editable":false,"sortable":false,"align":"left","hidden":true},  {"name":"PVal","index":"PVal","width":20,"editable":false,"sortable":false,"align":"left","hidden":true},  {"name":"DVal","index":"DVal","width":20,"editable":false,"sortable":false,"align":"left","hidden":true},  {"name":"WVal","index":"WVal","width":20,"editable":false,"sortable":false,"align":"left","hidden":true},  {"name":"BVal","index":"BVal","width":20,"editable":false,"sortable":false,"align":"left","hidden":true},  {"name":"Qty","index":"Qty","width":100,"editable":true,"sortable":false,"align":"right","hidden":true} </code></pre>  <p>This looks exactly as I think it should look in that it completely mimics the existing code where the colModel is defined statically. The thing is this must be dynamic to account for future growth...</p>