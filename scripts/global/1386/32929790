<p>I'm following a tutorial on utilizing the camera in an Android app. I am getting the error "Permission Denial: can't use the camera" when running debug, both on emulator and physical device. I have tried a variety of permissions in my manifest file. It seems most people who have had this error have had a typo, a missing permission, or the permissions not in the right place in their manifest.</p>  <p>Here's my manifest file:</p>  <pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"     package="com.example.karudo.dbzrealpowerup" &gt;      &lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" /&gt;     &lt;uses-permission android:name="android.permission.FLASHLIGHT" /&gt;     &lt;uses-permission android:name="android.permission.CAMERA" /&gt;     &lt;uses-feature android:name="android.hardware.camera2" /&gt;      &lt;application         android:allowBackup="true"         android:icon="@mipmap/ic_launcher"         android:label="@string/app_name"         android:theme="@style/AppTheme" &gt;         &lt;activity             android:name=".DBZHome"             android:label="@string/app_name" &gt;             &lt;intent-filter&gt;                 &lt;action android:name="android.intent.action.MAIN" /&gt;                  &lt;category android:name="android.intent.category.LAUNCHER" /&gt;             &lt;/intent-filter&gt;         &lt;/activity&gt;         &lt;activity             android:name=".DBZStartPowerUp"             android:label="@string/title_activity_dbzstart_power_up" &gt;         &lt;/activity&gt;     &lt;/application&gt;  &lt;/manifest&gt; </code></pre>  <p>Here's my activity:</p>  <pre><code>package com.example.karudo.dbzrealpowerup;  import android.app.Activity; import android.content.Context; import android.graphics.SurfaceTexture; import android.hardware.camera2.CameraAccessException; import android.hardware.camera2.CameraCharacteristics; import android.hardware.camera2.CameraDevice; import android.hardware.camera2.CameraManager; import android.hardware.camera2.params.StreamConfigurationMap; import android.os.Bundle; import android.util.Size; import android.view.Menu; import android.view.MenuItem; import android.view.TextureView; import android.widget.Toast;  import java.util.ArrayList; import java.util.Collections; import java.util.Comparator; import java.util.List;  public class DBZStartPowerUp extends Activity {      private Size mPreviewSize;     private String mCameraId;     private TextureView mTextureView;     private TextureView.SurfaceTextureListener mSurfaceTextureListener =             new TextureView.SurfaceTextureListener() {                  @Override                 public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {                     setupCamera(width, height);                     openCamera();                 }                  @Override                 public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {                  }                  @Override                 public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {                     return false;                 }                  @Override                 public void onSurfaceTextureUpdated(SurfaceTexture surface) {                  }             };      private CameraDevice mCameraDevice;     private CameraDevice.StateCallback mCameraDeviceStateCallback             = new CameraDevice.StateCallback() {          @Override         public void onOpened(CameraDevice camera) {             mCameraDevice = camera;             Toast.makeText(getApplicationContext(), "Camera Opened!", Toast.LENGTH_SHORT).show();         }          @Override         public void onDisconnected(CameraDevice camera) {             camera.close();             mCameraDevice = null;         }          @Override         public void onError(CameraDevice camera, int error) {             camera.close();             mCameraDevice = null;         }     };      @Override     protected void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         setContentView(R.layout.activity_dbzstartpowerup);         mTextureView = (TextureView) findViewById(R.id.dbzCameraPreview);     }      @Override     public void onResume() {         super.onResume();         if(mTextureView.isAvailable()) {          } else {             mTextureView.setSurfaceTextureListener(mSurfaceTextureListener);         }     }      @Override     public boolean onCreateOptionsMenu(Menu menu) {         // Inflate the menu; this adds items to the action bar if it is present.         getMenuInflater().inflate(R.menu.menu_dbzstartpowerup, menu);         return true;     }      @Override     public boolean onOptionsItemSelected(MenuItem item) {         // Handle action bar item clicks here. The action bar will         // automatically handle clicks on the Home/Up button, so long         // as you specify a parent activity in AndroidManifest.xml.         int id = item.getItemId();          //noinspection SimplifiableIfStatement         if (id == R.id.action_settings) {             return true;         }          return super.onOptionsItemSelected(item);     }      private void setupCamera(int width, int height) {         CameraManager cameraManager = (CameraManager) getSystemService(Context.CAMERA_SERVICE);         try {             for(String cameraId : cameraManager.getCameraIdList()) {                 CameraCharacteristics cameraCharacteristics = cameraManager.getCameraCharacteristics(cameraId);                 if (cameraCharacteristics.get(CameraCharacteristics.LENS_FACING) ==                         CameraCharacteristics.LENS_FACING_FRONT) {                     continue;                 }                 StreamConfigurationMap map = cameraCharacteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);                 mPreviewSize = getPreferredPreviewSize(map.getOutputSizes(SurfaceTexture.class), width, height);                 mCameraId = cameraId;                 return;             }         } catch (CameraAccessException e) {             e.printStackTrace();         }     }      private Size getPreferredPreviewSize(Size[] mapSizes, int width, int height) {         List&lt;Size&gt; collectorSizes = new ArrayList&lt;&gt;();         for(Size option : mapSizes) {             if(width &gt; height) {                 if(option.getWidth() &gt; width &amp;&amp;                         option.getHeight() &gt; height) {                     collectorSizes.add(option);                 }             } else {                 if(option.getWidth() &gt; height &amp;&amp;                         option.getHeight() &gt; width) {                     collectorSizes.add(option);                 }             }         }         if(collectorSizes.size() &gt; 0) {             return Collections.min(collectorSizes, new Comparator&lt;Size&gt;() {                 @Override                 public int compare(Size lhs, Size rhs) {                     return Long.signum(lhs.getWidth() * lhs.getHeight() - rhs.getWidth() * rhs.getHeight());                 }             });         }         return mapSizes[0];     }      private void openCamera() {         CameraManager cameraManager = (CameraManager) getSystemService(Context.CAMERA_SERVICE);         try {             cameraManager.openCamera(mCameraId, mCameraDeviceStateCallback, null);         } catch (CameraAccessException e) {             e.printStackTrace();         }     } } </code></pre>  <p>And the error in my logcat:</p>  <pre><code>10-04 03:15:02.740     961-8780/? E/CameraService﹕ Permission Denial: can't use the camera pid=20601, uid=10059 10-04 03:15:02.741  20601-20601/com.example.karudo.dbzrealpowerup E/AndroidRuntime﹕ FATAL EXCEPTION: main     Process: com.example.karudo.dbzrealpowerup, PID: 20601     java.lang.SecurityException: Lacking privileges to access camera service             at android.hardware.camera2.utils.CameraBinderDecorator.throwOnError(CameraBinderDecorator.java:108)             at android.hardware.camera2.legacy.CameraDeviceUserShim.connectBinderShim(CameraDeviceUserShim.java:336)             at android.hardware.camera2.CameraManager.openCameraDeviceUserAsync(CameraManager.java:324)             at android.hardware.camera2.CameraManager.openCamera(CameraManager.java:454)             at com.example.karudo.dbzrealpowerup.DBZStartPowerUp.openCamera(DBZStartPowerUp.java:163)             at com.example.karudo.dbzrealpowerup.DBZStartPowerUp.access$100(DBZStartPowerUp.java:23)             at com.example.karudo.dbzrealpowerup.DBZStartPowerUp$1.onSurfaceTextureAvailable(DBZStartPowerUp.java:34)             at android.view.TextureView.getHardwareLayer(TextureView.java:368)             at android.view.View.updateDisplayListIfDirty(View.java:15151)             at android.view.View.draw(View.java:15948)             at android.view.ViewGroup.drawChild(ViewGroup.java:3609)             at android.view.ViewGroup.dispatchDraw(ViewGroup.java:3399)             at android.view.View.updateDisplayListIfDirty(View.java:15169)             at android.view.View.draw(View.java:15948)             at android.view.ViewGroup.drawChild(ViewGroup.java:3609)             at android.view.ViewGroup.dispatchDraw(ViewGroup.java:3399)             at android.view.View.updateDisplayListIfDirty(View.java:15169)             at android.view.View.draw(View.java:15948)             at android.view.ViewGroup.drawChild(ViewGroup.java:3609)             at android.view.ViewGroup.dispatchDraw(ViewGroup.java:3399)             at android.view.View.updateDisplayListIfDirty(View.java:15169)             at android.view.View.draw(View.java:15948)             at android.view.ViewGroup.drawChild(ViewGroup.java:3609)             at android.view.ViewGroup.dispatchDraw(ViewGroup.java:3399)             at android.view.View.draw(View.java:16181)             at com.android.internal.policy.PhoneWindow$DecorView.draw(PhoneWindow.java:2690)             at android.view.View.updateDisplayListIfDirty(View.java:15174)             at android.view.ThreadedRenderer.updateViewTreeDisplayList(ThreadedRenderer.java:281)             at android.view.ThreadedRenderer.updateRootDisplayList(ThreadedRenderer.java:287)             at android.view.ThreadedRenderer.draw(ThreadedRenderer.java:322)             at android.view.ViewRootImpl.draw(ViewRootImpl.java:2615)             at android.view.ViewRootImpl.performDraw(ViewRootImpl.java:2434)             at android.view.ViewRootImpl.performTraversals(ViewRootImpl.java:2067)             at android.view.ViewRootImpl.doTraversal(ViewRootImpl.java:1107)             at android.view.ViewRootImpl$TraversalRunnable.run(ViewRootImpl.java:6013)             at android.view.Choreographer$CallbackRecord.run(Choreographer.java:858)             at android.view.Choreographer.doCallbacks(Choreographer.java:670)             at android.view.Choreographer.doFrame(Choreographer.java:606)             at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:844)             at android.os.Handler.handleCallback(Handler.java:739)             at android.os.Handler.dispatchMessage(Handler.java:95)             at android.os.Looper.loop(Looper.java:148)             at android.app.ActivityThread.main(ActivityThread.java:5417)             at java.lang.reflect.Method.invoke(Native Method)             at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:726)             at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:616) </code></pre>  <p>I'm new to app development and admittedly I'm no good at debugging, but my manifest permissions appear to be correct from what I've seen of other people's files (and the tutorial which is only 4 months old).</p>  <p>Can anyone please tell me what I've done wrong?</p>  <p>Cheers, Lee.</p>