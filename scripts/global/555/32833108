<p>I have a code snippet to format a 2D array to a specific string format. The code snippet works well with recent versions of NumPy (e.g. 1.9.2), but the same fails with NumPy 1.4.1, which is the current version for CentOS 6.6.</p>  <pre><code>import numpy as np cfmt = '%14.6E' vfmt = np.vectorize(cfmt.__mod__)  Traceback (most recent call last):   File "/usr/lib64/python2.6/site-packages/numpy/lib/function_base.py", line 1762, in __init__     nin, ndefault = _get_nargs(pyfunc)   File "/usr/lib64/python2.6/site-packages/numpy/lib/function_base.py", line 1694, in _get_nargs     raise ValueError, 'failed to determine the number of arguments for %s' % (obj) ValueError: failed to determine the number of arguments for &lt;method-wrapper '__mod__' of str object at 0xb461e0&gt; </code></pre>  <p>From <a href="https://mail.scipy.org/pipermail/numpy-discussion/2010-September/052655.html" rel="nofollow">Numpy-discussion</a>, this appears to be an issue with <code>functools.partial</code>, with a recommend workaround to use <code>lambda</code>. However, here are my failed attempts:</p>  <pre><code>vfmt1 = np.vectorize(lambda x: cfmt.__mod__(x)) vfmt2 = np.vectorize(lambda x: cfmt % (x,), ['|S14'])  # attempt to specify otype  # A 2D array with shape (1, 3) ar = np.array([[1.0e35, 9.999999, 10.0]])  print(vfmt1(ar))  # [['  1.0000' '  9.9999' '  1.0000']] print(vfmt2(ar))  # [['  1.0000' '  9.9999' '  1.0000']] </code></pre>  <p>These values appear to be strings clipped to 8 characters, and are essentially garbage.</p>  <p>The expected formatted result using a recent version of NumPy is:</p>  <pre><code>array([['  1.000000E+35', '  9.999999E+00', '  1.000000E+01']], type='|S14') </code></pre>  <p>Any suggestions on how to get the expected outputs using older versions of NumPy? Or generally how to vectorize formatting of numeric arrays to character arrays?</p>