<p><strong>EDIT</strong>: issue resolved</p>  <p>I'm having some trouble understanding the compiler error behind this.</p>  <p>Let's say we have a simple program that collects three integers in a tuple and prints the tuple:</p>  <pre><code>#include &lt;iostream&gt; #include &lt;tuple&gt;  using namespace std;  typedef tuple&lt;int,int,int&gt; int3;  void pretty_int3(const int3&amp; i);  int main(int argc, char *argv[]){   ios_base::sync_with_stdio(false);    int3 v = int3(7,8,9);    pretty_int3(v);    return 0; } </code></pre>  <p>Now if I choose to implement <code>pretty_int3</code> like this, everything works fine:</p>  <pre><code>void pretty_int3(const int3&amp; i){     cout &lt;&lt; "{";     cout &lt;&lt; get&lt;0&gt;(i) &lt;&lt; ",";     cout &lt;&lt; get&lt;1&gt;(i) &lt;&lt; ",";     cout &lt;&lt; get&lt;2&gt;(i);     cout &lt;&lt; "}" &lt;&lt; "\n"; } </code></pre>  <p>No surprises there. However, when I do this, instead ...</p>  <pre><code>void pretty_int3(const int3&amp; i){     cout.sync_with_stdio(true);     printf("{%d,%d,%d}\n",get&lt;0&gt;(i),get&lt;1&gt;(i),get&lt;2&gt;(i));     cout.sync_with_stdio(false); } </code></pre>  <p>This fails to compile:</p>  <blockquote>   <p>In file included from test.cpp:2:0:</p>      <p>/usr/include/c++/4.8/tuple: In instantiation of ‘struct std::tuple_element&lt;1u, std::tuple >’:</p>      <p>/usr/include/c++/4.8/tuple:682:12:   recursively required from ‘struct std::tuple_element&lt;2u, std::tuple >’</p>      <p>/usr/include/c++/4.8/tuple:682:12:   required from ‘struct std::tuple_element&lt;3u, std::tuple >’</p>      <p>/usr/include/c++/4.8/tuple:773:5:   required by substitution of ‘template constexpr typename std::__add_r_ref >::type>::type std::get(std::tuple&lt;_Elements ...>&amp;&amp;) [with unsigned int __i = 3u; _Elements = {int, int, int}]’</p>      <p>...</p> </blockquote>  <p>And I sure don't understand this error.</p>  <p>What is this telling me and why, and how do I resolve the issue?</p>