<p>Recently i read <em>Collective Intelligence</em> wrote by Toby Segaran. But i was stuck in understanding some code in the book. </p>  <p>Here's some the code in the recommendations.py</p>  <p>The code below is to returns the best matches for person from the preference dictionary and get recommendations for a person by using a weighted average  of every other user's rankings </p>  <pre><code># Return the Pearson correlation coefficient for p1 and p2 def sim_person(prefs, p1, p2):     # Get the list of shared_items     si={}     for item in prefs[p1]:         if item in prefs[p2]:si[item]=1      # Find the number of elements      n=len(si)      # if they have no ratings in common, return 0     if n==0: return 0      # Add up all the preferences     sum1 = sum([prefs[p1][it] for it in si])     sum2 = sum([prefs[p2][it] for it in si])      # Sum up the squares     sum1Sq = sum([pow(prefs[p1][it],2) for it in si])     sum2Sq = sum([pow(prefs[p2][it],2) for it in si])      # Sum up the products     pSum = sum([prefs[p1][it]*prefs[p2][it] for it in si])      # Calculate Person score     num = pSum - (sum1*sum2/n)     den = sqrt((sum1Sq - pow(sum1,2)/n)*(sum2Sq - pow(sum2,2)/n))     if den == 0: return 0      r = num/den     return r  # Returns the best matches for person from the prefs dictionary. # Number of results and similarity function are optional params. def topMatch(prefs, person, n=5, similarity=sim_person):     scores = [(similarity(prefs, person, other), other)                          for other in prefs if other!=person]      # Sort the list so the highest scores appear at the top     scores.sort()     scores.reverse()     return scores[0:n]  # Gets recommendations for a person by using a weighted average # of every other user's rankings  def getRecommendations(prefs, person, similarity=sim_person):     totals = {}     simSums = {}     for other in prefs:         # don't compare me to myself         if other == person: continue         sim = similarity(prefs, person, other)          # ignore scores of zero of lower         if sim&lt;=0: continue         for item in prefs[other]:              # only score movies I haven't seen yet             if item not in prefs[person] or prefs[person][item]==0:                 # Similarity * Score                 totals.setdefault(item, 0)                 totals[item]+=prefs[other][item]*sim                 # Sum of similarities                 simSums.setdefault(item, 0)                 simSums[item]+=sim          # Create the normalized list          rankings = [(total/simSums[item], item) for item, total in totals.items()]          # Return the sorted list          rankings.sort()         rankings.reverse()         return rankings  </code></pre>  <p>The first code i could not understand is:</p>  <pre><code>scores = [(similarity(prefs, person, other), other) for other in prefs if other!=person] </code></pre>  <p>Does the second other in this sentence mean a parameter? Can i change this code into:</p>  <pre><code>scores = [(similarity(prefs, person, other) for other in prefs if other!=person]  </code></pre>  <p>The second code I could not understand is:</p>  <pre><code>rankings = [(total/simSums[item], item) for item, total in totals.items()] </code></pre>