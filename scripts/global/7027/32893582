<p>I have a relatively simple Spring Boot application that, by default, is secured over SSL on port 9443 using a self-signed certificate, which works great for serving up APIs to, say, a mobile app. However, I would now like to develop an unsecured web application with its own frontend and serve up a subset of the content I allow over SSL.</p>  <p>This is what I've come up with so far, which enables port 8080 over HTTP in addition to port 9443, the latter I've defined in application.properties:</p>  <pre><code>@SpringBootApplication @ComponentScan public class Application extends WebMvcConfigurerAdapter {      public static void main(String[] args) {         SpringApplication.run(Application.class, args);     }      @Bean     public EmbeddedServletContainerFactory servletContainer() {         TomcatEmbeddedServletContainerFactory tomcat = new TomcatEmbeddedServletContainerFactory();         tomcat.addAdditionalTomcatConnectors(createWebsiteConnector());         return tomcat;     }      private Connector createWebsiteConnector() {         Connector connector = new Connector(TomcatEmbeddedServletContainerFactory.DEFAULT_PROTOCOL);         connector.setPort(8080);         return connector;     } } </code></pre>  <p>I am now faced with the task of only exposing endpoints to the 8080 connection, and all of them to 9443. Obviously, the latter currently works by default, but right now 8080 can access everything 9443 can. Ideally, I would like to control access to certain request mappings defined in a "shared" controller that both connections have access to, i.e. something like this:</p>  <pre><code>@RequestMapping(value = "/public", method = RequestMethod.GET) public List&lt;String&gt; getPublicInfo() {     // ... }  @HTTPSOnly @RequestMapping(value = "/secured", method = RequestMethod.GET) public List&lt;String&gt; getSecuredInfo() {     // ... } </code></pre>  <p>I assume something like what I have above isn't actually possible, but does anyone know how I could achieve the same effect?</p>  <p>Thanks in advance for any help!</p>