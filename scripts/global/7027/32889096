<p>I have a need of using separate <code>EntityManagerFactory</code> for each HTTP session in Spring 4. It is because of authentication by DB login-password. So I make session-scoped <code>DataSource</code> and <code>EntityManagerFactory</code> like this:</p>  <pre><code>@Bean @Scope(value = "session", proxyMode = ScopedProxyMode.INTERFACES) public FactoryBean&lt;EntityManagerFactory&gt; entityManagerFactory() throws SQLException {     LocalContainerEntityManagerFactoryBean factoryBean = new LocalContainerEntityManagerFactoryBean();             factoryBean.setDataSource(dataSource());     factoryBean.setPersistenceProviderClass(HibernatePersistence.class);     factoryBean.setPersistenceUnitName("db");     return factoryBean; } </code></pre>  <p>Then I try to inject it into singleton:</p>  <pre><code>@PersistenceContext private EntityManager entityManager; </code></pre>  <p>But I'm getting an error: </p>  <pre><code>NoUniqueBeanDefinitionException: No qualifying bean of type [javax.persistence.EntityManagerFactory] is defined: expected single matching bean but found 2: scopedTarget.entityManagerFactory,entityManagerFactory </code></pre>  <p>What could be done to inject it right?</p>