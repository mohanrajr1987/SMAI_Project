<p>I'm currently developing a JAX-RS Servlet which I then want to deploy in a Glassfish 4.1 Server (consequently the JAX-RS runtime is Jersey 2.x).</p>  <p>Instead of going with Spring for the configuration and DI stuff, I wanted to try out the Java EE way of doing this. However, neither CDI nor the injection of the datasource I configured in the Glassfish Server is working. But first of all here are the relevant things about the servlet.</p>  <p>Dependencies (are declared with version and scope in the parent pom - which is not the one you see here):</p>  <pre><code>&lt;dependencies&gt;     &lt;!-- Java EE API --&gt;     &lt;dependency&gt;         &lt;groupId&gt;javax&lt;/groupId&gt;         &lt;artifactId&gt;javaee-api&lt;/artifactId&gt;     &lt;/dependency&gt;      &lt;!-- Jersey CDI support --&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.glassfish.jersey.ext.cdi&lt;/groupId&gt;         &lt;artifactId&gt;jersey-cdi1x&lt;/artifactId&gt;     &lt;/dependency&gt;      &lt;dependency&gt;         &lt;groupId&gt;org.glassfish.jersey.ext.cdi&lt;/groupId&gt;         &lt;artifactId&gt;jersey-cdi1x-ban-custom-hk2-binding&lt;/artifactId&gt;     &lt;/dependency&gt;      &lt;!-- Logging dependencies --&gt;     &lt;dependency&gt;         &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;         &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;     &lt;/dependency&gt; &lt;/dependencies&gt; </code></pre>  <p>web.xml:</p>  <pre><code>&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"      xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"      version="3.1"&gt;  &lt;servlet&gt;     &lt;servlet-name&gt;Backend&lt;/servlet-name&gt;     &lt;servlet-class&gt;org.glassfish.jersey.servlet.ServletContainer&lt;/servlet-class&gt;      &lt;!-- Disable Moxy JSON --&gt;     &lt;init-param&gt;         &lt;param-name&gt;jersey.config.disableMoxyJson&lt;/param-name&gt;         &lt;param-value&gt;true&lt;/param-value&gt;     &lt;/init-param&gt;      &lt;!-- Register resource classes --&gt;     &lt;init-param&gt;         &lt;param-name&gt;jersey.config.server.provider.classnames&lt;/param-name&gt;         &lt;param-value&gt;org.test.Service&lt;/param-value&gt;     &lt;/init-param&gt; &lt;/servlet&gt;  &lt;servlet-mapping&gt;     &lt;servlet-name&gt;Backend&lt;/servlet-name&gt;     &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;  &lt;/web-app&gt; </code></pre>  <p>beans.xml:</p>  <pre><code>&lt;beans xmlns="http://xmlns.jcp.org/xml/ns/javaee"    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd"    version="1.1" bean-discovery-mode="all"&gt; &lt;/beans&gt; </code></pre>  <p>Service.java:</p>  <pre><code>@Path("/") @RequestScoped public class Service {      @Inject     private DataProvider dataProvider;      @Path("test")     @GET     @Produces({MediaType.APPLICATION_JSON})     public Response test(){         return Response.ok(dataProvider.getArticles()).build();     }  } </code></pre>  <p>SQLDataProvider.java:</p>  <pre><code>@Default @ApplicationScoped @Singleton @Path("singleton-bean") public class SQLDataProvider implements DataProvider {      @Resource(name = "jdbc/db_1")     private DataSource dataSource;      private SQLQueryFactory factory;      @Override     public List&lt;Article&gt; getArticles() {         if(factory == null){             factory = new SQLQueryFactory(new Configuration(new MySQLTemplates()), dataSource);         }          QArtikel artikel = QArtikel.artikel;         List&lt;String&gt; names = factory.select(artikel.artikeltyp).from(artikel).fetch();          return names.stream().map(Article::new).collect(Collectors.toList());     } } </code></pre>  <p>If I deploy this servlet in the Glassfish Server and do a Request, the following exception is thrown:</p>  <pre><code>javax.servlet.ServletException: A MultiException has 3 exceptions.  They are:     1. org.glassfish.hk2.api.UnsatisfiedDependencyException: There was no object available for injection at SystemInjecteeImpl(requiredType=DataProvider,parent=SkiBazaarService,qualifiers={},position=-1,optional=false,self=false,unqualified=null,158365417)     2. java.lang.IllegalArgumentException: While attempting to resolve the dependencies of org.skiclub.service.SkiBazaarService errors were found     3. java.lang.IllegalStateException: Unable to perform operation: resolve on org.skiclub.service.SkiBazaarService </code></pre>  <p>As you can see I already tried the solution of user G. Demecki from <a href="http://stackoverflow.com/questions/18963627/how-to-integrate-jax-rs-with-cdi-in-a-servlet-3-0-container">this post</a> by including the two Jersey dependencies in my servlet - but with no success. I also tried the <a href="http://docs.oracle.com/javaee/7/tutorial/jaxrs-advanced004.htm" rel="nofollow">solution</a> from Oracle, which was posted somewhere in <a href="http://stackoverflow.com/questions/16216759/dependency-injection-with-jersey-2-0">this post</a>. But this did not work for me as well.</p>  <p>I also saw a solution in which you specify the bindings from Types to Instances for the HK2 runtime in <a href="http://stackoverflow.com/questions/17224270/how-to-enable-cdi-inject-in-web-service-jaxrs-jersey-on-java-se-running-grizzl">this post</a>. I admit that I haven't tried it because I think that having to programmaticlly register the instances to be injected makes absolute nonsense of the idea behind DI.</p>  <p>But there also is another problem. If I modify the declaration of the DataProvider in the Service class to the following</p>  <pre><code>private DataProvider dataProvider = new SQLDataProvider(); </code></pre>  <p>the problem with CDI vanishes but a NPE is thrown, since the DataSource I'm trying to get from JNDI is not injected into the instance of the SQLDataProvider. So it seems that the Resource Injection of Java EE also does not work in the JAX-RS Container. For this problem I did not find any possible solutions during my research.</p>  <p>I hope that someone can show me what I need to change in my configuration in order to make CDI and Resource Injection work with JAX-RS because at the moment, this seems impossible for me.</p>  <p>Kind Regards Pascal</p>