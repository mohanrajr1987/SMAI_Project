<p>I read a lot about the possibility of injection with jax rs 2.0 and in particular with jersey.</p>  <p>I even read that ejb injection is expected in jax rs 2.0 spec. But i still haven't found a unique solution among the variety of posts i read over the net.</p>  <p>In my use case i'm working with:</p>  <p>WildFly 9.0 and Jersey 2.x</p>  <p>I have a webapplication exposing my REST services and importing a jar implementing my model data.</p>  <p>This is the CDI approach:</p>  <pre><code>@RequestScoped  @Path("/myPath") public class ModelRetriever {  @Context SecurityContext securityContext;  @Inject private IMyModel MyModel;     @Path("{i}")           @GET  @Produces("application/json") public Response countries(@PathParam("i") String countryId)          throws JSONException, Failure, IOException {      MyModel.doSomething(); } </code></pre>  <p>This is my IMyModel interface</p>  <pre><code>public interface IKasPrincipal extends Principal {     public void doSomething(); } </code></pre>  <p>And this is MyModel implementation:</p>  <pre><code>@RequestScope public class MyModelImpl implements IMyModel {      public void doSomehting() {         doSomething();     } } </code></pre>  <p>Another method i tried is to use EJB injection changing my previous annotations like this:</p>  <pre><code>@Stateless  @Path("/myPath") public class ModelRetriever {  @EJB private IMyModel MyModel;     @Path("{i}")           @GET  @Produces("application/json") public Response countries(@PathParam("i") String countryId)          throws JSONException, Failure, IOException {      MyModel.doSomething(); } </code></pre>  <p>This is my IMyModel interface</p>  <pre><code>@Local public interface IKasPrincipal extends Principal {     public void doSomething(); } </code></pre>  <p>And this is MyModel implementation:</p>  <pre><code>@Stateless public class MyModelImpl implements IMyModel {      public void doSomehting() {         doSomething();     } }  </code></pre>  <p>i get a null object using EJB approach and i get this exception using CDI </p>  <pre><code>Caused by: org.glassfish.hk2.api.UnsatisfiedDependencyException: There was no object available for injection at SystemInjecteeImpl(requiredType=IMyModel,parent=ModelRetriever,qualifiers={},position=-1,optional=false,self=false,unqualified=null,616459318) at org.jvnet.hk2.internal.ThreeThirtyResolver.resolve(ThreeThirtyResolver.java:75) at org.jvnet.hk2.internal.ClazzCreator.resolve(ClazzCreator.java:211) at org.jvnet.hk2.internal.ClazzCreator.resolveAllDependencies(ClazzCreator.java:234) </code></pre>  <p>So is there anything i'm missing?</p>