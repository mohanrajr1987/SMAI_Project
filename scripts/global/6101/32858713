<p>I have a Jersey web service that uses Hibernate to do some persistence.  I have implemented creation/disposal of the EntityManagerFactory using hk2 provider logic I found a stack overflow, which has greatly helped keep the number of DB connections low.  I don't want to force users to have a DB, so I want the code to gracefully handle that case.  However, I can't seem to figure it out, other than having to comment out my @Inject annotation.  Anyone know how to use a custom @Inject and code it to allow that to be null?</p>  <p>I tried to catch that exception in DBManager when Persistence.create fails and just check for null in my WebServiceClass.  But it crashes at the @Inject line and the exception is not caught.  I looked around at that findOrCreate null exception and saw there is a method called supportsNullCreation() but have not found examples on how to use it.</p>  <p>This is what my code looks like:</p>  <p>Injectable DB Provider using HK2:</p>  <pre><code>public class DbManager          implements Factory&lt;EntityManagerFactory&gt; {    private static EntityManagerFactory factory = null;     @Inject    public DbManager()    {       try       {          factory = Persistence.createEntityManagerFactory("myapp");       }       catch ( Exception eee )       {          // just means DB is not connected which I want to allow          System.out.println("No DB, that should be okay");       }    }     @Override    public EntityManagerFactory provide() {       return factory;    }     @Override    public void dispose(EntityManagerFactory emf) {       if ( emf != null &amp;&amp; emf.isOpen() )       {          emf.close();       }    }     public EntityManagerFactory getEntityMgrFactory()    {       return factory;    } } </code></pre>  <p>Then here is how the provider is created in the Jersey app:</p>  <pre><code>@ApplicationPath("rest") public class MyApplication extends ResourceConfig  {     public MyApplication()     {          ....      // Provider of DB     this.register( new AbstractBinder()     {        @Override        public void configure()        {  bindFactory(DbManager.class).to(EntityManagerFactory.class).in(Singleton.class);        }     }); } </code></pre>  <p>Then it is used like this:</p>  <pre><code>@Singleton @Path("myservice") public class WebServiceClass {     // NOTE: Right now I have to comment this to run without a DB    @Inject    private EntityManagerFactory entityManagerFactory = null;    ... </code></pre>  <p>The exception I get is this...</p>  <pre><code>java.lang.IllegalStateException: Context   org.jvnet.hk2.internal.SingletonContext@6cae5847 findOrCreate returned a null for  descriptor SystemDescriptor(     implementation=com.db.DbManager     contracts={javax.persistence.EntityManagerFactory}     scope=javax.inject.Singleton     qualifiers={}     descriptorType=PROVIDE_METHOD     descriptorVisibility=NORMAL     metadata=     rank=0     loader=org.glassfish.hk2.utilities.binding.AbstractBinder$2@7050f2b1     proxiable=null     proxyForSameScope=null     analysisName=null     id=145     locatorId=0     identityHashCode=863132354     reified=true)     at org.jvnet.hk2.internal.Utilities.createService(Utilities.java:2075) ... </code></pre>