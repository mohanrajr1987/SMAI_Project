<p>I'm building a <code>RESTful</code> service on a <code>JAX-RS</code> server and some clients that will be attached to it.</p>  <p>The hour came to start testing the endpoints on the clients and I tried first on <code>JavaScript</code> since until now, it has been very easy for me to make requests to third party resources with this code:</p>  <pre><code>function httpGet(theUrl){             var xmlHttp = new XMLHttpRequest();             xmlHttp.open( "GET", theUrl, false );             xmlHttp.send( null );             return xmlHttp.responseText; } </code></pre>  <p>I know I shouldn't do synchronous requests but that's off topic.</p>  <p>On Firefox, the error I get is:</p>  <pre><code>Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at http://someurl.com/someresource/. (Reason: CORS header 'Access-Control-Allow-Origin' missing). </code></pre>  <p>The requests don't work both on my local server and on the deployment server.</p>  <p>I've found that most solutions to this problem have to do something with setting a header <code>Access-Control-Allow-Origin: *</code>. I've tried this and it hasn't worked for me.</p>  <p>At first I thought it was a problem with my server configuration, but now I think it's the browser that is not letting me execute the request because of the Same Origin Policy. Is this correct? If it's correct, why does the exact same code as above, with no <code>Access-Control-Allow-Headers: *</code>, works for third party services (Google, Facebook, etc.)?</p>  <p>Is there a whitelist of sites that are always allowed to break the Same Origin Policy?</p>  <p>If the answer to the last question is no, then they must have some specific configutation on their server side code to allow Cross Origin communications to happen. What could this configuration be?</p>