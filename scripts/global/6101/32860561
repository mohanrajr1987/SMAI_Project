<p>Given the following HTML:</p>  <pre><code>&lt;form action="upload" method="post" enctype="multipart/form-data"&gt;     Select a file : &lt;input type="file" name="file" size="45" /&gt;    &lt;input type="submit" value="Upload" /&gt; &lt;/form&gt; </code></pre>  <p>If I have a JAX-RS method that starts with:</p>  <pre><code>@POST @Path("upload") @Consumes(MediaType.MULTIPART_FORM_DATA) public Response upload(    @FormParam("file") InputStream uploadedInputStream) {    ... } </code></pre>  <p>Is <code>uploadedInputStream</code> going to be streamed as part of the <em>Java EE API Specification</em>, not implementation specific?  That is I can upload a 1TB file without blowing up the heap?</p>  <p>I can't seem to find anything that shows it is standard, even support for   <code>@Consumes(MediaType.MULTIPART_FORM_DATA)</code> is implementation specific.</p>  <p>The only thing I can think of to make it work across app servers is to use a servlet like the following that will display the number of bytes uploaded.</p>  <pre><code>@WebServlet("/upload") @MultipartConfig public class ImportServlet extends HttpServlet {  @Override protected void doPost(final HttpServletRequest req,     final HttpServletResponse resp) throws ServletException,         IOException {          int c = 0;         InputStream cis = req.getPart("file").getInputStream();         int ch = cis.read();         while (ch != -1) {             ++c;             ch = cis.read();         }         cis.close();         resp.getWriter().print(c);     } } </code></pre>