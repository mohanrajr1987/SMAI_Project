<p>Short version: Is there a way to tell JPA to ignore null properties of a detached entity instance when merging?</p>  <p>Long version:</p>  <p>I Have the following scenario:</p>  <p>Web Application communicates through HTTP REST with Backend. Backend uses JAX-B, JAX-RS, EJBs and JPA2.0 (EclipseLink). Application functionality is basically CRUD.</p>  <p>Because of this design, all entities received through JAX-RS are detached entities, causing JPA to replace all attributes and relationships (if a relationship is null when received, JPA deletes the relationship in the database)</p>  <p>The idea is, having a <code>@OneToMany</code> unidirectional aggregation relationship between A and B <code>A&lt;&gt;---B</code> (this creates a join table), I want to modify attributes owned by <code>A</code>, keeping it's references to <code>B</code> unmodified. In order to do this I'm doing the following:</p>  <ol> <li>Fetching <code>A</code> through JAX-RS, with all it's attributes and references.</li> <li>Modifying record in web application.</li> <li>Sending new values through JAX-RS.</li> <li>Merging new deserialized entity (in a detached state).</li> </ol>  <p>The issue is, as the application grows, <code>A</code> get new relationships and data transfered will keep growing with it (and not being required for <code>A</code>'s CRUD operations.</p>  <p>I'm aware that a solution would be to fetch from database the unmodified record and merge it in code, but I'm looking for a solution that avoids this extra database query.</p>