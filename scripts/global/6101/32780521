<p>I have a strange problem involving: CORS, XMLHttpRequest and JAX-RS. We want to make an ajax-call to our REST-API (Java, JAX-RS) at <strong>service.myapi.com</strong> from <strong>mysite.com</strong></p>  <p>This request fails when we use the header <code>Accept: 'application/json'</code></p>  <pre><code>$.ajax({     type: 'POST',     url: 'https://service.myapi.com/rest/machine/metadata',     headers: {       'Accept': 'application/json',       'Content-Type': 'application/json',       'Session-Token': myToken     },     data: JSON.stringify({        'machine-number': 1     })  }); </code></pre>  <p><strong>Gets the following message from the browser:</strong></p>  <p><em>Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at <a href="https://service.myapi.com/rest/machine/metadata" rel="nofollow">https://service.myapi.com/rest/machine/metadata</a>. (Reason: CORS header 'Access-Control-Allow-Origin' missing).</em></p>  <p>However if I change to <code>Accept: 'application/xml'</code> <strong>it works as expected (!)</strong>.</p>  <p><strong>This is how i looks on the server</strong></p>  <p><em>Filter that adds CORS headers</em></p>  <pre><code>  private static final String ALLOW_HEADERS = createAllowHeaders();    @Override   public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {      HttpServletRequest request = (HttpServletRequest) req;     HttpServletResponse response = (HttpServletResponse) res;      try {         chain.doFilter(request, response);     } catch(Exception e) {         response.setStatus(500);     } finally  {         response.addHeader("Access-Control-Allow-Origin", "*");         response.addHeader("Access-Control-Expose-Headers","Session-Token");         response.addHeader("Access-Control-Allow-Headers", ALLOW_HEADERS);         response.addHeader("Access-Control-Allow-Credentials", "true");         response.addHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS, HEAD");     }   }    private static String createAllowHeaders() {     return new StringJoiner(", ")             .add("Access-Control-Allow-Headers")             .add("X-Requested-With")             .add("Access-Control-Request-Method")             .add("Access-Control-Request-Headers")             .add("origin")             .add("content-type")              .add("accept")             .add("authorization")             .add("Session-Token")             .toString();    }  </code></pre>  <p><em>The method with JAX-RS annotations that handles the request</em></p>  <pre><code>@Path("/metadata") @POST @Consumes({ APPLICATION_XML, APPLICATION_JSON }) @Produces({ APPLICATION_XML, APPLICATION_JSON }) public Response getMetadata(@Context HttpServletRequest req, MetadataRequest m) {   //... } </code></pre>  <p>I don't know why it won't work when using <code>Accept: 'application/json'</code>. Tested in Chrome and Firefox. Get the same result in both browsers.</p>