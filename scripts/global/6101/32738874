<p>I have implemented OAuth from Jira in my JAX-RS web application. It's working, but I had an issue.</p>  <p>This is how it works:</p>  <ol> <li>I enter the URL in the browser.</li> <li>Function getToken() is executed.</li> <li>Browser got redirected to Jira web page, user logs in and allows my server.</li> <li>Jira web page redirect to callback URL (which is my server).</li> <li>Function accessToken is called.</li> </ol>  <p>The issue is: When I open a browser and follow all the steps, the session id in step 2 is different than the session id in step 5. When the above steps are executed again in the same bowser session, the id's will be the same.</p>  <p>Below my code:</p>  <pre><code>@Path("/oauth") @Stateless public class Authorize {  private TokenSecretVerifierHolder requestToken;  @GET public Response getToken(@Context HttpServletRequest request) {     System.out.println("Get Session Id: " + request.getSession().getId()); //prints 9f3355bf8a27add3969a9fb006b7     AtlassianOAuthClient atlassianOAuthClient = new AtlassianOAuthClient("http://laptop-mike:8080/OAuthService/api/oauth/access"); //The parameter is the callback url     requestToken = atlassianOAuthClient.getRequestToken();     String authorizeUrl = atlassianOAuthClient.getAuthorizeUrlForToken(requestToken.getToken());     if (authorizeUrl != null) {         try {             URL url = new URL(authorizeUrl);             return Response.temporaryRedirect(url.toURI()).build();         } catch (MalformedURLException | URISyntaxException ex) {             Logger.getLogger(Authorize.class.getName()).log(Level.SEVERE, null, ex);         }     }     return null; }  @GET @Path("/access") public String accessToken(@Context UriInfo uriInfo, @Context HttpServletRequest request) {     System.out.println("Get Session Id: " + request.getSession().getId()); //prints 9f340becc935f287f1704a7c6d52     Map&lt;String, List&lt;String&gt;&gt; queryPairs = uriInfo.getQueryParameters();     AtlassianOAuthClient atlassianOAuthClient = new AtlassianOAuthClient("");     if (requestToken != null) {         String accessToken = atlassianOAuthClient.swapRequestTokenForAccessToken(requestToken.getToken(), queryPairs.get("oauth_token").get(0), queryPairs.get("oauth_verifier").get(0));         if (accessToken != null) {             return atlassianOAuthClient.makeAuthenticatedRequest("http://laptop-mike:9090/rest/api/2/issue/TEST-2", accessToken);         } else {             return "Failed to swap request token with access token";         }     } else {         return "We couldn't find a request token!";     } } </code></pre>