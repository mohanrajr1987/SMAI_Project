<p>I have a templated class containing a <code>std::array&lt;std::vector&lt;T&gt;, N&gt; data_</code> member.</p>  <p>Currently, I can construct this with</p>  <pre><code>template&lt;typename T, size_t N&gt; class A { public:     A(some parameters)     {          for (size_t n=0; n&lt;N; n++) {              data_[n].resize(calculated size from parameters);          }     }  private:     std::array&lt;std::vector&lt;T&gt;,N&gt; data_; }; </code></pre>  <p>Is there some formulation in which I can instead place the initialization of the array in the constructor?</p>  <p>For example, if I used only a <code>vector</code> and then an indexing function, I could have</p>  <pre><code>... A(some parameters):     data_(std::vector&lt;T&gt;(N*previous size)) {} ... </code></pre>