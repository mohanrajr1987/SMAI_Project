<p>I am a beginner programmer in school still, and I was assigned this problem: </p>  <p>"Make your own dynamic array template. It should allow creating contiguous arrays (filled with things of the same type) which you can extend without worrying about running out of space.</p>  <p>Do one version using malloc and free.</p>  <p>Do one version using new and delete."</p>  <p>So far this is what I have: </p>  <pre><code>#include &lt;iostream&gt; #include &lt;sstream&gt; #include "Array.h" using namespace std;  int main(){    Array&lt;int&gt; *testArray = new Array&lt;int&gt;(5);   testArray-&gt;initArray();   testArray-&gt;printArray();   testArray-&gt;addData(7);   testArray-&gt;printArray();   return 0; } </code></pre>  <p>And here is the "Array.h" file:</p>  <pre><code>#include &lt;iostream&gt; #include &lt;string&gt; #include &lt;sstream&gt; using namespace std;  template&lt;typename T&gt; class Array{   public:   Array(int size){     size = size;     data = new T[size];  };   Array&lt;T&gt; *addData(T dataToAdd){     Array &lt;T&gt; *tmp = new Array &lt;T&gt; (this-&gt;size);     tmp-&gt;data = this-&gt;data;     Array &lt;T&gt; *newData = new Array&lt;T&gt; (this-&gt;size + 1);      for (int i = 0; i &lt; this-&gt;size + 1; ++i){         if (i &lt; this-&gt;size){             //newData-&gt;data[i] = tmp-&gt;data[i];             newData-&gt;setData(tmp-&gt;getData()[i], i);         }         else{             //newData-&gt;data[i] = dataToAdd;             newData-&gt;setData(dataToAdd, i);         }     }     return newData; };   void initArray(){     for (int i = 0; i &lt; this-&gt;size; ++i){         //this-&gt;data[i] = i;         this-&gt;setData(i, i);     } };   void printArray(){     ostringstream oss;     string answer = "";      for (int i = 0; i &lt; this-&gt;size; ++i){         oss &lt;&lt; this-&gt;data[i] + " ";         //cout &lt;&lt; this-&gt;data[i] &lt;&lt; " ";     }      answer = oss.str();      cout &lt;&lt; answer &lt;&lt; "asdf" &lt;&lt; endl; };   T* getData(){     return this-&gt;data; }   int getSize(){     return this-&gt;size; }   void setData(T data, int index){     this-&gt;getData()[index] = data; } private:   int size;   T* data; }; </code></pre>  <p>So far what SHOULD happen in my main file is there should be an array of 5 ints, that are initialized to 0,1,2,3,4 from the initArray function.</p>  <p>Then it should print out the array, showing "0 1 2 3 4,"  add another "7" to it, then print the new array out showing "0 1 2 3 4 7."</p>  <p>For some reason, and I think it has something to do with losing data somehow when going between the two files, the field "data" of my Array class is not being properly changed. </p>  <p>I even hardcoded a test for this in main where I wrote a for loop using the setData function that initializes the Array to "0 1 2 3 4," and then manually printed out these values with another for loop, but the output was only "0 0 0 0 0." </p>  <p>Right now, as the code is, the output is:</p>  <pre><code>asdf asdf </code></pre>  <p>As it was outputting whitespace before so I added the "asdf"'s to see if my printArray worked at all.</p>  <p>To sum up, why is the data in my private field "data" not being properly stored? I am very new to programming in c++ and any advice would be greatly appreciated. Thank you for your time, and if there is anything you do not understand please ask for clarification and I will do my best.</p>  <p>EDIT: problem solved! Thank you everyone who helped, the issue was with my constructor and how I was calling my functions in main.</p>