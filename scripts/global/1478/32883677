<p>Suppose the following snippet:</p>  <pre><code>template &lt;class T&gt; void fct(T* a, T* b){   // do something }  A a; fct(&amp;a, nullptr); // Problem here! </code></pre>  <p>This makes trouble, since the call arguments are of type <code>A*</code> and <code>nullptr_t</code> and so the compiler can not deduce template parameter <code>T</code>.</p>  <p>Generally, I can imagine several ideas how to solve this:</p>  <ul> <li>Define <code>A* b = nullptr</code> and use <code>fct(&amp;a, b)</code></li> <li>Define an overload with one argument for <code>fct</code> for the <code>nullptr</code> case</li> <li>Use <code>fct(&amp;a, static_cast&lt;A*&gt;(nullptr))</code></li> </ul>  <p><strong>Or is there a more clean solution, like the creation of a something like a "typed nullptr"?</strong></p>