<p>I am writing some function templates using armadillo linear algebra library, but it encounters some errors. I am still learning C++ and its aspects, so will be very much thankful for any possible solutions. Most of my functions are like the following,</p>  <pre><code>template&lt;typename T1&gt; void some_function(const Mat&lt;T1&gt; &amp; p) {     unsigned int n = p.n_rows;     // do some stuffs...     // .... } </code></pre>  <p>My main function contains:</p>  <pre><code>Mat&lt;double&gt; A = ones&lt;Mat&lt;double&gt;&gt;(4,4); int a(2); some_function(A);  // runs perfectly some_function(a*A); // compilation error as follows  test_function.hpp:35:8: note: template argument deduction/substitution failed: test.cpp:22:17: note: ‘arma::enable_if2&lt;true, const arma::eOp&lt;arma::Mat&lt;double&gt;, arma::eop_scalar_times&gt; &gt;::result {aka const arma::eOp&lt;arma::Mat&lt;double&gt;, arma::eop_scalar_times&gt;}’ is not derived from ‘const arma::Mat&lt;eT&gt;’ some_function(a*A); </code></pre>  <p>If I change the function as follows:</p>  <pre><code>template&lt;typename T1&gt; void some_function(const T1 &amp; p) {     unsigned int n = p.n_rows;     // do some stuffs...     // .... } </code></pre>  <p>Then it gives the compilation error as follows:</p>  <pre><code>test_function.hpp: In instantiation of ‘bool some_function(const T1&amp;) [with T1 = arma::eOp&lt;arma::Mat&lt;double&gt;, arma::eop_scalar_times&gt;]’: test.cpp:22:17:   required from here test_function.hpp:37:26: error: ‘const class arma::eOp&lt;arma::Mat&lt;double&gt;, arma::eop_scalar_times&gt;’ has no member named ‘n_rows’  unsigned int n = p.n_rows; </code></pre>  <p>But the non-template functions work perfectly, like</p>  <pre><code>void some_function(const Mat&lt;double&gt; &amp; p) {     unsigned int n = p.n_rows();     // do some stuffs...     // .... } </code></pre>  <p>Any solutions??</p>