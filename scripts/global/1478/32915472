<p>Okay, I'm trying to implement a range tree in n-dimensions using variadic templates.  I have the basic setup working, but I want to be able to optionally pass a compare function object in the template list to sort the tree by something other than std::less.  </p>  <p>My first thought is that I could overload the template list with a version that includes a pair as the first element, with the pair containing the type and the compare funcition.  But I can't see to get the template declaration line to compile.  Visual C++ (2015) starts with C2079: "std::pair::first uses undefined class 'T'".</p>  <p>Anyways, on to the code.  Here's a  small snippet to show what I'm trying to do:</p>  <pre><code>template &lt;class... Args&gt; class rangetree{ };  template &lt;class T, class... Args&gt; class rangetree&lt;T, Args...&gt; { public:   map &lt;T, rangetree&lt;Args...&gt; * &gt; tree; }; </code></pre>  <p>This all works normally.  But when I add another version of rangetree, with a pair as the first template member, I have problems:</p>  <pre><code>template &lt;pair&lt;class T, class Compare&gt;, class... Args&gt; class rangetree&lt;pair&lt;T, Compare&gt;, Args...&gt;{ public:   map &lt;T, rangetree &lt;Args...&gt; *, Compare&gt; tree; }; </code></pre>  <p>This is the part I can seem to get formatted in a way that the compiler is happy.  The idea is to optionally pair template members with compare functions if something other than less should be used.</p>