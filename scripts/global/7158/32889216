<p>I am running into a problem with Polymer 1. The built-in component <code>iron-a11y-keys</code> can take a function as callback when one of the defined keys is pressed. </p>  <p>I want to create a custom component handling all that, and it will do more things in the future. Now, it looks like this: </p>  <pre><code>&lt;dom-module id="keyboard-handler"&gt;   &lt;template&gt;     &lt;iron-a11y-keys         keys="{{keys}}"         target="[[target]]"         on-keys-pressed="handleKey"&gt;       &lt;/iron-a11y-keys&gt;   &lt;/template&gt;   &lt;script&gt;   Polymer({     properties: {       keys: String,       callback: Function,       target: {         type: Object,         value: function() {           return document.body;         }       }     },     handleKey: function(evt){       console.log("callback: "+(typeof this.callback)+" -&gt; "+this.callback);       if (this.callback) {         this.callback(evt);       }     }   });   &lt;/script&gt; &lt;/dom-module&gt; </code></pre>  <p>The problem is, no matter how I pass the <code>callback</code> parameter, the function won't run. </p>  <pre><code>&lt;keyboard-handler keys="ctrl+s" callback='save' &gt;&lt;/keyboard-handler&gt; &lt;keyboard-handler keys="ctrl+s" callback='{{save}}' &gt;&lt;/keyboard-handler&gt; &lt;keyboard-handler keys="ctrl+s" callback='save.bind(this)' &gt;&lt;/keyboard-handler&gt; &lt;keyboard-handler keys="ctrl+s" callback='{{save.bind(this)}}' &gt;&lt;/keyboard-handler&gt; </code></pre>  <p>Logging highlights the fact that in some cases it is simply "undefined", and in other cases, the type of <code>callback</code> is <code>String</code> (instead of Function), and then "this.callback is not a function". </p>  <p>I tried changing the <code>on-key-pressed</code> property by calling directly the callback, but it didn't work (because "listener 'callback' is not defined"). </p>  <p>Yet, I managed to use the same mechanism of callback with <code>iron-ajax</code> and it is working good. What should I do here?</p>  <p>Any help is enjoyed! </p>