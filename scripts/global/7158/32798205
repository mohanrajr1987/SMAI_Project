<p>Scalding exposes apis to call map-reduce jobs from an application running outside hadoop ( from a different server which has access to the hadoop cluster). scalding exposes Execution[T], which describes a set of map/reduce operations that when executed return a Future[T].</p>  <p><strong>Requirement is as follows:</strong></p>  <p>I am building a HTTP/REST api server in scala which uses scalding Execution[T] to run jobs on a remote hadoop cluster and serve clients. I was wondering if the Execution[T] and Future it returns will scale to serve several millions of clients</p>  <p><strong>So my questions are the following</strong>,</p>  <p>Q1. Does the Execution[T] uses "job.end.notification.url" conf or an alternate mechanism to obtain callbacks once the job finishes? </p>  <p>Q2. Will a long running job executed using scalding hold an active connection to the hadoop cluster (or internally does it manage any callback mechanism)? </p>  <p>Q3. Are scalding jobs using Execution[T] scalable to several millions of clients ?</p>