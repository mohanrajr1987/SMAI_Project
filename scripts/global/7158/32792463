<p>I am trying to write a simple C program in Linux to run a function on every new second. For the application, it's quite important the code runs as close to the second as possible, since the PC clock will be NTP synced.</p>  <p>Within 10ms or so is fine; the closer to the second, the better. Jitter within the 10ms is also fine.</p>  <p>I don't want to hammer the CPU, so something that implements a callback would be great. I don't want to sit in a tight loop saying "if (second_old != second_now)" kind of thing. Something a bit more smart than that.</p>  <p>The idea is to synchronise code running between remote computers. NTP sync is ideal, but the code then needs to monitor the PC clock carefully.  Something that uses internal delays isn't going to work, because the code execution start on various computers will be different.</p>  <p>I just want to know if this is possible, and, if so, where I should start looking. Lots of examples and code snippets of careful timekeeping in C on Linux, but none that are referenced to the computer clock for absolute time.</p>  <p>Just again, my key requirements</p>  <ul> <li>C for Linux (C++ at a push)</li> <li>Run a function every second</li> <li>Locked to PC clock (which is externally NTP synced before program execution)</li> </ul>