<p>I want invoke a simple method <code>asynchronously</code>, and pass the output/result from it to the <code>AsyncCallback</code> method. (I have checked <strong>other related posts in SO</strong>, and they are suggesting the second approach in my code, which I don't want to use for some reason) </p>  <p>What is the correct way to do that? I know there are other ways of doing it, like <code>Task</code>, but I'm just trying to get an existing code working with <code>BeginInvoke</code> asynchronous call.</p>  <p>In a simpler form, let's say this is my method to be invoked</p>  <pre><code>static int ProcessData(int i) {     //do something with i     return ++i; } </code></pre>  <p>Currently I'm invoking it asynchronously with an <code>AsyncCallback</code></p>  <pre><code>//here I want to pass the result from ProcessData() to postProcess Func&lt;int, int&gt; method = ProcessData; AsyncCallback postProcess = iar =&gt; Console.WriteLine("ProcessData completed!");  method.BeginInvoke(99, postProcess, null); </code></pre>  <p>Again, I know I can use <code>EndInvoke</code> to get the result like this</p>  <pre><code>var asyncResult = method.BeginInvoke(99, null, null); var processedData = method.EndInvoke(asyncResult); Console.WriteLine("ProcessData returned value : " + processedData); </code></pre>  <p>This code works and I get the result when the asynchronous call ends, but is there a way to do the same with <code>AsyncCallback</code>?</p>