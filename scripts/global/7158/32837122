<p>Let's say I have a class Child that inherits from class Parent. Both classes need to be able to be able to send a function pointer of the same method, let's call it foo(), to an API. </p>  <p>I don't think I can make foo() a member function, since the process invoking the callback would need to have an object of either Child or Parent to call it with. I also don't think I can make foo() a static member function since there may be multiple instances of Parent of Child. </p>  <p>What would be the cleanest place to put foo() in this case? Should it go into its own file and have its own namespace, and get #include'd into both Parent and Child? Should foo() be in Parent only meaning Child would need to include Parent.cpp and forward declare foo()? </p>  <p>Appreciate any insight!</p>