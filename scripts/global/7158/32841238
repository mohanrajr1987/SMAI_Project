<p>I have a program that currently implemented using Qt framework with signal &amp; slot mechanism. However due to some requirements, I need to split the program in two parts: 1-The library, which is plain c++, independent from third-party softwares and 2-The GUI application, which linked to the library (1) and can have dependencies to Qt.</p>  <p>That means I need to refactor some classes from the original signal/slot approach and implement c++ observer pattern / listener instead.</p>  <p>So my question is, how can my GUI (Qt part) communicate with the rewritten library, is there a way to connect a signal/slot with its equivalent C++ callbacks.</p>  <p>For example if I have the following class Example.h:</p>  <pre><code>signal:  void data_sent( bool start_timer = true ); </code></pre>  <p>Now it's gonna be moved to ExampleListener.h:</p>  <pre><code>void on_data_sent( bool start_timer = true ); </code></pre>  <p>And in the GUI part I had :</p>  <pre><code>connect( m_state, SIGNAL( data_sent ), this, SLOT( update( ) ) ); </code></pre>  <p>Is it valid to have something like this:</p>  <pre><code>connect( m_state, SIGNAL( on_data_sent( ) ), this, SLOT( update( ) ) ); </code></pre>  <p>So in short, is a mix between signal / slot and traditional C++ callbacks works ?</p>  <p>Thanks a lot!</p>