<p>I am trying to use the very cool looking <a href="http://bootstrap-notify.remabledesigns.com/" rel="nofollow">Bootstrap Notify</a> plugin, and although it needs quite a lot of DIY styling, works very nicely.</p>  <p>Except, the plugin's main method, <code>$.notify(message, options &amp; settings)</code> offers a settings property for an <code>OnClose</code> callback, when the notification popout (toast) is closed, either naturally or by clicking its <code>Dismiss</code> icon.</p>  <p>The code in the plugin invokes the callback like so:</p>  <pre><code>if ($.isFunction(self.settings.onClose)) {     self.settings.onClose.call(this.$ele); } </code></pre>  <p>in its <code>close</code> function, which is called when the user dismisses the alert, or when its delay time elapses and it auto-closes. When I examine the <code>this.$ele</code> value before being passed into the callback call, I see it is a jQuery like object representing an array of one element, i.e. the alert element busy removing itself from my window. E.i. an array containing this element:</p>  <pre><code>&lt;div data-notify="container" class="col-xs-11 col-sm-4 alert alert-minimalist animated fadeInDown fadeOutUp" role="alert" data-notify-position="top-right" data-closing="true" style="display: inline-block; margin: 0px auto; position: fixed; transition: all 0.5s ease-in-out; z-index: 1031; top: 20px; right: 20px;"&gt;     &lt;button type="button" aria-hidden="true" class="close" data-notify="dismiss" style="position: absolute; right: 10px; top: 5px; z-index: 1033;"&gt;Ã—&lt;/button&gt;     &lt;span data-notify="icon"&gt;&lt;/span&gt;     &lt;span data-notify="title"&gt;     &lt;/span&gt; &lt;span data-notify="message"&gt;Hey hey hey!&lt;/span&gt;&lt;a href="#" target="_blank" data-notify="url"&gt;&lt;/a&gt; &lt;/div&gt; </code></pre>  <p>I use the notify plugin in a very simple test page, like this:</p>  <pre><code>$("button").click(function () {     $.notify("Hey hey hey!", {         type: "minimalist",         delay: 50000,         onClose: function(element) {             console.log("Element: " + element);         }     }); }); </code></pre>  <p>Yet, when this <code>onClose</code> callback is invoked, its <code>element</code> parameter value is <code>undefined</code>. Why does this value become undefined between invoking the callback, and when the callback code is executed?</p>