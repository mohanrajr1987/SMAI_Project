<p>I need to call a function with arguments array, but call_user_func_array seems to be very slow for me. I tried to use <code>ReflectionFunction</code> for that (see <code>code ex. 1</code>), but maybe there is another methods for that? It will be perfectly, if that method supports sorted parameters (see <code>code ex. 2</code>) <hr /> <strong>code ex. 1</strong></p>  <pre><code>private static function call(Callable $callable, array $args) {     if(class_exists('ReflectionFunction', false)) {         $r = (new ReflectionFunction($callable))-&gt;invokeArgs($args);         # ROUTES_CALLBACK_STRATEGY may be "call" or "echo"         if(defined('ROUTES_CALLBACK_STRATEGY') &amp;&amp; strtolower(ROUTES_CALLBACK_STRATEGY) == 'call') {             return;         } else {             echo $r;         }     } else {         call_user_func_array($callable, $args);     } } </code></pre>  <p><strong>code ex. 2</strong></p>  <pre><code>$args = array(     'param1' =&gt; 'p1',     'param2' =&gt; 'p2',     'custom_name' =&gt; 'c_n' );  $callback = function($param, $other_param, $foo) {     echo $param . " " . $other_param . " " . $foo; // output: p1 p2 c_n }  $callback2 = function ($custom_name, $param1, $param2) {     echo $custom_name . " " . $param1 . " " . $param2; // output: c_n p1 p2 } </code></pre>  <p><hr /> Thanks for help.</p>