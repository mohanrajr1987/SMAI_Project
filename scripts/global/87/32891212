<p>Why doesn't this code print out the router stats for me? I keep thinking my brackets are wrong but I can't figure it out. Everytime I run the code I get no output and no errors.</p>  <pre><code>public class Homework_02 { public static void main(String[] args) throws Exception {     router.printStats();   }   enum Branch {     Production(0.007, 0.008), Financial(0.009, 0.007), Marketing(0.0095,             0.0082);      final double printCost;     final double dataCost;     public Lock[] ports = new Lock[3];     {         for (int i = 0; i &lt; ports.length; i++) {             ports[i] = new ReentrantLock();         }     }      final String id = name().charAt(0) + "B";      Branch(double printCost, double dataCost) {         this.printCost = printCost;         this.dataCost = dataCost;     }      public void lock(int port) {         ports[port - 1].lock();     }      public void unlock(int port) {         ports[port-1].unlock();     }      AtomicInteger dataProcessed = new AtomicInteger();      public void data(int amt) {         dataProcessed.addAndGet(amt);     }      AtomicInteger printProcessed = new AtomicInteger();      public void print(int amt) {         printProcessed.addAndGet(amt);     }      public static Branch lookup(String id) {         for (Branch b : Branch.values()) {             if (b.id.equals(id)) {                 return b;             }         }         return null;     }      public void printStats() {         System.out.println(name() + " Branch: " + "processed: "                 + dataProcessed + " cost: "                 + (dataProcessed.get() * dataCost) + " printed: "                 + printProcessed + " cost: "                 + (printProcessed.get() * printCost));         System.out.flush();     } }  enum Type {      Data {         @Override         void type(Branch b, int characters) {             b.data(characters);         }     },     Print {         @Override         void type(Branch b, int characters) {             b.print(characters);         }     };      final String id = "" + name().charAt(0);      public static Type lookup(String id) {         for (Type b : Type.values()) {             if (b.id.equals(id)) {                 return b;             }         }         return null;     }      abstract void type(Branch b, int characters); }  class Router {     public void job(String branch, int port, String type, int characters) {         Branch b = Branch.lookup(branch);         // lock that computer at that branch         b.lock(port);         try {             Type t = Type.lookup(type);             t.type(b, characters);         } finally {             b.unlock(port);         }      }      private void job(Job j) {         job(j.branch, j.port, j.type, j.characters);     }      private void printStats() {         // Prints for all Branches         for (Branch b : Branch.values()) {             b.printStats();         }     } }  // Just one router final Router router = new Router();  class Job implements Runnable {     private String branch;     private int port;     private String type;     private int characters;      public Job(String branch, int port, String type, int characters) {         this.branch = branch;         this.port = port;         this.type = type;         this.characters = characters;     }     public void run() {         router.job(this);     }  }  public void test() throws InterruptedException{     Job[] jobs = {             new Job("PB", 1, "D", 60000),             new Job("PB", 3, "P", 100000),             new Job("PB", 2, "D", 75000),             new Job("FB", 1, "P", 30000),             new Job("FB", 2, "D", 150000),             new Job("FB", 3, "P", 89000),             new Job("MB", 1, "P", 200000),             new Job("MB", 2, "D", 140000),             new Job("MB", 3, "P", 1350000)};     Thread[] threads = new Thread[jobs.length];     for(int i = 0;i&lt; threads.length;i++){         threads[i] = new Thread(jobs[i]);         threads[i].start();     }     for(int i = 0;i&lt;threads.length;i++){         threads[i].join();     }     router.printStats();  } </code></pre>  <p>}</p>  <p>Output should look like this:</p>  <pre><code>Production Branch: processed: 135000 cost: 1080.0 printed: 100000 cost: 700.0 Financial Branch: processed: 150000 cost: 1050.0 printed: 119000 cost: 1071.0 Marketing Branch: processed: 140000 cost: 1148.0 printed: 1550000 cost: 14725.0 </code></pre>