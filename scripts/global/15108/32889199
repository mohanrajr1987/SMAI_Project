<p>I am trying to create a system which allows a user to be able to add a new Vegetable object, upload a thumbnail and multiple images and files - all from the AddVegetable page, and be able to output this easily as the vegetable types are filtered to display on different pages</p>  <p>I'm trying to achieve this with the code below but it won't work and I cant figure out why exactly, as it stands I'm getting a KeyError 'image', but I don't know why. I am going about this the right way at all?</p>  <p>I am ignoring image processing for the moment,</p>  <p>models.py</p>  <pre><code>class Vegetable(models.Model):     title = models.CharField(max_length=0)     category = models.CharField(max_length=50,                                 choices=CATEGORY_CHOICES)     description = models.CharField(max_length=1000, null=True)     thumbnail = models.ImageField(upload_to = 'uploaded_images/')     attachments = models.FileField(upload_to = uploaded_files/)     date_added = models.DateTimeField('Date Added', default=datetime.datetime.now)  class VegetableImage(models.Model):     vegetable = models.ForeignKey(Vegetable, default=None)     image = models.ImageField(upload_to='images/vegetable',                              verbose_name='image',) </code></pre>  <p>forms.py</p>  <pre><code>Class AddVegetable(ModelForm):     class Meta:           model = Vegetable           fields = ['title', 'category', 'description', 'thumbnail',                     'images', 'attachments', 'date_added',]  class ImageForm(ModelForm):     image = ImageField(label='image')     class Meta:         model = VegetableImage         fields = ['image',] </code></pre>  <p>views.py </p>  <pre><code>def AddVegetable(request):  ImageFormSet = modelformset_factory(VegetableImage,                                     form=ImageForm, extra=4)  if request.method == 'POST':      VegetableForm = AddVegetableForm(request.POST)     formset = ImageFormSet(request.POST, request.FILES,                            queryset=VegetableImage.objects.none())      if VegetableForm.is_valid() and formset.is_valid():          VegetableForm.save()          for form in formset.cleaned_data:             image = form['image']             picture = VegetableImage(vegetable=VegetableForm, image=image)             picture.save()          return HttpResponseRedirect('/vegetable/')     else:         print (VegetableForm.errors, formset.errors)  else:     VegetableForm = AddVegetableForm()     formset = ImageFormSet(queryset=VegetableImage.objects.none())  return render(request, 'vegetable/add.html',               {'VegetableForm': VegetableForm, 'formset': formset},               context_instance=RequestContext(request)) </code></pre>  <p>template.html</p>  <pre><code>&lt;form action="/vegetable/add/" method="POST" enctypr="multipart/form-data"&gt;  {% csrf_token %}     &lt;table&gt;              &lt;p&gt; {{ VegetableForm.as_ul }}&lt;/p&gt;              {{ formset.management_form }}             {% for form in formset %}             {{ form }}             {% endfor %}      &lt;/table&gt;      &lt;input type="submit" value="Post"&gt; &lt;/form&gt; </code></pre>