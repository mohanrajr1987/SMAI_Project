<p>I'm using a model formset to allow a user to dynamically add duplicate forms to a table(modbus registers since a device can have multiple registers). </p>  <p>The problem I'm having is that as soon as I save the formset(store to db), when I come back to the same page to create a new device with registers, django renders all the previously created forms instead only 1 empty form(then being able to add forms to that).</p>  <p>Here is an example after having created 3 forms in my formset(stored in db): <a href="http://i.stack.imgur.com/S9umY.png" rel="nofollow"><img src="http://i.stack.imgur.com/S9umY.png" alt="enter image description here"></a></p>  <p>Here is what it should look like: <a href="http://i.stack.imgur.com/midSc.png" rel="nofollow"><img src="http://i.stack.imgur.com/midSc.png" alt="enter image description here"></a></p>  <p>It should only display 1 empty form in my formset, the user can then dynamically add forms.</p>  <p>my view:</p>  <pre><code>def create_modbus_view(request):     modbus_device = CreateModbusForm()     RegisterFormset = modelformset_factory(Register, form=ModbusRegistersForm)     register_forms = RegisterFormset()      return render(         request,         'app/create_modbus.html',         context_instance = RequestContext(request,         {             'title':'Create Modbus Device',             'tag': 'create_modbus',             'modbus_device': modbus_device,             'register_forms': register_forms         })     ) </code></pre>  <p>models:</p>  <pre><code>class Register(models.Model):     ixRegister = models.AutoField(primary_key=True)     sRegisterName = models.CharField(max_length=100)     iStartingAddr = models.IntegerField()     bRange = models.BooleanField(default=False)     ixRegisterType = models.ForeignKey(RegisterType)     iOffset = models.IntegerField(blank=True, null=True)      class Meta:         db_table = 'TRegister'  class ModbusDevice(models.Model):     ixModbusDevice = models.AutoField(primary_key=True)     sModbusName = models.CharField(verbose_name='Device Name',max_length=100)     iPort = models.IntegerField(verbose_name='Port')     iSlave = models.IntegerField(verbose_name='Slave ID')     sIP = models.GenericIPAddressField(verbose_name='IP Address')      class Meta:         db_table = 'TModbusDevice' </code></pre>  <p>form:</p>  <pre><code>class ModbusRegistersForm(ModelForm):     ixRegisterType = ModelChoiceField(queryset=RegisterType.objects.all()),     bRange = BooleanField(required=False)     bRange.widget.attrs['data-form'] = 0     class Meta:         model = Register         fields = ['sRegisterName','iStartingAddr','bRange','ixRegisterType','iOffset']         widgets = {                 'sRegisterName': TextInput(attrs={'placeholder': 'Register Name','class': 'form-control', 'data-form': '0'}),                 'iStartingAddr': TextInput(attrs={'placeholder': 'Starting address','class': 'form-control','data-form': '0'}),                 'iOffset': TextInput(attrs={'placeholder': 'Address offset','class': 'form-control','data-form': '0'}),             }   class CreateModbusForm(ModelForm):     class Meta:         model = ModbusDevice         fields = ['sModbusName','iPort', 'iSlave', 'sIP']         widgets = {                 'sModbusName': TextInput(attrs={'placeholder': 'Device Name','class': 'form-control','id': 'device-name',}),                 'iPort': TextInput(attrs={'placeholder': 'Port','class': 'form-control','id': 'port',}),                 'iSlave': TextInput(attrs={'placeholder': 'Slave id','class': 'form-control','id': 'slave-id',}),                 'sIP': TextInput(attrs={'placeholder': 'Modbus IP address','class': 'form-control','id': 'ip-address',})             } </code></pre>