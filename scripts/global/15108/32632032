<p>I am writing a class-based view that lets the employees setup their profile.  Because the employee model has a few foreign key field (e.g. employer is a forieng key referencing company model), I decided not to use ModelForm and resort to good old forms so the user can enter the name of the company they work in rather than 32.</p>  <p>Here is my code:</p>  <pre><code>class Employee_ProfileSetting(forms.Form):     first_name = forms.CharField(label = 'First Name', max_length = 30)     last_name = forms.CharField(label = 'Last Name', max_length = 30)     email = forms.EmailField()     employer = forms.CharField(max_length = 50)     cell = forms.CharField(max_length = 20)     driver_license_num = forms.CharField(max_length=20)     birth_year = forms.IntegerField()     start_date = forms.IntegerField(help_text = 'Year you started with the company')     title = forms.CharField(max_length = 30)      def __init__(self, *args, **kwargs):          if not args: # args is empty, meaning a fresh object                         super(Employee_ProfileSetting, self).__init__(*args, **kwargs)          else:             # Retrieving the form's information             self.first_name = args[0].get('first_name')             self.last_name = args[0]['last_name']             self.email = args[0]['email']             self.cell = args[0]['cell']             self.driver_license_num = args[0]['driver_license_num']             self.birth_year = args[0]['birth_year']             self.start_year = args[0]['start_date']             self.title = args[0]['title']              super(Employee_ProfileSetting, self).__init__(*args, **kwargs) </code></pre>  <p>The constructor would then allow me to do this in my class-based view:</p>  <pre><code># Inside class AdminSetting(View):   def post(self, request):     form = self.form_class(request.POST)      if form.is_valid():         cd = form.cleaned_data         employee_profile = Employee_ProfileSetting(**cd) # Calling the constructor         employee_profile.save()  # The save function is overridden           admin, created = Employee.objects.get_or_create(**cd)  # If a matching employee exists, it gets that object.  Otherwise, it creates it.          if created:  # Object was not found, and so it was created             return HttpResponseRedirect('success.html') </code></pre>  <p>When I run it, it gives me the error:</p>  <p>__init__() got an unexpected keyword argument 'first_name'</p>  <p>So, my problem is two-fold:</p>  <p>1) What is wrong with the code? and what does that error mean?</p>  <p>2) Is there a better way to let the user fill in all the fields, including the foreign key fields, in a form and save fields accordingly? e.g. the field corresponding to a foreign key is saved in its respective table first (company1.employee_set.create() and then saving the other fields.  Can a ModelForm be used?</p>