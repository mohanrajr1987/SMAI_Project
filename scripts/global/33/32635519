<p>I have some problem while trying to calculate time complexity for this code:</p>  <pre><code>function foo (int a):     if a &lt; 1:          return 1     else:         for i = 1 to 4:             foo(a - 3)         for i = 1 to 4:             foo(a / 2) end function </code></pre>  <p>As far as I can go:</p>  <pre><code>T(n) = 1 if n&lt;1  T(n) = 4T(n-3) + 4T(n/2)     if n&gt;=1       = 4(4T(n-6) + 4T((n-3)/2))  +  4(4T(n/2 - 3) + 4T(n/4))       ~ 4^2 (T(n-6) + T((n-3)/2) + T(n/2-3) + T(n/4)) </code></pre>  <p>Now, it is very complicated, since number of the next T increase by 2^n and also the child is quite complicated. </p>  <p>Is there any other ways to solve this problem?</p>