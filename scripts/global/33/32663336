<p>I was asked this problem during an interview. </p>  <p>You are standing at 0 and you have to reach a position X. You can take a jump of upto D (1 to D). If X > D, it's obvious that you can't reach the position X at initial jump.</p>  <p>Now there are tiles appearing at random position every second from 1 to N. This is given as a zero indexed array A[k], where A[k] represents the the position of tile appearing at kth second. You have to find out, at which second it becomes possible for you to reach (or cross) the destination X.</p>  <p>If it's possible at initial or after A[0] then return 0, or return the minimum second. If it's not possible even after all tiles, then return -1.</p>  <p>Constraints: 1 &lt;= N &lt;= 100,000</p>  <p>1 &lt;= D &lt;= 100,000</p>  <p>1 &lt;= X &lt;= 100,000</p>  <p>1 &lt;= A[i] &lt;= X</p>  <p>Eg.</p>  <p>X = 7, D=3</p>  <p>A = {1,3,1,4,2,5}</p>  <p>then answer is 3. Since at 3rd second tile appear at position 4 and it becomes possible to reach X=7. It's not possible at any second before that. </p>  <p>I understand that's a too much worded problem but I can definitely clear anything if I couldn't communicate well. </p>  <p>The catch is that expected time complexity is O(N) and you can use extra space O(X). </p>  <p>I found a solution which is O(n * log n * log n). That is to binary search over second and get first [1..mid] elements, sort them by positions and verify for solution. It seemed to pass the test cases but it is not linear.</p>  <p>I tried hard but couldn't find any O(N) solution. Can you please help me?   </p>