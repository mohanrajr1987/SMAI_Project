<p><strong>TL;DR:</strong> which of the three options below is the most efficient for paginating with Redis?</p>  <p>I'm implementing a website with multiple user-generated posts, which are saved in a relational DB, and then copied to Redis in form of <a href="http://redis.io/topics/data-types-intro#redis-hashes" rel="nofollow">Hashes</a> with keys like <code>site:{site_id}:post:{post_id}</code>.</p>  <p>I want to perform simple pagination queries against Redis, in order to implement lazy-load pagination (ie. user scrolls down, we send an Ajax request to the server asking for the next bunch of posts) in a Pinterest-style interface.</p>  <p>Then I created a <a href="http://redis.io/topics/data-types-intro#redis-sets" rel="nofollow">Set</a> to keep track of published posts ids, with keys like <code>site:{site_id}:posts</code>. I've chosen Sets because I don't want to have duplicated IDs in the collection and I can do it fastly with a simple <a href="http://redis.io/commands/sadd" rel="nofollow">SADD</a> (no need to check if id exists) on every DB update.</p>  <p>Well, as Sets aren't ordered, I'm wheighting the pros and cons of the options I have to paginate:</p>  <p><strong>1) Using <a href="http://redis.io/commands/scan" rel="nofollow">SSCAN</a> command to paginate my already-implemented sets</strong> </p>  <blockquote>   <p>In this case, I could persist the returned Scan cursor in the user's   session, then send it back to server on next request (it doesn't seems   reliable with multiple users accessing and updating the database: at   some time the cursor would be invalid and return weird results -   unless there is some caveat that I'm missing).</p> </blockquote>  <p><strong>2) Refactor my sets to use <a href="http://redis.io/topics/data-types-intro#redis-lists" rel="nofollow">Lists</a> or <a href="http://redis.io/topics/data-types-intro#redis-sorted-sets" rel="nofollow">Sorted Sets</a> instead</strong></p>  <blockquote>   <p>Then I could paginate using <a href="http://redis.io/commands/lrange" rel="nofollow">LRANGE</a> or <a href="http://redis.io/commands/zrange" rel="nofollow">ZRANGE</a>. List seems to   be the most performant and natural option for my use case. It's   perfect for pagination and ordering by date, but I simply can't check   for a single item existence without looping all list. Sorted Sets   seems to join the advantages of both Sets and Lists, but consumes more   server resources.</p> </blockquote>  <p><strong>3) Keep using regular sets and store the page number as part of the key</strong></p>  <blockquote>   <p>It would be something like <code>site:{site_id}:{page_number}:posts</code>. It   was the <a href="http://stackoverflow.com/questions/9127736/redis-sorted-sets-and-best-way-to-store-uids/9195219#9195219">recommended way</a> before Scan commands were implemented.</p> </blockquote>  <p>So, the question is: which one is the most efficient / simplest approach? Is there any other recommended option not listed here?</p>