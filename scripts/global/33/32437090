<p>The inputs are an array A of positive or null integers and another integer K.</p>  <p>We should partition A into K blocks of consecutive elements (by "partition" I mean that every element of A belongs to some block and 2 different blocks don't contain any element in common).</p>  <p>We define the sum of a block as sum of the elements of the block.</p>  <p>The goal is to find such a partition in K blocks such that the maximum of the sums of each block (let's call that "<em>MaxSumBlock</em>") is minimized.</p>  <p>We need to output the MaxSumBlock (we don't need to find an actual partition)</p>  <p>Here is an example:</p>  <p>Input:</p>  <pre><code>A = {2, 1, 5, 1, 2, 2, 2} K = 3 </code></pre>  <p>Expected output:</p>  <pre><code>MaxSumBlock: 6 (with partition: {2, 1}, {5, 1}, {2, 2, 2}) </code></pre>  <p>In the expected output, the sums of each block are 3, 6 and 6. The max is 6.</p>  <p>Here is an non optimal partition:</p>  <pre><code>partition: {2, 1}, {5}, {1, 2, 2, 2} </code></pre>  <p>The sums of each block in that case are 3, 6 and 7. The max is hence 7. It is not a correct answer.</p>  <p>What algorithm solves this problem?</p>  <p>EDIT: K and the size of A is no bigger than 100'000. Each element of A is no bigger than 10'000</p>