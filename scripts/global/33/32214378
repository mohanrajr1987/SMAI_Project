<p>I'm new to these concepts and currently trying to understand what business and application logic is in my application that i'm developing using MVC concept.</p>  <p>It seems to me that most of the people agree on the fact that application logic belongs to controller and business logic belongs to model. And that is basically the reason i want to be able to determine what is what, so keep that in mind while reading the question to not miss the point.</p>  <h2>Business Logic</h2>  <p>One of the approaches i've heard is to consider business logic as more of a thing that can be described by people who have nothing to do with programming and just trying to explain how everything would work. So that would basically involve various data to be displayed and how that data is processed(right?).   </p>  <p>So for example designing calculator application "business people" would say that we're going to have two numbers at our input and when user presses "Calculate" button we would perform certain actions with given inputs(for simplicity let's say add them), and output the result into the "Result" label. </p>  <h2>Application Logic</h2>  <p>Now application logic is more of a thing that developers care about and more of a thing that "business people" tend to omit when describing a project of some kind.    </p>  <h2>Main Problem and Question</h2>  <p>Now here's the main problem if you're using the same approach for determining where is business and where is application logic. Notice that i didn't specified what <em>actually</em> application logic involves. And that is because if you think about it this way it really becomes unclear what application logic may or may not involve since different "business people" may or may not include things of all kinds while describing some app which makes this approach impossible to use practically without some kinds of restrictions.  </p>  <p>And my question being, what kinds of restrictions should be applied to this approach for having the ability to properly determine where is application and where is business logic <strong>or</strong> what approach should be used instead? Also is it really correct to say that controller is for application logic and model is for business or can they share some parts of both and if yes then in which way?</p>  <h2>Examples (read this section if question is still unclear for you)</h2>  <p>Examples from which obscurity comes are:  </p>  <ul> <li>while describing, "business people" may or may not mention:  <ul> <li>form validation</li> <li>database interaction</li> <li>really any kind of data manipulation that should bother developer but mensioned by non-developers because they realize it is needed for system to function properly </li> </ul></li> </ul>  <p>Let's come back to out calculator application. Description given by non-developers could be translated into model in pseudocode like this:  </p>  <pre><code>Class CalculatorModel extends Model {   public int firstNumber;   public int secondNumber;   public int result;    public void calculate()     {     this-&gt;result = this-&gt;firstNumber + this-&gt;secondNumber;   } } </code></pre>  <p>Then controller would look like this:</p>  <pre><code>Class CalculatorController extends Controller {   public void onCalculateButtonClick()   {     this-&gt;model-&gt;calculate();   } } </code></pre>  <p>Let's ignore that business said that on click we should perform calculation and we put that part in controller which is for application logic, because MVC states that controllers must handle these kinds of things, we have different problem anyway - where do we update <code>first</code> and <code>second</code> <code>Number</code> fields? If this approach is used then it simply becomes unclear since different people might and might not mention it, which makes it neither business, nor application logic or both of them which of course doesn't make any sense.  </p>  <p>If we imagine business didn't mentioned that we're updating any numbers before calculation(but we realize that it has to be done for any calculation to occur), then we would've determined that it is indeed application logic and would've placed code inside the controller:</p>  <pre><code>Class CalculatorController extends Controller {   public void updateNumbers()   {     this-&gt;model-&gt;firstNumber = input1-&gt;text;     this-&gt;model-&gt;secondNumber = input2-&gt;text;   }   public void onCalculateButtonClick()  {     this-&gt;updateNumbers();     this-&gt;model-&gt;calculate();  } } </code></pre>  <p>But if business himself mentioned that we should update the first and the second number before doing the calculation that would've been considered as business logic and accordingly would've been put into the model. At that point we have 2 another options, which are adding the field update directly into <code>calculate</code> method, or creating separate method in our model so we can call it from controller before calling <code>calculate()</code>.  </p>  <p>Business also may or may not mention if user input should be validated before performing any actions, but it would make calculation impossible if user gives at input two non-digits so you have to implement it and you have to know where to put it.  </p>  <p>And let's say one day your clients tell you that they want to store every result of a calculation somewhere and then be able to watch it somehow. That would mean you should send requests to database, but since they didn't exactly mentioned that it has to be database it becomes unclear once again where to put code.  </p>  <p>I hope i've made myself clear and you can understand the problem fully to be able to help and/or maybe give your opinion on proper way of designing applications using Model-View-Controller.</p>