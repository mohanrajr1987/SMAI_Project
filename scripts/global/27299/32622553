<p>I have been writing the youtube <code>pong ball canvas</code> tutorial and it works fine.</p>  <p>However, I am trying to change the application a bit by first having one go to a list when clicking on the midlet before it jumps straight to the canvas. So when you run the app. the pongball midlet appears, then when you click on it... it goes to a list of option which are, play and help. When you click on play it goes to the pongball canvas and when you click on help it goes to a form. </p>  <p>I want to be able to exit the canvas and go back to the list instead of having to press the end call button to exit the canvas... I'm not sure where to look in the '<code>j2me in a nutshell</code>' book, I cant find the solution there.</p>  <p>Help. </p>  <p>Here is the code... for both the midlet class and the pongball class..</p>  <pre><code>import javax.microedition.midlet.*; import javax.microedition.lcdui.*;  public class CanvasTut extends MIDlet implements CommandListener {  private Display disp = Display.getDisplay(this);  public List Options;   private Form fmHelp;      private PongBallCanvas c1 = new PongBallCanvas();  public CanvasTut(){     String Games[] = {"Play", "Help "};     Options = new List("Pong Ball", List.IMPLICIT, Games, null);      Options.setCommandListener(this);      fmHelp = new Form("How To Play"); }  public void startApp() {      disp.setCurrent(Options); }  public void pauseApp() { }  public void destroyApp(boolean unconditional) { }  public void commandAction(Command c, Displayable d) {     if(d==Options){         if(c==List.SELECT_COMMAND){             switch(Options.getSelectedIndex()){                 case 0:                    c1.start();                    Display.getDisplay(this).setCurrent(c1);                     break;                  case 1:                     Display.getDisplay(this).setCurrent(fmHelp);                     break;             }         }     } } }   //--------------------------------------end of midlet class-----------------    -----------------------------------------   import java.io.IOException; import javax.microedition.lcdui.*; import javax.microedition.lcdui.game.*;  public class PongBallCanvas extends GameCanvas implements Runnable{  private Image ballImg; private Sprite ballSprite; private int ballX = getWidth()/2; private int ballY = getHeight()/2; private final int ballXmove = 3; private final int ballYmove = 1; private int ballDirection = 0; private int sleepTime = 20; private int Collision = 0;  public PongBallCanvas(){     super(false); }  public void run() {    while(true){        try{            updateScreen(getGraphics());            Thread.sleep(sleepTime);        }catch(Exception e){            e.printStackTrace();        }    } }  public void start(){      try {         ballImg = Image.createImage("/PongBallPic.png");      } catch (IOException ex) {         ex.printStackTrace();     }        ballSprite = new Sprite(ballImg, 32, 32);     ballSprite.defineReferencePixel(16, 16);     ballSprite.setRefPixelPosition(ballX, ballY);      Thread runner = new Thread(this);     runner.start(); }  public void createBackground(Graphics g){     g.setColor(0x000000);     g.fillRect(0, 0, getWidth(), getHeight());     g.setColor(0xFFFFFF);     g.drawString("Collision: " + Collision, 0, 0, g.TOP | g.LEFT);   }  public void updateScreen(Graphics graphics){     createBackground(graphics);     moveBall();     ballSprite.setRefPixelPosition(ballX, ballY);     ballSprite.paint(graphics);     flushGraphics(); }  public void moveBall(){     if(ballDirection == 0){         ballX += ballXmove;         ballY -= ballYmove;     }else if(ballDirection == 1){         ballX += ballXmove;         ballY += ballYmove;     }else if(ballDirection == 2){         ballX -= ballXmove;         ballY += ballYmove;     }else if(ballDirection == 3){         ballX -= ballXmove;         ballY -= ballYmove;     }     if(ballDirection == 3 &amp;&amp; ballX &lt; 16){         ballDirection = 0;         Collision++;     }else if(ballDirection == 3 &amp;&amp; ballY &lt; 16){         ballDirection = 2;         Collision++;     }else if(ballDirection == 0 &amp;&amp; ballY &lt; 16){         ballDirection = 1;         Collision++;     }else if(ballDirection == 0 &amp;&amp; ballX &gt; getWidth()- 16){         ballDirection = 3;         Collision++;     }else if(ballDirection == 1 &amp;&amp; ballX &gt; getWidth() - 16){         ballDirection = 2;         Collision++;     }else if(ballDirection == 1 &amp;&amp; ballY &gt; getHeight()- 16){         ballDirection = 0;         Collision++;     }else if(ballDirection == 2 &amp;&amp; ballX &lt; 16){         ballDirection = 1;         Collision++;     }else if(ballDirection == 2 &amp;&amp; ballY &gt; getHeight()- 16){         ballDirection = 3;         Collision++;     } }  } //-------------------------------end of pong ball class---------------------    ------------------------------- </code></pre>