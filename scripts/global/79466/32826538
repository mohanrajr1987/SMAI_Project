<p>Simple JavaScript object is empty (= has no keys) when <code>angular.equals({}, myObj) === true</code>. </p>  <p>Is there some utility function to detect if <code>$firebaseObject</code> has no keys? It will be never equal to <code>{}</code> because it looks like this:</p>  <pre><code>{    $$conf: Object,    $id: "objectId",    $priority: null,    $value: null } </code></pre>  <p>EDIT: I am trying to hide <code>&lt;div&gt;</code> when <code>$firebaseObject</code> has no data. It seems like this do the trick but I don't know if it is the correct solution:</p>  <pre><code>&lt;div ng-hide="myObj.$value === null"&gt;  [...]  &lt;/div&gt; </code></pre>  <p>From <a href="https://www.firebase.com/docs/web/libraries/angular/api.html" rel="nofollow">the doc</a>:</p>  <blockquote>   <p>If the value in the database is a primitive (boolean, string, or   number) then the value will be stored under this <code>$value</code> key. Modifying   this value and then calling <code>$save()</code> will also update the serverâ€™s   value.</p>      <p>Note that any time other keys exist, this one will be ignored. To   change an object to a primitive value, delete the other keys and add   this key to the object.</p>      <p>[...]</p> </blockquote>  <p>My <code>$firebaseObject</code> has children like this:</p>  <pre><code>key: {    value1: 'something',    value2: 'something' } </code></pre>  <p>When I played around with <code>$value</code> I found this:</p>  <ul> <li>When <code>$firebaseObject</code> has no child, <code>$value</code> is <code>null</code></li> <li>When <code>$firebaseObject</code> has one child, <code>$value</code> is its key</li> <li>When <code>$firebaseObject</code> has more then one child, <code>$value</code> contains all the children objects</li> </ul>  <p>The question is, can I use <code>$value</code> this way to solve my problem or is it impossible because...?</p>