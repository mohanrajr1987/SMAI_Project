<p>I want to port a crypto function from C to Java. The function has to run in constant time, so <strong>no conditional branchings</strong> (and <strong>no table lookups</strong> based on x) are allowed.</p>  <p>The original C code is:</p>  <pre><code>int x,result; ... result = (x==7); ... </code></pre>  <p>So that 'result' is set to 1 if 'x==7' and to 0 otherwise. The 'result' variable is then used in further computations.</p>  <p>I am now looking for the best way to transpose this to Java. As in Java expressions evaluate to booleans and not to integers, one has to simulate the above using operators.</p>  <p>I currently use </p>  <pre><code>int x,result; ... result = (1&lt;&lt;(x-7))&amp;1; ... </code></pre>  <p>which works fine for me, as my x is in the range {0,...,15}. (Note that the shift function uses only the lower 5 bits, so that you will get false positives when x is too large.)</p>  <p>The expression will be evaluated millions of times, so if it there is for instance a clever solution that uses only 2 operators instead of 3, this would make the overall computation faster.</p>