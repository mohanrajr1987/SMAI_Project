<p>So I wrote this function, <code>create_room_connections(struct *, unsigned int)</code> and it takes as input a pointer to a structure, and an unsigned int.</p>  <p>Now, that unsigned int is actually a hexadecimal number, and the purpose of this function is to mask the hexadecimal number with a bitmask, and thereby deduce its decimal representation.</p>  <p>This is my function:</p>  <pre><code>void create_room_connections(struct maze_room *room, unsigned int hex) {   unsigned int emask=8;   unsigned int wmask=4;   unsigned int smask=2;   unsigned int nmask=1;   room-&gt;visited=0;                                          // set visted to false // printf("HEXXXXX=%d\n",hex); // printf("hex&amp;emask=%d\n",hex&amp;emask); // printf("hex&amp;wmask=%d\n",hex&amp;wmask); // printf("hex&amp;smask=%d\n",hex&amp;smask); // printf("hex&amp;nmask=%d\n",hex&amp;nmask); // printf("emask=%d\n",emask); // printf("wmask=%d\n",wmask); // printf("smask=%d\n",smask); // printf("nmask=%d\n",nmask);     if(hex&amp;emask == emask)    {                       //set econn to 1      room-&gt;econn=1;      printf("emask true!,so econn=%d\n",room-&gt;econn);   }   else {      room-&gt;econn=0;      printf("emask false!,so econn=%d\n",room-&gt;econn);  }    if(hex&amp;wmask == wmask) {                          //set wconn to 1      room-&gt;wconn=1;      printf("wmask true!, so wconn=%d\n", room-&gt;wconn);  }   else {      room-&gt;wconn=0;      printf("wmask false!,so wconn=%d\n",room-&gt;wconn);  }    if(hex&amp;smask == smask)    {                       //set sconn to 1      room-&gt;sconn=1;      printf("smask true!,so sconn=%d\n",room-&gt;sconn);  }   else {      room-&gt;sconn=0;      printf("smask false!,so sconn=%d\n",room-&gt;sconn);  }    if(hex&amp;nmask == nmask)    {                       //set nconn to 1      room-&gt;nconn=1;      printf("nmask true!,so nconn=%d\n",room-&gt;nconn);  }   else {     room-&gt;nconn=0;     printf("nmask false!,so nconn=%d\n",room-&gt;nconn); }  // printf("econn, wconn, sconn, nconn=%d %d %d %d\n",room-&gt;econn, room-&gt;wconn, room-&gt;sconn, room-&gt;nconn); } </code></pre>  <p>This is the structure:</p>  <pre><code>struct maze_room {   int row;   int col;   int visited;          //0 for false, 1 for true,    int econn;              // 1 for wall and 0 for opening   int wconn;   int nconn;   int sconn; }; </code></pre>  <p>My line of thinking is as follows:</p>  <p>I have created four bitmasks, </p>  <pre><code>unsigned int emask=8;  //to find out the first bit (most significant) corresponds to econn unsigned int wmask=4;  //to find out the second bit,corresponds to wconn unsigned int smask=2;  //to find out the third bit, corresponds to sconn unsigned int nmask=1;  //to find out the last bit (least significant) corresponds to nconn </code></pre>  <p>I use the following logic 4 times in the function (once for each bit):</p>  <pre><code>if(hex&amp;emask == emask)      // hex is the unsigned int passsed as input. if it has a 1 as its first bit, the if would evaluate to true, and then I set the econn to 1    room-&gt;econn=1;           // econn is an int member of the structure. </code></pre>  <p>In the end, when I print out the values,</p>  <pre><code>room-&gt;econn , room-&gt;wconn, room-&gt;sconn, room-&gt;nconn   //4 members of the structure. </code></pre>  <p>I expect them to correspond with the binary representation of hex.</p>  <p>For example, if <code>hex=13</code> I expect <code>(room-&gt;econn,room-&gt;wconn,room-&gt;sconn,room-&gt;nconn)=(1101) (binary representation of 13)</code></p>  <p>But the output is completely frustrating.</p>  <p>If I pass <code>hex=11</code>, I get <code>1111</code>. <code>hex=3</code> gives <code>1111</code>. <code>hex=10</code> gives <code>0000</code>. (disregarding the output of the printfs inside the if and else blocks) Basically, in some cases either all the <code>if</code>'s are true or all are false.</p>  <p>What am I doing wrong? </p>  <p>EDIT: The calling code is inside a loop, and it goes like</p>  <pre><code>    create_room_connections(&amp;maze[get_index(i, j, num_cols)], conn); </code></pre>  <p>Here <code>conn</code> is the unsigned int that is passed, and the first param (after completely evaluated) is the pointer to the struct. In the main function, <code>maze</code> is 1d array of structs, and <code>get_index</code> is a function that maps a 2d array to the 1d maze           </p>