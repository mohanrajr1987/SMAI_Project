<p>I've used bit masks in Java (not Javascript) before, but it's been a while and it's making me bug out.</p>  <p>This is the Typescript I'm wanting to work with.  Theres 3 roles, </p>  <pre><code>enum Type {     FRUIT = 0x1,     VEGGIE = 0x2,     BOTH = FRUIT | VEGGIE }  class Thing {     role:number;      constructor(role:Type){         this.role = role;     }     getRole(){         return this.role;     }     is(role:Type) {         return !!(this.role &amp; role);     } }  var whatever = new Thing(Type.FRUIT);  console.log('fruit', whatever.is(Type.FRUIT)); console.log('veggie', whatever.is(Type.VEGGIE)); console.log('both', whatever.is(Type.BOTH));  // fruit true // veggie false // both true </code></pre>  <p>I conceptually see why "both" is coming back as "true", but my bit math isn't great.  </p>  <p>When the role is either <code>FRUIT</code> or <code>VEGGIE</code>, the others are false.  When it's set to <code>BOTH</code>, all should be true.  </p>  <p>Tried a few combinations of shifts and bit operations, but I can't get that output.  If I try them separate it's fine, but I'd like to use combinations of bits to build.</p>