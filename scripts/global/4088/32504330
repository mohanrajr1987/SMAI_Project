<p>I'm trying to store in a file a sequence of bits.</p>  <p>I try to describe only the essential:</p>  <ul> <li>I have a vector (I know, not a good idea, but I only use it briefly)</li> <li>I want to store it in a file (I'm using Linux)</li> <li>I want to retrieve it from said file and recreate the vector</li> </ul>  <p>Since C++ doesn't allow the storing of single bits, I had to group all the bits in char and save the char as a "text". To do so I used this <a href="http://www.avrfreaks.net/forum/tut-c-bit-manipulation-aka-programming-101" rel="nofollow">http://www.avrfreaks.net/forum/tut-c-bit-manipulation-aka-programming-101</a></p>  <p>If the number of bits is multiple of 8, everything works fine. If this is not the case, I don't know how to handle the problem.</p>  <p>I'll explain better. I have:</p>  <pre><code>010011000110111101110010011001010110110101 </code></pre>  <p>I save the chars as:</p>  <pre><code>01001100 -&gt; L 01101111 -&gt; o 01110010 -&gt; r 01100101 -&gt; e 01101101 -&gt; m 01 </code></pre>  <p>That last "01"... I don't know how to store it. Of course I could create a byte with a 1 and some 0 padding... but I don't know the number of "extra bits" when I retrieve them! What is padding and what is info?</p>  <p>I simply don't know how to do this... any idea?</p>  <p>Some code for the file writer (Not my actual code... its too long... I wrote only the important parts...):</p>  <pre><code>void Compressor::compress(std::istream &amp;is, std::ostream &amp;os) {   queue&lt;bool&gt; bit_buffer;   char c;    while (is.get(c)) {       new_letter = c;       const std::vector&lt;bool&gt; bit_c = char2bits(new_letter);       for(bool bit : bit_c)          bit_buffer.push(bit);   }   //Here my code adds a certain number of bits, I simulate this with:   bit_buffer.push(false);   bit_buffer.push(true);    // Write the bit buffer into a file   while (bit_buffer.size() &gt;= 8) {      // Group vector&lt;bool&gt; in char     char output = 0;     for (int i=0; i&lt;8; i++) {       int bit = bit_buffer.front();       bit_buffer.pop();       if (bit) bit_set(output, BIT(i));       else bit_clear(output, BIT(i));     }      // Individually write chars in file     os.write(&amp;output,sizeof(char));   }    //????????   //Last bits???   //???????? }  vector&lt;bool&gt; char2bits (char c) {   bitset&lt;8&gt; bit_c (c);   vector&lt;bool&gt; bool_c;   for (int i=7; i&gt;=0; i--) {     bool_c.push_back(bit_c[i]);   }   return bool_c; } </code></pre>