<p>I was trying to solve a problem that required me to flip the bits of a 32 bit unsigned int that is inputted and print it. </p>  <p>I first trying solving it by doing something like this:</p>  <pre><code>Scanner scanner = new Scanner(System.in); // EDIT System.out.println(~scanner.nextLong() | 0); System.out.println(~scanner.nextLong() | 0x00000000L); </code></pre>  <p>But that didn't produce the right answer.</p>  <p>Then, I was able to solve it with:</p>  <pre><code>System.out.println(~scanner.nextLong() &amp; 0xFFFFFFFFL); </code></pre>  <p>Can someone explain to me why my first attempt didn't work?</p>  <p>EDIT: clarified the code a bit.</p>  <p>EDIT2: Here is the problem, for those who are wondering: <a href="https://www.hackerrank.com/challenges/flipping-bits" rel="nofollow">https://www.hackerrank.com/challenges/flipping-bits</a></p>  <p>EDIT3: Oh man. I really didn't think this through. '~'ing the long with only the lower 32 bits with values would result in a negative long due to the upper 32 bits of the long all flipping from 0 to 1, and ORing that long with 0 does nothing, while ANDing that long with 32 1 bits clears the upper 32 bits of that long, leaving the long with just the lower 32 bits flipped.</p>