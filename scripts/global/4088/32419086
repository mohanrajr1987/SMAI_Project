<p>I have troubles with understanding Deflate algorithm (<a href="https://tools.ietf.org/html/rfc1951" rel="nofollow">RFC 1951</a>).</p>  <p><strong>TL; DR</strong> How to parse Deflate compressed block <code>4be4 0200</code>?</p>  <p>I created a file with a letter and newline <code>a\n</code> in it, and run <code>gzip a.txt</code>. Resultant file <code>a.txt.gz</code>:</p>  <pre><code>1f8b 0808 fe8b eb55 0003 612e 7478 7400  4be4 0200  07a1 eadd 0200 0000 </code></pre>  <p>I understand that first line is header with additional information, and last line is CRC32 plus size of input (<a href="https://www.ietf.org/rfc/rfc1951.txt" rel="nofollow">RFC 1951</a>). These two gives no trouble to me.</p>  <p>But how do I interpret the compressed block itself (the middle line)?</p>  <p>Here's hexadecimal and binary representation of it:</p>  <pre><code>4be4 0200  0100 1011 1110 0100 0000 0010 0000 0000 </code></pre>  <p>As far as I understood, somehow these ones:</p>  <blockquote>   <p>Each block of compressed data begins with 3 header bits containing the following data:</p>      <ul>   <li>first bit       BFINAL</li>   <li>next 2 bits     BTYPE</li>   </ul> </blockquote>  <p>...actually ended up at the <strong>end</strong> of first byte: 0100 1<strong>011</strong>. (I'll skip the question why would anyone call "header" something which is actually at the tail of something else.)</p>  <p>RFC contains something that as far as I understand is supposed to be an explanation to this:</p>  <blockquote>   <ul>   <li>Data elements are packed into bytes in order of              increasing bit number within the byte, i.e., starting              with the least-significant bit of the byte.</li>   <li>Data elements other than Huffman codes are packed              starting with the least-significant bit of the data              element.</li>   <li>Huffman codes are packed starting with the most-              significant bit of the code.</li>   </ul>      <p>In other words, if one were to print out the compressed data as            a sequence of bytes, starting with the first byte at the            <em>right</em> margin and proceeding to the <em>left</em>, with the most-            significant bit of each byte on the left as usual, one would be            able to parse the result from right to left, with fixed-width            elements in the correct MSB-to-LSB order and Huffman codes in            bit-reversed order (i.e., with the first bit of the code in the            relative LSB position).</p> </blockquote>  <p>But sadly I don't understand that explanation.</p>  <p>Returning to my data. OK, so BFINAL is set, and BTYPE is what? 10 or 01?</p>  <p>How do I interpret the rest of the data in that compressed block?</p>