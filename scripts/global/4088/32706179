<p>I'm looking at constructing a UDP packet as per a protocol that specifies the layout of the packet to the bit level, and I'm not sure how to go about this in Ruby. My understanding is the <code>pack</code> and <code>unpack</code> functions for arrays would be the most appropriate.</p>  <p><a href="http://ruby-doc.org/core-2.2.0/Array.html#method-i-pack" rel="nofollow">http://ruby-doc.org/core-2.2.0/Array.html#method-i-pack</a></p>  <p>The array documentation lists a whole bunch of different arguments that can be used with <code>pack</code>, but I'm not sure how to pack a boolean value as a single bit.</p>  <p><img src="http://i.stack.imgur.com/YZQNn.png" alt="1"></p>  <p>The format I'm trying to achieve looks like that.</p>  <p>My understanding was that I would be able to do something like:</p>  <pre><code>[size_int, origin_as_int, tagged, addressable, protocol_int, source_int].pack "v1????V1" </code></pre>  <p>Where the questions marks indicate where I'm not sure how to represent the fields. I could do something like</p>  <pre><code>binary_string = "" binary_string += "%02b" % origin_as_int binary_string += (tagged ? "1" : "0") binary_string += (addressable ? "1" : "0") binary_string += "%012b" % protocol_int  munged_stuff = binary_string.to_i(2) [size_int, munged_stuff, source_int].pack "v2V1" </code></pre>  <p>I suppose? Feels kind of bad, though. </p>