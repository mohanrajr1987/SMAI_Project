<p>I keep getting <code>Segmentation Fault (core dumped)</code> run time error and I can't figure out why.</p>  <p>My code:</p>  <pre><code>struct Node {     void *next;     void *val; }; typedef struct Node* NodePtr;  struct List {     NodePtr head; }; typedef struct List* ListPtr;  ListPtr create() {     ListPtr ptr = malloc(sizeof(struct List));      return ptr; }  int insert(ListPtr list, void *obj) {     NodePtr newObj = malloc(sizeof(struct Node));      //Cast next as a self referencing Node     newObj-&gt;next = (NodePtr) newObj-&gt;next;      //Point to beginning of list     NodePtr current = list-&gt;head;      if(list-&gt;head == NULL)     {         newObj-&gt;val = obj;         list-&gt;head-&gt;next = newObj;         newObj-&gt;next = NULL;          return 1;     }      return 0; }  int main(int argc, char *argv[]) {     int x = 2;     int *p = &amp;x;      ListPtr thing = create();      insert(thing, p);      return 0; } </code></pre>  <p>The error is here:  <code>list-&gt;head-&gt;next = newObj</code> after some debugging. I thought I had to allocate memory for list->head->next, but when I added the code in for that it still gave me the same error. Am I casting it wrong or not allocating memory correctly? Any help would be appreciated, thanks!</p>