<p>I'm currently learning about dynamic memory in C++ and I've found many troubles while trying to fully comprehend and understand the memory segments within a program's memory.</p>  <p>So we have 4 memory segments: Stack, Heap, Data and Code.</p>  <p>Firstly I want to see if I got the basic of it</p>  <p><strong>- Stack:</strong> a memory segment which is being managed like a stack once you go into a scope, you have a limited memory allocated within that segment for that scope that shall contain info regarding that scope  ( variables, etc )</p>  <p><strong>- Heap:</strong> a dynamic memory segment that is unlimited and when you allocate a memory in that segment it will not be deleted as you exit the scope of the code or function used and it needs to be deleted by you or a gc ( if it is unreachable anymore ) </p>  <p><strong>- Code:</strong> a memory segment containing the code that needs to be executed by the CPU</p>  <p><strong>- Data:</strong> a memory segment containing information regarding variables ( int x - x represents memory cell 0x0FA20F )</p>  <p>My first question is, did I get it right? I'm really not sure....</p>  <p>If I did not get it right my questions are:</p>  <ul> <li><p>what is each memory segment used for?</p></li> <li><p>In which memory segment information regarding variables, for example, <code>int x</code> - x represents memory cell <code>0x0FA20F</code> is located?</p></li> <li><p>When using recursion, when you call a function from within the function and still have code left to execute in that function, that code is saved in what people call a Stack, to what does that refer?, the regular Stack segment? if so does that mean that within the stack regular code lines that need to be executed in your current scope are stored? so what is the Code memory segment used for?</p></li> </ul>  <p>I'd love it if someone could organize the mess that is in my mind right now and explain to me what does each memory segment fully does while referring to my questions.</p>