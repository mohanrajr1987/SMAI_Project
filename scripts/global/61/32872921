<p>First I have to mention that I run on a CentOS 7 tuned up to support 1 million connections. I tested with a simple C server and client and I connected 512000 clients. I could have connect more but I did not have enought RAM to spawn more linux client machines, since from a machine I can open 65536 connections; 8 machines * 64000 connections each = 512000.</p>  <p>I made a simple Erlang server to which I want to connect 1 million or half a million clients, using the same C client. The problem I'm having now is memory related. For each successfully <code>gen_tcp:accept</code> call I spawn a process. Around 50000 open connections costs me 3.7 GB RAM on server, meanwhile using the C server I could have open 512000 connections using 1.9 GB RAM. It is true that on the C server I did not created a process after accept to handle stuff, I just called accept again in while loop, but even so... guys on web did this erlang thing with less memory ( ejabberd riak  )</p>  <p>I presume that the flags that I pass to the erlang VM should do the trick. From what I read in documentation and on the web this is what I have: <br><code>erl +K true +Q 64200 +P 134217727 -env ERL_MAX_PORTS 40960000 -env ERTS_MAX_PORTS 40960000 +a 16 +hms 1024 +hmbs 1024</code></p>  <p>This is the server code, I open 1 listener that monitors port 5001 by calling <code>start(1, 5001)</code>.</p>  <pre><code>start(Num,LPort) -&gt;   case gen_tcp:listen(LPort,[{reuseaddr, true},{backlog,9000000000}]) of     {ok, ListenSock} -&gt;       start_servers(Num,ListenSock),       {ok, Port} = inet:port(ListenSock),       Port;     {error,Reason} -&gt;       {error,Reason}   end.  start_servers(0,_) -&gt;   ok; start_servers(Num,LS) -&gt;   spawn(?MODULE,server,[LS,0]),   start_servers(Num-1,LS).  server(LS, Nr) -&gt;   io:format("before accept ~w~n",[Nr]),   case gen_tcp:accept(LS) of     {ok,S} -&gt;       io:format("after accept ~w~n",[Nr]),       spawn(ex,server,[LS,Nr+1]),       proc_lib:hibernate(?MODULE, loop, [S]);     Other -&gt;       io:format("accept returned ~w - goodbye!~n",[Other]),       ok   end.  loop(S) -&gt;   ok = inet:setopts(S,[{active,once}]),   receive     {tcp,S, _Data} -&gt;       Answer = 1, % Not implemented in this example       gen_tcp:send(S,Answer),       proc_lib:hibernate(?MODULE, loop, [S]);     {tcp_closed,S} -&gt;       io:format("Socket ~w closed [~w]~n",[S,self()]),       ok   end. </code></pre>