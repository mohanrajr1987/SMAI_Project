<p>I have following code to send request and receive a response, it seems like everything is configured but the code is returning <code>NullPointerException</code>. </p>  <p>I am not sure whats missing. I printed out readyURL variable which has the correct URL address. The stackTrace does not offer much.</p>  <p><strong>Code</strong></p>  <pre><code>try {     final String APIKEY = "MYAPI";     final String URL = "http://api-sandbox.seatwave.com/v2/discovery/events?apikey="             + APIKEY;     String readyUrl = URL + "&amp;what=" + name;     RestTemplate restTemplate = new RestTemplate();     EventsResponse eventResponse = restTemplate.getForObject(readyUrl,             EventsResponse.class);      System.err.println("seatwave&gt;&gt;&gt;"             + eventResponse.getEvents().getEvent().size()); //line 245 } catch (NullPointerException e) {     e.printStackTrace(); }   @XmlRootElement @XmlAccessorType(XmlAccessType.FIELD) public class EventsResponse {     @XmlElement     private Status status;     @XmlElement(name = "Paging")     private Page page;     @XmlElement     private Events events;      public Status getStatus() {       return status;     }      public void setStatus(Status status) {       this.status = status;     }      public Page getPage() {       return page;     }      public void setPage(Page page) {       this.page = page;     }      public Events getEvents() {       return events;     }      public void setEvents(Events events) {       this.events = events;     } }  @XmlRootElement @XmlAccessorType(XmlAccessType.FIELD) public class Status {     @XmlElement(name = "Version")     private double version;     @XmlElement(name = "TimeStampUtc")     private Date timeStampUtc;     @XmlElement(name = "Code")     private int code;     @XmlElement(name = "Message")     private String message;     @XmlElement(name = "Details")     private String details;     public double getVersion() {       return version;    }      public void setVersion(double version) {       this.version = version;     }      public Date getTimeStampUtc() {       return timeStampUtc;     }      public void setTimeStampUtc(Date timeStampUtc) {       this.timeStampUtc = timeStampUtc;     }      public int getCode() {      return code;     }    public void setCode(int code) {      this.code = code;   }    public String getMessage() {      return message;   }    public void setMessage(String message) {      this.message = message;   }    public String getDetails() {      return details;   }    public void setDetails(String details) {      this.details = details;   } }  @XmlRootElement(name="Page") @XmlAccessorType(XmlAccessType.FIELD) public class Page {     @XmlElement(name="PageNumber")     private int pageNumber;     @XmlElement(name="PageSize")     private int pageSize;     @XmlElement(name="PageResultCount")     private int pageResultCount;     @XmlElement(name="TotalResultCount")     private int totalResultCount;     @XmlElement(name="TotalPageCount")     private int totalPageCount;      public int getPageNumber() {       return pageNumber;     }      public void setPageNumber(int pageNumber) {        this.pageNumber = pageNumber;     }      public int getPageSize() {       return pageSize;    }     public void setPageSize(int pageSize) {       this.pageSize = pageSize;    }     public int getPageResultCount() {       return pageResultCount;    }     public void setPageResultCount(int pageResultCount) {       this.pageResultCount = pageResultCount;    }     public int getTotalResultCount() {       return totalResultCount;    }     public void setTotalResultCount(int totalResultCount) {       this.totalResultCount = totalResultCount;    }     public int getTotalPageCount() {       return totalPageCount;    }     public void setTotalPageCount(int totalPageCount) {      this.totalPageCount = totalPageCount;    }  }  @XmlRootElement @XmlAccessorType(XmlAccessType.FIELD) public class Events {     @XmlElement     private List&lt;Event&gt; event;      public List&lt;Event&gt; getEvent() {       return event;     }        public void setEvent(List&lt;Event&gt; event) {       this.event = event;     }  }  @XmlRootElement @XmlAccessorType(XmlAccessType.FIELD) public class Event {     @XmlElement(name = "Id")     private int id;     @XmlElement(name = "Date")     private Date date;     @XmlElement(name = "EventGroupName")     private String eventGroupName;     @XmlElement(name = "VenueName")     private String venueName;     @XmlElement(name = "Town")     private String town;     @XmlElement(name = "Country")     private String country;     @XmlElement(name = "TicketCount")     private int ticketCount;     @XmlElement(name = "Currency")     private String currency;     @XmlElement(name = "MinPrice")     private double minPrice;     @XmlElement(name = "SwURL")     private String swUrl;     @XmlElement(name = "EventGroupImageURL")     private String eventGroupImageUrl;     @XmlElement(name = "LayoutId")     private int layoutId;     @XmlElement(name = "EventGroupId")     private int eventGroupId;     @XmlElement(name = "VenueId")     private int venueId;     @XmlElement(name = "SwSellURL")     private String swSellUrl;    public int getId() {     return id;   }    public void setId(int id) {       this.id = id;   }    public Date getDate() {       return date;   }    public void setDate(Date date) {       this.date = date;   }    public String getEventGroupName() {      return eventGroupName;   }    public void setEventGroupName(String eventGroupName) {         this.eventGroupName = eventGroupName;   }    public String getVenueName() {       return venueName;   }    public void setVenueName(String venueName) {       this.venueName = venueName;   }    public String getTown() {      return town;   }    public void setTown(String town) {      this.town = town;   }    public String getCountry() {      return country;   }    public void setCountry(String country) {         this.country = country;   }    public int getTicketCount() {         return ticketCount;   }    public void setTicketCount(int ticketCount) {         this.ticketCount = ticketCount;   }    public String getCurrency() {         return currency;   }    public void setCurrency(String currency) {         this.currency = currency;   }    public double getMinPrice() {         return minPrice;   }    public void setMinPrice(double minPrice) {         this.minPrice = minPrice;   }    public String getSwUrl() {         return swUrl;   }    public void setSwUrl(String swUrl) {         this.swUrl = swUrl;   }    public String getEventGroupImageUrl() {         return eventGroupImageUrl;   }    public void setEventGroupImageUrl(String eventGroupImageUrl) {         this.eventGroupImageUrl = eventGroupImageUrl;   }    public int getLayoutId() {         return layoutId;   }    public void setLayoutId(int layoutId) {         this.layoutId = layoutId;   }    public int getEventGroupId() {         return eventGroupId;   }    public void setEventGroupId(int eventGroupId) {         this.eventGroupId = eventGroupId;   }    public int getVenueId() {         return venueId;   }    public void setVenueId(int venueId) {         this.venueId = venueId;   }    public String getSwSellUrl() {         return swSellUrl;   }    public void setSwSellUrl(String swSellUrl) {         this.swSellUrl = swSellUrl;   } } </code></pre>  <p><strong>Exception</strong></p>  <pre><code>java.lang.NullPointerException     at com.myproject.tickets.service.TicketSeviceImpl.seatWave(TicketSeviceImpl.java:245)     at com.myproject.tickets.service.TicketSeviceImpl.findTicket(TicketSeviceImpl.java:45)     at com.myproject.web.TicketController.findTicket(TicketController.java:29)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:606)     at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:221)     at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:137)     at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110)     at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:777)     at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:706)     at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)     at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:943)     at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:877)     at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966)     at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:857)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:621)     at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:728)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:369)     at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:109)     at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:83)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:381)     at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:97)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:381)     at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:100)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:381)     at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:78)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:381)     at org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter.doFilter(RememberMeAuthenticationFilter.java:112)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:381)     at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:54)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:381)     at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:35)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:381)     at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilter(BasicAuthenticationFilter.java:177)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:381)     at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:187)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:381)     at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:105)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:381)     at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:79)     at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:381)     at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:168)     at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:344)     at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:261)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)     at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222)     at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)     at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)     at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)     at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99)     at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953)     at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)     at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)     at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1023)     at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589)     at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:312)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)     at java.lang.Thread.run(Thread.java:744) </code></pre>  <p><strong>Sample result</strong> </p>  <pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;EventsResponse xmlns:i="http://www.w3.org/2001/XMLSchema-instance"&gt;    &lt;Status&gt;       &lt;Version&gt;2.0&lt;/Version&gt;       &lt;TimeStampUtc&gt;2015-09-27T08:44:24&lt;/TimeStampUtc&gt;       &lt;Code&gt;0&lt;/Code&gt;       &lt;Message&gt;Success&lt;/Message&gt;       &lt;Details /&gt;    &lt;/Status&gt;    &lt;Paging&gt;       &lt;PageNumber&gt;1&lt;/PageNumber&gt;       &lt;PageSize&gt;50&lt;/PageSize&gt;       &lt;PageResultCount&gt;50&lt;/PageResultCount&gt;       &lt;TotalResultCount&gt;7889&lt;/TotalResultCount&gt;       &lt;TotalPageCount&gt;158&lt;/TotalPageCount&gt;    &lt;/Paging&gt;    &lt;Events&gt;       &lt;Event&gt;          &lt;Id&gt;948040&lt;/Id&gt;          &lt;Date&gt;2015-09-27T14:30:00&lt;/Date&gt;          &lt;EventGroupName&gt;The Lion King - London&lt;/EventGroupName&gt;          &lt;VenueName&gt;Lyceum Theatre London&lt;/VenueName&gt;          &lt;Town&gt;London&lt;/Town&gt;          &lt;Country&gt;UK&lt;/Country&gt;          &lt;TicketCount&gt;183&lt;/TicketCount&gt;          &lt;Currency&gt;GBP&lt;/Currency&gt;          &lt;MinPrice&gt;29.75&lt;/MinPrice&gt;          &lt;SwURL&gt;http://www.seatwave.com/the-lion-king-london-tickets/lyceum-theatre--tickets/27-september-2015/perf/948040?affid=&amp;amp;appid=203710&lt;/SwURL&gt;          &lt;EventGroupImageURL&gt;http://z.stwv.im/filestore/season/image/the-lion-king_000277_1_mainpicture.jpg&lt;/EventGroupImageURL&gt;          &lt;LayoutId&gt;232&lt;/LayoutId&gt;          &lt;EventGroupId&gt;277&lt;/EventGroupId&gt;          &lt;VenueId&gt;232&lt;/VenueId&gt;          &lt;SwSellURL&gt;http://www.seatwave.com/sellticketdetails?performanceId=948040&amp;amp;affid=&amp;amp;appid=2037810&lt;/SwSellURL&gt;       &lt;/Event&gt;       &lt;Event&gt;          &lt;Id&gt;987509&lt;/Id&gt;          &lt;Date&gt;2015-09-27T15:00:00&lt;/Date&gt;          &lt;EventGroupName&gt;American Idiot&lt;/EventGroupName&gt;          &lt;VenueName&gt;Arts Theatre London&lt;/VenueName&gt;          &lt;Town&gt;London&lt;/Town&gt;          &lt;Country&gt;UK&lt;/Country&gt;          &lt;TicketCount&gt;28&lt;/TicketCount&gt;          &lt;Currency&gt;GBP&lt;/Currency&gt;          &lt;MinPrice&gt;35.7&lt;/MinPrice&gt;          &lt;SwURL&gt;http://www.seatwave.com/american-idiot-tickets/arts-theatre-tickets/27-september-2015/perf/987509?affid=&amp;amp;appid=2037810&lt;/SwURL&gt;          &lt;EventGroupImageURL&gt;http://z.stwv.im/filestore/season/image/americanidiot_32152_1_1_20111209091615.jpg&lt;/EventGroupImageURL&gt;          &lt;LayoutId&gt;4576&lt;/LayoutId&gt;          &lt;EventGroupId&gt;32152&lt;/EventGroupId&gt;          &lt;VenueId&gt;4207&lt;/VenueId&gt;          &lt;SwSellURL&gt;http://www.seatwave.com/sellticketdetails?performanceId=987509&amp;amp;affid=&amp;amp;appid=2037810&lt;/SwSellURL&gt;       &lt;/Event&gt;       &lt;Event&gt;          &lt;Id&gt;948273&lt;/Id&gt;          &lt;Date&gt;2015-09-27T15:00:00&lt;/Date&gt;          &lt;EventGroupName&gt;Matilda The Musical&lt;/EventGroupName&gt;          &lt;VenueName&gt;Cambridge Theatre&lt;/VenueName&gt; </code></pre>  <p><strong>Update</strong></p>  <p>I added this code right after restTemplate.getForObject line but nothing will be shown on console.</p>  <pre><code>if(eventResponse == null)             {                 System.err.println("it is null");             }else{              System.err.println("message:&gt;&gt;"+eventResponse.getStatus().getMessage());             } </code></pre>