<p>I have the following classes:</p>  <pre><code>   @XmlRootElement    @XmlAccessorType(XmlAccessType.FIELD)    public class Employee {     @XmlAttribute    @XmlID    private String id;     public String getId() {       return id;    }     public void setId(String id) {       this.id = id;    }     public String getName() {       return name;    }     public void setName(String name) {       this.name = name;    }     public Employee getManager() {       return manager;    }     public void setManager(Employee manager) {      this.manager = manager;    }     public List&lt;Employee&gt; getReports() {       return reports;    }     public void setReports(List&lt;Employee&gt; reports) {      this.reports = reports;    }    @XmlAttribute   private String name;    @XmlIDREF   private Employee manager;    @XmlElement(name="report")   @XmlIDREF   private List&lt;Employee&gt; reports;    public Employee() {       reports = new ArrayList&lt;Employee&gt;();   } } </code></pre>  <p>The Company class:</p>  <pre><code>  @XmlRootElement   @XmlAccessorType(XmlAccessType.FIELD)   public class Company {    @XmlElement(name="employee")   private List&lt;Employee&gt; employees;    public Company() {       employees = new ArrayList&lt;Employee&gt;();   }     public List&lt;Employee&gt; getEmployees(){       return employees;   } } </code></pre>  <p>My main contains the following:</p>  <pre><code>    Employee employee1 = new Employee();     employee1.setId("1");     employee1.setName("Jane Doe");     company.getEmployees().add(employee1);      Employee employee2 = new Employee();     employee2.setId("2");     employee2.setName("John Smith");     employee2.setManager(employee1);     employee1.getReports().add(employee2);     company.getEmployees().add(employee2);      Employee employee3 = new Employee();     employee3.setId("3");     employee3.setName("Anne Jones");     employee3.setManager(employee1);     employee1.getReports().add(employee3);     company.getEmployees().add(employee3); </code></pre>  <p>If I marshall this it runs fine. But if I create the following schema and then add the schema in the main then I get the following errors:</p>  <p>Schema:</p>  <pre><code>    &lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;     &lt;xs:schema version="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;      &lt;xs:element name="company" type="company"/&gt;      &lt;xs:complexType name="company"&gt;     &lt;xs:sequence&gt;     &lt;xs:element name="employee" type="employee" minOccurs="0"  maxOccurs="unbounded"/&gt;     &lt;/xs:sequence&gt;   &lt;/xs:complexType&gt;    &lt;xs:complexType name="employee"&gt;     &lt;xs:sequence&gt;       &lt;xs:element name="manager" type="xs:IDREF" minOccurs="0"/&gt;       &lt;xs:element name="report" type="xs:IDREF" minOccurs="0" maxOccurs="unbounded"/&gt;     &lt;/xs:sequence&gt;     &lt;xs:attribute name="id" type="xs:ID"/&gt;     &lt;xs:attribute name="name" type="xs:string"/&gt;   &lt;/xs:complexType&gt; &lt;/xs:schema&gt; </code></pre>  <p><strong>Error Received:</strong></p>  <p>Exception in thread "main" javax.xml.bind.MarshalException  - with linked exception: [org.xml.sax.SAXParseException: cvc-datatype-valid.1.2.1: '1' is not a valid value for 'NCName'.]</p>  <p>I am aware this is because NCName cannot start with a number and have whitespaces. But in my case the id is a number. </p>  <p><strong>I want to know:</strong> 1) Why does this only happen when I include the schema? 2) What is the workaround, and is the only way to use moxy</p>