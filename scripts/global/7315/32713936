<p>I seem to be having an issue that for the life of me I can not see why. I suspect it is a name space problem.</p>  <p>The following code always results in the following error: DynamicHelper.createQuery: Dynamic type not found:</p>  <p>I have tried numerous namespaces</p>  <ul> <li>"mmckenzie.stockcontrol/supplier"</li> <li>"supplier"</li> <li>"supplierDAO"</li> <li>"mmckenzie.stockcontrol/supplierDAO"</li> </ul>  <p>I fully expect that this is going to be user error. Any guidence is most welcome.</p>  <p>JAVA CODE:</p>  <pre><code>package model;  import java.io.File; import java.io.IOException; import java.io.InputStream; import java.net.URL;  import javax.xml.bind.JAXBException;  import org.eclipse.persistence.dynamic.DynamicEntity; import org.eclipse.persistence.jaxb.dynamic.DynamicJAXBContext; import org.eclipse.persistence.jaxb.dynamic.DynamicJAXBContextFactory; import org.xml.sax.EntityResolver; import org.xml.sax.InputSource; import org.xml.sax.SAXException;  public class Test {      public static void main(String[] args)     {         try {             URL schema = new URL("http://localhost:8080/stockcontrol/schema/stockcontrol.xsd");             InputStream xsd = schema.openStream();              EntityResolver er = new EntityResolver()             {                 @Override                 public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException                 {                     URL schema = new URL("http://localhost:8080/stockcontrol/schema/"+(new File(systemId)).getName());                     InputStream xsd = schema.openStream();                      InputSource is = new InputSource(xsd);                     is.setSystemId(schema.getPath());                     return is;                 }             };             //create the context from the XSD              DynamicJAXBContext xmlContext = DynamicJAXBContextFactory.createContextFromXSD(xsd,er, null, null);              //create a DYNAMICEntity for the supplier object.             DynamicEntity de = xmlContext.newDynamicEntity("mmckenzie.stockcontrol/supplier");         }         catch (IOException | JAXBException e)         {             e.printStackTrace();         }     } } </code></pre>  <p>XSD</p>  <pre><code>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt; &lt;xs:schema elementFormDefault="qualified" version="1.0" targetNamespace="mmckenzie.stockcontrol" xmlns:tns="mmckenzie.stockcontrol" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;    &lt;xs:import schemaLocation="stockcontrol2.xsd"/&gt;    &lt;xs:element name="batch" type="tns:batchDAO"/&gt;    &lt;xs:element name="batches" type="tns:batchesDAO"/&gt;    &lt;xs:element name="component" type="tns:componentDAO"/&gt;    &lt;xs:element name="components" type="tns:componentsDAO"/&gt;    &lt;xs:element name="prefixes" type="tns:componentPrefixesDAO"/&gt;    &lt;xs:element name="product" type="tns:productDAO"/&gt;    &lt;xs:element name="product_batches" type="tns:productBatchesDAO"/&gt;    &lt;xs:element name="productbatch" type="tns:productBatchDAO"/&gt;    &lt;xs:element name="products" type="tns:productsDAO"/&gt;    &lt;xs:element name="supplier" type="tns:supplierDAO"/&gt;    &lt;xs:element name="suppliers" type="tns:suppliersDAO"/&gt;    &lt;xs:complexType name="batchesDAO"&gt;     &lt;xs:sequence&gt;       &lt;xs:element name="batch" type="tns:batchDAO" nillable="true" minOccurs="0" maxOccurs="unbounded"/&gt;     &lt;/xs:sequence&gt;   &lt;/xs:complexType&gt;    &lt;xs:complexType name="batchDAO"&gt;     &lt;xs:sequence&gt;       &lt;xs:element name="idbatch" type="xs:int"/&gt;       &lt;xs:element name="dateReceived" type="xs:long"/&gt;       &lt;xs:element name="dateConsumed" type="xs:long"/&gt;       &lt;xs:element name="invoice" type="xs:string" minOccurs="0"/&gt;       &lt;xs:element name="qty" type="xs:int"/&gt;       &lt;xs:element name="qtyInStock" type="xs:int"/&gt;       &lt;xs:element name="unitCost" type="xs:decimal" minOccurs="0"/&gt;       &lt;xs:element name="componentId" type="xs:int"/&gt;       &lt;xs:element name="supplierId" type="xs:int"/&gt;       &lt;xs:element name="unitType" type="unitType" minOccurs="0"/&gt;       &lt;xs:element name="isActive" type="xs:boolean"/&gt;       &lt;xs:element ref="tns:products" minOccurs="0"/&gt;       &lt;xs:element name="batchCost" type="xs:decimal" minOccurs="0"/&gt;     &lt;/xs:sequence&gt;   &lt;/xs:complexType&gt;    &lt;xs:complexType name="productsDAO"&gt;     &lt;xs:sequence&gt;       &lt;xs:element name="product" type="tns:productDAO" nillable="true" minOccurs="0" maxOccurs="unbounded"/&gt;     &lt;/xs:sequence&gt;   &lt;/xs:complexType&gt;    &lt;xs:complexType name="productDAO"&gt;     &lt;xs:sequence&gt;       &lt;xs:element name="idProduct" type="xs:int"/&gt;       &lt;xs:element name="cost" type="xs:decimal" minOccurs="0"/&gt;       &lt;xs:element name="description" type="xs:string" minOccurs="0"/&gt;       &lt;xs:element name="quantity" type="xs:int"/&gt;       &lt;xs:element name="sellPrice" type="xs:decimal" minOccurs="0"/&gt;       &lt;xs:element name="productBatches" type="tns:productBatchesDAO" minOccurs="0"/&gt;       &lt;xs:element name="date_sold" type="timestamp" minOccurs="0"/&gt;       &lt;xs:element name="date_produced" type="timestamp" minOccurs="0"/&gt;       &lt;xs:element ref="tns:components" minOccurs="0"/&gt;       &lt;xs:element name="hours_worked" type="xs:double"/&gt;     &lt;/xs:sequence&gt;   &lt;/xs:complexType&gt;    &lt;xs:complexType name="productBatchesDAO"&gt;     &lt;xs:sequence&gt;       &lt;xs:element name="productbatches" type="tns:productBatchDAO" nillable="true" minOccurs="0" maxOccurs="unbounded"/&gt;     &lt;/xs:sequence&gt;   &lt;/xs:complexType&gt;    &lt;xs:complexType name="productBatchDAO"&gt;     &lt;xs:sequence&gt;       &lt;xs:element ref="tns:component" minOccurs="0"/&gt;       &lt;xs:element ref="tns:batch" minOccurs="0"/&gt;       &lt;xs:element name="quantyUsed" type="xs:int"/&gt;     &lt;/xs:sequence&gt;   &lt;/xs:complexType&gt;    &lt;xs:complexType name="componentDAO"&gt;     &lt;xs:sequence&gt;       &lt;xs:element name="idcomponent" type="xs:int"/&gt;       &lt;xs:element name="componentName" type="xs:string" minOccurs="0"/&gt;       &lt;xs:element ref="tns:batches" minOccurs="0"/&gt;       &lt;xs:element name="componentPrefix" type="componentPrefix" minOccurs="0"/&gt;       &lt;xs:element name="qtyInStock" type="xs:int"/&gt;       &lt;xs:element ref="tns:products" minOccurs="0"/&gt;       &lt;xs:element name="quantity" type="xs:int"/&gt;     &lt;/xs:sequence&gt;   &lt;/xs:complexType&gt;    &lt;xs:complexType name="componentsDAO"&gt;     &lt;xs:sequence&gt;       &lt;xs:element name="component" type="tns:componentDAO" nillable="true" minOccurs="0" maxOccurs="unbounded"/&gt;     &lt;/xs:sequence&gt;   &lt;/xs:complexType&gt;    &lt;xs:complexType name="suppliersDAO"&gt;     &lt;xs:sequence&gt;       &lt;xs:element name="supplier" type="tns:supplierDAO" nillable="true" minOccurs="0" maxOccurs="unbounded"/&gt;     &lt;/xs:sequence&gt;   &lt;/xs:complexType&gt;    &lt;xs:complexType name="supplierDAO"&gt;     &lt;xs:sequence&gt;       &lt;xs:element name="idsupplier" type="xs:int"/&gt;       &lt;xs:element name="modified" type="timestamp" minOccurs="0"/&gt;       &lt;xs:element name="name" type="xs:string" minOccurs="0"/&gt;       &lt;xs:element ref="tns:batches" minOccurs="0"/&gt;     &lt;/xs:sequence&gt;   &lt;/xs:complexType&gt;    &lt;xs:complexType name="componentPrefixesDAO"&gt;     &lt;xs:sequence&gt;       &lt;xs:element name="prefix" type="componentPrefix" nillable="true" minOccurs="0" maxOccurs="unbounded"/&gt;     &lt;/xs:sequence&gt;   &lt;/xs:complexType&gt; &lt;/xs:schema&gt; </code></pre>  <p>All comments suggestions most welcome.</p>