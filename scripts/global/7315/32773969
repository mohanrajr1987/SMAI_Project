<p>I have an XSD which defines a hierarchy of several complex types (each one being a child of the other).</p>  <p>Ex:</p>  <pre><code>&lt;xs:schema version="1.3"   targetNamespace="https://www.domain.com/schema/reports/export/1.0"   xmlns:tns="https://www.domain.com/schema/reports/export/1.0"   xmlns:xs="http://www.w3.org/2001/XMLSchema"   elementFormDefault="qualified"&gt;  &lt;xs:element name="detailedreport"&gt;   &lt;xs:complexType&gt;     &lt;xs:sequence&gt;       &lt;xs:element name="severity" minOccurs="6" maxOccurs="6" type="tns:SeverityType" /&gt;     &lt;/xs:sequence&gt;     &lt;/xs:complexType&gt; &lt;/xs:element&gt;  &lt;xs:complexType name="SeverityType"&gt;   &lt;xs:sequence&gt;     &lt;xs:element name="category" minOccurs="0" maxOccurs="unbounded" type="tns:CategoryType"/&gt;   &lt;/xs:sequence&gt; &lt;/xs:complexType&gt;  &lt;xs:complexType name="CategoryType"&gt;   &lt;xs:sequence&gt;     &lt;xs:element name="cwe" maxOccurs="unbounded" type="tns:CweType"/&gt;   &lt;/xs:sequence&gt; &lt;/xs:complexType&gt;  &lt;xs:complexType name="CweType"&gt;   &lt;xs:sequence&gt;     &lt;xs:element name="staticflaws" type="tns:FlawListType" minOccurs="0"/&gt;   &lt;/xs:sequence&gt; &lt;/xs:complexType&gt;  &lt;xs:complexType name="FlawListType"&gt;   &lt;xs:sequence&gt;     &lt;xs:element name="flaw" minOccurs="0" maxOccurs="unbounded" type="tns:FlawType" /&gt;   &lt;/xs:sequence&gt; &lt;/xs:complexType&gt;  &lt;xs:complexType name="FlawType"&gt;   &lt;xs:sequence&gt;     &lt;xs:element name="mitigations" minOccurs="0" maxOccurs="1" type="tns:MitigationListType" /&gt;     &lt;xs:element name="exploit_desc" type="tns:LongTextType" minOccurs="0" maxOccurs="1"/&gt;   &lt;/xs:sequence&gt; &lt;/xs:complexType&gt;   &lt;xs:complexType name="MitigationListType"&gt;   &lt;xs:sequence&gt;     &lt;xs:element name="mitigation" minOccurs="0" maxOccurs="unbounded" type="tns:MitigationType"/&gt;   &lt;/xs:sequence&gt; &lt;/xs:complexType&gt;  &lt;xs:complexType name="MitigationType"&gt;   &lt;xs:attribute name="action" type="xs:string" use="required"/&gt;   &lt;xs:attribute name="description" type="xs:string" use="required"/&gt;   &lt;xs:attribute name="user" type="xs:string" use="required"/&gt;   &lt;xs:attribute name="date" type="xs:string" use="required"/&gt; &lt;/xs:complexType&gt;  &lt;/xs:schema&gt; </code></pre>  <p>I'm looking to import only complexType <code>FlawType</code> into a list.  I figure I can probably use Apache Digester to do this but was wondering if there was some way to do this with JAXB.  Unmarshalling direct to a <code>detailedreport</code> object and then using loops to extract the FlawType is feasible, but seems like a lot of extra work.</p>  <p>In essence, I'm hoping to be able to come up with a solution that would do something like:</p>  <pre><code>   String xml = FileUtils.readFileToString( XML_File );    unmarshaller = JAXBContext.createUnmarshaller();    // only unmarhsal nodes of FlawType.class from the xml file.    List&lt;FlawType&gt; flawTypes = unmarshaller.unmarshal( xml, FlawType.class ); </code></pre>  <p>I could probably load the entire XML file into a DOM object, then use something like XPath to locate all the individual <code>FlawType</code> nodes and for each node, use an Unmarshaller to do it for each node, but didn't know if there was an easier way.  I presume I might be able to use some form of a SAX Parser as well (I've never used them) but was hoping for something a little more straight forward.</p>  <p>I'm actually using the Spring 4 framework with spring-oxm package to handle a lot of the JAXB legwork for me, so would love to find a simple solution that will be easily understood and maintainable.  Using something like Digester just adds more technology to my stack which I would much rather avoid.</p>  <p>Is there an easy way to do this with JAXB, or this is beyond the scope of JAXB?</p>