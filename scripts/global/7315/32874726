<p>I have an XML to load with JAXB. It load correctly, except that getEffectSettings() size is 0 when it should show 2 because I have two 'effect-setting' in the 'settings-list' element. Any ideas? I'm able to load and print the Effect's target attribute and the effects are shown as it should except this variable.</p>  <p>The XML:     </p>  <pre><code>&lt;item:item xmlns:item="http://www.swordsandsorcery.com/item" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"            xsi:schemaLocation="http://www.swordsandsorcery.com/item ../schema.xsd"&gt;     &lt;item:id&gt;1&lt;/item:id&gt;     &lt;item:name&gt;Laxi's epic&lt;/item:name&gt;     &lt;item:type&gt;ONE_HANDED_AXES&lt;/item:type&gt;     &lt;item:usable&gt;true&lt;/item:usable&gt;     &lt;item:use-effect-list&gt;         &lt;item:effect target="com.xyz.HealEffect"&gt;             &lt;item:settings-list&gt;                 &lt;item:effect-setting&gt;                     &lt;item:setting-name&gt;amount&lt;/item:setting-name&gt;                     &lt;item:setting-value&gt;10&lt;/item:setting-value&gt;                 &lt;/item:effect-setting&gt;                 &lt;item:effect-setting&gt;                     &lt;item:setting-name&gt;xyz&lt;/item:setting-name&gt;                     &lt;item:setting-value&gt;10&lt;/item:setting-value&gt;                 &lt;/item:effect-setting&gt;             &lt;/item:settings-list&gt;         &lt;/item:effect&gt;     &lt;/item:use-effect-list&gt;     &lt;item:weight&gt;5&lt;/item:weight&gt;     &lt;item:combat-modifiers&gt;         &lt;item:modifier&gt;             &lt;item:attribute&gt;ATTACK&lt;/item:attribute&gt;             &lt;item:amount&gt;1&lt;/item:amount&gt;         &lt;/item:modifier&gt;         &lt;item:modifier&gt;             &lt;item:attribute&gt;DEFENSE&lt;/item:attribute&gt;             &lt;item:amount&gt;1&lt;/item:amount&gt;         &lt;/item:modifier&gt;         &lt;item:modifier&gt;             &lt;item:attribute&gt;LIFE&lt;/item:attribute&gt;             &lt;item:amount&gt;3&lt;/item:amount&gt;         &lt;/item:modifier&gt;     &lt;/item:combat-modifiers&gt;     &lt;item:general-modifiers&gt;         &lt;item:modifier&gt;             &lt;item:attribute&gt;STRENGTH&lt;/item:attribute&gt;             &lt;item:amount&gt;1&lt;/item:amount&gt;         &lt;/item:modifier&gt;     &lt;/item:general-modifiers&gt;     &lt;item:skill-modifiers&gt;         &lt;item:modifier&gt;             &lt;item:attribute&gt;TWO_HANDED_CRUSHING_WEAPONS&lt;/item:attribute&gt;             &lt;item:amount&gt;2&lt;/item:amount&gt;         &lt;/item:modifier&gt;     &lt;/item:skill-modifiers&gt;     &lt;item:basic-modifiers&gt;         &lt;item:modifier&gt;             &lt;item:attribute&gt;MOVEMENT&lt;/item:attribute&gt;             &lt;item:amount&gt;1&lt;/item:amount&gt;         &lt;/item:modifier&gt;     &lt;/item:basic-modifiers&gt;     &lt;item:general-requirements&gt;         &lt;item:requirement&gt;             &lt;item:attribute&gt;DEXTERITY&lt;/item:attribute&gt;             &lt;item:amount&gt;100&lt;/item:amount&gt;         &lt;/item:requirement&gt;     &lt;/item:general-requirements&gt; &lt;/item:item&gt; </code></pre>  <p>The nodes in path:</p>  <p>RawItemDefinition.java (root node):     package com.morethanheroic.swords.item.service.domain;</p>  <pre><code>import com.morethanheroic.swords.effect.domain.Effect; import com.morethanheroic.swords.item.domain.ItemType;  import javax.xml.bind.annotation.*; import java.util.ArrayList; import java.util.Collections; import java.util.List;  @XmlRootElement(name = "item") @XmlAccessorType(XmlAccessType.FIELD) public class RawItemDefinition {      private int id;     private String name;     private ItemType type;     private boolean usable;     private int weight;      @XmlElementWrapper(name = "use-effect-list")     @XmlElement(name = "effect")     private ArrayList&lt;Effect&gt; effectList;      @XmlElementWrapper(name = "basic-modifiers")     @XmlElement(name = "modifier")     private ArrayList&lt;BasicAttributeModifierDefinition&gt; basicModifiers;      @XmlElementWrapper(name = "combat-modifiers")     @XmlElement(name = "modifier")     private ArrayList&lt;CombatAttributeModifierDefinition&gt; combatModifiers;      @XmlElementWrapper(name = "general-modifiers")     @XmlElement(name = "modifier")     private ArrayList&lt;GeneralAttributeModifierDefinition&gt; generalModifiers;      @XmlElementWrapper(name = "skill-modifiers")     @XmlElement(name = "modifier")     private ArrayList&lt;SkillAttributeModifierDefinition&gt; skillModifiers;      @XmlElementWrapper(name = "basic-requirements")     @XmlElement(name = "requirement")     private ArrayList&lt;BasicAttributeRequirementDefinition&gt; basicRequirements;      @XmlElementWrapper(name = "combat-requirements")     @XmlElement(name = "requirement")     private ArrayList&lt;CombatAttributeRequirementDefinition&gt; combatRequirements;      @XmlElementWrapper(name = "general-requirements")     @XmlElement(name = "requirement")     private ArrayList&lt;GeneralAttributeRequirementDefinition&gt; generalRequirements;      @XmlElementWrapper(name = "skill-requirements")     @XmlElement(name = "requirement")     private ArrayList&lt;SkillAttributeRequirementDefinition&gt; skillRequirements;      public int getId() {         return id;     }      public String getName() {         return name;     }      public ItemType getType() {         return type;     }      public int getWeight() {         return weight;     }      public boolean isUsable() {         return usable;     }      public String toString() {         return "RawItemDefinition -&gt; [id: " + id + " name: " + name + "]";     }      public List&lt;BasicAttributeModifierDefinition&gt; getBasicModifiers() {         return basicModifiers;     }      public List&lt;CombatAttributeModifierDefinition&gt; getCombatModifiers() {         return combatModifiers;     }      public List&lt;GeneralAttributeModifierDefinition&gt; getGeneralModifiers() {         return generalModifiers;     }      public List&lt;SkillAttributeModifierDefinition&gt; getSkillModifiers() {         return skillModifiers;     }      public List&lt;SkillAttributeRequirementDefinition&gt; getSkillRequirements() {         return skillRequirements;     }      public List&lt;BasicAttributeRequirementDefinition&gt; getBasicRequirements() {         return basicRequirements;     }      public List&lt;CombatAttributeRequirementDefinition&gt; getCombatRequirements() {         return combatRequirements;     }      public List&lt;GeneralAttributeRequirementDefinition&gt; getGeneralRequirements() {         return generalRequirements;     }      public List&lt;AttributeRequirementDefinition&gt; getAllRequirements() {         List&lt;AttributeRequirementDefinition&gt; list = new ArrayList&lt;&gt;();          if (basicRequirements != null) {             list.addAll(basicRequirements);         }         if (combatRequirements != null) {             list.addAll(combatRequirements);         }         if (generalRequirements != null) {             list.addAll(generalRequirements);         }         if (skillRequirements != null) {             list.addAll(skillRequirements);         }          return Collections.unmodifiableList(list);     }      public ArrayList&lt;Effect&gt; getEffectList() {         return effectList;     } } </code></pre>  <p>Effect.java:     package com.morethanheroic.swords.effect.domain;</p>  <pre><code>import javax.xml.bind.annotation.*; import java.util.ArrayList;  @XmlAccessorType(XmlAccessType.FIELD) public class Effect {      @XmlAttribute     private String target;      @XmlElementWrapper(name = "settings-list")     @XmlElement(name = "effect-setting")     private ArrayList&lt;EffectSetting&gt; effectSettings;      public String getTarget() {         return target;     }      public ArrayList&lt;EffectSetting&gt; getEffectSettings() {         return effectSettings;     } } </code></pre>  <p>EffectSetting.java:</p>  <pre><code>package com.morethanheroic.swords.effect.domain;  import javax.xml.bind.annotation.XmlAccessType; import javax.xml.bind.annotation.XmlAccessorType; import javax.xml.bind.annotation.XmlElement;  @XmlAccessorType(XmlAccessType.FIELD) public class EffectSetting {      @XmlElement(name = "setting-name")     private String name;      @XmlElement(name = "setting-value")     private String value;      public String getName() {         return name;     }      public String getValue() {         return value;     } } </code></pre>  <p>The unmarshaller I use is this:</p>  <pre><code>package com.morethanheroic.swords.definition.service;  import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.ApplicationContext; import org.springframework.stereotype.Service; import org.xml.sax.SAXException;  import javax.xml.XMLConstants; import javax.xml.bind.JAXBContext; import javax.xml.bind.JAXBException; import javax.xml.bind.Unmarshaller; import javax.xml.validation.Schema; import javax.xml.validation.SchemaFactory; import java.io.File; import java.io.IOException; import java.util.ArrayList; import java.util.List;  @Service public class XMLDefinitionLoader {      private static final SchemaFactory schemaFactory =  SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);      @Autowired     private ApplicationContext applicationContext;      public List loadDefinitions(Class clazz, String resourcePath, String schemaPath) throws JAXBException, IOException, SAXException {         return unmarshallTargetFiles(buildUnmarshaller(clazz, schemaPath), getTargetFiles(resourcePath));     }      private ArrayList unmarshallTargetFiles(Unmarshaller unmarshaller, File[] files) throws JAXBException {         ArrayList list = new ArrayList&lt;&gt;();          for (File file : files) {             list.add(unmarshaller.unmarshal(file));         }          return list;     }      private File[] getTargetFiles(String resourcePath) throws IOException {         return applicationContext.getResource(resourcePath).getFile().listFiles();     }      private Unmarshaller buildUnmarshaller(Class clazz, String schemaPath) throws IOException, SAXException, JAXBException {         Unmarshaller unmarshaller = JAXBContext.newInstance(clazz).createUnmarshaller();         unmarshaller.setSchema(buildSchema(schemaPath));          return unmarshaller;     }      private Schema buildSchema(String schemaPath) throws IOException, SAXException {         return schemaFactory.newSchema(applicationContext.getResource(schemaPath).getFile());     } } </code></pre>  <p>And this is how I try to access the effects:</p>  <pre><code>@PostConstruct public void init() throws Exception {     List&lt;RawItemDefinition&gt; rawItemDefinitionList = xmlDefinitionLoader.loadDefinitions(RawItemDefinition.class, "classpath:data/item/definition/", "classpath:data/item/schema.xsd");      for (RawItemDefinition rawItemDefinition : rawItemDefinitionList) {         if(rawItemDefinition.getEffectList() != null) {             System.out.println("EFFECT: "+rawItemDefinition.getEffectList().get(0).getTarget());             System.out.println("EFFECT: "+rawItemDefinition.getEffectList().get(0).getEffectSettings().size());         }          itemDefinitionMap.put(rawItemDefinition.getId(), new ItemDefinition(rawItemDefinition));     } } </code></pre>