<p>I'm trying to marshal and unmarshal Map to/from value pairs. I can marshal the object successfully, however, I cannot unmarshal it from the xml. The unmarshal result is the key exist in the Map, however, its value is null.</p>  <p>Here's the model I want to marshal and unmarshal:</p>  <pre><code>import java.util.Map; import javax.xml.bind.annotation.XmlAccessType; import javax.xml.bind.annotation.XmlAccessorType; import javax.xml.bind.annotation.XmlElement; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;  @XmlRootElement(name="TestModel") @XmlAccessorType(XmlAccessType.FIELD) public class TestModel {      @XmlElement(name="Name")     private String name;      @XmlJavaTypeAdapter(MapAdapter.class)     private Map&lt;String, String&gt; metadata;      public String getName() {         return name;     }      public void setName(String name) {         this.name = name;     }      public Map&lt;String, String&gt; getMetadata() {         return metadata;     }      public void setMetadata(Map&lt;String, String&gt; metadata) {         this.metadata = metadata;     } } </code></pre>  <p>I create a Map Adapter for marshal and unmarshal like below:</p>  <pre><code>import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map; import java.util.Map.Entry; import javax.xml.bind.JAXBElement; import javax.xml.bind.annotation.XmlAnyElement; import javax.xml.bind.annotation.adapters.XmlAdapter; import javax.xml.namespace.QName; import org.w3c.dom.Element;  public class MapAdapter extends XmlAdapter&lt;MapWrapper, Map&lt;String, String&gt;&gt; {  @Override public MapWrapper marshal(Map&lt;String, String&gt; m) throws Exception {     MapWrapper wrapper = new MapWrapper();     List&lt;JAXBElement&lt;String&gt;&gt; elements = new ArrayList&lt;JAXBElement&lt;String&gt;&gt;();     if (m != null &amp;&amp; !m.isEmpty()) {         for (Entry&lt;String, String&gt; property : m.entrySet()) {             elements.add(new JAXBElement&lt;String&gt;(new QName(property.getKey()),                      String.class, property.getValue().toString()));         }     }     wrapper.elements = elements;     return wrapper; }  @Override public Map&lt;String, String&gt; unmarshal(MapWrapper v) throws Exception {     Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();     if (v != null &amp;&amp; v.elements != null &amp;&amp; !v.elements.isEmpty()) {         for (Object object : v.elements) {             Element element = (Element) object;             map.put(element.getNodeName(), element.getNodeValue());         }     }     return map; }  }  class MapWrapper {      @XmlAnyElement(lax=true)     protected List&lt;JAXBElement&lt;String&gt;&gt; elements; } </code></pre>  <p>And the below class can test the marshal and unmarshal of the above model:</p>  <pre><code>import java.io.ByteArrayInputStream; import java.io.InputStream; import java.io.OutputStream; import java.text.SimpleDateFormat; import java.util.Date; import java.util.HashMap; import java.util.Map; import javax.xml.bind.JAXBContext; import javax.xml.bind.JAXBException; import javax.xml.bind.Marshaller; import javax.xml.bind.Unmarshaller;  public class TestEntry {  public static void main(String[] args) throws JAXBException {     testMarshal();     testUnmarshal(); }  public static void testMarshal() throws JAXBException {      Map&lt;String, String&gt; metadata = new HashMap&lt;String, String&gt;();     metadata.put("category", "test");     metadata.put("creation", new SimpleDateFormat("yyyy-MM-dd").format(new Date()));     TestModel model = new TestModel();     model.setMetadata(metadata);     model.setName("TESTMODEL");      marshal(model, System.out); }  public static void testUnmarshal() throws JAXBException {      String model = "&lt;?xml version='1.0' encoding='UTF-8' standalone='yes'?&gt;"             + "&lt;TestModel&gt;"             +   "&lt;Name&gt;TESTMODEL&lt;/Name&gt;"             +   "&lt;metadata&gt;"             +       "&lt;category&gt;test&lt;/category&gt;"             +       "&lt;creation&gt;2015-09-29&lt;/creation&gt;"             +   "&lt;/metadata&gt;"             + "&lt;/TestModel&gt;";      TestModel result = unmarshal(new ByteArrayInputStream(model.getBytes()), TestModel.class);     System.out.println("name=" + result.getName());     for (String key : result.getMetadata().keySet()) {         System.out.println(key + ", " + result.getMetadata().get(key));     } }  public static &lt;T&gt; void marshal(T cls, OutputStream os) throws JAXBException {     JAXBContext context = JAXBContext.newInstance(cls.getClass());     Marshaller marshaller = context.createMarshaller();     marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);     marshaller.marshal(cls, os); }  @SuppressWarnings("unchecked") public static &lt;T&gt; T unmarshal(InputStream is, Class&lt;T&gt; cls)         throws JAXBException {     JAXBContext context = JAXBContext.newInstance(cls);     Unmarshaller unmarshaller = context.createUnmarshaller();     return (T) unmarshaller.unmarshal(is); } } </code></pre>  <p>It seems that, the map only contains the key with 'null' value when invoke 'public Map unmarshal(MapWrapper v) throws Exception'.</p>  <p>And I also find a similar question about this issue "<a href="http://stackoverflow.com/questions/3941479/jaxb-how-to-marshall-map-into-keyvalue-key">JAXB: how to marshall map into &lt;key&gt;value&lt;/key&gt;</a>", however, it didn't solve the unmarshal issue?</p>