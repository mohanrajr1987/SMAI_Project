<p>This is related to <a href="http://stackoverflow.com/q/32773969/827480">my prior question</a> which was more directed towards JAXB in general.  But this question is more related specifically to the unmarshaller in <code>spring-oxm</code>.  I'm looking to see if I can use the spring-oxm unmarshaller to unmarshal only specific elements from my XML.</p>  <p>My XSD is:</p>  <pre><code>&lt;xs:schema version="1.3"   targetNamespace="https://www.domain.com/schema/reports/export/1.0"   xmlns:tns="https://www.domain.com/schema/reports/export/1.0"   xmlns:xs="http://www.w3.org/2001/XMLSchema"   elementFormDefault="qualified"&gt;  &lt;xs:element name="detailedreport"&gt;   &lt;xs:complexType&gt;     &lt;xs:sequence&gt;       &lt;xs:element name="severity" minOccurs="6" maxOccurs="6" type="tns:SeverityType" /&gt;     &lt;/xs:sequence&gt;     &lt;/xs:complexType&gt; &lt;/xs:element&gt;  &lt;xs:complexType name="SeverityType"&gt;   &lt;xs:sequence&gt;     &lt;xs:element name="category" minOccurs="0" maxOccurs="unbounded" type="tns:CategoryType"/&gt;   &lt;/xs:sequence&gt; &lt;/xs:complexType&gt;  &lt;xs:complexType name="CategoryType"&gt;   &lt;xs:sequence&gt;     &lt;xs:element name="cwe" maxOccurs="unbounded" type="tns:CweType"/&gt;   &lt;/xs:sequence&gt; &lt;/xs:complexType&gt;  &lt;xs:complexType name="CweType"&gt;   &lt;xs:sequence&gt;     &lt;xs:element name="staticflaws" type="tns:FlawListType" minOccurs="0"/&gt;   &lt;/xs:sequence&gt; &lt;/xs:complexType&gt;  &lt;xs:complexType name="FlawListType"&gt;   &lt;xs:sequence&gt;     &lt;xs:element name="flaw" minOccurs="0" maxOccurs="unbounded" type="tns:FlawType" /&gt;   &lt;/xs:sequence&gt; &lt;/xs:complexType&gt; &lt;/xs:schema&gt; </code></pre>  <p>Using some preprocessing, I can find all Nodes of type "cwe":</p>  <pre><code>    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();     DocumentBuilder db = dbf.newDocumentBuilder();      Document doc = db.parse(IOUtils.toInputStream(xml));     NodeList nodeList = doc.getElementsByTagName("cwe"); </code></pre>  <p>Using a JAXBUnmarshaller, I can manage to unmarshal my object:</p>  <pre><code>    JAXBContext jc = JAXBContext.newInstance( CweType.class );     Unmarshaller u = jc.createUnmarshaller();     u.unmarshal(new DOMSource(nodeList.item(0)),  CweType.class); </code></pre>  <p>However, if I try to use the concept of spring-oxm unmarshaller, I get an error.</p>  <pre><code>    Jaxb2Marshaller jaxb2Marshaller = new Jaxb2Marshaller();     jaxb2Marshaller.setClassesToBeBound(CweType.class);     jaxb2Marshaller.unmarshal(new DOMSource(nodeList.item(0)));    org.springframework.oxm.UnmarshallingFailureException: JAXB unmarshalling exception; nested exception is javax.xml.bind.UnmarshalException: unexpected element (uri:"", local:"cwe"). Expected elements are (none)     at org.springframework.oxm.jaxb.Jaxb2Marshaller.convertJaxbException(Jaxb2Marshaller.java:911)     at org.springframework.oxm.jaxb.Jaxb2Marshaller.unmarshal(Jaxb2Marshaller.java:784)     at org.springframework.oxm.jaxb.Jaxb2Marshaller.unmarshal(Jaxb2Marshaller.java:753) </code></pre>  <p>@M.Deinum suggested in the comments to try XPath, but I have not feared any better - throwing the same error at unmarshal time:</p>  <pre><code>   XPath xPath = XPathFactory.newInstance().newXPath();     NodeList xpnl = (NodeList)xPath.compile("//cwe").evaluate(doc, XPathConstants.NODESET);     jaxb2Marshaller.unmarshal(new DOMSource(xpnl.item(0))); </code></pre>  <p>What am I doing wrong?  Is there something wrong with the way I am creating my DOMSource()? Why am I able to unmarshal using the JAXBUnmarshaller directly, but not using the Spring wrapper?  Is there anyway to explicitly declare via the spring-oxm unmarshaller the declaredType?</p>  <p>CweType.java:</p>  <pre><code>@XmlAccessorType(XmlAccessType.FIELD) @XmlType(name = "CweType", propOrder = {     "description",     "staticflaws",     "dynamicflaws",     "manualflaws" }) public class CweType {      @XmlElement(required = true)     protected CweType.Description description;     protected FlawListType staticflaws;     protected FlawListType dynamicflaws;     protected FlawListType manualflaws;     @XmlAttribute(name = "cweid", required = true)     @XmlSchemaType(name = "positiveInteger")     protected BigInteger cweid;     ...     .... </code></pre>