<p>I'm using JAXB and SAX for reading in XML files:</p>  <pre><code>void setup(String myCatalogPath, File mySchema) {     CatalogManager catalogManager = new CatalogManager();     catalogManager.setCatalogFiles(myCatalogPath);      SAXParserFactory factory = SAXParserFactory.newInstance();     SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);     factory.setSchema(schemaFactory.newSchema(mySchema);      JAXBContext jc = JAXBContext.newInstance("com.package.my");     CatalogResolver catResolver = new CatalogResolver(catalogManager);      //Assign these variables to members in the class     //... }  //...  public Object getResult(InputSource inputSource) {     SAXParser parser = factory.newSAXParser();     XMLReader xmlReader = parser.getXMLReader();     xmlReader.setEntityResolver(catResolver);     SAXSource saxSource = new SAXSource(xmlReader, inputSource);     Unmarshaller u = jc.createUnmarshaller();     return u.unmarshal(saxSource); } </code></pre>  <p>All of this works.</p>  <p>The problem: we have a big entity list in the catalog.  As it gets bigger, it exponentially slows the program down.  We need to make entity lookups faster.  Since, in my case, all XML files are using the same catalog, caching the entities in memory would be ideal.</p>  <p>I've looked into implementing my own entity resolver:</p>  <pre><code>xmlReader.setEntityResolver(new EntityResolver() {     public InputSource resolveEntity(String pid, String sid) {         InputSource ret = catResolver.resolveEntity(pid, sid);         BufferedReader buf = new BufferedReader(new InputStreamReader(ret.getByteStream()));         //...     } }); </code></pre>  <p>In this method, I can parse out the entities myself and store them in a map in memory, but the actual entity lookup is still the same for the xmlReader.  How do you override the way saxSource or xmlReader looks up the entities so it will go to the one's I have stored in memory?</p>  <p>EDIT: Just to be clear, SAX isn't a requirement for this project, but JAXB is.  So stripping SAX out in favor of something else will be just as good as long as it's faster.</p>