<p>I'm wondering under what circumstances compilers like GCC and LLVM are able to optimize multiple calls in the same function to some of the trivial member functions like <code>size()</code> and <code>length()</code> of STL containers to just one call?</p>  <p>For example, if I compare values to the size of a container twice in the same function, but never actually change the container can it combine these into one function call and if so when?</p>  <p>The compiler should be able to do an optimization unless it might think that another thread could be mucking with the container simultaneously. On the other hand the typical <code>it != x.end()</code> guard in a loop seems to be optimized to just one call to <code>x.end()</code> and I presume this happens, because if some other thread would be adding/deleting stuff from <code>x</code>, then it would invalidate the iterator <code>it</code>, so we're free to do the optimization, since we would have undefined behavior anyway.</p>