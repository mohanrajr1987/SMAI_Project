<p>I'm working on this program that emulates restriction enzymes and DNA splicing. I'm using DnaSequenceNode[s] as linked list nodes. </p>  <p>I have a problem with one of the function in my code, cutSplice() is supposed to create a new DnaStrand that is a clone of the current DnaStrand, but with every instance of enzyme replaced by splicee. </p>  <p>For example, if the LinkedDnaStrand is instantiated with "TTGATCC", and cutSplice("GAT", "TTAAGG") is called, then the linked list should become something like (previous pointers not shown):</p>  <p>first -> "TT" -> "TTAAGG" -> "CC" -> null</p>  <p>My function works. However, my method cutSplice() takes more than 80 seconds to splice 200 DNAs. I'm supposed to bring that 80 seconds to 2 seconds.</p>  <p>This is all my code for the class : <a href="http://pastebin.com/niPSTUa2" rel="nofollow">LinkedDnaStrand.java</a></p>  <p>And here's the code for the method cutSplice()</p>  <pre><code>public DnaStrand cutSplice(String enzyme, String splicee) {     DnaStrand newStrand = null;     String original_Dna = this.toString();     String new_Dna = original_Dna.replaceAll(enzyme, splicee);     String[] splicee_split = new_Dna.split(splicee); // splits the new DNA string DnaStrand     newStrand = null;     int i = 0;     if (original_Dna.startsWith(enzyme)) {         newStrand = new LinkedDnaStrand(splicee);     } else {         newStrand = new LinkedDnaStrand(splicee_split[0]);         newStrand.append(splicee);     }     for (i = 1; i &lt; splicee_split.length - 1; i++) {          String node = splicee_split[i];         newStrand.append(node);         newStrand.append(splicee);      }     newStrand.append(splicee_split[splicee_split.length - 1]);      if (original_Dna.endsWith(enzyme)) {         newStrand.append(splicee);     }       return newStrand; } </code></pre>  <p>Does anybody see anything that could make a critical difference on the time this function takes to process 200 DNAs sample?</p>