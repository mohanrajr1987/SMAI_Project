<p>I currently have a disagreement going on with my 2nd year JAVA professor that I'm hoping y'all could help solve:</p>  <p>The code we started with was this:</p>  <pre><code>   public T peek()    {        if (isEmpty())        .........    }    public boolean isEmpty()     {        return topIndex&lt;0;    } </code></pre>  <p>And she wants us to remove the <code>isEmpty()</code> reference and place its code directly into the <code>if</code> statement (i.e. change the peek method contents to: <code>if(topIndex&lt;0).......</code>) to "Make the code more efficient". I have argued that a) the runtime/compile time optimizer would most likely have inlined  the <code>isEmpty() call, b)</code> even if it didn't, the 5-10 machine operations would be negligible in nearly every situation, and c) its just bad style because it makes the program less readable and less changeable.</p>  <p>So, I guess my question is: Is there any runtime efficiency gained by inlineing logic as opposed to just calling a method? I have tried simple profiling techniques (aka long loop and a stopwatch) but tests have been inconclusive.    </p>