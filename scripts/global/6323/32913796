<p><strong>I don't see how my input doesn't stop at the specified value,</strong> <strong>this code should find the points of the convex hull, and output the points</strong></p>  <pre><code>import java.util.ArrayList;&lt;br&gt; import java.util.Scanner;&lt;br&gt; import javafx.geometry.Point2D;  public class Exercise22_09 {      public static void main(String[] args) {         Scanner input = new Scanner(System.in);         System.out.println("Enter the number of points: ");         final int n = input.nextInt();         System.out.println("Enter a list of points separated by white space: ");         double[][] points = new double[n][2];         for (int i = 0; i &lt; n; i++) {             points[i][0] = input.nextDouble();             points[i][1] = input.nextDouble();          }          // If this statement is commented out, the input stops when it should.           System.out.println("The points in the convex hull are: " + getConvexHull(points));      }      public static ArrayList&lt;Point2D&gt; getConvexHull(double[][] x) {          ArrayList&lt;Point2D&gt; list = new ArrayList&lt;&gt;();          Point2D[] checkList = new Point2D[x.length];         for (int i = 0; i &lt; x.length; i++) {             checkList[i] = new Point2D(x[i][0], x[i][1]);         }         Point2D h0 = findRightMostPoint(checkList);         list.add(h0);          Point2D startingPoint = h0;         Point2D currentPoint = checkList[0];          while (true) {             for (int i = 1; i &lt; checkList.length - 1; i++) {                 double number = leftOrRight(startingPoint, currentPoint, checkList[i]);                  if (number &gt; 0) { //right side of the line                      currentPoint = checkList[i];                  } else if (number == 0) {                     if (startingPoint.distance(checkList[i]) &gt; startingPoint.distance(currentPoint)) {                         currentPoint = checkList[i];                     }                  }              }              if (currentPoint.equals(h0)) {                 break;             }             list.add(currentPoint);             startingPoint = currentPoint;          }         return list;     }      public static Point2D findRightMostPoint(Point2D[] x) {         double rightMostX = x[0].getX();         double rightMostY = x[0].getY();         int rightMostIndex = 0;         Point2D rightMost = x[0];         for (int i = 1; i &lt; x.length; i++) {             if (x[i].getY() &gt; rightMost.getY()) {                 rightMostX = x[i].getX();                 rightMostY = x[i].getY();                 rightMostIndex = i;             }                 else if (rightMostY == x[i].getY() &amp;&amp; rightMostX &lt; x[i].getX()) {             rightMostX = x[i].getX();             rightMostIndex = i;           }            }          return x[rightMostIndex];     }      public static double leftOrRight(Point2D a, Point2D b, Point2D c) {         return ((b.getX() - a.getX()) * (c.getY() - a.getY())) - ((b.getY() - a.getY()) * (c.getX() - a.getX()));      }  } </code></pre>