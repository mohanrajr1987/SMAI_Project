<p>I'm trying to run my custom cloud code function from my Android app. I feel like it's something weird and I think that's not sufficiently documented in the guides of the platform.</p>  <p>Please help me, I am loosing way too much time over this!</p>  <p>The custom cloud code function returns an array of objects that looks like this:</p>  <pre><code>[      {         "status":false,       "usr":{            "URL":"a string",          "__type":"Object",          "blacklisted":false,          "className":"_User",          "createdAt":"2015-09-28T08:22:09.266Z",          "description":"a string",          "email":"a string",          "emailVerified":true,          "facebookId":"a string",          "first_name":"a string",          "gender":"male",          "last_name":"a string",          "name":"Filippo",          "objectId":"a string",          "updatedAt":"2015-09-28T12:58:31.455Z",          "username":"a string"       }    }    // Some other objects... ] </code></pre>  <p>Now I'm trying to call the cloud code function from Android client with this:</p>  <pre><code>final HashMap&lt;String, ParseObject&gt; params = new HashMap&lt;String, ParseObject&gt;();     ParseCloud.callFunctionInBackground("getConversations", params, new FunctionCallback&lt;ArrayList&lt;JSONObject&gt;&gt;() {         @Override         public void done(final ArrayList&lt;JSONObject&gt; results, ParseException e) {             myAdapter = new InboxAdapter(getActivity(), results);             listview.setAdapter(myAdapter);         }  } </code></pre>  <p>I get some strange behavior though, since using <code>ArrayList&lt;JSONObject&gt;</code> as generic for the callback won't allow me to populate an adapter, which keeps returning <code>java.lang.ClassCastException: java.util.HashMap cannot be cast to org.json.JSONObject</code> in the <code>getItem()</code> method</p>  <pre><code>private ArrayList&lt;JSONObject&gt; list; private Context ctx;  public InboxAdapter(Context c, ArrayList&lt;JSONObject&gt; s) {     ctx = c;     list = s; } /* All other methods */ @Override public JSONObject getItem(int position) {     return list.get(position); // Gives exception! } </code></pre>  <p>I find it really strange since it's an ArrayList of <code>JSONObject</code>s and shouldn't care about maps and so on. Also trying to use <code>new FunctionCallback&lt;JSONArray&gt;() {}</code> bounces me back, because it requires an arraylist! (and to be honest I didn't figure out why).</p>  <p>So what should I do in order to handle such a response from the Android side? Is there something I have to do in order to correctly parse the results?</p>  <p>Thanks in advance.</p>