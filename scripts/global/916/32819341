<p>I have to transform an XML-file via XSLT, that contains characters of different font-types, such as Symbol, Wingdings, Webdings, etc.</p>  <p>The input looks like this:</p>  <pre><code>&lt;p&gt;&lt;schar font="Webdings" nr="0081"&gt;&amp;#129;&lt;/schar&gt;&lt;/p&gt; </code></pre>  <p>To handle it, I wrote a function as follows:</p>  <pre><code>&lt;xsl:function name="resolveWebdingsFont" as="xs:string"&gt;     &lt;xsl:param name="hexcode" as="xs:string"/&gt;     &lt;xsl:param name="fallback" as="xs:string"/&gt;     &lt;xsl:variable name="hexkey" select="upper-case(replace($hexcode, '^0*(.+)', '$1'))" as="xs:string"/&gt;     &lt;xsl:variable name="newchar" select="$webdings-character-map[@hex = $hexkey]/@to" as="xs:string?"/&gt;     &lt;xsl:value-of select="if ($newchar) then $newchar else $fallback"/&gt; &lt;/xsl:function&gt; </code></pre>  <p>I put the character-map in a variable:</p>  <pre><code>&lt;xsl:variable name="webdings-character-map" as="element(char)+"&gt;     ....     &lt;char hex="81" to="&amp;#x1F6BA;"/&gt;     &lt;!-- Womens symbol --&gt;     ... &lt;/xsl:variable&gt; </code></pre>  <p>I call the function like this:</p>  <pre><code>&lt;xsl:template match="schar"&gt;     &lt;span data-type="schar"&gt;         &lt;xsl:choose&gt;             &lt;xsl:when test="@font = 'Symbol'"&gt;                 &lt;xsl:value-of select="dy:resolveSymbolFont(@nr, .)"/&gt;             &lt;/xsl:when&gt;             &lt;xsl:when test="@font = 'Webdings'"&gt;                 &lt;xsl:value-of select="dy:resolveWebdingsFont(@nr, .)"/&gt;             &lt;/xsl:when&gt;             ...          &lt;/xsl:choose&gt;     &lt;/span&gt; &lt;/xsl:template&gt; </code></pre>  <p>The desired output is a <code>&lt;span&gt;</code> with the unicode representation as its value and this is working well for font-types like Symbol etc.</p>  <p>To map also all the Webdings characters correctly, I would need a complete list of all Webdings characters and their unicode representation.</p>  <p>With unicode version 7.0 (Jun, 2014) they have been integrated. But the specification says: </p>  <blockquote>   <p>The well-known “Zapf Dingbats” set is encoded comprehensively in the   Dingbats block, U+2700 ..U+27BF. Other sets of dingbats, such as the   Wingdings and Webdings sets, are encoded in various symbol blocks, but   the majority are found in the Miscellaneous Symbols and Pictographs   block, U+1F300..U+1F5FF."</p> </blockquote>  <p>As far as I understood one would have to look through every block to get a complete list of all characters and their equivalent; but this is what I'd like to avoid. And even if I would find a symbol that looks similar to a certain Webdings symbol, I can't be sure it's the one that's intended officially to represent it. Others don't even look similar but are intended to represent them.</p>  <p>I couldn't find any official document for that. Does there exist an official mapping from Webdings to unicode?</p>  <p>Or is there even a totally different/better approach to convert special characters to unicode in XSLT?</p>