<p>I have a Spring + Jersey web application that I'm migrating from a web.xml to annotation base configuration. I'm implementing WebApplicationInitializer and everything works except log4j, because I have a custom file name.</p>  <p>In the web.xml I had </p>  <pre><code>&lt;context-param&gt;     &lt;param-name&gt;log4jConfiguration&lt;/param-name&gt;     &lt;param-value&gt;/WEB-INF/custom-name-log4j.xml&lt;/param-value&gt; &lt;/context-param&gt; </code></pre>  <p>This worked.</p>  <p>Now, I tried to do the same in Java:</p>  <pre><code>container.setInitParameter("log4jConfiguration", "/WEB-INF/custom-name-log4j.xml"); </code></pre>  <p>This doesn't work... I get the following errors in Tomcat 7.0.62:</p>  <pre><code>ERROR StatusLogger No Log4j context configuration provided. This is very unusual. ERROR StatusLogger No log4j2 configuration file found. Using default configuration: logging only errors to the console. </code></pre>  <p>My WAR file contains the xml in the WEB-INF/ folder.</p>  <p>Do I have to do more than specifying that log4jConfiguration parameter?</p>  <p>Later Edit: WebApplicationInitializer </p>  <pre><code>    @Override     public void onStartup(ServletContext container) {         AnnotationConfigWebApplicationContext rootContext =                 new AnnotationConfigWebApplicationContext();         rootContext.register(MyApplicationConfiguration.class);          container.setInitParameter("log4jConfiguration", "/WEB-INF/custom-name-log4j.xml");          rootContext.setConfigLocation("my.package.spring");          final FilterRegistration.Dynamic characterEncodingFilter = container.addFilter("characterEncodingFilter", new CharacterEncodingFilter());         characterEncodingFilter.addMappingForUrlPatterns(EnumSet.allOf(DispatcherType.class), true, "/*");         characterEncodingFilter.setInitParameter("encoding", "UTF-8");         characterEncodingFilter.setInitParameter("forceEncoding", "true");          container.setInitParameter("spring.profiles.default", "prod");          rootContext.register(SecurityContextFilter.class);          container.addListener(new ContextLoaderListener(rootContext));         container.addListener(new RequestContextListener());          container.setInitParameter("contextConfigLocation", "");          final ServletContainer servlet = new ServletContainer();         final ServletRegistration.Dynamic appServlet = container.addServlet("appServlet", servlet);         appServlet.setInitParameter("jersey.config.server.provider.packages", "my.package");         appServlet.setLoadOnStartup(1);          final Set&lt;String&gt; mappingConflicts = appServlet.addMapping("/rest/*");      } </code></pre>