<p>I am pretty new to the REST world and we are trying our hands at migrating our application to a REST based architecture. We are working on a proof of concept and we need to come up with a working proof that what we are set to achieve can be done using REST. </p>  <p>In our architecture, the front end screens would use Angular and would call REST services to open up a customer session and perform/maintain transactions within that session and when the session is complete, the session details (i.e. all the customer transactions within the customer session) would be sent over for commit to the DB. We only want to write to the DB after customer completes all transactions within a session. In other words, a commit to the DB happens only when the session ends.</p>  <p>I am hoping to get some directions on how best to perform the below steps in our Java classes.</p>  <p>1) Browser initiates a request to open a new customer session. A session POST service is used to generate a new session ID. The session ID is sent back as response to the browser. </p>  <p><strong>Question --></strong> <em>What is the best way to maintain this session ID value in my Java classes?</em></p>  <p>2) Customer transactions are performed within the session. For each transaction processed a transaction POST service is used to save the transaction information along with the session information. </p>  <p><strong>Question --></strong> <em>In my Java classes what is the best way to maintain this transaction information and how best do I associate this transaction information with the session information that was created by the previous session POST information? The client would maintain the session ID but on the service side I need to be able to map the transaction with the session ID so that I can send back a combined session payload that includes session information and the transaction within that session.</em></p>  <p>3) A customer can perform some more transactions and each transaction performed would be a transaction POST request which would have to get associated with the session id created before. Each additional transaction performed would have to be associated to the session id on the service side such that when I do a GET on the session id, I need to get the session details along with all transactions within that session.</p>  <p>4) Finally when the session is complete the information from the session and the session payload on the service side (along with all the transactions) will commit to the DB.</p>  <p>I am just looking for some general guidance on how best to do this using my Java classes and Jersey REST. </p>  <p>Any pointers would be appreciated.</p>  <p>Thanks Ali.</p>