<p>I am using jersey-client-1.2 to access EHCache REST APIs to put/get my own custom objects. </p>  <p>Jersey Maven Dependency:</p>  <pre><code>&lt;dependency&gt;             &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;             &lt;artifactId&gt;jersey-client&lt;/artifactId&gt;             &lt;version&gt;1.2&lt;/version&gt; &lt;/dependency&gt; </code></pre>  <p>Client Code:</p>  <pre><code>MyObject myObject = new MyObject(); myObject.setName("Narendra");  long start = System.currentTimeMillis(); Client client = Client.create();             WebResource webResource = client.resource("http://localhost:9080/ehcache-server/rest/mycache/"); System.out.println("Time spend in creating client - " + (System.currentTimeMillis() - start));  start = System.currentTimeMillis(); ClientResponse putResponse = webResource.type("application/x-java-serialized-object").put(ClientResponse.class, SerializationUtils.serialize(myObject)); System.out.println("Time spend in serializing and putting Object into cache - " + (System.currentTimeMillis() - start));  start = System.currentTimeMillis();    ClientResponse getResponse =  webResource.accept("application/x-java-serialized-object").get(ClientResponse.class); byte[] bytes = getResponse.getEntity(byte[].class); System.out.println("Time spend in getting and deseralizing object from cache " + (System.currentTimeMillis() - start)); </code></pre>  <p>When I perform load test with above code, the application server (where above client is running) gives bad performance. Most of the threads went into waiting stage due to jersey client call.However, the server where cache REST APIs are deployed responding properly. It seems jersey client is not performing well.</p>  <p>Am I following best practices of Jersey client in above code? Am I missing anything which is causing performance issues? Any Idea please. </p>