<p>I have developed a RESTful web service using Jersey 1.14 implementation. I am using Spring 3.0.6.RELEASE to load the webservice. The webservice takes a json input and uses a DAO to update the db using JPA.</p>  <p>While the client class successfully invokes the <code>RLWebService</code>, it is not able to get an instance of the <code>RLServiceDao</code>. Both the WebService and the DAO classes have the the relevant properties and getter/setters.</p>  <p>Below is my <code>applicationContext.xml</code>:</p>  <pre><code>&lt;bean id="applicationContextProvider" class="com.clsa.gcp.cms.server.ws.rlwebservice.AppInitializer"&gt;&lt;/bean&gt;  &lt;bean id="rlServiceDAO" class="com.server.dao.RLServiceDAO"&gt;     &lt;property name="entityManagerFactory" ref="entityManagerFactory" /&gt; &lt;/bean&gt;  &lt;bean id="rlWebService" class="com.server.ws.rlwebservice.RLWebService"&gt;     &lt;property name="rlServiceDAO" ref="rlServiceDAO" /&gt; &lt;/bean&gt;  &lt;bean id="entityManagerFactory"     class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"     p:dataSource-ref="cmsdataSource"&gt;     &lt;property name="jpaVendorAdapter"&gt;         &lt;bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"&gt;             &lt;property name="database" value="${jdbc.database}" /&gt;             &lt;property name="showSql" value="${jdbc.showSql}" /&gt;         &lt;/bean&gt;     &lt;/property&gt;     &lt;property name="jpaProperties"&gt;         &lt;props&gt;             &lt;prop key="hibernate.dialect"&gt;${hibernate.dialect}&lt;/prop&gt;             &lt;prop key="hibernate.connection.show_sql"&gt;${hibernate.show_sql}&lt;/prop&gt;             &lt;!--  prop key="hibernate.hbm2ddl.auto"&gt;${hibernate.hbm2ddl.auto}&lt;/prop--&gt;             &lt;prop key="hibernate.cache.provider_class"&gt;${hibernate.cache.provider_class}&lt;/prop&gt;             &lt;prop key="net.sf.ehcache.configurationResourceName"&gt;${net.sf.ehcache.configurationResourceName}&lt;/prop&gt;             &lt;prop key="hibernate.cache.use_second_level_cache"&gt;${hibernate.cache.use_second_level_cache}&lt;/prop&gt;             &lt;prop key="hibernate.cache.use_structured_entries"&gt;${hibernate.cache.use_structured_entries}&lt;/prop&gt;             &lt;prop key="hibernate.cache.use_query_cache"&gt;${hibernate.cache.use_query_cache}&lt;/prop&gt;             &lt;prop key="hibernate.generate_statistics"&gt;${hibernate.generate_statistics}&lt;/prop&gt;             &lt;prop key="hibernate.default_batch_fetch_size"&gt;${hibernate.default_batch_fetch_size}&lt;/prop&gt;             &lt;prop key="hibernate.max_fetch_depth"&gt;${hibernate.max_fetch_depth}&lt;/prop&gt;             &lt;prop key="hibernate.jdbc.batch_size"&gt;${hibernate.jdbc.batch_size}&lt;/prop&gt;             &lt;prop key="hibernate.use_outer_join"&gt;${hibernate.use_outer_join}&lt;/prop&gt;             &lt;prop key="hibernate.cache.region.factory_class"&gt;${hibernate.cache.region.factory_class}&lt;/prop&gt;         &lt;/props&gt;     &lt;/property&gt; &lt;/bean&gt;` </code></pre>  <p>I have written a simple client class which calls this web service:</p>  <pre><code>HttpURLConnection connection = null; try {     URL url = new URL("http://127.0.0.1:8888/gcpcms/api/rlservice");      connection = (HttpURLConnection)url.openConnection();     connection.setDoOutput(true);     connection.setRequestMethod("POST");     connection.setRequestProperty("Content-Type", "application/json");     connection.setConnectTimeout(600000);     connection.setReadTimeout(600000);     OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream());     out.write(jsonObject.toString());     out.flush();     out.close();      BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));      String output;      while ((output = in.readLine()) != null) {         System.out.println(output);     }     System.out.println("RLService REST Service Invoked Successfully..");     in.close(); } catch (Exception e) {     System.out.println("\nError while calling RLService REST Service");     System.out.println(e); } finally {     connection.disconnect(); } </code></pre>