<p>I'm using Typhoon in a Swift project which requires protocols to be marked with @objc. I am attempting to upgrade my project to Swift 2.</p>  <p>In my iOS application, my service layer throws Errors back to the UI. However, despite my best efforts, I get a compile error: </p>  <blockquote>   <p>Type 'ErrorThrower' does not conform to protocol 'Throwable'</p> </blockquote>  <pre><code>@objc protocol Throwable {     func doSomething(someParam:AnyObject) throws }  @objc class ErrorThrower : NSObject, Throwable {     func doSomething(someParam: AnyObject) throws {         NSLog("An error is about to be thrown")         throw GenericError.Generic     } }  enum GenericError : ErrorType {     case Generic } </code></pre>  <p>I saw this post "<a href="http://stackoverflow.com/questions/31832147/swift-class-does-not-conform-to-objective-c-protocol-with-error-handling/31833163#31833163">Swift class does not conform to Objective-C protocol with error handling</a>"</p>  <p>So, that made me try something like this:</p>  <pre><code>@objc protocol Throwable {     func doSomething(someParam:AnyObject) throws }   class ErrorThrower : NSObject, Throwable {          @objc(doSomethingAndReturnError:someParam:)     func doSomething(someParam: AnyObject) throws {         NSLog("An error is about to be thrown")         throw GenericError.Generic     } } </code></pre>  <p>It doesn't complain about the @objc(...) on the implementation, but it still gives the same non-conforming protocol error.</p>  <p>I also tried this with no luck...</p>  <pre><code>@objc protocol Throwable {     func doSomethingAndReturnError(error:NSErrorPointer, someParam:AnyObject) -&gt; Bool } </code></pre>  <p>What's the proper way in Swift 2 to declare a protocol with @objc and throw an error on methods?</p>