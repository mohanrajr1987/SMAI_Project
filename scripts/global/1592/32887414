<p>I'm currently trying to write a mechanism to import <code>DataTable</code> objects to Excel via Interop. There are a number of existing approaches, that typically involve - sooner or later - iterating the rows (which is slow), or inserting column-by-column with some data cleaning (which is reasonably fast but prone to out of memory errors in my use-case, probably due to allocating large value type arrays which need contiguous memory).</p>  <p>My current solution - which works pretty well - is to output the DataTable to a CSV first in the user's temp folder, import the CSV via a queryTable (which allows pretty good control over the format of data inserted, and has a pretty robust driver for CSV), then delete the CSV. Taking this approach means ~10k rows of >100 columns is retrieved in ~2s from disk by Excel.</p>  <p>Of course, though the slowest part of this is the fact that the CSV needs to be written to/read from disk by my app and Excel respectively. That's fine for my test data, but I suspect real world usage is going to be closer to 200k rows of data, which obviously will take longer.</p>  <p>Does anyone know of an in-memory alternative such that I could supply the QueryTable with a connection string to an in memory table and load from there instead? </p>