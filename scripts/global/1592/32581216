<p>Definition of the model:</p>  <pre><code>type ItemEvent = | ItemCreated of ItemCreated and ItemCreated = { timestamp:DateTime; id:ItemId; name:string; description:string option } interface IEvent </code></pre>  <p>Here is the interface with the method that I want to call:</p>  <pre><code>type IItemWriteAccess =     abstract Update: ItemEvent -&gt; Result&lt;unit, DomainMessage&gt; </code></pre>  <p>Here is the C# code:</p>  <pre><code>public class ItemEventHandlers {     private readonly IItemWriteAccess _repository;      public ItemEventHandlers(IItemWriteAccess repository)     {         _repository = repository;     }      public void Handle(ItemCreated msg)     {         if(msg == null) throw new ArgumentNullException("msg");          _repository.Update(msg); // this doesn't work     } } </code></pre>  <p>This produces the following error message:</p>  <pre><code>Argument 1: cannot convert from 'DomainModels.ItemCreated' to 'DomainModels.ItemEvent' </code></pre>  <p>Upcasting to <code>ItemEvent</code> also doesn't work.</p>  <p>How can I resolve this?</p>