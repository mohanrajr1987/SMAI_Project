<p>I have a problem with Excel Interop objects. I can't seem to pinpoint the problem either. (My code is at the bottom). Basically, sometimes it reads the cells correctly, but sometimes it doesn't. After two passes, it stops reading entirely. I think I have a math issue, but I can't find it. I would get someone else to read my code, but I don't have anyone nearby. I'll be on for awhile to answer questions. Thanks for the help, its a bit frustrating on why it doesn't work.</p>  <pre><code>if(requiredEnd == true &amp;&amp; requiredPass == true &amp;&amp; requiredPath == true &amp;&amp; requiredStart == true &amp;&amp; requiredUser == true &amp;&amp; requiredSheet == true)         {             errorCheck = false;              try             {                   //starting Excel                 Excel.Application excelApp = new Excel.Application();                 excelApp.Visible = false;                 Excel.Workbook workBook = excelApp.Workbooks.Open(filePath);                 Excel.Sheets sheet = workBook.Worksheets;                 Excel.Worksheet workSheet = (Excel.Worksheet)sheet.get_Item(sheetName);                   //Generating User and Password                 int startCoordI = Int32.Parse(startCoord);                 int endCoordI = Int32.Parse(endCoord);                 int value = startCoordI;                 string combinedUser = userCoord + startCoord;                 string combinedPassword = passwordCoord + startCoord;                 string Username = Convert.ToString(workSheet.Cells.Named(combinedUser).Value);                 MessageBox.Show(Username);                 string Password = Convert.ToString(workSheet.Cells.Named(combinedPassword).Value);                 MessageBox.Show(Password);                  try                {                      System.Diagnostics.ProcessStartInfo proccessStartInfo = new System.Diagnostics.ProcessStartInfo("net", "user " + Username + " " + Password + " /add /passwordchg:no");                     System.Diagnostics.Process proc = new System.Diagnostics.Process { StartInfo = proccessStartInfo };                     proc.StartInfo.RedirectStandardOutput = true;                     proc.StartInfo.UseShellExecute = false;                     proccessStartInfo.CreateNoWindow = true;                     for (I = startCoordI; I &lt;= endCoordI; I++)                     {                         proc.Start();                          //new user                         value++;                         combinedUser = userCoord + value;                         combinedPassword = passwordCoord + value;                         Username = Convert.ToString(workSheet.Cells.Named(combinedUser).Value);                         MessageBox.Show(Username);                         Password = Convert.ToString(workSheet.Cells.Named(combinedPassword).Value);                         MessageBox.Show(Password);                     }                      //Clean up Excel                     Marshal.ReleaseComObject(excelApp);                     Marshal.ReleaseComObject(workBook);                     Marshal.ReleaseComObject(sheet);                     Marshal.ReleaseComObject(workSheet);                       //Executing.Show                     proc.WaitForExit();                     //Executing.Close                        if(proc.HasExited == true)                      {                          if(errorCheck == false)                          {                              MessageBox.Show("The Process Has Been Completed!");                          }                          else                          {                              MessageBox.Show("Operation Ended With Errors. Exiting Excel Reader.");                          }                           proc.Close();                          this.Close();                      }                 }                 catch (Exception ex)                 {                     MessageBox.Show(ex.Message);                 }             }            catch(Exception ex)             {                 MessageBox.Show(ex.Message);             }          }         else         {             if(requiredEnd == false || requiredPass == false || requiredStart == false || requiredUser == false || requiredSheet == false)             {                 MessageBox.Show("You Have Missing Required Fields!");             }             else             {                 MessageBox.Show("That Is Not A Valid File!");             } </code></pre>  <p>There is a lot of "un-needed" parts there, but I thought giving the whole thing would be more helpful. (Most of the textboxes are just debug things, BTW)</p>  <p>EDIT: I forgot .Named wasn't part of the normal code. Its a function someone made for me:</p>  <pre><code>    public static class ExcelExtensions {     public static Range Named(this Range Cells, string CellName)     {          char cellLetter = CellName.Substring(0, 1).ToUpper()[0];         int xCoordinate = (cellLetter - 'A') + 1;         int yCoordinate = int.Parse(CellName.Substring(1));         return Cells[xCoordinate, yCoordinate];     } } </code></pre>  <p>It basically allows you to use PowerShell themed coordinates, i.e (A1, B3 etc.)</p>