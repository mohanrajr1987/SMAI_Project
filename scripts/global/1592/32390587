<p>The code:</p>  <pre><code>[Serializable] [StructLayout(LayoutKind.Sequential, Pack = 2)] public struct WAVEHDR {     public IntPtr lpData;     public uint dwBufferLength;     public uint dwBytesRecorded;     public IntPtr dwUser;     public uint dwFlags;     public uint dwLoops;     public IntPtr lpNext; // pointer to next chunck of WAVEHDR data     public uint reserved; };  public static byte[] StructToByteArray(object s) {     byte[] data = new byte[Marshal.SizeOf(s)];     IntPtr ptr = Marshal.AllocHGlobal(Marshal.SizeOf(s));     Marshal.StructureToPtr(s, ptr, true);     Marshal.Copy(ptr, data, 0, data.Length);     return data; } public static void ByteArrayToAnyStruct&lt;T&gt;(ref T s, byte[] buffer) where T : struct {     IntPtr ptr = Marshal.AllocHGlobal(buffer.Length);     Marshal.Copy(buffer, 0, ptr, buffer.Length);     s = (T)Marshal.PtrToStructure(ptr, s.GetType());     Marshal.FreeHGlobal(ptr); } </code></pre>  <p>On Windows 7 the struct is filled and its values are:</p>  <pre><code>lpWHdr.dwBufferLength 16376 lpWHdr.dwBytesRecorded 16376 lpWHdr.dwFlags 2 lpWHdr.dwLoops 0 lpWHdr.dwUser 0 lpWHdr.lpData 459538440 </code></pre>  <p>Into byte[] array = </p>  <pre><code>8 0 100 27 0 0 0 0 248 63 0 0 248 63 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 </code></pre>  <p>On Win 7 theback conversion is equivalent, but On Win XP with the same byte array (from Console output) the back conversion repositions the values inside the struct:</p>  <pre><code>8 0 100 27 0 0 0 0 248 63 0 0 248 63 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  lpWHdr.dwBufferLength 0 lpWHdr.dwBytesRecorded 16376 lpWHdr.dwFlags 0 lpWHdr.dwLoops 0 lpWHdr.dwUser 16376 lpWHdr.lpData 459538440 </code></pre>  <p>Why does this repositioning take place? How to avoid it?</p>