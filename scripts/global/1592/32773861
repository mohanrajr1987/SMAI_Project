<p>I'm trying to use <code>gen-class</code> to override the <code>compare(WriteableComparable a, WriteableComparable b)</code> method in <a href="https://hadoop.apache.org/docs/r2.4.1/api/org/apache/hadoop/io/WritableComparator.html#compare(org.apache.hadoop.io.WritableComparable,%20org.apache.hadoop.io.WritableComparable)" rel="nofollow">this class</a> in clojure. The complication comes from the fact that this method is overloaded 3 times:</p>  <ul> <li><code>int compare(WritableComparable a, WritableComparable b)</code></li> <li><code>int compare(Object a, Object b)</code></li> <li><code>int compare(byte[] b1, int s1, int l1, byte[] b2, int s2, int l2)</code></li> </ul>  <p>So far my attempt looks like this:</p>  <pre><code>(gen-class  :name comparators.MyWriteableComparator  :extends org.apache.hadoop.io.WritableComparator  :exposes-methods {compare superCompare}  :prefix "interop-")  (defn interop-compare   ([this a b c d e f]      (.superCompare this a b c d e f))   ([this ^WritableComparable w1 ^WritableComparable w2]               (.compareTo (.getSymbol ^SymbolPair w1)                   (.getSymbol ^SymbolPair w2)))) </code></pre>  <p>Everything compiles, but when I run it, I'm getting a null pointer exception, and I suspect that it is because I overrode the wrong method (i.e. the <code>compare(Object a, Object b)</code> instead of the intended <code>compare(WritableComparable a, WritableComparable b)</code>). <a href="http://grepcode.com/file_/repo1.maven.org/maven2/org.jvnet.hudson.hadoop/hadoop-core/0.19.1-hudson-3/org/apache/hadoop/io/WritableComparator.java/?v=source" rel="nofollow">For reference</a>, the <code>Object</code> version of <code>compare</code> calls through to the <code>WriteableComparable</code> version.</p>  <p>It's totally possible that the NPE is coming from something else, but I've at least narrowed it down to this clojure code (when I run it with the corresponding Java version, things work well).</p>  <p>Is there a way to specify which overloaded version of the method should be used? </p>  <p>(I tried adding a <code>:methods</code> clause into the <code>gen-class</code> call, but I learned that one should declare only new methods, not superclass methods.)</p>