<p>I'm using <a href="https://sites.google.com/site/robertgiesecke/Home/uploads/unmanagedexports" rel="nofollow">Robert Giesecke's Unmanaged Exports</a> package to be able to call from C++ to C#.  This has to use the C interface from within C++. I have managed to get most things working, by scouring the web and picking up bits here and there....</p>  <pre><code>extern "C" {     //  Simple     __declspec(dllimport) int IntTest(int input);     __declspec(dllimport) double DoubleTest(double input);      //  Array of simple types in     __declspec(dllimport) int passArray(int t[], int i, int xx);      //  String in and out     __declspec(dllimport) int PassStringIn(wchar_t* str);     __declspec(dllimport) int PassStringOut(wchar_t** str);     __declspec(dllimport) wchar_t* PassStringInOut(wchar_t* str);      //  Array of strings types in     //__declspec(dllimport) int passArrayStrings(char** t, int i); } </code></pre>  <p>....</p>  <pre><code>//  Int in and out int aa = IntTest(4);  //  Double in and out double bb = DoubleTest(4.3);  //  Pass array in int arr[4] = { 1,2,3,4 }; int cc = passArray(arr, 4, 0);  //  String in wchar_t* a_str = L"input string from C++"; int dd = PassStringIn(a_str);  //  String out wchar_t* b_str = L"not used"; int ee = PassStringOut(&amp;b_str);  //  String in &amp; out wchar_t* d_str = L"bob"; wchar_t* result = PassStringInOut(d_str); </code></pre>  <p>corresponding C#</p>  <pre><code>    [DllExport( CallingConvention = CallingConvention.Cdecl)]     static int IntTest(int input)     {         return input + 1;     }      [DllExport(CallingConvention = CallingConvention.Cdecl)]     static double DoubleTest(double input)     {         return input + 1;     }      [DllExport(CallingConvention = CallingConvention.Cdecl)]     public static int passArray([In, Out, MarshalAs(UnmanagedType.LPArray, SizeParamIndex = 1)]  int[] tab, int i, int x)     {         return tab[x];     }      [DllExport(CallingConvention = CallingConvention.Cdecl)]     public static int PassStringIn( [MarshalAs(UnmanagedType.LPWStr)] string inputString)     {         Console.WriteLine("Hi, the string passed in was :" + inputString);         return 1;     }      [DllExport(CallingConvention = CallingConvention.Cdecl)]     static int PassStringOut([MarshalAs(UnmanagedType.BStr)] out string outputString)     {         Console.WriteLine("Hi, I will return the time from c#");         outputString = DateTime.Now.ToLongTimeString();         return 0; // indicates success     }      [DllExport(CallingConvention = CallingConvention.Cdecl)]     [return: MarshalAs(UnmanagedType.LPTStr)]     public static string PassStringInOut([MarshalAs(UnmanagedType.LPTStr)]string name)     {         return string.Format("Hello from .NET assembly, {0}!", name);     } </code></pre>  <p><a href="https://www.youtube.com/watch?v=XOhZgAPn_CU" rel="nofollow">Which was nice!</a> Anyway would anybody be able to help with passing arrays of strings in and out. I am pretty sure the C# section should look like this:</p>  <pre><code>    [DllExport(CallingConvention = CallingConvention.Cdecl)]     public static int passArrayStrings( [In, Out, MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.LPStr, SizeParamIndex = 1)]  string[] tab, int i)     {          return 1;     } </code></pre>  <p>I need some help on the C++(C) side on how to structure the array of strings in, such that they can be marshaled correctly. The mixed mode assembly created has both C# and and a C interface. As it is C and not C++ the arguments types of the exposed functions are not visible. </p>  <p><a href="http://i.stack.imgur.com/ADpzH.png" rel="nofollow"><img src="http://i.stack.imgur.com/ADpzH.png" alt="Dependency Walker"></a></p>  <p>Thanks</p>