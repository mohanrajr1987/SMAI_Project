<p>I'm using <a href="https://msdn.microsoft.com/en-us/library/vstudio/at4fb09f(v=VS.100).aspx" rel="nofollow">Marshal.GetFunctionPointerForDelegate</a> to get a function pointer to a native function. I then pass this function pointer to some unmanaged code via the regular DllImport mechanism. I'm using this for callbacks; the native code calls back into the managed (C#) code. Everything works fine as long as the callback happens on the same thread. If I attempt to call the managed function from a thread I created via <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms682453(v=vs.85).aspx" rel="nofollow">CreateThread</a> it fails.</p>  <p>Is it possible to call back into managed code from a native thread simply via the function pointer that GetFunctionPointerForDelegate returns?</p>  <p>C#:</p>  <pre><code>//in class definition [DllImport("SomeDll")] public static extern void SetCallback(System.IntPtr function);  [UnmanagedFunctionPointer(CallingConvention.Cdecl)] public void delegate SomeDelgateType();  public SomeDelgateType OnCallback;  //a function to implement the callback public void Callback() { }  //inside a setup function OnCallback = new SomeDelgateType(Callback); SetCallback(Marshal.GetFunctionPointerForDelegate(OnCallback); </code></pre>  <p>The problem occurs when I call the function pointer from C++. If it's on the original thread that made the SetCallback function everything works. If I create a native thread with CreateThread and then try to call the function via the pointer, I get the following exception:</p>  <pre><code>    Unhandled exception at 0x76674598 (KernelBase.dll) in      MissionControl.exe: 0xE0434352 (parameters: 0x80070057, 0x00000000, 0x00000000, 0x00000000, 0x73DB0000). </code></pre>  <p>With the following stack trace:</p>  <pre><code>        KernelBase.dll!_RaiseException@16()    Unknown         clr.dll!RaiseTheExceptionInternalOnly(class Object *,int,int)   Unknown         clr.dll!IL_Throw(class Object *)    Unknown         02bbc34b()  Unknown         [Frames below may be incorrect and/or missing]           [External Code]          native_function_on_different_thread(); </code></pre>