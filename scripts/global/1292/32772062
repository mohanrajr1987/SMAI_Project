<p>I want to access the value of a <strong>static field</strong> in other <strong>static methods</strong> running on the <strong>same thread</strong>. An example is in the code below :</p>  <p>The first class in this script is <code>ClassA</code>. ClassA's job is to compare two <code>Rect</code> value , If there is inequality between tho two compared <code>Rect</code> values then a public boolean is set to true;</p>  <p>in classA , <code>IsRectChanged</code> is a bool method which takes a parameter object of type <code>Rect</code> and compares it to  <code>StoredRect</code> which is a <code>Rect</code>. The method returns true when <code>storedRect</code> and the <code>Rect</code> value of <code>IsRectChanged</code> do not match.</p>  <pre><code>    public class ClassA     {         private Rect storedRect;          public ClassA() { }          public bool IsRectChanged(Rect rect)         {             bool isChanged = !rect.Equals(storedRect);             if(isChanged)             {                 storedRect = rect;             }              return isChanged;         }     } </code></pre>  <p>This is <code>ClassB</code>  We create a static field of <code>ClassA</code> named <code>isRectChanged</code> in <code>ClassB</code>. Do not change the structure of the <code>MethodB</code> in ClassB. Consider the fact that 50 other methods in static and non static classes must use a <code>ClassA</code> field . Needing to change the structure of <code>ClassB</code> in order to make the code work is would be counterproductive.</p>  <pre><code>    public static class ClassB     {         private static ClassA RectHelper = new ClassA();          public static void MethodB(Rect yourRect)         {            if(RectHelper.IsRectChanged(yourRect))            {                Debug.Log("Changes were made");            }         }     } </code></pre>  <p><code>ClassC</code>, <code>ClassD</code> and <code>ClassE</code> are running on the same thread.They both call <code>ClassB.MethodB</code> and assign a <code>new Rect</code> in the parameter of <code>MethodB</code>.</p>  <p>Because <code>ClassC</code> ,<code>ClassD</code> and <code>ClassE</code> are call <code>ClassB.MethodB</code> and assign a <code>new Rect</code> in the parameter of <code>MethodB</code>. They each override the <code>storedRect</code> value of the static field <code>ClassA RectHelper</code>.</p>  <p>Because of this ,<code>ClassA</code> <code>RectHelper.IsRectChanged</code> will always be true.</p>  <p>How do I work around this without having to  make <code>ClassB</code>'s <code>ClassA</code>'s and <code>ClassE</code>'s <code>MethodB</code>  non static ?**</p>  <pre><code>    public class ClassC     {         public void UpdateEverFrame()         {             ClassB.MethodB(new Rect(0, 0, 20, 20));         }     }     public class ClassD     {         public void UpdateEverFrame()         {             ClassB.MethodB(new Rect(100, 100, 10, 10));         }     } </code></pre>  <p>Here in <code>ClassE</code> <code>ClassB.MthodB</code> is called in two <code>UpdateEverFrame</code> methods , one of which takes in a int parameter . They override each other if they are called simultaneously, so the system will believe that <code>IsRectChanged</code> is true and  will always return true. which is a big problem.</p>  <p>We dont want <code>IsRectChanged</code> to be overridden , We want each Call of <code>ClassB.MethodB</code> to be treated as if it are not static so that <code>IsRectChanged</code> is never overridden </p>  <pre><code>    public class ClassE     {         public void UpdateEverFrame()         {             ClassB.MethodB(new Rect(0, 0, 20, 20));         }          public void UpdateEverFrame(int i)         {             ClassB.MethodB(new Rect(100, 100, 10, 10));         }     } </code></pre>  <p>In my question When I say 'access a unique value of a static property' I am talking about <code>ClassB.RectHelper</code>.</p>  <p>I know that <code>ClassB.RectHelper</code> is STATIC so the value will be shared between the classes <code>ClassC</code>, <code>ClassD</code> and ClassE, whenever they call <code>MethodB</code>. But can we work around this so that <code>ClassC</code> and <code>ClassD</code> so not override the <code>storedRect</code> value in ClassA ?</p>