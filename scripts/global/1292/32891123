<p>This is the first time I'm trying to compile and use a library on Windows. I downloaded the .exe that contains opencv-3.0.0 on the official website and extracted it. I ignored the <code>build</code> directory and used the CMake GUI on the <code>source</code> directory to output two dirs, one named <code>shared</code> when I set CMake variable <code>BUILD_SHARED</code> to <code>true</code> and one named <code>static</code> when I set this variable to <code>false</code>.</p>  <p>In the two of them I used <code>make install</code> in the root and in the <code>include</code> directory and I got two similar <code>install</code> directories, the only difference being that the one in <code>shared</code> has <code>bin</code> and <code>lib</code> dir in <code>.\x86\mingw</code> and the one in <code>static</code> has <code>bin</code> and <code>staticlib</code>. I "merged" them by moving the <code>staticlib</code> dir next to the <code>bin</code> and <code>lib</code> dirs. So now I only have one <code>install</code> dir containing the <code>include</code> and all the libraries.</p>  <p>That's where I don't really understand how to properly manage compiled libraries on windows. I put this folder somewhere on my hard drive, then in my project where I want to use OpenCV I edited the <code>CMakeLists</code> as such:</p>  <pre><code>cmake_minimum_required (VERSION 3.3) project (Prototype C)  find_package (OpenCV REQUIRED)  set (EXECUTABLE_OUTPUT_PATH bin/${CMAKE_BUILD_TYPE})  include_directories (${OpenCV_INCLUDE_DIRS})  add_executable (     binary      src/binary.c ) target_link_libraries(     binary      ${OpenCV_LIBS} ) </code></pre>  <p>The first time I use <code>cmake . -G"MinGW Makefiles</code> it throws me an error because it cannot find the OpenCV dir. I'm thinking that's because I'm on Windows, so I have to manually create a variable <code>OpenCV_DIR:PATH=E:/Programmation/share/opencv</code> (I renamed <code>install</code> to <code>opencv</code> and moved it in a <code>share</code> dir) in my <code>CMakeCache</code>. Then I can use <code>cmake .</code> .</p>  <p>Now <code>cmake .</code> will output this:</p>  <pre><code>-- OpenCV ARCH: x86 -- OpenCV RUNTIME: mingw -- OpenCV STATIC: ON -- Found OpenCV 3.0.0 in E:/Programmation/share/opencv/x86/mingw/staticlib </code></pre>  <p>It automatically uses the static libraries. I am able to use <code>mingw32-make</code> just fine and create a working static exe. I tried to force it to use shared libraries by specifying <code>SET(BUILD_SHARED_LIBS ON)</code> and <code>SET(CMAKE_FIND_LIBRARY_SUFFIXES ".dll.a")</code> (libs in <code>libs</code> dir are .dll.a, dunno why but they are part of the shared libs). But it will always output that it found OpenCV 3.0.0 in <code>staticlib</code>. If I move <code>staticlib</code> elsewhere however, it works fine and finds the shared libraries:</p>  <pre><code>-- OpenCV ARCH: x86 -- OpenCV RUNTIME: mingw -- OpenCV STATIC: ON -- Found OpenCV 3.0.0 in E:/Programmation/share/opencv/x86/mingw/lib </code></pre>  <p>Two questions:</p>  <ul> <li>Is the way I "installed" it correct for Windows? Should I compile and organize future libraries the same way? (In a <code>share</code> dir, one dir per library containing <code>LibNameConfig.cmake</code> file and <code>include</code>, <code>etc</code> and <code>x86</code> dirs)</li> <li>How to make cmake use the shared libs without having to move my <code>staticlib</code> out?</li> </ul>