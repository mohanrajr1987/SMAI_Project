<p>I do not understand why I cannot use a public const static member of a class in the initializer list of a map (probably any container). As I understand it "MyClass::A" is an rvalue, it seems like it should be the exact same as the case where I am using "THING" which is also a static const just outside of a class.</p>  <p>Here is the error:</p>  <pre><code>Undefined symbols for architecture x86_64:   "MyClass::A", referenced from:       _main in map-380caf.o ld: symbol(s) not found for architecture x86_64 clang: error: linker command failed with exit code 1 (use -v to see invocation) </code></pre>  <p>And here is the code:</p>  <pre><code>#include &lt;iostream&gt; #include &lt;map&gt; #include &lt;string&gt;  static const int THING = 1;  class MyClass { public:     static const int A = 1; };  int main() {     int a;     typedef std::map&lt;int, std::string&gt; MyMap;      // compiles and works fine     a = MyClass::A;     std::cout &lt;&lt; a &lt;&lt; std::endl;      // compiles and works fine     MyMap other_map = { {THING, "foo"} };     std::cout &lt;&lt; other_map.size() &lt;&lt; std::endl;      // Does not compile     MyMap my_map = { {MyClass::A, "foo"} };     std::cout &lt;&lt; my_map.size() &lt;&lt; std::endl;      return 0; } </code></pre>  <p><strong>UPDATE 1:</strong></p>  <p>Using clang on OS X:</p>  <pre><code>Apple LLVM version 7.0.0 (clang-700.0.72) Target: x86_64-apple-darwin14.5.0 Thread model: posix </code></pre>  <p>compiler flags:</p>  <pre><code>clang++ map.cc -std=c++1y </code></pre>