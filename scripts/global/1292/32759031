<p>This question is only meant to clear the concepts, so please do not emphasis on "why would someone write up a class like that"</p>  <p>I already know that how static functions can be accessed without making an instance of an object (means not modifying state of an object). But lets consider this case of two classes having only two functions in it:</p>  <pre><code>class A {     /* no class attributes */     /* no constructor */     public function someFunction(){     }      public static function someStaticFunction(){     } } </code></pre>  <p></p>  <pre><code>class B {     /* no class attributes */     /* no constructor */     public function some_function(){     }      public function someNonStaticFunction(){     /* with same implementation as of A::someStaticFunction() */      } } </code></pre>  <p>For class A: there is no constructor and attributes, and all the functions are public. So,</p>  <ol> <li>Is there any purpose of declaring a function as static for such class?</li> <li>Instead of using class A, if I use class B then I can call the function after making an instance of this class. What would it cost to call the function like this? In terms of execution time and memory (considering no constructor and attributes)</li> <li>Making an instance of a class allocates memory to the object, but do the object consumes memory if it has no attributes at all?</li> <li>Does calling the function as static will automatically flushes out the memory, after the function is completely executed? Or no memory is consumed by the function itself (the only cost is computation and memory of the variables inside)?</li> </ol>