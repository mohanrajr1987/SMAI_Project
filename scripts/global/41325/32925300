<p>In one vein of thought I would like to configure a build with a custom task that will serve instead of the <code>test</code> default task. I will not be registering it as an "sbt test framework" as I'd like to avoid the syntax, limitations and history that comes with that. For example I'd like more flexibility in formatting, storing and sending test results.</p>  <p>Would it be possible introducing an sbt task to mimic sbt's default test task, in the following essential senses:</p>  <ul> <li>depend on compilation</li> <li>be a dependency for other tasks such as artifact publishing tasks, and have them depend on a success return value from it</li> <li>be able to provide it with library dependencies which will be excluded from final publishable artifacts</li> <li>be able to control it just like any other task dependency</li> <li>etc</li> </ul>  <p>Alternatively, are you able to delineate the structure of the mostly undocumented sbt <a href="https://github.com/sbt/sbt/blob/ab1d376e115005c1057ebc48592ac2dfc6bb6253/testing/src/main/scala/sbt/TestFramework.scala" rel="nofollow">TestFramework interface</a> to a level that it's straightforward having your own formatting, test output logic, and test results publishing code, in your <code>TestFramework</code> implementation? I have mostly failed locating <a href="https://github.com/scalatest/scalatest/tree/985efd4078e0dc229977a5dc049d9fa4735aba6c/scalatest-test/src/test/scala/org/scalatest/tools" rel="nofollow">scalaTest</a>'s implementation of it.</p>  <p>Thanks in advance for you answers on both techniques.</p>