<p>I am attempting to replicate some Python code in Fortran 90 to make it work within a larger Fortran project I am contributing to.  Specifically, I am trying to convert some code that recursively identifies upstream paths in a binary tree, such as in the following example:</p>  <pre><code>     4 -- 5 -- 8     /     2 --- 6 - 9 -- 10   /           \   1              -- 11   \    3 ----7 </code></pre>  <p>This tree is represented and traversed by:</p>  <pre><code>class Node(object):      def __init__(self):         self.name = None         self.parent = None         self.children = set()         self._upstream = set()      def __repr__(self):         return "Node({})".format(self.name)      # Recursively search upstream in the drainage network, returns a set of all paths     @property     def upstream_paths(self):         if not self._paths:             for child in self.children:                 if child.upstream_paths:                     self._paths.extend([child] + path for path in child.upstream_paths)                 else:                     self._paths.append([child])         return self._paths  from collections import defaultdict  edges = {(11, 9), (10, 9), (9, 6), (6, 2), (8, 5), (5, 4), (4, 2), (2, 1), (3, 1), (7, 3)} nodes = collections.defaultdict(lambda: Node())  for node, parent in edges:     nodes[node].name = node     nodes[parent].name = parent     nodes[node].parent = nodes[parent]     nodes[parent].children.add(nodes[node]) </code></pre>  <p>Is it possible to implement anything like this in Fortran 90? I have a decent understanding of recursion in f90 but without the object-orientedness of Python, I can't imagine how this can be done.</p>  <p>EDIT:</p>  <p>For further description:</p>  <p>What I intend to do is identify upstream drainage paths in a dendritic stream network. For any given outlet (root) there may be hundreds or thousands upstream paths. There would be no modification of the network required once it is initialized, although there will be calls to many different nodes within the network (in the above example, a call will be made for all upstream paths from 1, from 6, from 5, etc.)  I've been looking into using pointers but can't seem to find any examples out there of this kind of path-finding.</p>