<p><strong>Situation</strong></p>  <p>I have a program (written in fortran) which consists of:</p>  <ol> <li>A set of core routines, used every time the program is run.</li> <li>A large collection of alternate routines, only one of which is used for each run, selected by the user at the start.</li> </ol>  <p>The user may reasonably select different alternatives for subsequent runs.</p>  <p>Most of the building time is spent compiling the alternatives, which is frustrating when I know only one will be used each time. Most of the run time is spent in the alternative routine, which is short but called many times.</p>  <p><strong>Idea</strong> </p>  <p>Compile all the core routines to a native executable and all the alternatives to an llvm bitcode library. At runtime, the selected alternative only is automatically compiled and linked. This would hopefully save a lot of building time and slow down the running only marginally.</p>  <p><strong>Questions</strong></p>  <ol> <li>Is this even possible and if so, how?</li> <li>Is it a good idea? Are there better ways of achieving a similar result?</li> </ol>