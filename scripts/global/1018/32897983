<p>I'm trying to load the following C library in Lua:</p>  <pre><code>#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;lua.h&gt; #include &lt;lualib.h&gt; #include &lt;lauxlib.h&gt;  void stackDump(lua_State* lua) {     int i, t;     int top = lua_gettop(lua);      printf("Stack dump: ");      for (i = 1; i &lt;= top; i++)     {         t = lua_type(lua, i);          switch (t)         {             case LUA_TSTRING:                 printf("\"%s\"", lua_tostring(lua, i));                 break;              case LUA_TBOOLEAN:                 printf(lua_toboolean(lua, i) ? "true" : "false");              case LUA_TNUMBER:                 printf("%g", lua_tonumber(lua, i));                 break;              default:                 printf("%s", lua_typename(lua, t));                 break;         }          if (i &lt; top)            printf(", ");     }      printf("\n"); }  int myPrint(lua_State* lua) {    stackDump(lua);     const char* str = luaL_checkstring(lua, 1);     printf("myPrint: %s\n", str);     lua_newtable(lua);     lua_pushinteger(lua, 1);    lua_pushstring(lua, "myPrint");    lua_settable(lua, -3);     lua_pushinteger(lua, 2);    lua_pushstring(lua, str);    lua_settable(lua, -3);     return 2; }  static const struct luaL_Reg myScrewedLib[] = {    {"myPrint", myPrint},    {NULL, NULL} };  int luaopen_myScrewedLib(lua_State* lua) {    luaL_newlib(lua, myScrewedLib);    printf("SCREW IT\n");    return 1; } </code></pre>  <p>I'm compiling this file with:</p>  <pre><code>gcc -Wall -fpic -llua -shared -o myScrewedLib.so tut1.c </code></pre>  <p>I see the following when running in the interpreter:</p>  <pre><code>$ lua Lua 5.2.2  Copyright (C) 1994-2013 Lua.org, PUC-Rio &gt; local m = require("myScrewedLib") SCREW IT &gt; for k, v in pairs(m) do print(k, v) end stdin:1: bad argument #1 to 'pairs' (table expected, got nil) stack traceback:     [C]: in function 'pairs'     stdin:1: in main chunk     [C]: in ? &gt;  </code></pre>  <p>I wouldn't expect <code>m</code> to be <code>nil</code> here. The book mentions the use of <code>lua_pushcfunction()</code> but only when it's a "quick-and-dirty way"[1] to run the function from the interpreter. Other examples of using the methods in this C file dont use <code>lua_pushcfunction()</code> as they imply that the <code>luaL_Reg</code> struct is how Lua knows what can be called[2].</p>  <hr>  <p>[1] Programming in Lua 3rd Edition, p.274</p>  <p>[2] Programming in Lua 3rd Edition, p.279</p>