<p>Here's a potential pattern that can check if an argument is a table:</p>  <pre><code>int my_fn(lua_State *L) {   luaL_checktype(L, 1, LUA_TTABLE);   // .. do stuff with the table .. } </code></pre>  <p>This works whenever the first argument is a table. However, other Lua types support table lookups, such as a userdata, and in luajit, a cdata.</p>  <p>Is there a nice way to check if a table lookup, such as via <code>lua_getfield</code>, will succeed before I call it? I mean without restricting the type to tables. Relatedly, are tables, userdata, and cdata the only types in luajit that support indexed lookups?</p>  <p>I'm most interested in answers restricted to the Lua 5.1 C API because I'm using LuaJIT which currently works with this version.</p>  <p><strong>Clarification</strong></p>  <p>The advantage of the <code>luaL_checkXXX</code> functions is that, in one line, they:</p>  <ul> <li>throw an informative, user-friendly error message if the type is wrong, and</li> <li>provide a C-friendly return value that can be used immediately.</li> </ul>  <p>I'm looking for something similar for tables. I don't expect a C-friendly hash-table return value, but I <em>do</em> want the same quality of error message to the user if the argument in question is not indexable.</p>  <p>I'm embracing the philosophy of duck typing. If I write a function that simply wants to index some keys from an argument, then I don't care if that argument is truly a table, or just a userdata that supports <code>__index</code> lookups. I want to accept either one.</p>