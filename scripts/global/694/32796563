<p>I have the edit view and the edit action in my blog controller. After I created a post with the "create action" and after I upload the image to the database folder, I update the path on the post.PostImage (string value). I can see the image in the folder, and I can see the path of my image and I can also see the preview of the picture in the edit view. In my database it saved as (~/Images/PostID/PictureName). But after I edit my post, I want to make a checkbox that if checked I can edit the picture and when is it not checked I delete the picture. I send the parameters, and my problem is that on the debugger I see the "string postimage" as null but on the database table it has the path! and because of that all of this doesn't work, I don't care about logic, why is it null????  here is my code:</p>  <p>VIEW:</p>  <pre><code>@model WebApplication1.Models.Post  @{     ViewBag.Title = "Edit";     Layout = "~/Views/Shared/_Layout.cshtml"; }  &lt;h2&gt;Edit&lt;/h2&gt;   @using (Html.BeginForm(Html.BeginForm("Edit", "Blog", FormMethod.Post, new { enctype = "multipart/form-data" }))) {     @Html.AntiForgeryToken()      &lt;div class="form-horizontal"&gt;         &lt;h4&gt;Post&lt;/h4&gt;         &lt;hr /&gt;         @Html.ValidationSummary(true, "", new { @class = "text-danger" })         @Html.HiddenFor(model =&gt; model.PostID)          &lt;div class="form-group"&gt;             @Html.LabelFor(model =&gt; model.PostTitle, htmlAttributes: new { @class = "control-label col-md-2" })             &lt;div class="col-md-10"&gt;                 @Html.EditorFor(model =&gt; model.PostTitle, new { htmlAttributes = new { @class = "form-control" } })                 @Html.ValidationMessageFor(model =&gt; model.PostTitle, "", new { @class = "text-danger" })             &lt;/div&gt;         &lt;/div&gt;          &lt;div class="form-group"&gt;             @Html.LabelFor(model =&gt; model.PostAuthor, htmlAttributes: new { @class = "control-label col-md-2" })             &lt;div class="col-md-10"&gt;                 @Html.EditorFor(model =&gt; model.PostAuthor, new { htmlAttributes = new { @class = "form-control" } })                 @Html.ValidationMessageFor(model =&gt; model.PostAuthor, "", new { @class = "text-danger" })             &lt;/div&gt;         &lt;/div&gt;          &lt;div class="form-group"&gt;             @Html.LabelFor(model =&gt; model.WebSite, htmlAttributes: new { @class = "control-label col-md-2" })             &lt;div class="col-md-10"&gt;                 @Html.EditorFor(model =&gt; model.WebSite, new { htmlAttributes = new { @class = "form-control" } })                 @Html.ValidationMessageFor(model =&gt; model.WebSite, "", new { @class = "text-danger" })             &lt;/div&gt;         &lt;/div&gt;          &lt;div class="form-group"&gt;             @Html.LabelFor(model =&gt; model.PostDate, htmlAttributes: new { @class = "control-label col-md-2" })             &lt;div class="col-md-10"&gt;                 @Html.EditorFor(model =&gt; model.PostDate, new { htmlAttributes = new { @class = "form-control" } })                 @Html.ValidationMessageFor(model =&gt; model.PostDate, "", new { @class = "text-danger" })             &lt;/div&gt;         &lt;/div&gt;          &lt;div class="form-group"&gt;             @Html.LabelFor(model =&gt; model.PostText, htmlAttributes: new { @class = "control-label col-md-2" })             &lt;div class="col-md-10"&gt;                 @Html.EditorFor(model =&gt; model.PostText, new { htmlAttributes = new { @class = "form-control" } })                 @Html.ValidationMessageFor(model =&gt; model.PostText, "", new { @class = "text-danger" })             &lt;/div&gt;         &lt;/div&gt;          &lt;div class="form-group"&gt;               &lt;div&gt;                 &lt;b&gt;Upload image:&lt;/b&gt;                 @if (!Model.PostImage.IsEmpty())                 {                                             @Html.CheckBox("checkImage", true)                         &lt;img src="@Url.Content(Model.PostImage)" alt="@Model.PostAuthor" width="300" /&gt;                 }                  else                 {                     @Html.CheckBox("checkImage", false)                 }             &lt;/div&gt;                         &lt;input type="file" name="file" id="file" /&gt;             &lt;!-- Show message of the controller --&gt;             @ViewBag.Message         &lt;/div&gt;              &lt;div class="form-group"&gt;             @Html.LabelFor(model =&gt; model.PostVideo, htmlAttributes: new { @class = "control-label col-md-2" })             &lt;div class="col-md-10"&gt;                 @Html.EditorFor(model =&gt; model.PostVideo, new { htmlAttributes = new { @class = "form-control" } })                 @Html.ValidationMessageFor(model =&gt; model.PostVideo, "", new { @class = "text-danger" })             &lt;/div&gt;         &lt;/div&gt;          &lt;div class="form-group"&gt;             &lt;div class="col-md-offset-2 col-md-10"&gt;                 &lt;input type="submit" value="Save" class="btn btn-default" /&gt;             &lt;/div&gt;         &lt;/div&gt;     &lt;/div&gt; }  &lt;div&gt;     @Html.ActionLink("Back to Posts List", "Index") &lt;/div&gt;  @section Scripts {     @Scripts.Render("~/bundles/jqueryval") } </code></pre>  <p>EDIT ACTION IN BLOG CONTROLLER:</p>  <pre><code>   // GET: Blog/Edit/5         public ActionResult Edit(int? id)         {             if (id == null)             {                 return new HttpStatusCodeResult(HttpStatusCode.BadRequest);             }             Post post = db.Posts.Find(id);             if (post == null)             {                 return HttpNotFound();             }             return View(post);         }          // POST: Blog/Edit/5         // To protect from overposting attacks, please enable the specific properties you want to bind to, for          // more details see http://go.microsoft.com/fwlink/?LinkId=317598.         [HttpPost]         [ValidateAntiForgeryToken]         public ActionResult Edit([Bind(Include = "PostID,PostTitle,PostAuthor,WebSite,PostDate,PostText,PostImage,PostVideo")] Post post, HttpPostedFileBase file, bool checkImage)         {             var fileName = "";             if (ModelState.IsValid)             {                 db.Entry(post).State = EntityState.Modified;                  if (checkImage == true)                 {                     //Check if there is a file                     if (file != null &amp;&amp; file.ContentLength &gt; 0)                     {                         //Check if there is an image                         var supportedTypes = new[] { "jpg", "jpeg", "gif", "png" };                         var fileExt = System.IO.Path.GetExtension(file.FileName).Substring(1);                          if (!supportedTypes.Contains(fileExt))                         {                             ViewBag.Message = "Invalid image type. Only the following types (jpg, jpeg, gif, png) are supported";                             return View();                         }                          //Check if there is a file on database                         if ( !(String.IsNullOrEmpty(post.PostImage)) )                         {                                                         //Delete old file in folder                                                                                     System.IO.File.Delete(post.PostImage);                              //Save new file in folder                             var folder = Path.Combine(Server.MapPath("~/Images/"), Convert.ToString(post.PostID));                             var path = Path.Combine(folder, fileName);                             file.SaveAs(path);                              //Save path in database                             string targetPath = String.Concat("~/Images/", Convert.ToString(post.PostID), "/", fileName);                             post.PostImage = targetPath;                         }                          //No file in database                         else                         {                             var folder = Path.Combine(Server.MapPath("~/Images/"), Convert.ToString(post.PostID));                             var path = Path.Combine(folder, fileName);                             file.SaveAs(path);                              //Save path in database                             string targetPath = String.Concat("~/Images/", Convert.ToString(post.PostID), "/", fileName);                             post.PostImage = targetPath;                         }                     }                      //Checkbox is checked but not file uploaded                     else                         ViewBag.Message = "Checkbox is checked, please upload an image";                     return View();                 }                  else                 {                     //Checkbox is not checked - Delete the image from database                     if( !(String.IsNullOrEmpty(post.PostImage)) )                     {                         //Delete old file in folder                                                                             try                         {                             System.IO.File.Delete("\a.txt");                             post.PostImage = null;                         }                         catch (System.IO.IOException e)                         {                             Console.WriteLine(e.Message);                                                         }                                                                                             }                      db.SaveChanges();                     return RedirectToAction("Index");                 }             }             return View(post);         } </code></pre>