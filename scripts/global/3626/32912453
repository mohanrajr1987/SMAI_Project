<p>I've got 2 tables - <strong>dishes</strong> and <strong>ingredients</strong>:</p>  <p>in <strong>Dishes,</strong> I've got a list of pizza dishes, ordered as such: <a href="http://i.stack.imgur.com/1O23n.png" rel="nofollow"><img src="http://i.stack.imgur.com/1O23n.png" alt="Dishes Table"></a></p>  <p>In <strong>Ingredients,</strong> I've got a list of all the different ingredients for all the dishes, ordered as such:<a href="http://i.stack.imgur.com/f6k0W.png" rel="nofollow"><img src="http://i.stack.imgur.com/f6k0W.png" alt="Ingredients Table"></a></p>  <p>I want to be able to <strong>list all the names of all the ingredients of each dish alongside each dish's name</strong>.</p>  <p>I've written this query that does not replace the ingredient ids with names as it should, instead opting to return an empty set - please explain what it that I'm doing wrong:</p>  <pre><code>    SELECT dishes.name, ingredients.name, ingredients.id FROM dishes INNER JOIN ingredients ON dishes.ingredient_1=ingredients.id,dishes.ingredient_2=ingredients.id,dishes.ingredient_3=ingredients.id,dishes.ingredient_4=ingredients.id,dishes.ingredient_5=ingredients.id,dishes.ingredient_6=ingredients.id, dishes.ingredient_7=ingredients.id,dishes.ingredient_8=ingredients.id; </code></pre>  <p>It would be great if you could refer to:</p>  <ol> <li><em>The logic of the DB structuring</em> - am I doing it correctly?</li> <li><em>The logic behind the SQL query</em> - if the DB is built in the right fashion, then why upon executing the query I get the empty set?</li> <li>If you've encountered such a problem before - one that <em>requires a single-to-many relationship</em> - how did you solved it in a way different than this, using PHP &amp; MySQL? </li> </ol>  <p><strong><em>Disregard The Text In Hebrew - Treat It As Your Own Language.</em></strong></p>