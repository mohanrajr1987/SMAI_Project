<p>I'm trying to create a sortable table of search results returned from YouTube. I'm able to create the search engine just fine and I can create a sortable table. But now I'm trying to connect the two.</p>  <p>I know the main problem is that when the page loads there are no results to sort; there is no table until a search is performed.</p>  <p>I checked out this discussion and I think there is something there for me to work with but I don't know how to integrate it.</p>  <p>Here's what I'm working with so far:</p>  <p><strong>app.js</strong></p>  <pre><code>function tplawesome(e, t) { res = e; for (var n = 0; n &lt; t.length; n++) {     res = res.replace(/\{\{(.*?)\}\}/g, function(e, r) {         return t[n][r];     }); } return res; }  $(function() { $("form").on("submit", function(e){     e.preventDefault();     // prepare the request     var request = gapi.client.youtube.search.list({         part: "snippet",         type: "video",         q: encodeURIComponent($("#search").val()).replace(/%20/g, "+"),         maxResults: 5,         publishedAfter: "2015-01-01T00:00:00Z",         relevanceLanguage: "en"     });     // execute request     request.execute(function(response) {         // console.log(response);   // test by logging to console          var results = response.result;          $("#results").html("");     // reset results          // loop through each returned item         $.each(results.items, function(index, item) {             console.log(item);      // test by logging to console              $.get("tpl/results-sortable-table.html", function(data) {                 $("#results").append(tplawesome(data,                     [{                         "title": item.snippet.title,                         "description": item.snippet.description,                         "channelTitle": item.snippet.channelTitle,                         "publishedAt": item.snippet.publishedAt,                     }]                 ));             });         });         resetVideoHeight();     }); }); $(window).on("resize", resetVideoHeight);   // reset video height when window is resized });  function resetVideoHeight() { $(".video").css("height", $("#results").width() * 9/16); }  function init() { gapi.client.setApiKey("");      // Removed on purpose gapi.client.load("youtube", "v3", function() {     // yt api is ready }); }    // THE SORTING SCRIPT  // I think I need to include something here that listens for when the table is populated. Is that right?  // -------------------------------------------------------------------- // COMPARE OBJECT // --------------------------------------------------------------------  // Create a general "compare" object that will compare values in a table     var compare = {         name: function(a, b) {              // For genre and title (data-type = name) ...             a = a.replace(/^the /i, '');    // Remove "the" from start (^) of parameter a ...             b = b.replace(/^the /i, '');    // and parameter "b".             a = a.replace(/^a /i, '');      // Remove "a" from start (^) of parameter a ...             b = b.replace(/^a /i, '');      // and parameter "b".             a = a.replace(/^an /i, '');     // Remove "a" from start (^) of parameter a ...             b = b.replace(/^an /i, '');     // and parameter "b".             a = a.toUpperCase();            // Convert a to uppercase             b = b.toUpperCase();            // Convert b to uppercase              if (a &lt; b) {                    // If a is less than b ...                 return -1;                  // ???????? return -1 indicating a should be before b, ...             } else {                        // otherwise ...                 return a &gt; b ? 1 : 0;       // return 1 if a is greater than b or ...             }                               // return zero (if the are the same).         },  // -------------------------------------------------------------------- // DATE METHOD // -------------------------------------------------------------------- // Create a "date" method that will compare and sort two dares by using the date function to ... // convert string to date, and sort them based on their values.      date: function(a, b) {                  // Add a method called date         a = new Date(a);                    // New Date object to hold the date         b = new Date(b);                    // New Date object to hold the date          // Compare dates and return result         return a &gt; b ? 1 : 0;               // return 1 if a is greater than b or ...                                             // return zero (if the are the same).                    }, };  // -------------------------------------------------------------------- // SORT TABLE SCRIPT // --------------------------------------------------------------------  $('.sortable').each(function() {  // Establish variables var $table = $(this);                       // The current sortable table. var $tbody = $table.find('tbody');          // Store this table's tbody in $tbody. var $thcontrols = $table.find('th');        // Store this table's th in $thcontrols. var rows = $tbody.find('tr').toArray();     // Store an array of tr's in rows.  $thcontrols.on('click', function() {    // When user clicks on a th     var $th = $(this);                  // Get the th that was clicked on     var datasort = $th.data('sort');    // Get value of this th's data-sort attribute and store it in datasort.     var column;                         // Declare the column variable.       // If selected item already has ascending or descending class, then it's already sorted so reverse contents.     if ($th.is('.ascending') || $th.is('.descending')) {    // If th is .ascending or .descending ...         $th.toggleClass('ascending descending');            // switch their classes and ...         $tbody.append(rows.reverse());                      // Reverse the headers array of rows.     } else {                                                // Otherwise perform a sort                                     // If compare object has method that matches the value of the data-type attribute for this column ...         if (compare.hasOwnProperty(datasort)) {     // Note: datasort is $th.data('sort')             column = $thcontrols.index(this);       // ... get the th's index number.              rows.sort(function(a, b) {                  // Sort values in rows array.                 a = $(a).find('td').eq(column).text();  // Find text of the td in the column in row a, ...                 b = $(b).find('td').eq(column).text();  // find text of the td in the column in row b and ...                 return compare[datasort](a, b);         // compare them.             });          $th.addClass('ascending');                          // Add .ascending to th and ...         $th.siblings().removeClass('ascending descending'); // remove asc or desc from all other headers. And ...              $tbody.append(rows);    // Append the rows to the table body         }     } });  }); </code></pre>  <p><strong>index.html</strong></p>  <pre><code>&lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt;           &lt;title&gt;YouTube Search Engine&lt;/title&gt;     &lt;meta charset="UTF-8" /&gt;                         &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;     &lt;meta name="description" content="Awesome videos!" /&gt;     &lt;link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css"&gt;     &lt;link rel="stylesheet" href="css/style.css"&gt;     &lt;link rel="stylesheet" href="css/sort-table.css"&gt; &lt;/head&gt; &lt;body&gt;     &lt;header&gt;         &lt;h1 class="w100 text-center"&gt;&lt;a href="index.html"&gt;YouTube Viral Search&lt;/a&gt;&lt;/h1&gt;     &lt;/header&gt;     &lt;div class="row"&gt;         &lt;div class="col-md-6 col-md-offset-3"&gt;             &lt;form action="#"&gt;                 &lt;p&gt;&lt;input type="text" id="search" placeholder="Type something..." autocomplete="off" class="form-control" /&gt;&lt;/p&gt;                 &lt;p&gt;&lt;input type="submit" value="Search" class="form-control btn btn-primary w100"&gt;&lt;/p&gt;             &lt;/form&gt;       &lt;table class="sortable"&gt;         &lt;thead&gt;             &lt;tr&gt;                 &lt;th data-sort="name"&gt;Title&lt;/th&gt;                 &lt;th data-sort="name"&gt;Description&lt;/th&gt;                 &lt;th data-sort="name"&gt;Channel Title&lt;/th&gt;                 &lt;th data-sort="date"&gt;Published At&lt;/th&gt;             &lt;/tr&gt;         &lt;/thead&gt;         &lt;tbody id="results"&gt;             &lt;!-- results go here --&gt;                         &lt;/tbody&gt;     &lt;/table&gt;              &lt;/div&gt;     &lt;/div&gt;      &lt;!-- scripts --&gt;     &lt;script src="https://code.jquery.com/jquery-2.1.3.min.js"&gt;&lt;/script&gt;     &lt;script src="js/app.js"&gt;&lt;/script&gt;     &lt;script src="https://apis.google.com/js/client.js?onload=init"&gt;&lt;/script&gt;  &lt;/body&gt; &lt;/html&gt; </code></pre>  <p><strong>results-sortable-table.html</strong></p>  <pre><code>&lt;tr onload="sort()" class="item"&gt;     &lt;td&gt;{{title}}&lt;/td&gt;     &lt;td&gt;{{description}}&lt;/td&gt;     &lt;td&gt;{{channelTitle}}&lt;/td&gt;     &lt;td&gt;{{publishedAt}}&lt;/td&gt; &lt;/tr&gt; </code></pre>  <p>I know I just put everything and the kitchen sink here, but I'm knew to all this so I wasn't sure what would be important.</p>  <p>Thanks to anyone who can help,</p>  <p>Aryadne</p>