<p>I got a great surprise when I noticed the following snippet not compiling:</p>  <pre><code>aTime := time.Time{} if defaultTime := time.Time{} ; aTime != defaultTime {} </code></pre>  <p>The compiler returns:</p>  <blockquote>   <p>type time.Time is not an expression </p>      <p>defaultTime := time.Time used as</p>      <p>value undefined: defaultTime</p> </blockquote>  <p>The intent here is to test the <em>aTime</em> variable if it's set to it's default value.</p>  <p>It also does not compile if I get the pointer of the struct (<em>defaultTime := &amp;time.Time{}</em>).</p>  <p>However, it does compile if I init defaultTime outside of the if construct, or do the init using the new() builtin:</p>  <pre><code>aTime := time.Time{} if defaultTime := new(time.Time) ; aTime != *defaultTime {} </code></pre>  <p>From what I've read everywhere, <em>new(myStruct)</em> it supposed to be completely equivalent to <em>&amp;myStruct{}</em>.</p>  <p>As I interprate it, <em>defaultValue := time.Time{}</em> qualifies as a <a href="https://golang.org/ref/spec#SimpleStmt" rel="nofollow">SimpleStmt</a> (specifically an <a href="https://golang.org/ref/spec#Assignment" rel="nofollow">Assignment</a>), as detailed in the <a href="https://golang.org/ref/spec#If_statements" rel="nofollow">If statement spec</a>.</p>  <p>I've come up with no explanation for this behavior, despite my best googling efforts. Would be grateful if someone could make my head stop spinning.</p>