<p>Say I have this class where I need to initialize a list (from a database) one time. Is it necessary to have a synchronized block inside of a static initialization block? It seems to be redundant.</p>  <p>If not, do I even need a null check (because it's always null the first time)?</p>  <pre><code>public class Foo {     private static List&lt;Integer&gt; numbers;      // with synchronization     static {         if (numbers == null) {             synchronized (Foo.class) {                 if (numbers == null) {                     numbers = new LinkedList&lt;Integer&gt;();                     numbers.add(1);                     numbers.add(2);                     numbers.add(3);                 }             }         }     }      // without synchronization     static {         numbers = new LinkedList&lt;Integer&gt;();         numbers.add(1);         numbers.add(2);         numbers.add(3);     }      public Foo() {}      public isInList(int num) {         return numbers.contains(num);     } } </code></pre>