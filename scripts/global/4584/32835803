<p>I accidenatlly forget to write braces while initializing array:</p>  <pre><code>struct A {     A() { std::cout &lt;&lt; "A()" &lt;&lt; std::endl; }     A(int a) { std::cout &lt;&lt; "A(" &lt;&lt; a &lt;&lt; ")" &lt;&lt; std::endl; } };  int main() {     A a[3] =  A(2), A(3); } </code></pre>  <p><a href="http://coliru.stacked-crooked.com/a/a900da63cce76ac1"><strong>DEMO</strong></a></p>  <p>Output:</p>  <pre><code>A(2) A(2) A(2) A(3) </code></pre>  <p>And this's correct, as far as I got. <code>N4257::12.6.1/2</code>:</p>  <blockquote>   <p><strong><em>Braces can be elided in the initializer-list for any aggregate</em></strong>, even   if the aggregate has members of a class type with user-defined type   conversions</p> </blockquote>  <p>But braced initiliazation has the different side-effect:</p>  <pre><code>struct A {     A() { std::cout &lt;&lt; "A()" &lt;&lt; std::endl; }     A(int a) { std::cout &lt;&lt; "A(" &lt;&lt; a &lt;&lt; ")" &lt;&lt; std::endl; } };  int main() {     A a[3] = { A(2), A(3) }; } </code></pre>  <p><a href="http://coliru.stacked-crooked.com/a/66a22f2425547d7f"><strong>DEMO</strong></a></p>  <p>Output:</p>  <pre><code>A(2) A(3) A() </code></pre>  <p>Couldn't you explain that difference?</p>