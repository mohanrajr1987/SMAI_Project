<p>I'm kind of new to C++ and encountered this desgin problem.</p>  <p>Let's say I have these classes:</p>  <pre><code>class Dependee { public:     // Constructors     initialize(); };  class Depender { public:     Depender(Dependee dependee);     // Other constructors and stuff };  class World { public:     World(); private:     Dependee dependee_;     Depender depender_; }; </code></pre>  <p>Now, depender depends on dependee for construction. But dependee not only has to be constructed prior to depender's construction, but also initialized using initialize().</p>  <p>There are several ways to solve this, the two I am considering is a static method inside the World class</p>  <pre><code>static Dependee initDependee() {     Dependee dependee();     if(!dependee.initialize())     {         throw SomeException();     }      return dependee; } </code></pre>  <p>and then doing:</p>  <pre><code>World::World(): dependee_(initDependee()), depender_(dependee_) {}     </code></pre>  <p>or just initializing both using the default constructors, and doing the rest of the work in World's constructor</p>  <pre><code>World::World() : dependee_(), depender_() {     Dependee dependee();     dependee.initialize();      dependee_ = dependee;      Depender depender(dependee);      depender_ = depender; } </code></pre>  <p>Obvoiusly I am open to any other solution, but consider that Dependee comes from an outside library. </p>  <p>PS: Is there are any good books on proper C++ design and coding conventions that you would recommend?</p>  <p>Thanks!</p>