<p>I have a simple example where I create an <code>std::array</code> of some number of Foo elements:</p>  <pre><code>struct Foo {      Foo(int bar=0) : m_bar(bar)       {        // Code depending on the value of bar      }       int m_bar; };  const unsigned int num = // get array size  std::array&lt;Foo, num&gt; fooArr; </code></pre>  <p>When I use the initialiser list in the constructor <code>m_bar(bar)</code> this sets all the <code>Foo.m_bar</code> to <code>0</code> (as this is the default constructor parameter value). If I don't do that then it is full with garbage values.</p>  <p>My question is how do I pass in another value different from the default one to the constructor of every element in the array without knowing the array size before hand?</p>  <p>I tried using a init list when creating the array, like so: <code>std::array&lt;Foo, 5&gt; fooArr{3}</code> but that only sets the first element's <code>m_bar</code> to <code>3</code>.</p>