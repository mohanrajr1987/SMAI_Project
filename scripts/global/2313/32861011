<h1>Situation</h1>  <p>I have a mixin like this:</p>  <pre><code>@mixin flexbox($type: null, $direction: null) {     @if $type == null or $type == 'flex' {         (...)         display: flex;     }      @if $type == 'inline-flex' {         (...)         display: inline-flex;     }     @if $direction == null or $direction == 'row' {         (...)         flex-direction: row;     }      @if $direction == 'column' {         (...)         flex-direction: column;     } } </code></pre>  <p>Which I can now use like so:</p>  <pre><code>@include flexbox(inline-flex, column); </code></pre>  <p>However I <strong>can't</strong> do this:</p>  <pre><code>@include flexbox(column); </code></pre>  <p>Because now the mixin treats the "column" as an argument for "$direction".</p>  <p>Is there a way around that? <br> A way to make my arguments independent of their order?</p>  <p>E.g. I'd like to be able to use the mixin in any of these ways:</p>  <pre><code>@include flexbox(column);  @include flexbox(column, inline-flex);  @include flexbox(row, flex);  @include flexbox(row); </code></pre>  <p>Currently none of those are working, because of the arguments need to be in a specific order.</p>  <h1>Why not use named arguments?</h1>  <p><strong>Update: I accept this solution as the best possible way.</strong></p>  <p>As suggested by Hashem Qolami below "named arguments" would be an option to solve this:</p>  <pre><code>@include flexbox($direction: column); </code></pre>  <p>This is a perfectly acceptable solution. Thanks for that.</p>  <p>However I'm working on a framework that will be used by multiple people in my company. <br> Therefore I'd like to keep all mixins as foolproof and easy to use as possible.</p>  <p>In that case this:</p>  <pre><code>@include flexbox(column);  </code></pre>  <p>Would be preferred over this:</p>  <pre><code>@include flexbox($direction: column); </code></pre>  <p>Because other devs know what flexbox can do, but not how I named my arguments.</p>  <p>It's a small thing, really. But the use of named arguments would mean that everyone would have to learn the argument-names of every mixin available. </p>