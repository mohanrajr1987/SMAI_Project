<p>The error is with:</p>  <pre><code>estimate1 = leibnizPi (nTerms, estimatedV1); </code></pre>  <p>&amp;</p>  <pre><code>estimate2 = wallisPi (nTerms, estimatedValue2); </code></pre>  <p>I'm thinking it has to do with the way it is set up to reference the estimatedValue in the function, or the way it is being called is incorrect.</p>  <p>Any help is much appreciated!</p>  <p>NOTE: HAS TO REMAIN VOID. Sorry about that.</p>  <pre><code>#include &lt;iostream&gt; #include &lt;cmath&gt;  // // This program will be used in the second assignment (functions) //  using namespace std;  const double PI = 3.14159265358979323846;   void leibnizPi (int numberofterms, double &amp;estimatedValue1 ) {      double sign = 1.0;     double sum = 0.0;      for (int i = 0; i &lt; numberofterms; ++i) {         double denominator = 2.0 * i + 1.0;         double term = 4.0 / denominator;         sum = sum + sign * term;         sign = -sign;     }     estimatedValue1 = sum; }  void wallisPi (int numberofterms, double &amp;estimatedValue2) {     double product = 1.0;      for (int i = 1; i &lt; numberofterms; ++i) {         double r = 2.0*i;         r = r*r;         double term = r/(r-1.0);         product = product * term;     }     estimatedValue2 = 2.0 * product;  }   double abstractError (double computedValue);  double relativeError (double computedValue);  int main (int argc, char** argv) {      double estimate1 = 0;      double absErr1 = 0;      double relErr1 = 0;      double estimate2 = 0;      double absErr2 = 0;      double relErr2 = 0;      double estimatedV1 = 0;      double estimatedValue2 = 0;      for (int nTerms = 1; nTerms &lt; 100001; nTerms = nTerms * 4) {         // Estimate Pi by two different methods          // Leibniz' sum         estimate1 =  leibnizPi (nTerms, estimatedV1);         absErr1 =   abstractError (estimate1);         relErr1 =   relativeError (estimate1);          // Wallis' product         estimate2 =  wallisPi (nTerms, estimatedValue2);         absErr2 =  abstractError (estimate2);         relErr2 =  relativeError (estimate2);          cout &lt;&lt; "After " &lt;&lt; nTerms &lt;&lt; " terms\n";         cout &lt;&lt; "Leibniz' estimate: "&lt;&lt; estimate1 &lt;&lt; "\n";         cout &lt;&lt; "Absolute error: " &lt;&lt; absErr1              &lt;&lt; "\tRelative error: " &lt;&lt; relErr1              &lt;&lt; "\n";          cout &lt;&lt; "Wallis' estimate: "&lt;&lt; estimate2 &lt;&lt; "\n";         cout &lt;&lt; "Absolute error: " &lt;&lt; absErr2              &lt;&lt; "\tRelative error: " &lt;&lt; relErr2              &lt;&lt; "\n";          cout &lt;&lt; endl;     }     return 0;  }  double abstractFunction (double computedValue) {     double abstractError = abs(computedValue - PI);     return abstractError; }  double relativeFunction (double computedValue){     double relativeError1 = abs(computedValue - PI) / PI;     return relativeError1; } </code></pre>