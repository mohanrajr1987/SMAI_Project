<p>I have written an interceptor to access a call data when there is an incoming call. I listen to state change action to decide whether it is a missed call or received call. I have written a code to do things whenever call <b>ends</b>. </p>  <pre><code>public class PhoneStateBroadcastReceiver extends BroadcastReceiver {    public static final String TAG = "PHONE STATE";   private static String mLastState = TelephonyManager.CALL_STATE_IDLE;    @Override   public void onReceive(Context context, Intent intent) {     String state = intent.getStringExtra(TelephonyManager.EXTRA_STATE);       if (!state.equals(mLastState)) {       mLastState = state;       Log.e(TAG, state);         return;     }     //Code to do stuff based on last state and state   }   } </code></pre>  <p>The code works fine. But I noticed my app failed to process some of the calls. As this issue was hard to reproduce, I monitored my app for a whole day based on my call activity. When I debugged the issue, I found out that <code>mLastState</code> wasn't changing in such cases. It was still <code>IDLE</code> in case when incoming call ends where it should have been <code>RINGING</code> or <code>OFFHOOK</code>. The reason for that was my app was getting killed and <code>mLastState</code> was being reinitialized. So I was losing the last state. </p>  <p>How to handle this situation? First solution came to my mind was to persist a <code>mLastState</code> to a sharedpreference. Is there any other way to handle this?</p>