<p>I am using jdk's HttpServer for an application of mines as I am avoiding using an application server. I want to parse the raw post http request sent by a browser and get both the text and the file parameters. all I have is the raw request given by my HttpExchange (httpExchange.getRequestBody()). Here is my http handler:</p>  <pre><code>static class UploadHandler implements HttpHandler {     public void handle(HttpExchange httpExchange) throws IOException {         httpExchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, 0);          OutputStream os = httpExchange.getResponseBody();          String out = "start\n";         out += "headers:\n";          Headers hs = httpExchange.getRequestHeaders();           for (int i = 0; i &lt; hs.keySet().size(); i++) {             out += hs.keySet().toArray()[i] + " : " + hs.get(hs.keySet().toArray()[i]) + "\n";         }          out += "attributes:\n";         for (int i = 0; i &lt; httpExchange.getHttpContext().getAttributes().keySet().size(); i++) {             out += httpExchange.getHttpContext().getAttributes().keySet().toArray()[0] + " : " + httpExchange.getHttpContext().getAttributes().get(httpExchange.getHttpContext().getAttributes().keySet().toArray()[0]) + "\n";         }           out += "body:\n";          StringWriter writer = new StringWriter();         IOUtils.copy(httpExchange.getRequestBody(), writer, "UTF-8");          out += writer.toString();          //System.out.println(body);         try {              OHttpRequest oHttpRequest = new OHttpRequest(writer.toString());              String json = new Gson().toJson(oHttpRequest);               //out += parameters.toString();              json = writer.toString();// + "\n\n\n" + json;              os.write(json.getBytes());         } catch (Exception e) {             e.printStackTrace();         }         //os.write(writer.toString().getBytes());         os.close();     } } </code></pre>  <p>and here is my class:</p>  <pre><code>class OHttpRequest {     public String divider;     private List&lt;Part&gt; parts;     public List&lt;Parameter&gt; parameters;      private String raw;      public OHttpRequest(String raw) {         this.raw = raw;         this.init();     }      private void init() {         String line;         //raw = raw.replace("\r\n","\n");         Scanner rawScanner = new Scanner(raw);          this.divider = rawScanner.nextLine();          List&lt;String&gt; partsS = new ArrayList&lt;&gt;();         partsS.addAll(Arrays.asList(raw.split(this.divider)));         partsS.remove(partsS.get(0));         partsS.remove(partsS.size() - 1);         this.parts = new ArrayList&lt;&gt;();         for (int i = 0; i &lt; partsS.size(); i++) {             //System.out.println(partsS.get(i));             OHttpRequest.Part part = new OHttpRequest.Part();              part.content = partsS.get(i);             //if(part.content.isEmpty()) continue;             Scanner partScanner = new Scanner(part.content);             part.lines = new ArrayList&lt;&gt;();             while (partScanner.hasNext()) {                 part.lines.add(partScanner.nextLine());              }              this.parts.add(part);         }           this.parameters = new ArrayList&lt;&gt;();         for (int i = 0; i &lt; this.parts.size(); i++) {             OHttpRequest.Part part = this.parts.get(i);             String[] subParts = part.lines.get(0).split(";");             OHttpRequest.Parameter parameter = new OHttpRequest.Parameter();             line = part.lines.get(1);             parameter.name = line.split(";")[1].split("=")[1];             parameter.name = parameter.name.substring(1, parameter.name.length() - 1);             parameter.content = "";             if (line.split(";").length &gt;= 3) {                 parameter.isFile = true;                 parameter.fileName = line.split(";")[2].split("=")[1];                 parameter.fileName = parameter.fileName.substring(1, parameter.fileName.length() - 1);                 parameter.contentType = part.lines.get(2).split(":")[1].trim();                 parameter.content = "";                 for (int j = 4; j &lt; part.lines.size(); j++) {                     parameter.content += part.lines.get(j) + System.getProperty("line.separator");                 }             } else {                 for (int j = 3; j &lt; part.lines.size(); j++) {                     parameter.content += part.lines.get(j);// + System.getProperty("line.separator");                 }             }              parameter.content = parameter.content.substring(0, parameter.content.length() - 1);               if (parameter.isFile) {                 try {                     InputStream streamS = new ByteArrayInputStream(parameter.content.getBytes(StandardCharsets.UTF_8));                     StringReader sr = new StringReader(parameter.content);                     String path = "C:/Users/Mohammed/tmp/" + parameter.fileName + "." + Parameters.FileUtil.getExtensionFromMime(parameter.contentType);                     FileOutputStream stream = new FileOutputStream(path);                      stream.write(parameter.content.getBytes(StandardCharsets.UTF_8));                      stream.close();                     streamS.close();                      //*/                 } catch (Exception e) {                 }             }             this.parameters.add(parameter);         }          this.raw = null;         this.parts = null;     }       static class Parameter {         boolean isFile;         public String name;         public String fileName;         public String contentType;         public String content;     }      static class Part {         public String content = "";         public List&lt;String&gt; lines;     } } </code></pre>  <p>The problem is that the output file isn't the same as the file uploaded</p>