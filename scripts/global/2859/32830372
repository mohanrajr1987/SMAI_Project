<p>I have the following problem. Log in aspect with the resources of the controller are always null. This is because I put "final" of the controller methods. How I can fix it without removing the "final"?</p>  <p>My code:</p>  <p>Aplication context:</p>  <pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;beans xmlns="http://www.springframework.org/schema/beans"     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"     xmlns:p="http://www.springframework.org/schema/p"     xmlns:context="http://www.springframework.org/schema/context"     xmlns:mvc="http://www.springframework.org/schema/mvc"     xmlns:aop="http://www.springframework.org/schema/aop"     ....      &lt;cache:annotation-driven /&gt;      &lt;mvc:annotation-driven /&gt;      &lt;!-- AOP --&gt;     &lt;aop:aspectj-autoproxy /&gt;     &lt;bean id="logAspect" class="es.xxx.xxx.xxx.aop.LoggingAspect" /&gt;      &lt;!-- Scan de paquetes por anotaciones Spring --&gt;     &lt;context:component-scan base-package="es.xxx" /&gt;     .... &lt;/beans&gt; </code></pre>  <p>Controller:</p>  <pre><code>@Controller("documentController") @RequestMapping(value = "/documentation")     public class DocumentController {          @Resource         private FileService fileService;          @Resource         private FooService fooService;          @Resource         private MessageSource messageSource;          @RequestMapping("/foo.html")         public final String foo(Params...) {             ...             //here are null and throw null pointer exception             fileService.fooMethod();             fooService.fooMethod();             messageResource.fooMethod();             ...              return view;         }          ...     } </code></pre>  <p>Aspect log:</p>  <pre><code>@Aspect public class LoggingAspect {      @Around("execution(* es.xxx.xxx.xxx.controller.*.*(..))")     public Object aroundController(ProceedingJoinPoint joinPoint) throws Throwable {         Logger logger = LogManager.getLogger(joinPoint.getTarget().getClass().getName());         logger.debug("...");         return joinPoint.proceed();     }      @AfterReturning(pointcut="execution(* es.xxx.xxx.xxx.controller.*.*(..))", returning="retVal")     public void afterReturningController(JoinPoint joinPoint, Object retVal) {         Logger logger = LogManager.getLogger(joinPoint.getTarget().getClass().getName());         logger.debug("...");     }      @AfterThrowing(pointcut="execution(* es.xxx.xxx.xxx.controller.*.*(..))", throwing="exception")     public void afterThrowingController(JoinPoint joinPoint, Exception exception) {         Logger logger = LogManager.getLogger(joinPoint.getTarget().getClass().getName());         logger.debug("...", exception);     }      @Around("execution(* es.xxx.xxx.xxx.service.impl.*.*(..))")     public Object aroundService(ProceedingJoinPoint joinPoint) throws Throwable {         Logger logger = LogManager.getLogger(joinPoint.getTarget().getClass().getName());         logger.debug("...");         return joinPoint.proceed();     }      @AfterReturning(pointcut="execution(* es.xxx.xxx.xxx.xxx.impl.*.*(..))", returning="retVal")     public void afterReturningService(JoinPoint joinPoint, Object retVal) {         Logger logger = LogManager.getLogger(joinPoint.getTarget().getClass().getName());         logger.debug("...");     }      @AfterThrowing(pointcut="execution(* es.xxx.xxx.xxx.service.impl.*.*(..))", throwing="exception")     public void afterThrowingService(JoinPoint joinPoint, Exception exception) {         Logger logger = LogManager.getLogger(joinPoint.getTarget().getClass().getName());         logger.debug("...", exception);     } } </code></pre>