<p>I have built a Java application using Maven.  It is packaged as an executable jar using the Maven Shade plugin.  This application does several things - one of those is to upload data to a Hadoop cluster.  I execute the program using the following:</p>  <pre><code>$ hadoop jar &lt;app_name&gt;.jar &lt;app_arg1&gt; &lt;app_arg2&gt; ... </code></pre>  <p><strong>My application uses SLF4J with the Log4J bindings for logging - <em>and so does Hadoop</em>.</strong></p>  <p>When using the <code>hadoop jar</code> command, Hadoop's own Log4J configuration file overrides my application's Log4J configuration file.</p>  <p><strong><em>How can I prevent my application's Log4J configuration file from being overriden?</em></strong></p>  <p><em>NOTES:</em></p>  <ul> <li>Relevant dependencies: <code>hadoop-core:1.2.1</code>, <code>slf4j-api:1.7.12</code>, and <code>slf4j-log4j12:1.7.12</code>.</li> <li>I'm using the <code>hadoop jar</code> command, instead of <code>java -jar</code>.  My application code that interacts with the Hadoop cluster only works when using the <code>hadoop jar</code> command.  I've outlined this issue in <a href="http://stackoverflow.com/questions/32399075/upload-data-to-hdfs-with-java-api">a previous SO question</a>.</li> </ul>  <p><strong>EDIT 1: (10/02/2015)</strong></p>  <p>I've done a few things.</p>  <p>First, I changed the name of my Log4J configuration file to avoid the name collision with the the default <code>log4j.properties</code> file that Hadoop uses:</p>  <pre><code>log4j-&lt;app_name&gt;.properties </code></pre>  <p>Second, I set the the <code>HADOOP_OPTS</code> environment variable to tell Log4J what the name of my configuration file would be:</p>  <pre><code>HADOOP_OPTS=-Dlog4j.configurationi=log4j-&lt;app_name&gt;.properties </code></pre>  <p>Third, I set the <code>HADOOP_CLASSPATH</code> environment variable to ensure my configuration file that is packaged within the uber jar is picked up by the <code>hadoop jar</code> command:</p>  <pre><code>HADOOP_CLASSPATH=/absolute/path/to/&lt;app_name&gt;.jar </code></pre>  <p>With these changes, my application now uses it's own Log4J configuration file as intended.  Feels like a hack (as I would have preferred to use the <code>java -jar</code> command), but it resolved my issue.</p>