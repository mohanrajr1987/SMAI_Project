<p>Is there any way in Python to specify a variable (unknown) number of arguments in a parent class method and the actual (real) arguments in its child classes without getting a warning? Here it goes an example to make me understand (I'm using Python 3.5):</p>  <pre><code>import abc  class SuperClass(metaclass=abc.ABCMeta):     @abc.abstractmethod     def method(self, *args):  class SubClass1(SuperClass):     def method(self, one, two, three):  # &lt;-- I get a warning here         # Stuff  class SubClass2(SuperClass):     def method(self, *args):         # Stuff </code></pre>  <p>I cannot figure out how to make this code warning-free. Warning I'm getting is:</p>  <pre><code>Signature of method 'SubClass1.method() does not match signature of base method in class 'SuperClass' </code></pre>  <p><strong>Updated</strong></p>  <p>I'm getting the warning only in my IDE, Pycharm 4.5, caused by the inspection <code>Python-&gt;"Class must implement all abstract methods".</code></p>