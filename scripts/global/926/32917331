<p>I have two interfaces that looks like this:</p>  <pre><code>class IThing {     ...     virtual IHandle* getHandle(void) = 0;     virtual void useHandle(IHandle *handle) = 0; };  class IHandle { ... } </code></pre>  <p>I want users to be able to implement IThing and IHandle.  For example, if a user creates <code>MyThing</code> and <code>MyHandle</code>, <code>getHandle</code> should return a pointer to a <code>MyHandle</code>, which the user can later use in <code>useHandle</code>.</p>  <p>This will work, but I don't like the design because multiple implementations of <code>IHandle</code> can get mixed up between implementations of <code>IThing</code>.  Also in <code>useHandle</code>, users will need to explicitly downcast to their implementation of <code>IHandle</code>.  Is there a more type-safe way to do this?</p>