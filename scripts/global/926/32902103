<p>I have a <strong>BaseModel</strong> class:  </p>  <pre><code>class BaseModel(models.Model):     title = models.CharField(max_length=250, blank=True, null=True)     class Meta:         abstract = True </code></pre>  <p>Then I have mutliple model classes that extend such class e.g.:  </p>  <pre><code>class Article(BaseModel):     slug = models.SlugField(max_length=250, default=timezone.now, unique=True) </code></pre>  <p>My goal is to have a field in a JSON object returned through my webservices to  indicate the type of the object (so that the client applications can easily tell an Article from a e-commerce Product). Something like the following:  </p>  <pre><code>{    "id": 1,    "object_type: "article",    "title": "some article",    "slug": "some-article" } </code></pre>  <p>I imagine the there could be a <strong>BaseModelSerializer</strong> class similar to the following:  </p>  <pre><code>class BaseModelSerializer(serializers.ModelSerializer):     object_type = self.__class__.__name__ # ??? how to get the name/ label of the child class? </code></pre>  <p>Then I can have a <strong>ArticleSerializer</strong> extending the <strong>BaseModelSerializer</strong> like the following:  </p>  <pre><code>class ArticleSerializer(BaseModelSerializer):     class Meta:         model = Article </code></pre>  <p>I would be happy if this could be achieved through modifying the <strong>BaseModel</strong> class too. Something like the following?  </p>  <pre><code>class BaseModel(models.Model):     title = models.CharField(max_length=250, blank=True, null=True)     object_type = self.__class__.__name__ # ??? how to get the name/ label of the child class?     class Meta:         abstract = True </code></pre>