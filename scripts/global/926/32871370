<p>I have a question concerning multiple inheritance. In my project, I want to add support for dll plugins and need an interface for that reason. In the application, I create objects like players and visual objects and hand them to the dll interface. the dll only has the ability to interpret a character pointer as ICharacter for example. My problem occurs, within the application itself:</p>  <pre><code>class IGameObject {     virtual const std::string &amp;getName(void) const = 0;     virtual void setName(const std::string &amp;name) = 0; };  class IVob : public virtual IGameObject {     virtual const Math::Vec3 &amp;getPosition(void) const = 0;     virtual void setPosition(const Math::Vec3 &amp;pos) = 0;     // more pure virtual functions };  class ICharacter : public virtual IVob {     // pure virtual functions };  class GameObject : public virtual IGameObject {     GameObject();      virtual const std::string &amp;getName(void) const override;     virtual void setName(const std::string &amp;name) override;     // more virtual function override };  class Vob : public virtual IVob, public GameObject {     Vob(VobType type);      virtual const Math::Vec3 &amp;getPosition(void) const override;     virtual void setPosition(const Math::Vec3 &amp;pos) override;     // more virtual function override };  class Character : public ICharacter, public Vob {     Character();      // virtual function override }; </code></pre>  <p>Suppose character is of ICharacter</p>  <p>Now, if I want to call <code>character-&gt;setPosition(pos);</code> it may crash, since it comes as ICharacter pointer. If I <code>reinterpret_cast&lt;Character*&gt;(character)-&gt;setPosition(pos);</code> it, then it may work properly. It seems, as if the vtables got mixed up, but I can't see where that happens. If I reorder the inheritance it may – in some constellation – work.</p>  <p>Process looks like:</p>  <p>Creation (<code>Character*</code>) -> dll interface (<code>reinterpret_cast&lt;ICharacter*&gt;</code>) -> call functions in dll interface, which are 100% part of the original character</p>  <p>If passed back to the application:</p>  <p>dll interface (<code>ICharacter*</code>) -> application (<code>reinterpret_cast&lt;Character *&gt;</code>)</p>  <p>What do I miss?</p>  <p>Thanks in advance</p>  <p>Edit: In fact did I try to <code>dynamic_cast</code>, but that didn't help. Now it crashes in an even earlier call.</p>