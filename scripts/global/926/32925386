<p>I am working on my first real Rails 4 app and I have run into a problem with my design. </p>  <p>Currently I have a "Service" model which started out with attributes such as name, online_status, ip, dns_name, port, and service_type. This model has evolved to include many methods and attributes for specific service_types (like auth_tokens, etc.) and thus it is very overgrown. The columns added to the database to accommodate the needs of the different types of services make this model act like a ghetto version of STI without separate classes/models.</p>  <p>The Service model also has methods such as ping() which is used to determine the online_status. I believe the types of services are different enough to warrant their own separate tables because each service seems to have many unique properties and methods.</p>  <p>Example:</p>  <p>A generic service has: name, ip, dns_name, online_status, etc...</p>  <p>A specific service such as Plex will have: name, ip, dns_name, online_status, username, password, auth_token, etc... </p>  <p>The issue, is that I would like to be able to access the more specific types of services from their parent Service class. So when I create a view, I can loop through all the generic services and the more specific services as if they were all the same type of service (or at least be able to access all services in some simple way without looping through each type and appending them). </p>  <p>I also need to access the specific types of models on their own, so doing something like @couchpotatos.each in my view will only go through the instances of the Couchpotato class.</p>  <p>Controllers play into this confusion too since I don't exactly know how to have a single page display all these different types of models from the same controller.</p>