<p>I am working on a problem of implementing a Queue (with push and pop) with two Stacks. This is my implementation.</p>  <p>The theory behind my solution is driven by the fact that I have two stacks <code>s1</code> and <code>s2</code>. </p>  <ol> <li><p>If <code>s1</code> contains items, and <code>s2</code> is empty, we can keep pushing items from <code>s1</code> to <code>s2</code> until we can find the first item pushed to <code>s1</code>. </p></li> <li><p>If <code>s1</code> is empty and <code>s2</code> has items, we can simply pop <code>s2</code> to retrieve the first item.</p></li> <li><p>If both <code>s1</code> and <code>s2</code> has items, it means that <code>s1</code> contains the newest items and <code>s2</code> contains the oldest items, therefore we can pop <code>s2</code>.</p></li> </ol>  <p>For all enqueue operations, we push items to <code>s1</code>. We can assume <code>push</code> and <code>pop</code> are implemented. </p>  <p>This is my implementation:</p>  <pre><code>public class MyQueue {     private Stack&lt;T&gt;() stackOne;     private Stack&lt;T&gt;() stackTwo;      public MyQueue() {         Stack&lt;T&gt; stackOne = new Stack&lt;T&gt;();         Stack&lt;T&gt; stackTwo = new Stack&lt;T&gt;();     }      public void enqueue(Object item) {         stackOne.push(item);     }      public OBject dequeue() {         // nothing in both s1 and s2         if(stackOne.isEmpty() &amp;&amp; stackTwo.isEmpty()) {             return null;         }          // s1 has items but s2 is empty         if(!stackOne.isEmpty() &amp;&amp; stackTwo.isEmpty()) {             while(!stackOne.isEmpty) {                 stackTwo.push(stackOne.pop());             }             return stackTwo.pop();         } elseif(!stackOne.isEmpty() &amp;&amp; !stackTwo.isEmpty()) { // both s1 and s2 has items             return stackTwo.pop();         } else {             // s1 is empty but s2 has items             return s2.pop();         }     } } </code></pre>  <p>I am wondering if there are any things wrong with this implementation?</p>