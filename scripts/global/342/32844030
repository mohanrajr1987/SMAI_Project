<p>I want to share send data from multiple worker threads to one thread, have that thread process all the data received and send data to the multiple worker threads, where each thread receives different data. </p>  <p>I want all of the threads to run over a long time. </p>  <p>I kind of want to use queues and thought about a something like this: </p>  <pre><code>from threading import Thread import Queue import time import random  nr_of_workers = 3  class SyncData(Thread):      def __init__(self, q_in, q_out):         Thread.__init__(self)         self.setDaemon(True)         self.q_in = q_in         self.q_out = q_out         self.start()      def run(self):         for j in range(4):             msg_list = []             for i in range(nr_of_workers):                 msg_list.append( self.q_in.get() )                 self.q_in.task_done()             for i in range(nr_of_workers):                 addr = msg_list[i][0]                 print "addr " , addr                 message = msg_list[i][1]                 message_out = "message from thread addr " + str(addr) + " " + message                  self.q_out.put(( addr, message_out ))             time.sleep(2.0)  class ThreadWorker(Thread):      def __init__(self, q_in, q_out, addr):         Thread.__init__(self)         self.addr = addr         self.q_in = q_in         self.q_out = q_out         self.setDaemon(True)         self.start()       def run(self):         for j in range(4):             self.q_out.put((self.addr, "hello from thread"))             recv_msg = self.q_in.get()             self.q_in.task_done()             print recv_msg[1]   q_sync2workers = Queue.Queue() q_workers2sync = Queue.Queue()  sync = SyncData(q_workers2sync, q_sync2workers) threads = [] for i in range(nr_of_workers):     threads.append(ThreadWorker(q_sync2workers, q_workers2sync, i))  while True:     pass </code></pre>  <p>where each ThreadWorker sends data over a queue, and receives data over a different queue. The only problem is that I want the SyncData object to send different data to different ThreadWorker, kind of address each part sent over the queue with an id, so that each ThreadWorker only gets the element in the queue specified for that specific ThreadWorker. </p>  <p>I do not really want to have one queue for each ThreadWorker because my real application will be adding and removing ThreadWorkers during runtime.</p>  <p>Any tips on good strategy, either with using Queues, or a more good-practice strategy?</p>