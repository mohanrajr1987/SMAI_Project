<p>The code I wrote below is supposed to output something along the lines of this:</p>  <pre><code>&lt;Floor(Thread-3, started 44660)&gt; &lt;Bank(Thread-1, started 43356)&gt; shutting down &lt;Floor(Thread-4, started 44108)&gt; received a message: shutting down (0, 'UP') &lt;Bank(Thread-1, started 43356)&gt; received a message: (1, 'DOWN') &lt;Bank(Thread-1, started 43356)&gt; shutting down &lt;Bank(Thread-2, started 27800)&gt; shutting down </code></pre>  <p>However, the formatting of the output seems inconsistent at times. For example:</p>  <pre><code>&lt;Floor(Thread-3, started 27076)&gt; &lt;Bank(Thread-1, started 44608)&gt;shutting down &lt;Floor(Thread-4, started 28772)&gt;received a message:  (shutting down0, 'UP')  &lt;Bank(Thread-1, started 44608)&gt; received a message: (1, 'DOWN') &lt;Bank(Thread-1, started 44608)&gt; shutting down &lt;Bank(Thread-2, started 41480)&gt; shutting down </code></pre>  <p>Consistent data is important in most programs. Why is this output inconsistent and how do I prevent it?</p>  <pre><code>import threading import Queue  banks = [] floors = []  class Bank(threading.Thread):     def __init__(self):         threading.Thread.__init__(self)         self.mailbox = Queue.Queue()         banks.append(self.mailbox)      def run(self):         while True:             data = self.mailbox.get()             if data == 'shutdown':                 print self, 'shutting down'                 return             print self, 'received a message:', data      def stop(self):         banks.remove(self.mailbox)         self.mailbox.put('shutdown')         self.join()  class Floor(threading.Thread):     def __init__(self, number = 0):         threading.Thread.__init__(self)         self.mailbox = Queue.Queue()         floors.append(self.mailbox)         self.number = number      def run(self):         while True:             data = self.mailbox.get()             if data == 'shutdown':                 print self, 'shutting down'                 return             print self, 'received a message:', data      def stop(self):         floors.remove(self.mailbox)         self.mailbox.put('shutdown')         self.join()      def call(self, data):         banks[0].put((self.number, data))  b0 = Bank() b1 = Bank() b0.start() b1.start() f0 = Floor(0) f1 = Floor(1) f0.start() f1.start() f0.call('UP') f1.call('DOWN') f0.stop() f1.stop() b0.stop() b1.stop() </code></pre>