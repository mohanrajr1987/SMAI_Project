<p>Like a previous problem I had earlier, I am trying to create a breadth-first search algorithm that takes a graph and outputs the vertex visit order. It takes an adjacency matrix (representing the graph) as its input and here is what I have so far.</p>  <pre><code>import sys import Queue  # Input has to be adjacency matrix or list graphAL2 = {0 : [1,2,3],         1 : [0,3,4],         2 : [0,4,5],         3 : [0,1,5],         4 : [1,2],         5 : [2,3] }  # NEED TO FIX: # - Final graphAL2v print is only displaying key values as 1, not iterating # through graph and visiting each vertex  def main():     count = 0     graphAL2v = {}      for key, value in graphAL2.items():         graphAL2v[key] = 0      print(graphAL2v)      for key in graphAL2v: # each vertex v in V         if graphAL2v[key] == 0: # is marked with 0             bfs(key, count, graphAL2, graphAL2v)     print(graphAL2v)  def bfs(v, count, graphal, graphv):     count = count + 1     print('Visiting', v)      # Mark v with count and initialize queue with v     graphv[v] = count     visited = Queue.Queue()      while not visited.empty(): #queue not empty:         print('queue is not empty')         for element in graphal[v]: # each vertex w in V adjacent to front vertex             if element == 0:                 count = count + 1                 # mark w with count                 graphal[v] = count                 visited.put()         visited.get()  if __name__ == '__main__':     sys.exit(main()) </code></pre>  <p>The problem that I am running into is that my output</p>  <pre><code>{0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0} ('Visiting', 0) ('Visiting', 1) ('Visiting', 2) ('Visiting', 3) ('Visiting', 4) ('Visiting', 5) {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1} </code></pre>  <p>displays the visit order as 1 for all vertices in the list when it should be displaying the visit order as a different number for each vertex as it traverses the "graph." I believe that this error is stemming from within the while loop of the bfs() function. Any suggestions for trying to fix the code so I can achieve the desired output? I'm also not that familiar with queues in Python so any help is appreciated.</p>