<p>I am working with pyQT, QGIS and I am threading a task at the end of which I want to open a messagebox saying that the task is over. In order to do so I need to send a message to the main thread when the second thread is terminated. I would not like to use the Qthread class as I have already used it before and I found it a bit hard to debug, so I set up a threading.Thread class running a function in a separate thread which is fed by a queue. Using q.join I wait for the thread to terminate (daemon is set to True) and print the message box. </p>  <p>The problem is that q.join() makes the main user interface hang and if I remove it the code goes straight to the messagebox printing that the background task is over even if it is executing in background.</p>  <p>Now, I think I did not quite well understand how queue works and if it is the appropriate solution to my problem, any other suggestions are welcomed, but I would tend to avoid pyQtThread. Also, would it be possible to send messages of the task while in progress from the second thread to the main one, just using standard Pyhton?</p>  <p>Here's the code:</p>  <pre><code>def worker(self):     queue = Queue()     export_path = self.export_lsg.ui.fileLineEdit.text()     inc_asd = self.export_lsg.ui.asdCheckBox.isChecked()     inc_clsd = self.export_lsg.ui.closedStreetsCheckBox.isChecked()     print "Start Thread"     t = Thread(target=self.submit_export,args=(queue,export_path,inc_asd,inc_clsd))     t.daemon = True     t.start()     queue.put(1)     queue.join()     QMessageBox.information(None,"Application","Task completed")  def submit_export(self,queue,export_path, inc_asd, inc_clsd):     queue.get()     export = ExportLSG(export_path, inc_asd, inc_clsd, self.org, self.lang, self.code, self.db)     if self.export_lsg.ui.dtf63RadioButton.isChecked() is True:         export.export_to_dtf63()     elif self.export_lsg.ui.dtf71RadioButton.isChecked() is True:         export.export_to_dtf71()     elif self.export_lsg.ui.sdtfRadioButton.isChecked() is True:         export.export_to_sdtf()     queue.task_done() </code></pre>