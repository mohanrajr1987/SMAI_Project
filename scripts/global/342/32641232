<p>I am trying socketserver and  it seems to work well as the python docs said but when I add a queue in the server socket side to store in a queue and I try to get() data from queue in another thread,mainthread (main function) , it appears to be an empty queue, although in the same socketserver if I get() the data it works well.</p>  <pre><code>import os import Queue import socket import threading import SocketServer from time import sleep from reportlab.graphics.widgets.flags import Flag SERVER_HOST = 'localhost' SERVER_PORT = 50000 # tells the kernel to pick up a port dynamically using 0 BUF_SIZE = 1024 ECHO_MSG = 'Hello echo server!' theq = Queue.Queue() oneq = ""#Queue.Queue() flg_data_ready = False gen_count = 0 class WorkerThread(threading.Thread):     def __init__(self, ip, port):         super(WorkerThread,self).__init__()         self.stop_request = threading.Event()         self.ip = ip         self.port = port         self.address=(ip, port)     def run(self):         count =0         s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)         s.connect(self.address)         feed_str =""         while self.stop_request.is_set()==False:             count = count +1             s.send("\rSent from WT:"+str(threading.current_thread())+"::"+str(count))             global oneq, flg_data_ready             s.close()      def join(self, timeout=None):          self.stop_request.set()          super(WorkerThread,self).join(timeout=timeout)  class ForkingServerRequestHandler(SocketServer.BaseRequestHandler):     def handle(self):         # Send the echo back to the client         while True:             data = self.request.recv(BUF_SIZE)             global oneq, flg_data_ready, theq, gen_count              lck = threading.Lock()             lck.acquire()             theq.put(data)             lck.release()             current_process_id = os.getpid()             response = '%s: %s' % (current_process_id, data)              self.request.send(response)           return  class ForkingServer(SocketServer.ForkingMixIn, SocketServer.TCPServer,):     """Nothing to add here, inherited everything necessary from parents"""     pass  def main():     # Launch the server     server = ForkingServer((SERVER_HOST, SERVER_PORT), ForkingServerRequestHandler)     ip, port = server.server_address # Retrieve the port number     server_thread = threading.Thread(target=server.serve_forever) #     server_thread.setDaemon(True) # don't hang on exit     server_thread.start()     print 'Server loop running PID: %s' %os.getpid()     # Launch client(s)     nthreads=3     wkr_thr = [WorkerThread("localhost", 50000) for i in range(nthreads)]      for thr in wkr_thr:         thr.start()     while True:         try:             lck = threading.Lock()             lck.acquire()             global theq              data_deqd = theq.get()             print "GET_Qsize:"+str(theq.qsize())             lck.release()             print "&gt;&gt;&gt;&gt;data_deqd:"+str(data_deqd)         except Queue.Empty, e:             print "QueueEmpty error"+str(e)             pass         except Exception, e:             print "Error reading queue"         else:             print "data_deqd:" , data_deqd       server.shutdown()      server.socket.close()   if __name__ == '__main__':      main() </code></pre>