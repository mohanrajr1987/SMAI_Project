<p>I am setting up two data sources as shown here at <a href="http://docs.spring.io/spring-boot/docs/1.3.0.M2/reference/htmlsingle/#howto-two-datasources" rel="nofollow">http://docs.spring.io/spring-boot/docs/1.3.0.M2/reference/htmlsingle/#howto-two-datasources</a> using spring boot, but when doing so my <code>application.properties</code> shows warnings that for example <code>x.x.username</code> is an unknown property.  This is correct to some extent as <code>javax.sql.DataSource</code> does not contain url, username, password, etc. but the implementation classes do.  I have annotation processor set up and it works fine when working with concrete classes.  </p>  <p>I notice that <code>org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration$NonEmbeddedConfiguration</code> uses both <code>DataSourceProperties</code> and has <code>@ConfigurationProperties</code> annotated on <code>dataSource()</code>.  This would probably get rid of my warnings but what is the point of this.  Isn't it setting the properties twice this way?</p>  <p>Config:</p>  <pre><code>@Bean @Primary @ConfigurationProperties(prefix="datasource.primary") public DataSource primaryDataSource() {     return DataSourceBuilder.create().build(); }  @Bean @ConfigurationProperties(prefix="datasource.secondary") public DataSource secondaryDataSource() {     return DataSourceBuilder.create().build(); } </code></pre>  <p>Properties with warnings:</p>  <pre><code>datasource.primary.url=jdbc:... datasource.primary.username=user datasource.primary.password=password  datasource.secondary.url=jdbc:... datasource.secondary.username=user datasource.secondary.password=password </code></pre>