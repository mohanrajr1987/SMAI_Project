<p>I am using Spring Boot v1.2.5 for creating a REST Application. While uploading images, I have a check for maximum file size , which is provided the property :</p>  <pre><code>multipart.maxFileSize= 128KB </code></pre>  <p>in application.properties. This facility is provided by Spring Boot itself. Now the check is working properly. The question is, how do I handle the exception and return a message to the user that he can understand ?</p>  <p>Update 1----------</p>  <p>I wrote a method within my Controller, where I intend to handle the MultipartException, using <code>@ExceptionHandler</code>. It does not seem to work.</p>  <p>This is my code : </p>  <pre><code>@ExceptionHandler(MultipartException.class) @ResponseStatus(value = HttpStatus.PAYLOAD_TOO_LARGE) public ApplicationErrorDto handleMultipartException(MultipartException exception){     ApplicationErrorDto applicationErrorDto =  new ApplicationErrorDto();     applicationErrorDto.setMessage("File size exceeded");     LOGGER.error("File size exceeded",exception);     return applicationErrorDto; } </code></pre>  <p>Update 2----------</p>  <p>After @luboskrnac pointed it out, I have managed to come up with a solution. We can use <code>ResponseEntityExceptionHandler</code> here to handle this particular case. I believe, we could also have used <code>DefaultHandlerExceptionResolver</code>, but <code>ResponseEntityExceptionHandler</code> will allow us to return a <code>ResponseEntity</code>, as opposed to the former, the methods of which will return <code>ModelAndView</code>. I <strong>have not</strong> tried it though.</p>  <p>This is the final code that I'm using to handle the <code>MultipartException</code> :</p>  <pre><code>@ControllerAdvice public class CustomResponseEntityExceptionHandler extends ResponseEntityExceptionHandler {  private static final Logger LOGGER = Logger.getLogger(CustomResponseEntityExceptionHandler.class);  @ExceptionHandler(MultipartException.class) @ResponseStatus(value = HttpStatus.PAYLOAD_TOO_LARGE) @ResponseBody public ApplicationErrorDto handleMultipartException(MultipartException exception){     ApplicationErrorDto applicationErrorDto =  new ApplicationErrorDto();     applicationErrorDto.setMessage("File size exceeded");     LOGGER.error("File size exceeded",exception);     return applicationErrorDto; } } </code></pre>  <p>I am using Swagger for developing/documenting REST Apis. This is the response upon uploading a file that exceeds the size. <a href="http://i.stack.imgur.com/FpKEK.jpg" rel="nofollow"><img src="http://i.stack.imgur.com/FpKEK.jpg" alt="enter image description here"></a> Thanks.</p>