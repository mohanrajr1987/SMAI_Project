<p>see the info </p>  <p>trationDelegate$BeanPostProcessorChecker : Bean 'dataSource' of type [class com.alibaba.druid.pool.DruidDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)</p>  <p>I looked for some questions in this web ,but I can not understand 。 I use  spring bootI mybatis when I combine them it is wrong.</p>  <pre><code>@Configuration </code></pre>  <p>@MapperScan(basePackages = "w.p.j.dao") public class MybatisConfig {</p>  <pre><code>private Logger logger = LoggerFactory.getLogger(this.getClass().getName()); @Autowired private DruidDataSourceEntity druidDataSourceEntity; @Bean public DataSource dataSource() {     logger.info("------------druidDataSourceEntity------" + druidDataSourceEntity);     //加载配置文件属性     DruidDataSource dataSource = new DruidDataSource();      dataSource.setDriverClassName(druidDataSourceEntity.getDriverClassName());     dataSource.setUsername(druidDataSourceEntity.getUsername());     dataSource.setPassword(druidDataSourceEntity.getPassword());     dataSource.setUrl(druidDataSourceEntity.getUrl());     dataSource.setMaxActive(druidDataSourceEntity.getMaxActive());     dataSource.setValidationQuery(druidDataSourceEntity.getValidationQuery());     dataSource.setTestOnBorrow(druidDataSourceEntity.isTestOnBorrow());     dataSource.setTestOnReturn(druidDataSourceEntity.isTestOnReturn());     dataSource.setTestWhileIdle(druidDataSourceEntity.isTestWhileIdle());     dataSource.setTimeBetweenEvictionRunsMillis(druidDataSourceEntity.getTimeBetweenEvictionRunsMillis());     dataSource.setMinEvictableIdleTimeMillis(druidDataSourceEntity.getMinEictableIdleTimeMillis());     dataSource.setPoolPreparedStatements(druidDataSourceEntity.isPoolPreparedStatements());     dataSource.setMaxOpenPreparedStatements(druidDataSourceEntity.getMaxOpenPreparedStatements());     try {         dataSource.setFilters(druidDataSourceEntity.getFilters());     } catch (SQLException e) {         e.printStackTrace();     }     return dataSource; }  public Resource[] getResource(String basePackage, String pattern) throws IOException {     String packageSearchPath = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX             + ClassUtils.convertClassNameToResourcePath(new StandardEnvironment()             .resolveRequiredPlaceholders(basePackage)) + "/" + pattern;     Resource[] resources = new PathMatchingResourcePatternResolver().getResources(packageSearchPath);     return resources; }  @Bean public SqlSessionFactory sqlSessionFactory() throws Exception {     logger.info("------&gt; sqlSessionFactory");     final SqlSessionFactoryBean sqlSessionFactory = new SqlSessionFactoryBean();     sqlSessionFactory.setDataSource(dataSource());     sqlSessionFactory.setConfigLocation(new ClassPathResource("mybatis-config.xml"));     sqlSessionFactory.setFailFast(true);     sqlSessionFactory.setMapperLocations(getResource("mapper", "**/*.xml"));     //配置插件     return sqlSessionFactory.getObject(); }   @Bean public DataSourceTransactionManager transactionManager() {     logger.info("&gt; transactionManager");     return new DataSourceTransactionManager(dataSource()); }  @Bean @Scope(value = "prototype")//这个注解蛮重要的，保证线程安全 public SqlSessionTemplate sqlSessionTemplate() {      try {         logger.info("SqlSessionTemplate---");         return new SqlSessionTemplate(sqlSessionFactory());     } catch (Exception e) {         e.printStackTrace();     }     logger.info("---sqlSesson----","空");     return null; }  @PostConstruct public void postConstruct() {     logger.info("jdbc.settings={}", druidDataSourceEntity);     logger.info("sqlSession",sqlSessionTemplate());  } </code></pre>  <p>}</p>  <p>when my config is XMl,it will be ok with spring mvc . maybe caused by      but I don't know how can I do in spring boot if you have a good idea or you have a better solution or you can give me a  demo  ，please tell me .I really appreciate your help first</p>