<p>I'm experimenting with building microservices using Spring Boot.</p>  <p>I have a back-end API that receives ResponseEntity POST requests and processes it (saving to database etc). Where Data is an Object of a self-created class.</p>  <p>Now I have a top-level API (that handles authentication,..). The end-users will communicate with the back-end services through this top-level API. So this API basically just has to forward all the requests to the right back-end api's.</p>  <p>In this top API I don't want to need to include all my classes (e.g. the Data class in this case) and I would rather just send it as String json data or something. So I tried this:</p>  <pre><code>@RequestMapping(method = RequestMethod.POST, value="/data")     ResponseEntity&lt;String&gt; createUnit(@RequestBody String data) {         URI uri = util.getServiceUrl("dataservice");         String url = uri.toString() + "/data";          ResponseEntity&lt;String&gt; result = restTemplate.postForEntity(url, data, String.class);         return new ResponseEntity&lt;String&gt;(result.getBody(), HttpStatus.OK);     } </code></pre>  <p>But this results in an <code>org.springframework.web.client.HttpClientErrorException: 415 Unsupported Media Type</code>. </p>  <p>So my question is, is there a way to forward these requests to my back-end without the need to include all my Object classes in my API? I figured this should be able since this is the same as when a web-browser sends requests in json format without knowing what kind of Object the data actually is.</p>  <p>The back-end handling looks like this:</p>  <pre><code>@RequestMapping(method = RequestMethod.POST, value="/data") ResponseEntity&lt;Data&gt; saveData(@RequestBody Data data) {     //Some code that processes the data     return new ResponseEntity&lt;Data&gt;(dataProcessed, HttpStatus.OK); } </code></pre>