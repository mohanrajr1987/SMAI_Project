<p>I'm fairly new to programming, having just taken one c++ course thus far. For my current class, I'm given the following assignment. </p>  <blockquote>   <p>The following (unambiguous) grammar in BNF form:</p>      <p>expr → expr + term | term</p>      <p>term → term * factor | factor</p>      <p>factor → ( expr ) | number</p>      <p>number → number digit | digit</p>      <p>digit -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7  | 8 | 9 </p>      <p>is a specification for simple arithmetic expressions. Write a program to evaluate such expressions (expr). For instance, given the input string "(23+(4*2))*(2+5)+2*3+4*5", your program should output “243”, and given “00123+0”, it should output “123”.  Your program should apply the C++ operators + and * to single digits only. Notice also that, in this context, a number consists of an arbitrary long string of digits.</p> </blockquote>  <p>Note that the professor only requires me to work with * and + (no - or /).</p>  <p>I've read up on BNF grammar and parsing and have an idea of where to go, but I'm still a little lost. Should I apply the shunting-yard algorithm for this case? What trips me up is that examples I have seen dealing with parsing arithmetic equations involve just single digits. My professor apparently wants us to work with strings that may involve multiple digit numbers while only applying the operators to single digits. </p>  <p>Any help with how I should get started is appreciated.   </p>