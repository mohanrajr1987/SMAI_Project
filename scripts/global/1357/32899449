<p>Given the following specification for a grammar: </p>  <pre><code>Statement → { Statement* }       → VarDecl       → if ( Exp ) Statement else Statement       → while ( Exp ) Statement       → System.out.println ( Exp ) ;       → id = Exp ;       → id [ Exp ]= Exp ; </code></pre>  <p>These are the rules I've come up with to use in a YACC/BISON program. I have Shift/Reduce Conflicts though. </p>  <pre><code>StatementList:     '{' StatementList Statement '}'      |  Statement      ;  Statement:      |   VarDecl     |   IF '('Exp')' StatementList ELSE StatementList     |   WHILE'('Exp')' StatementList     |   SOP'('Exp')' ';'     |   ID '=' Exp ';'     |   ID'['Exp']' '=' Exp';'     ; </code></pre>  <p>Also tried this grammar: </p>  <pre><code>CompoundStatement:         '{' StatementList '}'  StatementList:     StatementList Statement     |   Statement     ;  Statement:      |   VarDecl     |   IF '('Exp')' Statement ELSE Statement     |   WHILE'('Exp')' Statement     |   SOP'('Exp')' ';'     |   ID '=' Exp ';'     |   ID'['Exp']' '=' Exp';'     |   CompoundStatement     ; </code></pre>  <p>Did not work either. Still had conflicts. (Though this passed the testcases I'd set up)</p>  <p>And neither did this:</p>  <pre><code>StatementList      : %empty /* Explicit empty production, bison 3.0+ */      | StatementList Statement  Statement      : '{' StatementList '}'      | IF '('Exp')' Statement ELSE Statement      | /* ... and the rest of the statements */ </code></pre>  <p>Any help? </p>