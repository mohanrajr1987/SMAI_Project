<p>I have some problems understanding recursion and I was hoping for some help. I have 2 examples with answers but I can't understand how the outcomme was calculated.</p>  <pre><code>f1(X, [X | Ys]) -&gt; [X] ++ f1(X, Ys); f1(X, [Y| Xs]) -&gt; tl(f1(Y, Xs)) ++ [X]; f1(X, []) -&gt; [X,X]. </code></pre>  <p>If I run that code with: f1(2, [1,1,1,6]). I will get -> [1,6,1,2]</p>  <p>another example: f1(c, [f,b,d,d,a]) -> [b,f,c]</p>  <p>Can somebody please explain to me how this function calculates? :)</p>  <p>Another recursion function that I can't grasp is this one:</p>  <pre><code>f2([X|Xs]) when X &gt; 2 -&gt;   [X|f2(XS)]; f2([X|Xs]) -&gt;   [Y|Ys] = f2(Xs),   [Y,X+Y|Ys]; f2([]) -&gt; [1]. </code></pre>  <p>Example: f2([3,1,2]). -> [3,1,2,3]. How is that?</p>  <p>Thanks in advance :)</p>