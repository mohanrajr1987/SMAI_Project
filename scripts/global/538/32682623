<p>I Wrote this module for a simple server program that receives a request and send a response to client. It works fine But when if recompile this module while a client connected, the client disconnects and if i reconnect client to this server and send a request, there is no response. Is there any idea?!</p>  <p>Here is my module:</p>  <pre><code>-module(controller). -export([start/1, loop/1, response/2]).  -include_lib("types.hrl").  -define(END_CHAR, "$").   -spec start(Port) -&gt; no_return() when     Port :: char().  -spec loop(Listen) -&gt; no_return() when     Listen :: port().  -spec handler(Socket) -&gt; no_return() when     Socket :: port().  -spec response(HandlerPID, Data) -&gt; {send_msg, Msg} when     HandlerPID :: pid(),     Data :: string(),     Msg :: response().    start(Port) -&gt;     {ok, Listen} = gen_tcp:listen(Port, [{active, once}]),     spawn(?MODULE, loop, [Listen]).   loop(Listen) -&gt;     {ok, Socket} = gen_tcp:accept(Listen),     spawn(?MODULE, loop, [Listen]),     handler(Socket).    handler(Socket) -&gt;     receive         {tcp, Socket, Data} -&gt;             %io:format("recv ~p~n", [Data]),             spawn(?MODULE, response, [self(), Data]),             inet:setopts(Socket, [{active, once}]),             handler(Socket);         {tcp_closed, Socket} -&gt;             %io:format("disconnected~n", []),             gen_tcp:close(Socket);          {send_msg, Msg} -&gt;             gen_tcp:send(Socket, lists:flatten(io_lib:format("~p", [Msg])) ++ ?END_CHAR),             handler(Socket)     end.   response(PID, Data) -&gt;     [Req|Args] = string:tokens(Data, ?END_CHAR),     {ReqPID, ReqRef} = spawn_monitor(view, request, [list_to_atom(Req), self(), Args]),     receive         {'DOWN', ReqRef, process, ReqPID, {function_clause, _}} -&gt; PID ! {send_msg, invalid_request};         {'DOWN', ReqRef, process, ReqPID, {{case_clause, _}, _}} -&gt; PID ! {send_msg, bad_args};         {'DOWN', ReqRef, process, ReqPID, {{badmatch, _}, _}} -&gt; PID ! {send_msg, bad_args};         Resp -&gt; PID ! {send_msg, Resp}     end. </code></pre>