<p>I have a problem: I want to create an Erlang server that can hold 1M simultaneous open tcp connection. I tuned my OS (Oracle Linux 7) to raise the file descriptors. On the server i do    gen_tcp:listen</p>  <p>// point_1<br>   Socket = gen_tcp:accept<br>     spawn(handle(Socket)) // another thread<br>     back to point_1<br></p>  <p>If i connect sequentially its no problem, in 100 sec i connected 100K clients; but i had no patiance for more.</p>  <p>If i want to connect those in a <strong>conncurent</strong> way, only around 80 connections are made from 100, for example.</p>  <p>This is how I run the everything:</p>  <pre><code>erlc *.erl erl +Q 134217727 +P 1000000 -env ERL_MAX_PORTS 40960000 -env ERTS_MAX_PORTS 40960000 </code></pre>  <p>// start one server that will listen on port 9999</p>  <pre><code>ex:start(1, 9999)  </code></pre>  <p>// 100 clients try to connect on port 9999</p>  <pre><code>ex:connect_clients(100, 9999) </code></pre>  <p>Let me show you some code:</p>  <pre><code>start(Num,LPort) -&gt;   case gen_tcp:listen(LPort,[{active, false},{packet,2}]) of     {ok, ListenSock} -&gt;       start_servers(Num,ListenSock),       {ok, Port} = inet:port(ListenSock),       Port;     {error,Reason} -&gt;       {error,Reason}   end.  start_servers(0,_) -&gt;   ok; start_servers(Num,LS) -&gt;   spawn(?MODULE,server,[LS,0]),   start_servers(Num-1,LS).  server(LS, Nr) -&gt;   io:format("before accept ~w~n",[Nr]),   case gen_tcp:accept(LS) of     {ok,S} -&gt;       io:format("after accept ~w~n",[Nr]),       spawn(ex,loop,[S]),       server(LS, Nr+1);     Other -&gt;       io:format("accept returned ~w - goodbye!~n",[Other]),       ok   end.  loop(S) -&gt;   inet:setopts(S,[{active,once}]),   receive     {tcp,S, _Data} -&gt;       Answer = 1,        gen_tcp:send(S,Answer),       loop(S);     {tcp_closed,S} -&gt;       io:format("Socket ~w closed [~w]~n",[S,self()]),       ok   end.  client(PortNo) -&gt;   {ok,Sock} = gen_tcp:connect("localhost", PortNo,     []).  connect_clients(Number, Port) -&gt;   spawn(ex, client, [Port]),   case Number of     0 -&gt; ok;     _ -&gt; connect_clients(Number-1, Port)   end. </code></pre>