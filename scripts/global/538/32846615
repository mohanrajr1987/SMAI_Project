<p><a href="http://erlang.org/doc/tutorial/introduction.html" rel="nofollow">Erlang Interoperability</a> guide discusses different interoperability mechanisms. Here are my conclusions:</p>  <ul> <li><p>Ports and Erl_Interface programs: OS scheduled, limit scalability.</p></li> <li><p>Port Drivers: dangerous because a crash in the port driver brings the emulator down too.</p></li> <li><p>C Nodes: Node server needs to scale as well as Erlang app to avoid scalability sacrifices. </p></li> <li><p>NIFs: <a href="http://ninenines.eu/articles/erlang-scalability/" rel="nofollow">Loic</a> sums them up well.</p></li> </ul>  <p>Some advocate the use of OpenCL basically delegating resource hungry computations to GPU while letting the Erlang emulator to own the CPU. This sounds fantastic but then you have a requirement on your servers having a suitable GPU.</p>  <p>Using JInterface and communicating with a Java process that spawns a thread for every request might be an option. </p>  <p>So has anyone come across a solution that has been tested in practise and turned out to work well?</p>