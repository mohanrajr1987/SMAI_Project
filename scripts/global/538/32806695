<p>Is there any kind of test framework for Erlang which is similar to <a href="http://doc.akka.io/docs/akka/snapshot/scala/testing.html#Asynchronous_Integration_Testing_with_TestKit" rel="nofollow">TestKit</a> in Akka? </p>  <p>The goal is to test processes in an integrated environment, for example, to send some messages to a group of processes on one end and assert the resulting messages coming out on the other end. The Akka Testkit makes these kinds of tests fairly straightforward, but I have not been able to find the equivalent in Erlang yet.</p>  <p>EDIT: as the simplest example of what I'm looking for, let's say that we have a process A that is expected to send a message to process B, and I would like to test this behaviour. </p>  <p>In Akka, I can instantiate an actor based on the TestKit class, which has a builtin method <code>expectMsg</code>. So my test looks like this:</p>  <ul> <li>instantiate a mock B actor</li> <li>instantiate the A actor (which gets a reference to B somehow)</li> <li>send A a message</li> <li>call B.expectMsg to verify that it received the message (note that   <ul> <li>this automatically makes sure that no other type of message is sent to B, and</li> <li>you can optionally provide a timeout)</li> </ul></li> </ul>  <p>Is there a library that supports this kind of workflow in Erlang? As far as I know neither EUnit nor CT support this kind of testing.</p>  <p>To get an idea of the more complex assertions, please see this page: <a href="http://doc.akka.io/api/akka/2.0/akka/testkit/TestKit.html" rel="nofollow">http://doc.akka.io/api/akka/2.0/akka/testkit/TestKit.html</a></p>