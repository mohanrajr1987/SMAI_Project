<p>I have a <code>QTreeView</code> displaying data from a <code>QStandardItemModel</code>. One of the columns of the tree is displayed with a delegate that lets the user edit and display rich text. Below is a SSCCE that limits the editing to bold (with keyboard shortcut).</p>  <p>When the user is editing one of the items, how can I set it up so that in addition to toggling boldness with keyboard shortcut (CTRL-B), the user can also toggle it using the toolbar icon?</p>  <p><a href="http://i.stack.imgur.com/nhWFz.png" rel="nofollow"><img src="http://i.stack.imgur.com/nhWFz.png" alt="enter image description here"></a></p>  <p>Thus far, the keyboard shortcut works great (you can double click, edit text, and CTRL-B will toggle bold). However, I haven't figured out how to connect the bold button in the toolbar to the appropriate slot:</p>  <pre><code>    self.boldTextAction.triggered.connect(self.emboldenText) </code></pre>  <p>where I have this just sitting there doing nothing:</p>  <pre><code>def emboldenText(self):     print "Make selected text bold...How do I do this?" </code></pre>  <p>Things would be easy if the main window's central widget was the text editor: I could directly invoke the text editor's toggle bold method. Unfortunately, the text editor is only generated transiently by the tree view's delegate when the user double-clicks to start editing the tree.</p>  <p>That is,  we have this complicated relationship:</p>  <blockquote>   <p>QMainWindow -> QTreeView -> Delegate.CreateEditor ->   QTextEdit.toggleBold()</p> </blockquote>  <p>How do I access toggleBold() from within the main window for use by the toolbar action, especially given that the editor is only created temporarily when opened by the user?</p>  <p>I realize this may not be a PySide/Qt question as much as a Python/OOP question, so I've included additional potentially relevant tags. Any help with improving my word choice/jargon would be appreciated too.</p>  <p><strong>SSCCE</strong></p>  <pre><code>#!/usr/bin/env python  import platform import sys from PySide import QtGui, QtCore   class MainTree(QtGui.QMainWindow):     def __init__(self, tree, parent = None):         QtGui.QMainWindow.__init__(self)         self.setAttribute(QtCore.Qt.WA_DeleteOnClose)          self.setCentralWidget(tree)         self.createStatusBar()         self.createBoldAction()         self.createToolbar()         self.tree = tree         #self.htmlDelegate = self.tree.itemDelegateForColumn(1)      def createStatusBar(self):                                   self.status = self.statusBar()         self.status.setSizeGripEnabled(False)         self.status.showMessage("In editor, keyboard to toggle bold")      def createToolbar(self):         self.textToolbar = self.addToolBar("Text actions")         self.textToolbar.addAction(self.boldTextAction)      def createBoldAction(self):         self.boldTextAction = QtGui.QAction("Bold", self)         self.boldTextAction.setIcon(QtGui.QIcon("boldText.png"))         self.boldTextAction.triggered.connect(self.emboldenText)         self.boldTextAction.setStatusTip("Make selected text bold")      def emboldenText(self):         print "Make selected text bold...How do I do this? It's stuck in RichTextLineEdit"  class HtmlTree(QtGui.QTreeView):     def __init__(self, parent = None):             QtGui.QTreeView.__init__(self)         model = QtGui.QStandardItemModel()         model.setHorizontalHeaderLabels(['Task', 'Priority'])         rootItem = model.invisibleRootItem()         item0 = [QtGui.QStandardItem('Sneeze'), QtGui.QStandardItem('Low')]         item00 = [QtGui.QStandardItem('Tickle nose'), QtGui.QStandardItem('Low')]         item1 = [QtGui.QStandardItem('Get a job'), QtGui.QStandardItem('&lt;b&gt;High&lt;/b&gt;')]         item01 = [QtGui.QStandardItem('Call temp agency'), QtGui.QStandardItem('&lt;b&gt;Extremely&lt;/b&gt; &lt;i&gt;high&lt;/i&gt;')]         rootItem.appendRow(item0)         item0[0].appendRow(item00)          rootItem.appendRow(item1)         item1[0].appendRow(item01)         self.setModel(model)         self.expandAll()         self.resizeColumnToContents(0)         self.setToolTip("Use keyboard to toggle bold")         self.setItemDelegate(HtmlPainter(self))  class HtmlPainter(QtGui.QStyledItemDelegate):     def __init__(self, parent=None):         QtGui.QStyledItemDelegate.__init__(self, parent)      def paint(self, painter, option, index):         if index.column() == 1:              text = index.model().data(index) #default role is display (for edit consider fixing Valign prob)             palette = QtGui.QApplication.palette()             document = QtGui.QTextDocument()             document.setDefaultFont(option.font)             #Set text (color depends on whether selected)             if option.state &amp; QtGui.QStyle.State_Selected:                   displayString = "&lt;font color={0}&gt;{1}&lt;/font&gt;".format(palette.highlightedText().color().name(), text)                  document.setHtml(displayString)             else:                 document.setHtml(text)             #Set background color             bgColor = palette.highlight().color() if (option.state &amp; QtGui.QStyle.State_Selected)\                      else palette.base().color()             painter.save()              painter.fillRect(option.rect, bgColor)             document.setTextWidth(option.rect.width())             offset_y = (option.rect.height() - document.size().height())/2             painter.translate(option.rect.x(), option.rect.y() + offset_y)              document.drawContents(painter)             painter.restore()         else:             QtGui.QStyledItemDelegate.paint(self, painter, option, index)                def sizeHint(self, option, index):         fm = option.fontMetrics         if index.column() == 1:             text = index.model().data(index)             document = QtGui.QTextDocument()             document.setDefaultFont(option.font)             document.setHtml(text)             return QtCore.QSize(document.idealWidth() + 5, fm.height())         return QtGui.QStyledItemDelegate.sizeHint(self, option, index)       def createEditor(self, parent, option, index):         if index.column() == 1:             editor = RichTextLineEdit(parent)             editor.returnPressed.connect(self.commitAndCloseEditor)             return editor         else:             return QtGui.QStyledItemDelegate.createEditor(self, parent, option,                                                     index)      def commitAndCloseEditor(self):         editor = self.sender()         if isinstance(editor, (QtGui.QTextEdit, QtGui.QLineEdit)):             self.commitData.emit(editor)             self.closeEditor.emit(editor, QtGui.QAbstractItemDelegate.NoHint)   class RichTextLineEdit(QtGui.QTextEdit):      returnPressed = QtCore.Signal()      def __init__(self, parent=None):         QtGui.QTextEdit.__init__(self, parent)         self.setLineWrapMode(QtGui.QTextEdit.NoWrap)         self.setTabChangesFocus(True)         self.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)         self.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)         fontMetrics = QtGui.QFontMetrics(self.font())         h = int(fontMetrics.height() * (1.4 if platform.system() == "Windows"                                    else 1.2))         self.setMinimumHeight(h)         self.setMaximumHeight(int(h * 1.2))         self.setToolTip("Press &lt;b&gt;Ctrl+b&lt;/b&gt; to toggle bold")      def toggleBold(self):         self.setFontWeight(QtGui.QFont.Normal                 if self.fontWeight() &gt; QtGui.QFont.Normal else QtGui.QFont.Bold)      def sizeHint(self):         return QtCore.QSize(self.document().idealWidth() + 5,                      self.maximumHeight())      def minimumSizeHint(self):         fm = QtGui.QFontMetrics(self.font())         return QtCore.QSize(fm.width("WWWW"), self.minimumHeight())      def keyPressEvent(self, event):         '''This just handles all keyboard shortcuts, and stops retun from returning'''         if event.modifiers() &amp; QtCore.Qt.ControlModifier:             handled = False             if event.key() == QtCore.Qt.Key_B:                 self.toggleBold()                 handled = True             if handled:                 event.accept()                 return         if event.key() in (QtCore.Qt.Key_Enter, QtCore.Qt.Key_Return):             self.returnPressed.emit()             event.accept()         else:             QtGui.QTextEdit.keyPressEvent(self, event)   def main():     app = QtGui.QApplication(sys.argv)     myTree = HtmlTree()     #myTree.show()     myMainTree = MainTree(myTree)     myMainTree.show()     sys.exit(app.exec_())  if __name__ == "__main__":     main() </code></pre>  <p>Note for those that want the Full Tree Experience, with the button in the toolbar, here it is you can put it in the same folder as the script (change the name to <code>boldText.png</code>:</p>  <p><a href="http://i.stack.imgur.com/CipXt.png" rel="nofollow"><img src="http://i.stack.imgur.com/CipXt.png" alt="enter image description here"></a></p>