<p>I've the following JSON file (stored as "jobInfo.json"):</p>  <pre><code>{   "job": {      "id": 1,      "name": "Job 1",      "description": "bla bla bla",      "locations": {         "type": "FeatureCollection",         "features": [{            "id": 1,            "type": "Feature",            "geometry": {               "type": "Point",               "coordinates": [9.523853, 47.671412]            },            "properties": {               "name": "poi 1"            }         }, {            "id": 2,            "type": "Feature",            "geometry": {               "type": "Point",               "coordinates": [9.484092, 47.650899]              },            "properties": {               "name": "poi 2"            }         }]      }   } } </code></pre>  <p>I need to read this file from ExtJS 4. In a <strong>first step</strong>, it gets the job properties 'name', and 'description'. I've tried to use the following model:</p>  <pre><code>Ext.define('VZ.model.Job', {    extend: 'Ext.data.Model',    alias: 'widget.jobmodel',    idProperty: 'id',    fields: [       {           name: 'id',           type: 'integer'       }, {           name: 'name',           type: 'string'       }, {           name: 'description',           type: 'string'                                   },      'locations'    ] }); </code></pre>  <p>In the a controller I do the following:</p>  <pre><code>var jobfile = "data/jobs/jobInfo.json" var jobInfo = Ext.create('Ext.data.Store', {         model: 'VZ.model.Job',         proxy: {            type: 'ajax',            url: jobfile,            reader: {               type: 'json'               root: 'job'            }         } }); </code></pre>  <p><strong>But this doesn't work.</strong></p>  <p>In a <strong>second step</strong> I need to access the property 'features' as root.</p>  <p>As I had the json file ("data/jobs/job.json") with only features ...</p>  <pre><code>{ "type": "FeatureCollection", "features": [{     "id": 472     "type": "Feature",     "geometry": {         "type": "Point",         "coordinates": [9.523853, 47.671412]     },     "properties": {         "name": "Flughafen"     }, }, {     "id": 458     "type": "Feature",     "geometry": {         "type": "Point",         "coordinates": [9.484092, 47.650899]     },     "properties": {         "name": "Hafen"     },  }] } </code></pre>  <p>... the following code worked well:</p>  <pre><code>var jobfile = "data/jobs/job.json" var jobStore = Ext.create('GeoExt.data.FeatureStore', {     fields: [         {name: 'name', type: 'string'}     ],     autoLoad: true,     proxy: Ext.create('GeoExt.data.proxy.Protocol', {         reader: Ext.create('GeoExt.data.reader.Feature', {**root: 'features'**}),         protocol: new OpenLayers.Protocol.HTTP({             url: jobfile             format: new OpenLayers.Format.GeoJSON({                 internalProjection: new OpenLayers.Projection('EPSG:900913'),                 externalProjection: new OpenLayers.Projection('EPSG:4326')             })         })     }) }); </code></pre>  <p>So, I can use info as layer on openlayers.</p>  <p>But now, when I use "jobInfo.json", I try to use 'job.locations.features' as root. But I get an error:</p>  <pre><code>Uncaught TypeError: Cannot read property 'locations' of undefined </code></pre>  <p>Can somebody help me. What am I doing wrong?</p>  <p>Thank you in advance</p>