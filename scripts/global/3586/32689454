<p>I'm using @ExceptionHandler to manage all my exception and to return a JSON response for any REST API that throws exception. At the moment I manage two exception, the first is ResourceNotFoundException and it works but the second, FileExtensionException, it doesn't work. It throws this exception in eclipse console and nothing into rest response.</p>  <blockquote>   <p>2015-09-21 09:09:05.197 ERROR 7500 --- [nio-8080-exec-2]   .m.m.a.ExceptionHandlerExceptionResolver : Failed to invoke   @ExceptionHandler method: public matlab.ErrorResponse   matlab.ErrorController.errorHandler(java.lang.Exception)</p>      <p>org.springframework.web.HttpMediaTypeNotAcceptableException: Could not   find acceptable representation    at   org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:173)     at   org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:101)     at   org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:185)     at   org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:71)     at   org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:126)     at   org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:362)     at   org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:60)     at   org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:138)     at   org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:74)     at   org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1183)     at   org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1020)     at   org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:971)     at   org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893)     at   org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:967)     at   org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:858)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:622)     at   org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:729)     at   org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291)     at   org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)     at   org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)     at   org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)     at   org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)     at   org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77)     at   org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at   org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)     at   org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)     at   org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:85)     at   org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at   org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)     at   org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)     at   org.springframework.boot.context.web.ErrorPageFilter.doFilter(ErrorPageFilter.java:116)     at   org.springframework.boot.context.web.ErrorPageFilter.access$000(ErrorPageFilter.java:60)     at   org.springframework.boot.context.web.ErrorPageFilter$1.doFilterInternal(ErrorPageFilter.java:91)     at   org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at   org.springframework.boot.context.web.ErrorPageFilter.doFilter(ErrorPageFilter.java:109)     at   org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)     at   org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)     at   org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)     at   org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)     at   org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)     at   org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)     at   org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)     at   org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)     at   org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)     at   org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:518)     at   org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1091)     at   org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:673)     at   org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1526)     at   org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1482)     at   java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at   java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at   org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)     at java.lang.Thread.run(Thread.java:745)</p>      <p>2015-09-21 09:09:05.201 ERROR 7500 --- [nio-8080-exec-2]   o.s.boot.context.web.ErrorPageFilter     : Forwarding to error page   from request [/ManagmentFile/zipDownload] due to exception [The   selected file has a different extension:xlsx and not zip]</p>      <p>matlab.FileExtensionException: The selected file has a different   extension:xlsx and not zip    at   matlab.FileServices.getZipFile(FileServices.java:46)  at   matlab.ws.FileManagerImpl.getZip(FileManagerImpl.java:38)     at   sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)   at   sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at   sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at   org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:221)     at   org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:137)     at   org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110)     at   org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:776)     at   org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:705)     at   org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)     at   org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959)     at   org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893)     at   org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:967)     at   org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:858)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:622)     at   org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843)     at javax.servlet.http.HttpServlet.service(HttpServlet.java:729)     at   org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291)     at   org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)     at   org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)     at   org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)     at   org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)     at   org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77)     at   org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at   org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)     at   org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)     at   org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:85)     at   org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at   org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)     at   org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)     at   org.springframework.boot.context.web.ErrorPageFilter.doFilter(ErrorPageFilter.java:116)     at   org.springframework.boot.context.web.ErrorPageFilter.access$000(ErrorPageFilter.java:60)     at   org.springframework.boot.context.web.ErrorPageFilter$1.doFilterInternal(ErrorPageFilter.java:91)     at   org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)     at   org.springframework.boot.context.web.ErrorPageFilter.doFilter(ErrorPageFilter.java:109)     at   org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)     at   org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)     at   org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)     at   org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)     at   org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)     at   org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)     at   org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)     at   org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)     at   org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)     at   org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:518)     at   org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1091)     at   org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:673)     at   org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1526)     at   org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1482)     at   java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)     at   java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)     at   org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)     at java.lang.Thread.run(Thread.java:745)</p> </blockquote>  <p>These are the codes called by webservices:</p>  <pre><code>public FileSystemResource getZipFile(String fileName) throws FileExtensionException {     String ext=FilenameUtils.getExtension(fileName);     if (ext!= "zip")         throw new FileExtensionException(ext + " and not zip");     return new FileSystemResource(new File(fileName)); } </code></pre>  <p>the exception:</p>  <pre><code>package matlab;  public class FileExtensionException extends RuntimeException {      private static final long serialVersionUID = 1L;      public FileExtensionException(String message){         super("The selected file has a different extension:" + message);     } } </code></pre>  <p>RestController:</p>  <pre><code>@RequestMapping(value = "/files", method = RequestMethod.GET) public Response&lt;Collection&lt;FileModel&gt;&gt; getAllFiles(@RequestParam(value="path", defaultValue="/home") String path) throws ResourceNotFoundException {     Collection&lt;FileModel&gt; result;     result = file.getAllFiles(path);     return new Response&lt;Collection&lt;FileModel&gt;&gt;(HttpStatus.OK.value(),result); }  @RequestMapping(value = "/zipDownload", produces="application/zip", method = RequestMethod.GET) @ResponseBody public FileSystemResource getZip(@RequestParam(value="filePath", required=true) String filePath ) throws FileExtensionException{     return file.getZipFile(filePath); } </code></pre>  <p>ResourceNotFoundException</p>  <pre><code>public class ResourceNotFoundException extends Exception {     private static final long serialVersionUID = 1L;      public ResourceNotFoundException(String path){         super("The specified path: "+ path +"  doesn't exist");     } } </code></pre>  <p>the ErrorControl</p>  <pre><code>@ControllerAdvice  public class ErrorController {      /**      *       * @param e: exception thrown      * @return ErroreResponse      */     @ExceptionHandler(Exception.class)     public @ResponseBody ErrorResponse errorHandler(Exception e){            //Make the exception by buildErrorResponse         return ErrorResponseBuilder.buildErrorResponse(e);     }  } </code></pre>  <p>the error build:</p>  <pre><code>public class ErrorResponseBuilder {      public ErrorResponseBuilder() {      }      /**      * Build exception response beginning from exception      * @param e exception thrown      * @return ErrorResponse: response of an exception      */     public static ErrorResponse buildErrorResponse(Exception e){         StringWriter errors = new StringWriter();         e.printStackTrace(new PrintWriter(errors));         return new ErrorResponse(HttpStatusManager.getHttpCode(e),e.getClass().getName(),e.getMessage(),errors.toString());     }  } </code></pre>  <p>Where is the problem? Thanks</p>