<p>Consider we have this snippet of code:</p>  <pre><code>static void Main(string[] args) {     try     {         throw new Exception("Exception");     }     catch     {         throw;     }     finally     {         Console.WriteLine("------finally-----");     } } </code></pre>  <p>We have unhandled exception and <code>finally</code> block.</p>  <p>When <code>werfault</code> is enabled and I press <code>Cancel</code> when it is trying to "automatically solve problem" <strong>finally block executes.</strong> </p>  <p><a href="http://i.stack.imgur.com/SBXHP.png" rel="nofollow"><img src="http://i.stack.imgur.com/SBXHP.png" alt=""></a></p>  <p>But if I'm not pressing <code>Cancel</code> and in the next window clicking <code>Close The Program</code> <strong>finally block doesn't execute.</strong></p>  <p><a href="http://i.stack.imgur.com/W2IyF.png" rel="nofollow"><img src="http://i.stack.imgur.com/W2IyF.png" alt=""></a></p>  <p>And finally when I disable <code>werfault</code> and click <code>Close Program</code> <strong>finally block executes.</strong></p>  <p><a href="http://i.stack.imgur.com/OnzAH.png" rel="nofollow"><img src="http://i.stack.imgur.com/OnzAH.png" alt=""></a></p>  <p>I didn't find any documentation in c# spec that describes this situation. Also I found this on <a href="https://msdn.microsoft.com/en-us/library/zwc8s4fz.aspx" rel="nofollow"><code>MSDN</code></a>:</p>  <blockquote>   <p>Execution of the finally block after an unhandled error depends on how   the exception unwind operation is triggered.</p> </blockquote>  <p>But there is no explanation, anyone can describe why this is happening ?</p>  <p><strong>Update 1</strong>: I have tested it in .Net Framework 4.5.1 and 4.5.2.</p>