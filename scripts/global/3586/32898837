<p>I have a situation where passing ownership of a raw pointer may throw an exception. There are several such blocks, and it would be inelegant to wrap each in a try/catch just to delete pointers which weren't accepted. Instead I'm using a <code>unique_ptr&lt;A&gt;</code> to manage my pointer with RAII:</p>  <pre><code>unique_ptr&lt;A&gt; a(new A()); obj.take(a.get()); // pass ownership to obj, might throw a.release(); // release pointer since obj is now responsible </code></pre>  <p>So the idea behind this is to keep ownership of the raw pointer in the current function until it has been successfully passed to <code>somebody.take()</code>. This seems like a very nice pattern to me, but is it really? Any pitfalls I'm overlooking?</p>