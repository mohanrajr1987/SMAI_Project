<p>Okay, so I have a bunch of exception related questions across SO and Programmers, but there's just so much to ask, and either I don't know what to type, or not that many people have asked. </p>  <p>So, let's say I have a method that throws a <code>FileNotFoundException</code> (FNFE). I then have another method that uses the first one, but also throws a <code>IOException</code> (IOE).</p>  <p>My handler would catch both and do different things with each, but my IDE (IntelliJ) is signaling I have "a more general exception, 'java.io.IOException', in the throws list already". </p>  <p>I know it works if I do this:</p>  <pre><code>public File openOrCreate(String pathStr) throws FileNotFoundException,                                                 IOException {     try {          // Method that generates the FNFE         Path path = ReposioryProposition.getPath(pathStr);         File file = path.toFile();      catch (FileNotFoundException fnfe) {         throw fnfe;     }      if (!file.exists())         file.createNewFile();  // IOE     return file;  } </code></pre>  <p>But do I need to do it explicitly? Will it work without, or more dangerously, will <strong><em>sometimes</em></strong> work without the explicit version.</p>  <p>To make sure we are on the same page, this is how I initially wrote the thing:</p>  <pre><code>public File openOrCreate(String pathStr) throws FileNotFoundException,                                                 IOException {      Path path = ReposioryProposition.getPath(pathStr);     File file = path.toFile();      if (!file.exists())         file.createNewFile();     return file;  } </code></pre>  <p>But I am unsure what happens, is the FNFE thrown or swallowed up ? My intention is to catch them separately and do different stuff for one over the other.</p>