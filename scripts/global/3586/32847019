<p>picture we have an exception <code>FooException</code> and a validator <code>FooValidator</code></p>  <pre class="lang-php prettyprint-override"><code>&lt;?php class FooException extends \Exception {} class FooValidator {   public static function validate($string) {     if ('foo' != (string)$string) {       throw new FooException();     }     return true;   } } </code></pre>  <p>what if we moved that validation bit into the exception ?</p>  <pre class="lang-php prettyprint-override"><code>&lt;?php class FooException extends \Exception {   public static function validate($string) {     if ('foo' != (string)$string) {       throw new static;     }     return true;   } } </code></pre>  <p>This way the exception is the sole responsible of validating code and throw itself when such validation fails. This way you don't need a generic validation class - which usually will contains several methods - or several pairs of FooValidator,FooException classes</p>  <p>disclaimer: this question was written using PHP, but can be applied to any other language</p>