<p>My team and I are starting a game project in C++. According to our professor, header files should only include interfaces and source (.cpp) files should contain the implementation of our code found in our header file. However, after fooling around in VS, I noticed that the auto-generated code, say for a button click, is thrown in the header file with a body ready to implemented.</p>  <p><strong>Game.h</strong></p>  <pre><code>private: System::Void button1_Click(System::Object^  sender, System::EventArgs^  e) { } </code></pre>  <p>Where I would have expected it to be: </p>  <pre><code>private: System::Void button1_Click(System::Object^  sender, System::EventArgs^  e); </code></pre>  <p>and then implement it in our source file</p>  <p><strong>Game.cpp</strong></p>  <pre><code>private: System::Void button1_Click(System::Object^  sender, System::EventArgs^  e) {               /// code here } </code></pre>  <p>Is there a reason why this is done like this? Must I really modify the code in order to follow proper standards of separation between interface and implementation? </p>