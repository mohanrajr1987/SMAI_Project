<p>I am currently writing a set of wrappers for a native C++ library. The intention is to use the library with C#. To do this I have a solution with three projects. One is the native C++ Library. The second project is the c++/CLI wrapper, which is set up to have the native library as a reference. The last project is a C# unit test library that I intent to test the wrappers with. This setup seems to work as intended apart from having to copy the dll and pdb files for the native library manually, as visual studio refuses to add the native library as a reference for the C# unit test project. I have created a minimal example demonstrating this setup here <a href="https://dl.dropboxusercontent.com/u/6399753/wrapperTest.zip" rel="nofollow">https://dl.dropboxusercontent.com/u/6399753/wrapperTest.zip</a></p>  <p>As I said, this seemingly works fine apart from when I am debugging. I am able to step into functions just fine and the wrappers seem to behave as expected. I am however not able to inspect pointers to native objects in the wrapper for their value. It simply lists them as "unable to read memory" or "{Native}"</p>  <p>I have googled quite a bit and found people saying different things. I tried enabling "Allow unsafe code" and "enable native code debugging" on the c# unit test project. I also tried setting debugger type to "mixed" on the wrapper project. Visual Studio it self also warned me that the debugger was incompatible and suggested to enable "use managed compatibility mode". Non of this seemed to have any effect. </p>  <p><strong>Edit</strong>: A rather discussion long took place on whether or not it was even possible to step from managed to unmanaged code. Several Stackoverflow questions and answers like <a href="http://stackoverflow.com/questions/6643645/how-do-i-step-through-a-method-in-an-unmanaged-dll-when-loaded-from-a-managed-pr?rq=1">this</a> and <a href="http://stackoverflow.com/questions/27650484/using-mixed-mode-debugging-on-a-managed-unit-test-in-visual-studio-2013?rq=1">this</a>, as well as the provided minimal example established that is indeed possible. I would however still like an answer to the original question.</p>