<p>Okay bare with me I am new to C++/CLI (ruby and python are my preferred stacks). So for my first application I want to query a access db file. I will have multiple Access db files, and I would like to use a search box(<code>textbox1</code>) to specify the file name then from there open the table and show me the data. Any help or a point in the right direction would be greatly appreciated. </p>  <p>When I set this <code>DBPath = Application::StartupPath + "\\test.mdb";</code> it will only use the mdb files in my project how can I specify the a folder to use with different mdb files?</p>  <p>so for example </p>  <p>Input of some text -> this textbox1 use that to specify the mdb file to use.                 </p>  <pre><code>  private: System::Void textBox1_TextChanged(System::Object^   sender, System::EventArgs^  e) {               } </code></pre>  <p>so for the my DB path it would be </p>  <pre><code>DBPath = "C:\\test\mydb_files\" + valueoftextbox1; </code></pre>  <p>By doing this it would pick the correct db file to use then continue on rather than just having one static file.</p>  <p>Here is my form </p>  <pre><code>#pragma once   namespace Carb {      using namespace System;     using namespace System::ComponentModel;     using namespace System::Collections;     using namespace System::Windows::Forms;     using namespace System::Data;     using namespace System::Drawing;      using namespace System::IO; // File::Exists()     using namespace System::Data::OleDb; // OleDbConnection, OleDbDataAdapter, OleDbCommandBuilder      /// &lt;summary&gt;     /// Summary for Form1     ///     /// WARNING: If you change the name of this class, you will need to change the     ///          'Resource File Name' property for the managed resource compiler tool     ///          associated with all .resx files this class depends on.  Otherwise,     ///          the designers will not be able to interact properly with localized     ///          resources associated with this form.     /// &lt;/summary&gt;     public ref class Form1: public System::Windows::Forms::Form {             public: Form1(void) {                     InitializeComponent();                     //                     //TODO: Add the constructor code here                     //             }                      protected:                     /// &lt;summary&gt;                     /// Clean up any resources being used.                     /// &lt;/summary&gt;                     ~Form1() {                             if (components) {                                     delete components;                             }                     }             private: System::Windows::Forms::DataGridView ^ dataGridView1;             private: System::Windows::Forms::Label ^ label1;             private: System::Windows::Forms::ComboBox ^ comboBoxTables;             private: System::Windows::Forms::Button ^ buttonOK;             private: System::Windows::Forms::ToolTip ^ toolTip1;             private: System::ComponentModel::IContainer ^ components;             protected:                      private:                     /// &lt;summary&gt;                     /// Required designer variable.                     /// &lt;/summary&gt;                       #pragma region Windows Form Designer generated code                     /// &lt;summary&gt;                     /// Required method for Designer support - do not modify                     /// the contents of this method with the code editor.                     /// &lt;/summary&gt;             void InitializeComponent(void) {                     this - &gt; components = (gcnew System::ComponentModel::Container());                     this - &gt; dataGridView1 = (gcnew System::Windows::Forms::DataGridView());                     this - &gt; label1 = (gcnew System::Windows::Forms::Label());                     this - &gt; comboBoxTables = (gcnew System::Windows::Forms::ComboBox());                     this - &gt; buttonOK = (gcnew System::Windows::Forms::Button());                     this - &gt; toolTip1 = (gcnew System::Windows::Forms::ToolTip(this - &gt; components));                     (cli::safe_cast &lt; System::ComponentModel::ISupportInitialize ^ &gt; (this - &gt; dataGridView1)) - &gt; BeginInit();                     this - &gt; SuspendLayout();                     //                      // dataGridView1                     //                      this - &gt; dataGridView1 - &gt; Anchor = static_cast &lt; System::Windows::Forms::AnchorStyles &gt; ((((System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom) | System::Windows::Forms::AnchorStyles::Left) | System::Windows::Forms::AnchorStyles::Right));                     this - &gt; dataGridView1 - &gt; ColumnHeadersHeightSizeMode = System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode::AutoSize;                     this - &gt; dataGridView1 - &gt; Location = System::Drawing::Point(12, 44);                     this - &gt; dataGridView1 - &gt; Name = L "dataGridView1";                     this - &gt; dataGridView1 - &gt; ShowCellToolTips = false;                     this - &gt; dataGridView1 - &gt; Size = System::Drawing::Size(493, 266);                     this - &gt; dataGridView1 - &gt; TabIndex = 0;                     this - &gt; dataGridView1 - &gt; MouseDown += gcnew System::Windows::Forms::MouseEventHandler(this, &amp; Form1::dataGridView1_MouseDown);                     this - &gt; dataGridView1 - &gt; DataError += gcnew System::Windows::Forms::DataGridViewDataErrorEventHandler(this, &amp; Form1::dataGridView1_DataError);                     //                      // label1                     //                      this - &gt; label1 - &gt; Location = System::Drawing::Point(12, 9);                     this - &gt; label1 - &gt; Name = L "label1";                     this - &gt; label1 - &gt; Size = System::Drawing::Size(65, 32);                     this - &gt; label1 - &gt; TabIndex = 1;                     this - &gt; label1 - &gt; Text = L "Select table to show:";                     //                      // comboBoxTables                     //                      this - &gt; comboBoxTables - &gt; DropDownStyle = System::Windows::Forms::ComboBoxStyle::DropDownList;                     this - &gt; comboBoxTables - &gt; FormattingEnabled = true;                     this - &gt; comboBoxTables - &gt; Location = System::Drawing::Point(83, 12);                     this - &gt; comboBoxTables - &gt; Name = L "comboBoxTables";                     this - &gt; comboBoxTables - &gt; Size = System::Drawing::Size(165, 21);                     this - &gt; comboBoxTables - &gt; TabIndex = 2;                     //                      // buttonOK                     //                      this - &gt; buttonOK - &gt; Location = System::Drawing::Point(254, 12);                     this - &gt; buttonOK - &gt; Name = L "buttonOK";                     this - &gt; buttonOK - &gt; Size = System::Drawing::Size(56, 21);                     this - &gt; buttonOK - &gt; TabIndex = 3;                     this - &gt; buttonOK - &gt; Text = L "OK";                     this - &gt; buttonOK - &gt; UseVisualStyleBackColor = true;                     this - &gt; buttonOK - &gt; Click += gcnew System::EventHandler(this, &amp; Form1::buttonOK_Click);                     //                      // toolTip1                     //                      this - &gt; toolTip1 - &gt; AutoPopDelay = 5000;                     this - &gt; toolTip1 - &gt; InitialDelay = 0;                     this - &gt; toolTip1 - &gt; IsBalloon = true;                     this - &gt; toolTip1 - &gt; ReshowDelay = 0;                     this - &gt; toolTip1 - &gt; ToolTipIcon = System::Windows::Forms::ToolTipIcon::Warning;                     this - &gt; toolTip1 - &gt; UseAnimation = false;                     this - &gt; toolTip1 - &gt; UseFading = false;                     //                      // Form1                     //                      this - &gt; AutoScaleDimensions = System::Drawing::SizeF(6, 13);                     this - &gt; AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;                     this - &gt; ClientSize = System::Drawing::Size(517, 322);                     this - &gt; Controls - &gt; Add(this - &gt; buttonOK);                     this - &gt; Controls - &gt; Add(this - &gt; comboBoxTables);                     this - &gt; Controls - &gt; Add(this - &gt; label1);                     this - &gt; Controls - &gt; Add(this - &gt; dataGridView1);                     this - &gt; Name = L "Form1";                     this - &gt; Text = L "Form1";                     this - &gt; Load += gcnew System::EventHandler(this, &amp; Form1::Form1_Load);                     this - &gt; FormClosed += gcnew System::Windows::Forms::FormClosedEventHandler(this, &amp; Form1::Form1_FormClosed);                     (cli::safe_cast &lt; System::ComponentModel::ISupportInitialize ^ &gt; (this - &gt; dataGridView1)) - &gt; EndInit();                     this - &gt; ResumeLayout(false);              }#             pragma endregion             String ^ DBPath;              OleDbConnection ^ conn;             OleDbDataAdapter ^ adapter;             DataTable ^ dtMain;              private: System::Void Form1_Load(System::Object ^ sender, System::EventArgs ^ e) {                     DBPath = Application::StartupPath + "\\test.mdb";                      // create DB via ADOX if not exists                     if (!File::Exists(DBPath)) {                             ADOX::Catalog ^ cat = gcnew ADOX::Catalog();                             cat - &gt; Create("Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + DBPath);                             cat = nullptr;                     }                      // connect to DB                     conn = gcnew OleDbConnection("Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + DBPath);                     conn - &gt; Open();                      // create table "Table_1" if not exists                     // DO NOT USE SPACES IN TABLE AND COLUMNS NAMES TO PREVENT TROUBLES WITH SAVING, USE _                     // OLEDBCOMMANDBUILDER DON'T SUPPORT COLUMNS NAMES WITH SPACES                     try {                             OleDbCommand ^ cmd = gcnew OleDbCommand("CREATE TABLE [Table_1] ([id] COUNTER PRIMARY KEY, [text_column] MEMO, [int_column] INT);", conn);                             cmd - &gt; ExecuteNonQuery();                             delete cmd;                     } catch (Exception ^ ex) {                             if (ex != nullptr) ex = nullptr;                     }                      // get all tables from DB                     DataTable ^ dt = conn - &gt; GetSchema("Tables");                     for (int i = 0; i &lt; dt - &gt; Rows - &gt; Count; i++) {                             if (dt - &gt; Rows[i] - &gt; ItemArray[dt - &gt; Columns - &gt; IndexOf("TABLE_TYPE")] - &gt; ToString() == "TABLE") {                                     comboBoxTables - &gt; Items - &gt; Add(dt - &gt; Rows[i] - &gt; ItemArray[dt - &gt; Columns - &gt; IndexOf("TABLE_NAME")] - &gt; ToString());                             }                     }                     delete dt;             }             private: System::Void buttonOK_Click(System::Object ^ sender, System::EventArgs ^ e) {                     if (comboBoxTables - &gt; SelectedItem == nullptr) return;                      adapter = gcnew OleDbDataAdapter("SELECT * FROM [" + comboBoxTables - &gt; SelectedItem - &gt; ToString() + "]", conn);                      gcnew OleDbCommandBuilder(adapter);                      dtMain = gcnew DataTable();                     adapter - &gt; Fill(dtMain);                     dtMain - &gt; Columns["id"] - &gt; ReadOnly = true; // deprecate id field edit to prevent exceptions                     dataGridView1 - &gt; DataSource = dtMain;             }             private: System::Void Form1_FormClosed(System::Object ^ sender, System::Windows::Forms::FormClosedEventArgs ^ e) {                             if (adapter == nullptr) return;                              adapter - &gt; Update(dtMain);                     }                     // show tooltip (not intrusive MessageBox) when user trying to input letters into INT column cell             private: System::Void dataGridView1_DataError(System::Object ^ sender, System::Windows::Forms::DataGridViewDataErrorEventArgs ^ e) {                     if (dtMain - &gt; Columns[e - &gt; ColumnIndex] - &gt; DataType == Int64::typeid ||                             dtMain - &gt; Columns[e - &gt; ColumnIndex] - &gt; DataType == Int32::typeid ||                             dtMain - &gt; Columns[e - &gt; ColumnIndex] - &gt; DataType == Int16::typeid) {                             Rectangle ^ rectColumn;                             rectColumn = dataGridView1 - &gt; GetColumnDisplayRectangle(e - &gt; ColumnIndex, false);                              Rectangle ^ rectRow;                             rectRow = dataGridView1 - &gt; GetRowDisplayRectangle(e - &gt; RowIndex, false);                              toolTip1 - &gt; ToolTipTitle = "This field is for numbers only.";                             toolTip1 - &gt; Show(" ",                                     dataGridView1,                                     rectColumn - &gt; Left, rectRow - &gt; Top + rectRow - &gt; Height);                              delete rectColumn;                             delete rectRow;                     }             }             private: System::Void dataGridView1_MouseDown(System::Object ^ sender, System::Windows::Forms::MouseEventArgs ^ e) {                     toolTip1 - &gt; Hide(dataGridView1);             }             private: System::Void textBox1_TextChanged(System::Object^  sender, System::EventArgs^  e) {             }     }; } </code></pre>