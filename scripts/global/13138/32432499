<p>I have a very strange problem. I am making a simple 2d platformer using Java. The collision detection with the player and a platform, doesn't work. But the strange thing is, when I print something to the screen to see if the collision if-statement is executed, the collision works o_O Maybe it's a bit confusing, please see my code.</p>  <p>The Main class(which is good I think):</p>  <pre><code>import javax.swing.*;  public class Main extends JFrame{     private static final long serialVersionUID = 1L;     GameClass gc = new GameClass();      public Main(){         setSize(gc.WIDTH,gc.HEIGHT);         setResizable(false);         setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         setTitle("Flying GoatZ!");         add(new GameClass());         setLocationRelativeTo(null);         setVisible(true);     }     public static void main(String[] args) {         new Main();     } } </code></pre>  <p>GameClass class:</p>  <pre><code>import javax.swing.*; import java.awt.*; import java.awt.event.*; import java.util.ArrayList; import java.util.Arrays; import java.util.Random;  public class GameClass extends JPanel implements ActionListener, KeyListener, MouseListener{  //OBJECTS Text text = new Text(); openImages open_img = new openImages(); Random ran = new Random();  //VARIABLES static final long serialVersionUID = 1L; final int WIDTH = 800; final int HEIGHT = 600; int goatx = WIDTH/2; int goaty = 350; int goatspeed = 0; int fallspeed = 15; int maxy = 150; boolean up = false; boolean flying = true; ArrayList&lt;Integer&gt; xes = new ArrayList&lt;Integer&gt;(); ArrayList&lt;Integer&gt; yes = new ArrayList&lt;Integer&gt;();  //FPS SETTER AND KEYLISTENERS public GameClass(){     Timer time = new Timer(15, this);     time.start();     this.addKeyListener(this);     this.setFocusable(true);     open_img.openImage(); }  public void update(){     Collision();     goatx += goatspeed;     if(up){         if(goaty &gt; maxy){             goaty -= 5;          }else{             up = false;         }     }else         if(goaty &lt; 350)             goaty += fallspeed;  }  public void print(String msg){     System.out.println(msg); }  public void platformDrawing(Graphics g,int x,int y,int x1,int y1, int x2, int y2){     g.setColor(Color.RED);     g.drawImage(open_img.block,x, y, null);     g.drawImage(open_img.block,x1, y1, null);     g.drawImage(open_img.block,x2, y2, null);     xes.addAll(Arrays.asList(x,x1,x2));     yes.addAll(Arrays.asList(y,y1,y2)); }  //HERE IS THE COLLISION METHOD(I NEED THE PLAYER TO STAND STILL WHEN IT IS ON THE PLATFORM. public void Collision(){     for(int x : xes){         for(int y : yes){             if( ( (goatx &gt; x-20) &amp;&amp; (goatx &lt; (x + 150)) ) &amp;&amp; ( (goaty+open_img.goat.getHeight(null)) &lt;= y ) ){                 //print("TEST");                 fallspeed = 0;               }else{                 fallspeed = 10;             }         }     } }  //ALL TEH DRAWING public void paintComponent(Graphics g){     //MAP     g.setColor(Color.CYAN);     g.fillRect(0,0,WIDTH,HEIGHT);     g.setColor(Color.ORANGE);     g.fillRect(0, HEIGHT-100, WIDTH, 100);     g.setColor(Color.GREEN);     g.fillRect(0, HEIGHT-125, WIDTH, 25);     //PLAYER &amp; PLATFORMS     platformDrawing(g,50,350,300,350,600,350);     g.drawImage(open_img.goat, goatx, goaty, null);     g.dispose(); }  //THIS IS EXECUTED EVERYTIME public void actionPerformed(ActionEvent e){     update();     repaint(); }  //KEY DETECTION public void keyPressed(KeyEvent e){     if(e.getKeyCode() == KeyEvent.VK_LEFT){         goatspeed = -5;     }      if(e.getKeyCode() == KeyEvent.VK_RIGHT){         goatspeed = 5;     }      if(e.getKeyCode() == KeyEvent.VK_SPACE){         if(flying){             flying = false;             up = true;         }     } }  public void keyReleased(KeyEvent e){     if(e.getKeyCode() == KeyEvent.VK_LEFT){         goatspeed = 0;     }      if(e.getKeyCode() == KeyEvent.VK_RIGHT){         goatspeed = 0;     }      if(e.getKeyCode() == KeyEvent.VK_SPACE){         flying = true;     } }  //SOME STUFF THAT YOU HAVE TO IGNORE LEL    public void keyTyped(KeyEvent e){} public void mouseEntered(MouseEvent e) {} public void mouseExited(MouseEvent e) {} public void mousePressed(MouseEvent e) {} public void mouseReleased(MouseEvent e) {} public void mouseClicked(MouseEvent e) {} </code></pre>  <p>}</p>  <p>I don't understand why a print statement can make the difference... Any help is appreaciated, thanks! Oh, and sorry for bad English or unclear question.</p>