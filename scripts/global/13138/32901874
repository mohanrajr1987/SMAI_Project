<p>I design two jtables who have same columnmodel , so they resize accordingly, these two jtables should have same column number, i want them to behave in the same manner, when we resize columns or change scrollbar. now i have problem that when i resize second table, columns on rows does not change their size and scrollbars do not behave accordingly.</p>  <p>My code is like that</p>  <pre><code>import java.awt.BorderLayout; import java.awt.Dimension; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.JTable; import javax.swing.event.ChangeEvent; import javax.swing.table.DefaultTableModel; import javax.swing.table.TableColumn; import javax.swing.table.TableModel; import javax.swing.JScrollPane;  public class CompFilteredTable extends JPanel{     private JTable tblFilter;     private JTable tblData;     private JScrollPane scrollPane;     private JScrollPane scrollPane_1;     public CompFilteredTable() {         setLayout(new BorderLayout(0, 0));         add(getScrollPane_1(), BorderLayout.NORTH);         add(getScrollPane(), BorderLayout.CENTER);     }        public JTable getTblFilter() {         if (tblFilter == null) {             tblFilter = new MyTable(new TestTableModel2());             tblFilter.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);             tblFilter.setTableHeader (null);         }         return tblFilter;     }     public JTable getTblData() {         if (tblData == null) {             tblData = new MyTable(new TestTableModel());             tblData.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);              tblFilter.setColumnModel(tblData.getColumnModel());         }            return tblData;     }      private class MyTable extends JTable {         private MyTable (final TableModel model) {             super (model);         }          private boolean isColumnMarginChangeInProgress=false;         @Override         public void columnMarginChanged(final ChangeEvent e) {             if (isColumnMarginChangeInProgress) {                 return;             }             isColumnMarginChangeInProgress = true;              if (isEditing()) {                 removeEditor();             }             TableColumn resizingColumn = null;             if (tableHeader != null) {                 resizingColumn = tableHeader.getResizingColumn();             }             if (resizingColumn != null) {                 if (autoResizeMode == AUTO_RESIZE_OFF) {                     resizingColumn.setPreferredWidth(resizingColumn.getWidth());                 } else {    // this else block is missing in jdk1.4 as compared to 1.3                     doLayout();                     repaint();                 }             } else {                 resizeAndRepaint();             }             isColumnMarginChangeInProgress = false;         }     }        public static void main(String[] args) {         JFrame frame = new JFrame();         frame.setPreferredSize(new Dimension(600, 400));          CompFilteredTable compFilteredTable = new CompFilteredTable();          frame.getContentPane().add(compFilteredTable);         frame.pack();         frame.setVisible(true);      }      private class TestTableModel extends DefaultTableModel {         @Override         public int getRowCount () {             return 10;         }         @Override         public int getColumnCount () {             return 10;         }         @Override         public String getColumnName (final int column) {             return "Col-"+column;         }          @Override         public Object getValueAt (final int row, final int column) {             return (row * column) + "";         }     }      private class TestTableModel2 extends DefaultTableModel {         @Override         public int getRowCount () {             return 1;         }         @Override         public int getColumnCount () {             return 10;         }         @Override         public String getColumnName (final int column) {             return "Col-"+column;         }          @Override         public Object getValueAt (final int row, final int column) {             return (row * column) + "";         }     }        private JScrollPane getScrollPane() {         if (scrollPane == null) {             scrollPane = new JScrollPane();             scrollPane.setViewportView(getTblData());         }         return scrollPane;     }     private JScrollPane getScrollPane_1() {         if (scrollPane_1 == null) {             scrollPane_1 = new JScrollPane();             scrollPane_1.setViewportView(getTblFilter());         }         return scrollPane_1;     } } </code></pre>  <p><strong>Updated Code after the contribution deepak</strong> ( i dont know how can i show my updates, therefore i added below )</p>  <p>i updated code , now there are two problems that are seen on the picture. header of the second table is not seen , and there is a big gap between tables.</p>  <pre><code>import java.awt.BorderLayout; import java.awt.Dimension; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.JTable; import javax.swing.event.ChangeEvent; import javax.swing.table.DefaultTableModel; import javax.swing.table.TableColumn; import javax.swing.table.TableModel; import javax.swing.JScrollPane; import java.awt.GridLayout;  public class CompFilteredTable extends JPanel{     private JTable tblFilter;     private JTable tblData;     private JScrollPane scrollPane;     private JPanel panel;      public CompFilteredTable() {         setLayout(new BorderLayout(0, 0));         add(getScrollPane(), BorderLayout.CENTER);     }       public JTable getTblFilter() {         if (tblFilter == null) {             tblFilter = new MyTable(new TestTableModel2());             tblFilter.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);             tblFilter.setTableHeader (null);         }         return tblFilter;     }     public JTable getTblData() {         if (tblData == null) {             tblData = new MyTable(new TestTableModel());             tblData.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);              tblFilter.setColumnModel(tblData.getColumnModel());         }            return tblData;     }      private class MyTable extends JTable {         private MyTable (final TableModel model) {             super (model);         }          private boolean isColumnMarginChangeInProgress=false;         @Override         public void columnMarginChanged(final ChangeEvent e) {             if (isColumnMarginChangeInProgress) {                 return;             }             isColumnMarginChangeInProgress = true;              if (isEditing()) {                 removeEditor();             }             TableColumn resizingColumn = null;             if (tableHeader != null) {                 resizingColumn = tableHeader.getResizingColumn();             }             if (resizingColumn != null) {                 if (autoResizeMode == AUTO_RESIZE_OFF) {                     resizingColumn.setPreferredWidth(resizingColumn.getWidth());                 } else {    // this else block is missing in jdk1.4 as compared to 1.3                     doLayout();                 }                 repaint();             } else {                 resizeAndRepaint();             }             isColumnMarginChangeInProgress = false;         }     }        public static void main(String[] args) {         JFrame frame = new JFrame();         frame.setPreferredSize(new Dimension(600, 400));          CompFilteredTable compFilteredTable = new CompFilteredTable();          frame.getContentPane().add(compFilteredTable);         frame.pack();         frame.setVisible(true);      }      private class TestTableModel extends DefaultTableModel {         @Override         public int getRowCount () {             return 10;         }         @Override         public int getColumnCount () {             return 10;         }         @Override         public String getColumnName (final int column) {             return "Col-"+column;         }          @Override         public Object getValueAt (final int row, final int column) {             return (row * column) + "";         }     }      private class TestTableModel2 extends DefaultTableModel {         @Override         public int getRowCount () {             return 1;         }         @Override         public int getColumnCount () {             return 10;         }         @Override         public String getColumnName (final int column) {             return "Col-"+column;         }          @Override         public Object getValueAt (final int row, final int column) {             return (row * column) + "";         }     }      private JScrollPane getScrollPane() {         if (scrollPane == null) {             scrollPane = new JScrollPane();             scrollPane.setViewportView(getPanel());         }         return scrollPane;     }      private JPanel getPanel() {         if (panel == null) {             panel = new JPanel();             panel.setLayout(new GridLayout(2, 1, 0, 0));             panel.add(getTblFilter());             panel.add(getTblData());         }         return panel;     }  } </code></pre>  <p>the output screen </p>  <p><a href="http://i.stack.imgur.com/FZpM1.png" rel="nofollow"><img src="http://i.stack.imgur.com/FZpM1.png" alt="tables output"></a></p>