<p>I want to make a <code>JFrame</code> containing two <code>JPanel</code>s thanks to a <code>Layout</code>. On the left is the result (despite the <code>setExtendedState(JFrame.MAXIMIZED_BOTH);</code>) and on the right when I resize the frame:</p>  <p><a href="http://img11.hostingpics.net/pics/755098201509071540ProblemJFrame.png" rel="nofollow">Screen of the result</a></p>  <p>Here is the minimalized code:</p>  <pre><code>import java.awt.Color; import java.awt.GridBagConstraints; import java.awt.GridBagLayout; import java.awt.event.ActionEvent; import java.awt.event.ActionListener;  import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JPanel;  /**  * The Frame which will contain one or two Panels.  *  */ class Frame extends JFrame {      private static final long serialVersionUID = 1L;     private JPanel panAction;      public void JFrame() {         setLayout(new GridBagLayout());          GridBagConstraints info = new GridBagConstraints();         info.gridx = info.gridy = 0;         //info.gridwidth = 1;         //info.gridheight = 2;         info.fill = GridBagConstraints.BOTH;         //info.weightx = 1;         //info.weighty = 1;         JPanel buttonPanel = new ButtonPanel(this);         add(buttonPanel, info);          setExtendedState(JFrame.MAXIMIZED_BOTH);         pack();     }      public void changeSecondPanel(JPanel panel) {         if(this.panAction != null) {             remove(this.panAction);         }          GridBagConstraints info = new GridBagConstraints();         info.gridx = 0;         info.gridy = 1;         //info.gridwidth = 1;         //info.gridheight = 2;         //info.weightx = 1;         //info.weighty = 1;         info.fill = GridBagConstraints.BOTH;          add(panAction, info);         this.panAction = panel;     } }  /**  * The upper Panel.  *  */ class ButtonPanel extends JPanel {      private static final long serialVersionUID = 1L;      public ButtonPanel(final Frame frame) {         setBackground(Color.BLUE);         JButton button = new JButton("CREATE");         button.addActionListener(new ActionListener() {              @Override             public void actionPerformed(ActionEvent arg0) {                 frame.changeSecondPanel(                         /**                          * The bottom Panel.                          */                         new JPanel() {                      private static final long serialVersionUID = 1L;                      {                         setBackground(Color.GREEN);                     }                 });             }         });     } }   public class PanelProblem {      public static void main(String[] args) {         new Frame().setVisible(true);     }  } </code></pre>  <p>I tried <code>GridLayout</code> and <code>BorderLayout</code> but it didn't solve my problem. I already checked <a href="http://stackoverflow.com/questions/24723998/can-components-of-a-gridbaglayout-fill-parent-frame-upon-resize">Can components of a gridbaglayout fill parent frame upon resize?</a>, <a href="http://stackoverflow.com/questions/23047701/gridbaglayout-doesnt-fill-all-the-space">GridBagLayout doesn&#39;t fill all the space</a> and many other sources.</p>