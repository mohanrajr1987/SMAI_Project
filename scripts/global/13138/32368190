<p>So basically if I put <code>JPanel</code>s inside a <code>JPanel</code> that uses <code>GridBagLayout</code> and I restrict the size with <code>setPreferredSize</code>, eventually it reaches a point where it can't hold all of them, and it exhibits the behavior shown in the attached picture: </p>  <p><a href="http://i.stack.imgur.com/XhIvS.png" rel="nofollow"><img src="http://i.stack.imgur.com/XhIvS.png" alt="enter image description here"></a></p>  <p>I'm making an <a href="https://en.wikipedia.org/wiki/Accordion_%28GUI%29" rel="nofollow">accordion</a>. This is just an example to showcase the problem I'm having. Each part of the accordion can open individually and they're of arbitrary size and get added on the fly. Its easy enough to get the heights of all the individual panels and compare them against the total height, but when too many are added it exhibits the crunching behavior I've shown. This also shrinks the heights so its much more difficult to determine when the crunching has happened. I would have to cache heights and somehow pre-calculate the heights of the new parts getting added. The end goal is to remove older panels when a new panel is added and there isn't enough room for it.</p>  <p>Is there an easy way to determine what height something would be if it weren't constrained, or maybe a supported way to detect when such crunching has is happening (so I can quickly thin it out before it gets painted again)? An option that makes <code>GridBagLayout</code> behave like some other layouts and overflow into <a href="https://en.wikipedia.org/wiki/Hammerspace" rel="nofollow">hammerspace</a> instead of compressing would work too.</p>  <p>Code for example:</p>  <pre><code>import java.awt.*; import java.awt.event.*; import javaisms.out; import javax.swing.*;  public class FoldDrag extends JLayeredPane {     public TexturedPanel backingPanel = new TexturedPanel(new GridBagLayout(),"data/gui/grayerbricks.png");     static JPanel windowbase=new JPanel();     static JPanel restrictedpanel=new JPanel(new GridBagLayout());      GridBagConstraints gbc = new GridBagConstraints();      public FoldDrag() {         JButton addpan  = new JButton("Add things");         windowbase.add(addpan);         windowbase.add(restrictedpanel);         restrictedpanel.setBackground(Color.red);         restrictedpanel.setPreferredSize(new Dimension(200,200));         gbc.weighty=1;         gbc.weightx=1;         gbc.gridx=0;         gbc.gridy=0;         gbc.gridheight=1;         gbc.gridwidth=1;         gbc.fill=GridBagConstraints.HORIZONTAL;         addpan.addActionListener(new ActionListener() {             int number=0;             @Override             public void actionPerformed(ActionEvent e)             {                 number++;                 gbc.gridy=number;                 JPanel tmppanel = new JPanel();                 tmppanel.setPreferredSize(new Dimension(100,30));                 if(number%3==0)                     tmppanel.setBackground(Color.blue);                 if(number%3==1)                     tmppanel.setBackground(Color.yellow);                 if(number%3==2)                     tmppanel.setBackground(Color.green);                 restrictedpanel.add(tmppanel,gbc);                 restrictedpanel.validate();             }         });         windowbase.setVisible(true);     }     private static void createAndShowUI() {         JFrame frame = new JFrame("DragLabelOnLayeredPane");         frame.getContentPane().add(windowbase);         FoldDrag thedrag=new FoldDrag();         windowbase.add(thedrag);         frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         frame.setPreferredSize(new Dimension(300,300));         frame.pack();         frame.setResizable(true);         frame.setLocationRelativeTo(null);         frame.setVisible(true);     }      public static void main(String[] args) {         out.active=true;         java.awt.EventQueue.invokeLater(new Runnable() {             public void run() {                 createAndShowUI();             }         });     } } </code></pre>  <p><strong>EDIT: Seems I didn't describe my version of the accordion very well. Here's a <a href="http://i.imgur.com/oKUuF3f.webm" rel="nofollow">link</a>.</strong></p>