<p>I recently started integrating Google's Protocol Buffer for the communication of more complex data structures in a robotic network (e.g. matrices, internal state arrays, device info). </p>  <p>While I'm still at the prototyping phase, I've begun wondering how specific I should make the proto messages for long-term support. I see three possible approaches (very simple examples):</p>  <p>1) Medium specificity: Make the messages specific to each type of robot. Ex:</p>  <pre><code>// RobotA.proto optional int32 commandID repeated double positionData //ex: this robot has many joints  // RobotB.proto optional int32 commandID optional int32 subCommandID //ex: this robot has subcommands optional double positionData //ex: this robot has only one joint </code></pre>  <p>2) Low specificity: Make the messages very general. Ex:</p>  <pre><code>// GeneralRobotMessage.proto optional int32 commandID //switch-case which other potential data is needed optional int32 potentialIntData  repeated double potentialDoubleArray optional string potentialStringData optional bool potentialBoolData </code></pre>  <p>3) High specificity: Each type of message has a protobuf. Ex:</p>  <pre><code>// NAKMessage.proto // ACKMessage.proto // RobotAGetPosition.proto </code></pre>  <p>From past experience, I usually employ a low specificity approach and use command IDs (aka a packet header) to designate the approach to parsing the message. But with protobufs, the whole concept of a predesignated .proto seems to act as a header concept.</p>  <p>Is there a recommended approach to message specificity? Coding standards? Rule of thumb?</p>  <p>Cheers,</p>