<pre><code>public class PlayerFile      {         public const string CricketTeamFile = "CricketFile";         public const string FootballTeamFile= "FootballFile";          public static async Task&lt;List&lt;Player&gt;&gt; ViewMyPlayers(string type)         {             List&lt;Player&gt; Team;             var Serializer = new  DataContractJsonSerializer(typeof(List&lt;Player&gt;));             if (type == "Cricket")             {                 var MyStream = await ApplicationData.Current.LocalFolder.OpenStreamForReadAsync(CricketTeamFile);                 Team = (List&lt;Player&gt;)Serializer.ReadObject(MyStream);             }             else             {                 var MyStream = await ApplicationData.Current.LocalFolder.OpenStreamForReadAsync(FootballTeamFile);                 Team = (List&lt;Player&gt;)Serializer.ReadObject(MyStream);             }             return Team;         }          public static async Task AddToFile(List&lt;Player&gt; a, string type)         {             var serializer = new DataContractJsonSerializer(typeof(List&lt;Player&gt;));             if (type == "Cricket")             {                 using (var stream = await ApplicationData.Current.LocalFolder.OpenStreamForWriteAsync(CricketTeamFile, CreationCollisionOption.ReplaceExisting))                 {                     serializer.WriteObject(stream, a);                 }             }             else             {                 using (var stream = await ApplicationData.Current.LocalFolder.OpenStreamForWriteAsync(FootballTeamFile, CreationCollisionOption.ReplaceExisting))                 {                     serializer.WriteObject(stream, a);                 }             }         }      } </code></pre>  <p>I am using a const string to store the values of different objects of a class into <code>CricketTeamFile</code> etc. (aim being able to retain the data even after the application is closed, this data should never be deleted unless app is uninstalled)</p>  <p>The <code>AddToFile</code> method works once, but when called upon the second time device throws <code>global::System.Diagnostics.Debugger.Break()</code> error and breaks. On emulator everything's working.</p>