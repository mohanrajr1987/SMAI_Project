<p>I need to binary serialize an object that contains a collection of lots of instances of some base class. Each instance could be any of the derived types, and there are really lots of possible derived types (around one hundred). Therefore I don't really want to modify each of these types so that this object could be serialized.</p>  <p>I would even like to avoid adding the default public constructor to all of these types as this would damage the architecture a little bit and would also be really annoying to do (and not really <a href="https://en.wikipedia.org/wiki/Don&#39;t_repeat_yourself" rel="nofollow">DRY</a>), not speaking of adding <code>Serializable</code> attribute to every public property in these types. And for the same reason writing a custom serializer/surrogate for each of these types is hardly an option.</p>  <p>What I have tried so far:</p>  <ul> <li><a href="https://msdn.microsoft.com/en-us/library/system.runtime.serialization.formatters.binary.binaryformatter%28v=vs.110%29.aspx" rel="nofollow">BinaryFormatter</a> - requires additional attributes for serialized properties</li> <li><a href="http://www.sharpserializer.com/en/index.html" rel="nofollow">sharpSerializer</a> - requires public default constructor</li> <li><a href="https://github.com/mgravell/protobuf-net" rel="nofollow">protobuf-net</a> - requires addtitional attributes for serialized properties</li> <li><a href="http://www.taika.org/~tomba/netserializer/index.html" rel="nofollow">Net serializer</a> - requires addtitional attributes for serialized properties</li> </ul>  <p>I have also tried serializing with <a href="http://www.newtonsoft.com/json" rel="nofollow">Json.NET</a> and then saving the result as a byte array (I know, I know), but I ran into an <code>OutOfMemoryException</code> while serializing. This likely means my object is too heavy for text serialization (it takes around 200Mb in memory, but there are lots of elements in the array, lots of properties in each of the element etc). </p>  <p>If it makes any better - all the objects in the collection I need to save have only public properties (I don't need to serialize fields or private properties). And there also is no particular logic in these objects' constructors - only filling the properies.</p>  <p>Is there any way to achieve the serialization/deserialization without modifying the serialized classes?</p>  <hr>  <p>I don't even know if it is possible to deserialize an object that does not have parameterless constructor (the restriction required by all of the serializers I've met), but it should be as <a href="http://stackoverflow.com/questions/296584/create-object-instance-without-invoking-constructor">the reflection allows to create instances without calling constructors.</a></p>