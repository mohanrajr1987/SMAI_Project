<p>So I send a <code>Server</code> object to a client with this thread:</p>  <pre><code>public ConnectionThread(final Server server) {     super(new Runnable() {         public void run() {             try {                 Socket client = server.serverSocket.accept();                 server.clients.add(client);                  ObjectInputStream in = new ObjectInputStream(                         client.getInputStream());                 ObjectOutputStream out = new ObjectOutputStream(                         client.getOutputStream());                  System.out.println("Connected client: "                         + client.getRemoteSocketAddress());                 server.launchNewThread();                  Object input;                 while (!client.isClosed()) {                     input = in.readObject();                      if (input != null) {                         if (input.toString().equals("server")) {                             out.writeObject(server);                         }                     }                 }             } catch (Exception e) {                 e.printStackTrace();             }         }     }); </code></pre>  <p>And when I call out.writeObject(server) I get this exception:</p>  <pre><code>java.io.NotSerializableException: java.net.Socket </code></pre>  <p>Here is the Server class:</p>  <pre><code>public class Server implements Serializable { private static final long serialVersionUID = 4634111951586948020L;  public ServerArgs args;  public ArrayList&lt;Socket&gt; clients = new ArrayList&lt;Socket&gt;(); public ServerSocket serverSocket;  public Server(int port) throws IOException {     serverSocket = new ServerSocket(port);      launchNewThread(); }  public void launchNewThread() {     ConnectionThread thread = new ConnectionThread(this);     thread.start(); }  public static void main(String[] args) throws IOException {     new Server(27015); } } </code></pre>