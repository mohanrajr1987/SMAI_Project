<p>In an ASP.NET Web API application, some of the models I'm working with contain a chunk of ad-hoc JSON that is useful only on the client side. On the server it simply goes in and out of a relational database as a string. Performance is key, and it seems pointless to process the JSON string server side at all.</p>  <p>So in C#, imagine an object like this:</p>  <pre><code>new Person {     FirstName = "John",     LastName = "Smith",     Json = "{ \"Age\": 30 }" }; </code></pre>  <p>By default, Json.NET will serialize this object like this:</p>  <pre><code>{     "FirstName": "John",     "LastName": "Smith",     "Json": "{ \"Age\": 30 }" } </code></pre>  <p>I'd like to be able to instruct Json.NET to assume that the <code>Json</code> property is already a serialized representation, thus it shouldn't re-serialize, and the resulting JSON should look like this:</p>  <pre><code>{     "FirstName": "John",     "LastName": "Smith",     "Json": {         "Age": 30     } } </code></pre>  <p>Ideally this works in both directions, i.e. when POSTing the JSON representation it will automatically deserialize to the C# representation above.</p>  <p><strong>What is the best mechanism to achieve this with Json.NET?</strong> Do I need a custom <code>JsonConverter</code>? Is there a simpler attribute-based mechanism? Efficiency matters; the whole point is to skip the serialization overhead, which <em>could</em> be a bit of a micro-optimization, but for argument's sake let's assume it's not. (There will potentially be big lists with bulky <code>Json</code> properties being returned.)</p>