<p>I have a web api2 application which I have scaffolded using EF.</p>  <p>I am trying to serialize the following class (Which contains lazy loaded navigation properties):</p>  <pre><code>namespace Models {     public class Speciality     {         [Key]         [DatabaseGenerated(DatabaseGeneratedOption.Identity)]         public int SpecialityId { get; set; }          public string Name { get; set; }          public virtual ICollection&lt;Doctor&gt; Doctors { get; set; }         public virtual ICollection&lt;MedicalFacility&gt; MedicalFacilities { get; set; }     } }  </code></pre>  <p>The is my controller:</p>  <pre><code>namespace FindAMedicService.Controllers {      public class SpecialitiesController : ApiController     {         private ApplicationDbContext db = new ApplicationDbContext();          // GET: api/Specialities         public IQueryable&lt;Speciality&gt; GetSpeciality()         {             return db.Speciality;         }     } } </code></pre>  <p>When I try to access this particular service to get a list of "Specialities", I get the following error:</p>  <pre><code>&lt;Error&gt; &lt;Message&gt;An error has occurred.&lt;/Message&gt; &lt;ExceptionMessage&gt; The 'ObjectContent`1' type failed to serialize the response body for content type 'application/xml; charset=utf-8'. &lt;/ExceptionMessage&gt; &lt;ExceptionType&gt;System.InvalidOperationException&lt;/ExceptionType&gt; &lt;StackTrace/&gt; &lt;InnerException&gt; &lt;Message&gt;An error has occurred.&lt;/Message&gt; &lt;ExceptionMessage&gt; Type 'System.Data.Entity.DynamicProxies.Speciality_DC264D6DBBAF52FB19E27F20DCC47DA1141620CEC0CCAF6E2DEF4D8907FA7C8C' with data contract name 'Speciality_DC264D6DBBAF52FB19E27F20DCC47DA1141620CEC0CCAF6E2DEF4D8907FA7C8C:http://schemas.datacontract.org/2004/07/System.Data.Entity.DynamicProxies' is not expected. Consider using a DataContractResolver if you are using DataContractSerializer or add any types not known statically to the list of known types - for example, by using the KnownTypeAttribute attribute or by adding them to the list of known types passed to the serializer. &lt;/ExceptionMessage&gt; &lt;ExceptionType&gt; System.Runtime.Serialization.SerializationException &lt;/ExceptionType&gt; &lt;StackTrace&gt; at System.Runtime.Serialization.XmlObjectSerializerWriteContext.SerializeAndVerifyType(DataContract dataContract, XmlWriterDelegator xmlWriter, Object obj, Boolean verifyKnownType, RuntimeTypeHandle declaredTypeHandle, Type declaredType) at System.Runtime.Serialization.XmlObjectSerializerWriteContext.SerializeWithXsiType(XmlWriterDelegator xmlWriter, Object obj, RuntimeTypeHandle objectTypeHandle, Type objectType, Int32 declaredTypeID, RuntimeTypeHandle declaredTypeHandle, Type declaredType) at System.Runtime.Serialization.XmlObjectSerializerWriteContext.InternalSerialize(XmlWriterDelegator xmlWriter, Object obj, Boolean isDeclaredType, Boolean writeXsiType, Int32 declaredTypeID, RuntimeTypeHandle declaredTypeHandle) at WriteArrayOfSpecialityToXml(XmlWriterDelegator , Object , XmlObjectSerializerWriteContext , CollectionDataContract ) at System.Runtime.Serialization.CollectionDataContract.WriteXmlValue(XmlWriterDelegator xmlWriter, Object obj, XmlObjectSerializerWriteContext context) at System.Runtime.Serialization.XmlObjectSerializerWriteContext.WriteDataContractValue(DataContract dataContract, XmlWriterDelegator xmlWriter, Object obj, RuntimeTypeHandle declaredTypeHandle) at System.Runtime.Serialization.XmlObjectSerializerWriteContext.SerializeWithoutXsiType(DataContract dataContract, XmlWriterDelegator xmlWriter, Object obj, RuntimeTypeHandle declaredTypeHandle) at System.Runtime.Serialization.DataContractSerializer.InternalWriteObjectContent(XmlWriterDelegator writer, Object graph, DataContractResolver dataContractResolver) at System.Runtime.Serialization.DataContractSerializer.InternalWriteObject(XmlWriterDelegator writer, Object graph, DataContractResolver dataContractResolver) at System.Runtime.Serialization.XmlObjectSerializer.WriteObjectHandleExceptions(XmlWriterDelegator writer, Object graph, DataContractResolver dataContractResolver) at System.Runtime.Serialization.DataContractSerializer.WriteObject(XmlWriter writer, Object graph) at System.Net.Http.Formatting.XmlMediaTypeFormatter.WriteToStream(Type type, Object value, Stream writeStream, HttpContent content) at System.Net.Http.Formatting.XmlMediaTypeFormatter.WriteToStreamAsync(Type type, Object value, Stream writeStream, HttpContent content, TransportContext transportContext, CancellationToken cancellationToken) --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Web.Http.WebHost.HttpControllerHandler.&lt;WriteBufferedResponseContentAsync&gt;d__1b.MoveNext() &lt;/StackTrace&gt; &lt;/InnerException&gt; &lt;/Error&gt; </code></pre>  <p>I didn't have this error before when I did not have the two navigation properties in my Speciality class (Doctors, MedicalFacilities). </p>  <p>Any help is much appreciated.  </p>