<p>I know people use <code>ROW_NUMBER()</code> function to do the pagination but my below two query is bit complex. So I need suggestion like how to use pagination there ?</p>  <p>I used <code>ROW_NUMBER() OVER(ORDER BY IsNull(A.OEReference, B.OEReference) ASC) as Line</code> in one but not sure am I right or wrong.</p>  <pre><code> IF IsNull(@GroupID,'') = ''            SELECT            IsNull(PartGroupName, 'UnMapped') AS PartGroupName,                CASE IsNull(PartGroupName, '')                   WHEN '' THEN ''                    ELSE IsNull(IsNull(K.GroupID, IsNull(C.PartGroupID,'')),'')                END AS PartGroupID,                IsNull(A.OEReference, B.OEReference) AS OEReference,             IsNull(SaleDone,0) AS [SALE/OUR],                  IsNull(WarrantyDone, 0) AS [WARRANTY/WARRANTYOUR]            FROM            @Sale A       FULL OUTER JOIN           @Warranty B ON A.OEReference = B.OEReference            LEFT OUTER JOIN           BBAPart K ON IsNull(A.OEReference, B.OEReference) = K.Stock_code            LEFT OUTER JOIN           BBAPartGroup C ON K.GroupID = C.PartGroupID AND C.IsDeleted = 0        ORDER BY           IsNull(PartGroupName, 'UnMapped')     ELSE            SELECT            IsNull(PartGroupName, 'UnMapped') AS PartGroupName,                CASE IsNull(PartGroupName, '')                     WHEN '' THEN ''                      ELSE IsNull(IsNull(K.GroupID, IsNull(C.PartGroupID,'')),'')                END AS PartGroupID,                IsNull(A.OEReference, B.OEReference) AS OEReference,             IsNull(SaleDone,0) AS [SALE/OUR],                  IsNull(WarrantyDone, 0) AS [WARRANTY/WARRANTYOUR]      FROM            @Sale A       FULL OUTER JOIN           @Warranty B ON A.OEReference = B.OEReference            LEFT OUTER JOIN           BBAPart K ON IsNull(A.OEReference,B.OEReference) = K.Stock_code            LEFT OUTER JOIN           BBAPartGroup C ON K.GroupID=C.PartGroupID AND C.IsDeleted = 0            WHERE            PartGroupID IN (SELECT Data FROM dbo.stringtotable(@GroupID, ',') )            ORDER BY           IsNull(PartGroupName, 'UnMapped')    END    </code></pre>  <h2>this way i have solved it</h2>  <pre><code> IF IsNull(@GroupID,'') = ''    BEGIN        SELECT  COUNT(*)     FROM  @Sale A FULL OUTER JOIN @Warranty B ON A.OEReference = B.OEReference            LEFT OUTER JOIN BBAPart K ON IsNull(A.OEReference,B.OEReference) = K.Stock_code            LEFT OUTER JOIN BBAPartGroup C ON K.GroupID=C.PartGroupID AND C.IsDeleted = 0      SELECT *   FROM (   SELECT  IsNull(PartGroupName, 'UnMapped') AS PartGroupName,            CASE IsNull(PartGroupName, '')             WHEN '' THEN ''              ELSE IsNull(IsNull(K.GroupID, IsNull(C.PartGroupID,'')),'')            END AS PartGroupID,            IsNull(A.OEReference, B.OEReference) AS OEReference,         IsNull(SaleDone,0) AS [SALE/OUR],              IsNull(WarrantyDone, 0) AS [WARRANTY/WARRANTYOUR]      , ROW_NUMBER() OVER ( ORDER BY IsNull(PartGroupName, 'UnMapped')  ) AS rn          FROM  @Sale A FULL OUTER JOIN @Warranty B ON A.OEReference = B.OEReference            LEFT OUTER JOIN BBAPart K ON IsNull(A.OEReference,B.OEReference) = K.Stock_code            LEFT OUTER JOIN BBAPartGroup C ON K.GroupID=C.PartGroupID AND C.IsDeleted = 0     --WHERE rn&gt;= @StartIndex AND rn &lt;= @EndIndex       --ORDER BY IsNull(PartGroupName, 'UnMapped')   ) List_of_records   WHERE [rn] BETWEEN ((@StartIndex-1) * @EndIndex ) + 1 AND (@StartIndex * @EndIndex)   ORDER BY IsNull(PartGroupName, 'UnMapped')    END   ELSE        BEGIN    SELECT  COUNT(*)         FROM  @Sale A FULL OUTER JOIN @Warranty B ON A.OEReference = B.OEReference            LEFT OUTER JOIN BBAPart K ON IsNull(A.OEReference,B.OEReference) = K.Stock_code            LEFT OUTER JOIN BBAPartGroup C ON K.GroupID=C.PartGroupID AND C.IsDeleted = 0         WHERE  PartGroupID IN (SELECT Data FROM dbo.stringtotable(@GroupID, ',') )      SELECT *   FROM (   SELECT  IsNull(PartGroupName, 'UnMapped') AS PartGroupName,            CASE IsNull(PartGroupName, '')             WHEN '' THEN ''              ELSE IsNull(IsNull(K.GroupID, IsNull(C.PartGroupID,'')),'')            END AS PartGroupID,            IsNull(A.OEReference, B.OEReference) AS OEReference,         IsNull(SaleDone,0) AS [SALE/OUR],              IsNull(WarrantyDone, 0) AS [WARRANTY/WARRANTYOUR]      , ROW_NUMBER() OVER ( ORDER BY IsNull(PartGroupName, 'UnMapped')  ) AS rn       FROM  @Sale A FULL OUTER JOIN @Warranty B ON A.OEReference = B.OEReference            LEFT OUTER JOIN BBAPart K ON IsNull(A.OEReference,B.OEReference) = K.Stock_code            LEFT OUTER JOIN BBAPartGroup C ON K.GroupID=C.PartGroupID AND C.IsDeleted = 0         WHERE  PartGroupID IN (SELECT Data FROM dbo.stringtotable(@GroupID, ',') )     --AND rn&gt;= @StartIndex AND rn &lt;= @EndIndex       --ORDER BY IsNull(PartGroupName, 'UnMapped')    )  List_of_records   WHERE [rn] BETWEEN ((@StartIndex-1) * @EndIndex ) + 1 AND (@StartIndex * @EndIndex)   ORDER BY IsNull(PartGroupName, 'UnMapped')   END </code></pre>