<p>I like to refer a code which i have taken from this url</p>  <p><a href="https://msdn.microsoft.com/en-us/library/ms171624%28v=vs.110%29.aspx" rel="nofollow">https://msdn.microsoft.com/en-us/library/ms171624%28v=vs.110%29.aspx</a></p>  <p>The above url shown how we can load data by <code>datagridview</code> just on demand means when user scroll and reach a limit then data will load from db. My code is working but now i am in situation that i have to use a stored procedure from SQL Server which is very big and it return data after so many calculation. So I have to customize my code as a result it should be working with stored procedure instead of in-line SQL. From the above link anyone can see full working sample code. I just here highlight 3 routine from where in-line SQL fired to fetch data from db and this routine I need to change and want to call stored procedure from there instead of in-line SQL.</p>  <p>From this one route use in-line sql:</p>  <pre><code>public int RowCount {             get             {                 // Return the existing value if it has already been determined.                  if (rowCountValue != -1)                 {                     return rowCountValue;                 }                  if (filters.Trim().ToUpper().IndexOf("WHERE") &gt; -1)                 {                     filters = filters.ToUpper().Replace("WHERE", string.Empty);                 }                  // Retrieve the row count from the database.                 command.CommandText = "SELECT COUNT(*) FROM " + tableName + " WHERE 1=1 " + (filters.Trim().Length &gt; 0 ? " AND " : string.Empty) + filters;                 rowCountValue = (int)command.ExecuteScalar();                 return rowCountValue;             } } </code></pre>  <p>This routine too uses in-line SQL:</p>  <pre><code>public DataColumnCollection Columns {             get             {                 // Return the existing value if it has already been determined.                  if (columnsValue != null)                 {                     return columnsValue;                 }                  // Retrieve the column information from the database.                 command.CommandText = "SELECT * FROM " + tableName;                 SqlDataAdapter adapter = new SqlDataAdapter();                 adapter.SelectCommand = command;                 DataTable table = new DataTable();                 table.Locale = System.Globalization.CultureInfo.InvariantCulture;                 adapter.FillSchema(table, SchemaType.Source);                 columnsValue = table.Columns;                 return columnsValue;             } } </code></pre>  <p>This routine too</p>  <pre><code>public DataTable SupplyPageOfData(int lowerPageBoundary, int rowsPerPage) {             // Store the name of the ID column. This column must contain unique               // values so the SQL below will work properly.              if (columnToSortBy == null)             {                 columnToSortBy = this.Columns[0].ColumnName;             }              if (!this.Columns[columnToSortBy].Unique)             {                 throw new InvalidOperationException(String.Format(                     "Column {0} must contain unique values.", columnToSortBy));             }              // Retrieve the specified number of rows from the database, starting              // with the row specified by the lowerPageBoundary parameter.             if (filters.Trim().ToUpper().IndexOf("WHERE") &gt; -1)             {                 filters = filters.ToUpper().Replace("WHERE", string.Empty);             }              command.CommandText = "Select Top " + rowsPerPage + " " +                 CommaSeparatedListOfColumnNames + " From " + tableName +                 " WHERE 1=1 AND " + filters + " " + (filters.Trim().Length &gt; 0 ? " AND " : string.Empty) + columnToSortBy + " NOT IN (SELECT TOP " +                 lowerPageBoundary + " " + columnToSortBy + " From " +                 tableName + "  WHERE 1=1 " + (filters.Trim().Length &gt; 0 ? " AND " : string.Empty) + filters + " Order By " + sortColumn +                 ") Order By " + sortColumn;             adapter.SelectCommand = command;              DataTable table = new DataTable();             table.Locale = System.Globalization.CultureInfo.InvariantCulture;             adapter.Fill(table);             return table; } </code></pre>  <p>Now I want to use a stored procedure in one routine which replace other two routine.</p>  <p>I will develop the stored procedure with a 1st result will return no of rows and second result will return actual data.</p>  <p>This way I am paging in the stored procedure:</p>  <pre><code>WHERE [rn] BETWEEN ((@StartIndex-1) * @EndIndex ) + 1 AND (@StartIndex * @EndIndex) </code></pre>  <p>Now see the above routine called <code>SupplyPageOfData</code> how it is doing paging and tell me how to use <code>lowerPageBoundary</code> and <code>rowsPerPage</code> as a result I could send those two value in my sp and sp can do the successfully paging.</p>  <p><code>rowsPerPage</code> is fixed that is 16 but <code>lowerPageBoundary</code> jump by 16. so calculation is not coming to my mind like how to change code as a result i can send <code>lowerPageBoundary</code>  &amp; <code>rowsPerPage</code> to store proc and with in stored procedure I can form paging line like <code>WHERE [rn] BETWEEN ((@StartIndex-1) * @EndIndex ) + 1 AND (@StartIndex * @EndIndex)</code></p>  <p>Please help me with code and sample. thanks</p>