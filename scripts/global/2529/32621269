<p>I'm making a game in pygame, the full source code of which can be found here: </p>  <p><a href="https://github.com/hailfire006/games/blob/master/strategy%20game" rel="nofollow">https://github.com/hailfire006/games/blob/master/strategy%20game</a></p>  <p>Unfortunately, I'm running into some frame rate issues and everything I've read about this sort of problem says it's graphical, ie it's got nothing to do with the math and everything to do with drawing the sprites.</p>  <p>As such, I've narrowed the problem down to the following draw function of my npc class, which is called every frame for every npc in my "objects" list.  It's got a lot of sprite rotation, a set_colorkey, and a re-sizing. All of these things are probably quite costly, so is there a way I can re-write the following code to optimize it for performance?</p>  <p>PS: Sorry if what I'm asking or bits of the code are unclear, point it out if something is confusing and I'll edit my question. </p>  <pre><code>b = pygame.sprite.Sprite() b.image = pygame.image.load("soldier.png").convert() b.image.set_colorkey((0,0,0))  target = get_target(self) if target != 0:     angle = math.degrees(math.atan2(self.x - target[0], self.y - target[1])) + 90     b.image = pygame.transform.rotate(b.image,angle)     self.shoot(target)  if self.moving != False:     if abs(self.x - self.moving[0]) &lt; 1 and abs(self.y - self.moving[1]) &lt; 1:         self.moving = False     else:         self.move(self.moving)         if target == 0:             angle = math.degrees(math.atan2(self.x - self.moving[0],                   self.y - self.moving[1])) + 90             b.image = pygame.transform.rotate(b.image,angle)  b.image = pygame.transform.smoothscale(b.image,(50,50)) b.rect = b.image.get_rect() b.rect.topleft = [self.x - 20, self.y - 20] window.blit(b.image, b.rect) </code></pre>