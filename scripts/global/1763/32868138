<p>We have a Rest API with Jersey (v 2.12) +Moxy (v 2.6.0) (XML/JSON). I thought that Jersey caches the JaxbContext by default, but we checked the response times of the rest services, and we could see that the method MOXyJsonProvider.writeTo consumed more than 300 milliseconds.</p>  <p>The problem is that every response creates the context of JAXB, because Moxy never gets the context of the cache. In this piece of code, the line contextCache.put(domainClass, jaxbContext); is never executed.</p>  <pre><code>MOXyJsonProvider.writeTo -&gt;     -&gt; MOXyJsonProvider.getJAXBContext -&gt;     -&gt; MoxyContextResolver.getContext -&gt;     -&gt; JAXBContextFactory.createContext -&gt;-&gt; create JAXBContext and return it </code></pre>  <pre class="lang-java prettyprint-override"><code>protected JAXBContext getJAXBContext(Class&lt;?&gt; domainClass, Annotation[] annotations, MediaType mediaType,     MultivaluedMap&lt;String, ?&gt; httpHeaders) throws JAXBException { JAXBContext jaxbContext = contextCache.get(domainClass); if (null != jaxbContext) {     return jaxbContext; } ContextResolver&lt;JAXBContext&gt; resolver = null; if (null != providers) {     resolver = providers.getContextResolver(JAXBContext.class, mediaType); } if (null == resolver || null == (jaxbContext = resolver.getContext(domainClass))) {     jaxbContext = JAXBContextFactory.createContext(new Class[] { domainClass }, null);     contextCache.put(domainClass, jaxbContext);     return jaxbContext; } else if (jaxbContext instanceof org.eclipse.persistence.jaxb.JAXBContext) {     return jaxbContext; } else {     jaxbContext = JAXBContextFactory.createContext(new Class[] { domainClass }, null);     contextCache.put(domainClass, jaxbContext);     return jaxbContext; } } </code></pre>  <p>web.xml</p>  <pre class="lang-xml prettyprint-override"><code>&lt;servlet&gt;     &lt;servlet-name&gt;Rest&lt;/servlet-name&gt;     &lt;servlet-class&gt;org.glassfish.jersey.servlet.ServletContainer&lt;/servlet-class&gt;     &lt;init-param&gt;         &lt;param-name&gt;javax.ws.rs.Application&lt;/param-name&gt;         &lt;param-value&gt;com.rest.Aplication&lt;/param-value&gt;     &lt;/init-param&gt;        &lt;init-param&gt;         &lt;param-name&gt;jersey.config.server.provider.classnames&lt;/param-name&gt;         &lt;param-value&gt;org.glassfish.jersey.filter.LoggingFilter&lt;/param-value&gt;     &lt;/init-param&gt;      &lt;init-param&gt;         &lt;param-name&gt;jersey.config.server.wadl.generatorConfig&lt;/param-name&gt;         &lt;param-value&gt;es.selae.saga.usuarios.web.rest.wadl.SagaWadlGeneratorConfig&lt;/param-value&gt;     &lt;/init-param&gt;  &lt;/servlet&gt; </code></pre>  <p>com.rest.Aplication: Register MoxyXmlFeature, MoxyJsonFeature and MOXyJsonProvider.</p>  <pre class="lang-java prettyprint-override"><code>public class Aplication extends ResourceConfig {      private static final String CLASS_DTO_INCLUDE = "es.rest.include.dto";       /**      * Register JAX-RS application components.      *       * @throws ClassNotFoundException      */     public Aplicacion() throws ClassNotFoundException {          Class&lt;XmlRootElement&gt; annotacion = XmlRootElement.class;          ClassCandidateFinder candidateFinder= new ClassCandidateFinder(annotacion,                 CLASS_DTO_INCLUDE );          Class&lt;?&gt;[] classes = ClassPathFinder.findClasses(candidateFinder);         MoxyXmlFeature moxyXmlFeature = new MoxyXmlFeature(classes);         register(moxyXmlFeature);         register(MoxyJsonFeature.class);         register(MOXyJsonProvider.class); </code></pre>  <p>What should I change in Moxy get the JAXBContext from the cache?</p>