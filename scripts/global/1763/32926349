<p>My JWS application uses a library (also my code) that under the hood retrieves various XML documents from server:</p>  <pre><code>DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db = dbf.newDocumentBuilder();  Document doc = db.parse(xmlFileUrl); </code></pre>  <p>The contents at the URLs change from time to time, and application needs to re-fetch the content at start up and later while running.</p>  <p><strong>The problem is that JWS caches the content and returns cached content for subsequent requests.</strong></p>  <p>Telling JWS to remove cached content for the URL does work:</p>  <pre><code>DownloadService ds = (DownloadService)ServiceManager.lookup("javax.jnlp.DownloadService"); ds.removeResource(xmlFileUrl, null); </code></pre>  <p>But the library is used by other front ends, and I want to avoid making the library dependent on javaws.jar. My current solution defines an interface in the library that allows library to request cache clearing. JWS launcher passes an implementation of the interface to the library. There are multiple components that fetch various resources and while I can make it work, the whole thing is clumsy.</p>  <p>The XML documents are generated on the server. Setting header:</p>  <pre><code>Cache-Control: no-cache' </code></pre>  <p>does not help.</p>  <p>I am interested if there is a <strong>cleaner</strong> solution to this problem. If I could set some HTTP headers on server that would be ideal. Listing resources not to be cached in .jnlp would be acceptable but not ideal as URLs are constructed in the library and I'd have to significantly change the init code. Other methods and ideas are welcome.</p>