<p>First off, in this question I am just asking for suggestions/best approaches for my problem.</p>  <p>We are building a typical social network having around <strong>30000 users in total</strong> (say, 5k-10k logged in users at a time) with a <strong>Django/PostgreSQL</strong> backend and an <strong>AWS instance</strong>.</p>  <p>Now, I am trying to understand what would be the best cache combination with PostgreSQL to generate the feed and how to implement it. <strong>The feed will have the following characteristics:</strong></p>  <ol> <li>User can post publicly(normal post, video, picture).</li> <li>User can post in a community.</li> <li>User can comment on a post.</li> <li>User can like a post.</li> <li>User can share a post to facebook, twitter.</li> </ol>  <p><strong>I can't wrap my head around on:</strong></p>  <ol> <li>how to live update the feed for all the users. Basically, how to maintain so many live connections? Push notifications?</li> <li>what kind of cache to use. (NoSQL like Redis?)</li> <li>how and when to update the cache regularly in an efficient manner with new data.</li> </ol>  <p>I know this may sound vague, but I would really appreciate help as I dont want to make a wrong choice and suffer from scalability issues later.</p>