<p>I have a program that compiles and runs using win 32 platform in Visual Studio 2012. After changing the platform to X64, it gives the following error message:</p>  <p>" test_integration.cpp(27): error C2664: 'hcubature_v' : cannot convert parameter 2 from 'int (__cdecl *)(unsigned int,unsigned int,const double *,void *,unsigned int,double *)' to 'integrand_v' "  </p>  <p>Could anyone offer some suggestions? Thank you!</p>  <pre><code>#include &lt;iostream&gt; #include "cubature.h" #include &lt;ctime&gt; #include &lt;limits&gt; using namespace std;  int f_v(unsigned ndim, unsigned npts, const double *x, void *fdata, unsigned fdim, double *fval) {     double sigma = *((double *) fdata);     unsigned i, j;     for (j = 0; j &lt; npts; ++j) { // evaluate the integrand for npts points         double sum = 0;         for (i = 0; i &lt; ndim; ++i) sum += x[j*ndim+i] * x[j*ndim+i];         fval[j] = exp(-sigma * sum);     };     return 0; // success }  int main(){      double xmin[3] = {-2,-2,-2}, xmax[3] = {2,2,2}, sigma = 0.5;     double  val_v,err_v, time_v;     const clock_t begin_time_v = clock();      for (int j = 0; j&lt;1000;j++)     {     // hcubature_v calculates a multidimensional integration.     hcubature_v(1, f_v, &amp;sigma, 1, xmin, xmax, 0, 0, 1e-4, ERROR_INDIVIDUAL, &amp;val_v, &amp;err_v);     }      cout &lt;&lt; float( clock () - begin_time_v ) /  CLOCKS_PER_SEC&lt;&lt;endl;     printf("Computed integral   = %0.10g +/- %g\n", val_v, err_v);     cin.get(); } </code></pre>  <p>Here are some additional definitions:</p>  <pre><code>/* a vector integrand of a vector of npt points: x[i*ndim + j] is the    j-th coordinate of the i-th point, and the k-th function evaluation    for the i-th point is returned in fval[i*fdim + k].  Return 0 on success    or nonzero to terminate the integration. */ typedef int (*integrand_v) (unsigned ndim, size_t npt,                 const double *x, void *,                 unsigned fdim, double *fval);  /* as hcubature, but vectorized integrand */ int hcubature_v(unsigned fdim, integrand_v f, void *fdata,         unsigned dim, const double *xmin, const double *xmax,          size_t maxEval, double reqAbsError, double reqRelError,          error_norm norm,         double *val, double *err); </code></pre>