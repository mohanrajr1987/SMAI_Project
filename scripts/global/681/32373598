<p>I've just started to learn assembler (2 days ago) for x86 arch (but I program on x86_64 see below). I want to read in 2 numbers and for that I use Linux system calls (64 bit system). Well I looked up the corresponding numbers for read/write in unitstd_64.h and seems to work. But one thing bothers me (first the code):</p>  <pre><code>section .data prompt1 db "Enter a number: ", 0 lenMsg equ $-prompt1 outmsg db "Entered: ", 0 lenOut equ $-outmsg  section .bss input1 resd 1 input2 resd 1  segment .text global _start  _start: mov rax, 1 mov rdi, 1 mov rsi, prompt1 mov rdx, lenMsg syscall  ;read input number 1 mov rax, 0 mov rdi, 2 mov rsi, input1 mov rdx, 1 syscall  ;prompt another number mov rax, 1 mov rdi, 1 mov rsi, prompt1 mov rdx, lenMsg syscall  ;read input number 1 mov rax, 0 mov rdi, 2 mov rsi, input2  mov rdx, 1 syscall  ;exit correctly mov rax, 60 mov rdi, 0 syscall </code></pre>  <p>The program does the following:</p>  <ol> <li>Shows prompt1 </li> <li>Let the user enter a number </li> <li>Shows prompt1 again</li> <li>quits (should'nt it let the user enter a number instead of quitting?)</li> </ol>  <p>Why is the fourth syscall simply ignored? Thanks in advance.</p>  <p>edit:  I use nasm. Object file created with nasm -f elf64 bla.asm. Linked with ld -o bla bla.o</p>