<p>I'm currently reading a very informative and good-to-follow book about C-Security and currently there is a chapter about Assembly.  Considering the following C-Code:</p>  <pre><code>1 void funktion (int a, int b, int c) 2 { 3         int  buff1[5]; 4         char buff2[10]; 5         buff1[0] = '6'; 6         buff2[0] = 'A'; 7         buff2[1] = 'B'; 8 } 9  10 int main (void) 11 { 12     int  i = 1;          13     funktion (1, 2, 3);   14     return 0; 15 } </code></pre>  <p>When I debug the executable in <code>gdb</code> and <code>disassemble main</code>, I get the following output:</p>  <pre><code> # -----------FUNC_PROLOG----------  24 0x00000000004004d4 &lt;+0&gt;:        push   %rbp  28 0x00000000004004d5 &lt;+1&gt;:        mov    %rsp,%rbp   33 0x00000000004004d8 &lt;+4&gt;:        sub    $0x10,%rsp  34   #----------FUNC_OPERATIONS----------  39 0x00000000004004dc &lt;+8&gt;:        movl   $0x1,-0x4(%rbp)  43 0x00000000004004e3 &lt;+15&gt;:       mov    $0x3,%edx  44 0x00000000004004e8 &lt;+20&gt;:       mov    $0x2,%esi  45 0x00000000004004ed &lt;+25&gt;:       mov    $0x1,%edi </code></pre>  <p>The book I'm reading is from 2003, so I know that my compilation doesn't look exactly the same as like in the book, so I interpret this instruction (line 33) as the enlargement of the current stack-frame. In the book, there's a decrementation (= enlargement of the stack-frame) by 4 bytes, and I have a dec by 16 bytes: I think this is an optimation they made, so that the size of local var's (<code>int i</code> = 4 bytes) + the size of the parameters (<code>int a, int b, int c</code> = 12 bytes) = <strong>16</strong> bytes are allocated directly at the stack, and not pushing the stack each time, which is less efficient. However this could be a misinterpretation of mine which is relevant for the real question I have:</p>  <p>From line 43-45 the parameters are stored in reversed order, <em>but they are stored in registers</em>, <strong>not</strong> at the stack, how you can see there.</p>  <p><em>So why is there memory allocated for the parameters at the stack, although they are not stored at the stack?</em></p>  <p>Btw-Questions:</p>  <ul> <li>At line 28 you can see a <code>mov</code> instruction. Why? I thought <code>AT&amp;T</code> needs a size-suffix.</li> <li>Is it possible to adjust gdb so, that I see <em>direct values</em> in decimal, not in hexadecimal base?</li> </ul>