<p>In another post, I asked a coding question and in the source code to that question, I declared some variables in the following manner:</p>  <pre><code>char datablock[200]; char *pointer1=datablock; char *pointer2=datablock+100; </code></pre>  <p>However someone mentioned that the code may be incompatible with 64-bit systems because 100 isn't divisible by 8? I can't remember what it was.</p>  <p>But what I want to do is reserve a huge chunk of memory for use with my program and make it execute as fast as possible and I remember because of the way system caching memory works, that using data from the same block of memory is faster than using data from separate blocks. using malloc is also asking for slower memory.</p>  <p>So in code, This is an example of what I want to do. I want to allocate 40,000 bytes and give 4 pointers access to 10,000 bytes each:</p>  <pre><code>char data[40000]; char *string0=data; char *string1=data+10000; char *string2=data+20000; char *string3=data+30000; </code></pre>  <p>This however is not what I want to do as I believe different sections of memory will be accessed:</p>  <pre><code>char string0[10000]; char string1[10000]; char string2[10000]; char string3[10000]; </code></pre>  <p>I believe my idea is correct but is the only thing I need to be concerned about is that for 64-bit systems the offset value is a multiple of 8 and for 32-bit systems the offset value is a multiple of 4?</p>  <p>I don't want to pick wrong numbers and receive segmentation faults.</p>