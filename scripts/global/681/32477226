<p>I am currently running the "14.0.23103.0 D14REL" of Visual Studio 2015 and noticed a strange design time exception regarding my custom UI controls which implement the <strong>ICommandSource</strong> interface. What is even more interesting is the fact that the issue is only present if the <strong>targeted platform</strong> is <strong>x64</strong>. When setting the Command property of a custom control which comes from the  implementation of the above interface an "<strong>The property "Command" does not have an accessible setter</strong>" exception is thrown by the VS designer.</p>  <p>Is this a known issue of Visual Studio 2015 when the platform is x64 or am I missing something. Here is some code of my implementation.</p>  <ul> <li><p>The View</p>  <pre><code>&lt;Grid&gt;     &lt;local:MyControl MySecondCommand="{Binding MyCommand}"                          Command="{Binding MyCommand}"/&gt; &lt;/Grid&gt; </code></pre></li> <li><p>The custom Control</p>  <pre><code>public class MyControl : Control, ICommandSource {     public static readonly DependencyProperty MySecondCommandProperty =         DependencyProperty.Register("MySecondCommand", typeof(ICommand), typeof(MyControl), new PropertyMetadata(null));      public ICommand MySecondCommand     {         get { return (ICommand)this.GetValue(MySecondCommandProperty); }         set { this.SetValue(MySecondCommandProperty, value); }     }      public static readonly DependencyProperty CommandProperty =         DependencyProperty.Register("Command", typeof(ICommand), typeof(MyControl), new PropertyMetadata(null));      public ICommand Command     {         get { return (ICommand)this.GetValue(CommandProperty); }         set { this.SetValue(CommandProperty, value); }     }      public object CommandParameter     {         get         {             throw new NotImplementedException();         }     }      public IInputElement CommandTarget     {         get         {             throw new NotImplementedException();         }     } } </code></pre></li> </ul>