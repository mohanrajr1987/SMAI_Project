<p>I have a strange CLR <strong>OutOfMemoryException</strong> in a <strong>64bit C++/CLI</strong> process which has mixed native and managed C++ code inside. The process has the following structure:</p>  <ol> <li>Native C++ code (Main binary) </li> <li>Managed C++/CLI code (Main binary)  </li> <li>C# code (External assembly)</li> </ol>  <p>Both main binary and external assembly are built for x64 platform. The managed C++/CLI layer (2) serves as an adapter between native C++ code (1) and C# code (3) which is actually a UI layer working with WPF. .NET Framework version is 4.0.</p>  <p>So I have the Main Binary (1 and 2) built with /MACHINE:X64 and /CLR which makes native C++ code (1) to work perfectly with >4Gb of memory consumed by the process, but C++/CLI layer code (2) throws an OutOfMemoryException once I step close to 4Gb. So far it happens in relatively random places but every time I saw it was in Managed-to-Native transitions when C++/CLI code tried to access a native method.  </p>  <p>It seems like C++/CLI code inside Main binary doesn't feel itself as a x64-ready code, while the tools tell that the binary is in PE+ 64bit ready format and the native code works well with >4Gb. According to ANTS memory profiler and CLRProfiler the managed heaps are almost empty (several hundred of kb).</p>  <p>What could I miss? Doesn't it look like I'm linking to wrong .NET framework assemblies which are not x64-ready? Where should I look first?  </p>  <p>Thanks in advance for any help! </p>