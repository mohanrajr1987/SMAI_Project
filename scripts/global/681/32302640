<p>Below is my attempt at implementing a fast popcount for AArch64 using NEON:</p>  <pre><code>#include &lt;stdio.h&gt;  int count_bits(unsigned long long val) {   unsigned long long p = 0;   int c = 0;   __asm__("DUP  %0.2d, %2        \n\t"           "CNT  %0.8b, %0.8b     \n\t"           "ADDP d0, %0.2d        \n\t"           "UMOV %1, d0           \n\t"           : "+w"(p), "+r"(c)           : "r"(val) : "d0");   return c; }  int main(int argc, const char *argv[]) {   printf("Test: %i\n", count_bits(-1ull));   return 0; } </code></pre>  <p>And the error:</p>  <pre><code>$ gcc test.c -o test Error: operand 2 should be a SIMD vector element -- `umov x0,d0' </code></pre>  <p>I'm also not very sure about the <code>ADDP</code> instruction, the specifier suggests that it adds 2 dwords, but the result of <code>CNT</code> instruction is stored as 8 bytes (<code>%0.8b</code> in <code>ADDP</code> doesn't work). Shouldn't I rather use <code>UADALP</code> for summing the components ?</p>