<p>I am trying to design a Postgres database for holding a variety of information about users and see two obvious ways to go about it - specifically, the different many-many relations.</p>  <ol> <li><p>Store the basic user data in a <em>user_info</em> table. In separate tables, store the many-many relations like what schools someone attended, places they worked at, and so on. There will be a large number of such tables, (it is easy to add things like what places someone visited, what books they've read, etc. etc. I expect this to grow to a rather large list of tables). </p></li> <li><p>In the main <em>user_info</em> table, store a JSON blob (properly organized of course) with all this additional info. </p></li> </ol>  <p>Which of these two options should I choose? Naturally, read performance is more important. I know that JSON is generally slower than ordinary relational tables but I am unsure if looking up info from a lot of different tables (as in option 1) will be slower than getting a single json blob and displaying it in the browser. As a further note, the JSONB format, in Postgres, actually has good indexing options. </p>  <p>Update: Following some comments that a graphdb is what needs to be used: I should clarify the question is <strong>not</strong> about the choice of technology (rdbms vs graph db). But about the choice of data type given the technology (rdbms). </p>