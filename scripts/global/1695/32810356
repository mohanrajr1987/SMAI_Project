<p>This is for a Punch Clock system (where employees can check in/out, go to break etc). </p>  <p>I've decided to go with the event-based design (eg. a table for events and a table for the normalized and basic data.)</p>  <pre><code>Class WorkEntry:      user: FK(User)      message: Text..       basic stuf...   Class PunchClockEvent:       workentry: FK(WorkEntry)      timestamp:       event_code: (check_in, check_out, break_begin, break_done)      client_info: #some IP, device stuff..  </code></pre>  <p>Django is the backend. The frontend will be React and it will (pref.) be running on websockets. Except sometimes in old browsers when poll'ing will be used because of well.. you know... Evil Corps, IT staff and old IEs. </p>  <p><strong>Now the question:</strong></p>  <p>How do I prevent more than one PunchClockEvent being added at a time??  select_for_update() doesn't really help since the WorkEntry object isn't the one being edited. But since the backend/API stuff for this must handle both a react webapp and (down the road) mobile clients - I don't want the same PunchClockEvent being added two times in a row. Of course, double entries shouldn't happen and the code must check the most recent PunchClockEvent for a particular WorkEntry.  But I'm thinking race conditions, slow internet for cellular devices etc. where the data isn't neccessary up to date and where the "PunchClock-Dashboard" is open on multiple screens - and then multiple users who can do stuff. </p>  <p><strong>How would you go about it?</strong> </p>  <p>Am I being paranoid? And overthinking this part of it??</p>  <p>Other posts mentions putting a "version" attribute on the object in question(which would have to be WorkEntry). But it just seems like there's a more obvious way?? </p>  <p>Should I lock the WorkEntry object while creating a new PunchClockEvent?</p>  <p>Any input is greatly appreciated :) </p>