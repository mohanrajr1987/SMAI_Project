<p>Currently scoping out a new system. Like many systems, it will be required to store documents and link them to other kinds of item. In this instance a <code>Document</code> object can belong to a <code>Job</code> or it can belong to an <code>Item</code> (which in turn belongs to a Job).</p>  <p>We could do this by having a JobId and an ItemId against a <code>Document</code> and leaving one or the other blank if necessary, but that's going to mean annoying conditional logic in the handling code. So, two link tables seems a better idea.</p>  <p>However, it is likely that we will need to link <code>Documents</code> to other items in the system at some point in the future. There are <code>Company</code> and <code>User</code> objects, for example, and we might want to record <code>Documents</code> against those. There may be more.</p>  <p>That would entail a proliferation of link tables which, while effective, is messy and hard to follow.</p>  <p>This solution is in SQL Server and will be handled in code via Entity Framework.</p>  <p>Are there any design principles that can allow us to hook up <code>Document</code> objects with a variety of other system objects as required in a neater and more flexible way?</p>