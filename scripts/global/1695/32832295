<p>I will try to be as specific as possible, but I am having trouble conceptualizing the problem. As a hobby I am trying to design a NFL database that takes raw statistics and stores it for future evaluation for fantasy league analysis. One of the primary things I want to see is if certain players/teams perform well against specific teams and which defenses are suspect to either pass/run. The issue I am having is trying to design the schedule/event table. My current model is as follows.</p>  <pre><code>TEAMS TeamID, Team  SCHEDULE ScheduleID, TeamID, OpponentID, Season, Week, Home_Away, PointsFor, PointsAgainst </code></pre>  <p>In this scenario I will be duplicating every game, but when I use an event table where I use TeamAway and TeamHome I find my queries impossible to run since I have to query both AwayTeam and HomeTeam to find the event for a specific team.</p>  <p>In general though I cannot get a query to work where I have two relationships from a table back to one table, even in the schedule table my query does not work. </p>  <p>I have also considered dropping the team table and just storing NE, PIT, etc. for the Team and Opponent fields so I do not have to deal with the cross-relationships back to the team table.</p>  <p>How can I design this so I am not running queries for TeamID = OpponentID AND TeamID?  </p>  <p>I am doing this in MS Access.</p>  <hr>  <h2>Edit</h2>  <p>The issue I am having is when I query two table: Team (TeamID, Team) and Event(TeamHomeID, TeamAwayID), that had relationships built between the TeamID - TeamHomeID, and TeamID - TeamWayID I had issues building the query in ms Access. </p>  <p>The SQL would look something like:</p>  <pre><code>SELECT Teams.ID, Teams.Team, Event.HomeTeam     FROM Teams INNER JOIN (Event INNER JOIN Result ON Event.ID = Result.EventID)         ON (Teams.ID = Result.LosingTeamID) AND (Teams.ID =   Result.WinningTeamID)      AND (Teams.Team = Event.AwayTeam) AND (Teams.Team = Event.HomeTeam); </code></pre>  <p>It was looking for teams that had IDs of both the losing team and the winning team (which does not exist).</p>  <p>I think I might have fixed this problem. I didn't realize the Relationships in database design are only default, and that within the Query builder I could change the joins on which a particular query is built. I discovered this by deleting all the AND portions of the SQL statement returned, and was able to return the name of all winnings teams.</p>