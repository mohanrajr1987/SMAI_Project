<p>Actually it is quite cool to use this as an auth service that handles different apps or resource servers. I want to use it as an central auth instance. So the only point that is missing actually for it is that I can login/register alternatively with Facebook or Google or something like this at the Auth Service.</p>  <p>So actually I need a new <code>grantType</code> or? that takes up the <code>signed_request</code> that is returned e.g. by FaceBook and validated so that I can somehow create the new token for our system.</p>  <p>So add new <code>grantType</code> to config file and storage map too // e.g.:</p>  <pre><code>'storageMap' =&gt; [   'user_credentials' =&gt; 'api\models\User',   'federation_credentials' =&gt; 'api\models\Auth' ], 'grantTypes' =&gt; [   'client_credentials' =&gt; [     'class' =&gt; 'OAuth2\GrantType\ClientCredentials',     'allow_public_clients' =&gt; false   ],   'user_credentials' =&gt; [     'class' =&gt; 'OAuth2\GrantType\UserCredentials'   ],   'refresh_token' =&gt; [     'class' =&gt; 'OAuth2\GrantType\RefreshToken',     'always_issue_new_refresh_token' =&gt; true   ],   'federation_credentials' =&gt; [     'class' =&gt; 'api\components\auth\ExternalCredentials'   ] ], </code></pre>  <p><code>ExternalCredentials</code> may look like this? (could not test it) and a new Model is set e.g. <code>Auth</code> where the PDO is defined:</p>  <pre><code>    namespace api\components\auth;      use OAuth2\GrantType\GrantTypeInterface;     use OAuth2\RequestInterface;     use OAuth2\ResponseInterface;     use OAuth2\ResponseType\AccessTokenInterface;      class ExternalCredentials implements GrantTypeInterface     {         private $userInfo;          protected $storage;          public function __construct(ExternalCredentialsInterface $storage)         {             $this-&gt;storage = $storage;         }          public function getQuerystringIdentifier()         {             return 'signed_request';         }          public function validateRequest(RequestInterface $request, ResponseInterface $response)         {             if (!$request-&gt;request("signed_request")) {                 $response-&gt;setError(400, 'invalid_request', 'Missing parameters: "username" and "password" required');                  return null;             }              if (!$this-&gt;storage-&gt;checkUserCredentials($request-&gt;request("signed_request"))) {                 $response-&gt;setError(401, 'invalid_grant', 'Invalid signed request');                  return null;             }              $userInfo = $this-&gt;storage-&gt;getUserDetails($request-&gt;request("signed_request"));              if (empty($userInfo)) {                 $response-&gt;setError(400, 'invalid_grant', 'Unable to retrieve user information');                  return null;             }              if (!isset($userInfo['user_id'])) {                 throw new \LogicException("you must set the user_id on the array returned by getUserDetails");             }              $this-&gt;userInfo = $userInfo;              return true;         }          public function getClientId()         {             return null;         }          public function getUserId()         {             return $this-&gt;userInfo['user_id'];         }          public function getScope()         {             return isset($this-&gt;userInfo['scope']) ? $this-&gt;userInfo['scope'] : null;         }          public function createAccessToken(AccessTokenInterface $accessToken, $client_id, $user_id, $scope)         {             return $accessToken-&gt;createAccessToken($client_id, $user_id, $scope);         }     } </code></pre>  <p>And now I have to manually add to filsh's and bshaffer's repo the new <code>grantType</code>? This seems not like the perfect way. How can I add my own grant_type in a clean way to check: "Oh okay you are logged in with Facebook, I found your key, welcome here is the access-token for the resource servers"</p>