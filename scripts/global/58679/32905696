<h3>Background</h3>  <ul> <li>We have developed a web application featuring a rest-api using oauth2/oidc and support for third party apps</li> <li>We have developed our own native apps for android and ios. Currently they retrieve a long lived token from user credential flow (no consent screen needed).</li> <li>We are currently extending our authentication flow to also accept external login by google/office365. This is also supported by specifying acr value in authorization code/implicit oauth flow.</li> </ul>  <h3>Issue/Problem</h3>  <ul> <li>We of course want to be able to fully trust our native app and not show a consent screen for the best user experience. While using the authorization code/implicit flow though nothing can be considered a secret and a malicious hacker could potentially exploit (without user knowledge) the user if no consent screen is shown. </li> <li>How can we avoid having to show consent screen for our own native app while still being sure user is as safe as possible?</li> </ul>  <h3>How to solve?</h3>  <ol> <li>Doing a separate office365/google login to retrieve refresh token from this idp and then implementing a way to publicly authenticate using this token to retrieve a longlived token from our webapp.</li> <li>Simply ignore security flaw and never ask for user consent given the nonsecret mix of `clientId/clientSecret/redirectUrl` with the excuse "it's quite difficult to hack this".</li> <li>Ignoring security flaw if external login with the excuse "google/office365 should show a consent screen anyhow when requesting a refresh token".</li> <li>Some unknown way to make sure that its not a malicious app/user</li> </ol>  <p>The reason i don't like (1) above is it both opens up a somewhat new authentication flow in our webapp and forces native app to implement a more complex authentication flow.</p>  <p>Is there something im missing here, what would be considered best practise?</p>