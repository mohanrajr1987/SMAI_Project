<p>Suppose you have a select element like this:</p>  <pre><code>&lt;select id="Stooge" name="Stooge"&gt;     &lt;option value="0"&gt;Moe&lt;/option&gt;     &lt;option value="1"&gt;Larry&lt;/option&gt;     &lt;option value="2"&gt;Curly&lt;/option&gt; &lt;/select&gt; </code></pre>  <p>According to the <a href="https://html.spec.whatwg.org/#named-access-on-the-window-object" rel="nofollow">spec</a>, when the browser parses this page, it creates a globally scoped javascript variable <code>window.Stooge</code>. So far so good.</p>  <p>In my TypeScript code, I want to refer to the options in a strongly typed way, so I have the following:</p>  <pre><code>enum Stooge {   Moe,   Larry,   Curly } </code></pre>  <p>This is compiled to javascript like so:</p>  <pre><code>var Stooge; (function (Stooge) {     Stooge[Stooge["Moe"] = 0] = "Moe";     Stooge[Stooge["Larry"] = 1] = "Larry";     Stooge[Stooge["Curly"] = 2] = "Curly";  })(Stooge || (Stooge = {}));  &lt;---error here </code></pre>  <p>My problem is: in every browser <strong>except</strong> Safari, this works fine. But in Safari, I get the following error:</p>  <pre><code>YourFile.js:[Line X]TYPE_MISMATCH_ERR: DOM Exception 17: The type of an object was incompatible with the expected type of the parameter associated to the object. </code></pre>  <p>This only happens with an enum that happens to have the same name as a DOM element, and I imagine this is because there's a conflict between the two definitions, except that this same code does NOT cause any error other than in Safari.</p>  <p>So, why does it work in other browsers and is there a way to work around this in Safari? (I could rename the enum or the DOM element, but I'd like to avoid the need for artificial naming conventions if possible.)</p>