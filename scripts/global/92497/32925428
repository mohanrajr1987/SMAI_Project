<p>I'm creating a simple Wizard component which also has a Wizard.Step component. At first I tried setting the style on the Wizard.Step components directly, but this did not work. Changing instead to pass in an <code>isShown</code> prop and letting the Wizard.Step component handle the hiding/showing works. This is fine, but I want to understand why my first approach didn't work.</p>  <p>This is how to use the component:</p>  <pre><code>  &lt;Wizard&gt;     &lt;Wizard.Step title="Configuration"&gt;       Form!     &lt;/Wizard.Step&gt;     &lt;Wizard.Step title="Confirm"&gt;       Confirm!     &lt;/Wizard.Step&gt;   &lt;/Wizard&gt; </code></pre>  <p>This is my working solution:</p>  <pre><code>import React from 'react/addons'; import PureComponent from '../PureComponent/PureComponent.jsx';  export default class Wizard extends React.Component {   static propTypes = {     children: React.PropTypes.node.isRequired   }    state = {showingIndex: 0};    constructor(props) {     super(props);   }    next = () =&gt; {     this.goToIndex(this.state.showingIndex + 1);   }    prev = () =&gt; {     this.goToIndex(this.state.showingIndex - 1);   }    goToIndex(index) {     this.setState({showingIndex: index});   }    renderWizardStep = (wizardStep, index) =&gt; {     return React.cloneElement(wizardStep, {isShown: index === this.state.showingIndex});   }    getButtonStyles = () =&gt; {     const prev = {};     const next = {};      if (this.state.showingIndex === 0) {       prev.display = 'none';     }      if (this.state.showingIndex === React.Children.count(this.props.children) - 1) {       next.display = 'none';     }      return {prev, next};   }    render() {     const buttonStyles = this.getButtonStyles();      return (       &lt;div&gt;         &lt;header&gt;         &lt;/header&gt;         &lt;div&gt;           {React.Children.map(this.props.children, this.renderWizardStep)}         &lt;/div&gt;         &lt;footer&gt;           &lt;button style={buttonStyles.prev} onClick={this.prev}&gt;Previous&lt;/button&gt;           &lt;button style={buttonStyles.next} onClick={this.next}&gt;Next&lt;/button&gt;         &lt;/footer&gt;       &lt;/div&gt;     );   } }  Wizard.Step = class Step extends PureComponent {   static propTypes = {     isShown: React.PropTypes.bool   };    static defaultProps = {isShown: false};    constructor(props) {     super(props);   }    render() {     const style = {};      if (!this.props.isShown) {       style.display = 'none';     }      return (       &lt;div style={style}&gt;         {this.props.children}       &lt;/div&gt;     );   } }; </code></pre>  <p>And what I tried originally was:</p>  <pre><code>render WizardStep = (wizardStep, index) =&gt; {   if(index === this.state.showingIndex) return wizardStep;   const style = {display: 'none'};     return React.cloneElement(wizardStep, {style});  } </code></pre>  <p>Is it something odd about setting style as a prop via React.cloneElement?</p>