<p>I feel the spaghetti sneaking in on me, in my code, and I find it hard to find best practices and general flow in ReactJS apps, beside the "pass data downwards to childs".</p>  <p>So, if you have two classes, I would pass information downwards like this:</p>  <pre><code>var TodoList = React.Class({      render: function(){            return(                 &lt;div&gt;{this.props.data}&lt;/div&gt;            );      } });  var TodoCreate = ReactClass({     render: function(){         return (             &lt;TodoList data={this.state.data} /&gt;         );     } }); </code></pre>  <p>if I want to trigger somthing in the parent I would pass in the function as a prop to the child:</p>  <pre><code>&lt;TodoList handleSomething={this.handleSomethingFunction} /&gt; </code></pre>  <p>Easy enough, but how do you handle data communication between two different UI elements? In my specific case, I have a UI component, with it's own set of react classes, these talk fine internally, but when a specific task ends, I need to trigger an update in another UI component, an example of the relationship:</p>  <pre><code>var ActionPanel = React.createClass({    render: function(){         return(              &lt;ActionPanelChild /&gt;              ...         );    } });  var ActionPanelChild = React.createClass({    someTask: function(){         var runs = 0;         var intId = setInterval(function(){             console.log("Running some specific task");            runs++;            if(runs == 10){                 clearInterval(intId);                 /*                  * So here I should trigger the SomeUIPanel.state.number++ event, which cause SomeUIPanel to re-render and update.                  */            }         }, 1000);    },    render: function(){         return(              &lt;div&gt;Some html&lt;/div&gt;         );    } }); </code></pre>  <p>Then the other panel which should receive an update in its state when the task "someTask" ends:</p>  <pre><code>var SomeUIPanel = ReactClass(){      getInitialState: function(){           return { number: 0 };      },      render: function(){           return(                &lt;div&gt;{this.state.number}&lt;/div&gt;           );      } } </code></pre>  <p>Should I gather the two objects in a wrapping React class/component? </p>  <p>And as a followup, when I have a wrapping class, should the outer-most component contain the entire state-data for all child components? The context I have is that I receive some data via AJAX, and that needs to rest at some place. Currently i then split that data up in new objects and pass the relevant parts down to the childs (in some cases with an instance of a property in more than one child).</p>