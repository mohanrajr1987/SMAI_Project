<p>I'm implementing <a href="https://facebook.github.io/immutable-js/" rel="nofollow">Immutable.js</a> in a set of <a href="https://facebook.github.io/react/" rel="nofollow">React</a> components with props containing objects, where Immutable has not been used before.</p>  <p>While I was rewriting all <em>{ someProp.someValue }</em> to <em>{ someProp.get("someValue") }</em> (since Immutable don't have the props directly accessable), I am just wondering if it could have been possible to have the object properties directly accessable while the object is still immutable.</p>  <p>I guess the reason is that if they where directly accessable, they would be mutable because that's how javascript objects work. However, could it not be possible to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze" rel="nofollow">freeze</a> the objects (in browsers supporting it of course), and still have the mutating methods (.set, .map etc) create copies instead of changing the object itself the way Immutable work?</p>  <p>Is that technically possible, and is there any library doing something like this allready?</p>