<p>I found myself wanting to return a 180 degree hue-rotated color from a function. My project's using D3, so that's the library I'm using to do this. Unfortunately, D3 doesn't come with a function to rotate the hue.</p>  <p><strong>This question is not specific to D3, I'm just using it as an example.</strong></p>  <p>So I had to do something like this:</p>  <pre><code>var c = d3.hsl(colorString); c.h += 180; return c; </code></pre>  <p>Concise, but it's three expressions. Doesn't scratch my nerd itch. What I wish I could do is:</p>  <pre><code>return d3.hsl(colorString).h += 180 </code></pre>  <p>but obviously that just returns the value of <code>h</code>, not the entire object.</p>  <p>Here is the ridiculous construction I had to resort to, using some Underscore.js:</p>  <pre><code>return  _.create(Object.getPrototypeOf(d3.hsl()),         _.mapObject(d3.hsl(colorString), function(val, key) {             return key === "h" ? val + 180 : val;         })); </code></pre>  <p>See, I can't just return the result of <code>mapObject()</code> because it still needs to use the prototype of what <code>d3.hsl()</code> returns, which is why I needed to wrap that in a <code>create()</code>.</p>  <p>So this works. It's just kind of ridiculous.</p>  <p>Is there any way that I could do something in one line, such as...</p>  <pre><code>return d3.hsl(colorString).with180AddedToH(); </code></pre>