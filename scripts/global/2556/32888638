<p>I am considering using a message queue (ZeroMQ) to battle (Python's) concurrency issues, and even better, the ability for pure distribution (local/remote workers).</p>  <p>With this, I started to consider everything in terms of input/ouput functions. After some googling I discovered this is quite seriously connected to stateless/functional programming.</p>  <p>Here comes the issue.</p>  <p>I'd have a pretty large configuration file (so it seems silly to constantly keep sending it) that I'd want to be read at startup time, but could potentially be updated (by some "update_config" function which listens on a socket).</p>  <p>The internal state of a process/worker pool would have access to a "state" (config); it would be an instance variable. </p>  <p>It could only be updated by a ZMQ message, and functions depending on it would still have (config) as an argument (or perhaps it could still simply be "used" from <code>self.config</code>?)</p>  <p>I'm just wondering though: is this the correct way to handle configuration?</p>