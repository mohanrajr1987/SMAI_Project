<p>I created a function and helper function that find the number of repeating elements in a list, and what those elements.</p>  <pre><code>let rec _encode l x =   match l with   | [] -&gt; 0   | head::rest -&gt; (if head = x then 1 else 0) + encode rest x  let encode l x = ((_encode l x), x) </code></pre>  <p>In this case, I have to specify what that element is for it to search.</p>  <p>So this is a two part question. 1) How do I do it to return a list of tuples, with format <code>(int * 'a) list</code>, where <code>int</code> is the # of rep, and <code>'a</code> is the element that is repeating.</p>  <p>2) How would I implement this using fold_right?</p>  <p>I was thinking something along the lines of:</p>  <pre><code>let encode (l : 'a list) : (int * 'a) list = fold_right (fun (x,hd) lst -&gt;      match x with      | [] -&gt; 0     | hd :: rest -&gt; if hd x then (x+1, hd) else (x, hd)) l []  </code></pre>