<h2>The paradigm dilemma</h2>  <p>I've read that Javascript lays between two concepts, the <a href="http://stackoverflow.com/tags/functional-programming/info">functional</a> and the <a href="http://stackoverflow.com/questions/tagged/oop">Object-Oriented</a> programming paradigms.</p>  <p>Nevertheless, i also read that javascript can be <strong>Modular</strong>, <strong>Procedural</strong>, <strong>Structured</strong> and <strong>Interpreted</strong>. However, the ultimate definition that i was used to hear is that JS is <strong>event-driven</strong> only.</p>  <h2>The question</h2>  <p>Think about the above assumptions led me to the question: </p>  <p>At the end of the day, what defines Javascript's programming paradigm is the <em>use case</em> itself? (for example: <em>Well, this one is going to be a functional code</em>)</p>  <p>Or we always have mixed paradigms in the JS development and a single paradigm is a kind of abstraction used to better understand the use case as a whole?</p>  <hr>  <p>Can I take a javascript code and say: this specific code <strong>is</strong> Functional programming? Or paradigms such as <strong>Functional programming</strong> serves as an abstraction to understand patterns in a javascript code?</p>