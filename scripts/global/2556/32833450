<p>I'm sorry if this EXACT question has already been asked...</p>  <p>I've got a sudoku assignment in Haskell and would appreciate some feedback here.</p>  <p>The goal is to implement a function that represents a Sudoku that contains only blank cells, and then name it <code>allBlankSudoku :: Sudoku</code>, where</p>  <pre><code>data Sudoku = Sudoku [[Maybe Int]] </code></pre>  <p>You should use list comprehensions or the map function to do this,</p>  <pre><code>map :: (a -&gt; b) -&gt; [a] -&gt; [b] </code></pre>  <p>This is my take on it: </p>  <pre><code>allBlankSudoku :: Sudoku  allBlankSudoku = Sudoku (map (replicate 9) (replicate 9 Nothing)) </code></pre>  <p>BUT! Here is my question: In the instructions it says "Do not use copy-and-paste programming here! Your definition does not need to be longer than a few short lines."</p>  <p>So, is my code above copy-and-paste or not? Is there an additional way I can do it? Note: This is just the first task out of 3 so I don't think it's supposed to be difficult.</p>