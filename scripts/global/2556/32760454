<p>So let me start by saying this was part of a past homework I couldn't solve but as I am preparing for a test I would like to know how to do this. I have these implementations of map_tree and fold_tree provided by the instructor:</p>  <pre><code>let rec map_tree (f:'a -&gt; 'b) (t:'a tree) : 'b tree = match t with | Leaf x -&gt; Leaf (f x) | Node (x,lt,rt) -&gt; Node (f x,(map_tree f lt),(map_tree f rt))  let fold_tree (f1:'a-&gt;'b) (f2:'a-&gt;'b-&gt;'b-&gt;'b) (t:'a tree) : 'b =   let rec aux t =     match t with      | Leaf x -&gt; f1 x      | Node (x,lt,rt) -&gt; f2 x (aux lt) (aux rt)    in aux t </code></pre>  <p>I need to implement a function that verifies a tree is a BST using the above functions, so far this is what I've accomplished and I'm getting the error: </p>  <pre><code> Error: This expression has type bool but an expression was expected of type      'a tree </code></pre>  <p>This is my code:</p>  <pre><code> let rec smaller_than t n : bool =  begin match t with  | Leaf x -&gt; true  | Node(x,lt,rt) -&gt; (x&lt;n) &amp;&amp; (smaller_than lt x) &amp;&amp; (smaller_than rt x)  end   let rec greater_equal_than t n : bool =  begin match t with  | Leaf x -&gt; true  | Node(x,lt,rt) -&gt; (x&gt;=n) &amp;&amp; (greater_equal_than lt x) &amp;&amp; (greater_equal_than rt x)  end   let check_bst t =  fold_tree (fun x -&gt; true) (fun x lt rt -&gt; ((check_bst lt) &amp;&amp; (check_bst rt)&amp;&amp;(smaller_than lt x)&amp;&amp;(greater_equal_than rt x))) t;; </code></pre>  <p>Any suggestions? I seem to have trouble understanding exactly how higher order functions work in OCAML</p>