<pre><code>let concat (l : string list) : string = fold_right (fun a x -&gt; a ^ x) l "" </code></pre>  <p>so to go through it, I see that </p>  <ul> <li>let concat takes a list with strings, and returns a string. </li> <li>fold right takes 3 parameters,   <ul> <li>1 the first being a function that concatenates two strings, it takes a and x, and then concatenates them using ^. </li> <li>2 the second argument is the list, </li> <li>3 and finally the third is the accumulator that gets each pass added to it. </li> </ul></li> </ul>  <p>BUT, how does the <code>func a x</code> know that a is the first element of the list, and x is the second.  </p>  <p>And when it passes through again, how does it know that a is the third element of the list, and x is the fourth, and so forth?</p>