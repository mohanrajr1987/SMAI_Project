<p>I've come across a problem I need to solve, and I don't seem to have the knowledge to get around it.</p>  <p>What I'm trying to do is fit a function using spicy.optimize to a set of data. The problem is the function I want to fit to is made up of almost thirty gaussians which have 3 parameters each. Naturally, I don't want to manually define the entire function by hand, so I want to know how do I define different functions that know how to take parameters and then add them together, for example:</p>  <pre><code>def func1(x, a):     return x + a  def func2(x, b):     return x + b </code></pre>  <p>Then I want to somehow be able to get a function which would look like this:</p>  <pre><code>fun(x, a, b):     return x + x + a + b </code></pre>  <p>Also, I have been able to pass all of my parameters inside a dictionary:</p>  <pre><code>from diff_expo_plot import cor_exp import matplotlib.pyplot as plt from scipy import optimize as opt import numpy as np  # first we define parameters for each of the lines para = {'CIII977':(1, 977, 3), 'OVI1035':(3, 1035, 3), 'Lalphab':(10, 1215, 3),         'Lalphan':(50, 1215, 1), 'NV1240':(3, 1240, 3),         'SiIV,OIV]1400':(1.3, 1400, 3), 'CIV1549b':(6, 1549, 3),         'CIV1549n':(12, 1549, 1), 'CIII]1909b':(3, 1909, 3),         'CIII]1909n':(5, 1909, 1), 'FeII1':(8, 2600, 3), 'MgII2798b':(3, 2798, 3),         'MgII2798n':(2, 2798, 1), '[NeV]3426':(1, 3426, 1),         'OII]lambda3727':(3, 3727, 1), '[NeIII]3869':(1.5, 3869, 1),         'Hbetab':(1, 4861, 3), 'Hbetan':(1, 4861, 1), '[OIII]5007':(12, 5007, 1),         'FeII2':(2, 5000, 3), '[OI]6300':(1, 6300, 1),         'Halphab':(5, 6563, 3), 'Halphan':(3, 6563, 1),         '[NII]6583':(3, 6583, 1), '[SII]6716':(2, 6716, 1),         '[SII]6731':(2, 6731, 1)}  # import data data = cor_exp(491, 51942, 1)[0]  x = data[0] y = data[1]   # now define the function we are going to use def funct(x, para):     final = 0     for i in para:         def func(x, para):             para1, para2, para3 = para[i]             return (para1 *                     np.exp(-((x - para2) ** 2) /                         (2 * (para3 ** 2))))         final += func(x, para)      final = (20 * ((x/3000) ** -0.5)) * (final + 1)     return final  plt.plot(x, y, 'b') plt.plot(x, func(x, para), 'r') plt.show() </code></pre>  <p>This gives me a plot of the "function" I want to start my initial fit from, but I have no idea how to use it in spicy.optimize since it's not really a function but just different functions working on the data, and I have a dictionary of parameters and not a tuple.</p>  <p>If anyone has any ideas, they will be much appreciated, sorry in advance for the ignorance.</p>