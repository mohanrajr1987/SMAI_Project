<p>I have a Arduino Uno, CC3000 Wifi Shield and one potentiometer.</p>  <p>I want to see a value of potentiometer(0~1023) on a web server by using cc3000 wifi.</p>  <p>Also, I want to check this value in real-time. When I change a value of potentiometer, I want to see changed value immediately on web.</p>  <p>Actually, there is one youtube video which is exactly I want. Here is the link.</p>  <p><a href="https://www.youtube.com/watch?v=MwmnzZXS1EA" rel="nofollow">https://www.youtube.com/watch?v=MwmnzZXS1EA</a></p>  <p>If you click the link, you can see a link of Facebook page.</p>  <p>I could get the code of this video from Facebook page.</p>  <pre><code>// Include required libraries #include &lt;Adafruit_CC3000.h&gt; #include &lt;SPI.h&gt;  // These are the interrupt and control pins #define ADAFRUIT_CC3000_IRQ   3 #define ADAFRUIT_CC3000_VBAT  5 #define ADAFRUIT_CC3000_CS    10  // Use hardware SPI for the remaining pins // On an UNO, SCK = 13, MISO = 12, and MOSI = 11 Adafruit_CC3000 cc3000 = Adafruit_CC3000(ADAFRUIT_CC3000_CS, ADAFRUIT_CC3000_IRQ, ADAFRUIT_CC3000_VBAT, SPI_CLOCK_DIV2); // you can change this clock speed  #define WLAN_SSID "nobuka" // cannot be longer than 32 characters! #define WLAN_PASS "fkaakzx59"  // Security can be WLAN_SEC_UNSEC, WLAN_SEC_WEP, WLAN_SEC_WPA or WLAN_SEC_WPA2 #define WLAN_SECURITY WLAN_SEC_WPA2  #define LISTEN_PORT 80 // What TCP port to listen on for connections.  // The HTTP protocol uses port 80 by default. #define MAX_ACTION 10 // Maximum length of the HTTP action that can be parsed. #define MAX_PATH 64 // Maximum length of the HTTP request path that can be parsed.  // There isn't much memory available so keep this short! #define BUFFER_SIZE MAX_ACTION + MAX_PATH + 20 // Size of buffer for incoming request data. // Since only the first line is parsed this // needs to be as large as the maximum action // and path plus a little for whitespace and  // HTTP version. #define TIMEOUT_MS 500 // Amount of time in milliseconds to wait for // an incoming request to finish. Don't set this // too high or your server could be slow to respond. Adafruit_CC3000_Server httpServer(LISTEN_PORT);  uint8_t buffer[BUFFER_SIZE+1]; int bufindex = 0; char action[MAX_ACTION+1]; char path[MAX_PATH+1];  void setup() {   Serial.begin(9600);   //pinMode(2, OUTPUT);   //pinMode(3, OUTPUT);    Serial.println(F("Hello, CC3000!\n"));   //Serial.print("Free RAM: "); Serial.println(getFreeRam(), DEC);   // Initialise the module   Serial.println(F("\nInitializing..."));   if (!cc3000.begin())   {     Serial.println(F("Couldn't begin()! Check your wiring?"));     while(1);   }   Serial.print(F("\nAttempting to connect to ")); Serial.println(WLAN_SSID);   if (!cc3000.connectToAP(WLAN_SSID, WLAN_PASS, WLAN_SECURITY)) {     Serial.println(F("Failed!"));   while(1);   }   Serial.println(F("Connected!"));   Serial.println(F("Request DHCP"));   while (!cc3000.checkDHCP())   {    delay(100); // ToDo: Insert a DHCP timeout!   }   // Display the IP address DNS, Gateway, etc.   while (! displayConnectionDetails()) {   delay(1000);   }   // ******************************************************   // You can safely remove this to save some flash memory!   // ******************************************************   Serial.println(F("\r\nNOTE: This sketch may cause problems with other sketches"));   Serial.println(F("since the .disconnect() function is never called, so the"));   Serial.println(F("AP may refuse connection requests from the CC3000 until a"));   Serial.println(F("timeout period passes. This is normal behaviour since"));   Serial.println(F("there isn't an obvious moment to disconnect with a server.\r\n"));    // Start listening for connections     httpServer.begin();   Serial.println(F("Listening for connections...")); } void loop() {   // Try to get a client which is connected.   Adafruit_CC3000_ClientRef client = httpServer.available();   if (client)   {     // an http request ends with a blank line   boolean current_line_is_blank = true;   while (client.connected())   {     if (client.available())     {       char c = client.read();       // if we've gotten to the end of the line (received a newline       // character) and the line is blank, the http request has ended,       // so we can send a reply        if (c == '\n' &amp;&amp; current_line_is_blank){         // send a standard http response header         client.println("HTTP/1.1 200 OK");         client.println("Content-Type: text/html");         client.println();         client.println("&lt;html&gt;");         client.println("&lt;meta http-equiv=\"refresh\" content=\"1\"&gt;");         client.println("&lt;body&gt;&lt;form method=get&gt;");         client.println("&lt;font color='‪#‎FF0000‬'&gt;");          client.println("&lt;center&gt;&lt;h1&gt;Web Server D2&lt;/h1&gt;&lt;/center&gt;");         client.println("&lt;center&gt;&lt;p&gt;&lt;h2&gt;&lt;font color='#000000'&gt;(CC3000 WiFi Shield)&lt;/font color&gt; &lt;font color='‪#‎0000FF‬'&gt;Kim's Arduino&lt;/font color&gt;&lt;/h2&gt;&lt;/p&gt;&lt;hr&gt;&lt;/center&gt;");         client.println("&lt;/font color&gt;");         //client.println("&lt;center&gt;&lt;p&gt;&lt;h1&gt;โดย &lt;font color='‪#‎2076CD‬'&gt;อ.หม่ำ หนึ่ง&lt;/font color&gt; นะ&lt;/h1&gt;&lt;/p&gt;&lt;hr&gt;&lt;/center&gt;");         client.println("&lt;center&gt;&lt;h1&gt;");         client.println("Analog Input:&lt;br&gt;");         int sensorReading = analogRead(0);         client.print("A0");         client.print(" : ");         client.println("&lt;font color='#FF0000'&gt;");         client.print(sensorReading*5.0/1023);         client.println("&lt;/font color&gt;");         client.print(" V.&lt;br&gt;&lt;br&gt;");         break;       }        if (c == '\n')       {         // we're starting a new line         current_line_is_blank = true;       }       else if (c != '\r')       {         // we've gotten a character on the current line         current_line_is_blank = false;       }   } // End of if (client.available)   } // End of while (client.connected())  // give the web browser time to receive the data delay(100); client.close(); Serial.println("client disonnected");   } }  // Return true if the buffer contains an HTTP request. Also returns the request // path and action strings if the request was parsed. This does not attempt to // parse any HTTP headers because there really isn't enough memory to process // them all. // HTTP request looks like: // [method] [path] [version] \r\n // Header_key_1: Header_value_1 \r\n // ... // Header_key_n: Header_value_n \r\n // \r\n bool parseRequest(uint8_t* buf, int bufSize, char* action, char* path) {   // Check if the request ends with \r\n to signal end of first line.   if (bufSize &lt; 2)     return false;   if (buf[bufSize-2] == '\r' &amp;&amp; buf[bufSize-1] == '\n') {     parseFirstLine((char*)buf, action, path);     return true;   }   return false; }  // Parse the action and path from the first line of an HTTP request. void parseFirstLine(char* line, char* action, char* path) {   // Parse first word up to whitespace as action.   char* lineaction = strtok(line, " ");   if (lineaction != NULL)     strncpy(action, lineaction, MAX_ACTION);   // Parse second word up to whitespace as path.   char* linepath = strtok(NULL, " ");   if (linepath != NULL)     strncpy(path, linepath, MAX_PATH); }  // Tries to read the IP address and other connection details bool displayConnectionDetails(void) {   uint32_t ipAddress, netmask, gateway, dhcpserv, dnsserv;   if(!cc3000.getIPAddress(&amp;ipAddress, &amp;netmask, &amp;gateway, &amp;dhcpserv, &amp;dnsserv))   {     Serial.println(F("Unable to retrieve the IP Address!\r\n"));     return false;   }   else   {     Serial.print(F("\nIP Addr: ")); cc3000.printIPdotsRev(ipAddress);     Serial.print(F("\nNetmask: ")); cc3000.printIPdotsRev(netmask);     Serial.print(F("\nGateway: ")); cc3000.printIPdotsRev(gateway);     Serial.print(F("\nDHCPsrv: ")); cc3000.printIPdotsRev(dhcpserv);     Serial.print(F("\nDNSserv: ")); cc3000.printIPdotsRev(dnsserv);     Serial.println();     return true;   } } </code></pre>  <p><strong>When I run this code, I can check cc3000 shield is connected my Wifi on the Serial monitor.</strong></p>  <p><a href="http://i.stack.imgur.com/QZbqs.png" rel="nofollow"><img src="http://i.stack.imgur.com/QZbqs.png" alt="enter image description here"></a></p>  <p><strong>But, I can't access to web server(192.168.0.193).</strong></p>  <p><strong>When I try to access, blue bar on Address bar just stop like this.</strong></p>  <p>I can't find the reason. If anyone knows how to do this, please help me.</p>  <p><a href="http://i.stack.imgur.com/cfgTE.png" rel="nofollow"><img src="http://i.stack.imgur.com/cfgTE.png" alt="enter image description here"></a></p>