<p>Looking at the generic socket struct defined <a href="http://pubs.opengroup.org/onlinepubs/7908799/xns/syssocket.h.html" rel="nofollow">sys/socket.h</a> spec it lists:</p>  <pre><code>sa_family_t   sa_family       address family char          sa_data[]       socket address (variable-length data) </code></pre>  <p>Looking at my actual header file located at /usr/includes/sys/socket.h on my linux machine, it is defined as the following.</p>  <pre><code> struct osockaddr       {         unsigned short int sa_family;         unsigned char sa_data[14];       }; </code></pre>  <p>Now I know if I include the  <a href="http://pubs.opengroup.org/onlinepubs/7908799/xns/netinetin.h.html" rel="nofollow">netinet/in.h</a> it will define a <code>sockaddr_in</code>  structure and since I'm using <code>AF_INET</code> it would make since to use this...</p>  <pre><code>struct sockaddr_in {    short int            sin_family;    unsigned short int   sin_port;    struct in_addr       sin_addr;    unsigned char        sin_zero[8]; }; </code></pre>  <p>However, I feel it is unnecessary to #include another lib (netinet/in.h) when I can simply use the generic <code>osockaddr</code> structure. </p>  <hr>  <p>Now I understand my <code>osockaddr</code> member <code>sa_family</code> will relate to <code>AF_INET</code> but I'm unclear what actually goes inside the <code>sa_data</code> member... I'm assuming <code>port,addr,zero</code> in relation to the <code>sockaddr_in</code> structure, but I am unclear.</p>  <p><strong>Question:</strong> Can anyone give me an example of what using the generic <code>osockaddr</code> structure looks like?</p>  <p>What I have so far....</p>  <pre><code>#include&lt;sys/socket.h&gt;     int main(void){     struct osockaddr address;     address.sa_family = AF_INET;     address.sa_data = ? //What goes here (port, addr, zero)?     return 0; } </code></pre>