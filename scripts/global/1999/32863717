<p>I have been working on something that involves cryptography. I must admit that my knowledge in cryptography is very basic. So I decided to see what does the <code>RSA</code> structure contains after RSA key is generated by <code>RSA_generate_key</code> from <code>openssl</code> library. But I got a segmentation fault:</p>  <pre><code>const unsigned long e = 3; const int num = 3072;    ... RSA *rsa_key = RSA_generate_key(num, e, NULL, NULL); if (!rsa_key) {     printf("Failed to generate RSA key!\n");     return RSA_ERROR_CODE; }  printf("rsa-&gt;pad=0x%x\n", rsa_key-&gt;pad); printf("rsa-&gt;version=0x%lx\n", rsa_key-&gt;version); if (rsa_key-&gt;n) {     printf("rsa-&gt;n-&gt;top=0x%x\n", rsa_key-&gt;n-&gt;top); // HERE I got the seg fault     .... </code></pre>  <p>It looked very strange to me so I wrote a minimal code to test it with the <a href="http://valgrind.org/" rel="nofollow"><code>valgrind tool</code></a>. Here is the code in C:</p>  <pre><code>#include "openssl/rsa.h" #include &lt;stdio.h&gt;  int main() {            const unsigned long e = 3;   // the exponent, 3 in QVRSA     const int num = 3072;         RSA *rsa_key = RSA_generate_key(num, e, NULL, NULL);      if (rsa_key == NULL)     {         printf("RSA is invalid!\n");         return 1;     }      printf("rsa-&gt;pad=0x%x\n", rsa_key-&gt;pad);     printf("rsa-&gt;version=0x%lx\n", rsa_key-&gt;version);     if (rsa_key-&gt;n)     {         printf("rsa-&gt;n-&gt;top=0x%x\n", rsa_key-&gt;n-&gt;top);     }      RSA_free(rsa_key);     rsa_key = NULL;     return 0; } </code></pre>  <p>The compilation line: <em>gcc rsa.c -lcrypto -g -O0 -o rsa</em></p>  <p>This time there was no segmentation fault and the output was:</p>  <pre><code>rsa-&gt;pad=0x0  rsa-&gt;version=0x0  rsa-&gt;n-&gt;top=0x30 </code></pre>  <p><strong>BUT</strong> <code>valgrind</code> fired plenty of error messages: </p>  <pre class="lang-none prettyprint-override"><code>==6916== Conditional jump or move depends on uninitialised value(s) ==6916==    at 0x4DAEB37: BN_bin2bn (in /usr/lib64/libcrypto.so.0.9.8) ==6916==    by 0x4DB1B62: ??? (in /usr/lib64/libcrypto.so.0.9.8) ==6916==    by 0x4DB4471: BN_generate_prime_ex (in /usr/lib64/libcrypto.so.0.9.8) ==6916==    by 0x4DC8763: RSA_generate_key_ex (in /usr/lib64/libcrypto.so.0.9.8) ==6916==    by 0x4DCB763: RSA_generate_key (in /usr/lib64/libcrypto.so.0.9.8) ==6916==    by 0x40072E: main (rsa.c:9) ==6916==  Uninitialised value was created by a heap allocation ==6916==    at 0x4B23D6D: malloc (vg_replace_malloc.c:270) ==6916==    by 0x4D8936A: CRYPTO_malloc (in /usr/lib64/libcrypto.so.0.9.8) ==6916==    by 0x4DB1AD1: ??? (in /usr/lib64/libcrypto.so.0.9.8) ==6916==    by 0x4DB4471: BN_generate_prime_ex (in /usr/lib64/libcrypto.so.0.9.8) ==6916==    by 0x4DC8763: RSA_generate_key_ex (in /usr/lib64/libcrypto.so.0.9.8) ==6916==    by 0x4DCB763: RSA_generate_key (in /usr/lib64/libcrypto.so.0.9.8) ==6916==    by 0x40072E: main (rsa.c:9)  ==6916== Conditional jump or move depends on uninitialised value(s) ==6916==    at 0x4DB44D0: BN_generate_prime_ex (in /usr/lib64/libcrypto.so.0.9.8) ==6916==    by 0x4DC8763: RSA_generate_key_ex (in /usr/lib64/libcrypto.so.0.9.8) ==6916==    by 0x4DCB763: RSA_generate_key (in /usr/lib64/libcrypto.so.0.9.8) ==6916==    by 0x40072E: main (rsa.c:9) ==6916==  Uninitialised value was created by a heap allocation ==6916==    at 0x4B23D6D: malloc (vg_replace_malloc.c:270) ==6916==    by 0x4D8936A: CRYPTO_malloc (in /usr/lib64/libcrypto.so.0.9.8) ==6916==    by 0x4DB1AD1: ??? (in /usr/lib64/libcrypto.so.0.9.8) ==6916==    by 0x4DB4471: BN_generate_prime_ex (in /usr/lib64/libcrypto.so.0.9.8) ==6916==    by 0x4DC8763: RSA_generate_key_ex (in /usr/lib64/libcrypto.so.0.9.8) ==6916==    by 0x4DCB763: RSA_generate_key (in /usr/lib64/libcrypto.so.0.9.8) ==6916==    by 0x40072E: main (rsa.c:9) </code></pre>  <p>And many others with <em>Conditional jump or move depends on uninitialised value(s)</em> title.</p>  <p>Why? Is there a known bug in openSSL or it is just a false alarm and my original segmentation fault is related to some hidden bugs in my original code? </p>  <p>I used:</p>  <ul> <li><p>gcc v4.5.2</p></li> <li><p>valgrind v3.8.1</p></li> <li><p>OpenSSL 0.9.8a</p></li> </ul>