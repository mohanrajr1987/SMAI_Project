<p>I am trying tu use <code>&lt;a href="intent:#Intent;..."&gt;</code> links from web pages embedded in the APK of my application to interact with it. These pages are displayed with a <code>WebView</code>.</p>  <p>This works fine with my API 19 device and with my API 19 emulator, but not with my API 17 emulators. These ones make the <code>WebView</code> to display the dreaded "WEBPAGE NOT AVAILABLE" message instead of lauching the <code>Intent</code> embedded in the <code>a</code> link:</p>  <p><a href="http://i.stack.imgur.com/ikcSl.png" rel="nofollow"><img src="http://i.stack.imgur.com/ikcSl.png" alt="enter image description here"></a></p>  <p>I don't manage to determine why the behaviour differs between API 19 and API 17:</p>  <ul> <li>is this tied to the API version? (but some SO posts that look older than API 19 refer to such <code>Intent</code> links)</li> <li>does this works "by accident" on my API 19 devices (Incorrect <code>Intent</code> HTML link or <code>&lt;intent-filter&gt;</code>? I did researches that describe this as working though)</li> <li>or did I miss anything, maybe in the permissions?</li> </ul>  <p>The involved code follows:</p>  <p><strong>Manifest</strong>:</p>  <pre><code>[...]  &lt;uses-permission android:name="android.permission.ACCESS_WIFI_STATE" /&gt; &lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /&gt; &lt;uses-permission android:name="android.permission.INTERNET" /&gt; &lt;uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" /&gt; &lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" /&gt;  [...]  &lt;application     android:allowBackup="true"     android:icon="@drawable/ic_launcher"     android:label="@string/app_name"     android:theme="@style/AppTheme" &gt;      &lt;activity         android:name=".MyAppMain"         android:label="@string/app_name" &gt;         &lt;intent-filter&gt;             &lt;action android:name="android.intent.action.MAIN" /&gt;             &lt;category android:name="android.intent.category.LAUNCHER" /&gt;         &lt;/intent-filter&gt;          &lt;!-- "THIS FILTER IS THE RELEVANT ONE: IT CATCHES INTENTS SENT FROM THE WEBVIEW" --&gt;         &lt;intent-filter&gt;             &lt;action android:name="com.example.myapp.CALL_FROM_LINK" /&gt;             &lt;category android:name="android.intent.category.DEFAULT" /&gt;             &lt;category android:name="android.intent.category.BROWSABLE" /&gt;         &lt;/intent-filter&gt;      &lt;/activity&gt;   [...]  &lt;/application&gt; </code></pre>  <p><strong>Involved Activity</strong>:</p>  <pre><code>public class MyAppMain extends Activity {      [...]      @Override     protected void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);           // The actual UI is HTML code displayed in a WebView         final WebView webview = new WebView(this);          try {             // Determines the page to load. "page1.html" by default if no extra available.             final Bundle extras = getIntent().getExtras();              final String asset = extras != null ? extras.getString("page") : "page1.html";             final InputStream is = getAssets().open(asset, AssetManager.ACCESS_BUFFER);              // The line below does just put the content of the stream in a String             final String html = StreamHelper.InputStreamToString(is);               // Loads the page into the WebView.                       webview.loadDataWithBaseURL("file:///android_asset/", html, "text/html", "UTF-8", null);          } catch (IOException e) {             throw new RuntimeException(e); // For now :)         }            setContentView(webview);      }       [...] } </code></pre>  <p><strong>HTML link that lauches the <code>Intent</code></strong>:</p>  <pre><code>&lt;a href="intent:#Intent;action=com.example.myapp.CALL_FROM_LINK;S.page=page2.html;end"&gt;Other content&lt;/a&gt; </code></pre>