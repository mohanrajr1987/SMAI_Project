<p>I have a <code>UIView</code> which covers another <code>UIView</code>. When the covering view is tapped, I want it to “fall”, this is where we animate it around its x axis about the bottom centre point.</p>  <p>I’ve implemented this like so:</p>  <pre><code>private func showCategories(animated: Bool) {     UIView.animateWithDuration(2,         delay: 0,         options: [.CurveEaseIn],         animations: {              self.setAnchorPoint(CGPoint(x: 0.5, y: 1), forView: self.titleView)              var rotationAndPerspectiveTransform = CATransform3DIdentity             rotationAndPerspectiveTransform.m34 = 1 / -500             rotationAndPerspectiveTransform = CATransform3DRotate(rotationAndPerspectiveTransform, CGFloat(-179 * M_PI / 180), 1, 0, 0);              self.titleView.layer.transform = rotationAndPerspectiveTransform;         }) { (success) -&gt; Void in              //     } } </code></pre>  <p>I found a solution which said that changing the anchor point moves the view, so to fix it you need to move it taking in to consider the anchor point and transform. It provided this code:</p>  <pre><code>private func setAnchorPoint(anchorPoint: CGPoint, forView view: UIView) {     var newPoint = CGPoint(x: view.bounds.width * anchorPoint.x, y: view.bounds.height * anchorPoint.y)     var oldPoint = CGPoint(x: view.bounds.width * view.layer.anchorPoint.x, y: view.bounds.height * view.layer.anchorPoint.y)      newPoint = CGPointApplyAffineTransform(newPoint, view.transform);     oldPoint = CGPointApplyAffineTransform(oldPoint, view.transform);      var position = view.layer.position;      position.x -= oldPoint.x;     position.x += newPoint.x;      position.y -= oldPoint.y;     position.y += newPoint.y;      view.layer.position = position;     view.layer.anchorPoint = anchorPoint; } </code></pre>  <p>However, this still doesn’t work for me. Am I using it wrong?</p>  <p>P.s, I realise the <code>animated</code> parameter isn’t being taken in to account yet… It’s for debugging purposes.</p>