<p>I am subclassing UIView and cannot find a right way to request/report its desired size. I expected <code>systemLayoutSizeFittingSize</code> to do the trick, but it is never called. Layout is simple - I pin top and leading of my view and limit trailing and bottom to be less than or equal to top-level view. Among all sizing functions, only <code>intrinsicContentSize</code> is called, but that one is not very helpful.</p>  <pre><code>import Foundation import UIKit  class StatsView: UIView {   override func drawRect(rect: CGRect)   {     let context=UIGraphicsGetCurrentContext()!     CGContextSetRGBFillColor(context, 0, 0, 1, 1)     CGContextFillRect(context, rect)   }    override func sizeThatFits(size: CGSize) -&gt; CGSize   {     print("Called sizeThatFits with \(size)")     if(size.width&gt;350)     {       return CGSize(width: 350,height: 50)     }     else     {       return CGSize(width: 50,height: 100)     }   }    override func systemLayoutSizeFittingSize(size: CGSize) -&gt; CGSize   {     print("Called systemLayoutSizeFittingSize with \(size)")     return super.systemLayoutSizeFittingSize(size)   }    override func systemLayoutSizeFittingSize(size: CGSize, withHorizontalFittingPriority horizontalFittingPriority: UILayoutPriority, verticalFittingPriority: UILayoutPriority) -&gt; CGSize   {     print("Called systemLayoutSizeFittingSize with \(size)")     if(size.width&gt;350)     {       return CGSize(width: 350,height: 50)     }     else     {       return CGSize(width: 50,height: 100)     }   }    override func intrinsicContentSize() -&gt; CGSize   {     super.intrinsicContentSize()     print("Called intrinsicContentSize")     return CGSize(width: 10,height: 50)   } } </code></pre>  <p>What is a right way to do it?</p>