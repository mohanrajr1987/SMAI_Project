<p>I have already created a circular button which is a custom UIView.Here's the code:</p>  <pre><code> class HelpTips: UIView {  weak var hotSpot: UIButton!  override init(frame: CGRect) {     super.init(frame: frame)      let strongHotSpot = UIButton()     hotSpot = strongHotSpot      self.addSubview(strongHotSpot)     hotSpotOne.translatesAutoresizingMaskIntoConstraints = false     hotSpotOne.backgroundColor = UIColor.TRLMHelpTipYellowColor()     hotSpotOne.layer.borderColor = UIColor.TRLMHelpTipStrokeColor().CGColor     hotSpotOne.layer.borderWidth = 1      let horizontalConstraint = NSLayoutConstraint(item: hotSpot, attribute: .Leading, relatedBy: .Equal, toItem: self, attribute: .Leading, multiplier: 1.0, constant: -1)     let verticalConstraint = NSLayoutConstraint(item: hotSpot, attribute: .Top, relatedBy: .Equal, toItem: self, attribute: .Top, multiplier: 1.0, constant: 16)     let widthConstraint = NSLayoutConstraint(item: hotSpot, attribute: .Width, relatedBy: .Equal, toItem: nil, attribute: .NotAnAttribute, multiplier: 1.0, constant: 40)     let heightConstraint = NSLayoutConstraint(item: hotSpot, attribute: .Height, relatedBy: .Equal, toItem: nil, attribute: .NotAnAttribute, multiplier: 1.0, constant: 40)      self.addConstraints([verticalConstraint, horizontalConstraint, widthConstraint, heightConstraint])  }  required init?(coder aDecoder: NSCoder) {     super.init(coder: aDecoder) } </code></pre>  <p>}</p>  <p>Now this same button is used throughout the app at several places but it's placed at different positions. So each View Controller will make use of that UIView.  So technically the look of the button remains the same but the constraints for that button keep on changing depending on it's position. I want to follow DRY(Don't repeat yourself) technique here. I have done this kind of thing before but the code was being repeated several times and was not efficient. How to go about this? Any help is appreciated. Thanks! </p>