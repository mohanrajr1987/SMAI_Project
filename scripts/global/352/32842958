<p>I am complaining from issue that appeared in my app periodically . My app is using WPF ,WCF, Fluent NHibernate and SQL. The issue appeared since we moved our app to PROD environment (with 30 active users) ; however in UAT environment (with 5 active users) app works fine .</p>  <p>Logged exception :</p>  <pre><code>System.ObjectDisposedException: Session is closed! Object name: 'ISession'.    at NHibernate.Impl.AbstractSessionImpl.ErrorIfClosed()    at NHibernate.Impl.AbstractSessionImpl.CheckAndUpdateSessionStatus()    at NHibernate.Impl.SessionImpl.get_PersistenceContext()    at NHibernate.Engine.TwoPhaseLoad.InitializeEntity(Object entity, Boolean readOnly, ISessionImplementor session, PreLoadEvent preLoadEvent, PostLoadEvent postLoadEvent)    at NHibernate.Loader.Loader.InitializeEntitiesAndCollections(IList hydratedObjects, Object resultSetId, ISessionImplementor session, Boolean readOnly)    at NHibernate.Loader.Loader.DoQuery(ISessionImplementor session, QueryParameters queryParameters, Boolean returnProxies)    at NHibernate.Loader.Loader.DoQueryAndInitializeNonLazyCollections(ISessionImplementor session, QueryParameters queryParameters, Boolean returnProxies)    at NHibernate.Loader.Loader.LoadEntity(ISessionImplementor session, Object id, IType identifierType, Object optionalObject, String optionalEntityName, Object optionalIdentifier, IEntityPersister persister) </code></pre>  <p>I would like to share NHibernateHelper class with you to check if it has any  mistakes :</p>  <pre><code>namespace APCC.Business {     public class NHibernateHelper     {         private static ISessionFactory _sessionFactory;         private static ISession currentSession;          public static ISessionFactory SessionFactory         {             get             {                 if (_sessionFactory == null)                      InitializeSessionFactory();                 return _sessionFactory;             }         }          private static void InitializeSessionFactory()         {             //try             //{                 _sessionFactory = Fluently.Configure()                     .Database(MsSqlConfiguration.MsSql2012                       .ConnectionString(ConfigurationManager.ConnectionStrings["APCCDatabase"].ConnectionString)  )                     .Mappings(m =&gt;                               m.FluentMappings                                   .AddFromAssemblyOf&lt;BusinessUnitMap&gt;()                                   .Conventions.Add(FluentNHibernate.Conventions.Helpers.DefaultLazy.Never()))                                   .ExposeConfiguration(cfg =&gt; new SchemaExport(cfg))//cfg =&gt; cfg.SetInterceptor(new AuditInterceptor()))//cfg =&gt; new SchemaExport(cfg))                      .BuildSessionFactory();             //}             //catch (FluentConfigurationException ex)             //{             //    ExceptionHelper.HandleException(ex);             //}             //catch (Exception ex)             //{             //    ExceptionHelper.HandleException(ex);             //}              //  .ExposeConfiguration(cfg =&gt; new SchemaExport(cfg).Create(true, true))         }            public static ISession OpenSession()         {           if(currentSession == null)             currentSession =SessionFactory.OpenSession();             return currentSession;         }           /// &lt;summary&gt;         /// Gets the current session.         /// &lt;/summary&gt;         public static ISession GetCurrentSession()         {             if (currentSession != null)                 return currentSession;             else             {                 if (_sessionFactory == null)                 {                     InitializeSessionFactory();                     currentSession = _sessionFactory.OpenSession();                 }                 else                 { currentSession = _sessionFactory.OpenSession(); }                 //if (CurrentSessionContext.HasBind(_sessionFactory))                 //    return _sessionFactory.GetCurrentSession();                   //CurrentSessionContext.Bind(currentSession);                  return currentSession;             }         }           /// &lt;summary&gt;         /// Closes the session.         /// &lt;/summary&gt;         public static void CloseSession()         {             if (currentSession!=null)             {                // var session = CurrentSessionContext.Unbind(_sessionFactory);                 currentSession.Close();                 currentSession = null;             }         }           ///// &lt;summary&gt;         ///// Commits the session.         ///// &lt;/summary&gt;         ///// &lt;param name="session"&gt;The session.&lt;/param&gt;         //public static void CommitSession(ISession session)         //{         //    try         //    {         //        session.Transaction.Commit();         //    }         //    catch (Exception)         //    {         //        session.Transaction.Rollback();         //        throw;         //    }         //}          //public static ITransaction GetSessionTransaction()         //{         //    return GetCurrentSession().BeginTransaction();         //}     } } </code></pre>