<p>Due to bugs in nhibernate linq provider, I must generate an Anonymous type dinamically at Runtime, in order to use it as the Anonymous type of groupby methodcall expression.</p>  <p>In something like </p>  <pre><code>myQueryable.GroupBy(x=&gt; new {x.Prop1, x.Prop2}).Select(x=&gt;      new {x.Key.Prop1, x.Key.Prop2, Cnt = x.Count()    ); </code></pre>  <p>I have to generate the <code>new {x.Prop1, x.Prop2}</code> Anonymous type.</p>  <p>So far I've been able to create a regular type in a dynamic assembly and create all of the LINQ expressions needed to make it runs, however the generated sql differs from the one generated using the Anonymous type.</p>  <p>The two expression tree are absolutely identically expcept for the <em>Anonymous type vs regular type</em> part.</p>  <p>Also, I must add, the same nasty bug in nh shows if I Group over a regular statically compiled class.</p>  <p>So I think it's better to create an anoymous type with reflection emit instead of a regular type. Is it possible ?</p>  <p><strong>EDIT</strong></p>  <p>Adding the difference that I see between IL generated by and IL generated within an Anonymous type. That's a get accessor generated in an anoymous type:</p>  <pre><code>.method public hidebysig specialname instance !'&lt;Age&gt;j__TPar'          get_Age() cil managed {   // Code size       11 (0xb)   .maxstack  1   .locals init (!'&lt;Age&gt;j__TPar' V_0)   IL_0000:  ldarg.0   IL_0001:  ldfld      !0 class '&lt;&gt;f__AnonymousType0`2'&lt;!'&lt;Age&gt;j__TPar',!'&lt;Name&gt;j__TPar'&gt;::'&lt;Age&gt;i__Field'   IL_0006:  stloc.0   IL_0007:  br.s       IL_0009   IL_0009:  ldloc.0   IL_000a:  ret } // end of method '&lt;&gt;f__AnonymousType0`2'::get_Age </code></pre>  <p>and that's one generated by me:</p>  <pre><code>.method public hidebysig specialname instance int32          get_Age() cil managed {   .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 )    // Code size       11 (0xb)   .maxstack  1   .locals init (int32 V_0)   IL_0000:  ldarg.0   IL_0001:  ldfld      int32 UserQuery/MyDinType::'&lt;Age&gt;k__BackingField'   IL_0006:  stloc.0   IL_0007:  br.s       IL_0009   IL_0009:  ldloc.0   IL_000a:  ret } // end of method MyDinType::get_Age </code></pre>  <p>However, I can't tell for sure that those difference that I don't understand are related to my problem.</p>