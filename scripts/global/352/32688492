<p>I need an ORM that is suitable for stateful application. I'm going to keep entities between requests in low-latency realtime game server with persistent client connections. There is an only 1 server instance connected to database so no data can be changed from "outside" and the server can rely on its cache.</p>  <p>When user remotely logs in to the server its whole profile is loaded to server memory. Several higher-level services are also created for each user to operate profile data and provide functionality. They can also have internal fields (state) to store temporary data. When user wants to change his signature he asks corresponding service to do so. The service tracks how frequently user changes his signature and allows it only once per ten minutes (for example) - such short interval is not tracked in db, this is a temporary state. This change should be stored to db executing only 1 query: <code>UPDATE users SET signature = ... WHERE user_id = ...</code>. When user logs off it's unloaded from server memory after minutes/hours of inactivity. Db here is only a storage. This is what I call stateful.</p>  <ol> <li>Some entities are considered "static data" and loaded only once at application start. Those can be referenced from other "dynamic" entities. Loading "dynamic" entity should not require reloading referenced "static data" entity.</li> <li><code>Update</code>/<code>Insert</code>/<code>Delete</code> should set/insert/delete only changed properties/entities even with "detached" entity.</li> <li>Write operations should not each time load data from database (perform <code>Select</code>) preliminary to detect changes. (A state can be tracked in dynamically generated inheritor.) I have a state locally, there is no sense to load anything. <strong>I want to continue tracking changes even outside of connection scope and "upload" changes when I want.</strong></li> <li>While performing operations references of persisted objects should not be changed.</li> <li>DBConnection-per-user is not going to work. The expected online is thousands of users.</li> <li>Entities from "static data" can be assigned to "dynamic" enitity properties (which represent foreign keys) and <code>Update</code> should handle it correctly.</li> </ol>  <p>Now I'm using NHibernate despite it's designed for stateless applications. It supports reattaching to session but that looks like very uncommon usage, requires me to use undocumented behavior and doesn't solve everything.</p>  <p>I'm not sure about Entity Framework - can I use it that way? Or can you suggest another ORM?</p>  <p>If the server will recreate (or especially reload) user objects each time user hits a button it will eat CPU very fast. CPU scales vertically expensively but have small effect. Contrary if you are out of RAM you can just go and buy more - like with horizontal scaling but easier to code. If you think that another approach should be used here I'm ready to discuss it. </p>