<p>Guessing I'm doing something stupidly simple wrong, but can't seem to find an answer in existing stack overflow questions. I'm trying to implement a simple hash table containing lists of strings in C++ for a programming class. My add() function appears to be working correctly from inside the function, but as soon as I check the hash table's contents from the contains() function it's obvious that something's gone wrong.  </p>  <pre><code>void string_set::add(const char *s) {   //copy s into new char array str char str[strlen(s)]; strcpy(str, s); //find hash value of string int hValue = string_set::hash_function(s);  //create new node to contain string node* newNode = new node(); newNode-&gt;s = str;  //if string's position in hash table is empty, add directly and  //set newNode's next to null. if not, set newNode next to  //current first node in list and then add to hash table if(hash_table[hValue] == NULL) {     hash_table[hValue] = newNode;     newNode-&gt;next = NULL; } else {     newNode-&gt;next = hash_table[hValue];     hash_table[hValue] = newNode; } cout &lt;&lt; "string added: " &lt;&lt; hash_table[hValue]-&gt;s &lt;&lt; endl;  return; } </code></pre>  <p>This prints the expected string; i.e. if I add "e" it prints "e". But when I call this immediately after: </p>  <pre><code>int string_set::contains(const char *s) { //find hash value of string int hValue = string_set::hash_function(s);  //return inital value of hash table at that value cout &lt;&lt; "hash table points to " &lt;&lt; hash_table[hValue]-&gt;s &lt;&lt; endl; } </code></pre>  <p>It prints some junk. What have I done? </p>  <p>Since this is for a class, the specifications have been provided and I have no opportunity to change the way the hash table is set up. I'll be adding exceptions etc later, just want to get the add function working. Thanks!</p>  <p>EDIT: Sorry, new to stack overflow and not sure about comment formatting! Yes, I can use std::string. The hash function is as follows</p>  <pre><code>int string_set::hash_function(const char *s) { int cValue =0; int stringSum = 0;  unsigned int i = 0; for(i = 0; i &lt; strlen(s); i++) {     cValue = (int) s[i];     stringSum = stringSum + cValue; } stringSum = stringSum % HASH_TABLE_SIZE; return stringSum; } </code></pre>