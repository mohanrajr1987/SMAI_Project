<p>I am working on my Ruby on Rails application and this application has a Model called 'User'. This model has a database column (in my Postgres database) called 'remark'. And this 'remark' field is of the type HSTORE. It stores a hash with extra information about this user.</p>  <p>I am using a method which saves the value of a parameter (params[:info]) into this 'remark' field with a key 'info'. This code works.</p>  <pre><code>def save_info_for_user(info)     @user.remark = { :info =&gt; info }     @user.save   end   </code></pre>  <p>And this code doesn't work <strong>when</strong> the database field <strong>is empty </strong>. So only when it holds a minimum of one key/value pair it is possible to save a new value like this.  </p>  <pre><code>  def save_info_for_user(info)     @user.remark['info'] = info      @user.save   end </code></pre>  <p>It gives the following error:</p>  <pre><code>   &gt; undefined method `[]=' for nil:NilClass </code></pre>  <p>And this code works neither:</p>  <pre><code>  def save_info_for_user(info)     @user.remark[:info] = info      @user.save   end </code></pre>  <p>It gives the same error</p>  <pre><code>&gt; undefined method `[]=' for nil:NilClass </code></pre>  <p>And after some testing I found that <em>'remark[:info]'</em> holds a different value than <em>'remark['info']'</em></p>  <p>Very confusing to me. </p>  <p><strong>My question:</strong>  Why does </p>  <pre><code>@user.remark[:info] = info </code></pre>  <p>gives that error. It should know that the database field 'remark' is a hash because its type is defined as HSTORE?</p>  <p>Hope someone can explain whats going on here and how to make this method futureproof. </p>