<p>On the <a href="https://docs.python.org/3/glossary.html" rel="nofollow">Glossary-Page</a> under the section <a href="https://docs.python.org/3/glossary.html#term-hashable" rel="nofollow">"<em>hashable</em>"</a> of the official Python Documentation visitors can read that</p>  <blockquote>   <p>An object is hashable if it has a hash value which never changes during its lifetime ... </p>      <p><strong><em>All</em> of Pythonâ€™s <em>immutable built-in objects</em> are hashable</strong>, while no mutable containers (such as lists or dictionaries) are not...</p> </blockquote>  <p>This means that passing an object of the</p>  <ul> <li><code>int</code>, <code>float</code>, <code>long</code>, <code>complex</code>,</li> <li><code>str</code>,</li> <li><code>bytes</code>,</li> <li><code>tuple</code> or</li> <li><code>frozenset</code></li> </ul>  <p>class to the build-in <code>hash()</code> method <strong>must return the supposed hash-value</strong>.</p>  <p>The problem is that <strong>tuples can contain unhashable objects</strong> (such as <code>list</code>s) and therefor <strong>some tuples are not hashable</strong>:</p>  <ol> <li><p>Create (valid) tuple consisting of hashable (<code>int</code>s and <code>string</code>) and unhashable (<code>list</code>) data types.</p>  <pre><code>&gt;&gt;&gt; tuple([1, 2, [3, "4"]])       (1, 2, [3, '4']) </code></pre></li> <li><p>Hashing this tuple fails ...</p>  <pre><code>&gt;&gt;&gt; hash((1, 2, [3, '4']))      Traceback (most recent call last):         hash((1, 2, [3, '4']))     TypeError: unhashable type: 'list' </code></pre></li> <li><p>... although the object to hash is an immutable built-in type </p>  <pre><code>&gt;&gt;&gt; type((1, 2, [3, '4']))     &lt;class 'tuple'&gt; </code></pre></li> </ol>  <p><em>So, why does the Python Docs state now that "<strong>all</strong> immutable built-in objects are hashable", although especially the <code>tuple</code> type <strong>can contain unhashable types</strong>?</em></p>