<p>I am in the process of implementing a hash table and hence hash function in C and heard that Murmurhash was a suitably fast algorithm for this purpose. Looking up some C code for this provided: </p>  <pre><code>uint32_t murmur3_32(const char *key, uint32_t len, uint32_t seed) {     static const uint32_t c1 = 0xcc9e2d51;     static const uint32_t c2 = 0x1b873593;     static const uint32_t r1 = 15;     static const uint32_t r2 = 13;     static const uint32_t m = 5;     static const uint32_t n = 0xe6546b64;      uint32_t hash = seed;      const int nblocks = len / 4;     const uint32_t *blocks = (const uint32_t *) key;     int i;     for (i = 0; i &lt; nblocks; i++) {         uint32_t k = blocks[i];         k *= c1;         k = (k &lt;&lt; r1) | (k &gt;&gt; (32 - r1));         k *= c2;          hash ^= k;         hash = ((hash &lt;&lt; r2) | (hash &gt;&gt; (32 - r2))) * m + n;     }      const uint8_t *tail = (const uint8_t *) (key + nblocks * 4);     uint32_t k1 = 0;      switch (len &amp; 3) {     case 3:         k1 ^= tail[2] &lt;&lt; 16;     case 2:         k1 ^= tail[1] &lt;&lt; 8;     case 1:         k1 ^= tail[0];          k1 *= c1;         k1 = (k1 &lt;&lt; r1) | (k1 &gt;&gt; (32 - r1));         k1 *= c2;         hash ^= k1;     }      hash ^= len;     hash ^= (hash &gt;&gt; 16);     hash *= 0x85ebca6b;     hash ^= (hash &gt;&gt; 13);     hash *= 0xc2b2ae35;     hash ^= (hash &gt;&gt; 16);      return hash; } </code></pre>  <p>I was wondering if I could clarify a few things with regard to the arguments that are being passed here. "Key" is obviously the string that you are hashing. If this is defined in a struct as having an array length of 46, would this be the value that I would pass as "length" in the above function? The argument "seed", I take it this can be any arbitrary value as long it stays constant between hash calls? Are there any other parameters that I need to change keeping in mind that I am working on a 32-bit machine? </p>  <p>I take it I will also need to modulo the return hash by the size of my hash table?</p>  <p>In addition, if anyone could recommend a superior/faster alternative hash function used for strings then that would be much appreciated </p>  <p>Thanks in advance </p>