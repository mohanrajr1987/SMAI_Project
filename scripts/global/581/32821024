<p>I'm trying to create a lazily-evaluated hash in Ruby:</p>  <pre><code>hash = {foo: -&gt; {go_find_foo} } </code></pre>  <p>I don't want callers to know that they might be getting a <code>proc</code> back instead of a value - ideally I want the Hash class to get on each get whether the value is a <code>proc</code>, execute it, set the value in the Hash to the return value of the lambda, and finally return the value to the client.</p>  <p>Ideally I'd like to be able to define these hashes using standard syntax, as in the code example above. This means that I can't really use extension, as then I'd need to invoke the constructor manually (<code>hash = LazyHash.new</code>). If I monkey-patch, then I can't delegate to the original implementation of <code>[]</code>.</p>  <p>Any ideas? Are there any libraries that already do this? Is there any way to tell Ruby which implementation of <code>Hash</code> to instantiate when interpreting the <code>{}</code> symbols?</p>