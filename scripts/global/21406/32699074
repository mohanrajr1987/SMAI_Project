<p><strong>What I want to do:</strong></p>  <ul> <li>Update a Salesforce object when a row is changed in the database.</li> <li>I know how to update Salesforce with a Mule flow once Mule receives notification that an object needs updated.</li> <li>The main problem I need to solve is, how can I notify Mule that the database has changed.</li> </ul>  <p><strong>What I can't do:</strong></p>  <ul> <li>Change any of the dependent software or versions.</li> <li>Change the application that updates the database. </li> </ul>  <p><strong>What I want to avoid:</strong></p>  <ul> <li>Polling the database for changes. The Mule Connector for SQL Server uses JDBC and polls for changes.</li> </ul>  <p><strong>What I have to work with (cannot be changed):</strong></p>  <ul> <li>MS SQL Server 2012</li> <li>Mule ESB 3.7</li> <li>Salesforce</li> </ul>  <p><strong>What I have done so far:</strong></p>  <ol> <li>Created a flow in Mule using the SQL Server Mule Connector to poll the database for changes.</li> <li>The next attempt to make the process event driven was to create a CLR function that would put a message on a RabbitMQ to be consumed by a Mule RabbitMQ Connector. That failed  because the RabbitMQ assembly couldn’t be included in SQL Server runtime.</li> <li>The third attempt is to use a Service Broker to make a REST callout to a Mule HTTP endpoint component when a row is modified. Mule would then transform and modify the Salesforce object using the Mule Salesforce connector.</li> </ol>  <p><strong>What I’m expecting:</strong></p>  <ul> <li>Given the inherent incompatibilities between Java and .Net/SQL Server, I’m thinking that using a Service Broker to make a REST call to Mule is the best solution I am going to get.</li> </ul>  <p>Is there a better solution?</p>