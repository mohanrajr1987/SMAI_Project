<p>I'm trying to start my mule applications with all beans in lazy init, so I have create a BeanFactoryPostProcessor to set this property to "true".</p>  <pre><code>public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {     ArrayList&lt;String&gt; lazyBeans = new ArrayList&lt;String&gt;();     if (isActiveLazyBeans()) {         String[] beanNames = beanFactory.getBeanDefinitionNames();         for (String beanName : beanNames) {             AbstractBeanDefinition beanDef = (AbstractBeanDefinition) beanFactory.getBeanDefinition(beanName);             beanDef.setLazyInit(Boolean.TRUE);                 lazyBeans.add(beanName);         }     }     logger.info("Se finaliza el BeanFactoryPostProcessorLazyBeans. El listado de beans a lazy es: "             + lazyBeans.toString()); } </code></pre>  <p>The first problem is managing the mule notifications, the factoryBean "ServerNotificationManagerConfigurator" (spring bean name=_muleNotificationManager) is not instantiate in any moment and then my listeners are not loaded to manage the notifications.</p>  <p>¿Is there any way to know which beans are essentials to mule to avoid set them to lazy?</p>  <p>¿Should those beans be instantiate at runtime when a notification is generated?</p>  <p>Any help is appreciated.</p>