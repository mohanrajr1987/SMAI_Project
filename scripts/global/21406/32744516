<p>We have a Mule Service running on a server. I am developing a stand alone Mule Client that connects directly into the Mule service. </p>  <p>When I run the client, I am receiving the below error:</p>  <pre><code>    ERROR 2015-09-23 10:36:02,724 [[cheetah-web-services].connector.http.mule.default.receiver.03] org.mule.exception.DefaultMessagingExceptionStrategy:  ******************************************************************************** Message               : Failed to transform from "byte[]" to "Object" Type                  : org.mule.api.transformer.TransformerException Code                  : MULE_ERROR-109 JavaDoc               : http://www.mulesoft.org/docs/site/current3/apidocs/org/mule/api/transformer/TransformerException.html Transformer           : ByteArrayToMuleMessage{this=1574dd9, name='null', ignoreBadInput=false, returnClass=SimpleDataType{type=org.mule.api.MuleMessage, mimeType='*/*'}, sourceTypes=[SimpleDataType{type=[B, mimeType='*/*'}, SimpleDataType{type=java.io.InputStream, mimeType='*/*'}]} ******************************************************************************** Exception stack is: 1. com.mycompany.myapp.service.model.ServiceSearch; class invalid for deserialization (java.io.InvalidClassException)   java.io.ObjectStreamClass$ExceptionInfo:150 (null) 2. java.io.InvalidClassException: com.mycompany.myapp.service.model.ServiceSearch; class invalid for deserialization (org.apache.commons.lang.SerializationException)   org.mule.util.SerializationUtils:85 (null) 3. Failed to transform from "byte[]" to "Object" (org.mule.api.transformer.TransformerException)   org.mule.transformer.simple.ByteArrayToSerializable:54 (http://www.mulesoft.org/docs/site/current3/apidocs/org/mule/api/transformer/TransformerException.html) ******************************************************************************** Root Exception stack trace: java.io.InvalidClassException: com.mycompany.myapp.service.model.ServiceSearch; class invalid for deserialization </code></pre>  <p>I have setup a remote dispatcher agent on the server. </p>  <pre><code>  &lt;client:remote-dispatcher-agent&gt; &lt;client:remote-endpoint address="http://localhost:20809" exchange-pattern="request-response" responseTimeout="10000"/&gt; </code></pre>  <p></p>  <p>I have created a separate mule client.</p>  <pre><code>    &lt;client:remote-dispatcher-agent&gt;     &lt;client:remote-endpoint ref="remoteDispatcherChannel" /&gt;     &lt;client:xml-wire-format/&gt; &lt;/client:remote-dispatcher-agent&gt;   &lt;http:endpoint name="remoteDispatcherChannel"                 host="localhost"                port="20809"                path="_remoting"                exchange-pattern="request-response" /&gt; </code></pre>  <p>Below is the Client Code.  The ServiceSearch object implements all Serializable.</p>  <pre><code>  MuleClient muleClient = new MuleClient(true);         RemoteDispatcher dispatcher2 = muleClient.getRemoteDispatcher("http://127.0.0.1:20809/_remoting");         MuleMessage result = dispatcher2.sendToRemoteComponent("myAppServiceDelegate", ServiceSearch, msgMap); </code></pre>  <p>Below is the Mule Service flow on the server I am trying to get into.  I am coming in on the invoker step.  I choice this step as I could sent the object directly to the service in the required format</p>  <pre><code>  &lt;flow name="post:/service/search:my-web-services-config" initialState="started"&gt;     &lt;logger level="INFO" doc:name="Log Request Properties" message="Request Type: #[message.inboundProperties.'http.method'], Request Path: #[message.inboundProperties.'http.request.path'], Request Params: #[message.inboundProperties.'http.query.params']" /&gt;     &lt;json:json-to-object-transformer returnClass="com.mycompany.myapp.service.model.ServiceSearch" ignoreBadInput="true" mimeType="application/json" doc:name="Request JSON to ServiceSearch" /&gt;      &lt;invoke object-ref="myappServiceDelegate" method="processSearch" methodArguments="#[payload],#[flowVars.'CLIENT_ID']" doc:name="Calling Search Delegate" /&gt;     &lt;logger message="Generated DSL: #[payload.queryDSL]" level="INFO" doc:name="Log Query DSL" /&gt;      &lt;flow-ref name="BigDataSearchFlow" doc:name="Big Data Flow" /&gt;     &lt;exception-strategy ref="globalResponseExceptionStrategy" doc:name="Reference Exception Strategy" /&gt; &lt;/flow&gt; </code></pre>  <p>I would appreciate some feedback on this approach and suggestions on what I should look for in the ServiceSearch object.</p>  <p>Russ</p>