<p>I'm trying to figure out how to properly write an Ember test helper that performs its own async operations and tests that themselves involve async operations not necessarily wrapped in async helpers.  The examples on the Ember site <a href="http://guides.emberjs.com/v2.0.0/testing/test-helpers/#toc_custom-test-helpers" rel="nofollow">here</a> and <a href="http://emberjs.com/api/classes/Ember.Test.html#method_registerAsyncHelper" rel="nofollow">here</a> both show async test helpers that are merely constructed by calling pre-existing async helpers, not code that creates its own async condition.</p>  <p>Background:  I'm working on a service that's going to have a REST back end fronted by Ember+Ember Data.  I want to write some test code that talks to the actual server in order to allow us to work out details on how Ember-Data interacts with the server.  (Before you jump up and down about how integration tests should use fake data so that they can be run in CI mode, what we've done is set up a <strong>separate</strong> Ember app whose sole purpose in life is to exercise the data model through Ember Data for the purposes of debugging the <strong>server</strong>.  Thus, these are really <strong>server</strong> tests, designed to ensure the compatibility between the server and Ember Data, not integration tests on the Ember application itself.)</p>  <p>Thus, what some of the tests want to do is:</p>  <ol> <li>Execute an AJAX query to the server to trigger it to set up a certain data set.  (Essentially, invoking some special test code inside the server to create appropriate preconditions.)</li> <li>Employ the Ember Data API in order to retrieve data from the server (or write data to it) in the same manner that the "real" Ember application would.</li> <li>Ensure that we get back what we expect, or that the data in the server looks correct afterwards.</li> </ol>  <p>Both of the first two operates are clearly asynchronous.  The first would very clearly be a nice async helper.  The second doesn't necessarily have to be a helper because each invocation is going to be different, but clearly the test itself needs to wait on the promise that methods from <code>DS.store</code> return.</p>  <p>Finally, other stuff I know:</p>  <ol> <li>I understand the fundamental theory behind how Ember's test helper work.  (Chained promises, etc.)</li> <li>The built-in async helpers (e.g. <code>click</code>, <code>visit</code>) all finish with <code>return app.testHelpers.wait();</code> </li> <li><code>wait</code> returns an instance of <code>RSVP.Promise</code> which does a lot of processing to make sure things have more-or-less cleaned up before it resolves, including dealing with outstanding AJAX queries, test waiters, etc.</li> <li><code>wait</code> can interact with test waiters, if required.</li> </ol>  <p>Thus, it would seem that if my async helper did the same thing as Ember's (i.e. <code>return app.testHelpers.wait();</code>) this would be sufficient for my AJAX helper, since <code>wait</code> would take care of waiting for the AJAX transaction to complete.  This doesn't necessary answer the broader question, however.</p>  <p>OK, now the real questions:</p>  <ol> <li><p>If I want to write my own arbitrary async helper, is it sufficient for me to return an instance of <code>RSVP.Promise</code> that will be resolved at the appropriate time?  Or is it necessary to actually use the <code>wait()</code> mechanism (and possibly test waiters) because of some additional Ember dependencies on the behavior of the <code>wait</code> mechanism?  </p></li> <li><p>Does Ember have any special requirements for tests involving async operations mid-stream?  Or are the <a href="https://api.qunitjs.com/async/" rel="nofollow">QUnit mechanisms for async tests</a> sufficient?</p></li> <li><p>Does Ember have any kind of "wrapper" for the QUnit async stuff?  (The way that it "hides" the QUnit-ness behind its set of test calls.)</p></li> <li><p>Do Ember Data interactions with the server have a dependency on the Ember run loop?</p></li> </ol>  <p>OK, I think that's clearly enough for a single question. :)  I greatly appreciate anybody who's willing to educate me.</p>