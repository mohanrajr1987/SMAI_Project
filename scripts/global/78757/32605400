<p>I'm using Ember 2.0 with ember-data 2.0.</p>  <p>In Rails it's very common to model forms and components using real instances of models. For a <code>posts/new</code> form you would pass in a <code>Post.new</code> and use that inside the <code>form.html.erb</code> template.</p>  <p>In Ember that is made difficult because calling <code>new Post</code> creates a broken model. Instead you're encouraged to use stores, and with that use <code>this.store.createRecord('post');</code>.</p>  <p>This is fine, but not when building isolated components. For example a form where the user can add multiple models, say a category creator. In my head the structure would be something as follows:</p>  <p><code>category-form/template.hbs</code></p>  <pre><code>&lt;button {{action 'addCategory'}}&gt;Add category&lt;/button&gt; {{#each categories as |category|}}     {{input value=category.name}} {{/each}} &lt;button {{action 'save'}}&gt;Save&lt;/button&gt; </code></pre>  <p>Then the component.js would be something like:</p>  <p><code>category-form/component.js</code></p>  <pre><code>import Ember from 'ember'; import Category from 'app/category/model';  export default Ember.Component.extend({     categories: [],      actions: {         addCategory() {             // THIS DOES NOT WORK             this.get("categories").pushObject(new Category);         },          save() {             this.sendAction("saveCategories", this.get("categories"));         }     } }); </code></pre>  <p>The example above does work, but would instead require <code>this.store.createRecord</code>. But as far as I know the component does not have access to the store. This is sane because that would be the component messing with a global state. Also when using <code>createRecord</code> you end up with lots of residual models in the store if the user navigates away without saving the model.</p>  <p>I want the <code>category-form</code> component in this example to be completely isolated from the rest of the global state.</p>  <p>My question is, how would this be handled correctly using ember logic?</p>