<p>I'm using ember.js for a week and ran into a problem concerning ember-data and ember.js. I have a simple 1:N-relationship on a model called <code>User</code>. <code>User</code> hasMany <code>Slots</code> which are defined by a <code>start_time</code> and an <code>end_time</code>.</p>  <p>In a component which is called <code>slots-per-day</code> all slots of a given user are rendered filtered by day with the following js code:</p>  <pre><code>  /* ... rest of component.js of slots-per-day ... */   filteredSlots: Ember.computed('user', function() {     let time = moment();     return this.get('user.slots').filter( (slot) =&gt; {       let left = moment(time).startOf('day');       let right = moment(time).endOf('day');       let start_time = moment(slot.get('start_time'));       let end_time = moment(slot.get('end_time'));       console.debug(slot.get('start_time'));        return start_time.isBetween(left, right) || end_time.isBetween(left, right);     });   })   /* ... rest of component.js of slots-per-day ... */ </code></pre>  <p>There are several problems I faced with different approaches:</p>  <ol> <li><p>Using the code above the filteredSlots-property is only evaluated <strong>once</strong>. The underlying storage is in an <em>undefined</em> state, since the <code>console.debug</code> outputs <code>undefined</code> but the amount of slots is just right. So i guess ember-data has loaded the array for the slots, but <em>forget</em> to load the rest of data. If I do a transition to the same route all data is displayed properly and <code>console.debug</code> returns different moment.js-dates.</p></li> <li><p>If I add <code>user.slots</code> to the dependency list of that property, it is evaluated <strong>twice</strong>. Both evaluations lead to the same debug output as in (1): <code>undefined</code>.</p></li> <li><p>If I add <code>user.slots.@each.start_time</code>, the property is evaluated the amount of components on that page times the amount of slots (which is very slow). Despite the fact, that it is slow, it works and renders the data correctly.</p></li> </ol>  <p>So the question is: How do I preload all data in ember-data, before the components get rendered?</p>  <p><strong>EDIT</strong>:</p>  <p>I also tried with promises:</p>  <pre><code>  /* SlotRoute ... */       setupController(controller, model){     this._super(controller, model);     controller.set('time', this.get('time'));     controller.set('users', model.users);     controller.set('timeScope', this.get('timeScope'));   },    users: Ember.computed('time', function() {     return this.store.query('user', {       slots: {         time: this.get('time').toString(),         timeScope: this.get('timeScope')       }     });   }),    model(params) {     return Ember.RSVP.hash({       users: this.get('users'),       slots: this.store.get('slots')     });   },   /* ... */ </code></pre>  <p>No change in positions (1), (2) and (3) of the list above.</p>