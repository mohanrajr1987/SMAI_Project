<p>I read this <a href="http://www.asp.net/signalr/overview/guide-to-the-api/mapping-users-to-connections#database" rel="nofollow">topic</a> about mapping SignalR users to connections. Briefly, the topic explain four methods of mapping and I want to use the forth method (Permanent, external storage). The method uses a SQL Server database to store the <code>ConnectionId</code> when the client is connected (when <code>OnConnected</code> method is fired) and when the client closes the browser (when <code>OnDisconnected</code> method is fired) it just make the <code>ConnectionId</code> not valid.</p>  <p>Here is the code for database:</p>  <pre><code>public class UserContext : DbContext {     public DbSet&lt;User&gt; Users { get; set; }     public DbSet&lt;Connection&gt; Connections { get; set; } }  public class User {     [Key]     public string UserName { get; set; }     public ICollection&lt;Connection&gt; Connections { get; set; } }  public class Connection {     public string ConnectionID { get; set; }     public string UserAgent { get; set; }     public bool Connected { get; set; } } </code></pre>  <p>And here is the code in the hub class:</p>  <pre><code>[Authorize] public class ChatHub : Hub {     public void SendChatMessage(string who, string message)     {         var name = Context.User.Identity.Name;         using (var db = new UserContext())         {             var user = db.Users.Find(who);             if (user == null)             {                 Clients.Caller.showErrorMessage("Could not find that user.");             }             else             {                 db.Entry(user)                     .Collection(u =&gt; u.Connections)                     .Query()                     .Where(c =&gt; c.Connected == true)                     .Load();                  if (user.Connections == null)                 {                     Clients.Caller.showErrorMessage("The user is no longer connected.");                 }                 else                 {                     foreach (var connection in user.Connections)                     {                         Clients.Client(connection.ConnectionID)                             .addChatMessage(name + ": " + message);                     }                 }             }         }     }      public override Task OnConnected()     {         var name = Context.User.Identity.Name;         using (var db = new UserContext())         {             var user = db.Users                 .Include(u =&gt; u.Connections)                 .SingleOrDefault(u =&gt; u.UserName == name);              if (user == null)             {                 user = new User                 {                     UserName = name,                     Connections = new List&lt;Connection&gt;()                 };                 db.Users.Add(user);             }              user.Connections.Add(new Connection             {                 ConnectionID = Context.ConnectionId,                 UserAgent = Context.Request.Headers["User-Agent"],                 Connected = true             });             db.SaveChanges();         }         return base.OnConnected();     }      public override Task OnDisconnected(bool stopCalled)     {         using (var db = new UserContext())         {             var connection = db.Connections.Find(Context.ConnectionId);             connection.Connected = false;             db.SaveChanges();         }         return base.OnDisconnected(stopCalled);     } } </code></pre>  <p>I want to enhance this method because using this method will create many ConnectionIds that is not needed at all. Also, with this method the Connections table will be enlarged with time without any useful. </p>