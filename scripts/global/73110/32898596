<p><code>ExportClient</code> class has <code>OnTickRecieved</code> event, which helps me to receive some data (bid prices from market). All I want - is to receive this data real-time on my charts in browser. When I press <code>Go</code> button on UI-side, it calls <code>Go()</code> method in controller, and then nothing is happening. And it's logical - because after request on server, controller is destroyed. </p>  <p><strong>My question is:</strong> how to force a server to send me an event-data constantly?</p>  <p><strong>Controller</strong> code:</p>  <pre><code>public class ChartsController : Controller {     [HttpGet]     public void Go()     {         var exportClient = new ExportClient();         exportClient.TickRecieved += exportClient_TickRecieved;     }      private void exportClient_TickRecieved(object sender, TickRecievedEventArgs args)     {         ImpulserHub.SendBidPrice(args.Bid);     } } </code></pre>  <p><strong>Hub</strong> code:</p>  <pre><code>[HubName("impulserHub")] public class ImpulserHub : Hub {    public static void SendBidPrice(double bid)    {        var hubContext = GlobalHost.ConnectionManager.GetHubContext&lt;ImpulserHub&gt;();        hubContext.Clients.All.sendBidPrice(bid);    } } </code></pre>  <p>And I have tested SignalR, this code works fine:</p>  <pre><code>[HttpGet] public void Go() {    ImpulserHub.SendBidPrice(3.3333333); // I have received this number on UI } </code></pre>