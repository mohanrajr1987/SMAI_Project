<p>So I've created a windows service that functions as a backend and communicates with a html/jquery based front end which displays data.</p>  <p>It seems simple enough.  Add the Authorize attribute to hubs/hub methods, then overide the UserAuthorized method and handle my custom authorization code there.</p>  <p>Problem is the UserAuthorized method never triggers.  I've tried adding the Authorize attribute to the hubs as well as individual methods and doesn't seem to ever trigger.  </p>  <p>Wondering what I'm missing here...</p>  <pre><code>[Authorize] public class OverviewHub : Hub {     const string eventSource = "PvValuationController";      public override Task OnConnected()     {         Console.WriteLine("New Client Connection:" + Context.ConnectionId);         return base.OnConnected();     }      public override Task OnDisconnected(bool stopCalled)     {         Console.WriteLine("Client Disconnected:" + Context.ConnectionId);         return base.OnDisconnected(stopCalled);     }      public override Task OnReconnected()     {         Console.WriteLine("Client Reconnected:" + Context.ConnectionId);         return base.OnReconnected();     }      // Returns all request overview data to the client     public void GetOverviewData()     {         try         {             Clients.Caller.ReceiveAllData(DealTickerState.Instance.GetOverviewDict);         }         catch (Exception ex)         {             EventLog.WriteEntry(eventSource, "OverviewHub GetOverviewData error." + ex.ToString());         }     } } </code></pre>  <p>Copied straight from <a href="http://www.asp.net/signalr/overview/security/hub-authorization" rel="nofollow">http://www.asp.net/signalr/overview/security/hub-authorization</a></p>  <pre><code> [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)] public class AuthorizeClaimsAttribute : AuthorizeAttribute {     protected override bool UserAuthorized(System.Security.Principal.IPrincipal user)     {         if (user == null)         {             throw new ArgumentNullException("user");         }          var principal = user as ClaimsPrincipal;          if (principal != null)         {             Claim authenticated = principal.FindFirst(ClaimTypes.Authentication);             if (authenticated != null &amp;&amp; authenticated.Value == "true")             {                 return true;             }             else             {                 return false;             }         }         else         {             return false;         }     } } </code></pre>