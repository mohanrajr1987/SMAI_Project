<p>I have the following situation: I have a SignalR application in which I use Autofac as a dependency resolver.</p>  <pre><code>public class Startup {     public void Configuration(IAppBuilder app)     {          var container = new AutofacContainer().Container;          var resolver = new AutofacDependencyResolver(container);         resolver.UseRedis("serverIp", portNumber, "password", "channelName");          app.UseAutofacMiddleware(container);         app.MapSignalR(new HubConfiguration         {             Resolver = resolver         });          resolver.UseRedis("192.168.122.213", 6300, "", "FLEDGG");         AddSignalRInjection(container, resolver);     }      private void AddSignalRInjection(IContainer container,IDependencyResolver resolver)     {         var updater = new ContainerBuilder();          updater.RegisterInstance(resolver.Resolve&lt;IConnectionManager&gt;());         updater.Update(container);     } } </code></pre>  <p>And this is the <code>AutofacContainer</code> class.</p>  <pre><code>public class AutofacContainer {     public IContainer Container { get; set; }     public AutofacContainer()     {         var builder = new ContainerBuilder();          builder.RegisterHubs(Assembly.GetExecutingAssembly())             .PropertiesAutowired();         builder.RegisterType&lt;Test&gt;()             .As&lt;ITest&gt;()             .PropertiesAutowired();          Container = builder.Build();     } } </code></pre>  <p>Now, <a href="http://GlobalHost.DependencyResolver.UseRedis(%22server%22,%20port,%20%22password%22,%20%22AppName%22);" rel="nofollow">the official SignalR Redis scaleout documentation from Microsoft</a> states that I should tell the <code>GlobalHost.DependencyResolver</code> to <code>UseRedis</code>.</p>  <pre><code>    public void Configuration(IAppBuilder app)     {         // Any connection or hub wire up and configuration should go here         GlobalHost.DependencyResolver.UseRedis("server", port, "password", "AppName");         app.MapSignalR();     } </code></pre>  <p>Since I don't use <code>GlobalHost</code> anymore in the application (even if I use <code>GlobalHost</code> there is absolutely no behavior in Redis) (<a href="http://docs.autofac.org/en/latest/integration/signalr.html" rel="nofollow">as the Autofac integration with SignalR and Owin indicates</a>):</p>  <blockquote>   <p>A common error in OWIN integration is use of the GlobalHost. In OWIN   you create the configuration from scratch. You should not reference   GlobalHost anywhere when using the OWIN integration.</p> </blockquote>  <p>As the <code>Startup</code> class is configured right now:</p>  <pre><code>var resolver = new AutofacDependencyResolver(container); resolver.UseRedis("serverIp", portNumber, "password", "channelName"); </code></pre>  <p>so I create a new <code>resolver</code> of type <code>AutofacDependencyResolver</code> and it connects successfully to the Redis PubSub. The issue however is that if I try to send a single message, that message will repeat itself thousands of times. </p>  <p>(In the Chrome console, for sending a single message from the server I end up in an infinite loop and the client receives it infinitely number of times).</p>  <p>So,  the question is: How do I setup SignalR Redis scaleout while using Autofac as dependency resolver (note: there is no circumstance where I can use another dependency resover).</p>  <p>Thanks!</p>  <p>EDIT: If you want further information about the solution, <a href="https://github.com/radu-matei/SignalRDependencyInjection" rel="nofollow">here is the repo</a> without this line: </p>  <pre><code>resolver.UseRedis("serverIp", portNumber, "password", "channelName"); </code></pre>  <p>Thanks!</p>  <p>EDIT: I feel like I should clarify some things: If I use <code>resolver.UseRedis();</code>, every message that would be normally sent (once) gets sent many times - so if I subscribe to "channelName" in Redis using <code>subscribe "channelName"</code>, I find it to be consistent with the behavior on the client: each message gets sent multiple times.</p>  <p>The next thing to do is have a basic SignalR application without Autofac and see how Redis behaves, although I feel it is an Autofac related issue,  more specifically related with the configuration.</p>  <p>Thanks!</p>  <p>UPDATE: Apparently, there is the same behavior in a basic SignalR app without Autofac. The issue has nothing to do with Autofac.</p>