<p>Example:</p>  <pre><code>int main(int argc, char**) {     constexpr int a = argc * 0;     (void)a;     constexpr int b = argc - argc;     (void)b;     return 0; } </code></pre>  <p><code>argc</code> is not a constant expression, but the compiler is still able to compute the results of <code>a</code> and <code>b</code> in compile time (i.e. <code>0</code>) in both cases.</p>  <p><a href="http://melpon.org/wandbox/permlink/Q0CpJqBPuPiT5nTa" rel="nofollow">g++</a> accepts the code above, while <a href="http://melpon.org/wandbox/permlink/Y3kelmH0N6fyuw6Y" rel="nofollow">clang</a> and MSVC14 reject it.</p>  <p>Does the standard allows the compiler being as smart as g++ with regard to <code>constexpr</code>?</p>