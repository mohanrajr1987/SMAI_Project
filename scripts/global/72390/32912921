<p>Consider the following declaration:</p>  <pre><code>#include &lt;array&gt;  struct X {     //std::array&lt;bool,3&gt; arr={false,false,false};     bool brr[3]={false,false,false}; }; </code></pre>  <p>As is, it compiles normally by g++ 5.2. But if I uncomment the <code>std::array</code>, I get an error:</p>  <pre><code>test.cpp:5:46: error: array must be initialized with a brace-enclosed initializer      std::array&lt;bool,3&gt; arr={false,false,false};                                               ^ test.cpp:5:46: error: too many initializers for ‘std::array&lt;bool, 3u&gt;’ </code></pre>  <p>OTOH, this declaration works without problems inside <code>main()</code>. Also, the following initialization does work inside <code>struct X</code>:</p>  <pre><code>std::array&lt;bool,3&gt; arr={{false,false,false}}; </code></pre>  <p>Why can't I use the simple initialization with single braces in struct definition?</p>