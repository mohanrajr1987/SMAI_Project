<blockquote>   <p>Design and code a class named <code>Text</code> that manages a dynamically allocated array of strings. Upon instantiation, a <code>Text</code> object receives nothing or a reference to an unmodifiable string. The string holds the name of the text file that contains the records to be stored in an object of this class. If the file does not exist, the <code>Text</code> object assumes a safe empty state. If the file exists, the one-argument constructor allocates memory for the number of records contained in the file and copies them into memory. To review the syntax for reading from a text file using an <code>ifstream</code> object see the chapter in your OOP244 notes entitled <em>Custom File Operators</em>. See also <a href="http://www.cplusplus.com" rel="nofollow">cplusplus.com</a>.</p>      <p>Your design also includes the following member functions:</p>      <ul>   <li>a copy constructor</li>   <li>a copy assignment operator</li>   <li>a move constructor</li>   <li>a move assignment operator</li>   <li>a destructor</li>   <li>a member function named <code>size_t size() const</code> that returns the number of records of text data</li>   </ul>      <p>Define your class and its implementation in <code>namespace w3</code>.</p> </blockquote>  <p>Here is my code:</p>  <p>//Text.h</p>  <pre><code>namespace w3{ class Text{     std::string file_name;     std::string* handler;     int no_of_rec=0; public:     Text();     Text(char*);     size_t size() const;     Text(const Text&amp; );     Text&amp; operator=(const Text&amp;);     Text(Text&amp;&amp;);     Text&amp;&amp; operator=(Text &amp;&amp;);     ~Text(); }; // class Text  } //namespace w3 </code></pre>  <p>//Text.cpp</p>  <pre><code>#include &lt;iostream&gt; #include &lt;string&gt; #include &lt;fstream&gt; #include &lt;cstring&gt; #include "Text.h" namespace w3{     Text::Text(){         file_name="";         handler = nullptr;         no_of_rec = 0;     }     Text::Text(char* fname){     file_name = fname;     if (fname[0]='\0'){         file_name=" ";         std::cout &lt;&lt; "can not find file name !!" &lt;&lt;std::endl;     }else{         std::fstream f(file_name);         std::string line;         if (f.is_open()){             while (std::getline(f,line,'\n')){                 no_of_rec++;             }         }else{             std::cout &lt;&lt; "file not open !!" &lt;&lt;std::endl;         }           //std::cout &lt;&lt; "number of records" &lt;&lt; size() &lt;&lt; std::endl;          std::string* handle = new std::string[size()];          f.clear();         f.seekg(0,std::ios::beg);          int counter = 0;         while (std::getline(f,line,'\n')){             if (counter != no_of_rec){             handle[counter]=line;             counter++;              }         }          //std::cout &lt;&lt; handle [1] &lt;&lt;std::endl;            }     }      size_t Text::size() const{         return (size_t)no_of_rec;      }        //-------------------Special Member Functions-----------      Text::Text(const Text&amp; src){ //copy constructor         std::string file_name = src.file_name;         int no_of_rec = src.no_of_rec;          if (src.handler != nullptr){             handler = new std::string[src.size()];             handler = src.handler;             //std::cout &lt;&lt; handler[123]&lt;&lt;std::endl;         }else{             handler = nullptr;         }      }      Text&amp;  Text::operator=(const Text&amp; src){         if (this != &amp;src){             int no_of_rec = src.no_of_rec;             std::string file_name = src.file_name;             if (src.handler != nullptr){                 handler = new std::string[src.size()];                 handler=src.handler;             }else{                 handler = nullptr;             }         }         return *this;     }      Text::Text(Text&amp;&amp; src){         file_name=src.file_name;         handler = src.handler;         no_of_rec = src.no_of_rec;         src.file_name=" ";         src.handler=nullptr;         src.no_of_rec=0;     }      Text&amp;&amp; Text::operator=(Text&amp;&amp; src){         if (&amp;src != this){             file_name=src.file_name;             handler = src.handler;             no_of_rec = src.no_of_rec;             src.file_name=" ";             src.handler=nullptr;             src.no_of_rec=0;          }         return std::move(*this);     }      Text::~Text(){         //delete [] handler;     } } </code></pre>  <p>//main.cpp</p>  <pre><code>#include &lt;iostream&gt;  #include &lt;iomanip&gt;  #include &lt;utility&gt;  #include &lt;ctime&gt; // #include "Text.h"  #include "Text.cpp"  #define TIME(start, end) double((end) - (start)) / CLOCKS_PER_SEC   int main (int argc, char* argv[]) {      if (argc == 1) {          std::cerr &lt;&lt; argv[0] &lt;&lt; ": missing file operand\n";          return 1;      }      else if (argc != 2) {          std::cerr &lt;&lt; argv[0] &lt;&lt; ": too many arguments\n";          return 2;      }      std::clock_t cs, ce;      {          std::cout &lt;&lt; std::fixed &lt;&lt; std::setprecision(3);          cs = std::clock();          w3::Text a;          ce = std::clock();          std::cout &lt;&lt; "Constructor      " &lt;&lt; TIME(cs, ce) &lt;&lt; " seconds";          std::cout &lt;&lt; " - a.size = " &lt;&lt; a.size() &lt;&lt; std::endl;           cs = std::clock();          w3::Text b(argv[1]);          ce = std::clock();          std::cout &lt;&lt; "Constructor      " &lt;&lt; TIME(cs, ce) &lt;&lt; " seconds";          std::cout &lt;&lt; " - b.size = " &lt;&lt; b.size() &lt;&lt; std::endl;           cs = std::clock();          a = b;          ce = std::clock();          std::cout &lt;&lt; "Copy Assignment  " &lt;&lt; TIME(cs, ce) &lt;&lt; " seconds";          std::cout &lt;&lt; " - a.size = " &lt;&lt; a.size() &lt;&lt; std::endl;           cs = std::clock();          a = std::move(b);          ce = std::clock();          std::cout &lt;&lt; "Move Assignment  " &lt;&lt; TIME(cs, ce) &lt;&lt; " seconds";          std::cout &lt;&lt; " - a.size = " &lt;&lt; a.size() &lt;&lt; std::endl;           cs = std::clock();          w3::Text c = a;          ce = std::clock();          std::cout &lt;&lt; "Copy Constructor " &lt;&lt; TIME(cs, ce) &lt;&lt; " seconds";          std::cout &lt;&lt; " - c.size = " &lt;&lt; c.size() &lt;&lt; std::endl;           cs = std::clock();          w3::Text d = std::move(a);          ce = std::clock();          std::cout &lt;&lt; "Move Constructor " &lt;&lt; TIME(cs, ce) &lt;&lt; " seconds";          std::cout &lt;&lt; " - d.size = " &lt;&lt; d.size() &lt;&lt; std::endl;           cs = std::clock();      }      ce = std::clock();      std::cout &lt;&lt; "Destructor       " &lt;&lt; TIME(cs, ce) &lt;&lt; " seconds\n";  } </code></pre>  <p>I am having error that there is multiple definition of Text in Text.cpp</p>  <p>I know there is problem with my namespace but i dont know how to fix it.</p>