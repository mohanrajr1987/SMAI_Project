<p>To be short:</p>  <ul> <li><code>Derived</code> inherits from <code>Base</code></li> <li><code>Holder</code> is templated to contains a pointer to anything</li> <li><p>I can tell that an object know as <code>Holder&lt;Base&gt;</code> is a <code>Holder&lt;Derived&gt;</code>.</p>  <p>How can I tell my compiler?</p></li> </ul>  <p>This does not compile:</p>  <pre><code>struct Base { };  struct Derived : Base { };  template &lt;typename T&gt; struct Holder {     T* point;     int id; };  Derived* d = new Derived(); Holder&lt;Base&gt; holder {d, 12}; Holder&lt;Derived&gt; specific( static_cast&lt;Holder&lt;Derived&gt;&gt;(holder) ); </code></pre>  <p><code>error: no matching conversion for static_cast from 'Holder&lt;Base&gt;' to 'Holder&lt;Derived&gt;'</code></p>  <p>This was a naive try for sure. But why does this not work and how should I get the <code>specific</code> holder I need? </p>