<p>I used dynamic linq to generate search results.  The very last call is .Select("UserID"), which ultimately returns an IQueryable (non-generic interface).</p>  <p>Now, that represents my list of users who meet search criteria.</p>  <p>Next, I'm trying to join those results with the original Users table so I can then join in the rest of the info associated with each user.</p>  <p>When I try to do this:</p>  <pre><code>IQueryable&lt;Users&gt; users = /*assume valid instance acquired*/ /*matchingUsers is a valid IQueryable instance returned by a dynamic linq query*/ var results = users .Join( matchingUsers, u =&gt; u.ID, m =&gt; m.UserID, (u, m) =&gt; u ) </code></pre>  <p>That fails trying to access m.UserID, because the type of the IQueryable is unknown.  The type is accessible as a Type instance on the IQueryable via the ElementType property, but I don't know how I can use it in this situation.</p>  <p>I've also tried the following:</p>  <pre><code>private class UserIDList { public Guid UserID { get; set; } } filteredUsersDynamicLinqQuery .Select("new MyNamespace.UserIDList(UserID)") </code></pre>  <p>but the new operator can't seem to handle specific type names.  I saw <a href="http://stackoverflow.com/a/8777091/88409">another post</a> suggesting it could, so maybe the syntax is just wrong, but it may just be a <a href="http://stackoverflow.com/a/8785757/88409">custom feature</a>.</p>  <p>I've tried :</p>  <pre><code>var results = users .Join( matchingUsers.Cast&lt;dynamic&gt;, u =&gt; u.ID, m =&gt; m.UserID, (u, m) =&gt; u ) </code></pre>  <p>It's highlighted by the compiler with error: "An expression tree may not contain a dynamic operation."</p>  <p>I've tried:</p>  <pre><code>var results = users .Join( matchingUsers.Cast&lt;UserIDList&gt;(), u =&gt; u.ID, (UserIDList m) =&gt; m.UserID, (u, m) =&gt; u ) </code></pre>  <p>But that gives the runtime error: "Additional information: Unable to cast the type 'DynamicClass3' to type 'MyNamespace+UserIDList'. LINQ to Entities only supports casting EDM primitive or enumeration types."  See also: <a href="http://stackoverflow.com/questions/25453212/iqueryable-to-list">IQueryable to List</a></p>