<p>I have a table/row/column data structure setup. There is a string-based indexer in the DtaTable class to return DtaRows, and another on the DtaRow class to return DtaColumns. So you can write things like...</p>  <pre><code>return theTables["tablename"]["rowidentifier"]["columnname"]; </code></pre>  <p>In actuality, the objects inside the tables are not DtaRows, but one of about three dozen subclasses, like <code>InflationRow</code> and <code>CurrencyRow</code>. Each table contains only objects of those types, so for instance...</p>  <p>theTables["Inflations"]["General"];</p>  <p>always returns an <code>InflationRow</code>.</p>  <p>Now to make this easier to access from C#, I have a bunch of methods at a higher level like...</p>  <pre><code>public DtaTable Inflations { get {return pTables["Inflations"];} } </code></pre>  <p>Now the problem I'd like to solve is that when someone calls one of these methods, they don't get an InflationRow, because DtaTable has DtaRows. So for instance...</p>  <pre><code>MyInfRow = Inflations["General"]; </code></pre>  <p>returns a DtaRow. So I have to cast all the time...</p>  <pre><code>MyInfRow = (InflationRow)Inflations["General"]; </code></pre>  <p>I want to get rid of all the casting.</p>  <p>The only solution I have found so far is to make 36 new subclasses of the table object, each overriding the indexer return type. This seems worse than the casting.</p>  <p>Is there some simpler way to do this?</p>