<p>So, I've seen several posts here that suggest that the best solution to get the id of a parent view of any child view in Android is something of the like:</p>  <pre><code>View parent = (View)child.getParent(); int id = parent.getId(); </code></pre>  <p>Unfortunately, this doesn't quite work in my case. I have a custom ViewGroup (extends FrameLayout) with 2 buttons, a textView and a bar that need to be updated on button clicks.</p>  <pre><code>class WaveControl extends FrameLayout{     Button minus;     Button plus;     ExpandingBar bar; //simple view that only draws a color(need for indication purposes)     int counter;   } </code></pre>  <p>The expanding bar needs to be animated on button clicks and I have methods that take care of that inside WaveControl. I also have a fragment that has five WaveControls and I need to implement an onClickListener in the fragment to apply a filter depending on which of the WaveControls was clicked/updated. BUT even if I implement the above code I get different ids, i.e. as in:</p>  <pre><code>WaveControl wc1; // (in xml id is field_1) WaveControl wc2; // (in xml if is field_2) WaveControl wc3; //... WaveControl wc4; //...  wc1.minus.setOnclickListener(this); wc2.plus.setOnclickListener(this); .... //this for every button  @Override public void OnClick(View v){     View parent = (View)v.getParent();     int id = parent.getId();     Log.i(TAG, "view id: "+ id +"   wc1 id: " + field1.getId());     switch(v.getId()){        case R.id.minus:           ...     }  } </code></pre>  <p>The output is: <code>I/WaveFragmentï¹• view id: -1   wc1 id: 2131624083</code> Clearly this can't serve me as an indicator which was the view being clicked. I have figured a workaround in just making several onClickListeners for each waveControl field, but it doesn't seem like the perfect solution. And still the problem is there : casting a ViewParent to a View will not get you the actual id of the view as laid in the fragment. Any prompts why this is happening would be appreciated. Thanks</p>