<p>I'm having some trouble understanding why a cast I'm performing is throwing runtime exceptions stating that it's an illegal cast.  I did a bit of research and found <a href="http://stackoverflow.com/a/12366064/2359643">this answer</a>, which lead me to the MSDN article <a href="https://msdn.microsoft.com/en-us/library/dd799517.aspx" rel="nofollow">Covariance and Contravariance in Generics</a>.  However, I'm still a bit confused so if anyone can help clarify it would be greatly appreciated.</p>  <p>Here's the object hiearchy for 2 class types:</p>  <pre><code>IMongoEntity (interface)   |   - MongoEntity (abstract)   |     |    -SalesProject (concrete)   |     |    -ManagementProject (concrete) </code></pre>  <hr>  <pre><code>IEntityService&lt;T&gt; where T : IMongoEntity (interface)   |      -EntityService&lt;T&gt; where T : IMongoEntity (concrete superclass)   |       |    - MgmtService : EntityService&lt;ManagementProject&gt; (subclass)   |       |    - SalesService : EntityService&lt;SalesProject&gt; (subclass) </code></pre>  <p>The two non generic services were only created so I could create some specific methods that only apply to those specific types (predefined lookups into the db essentially).</p>  <p>I then have this line, which throws the <code>InvalidCastException</code>:</p>  <pre><code>IEntityService&lt;IMongoEntity&gt; service = fromsales ?      (IEntityService&lt;IMongoEntity&gt;)salesService :      (IEntityService&lt;IMongoEntity&gt;)mgmtService; </code></pre>  <p>Since both services are derived from the same interfaces &amp; abstract classes and the type parameters used are derived from the same abstract class, then why is this cast illegal?</p>  <p>NOTE:  I have workarounds for this, so I'm not really looking for a solution, but instead I want to understand <em>why</em> this is not allowed.</p>