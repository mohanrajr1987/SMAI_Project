<p>I just happened upon an interesting case of data type casting in MySQL.  Consider the following queries:</p>  <pre class="lang-sql prettyprint-override"><code>SELECT * FROM (SELECT 0 AS col) AS t WHERE t.col=123;   #Yields 0 rows SELECT * FROM (SELECT 0 AS col) AS t WHERE t.col="123"; #Yields 0 rows SELECT * FROM (SELECT 0 AS col) AS t WHERE t.col="0";   #Yields 1 row, col=0 SELECT * FROM (SELECT 0 AS col) AS t WHERE t.col="abc"; #Yields 1 row, col=0 </code></pre>  <p>Lines 1, 2, and 3 seem logical to me.  But on line 4, why, oh why, dear SQL, do you so eagerly cast <code>"abc"</code> to be equal to <code>0</code>?!</p>  <p><em>I mean, I get it - <code>"abc"</code> isn't an integer, so <code>0</code> makes the most sense...  Is there a scenario in which this behavior is actually useful?  As far as I can tell, it likely just leads to bugs (as it did on our application)...</em></p>  <p>Perhaps there's a MySQL "mode" that enables warnings for automatic type-casting like this?</p>