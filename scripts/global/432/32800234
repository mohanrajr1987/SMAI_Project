<p>I'm new to TypeScript but have a background in C# and I'm a little bit confused about how to handle TypeScript modules. I've been thinking about modules as namespaces in C# but maybe this is wrong because my code doesn't behave the way I was expecting.</p>  <p>I have the following folder structure:</p>  <pre><code>|-myApp |  |-myController |  |      |-myController.ts |  |-models        |-a.ts        |-b.ts </code></pre>  <p>and this code:</p>  <pre><code>// a.ts module MyApp.Models {     export class A {      } } // b.ts module MyApp.Models {     export class B {      } }  // myController.ts (THIS DOESN'T WORK) module MyApp.MyController {     import Models = MyApp.Models;     class MyController {         a = new Models.A();         b = new Models.B();     } }  // myController.ts (THIS WORKS) module MyApp.MyController {     class MyController {         a = new Models.A();         b = new Models.B();     } } </code></pre>  <p>In the example above my attempt at importing the module (namespace?) Models will result in an error at runtime because Models is undefined. However if I remove the import-statement the code will works just fine. I'm probably not thinking clearly and doing some really stupid beginners mistake but could someone please tell me what I'm doing wrong and what the best way to use modules in my particular scenario would be. Why does it work if I remove the import but not with it?</p>  <p>Regards Kristofer</p>