<p>I'm currently making an app using Xamarin Forms. This app will first call a REST service to retrieve the data and display them then store those data into a SQLite Database. I have an update button where if I click on it, it will prompt the REST service once again to retrieve newer data and replace the old data while the app is running. I have tried to implement the INotifyPropertyChanged but the value just wont' change for me. Am I missing anything with my code below? Thanks!</p>  <p>Vitals Object:</p>  <pre><code>public class Vitals {     public string Height { get; set; }     public string ID { get; set; }     public string Weight { get; set; } } </code></pre>  <p>Update Method:</p>  <pre><code>async void OnUpdate(object sender, EventArgs e)     {         string tempUser = globalPatient.Username;         string tempPin = globalPatient.PIN;         patUpdate = patientManager.GetPatientByUsername (tempUser, tempPin).Result;         App.PatientDB.DeletePatient(tempID);         App.PatientDB.AddNewPatient (patUpdate, tempPin);         DisplayAlert ("Updated", "Your information has been updated!", "OK");     } </code></pre>  <p>VitalsViewModal:</p>  <pre><code>    public class VitalsViewModel: INotifyPropertyChanged {     public event PropertyChangedEventHandler PropertyChanged;      public VitalsViewModel (Patient patient)     {         vitals = patient.Vitals;      }     private List&lt;Vitals&gt; _vitals;      public List&lt;Vitals&gt; vitals {          get {return _vitals; }          set {             if (_vitals != value) {                 _vitals = value;                 OnPropertyChanged ("vitals");             }         }     }      protected virtual void OnPropertyChanged(string propertyName)     {         if (PropertyChanged != null)         {             PropertyChanged(this,                 new PropertyChangedEventArgs(propertyName));         }     } } </code></pre>  <p>VitalsView</p>  <pre><code>public partial class VitalsView : ContentPage, INotifyPropertyChanged {     PatientManager patientManager = new PatientManager ();     Patient globalPatient;     public event PropertyChangedEventHandler PropertyChanged;     public VitalsView (Patient patientZero)     {         InitializeComponent ();         BindingContext = new VitalsViewModel (patientZero);     }  } </code></pre>  <p>Xaml</p>  <pre><code>&lt;ListView x:Name="Vitals" ItemsSource="{Binding vitals}" RowHeight="80" BackgroundColor="Transparent"&gt;         &lt;ListView.ItemTemplate&gt;             &lt;DataTemplate&gt;                 &lt;ViewCell&gt;                     &lt;ViewCell.View&gt;                         &lt;StackLayout Orientation="Vertical" Spacing="0" Padding="15"&gt;                             &lt;Grid&gt;                                 &lt;Label Font="17" Text="{Binding Height} " FontAttributes="Bold" TextColor="#449BC4" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="3" /&gt;                                 &lt;Label Font="14" Text="{Binding Weight, StringFormat='Weight: {0}'}" FontAttributes="Bold"  Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="3" /&gt;                                 &lt;Grid.ColumnDefinitions&gt;                                     &lt;ColumnDefinition Width="30" /&gt;                                     &lt;ColumnDefinition Width="2*" /&gt;                                     &lt;ColumnDefinition Width="2*" /&gt;                                 &lt;/Grid.ColumnDefinitions&gt;                                 &lt;Grid.RowDefinitions&gt;                                     &lt;RowDefinition Height="Auto" /&gt;                                     &lt;RowDefinition Height="Auto" /&gt;                                     &lt;RowDefinition Height="Auto" /&gt;                                 &lt;/Grid.RowDefinitions&gt;                             &lt;/Grid&gt;                         &lt;/StackLayout&gt;                     &lt;/ViewCell.View&gt;                 &lt;/ViewCell&gt;             &lt;/DataTemplate&gt;         &lt;/ListView.ItemTemplate&gt;     &lt;/ListView&gt; </code></pre>