<p>I have a simple usercontrol with a single DependencyProperty. I am unable to set bindings on this property. I don't get any exceptions but the bindings just disappear.</p>  <p>I cannot begin to see what is going wrong here. It's so simple.</p>  <p>Here's my usercontrol:</p>  <p>XAML:</p>  <pre><code>&lt;UserControl x:Class="Test.Controls.SimpleUserControl"          xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"          xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"          x:Name="ucThis"&gt;         &lt;TextBox Text="{Binding Path=MyString, ElementName=ucThis}" /&gt; &lt;/UserControl&gt; </code></pre>  <p>Code:</p>  <pre><code>public partial class SimpleUserControl : UserControl {     public SimpleUserControl()     {         InitializeComponent();     }      public string MyString     {         get { return (string)GetValue(MyStringProperty); }         set { SetValue(MyStringProperty, value); }     }      public static readonly DependencyProperty MyStringProperty =         DependencyProperty.Register("MyString", typeof(string),         typeof(SimpleUserControl), new UIPropertyMetadata("simple user control")); } </code></pre>  <p>XAML from a test app:</p>  <pre><code>    &lt;StackPanel&gt;         &lt;testControls:SimpleUserControl MyString="{Binding Path=TestString}"                                          x:Name="simpleUC" /&gt;          &lt;Label Content="From control" /&gt;         &lt;Border Margin="5"                 BorderBrush="Black"                 BorderThickness="1"                 Visibility="{Binding Path=MyString, ElementName=simpleUC, Converter={StaticResource nullVisConv}}"&gt;             &lt;ContentPresenter Content="{Binding Path=MyString, ElementName=simpleUC}" /&gt;         &lt;/Border&gt;         &lt;TextBlock Text="Value from control is null."                    Margin="5"                    Visibility="{Binding Path=MyString, ElementName=simpleUC, Converter={StaticResource nullVisConv}, ConverterParameter={custom:BooleanValue Value=True}}" /&gt;          &lt;Label Content="From binding" /&gt;         &lt;Border Margin="5"                 BorderBrush="Black"                 BorderThickness="1"                 Visibility="{Binding Path=TestString, Converter={StaticResource nullVisConv}}"&gt;             &lt;ContentPresenter Content="{Binding Path=TestString}" /&gt;         &lt;/Border&gt;         &lt;TextBlock Text="Value from binding is null."                    Margin="5"                    Visibility="{Binding Path=TestString, Converter={StaticResource nullVisConv}, ConverterParameter={custom:BooleanValue Value=True}}" /&gt;          &lt;TextBox Text="You can set focus here." /&gt;     &lt;/StackPanel&gt; </code></pre>  <p>The main window for the test app has a property named <code>TestString</code>, is its own DataContext and implements <code>INotifyPropertyChanged</code> correctly. <code>SimpleUserControl.MyString</code> updates as it should but the property it is bound to (<code>TestString</code>) does not. I have inspected this with Snoop; the binding I set on the <code>SimplerUserControl</code> is just not present at run time. What is happening here?</p>  <p><strong>UPDATE</strong> Okay. So if I specify <code>Mode=TwoWay</code> the binding works. That's great. Can anyone explain to me why it behaves this way? Thanks.</p>