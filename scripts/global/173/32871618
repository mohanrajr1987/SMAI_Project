<p>I'm trying to set up a ComboBox with its options binded from a list of strings, its default selected value binded from a setting, and with an event handler for its selection changed.</p>  <p>I want to configure it all using XAML like so:</p>  <pre><code>    &lt;ComboBox Name="RoutesComboBox"               ItemsSource="{Binding Routes}"               SelectedItem="{Binding DefaultRoute}"                SelectionChanged="RouteFilter_SelectionChanged" /&gt; </code></pre>  <p>But when I do that on startup it throws the error:</p>  <blockquote>   <p>An unhandled exception of type   'System.Reflection.TargetInvocationException' occurred in   PresentationFramework.dll</p> </blockquote>  <p>If I only do some of it in XAML, then either set the <code>SelectionChanged</code> event or the <code>ItemsSource</code> programatically in C# like below it works fine. But I have a lot of these ComboBoxes so I would rather do it straight in the XAML. </p>  <pre><code>&lt;ComboBox Name="RoutesComboBox"           ItemsSource="{Binding Routes}"           SelectedItem="{Binding DefaultRoute}" /&gt; </code></pre>  <p>With this C#:</p>  <pre><code>public IEnumerable&lt;string&gt; Routes {     get { return LubricationDatabase.GetRoutes(); } }  public string DefaultRoute {     get { return MySettings.Default.DefaultRoute; }     set { } /* side question: without this, it throws a parse exception. Any idea why? */ }  public MainWindow() {      this.DataContext = this;      InitializeComponent();       RoutesComboBox.SelectionChanged += RouteFilter_SelectionChanged;  } </code></pre>  <p>I've also tried the solution found <a href="http://stackoverflow.com/a/8666485/2374028">here</a>:</p>  <pre><code>private string _defaultRoute; public string DefaultRoute {     get { return MySettings.Default.DefaultRoute; }     set     {         if (_defaultRoute != value)         {             _defaultRoute = value;              // this fires before `SelectedValue` has been              // updated, and the handler function uses that,             // so I manually set it here.             RoutesComboBox.SelectedValue = value;             SelectionChangedHandler();          }     } } </code></pre>  <p>Which is okay, but is pretty bulky and probably more work than is worth it when I can just programatically assign the <code>SelectionChanged</code> event. </p>  <p>Again if possible I'd like to do it all using XAML because I have a lot of these ComboBoxes and initializing them all like this in the C# will look awful. </p>  <p>Any ideas?</p>