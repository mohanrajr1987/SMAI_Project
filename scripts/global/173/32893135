<p>I have one big question I don't find an answer to this..</p>  <p><strong>How do I bind data from host to a plugin with MEF?</strong></p>  <p>So the thing is:</p>  <ul> <li>I work with MVVM so I have my Models, ViewModels and Views.</li> <li>I want to use MEF to be able to expand my application. </li> <li>I want to store all the data in the MainViewModel so every plugin can work with the actual data. </li> <li>the plugin is a UserControl wich will be displayed as a ContentControl in the MainViewModel</li> </ul>  <p>What I have so far: </p>  <ul> <li>MainViewModel</li> <li>Models</li> <li>Databinding from MainViewModel to View.</li> <li>Import plugins from folder X</li> </ul>  <p>What I need: - the plugins need to bind the data from the MainViewModel to the plugin UI.  - changing the property in the plugin UI must update the data in the MainViewModel and update the UI from all other plugins. </p>  <p><strong>The PluginInterfaces:</strong></p>  <pre><code>public interface IPlugin {  }    public interface IPluginData {    string Name { get; } } </code></pre>  <p><strong>The MainViewModel:</strong> (part of it)</p>  <pre><code>private MyModel myfirstmodel;  private DirectoryCatalog catalog; private CompositionContainer container;  [ImportMany]  IEnumerable&lt;Lazy&lt;IPlugin, IPluginData&gt;&gt; Plugins;  public MainWindowViewModel() {     string pluginPath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);     pluginPath = Path.Combine(pluginPath, "plugins");     if (!Directory.Exists(pluginPath))     Directory.CreateDirectory(pluginPath);     catalog = new DirectoryCatalog(pluginPath, "*.dll");     container = new CompositionContainer(catalog);      try     {         this.container.ComposeParts(this);     }     catch (CompositionException compositionException)     {         Console.WriteLine(compositionException.ToString());     } } </code></pre>  <p><strong>The Model</strong></p>  <pre><code>public class MyModel {     private string message;     private int number;     private DateTime date;      public string Message { get { return message; } set { message = value; } }     public int Number { get { return number; } set { number = value; } }     public DateTime Date { get { return date; } set { date = value; } } } </code></pre>  <p><strong>The Plugin</strong></p>  <pre><code>[Export(typeof(IPlugin))] [ExportMetadata("Name", "MyFirstPlugin")] public partial class MyFirstPlugin : UserControl, IPlugin {      public MyFirstPlugin()     {         InitializeComponent();     }      private void Button_Click(object sender, RoutedEventArgs e)     {         //Change the message in MainWindowViewModel and the date when it gets changed.     } } </code></pre>  <p>I tried using INotifyPropertyChanged but did not came that far.. </p>  <p>Does anybody got a really good tutorial for that or can show me how to do this? I would appreciate a "how to" and not just a "just use INotifyPropertyChanged.."</p>  <p>Is this even possible?</p>