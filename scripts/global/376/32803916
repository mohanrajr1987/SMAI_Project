<p>folks, I am maintaining a silverlight project with silverlight at client side and WCF service hosted in IIS at service side. It has been working abnormal recently. I added exception logging code to the common base class of business classes using AOP mode. And then it stopped working totally. I don't want to insert debug code in each method all over the classes and rebuild the old project. I want so much to use AOP mechanism to intercept the invoking messages and capture all exceptions, because in that method much fewer codes are needed. But now I am not sure if Silverlight is compatible with ContextBoundObject. My codes are shown as fellow:</p>  <pre><code>[ServiceContract] public interface IJob  {      [OperationContract]      void DoSomething();  }  [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)] public class JobService  {      public void DoSomething()      {           new JobBroker().DoSomething();      } }  [ExceptionLogProxy] internal class JobBroker : ContextBoundObject {      public void DoSomething()      {            // ...      } }  public class ExceptionLogProxy : RealProxy {     //... }  [AttributeUsage(AttributeTargets.Class)] public class ExceptionLogProxyAttribute : ProxyAttribute {      //... } </code></pre>  <p>The problem is that if class JobBroker inherits from ContextBoundObject, silverlight always throws exception "invalid operation result" and when I remove ContextBoundObject, it works again. </p>  <p>Has anyone good ideas?</p>