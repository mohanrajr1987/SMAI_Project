<p>Normally I can find an answer to my problems here, but not this time, so I'll try asking a question.  The issue: trying to use <code>DownloadStringAsync</code> in Silverlight 5.0.  I do the call using:</p>  <pre><code>System.Net.WebClient wc = new System.Net.WebClient(); wc.DownloadProgressChanged += wc_DownloadProgressChanged; wc.DownloadStringCompleted += wc_DownloadStringComplete; wc.AllowReadStreamBuffering = true; wc.DownloadStringAsync(new Uri(baseURI)); </code></pre>  <p>(BTW this is in the public MainPage routine so it runs on loading the app).</p>  <p>My <code>wc_DownloadProgressChanged</code> function is called with no problem at all, and reports that 153 bytes have been received.  (This is correct, I've checked the packets arriving using Wireshark, the data arrives and an ACK is sent just as expected.)</p>  <p>However the <code>wc_DownloadStringComplete</code> function, which starts like this:</p>  <pre><code>void wc_DownloadStringComplete    (object sender,     System.Net.DownloadStringCompletedEventArgs e)     {         MessageBoxResult res;         try         {             if (e.Error == null &amp;&amp; e.Result != null)             {                 ....             } </code></pre>  <p>always generates an error and execution falls through to the catch block.  Any attempt to access the <code>DownloadStringCompletedEventArgs</code> <code>e</code> variable causes an error: <code>Unhandled Error in Silverlight Application Object reference not set to an instance of an object at CircuitTheory.MainPage.wc_DownloadStringComplete(Object sender, DownloadStringCompletedEventArgs e).</code></p>  <p>It looks to me as if the system is calling my <code>wc_DownloadStringComplete</code> function without setting the <code>DownloadStringCompletedEventArgs</code> parameter <code>e</code>.  But that's impossible, isn't it?</p>  <p>Any ideas what I might be doing/understanding wrong?  And how can I get the received data when <code>e</code> is not set to anything?</p>