<h2>What I have seen</h2>  <p>This <a href="http://stackoverflow.com/questions/4402109/fastest-way-to-run-two-tasks-asynchronously-and-wait-until-they-end">post</a> shows how asynchronously run multiple tasks and wait for all of them. Here is the solution:</p>  <pre><code>var thread1 = new Thread(() =&gt; DoSomething(1, 0)); var thread2 = new Thread(() =&gt; DoSomething(2, 3));  thread1.Start(); thread2.Start();  thread1.Join(); thread2.Join(); </code></pre>  <h2>The problem</h2>  <p>But it seems those task are non-UI task. I have the same problem but with UI task. If you want do UI-related task in WPF/Silverlight you should use <code>Dispatcher</code>, So I tried this code:</p>  <pre><code>Thread GetThread(Action action) {     return new Thread(()=&gt;     {         Application.Current.RootVisual.Dispatcher.BeginInvoke(()=&gt;         {             action();         });     }); } </code></pre>  <p>And this how I use it:</p>  <pre><code>var thread1=GetThread(async ()=&gt;{UIProperty1 = await GetUIPropertyValuesFromWebServiceAsync1();}); var thread2=GetThread(async ()=&gt;{UIProperty2 = await GetUIPropertyValuesFromWebServiceAsync2();});  thread1.Start(); thread2.Start(); </code></pre>  <p>But it throws this exception  </p>  <blockquote>   <p>Invalid cross-thread access.</p> </blockquote>  <p>How to correct this code to run multiple UI-related task asynchronously? Also I'm looking for best-practices.</p>  <h2><strong>EDIT #1: Why I'm using threads</strong></h2>  <p>If I use this approach:</p>  <pre><code>UIProperty1 = await GetUIPropertyValuesFromWebServiceAsync1(); // Call some web service UIProperty2 = await GetUIPropertyValuesFromWebServiceAsync2(); // Call some web service </code></pre>  <p>These methods will be called one after another and I prefer to call them at the same time (there are more than two web service calls)</p>  <h2>EDIT #2: Why I don't use TaskEx.WhenAll approach</h2>  <pre><code>var task1 = GetUIPropertyValuesFromWebServiceAsync1(); // Call some web service var task2 = GetUIPropertyValuesFromWebServiceAsync2(); // Call some web service  TaskEx.WhenAll(task1, task2); // it seems this line never finishes!  UIProperty1 = task1.Result; //never reaches this line UIProperty2 = task2.Result; </code></pre>