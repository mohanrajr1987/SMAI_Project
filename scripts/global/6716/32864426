<p>I'm looking for a <em>CSS-only</em> solution for building simple components like an <strong>input element + toggle button</strong> (that can be the base for different kind of widgets.</p>  <p>Something like</p>  <pre><code> ___________________ ___ |   input or label  | + | |___________________|___| </code></pre>  <p>The main things are:</p>  <ul> <li>It should <strong>not</strong> rely on <strong>display:table</strong>; it often has side-effects with unwanted margins or behaviours, depending on where it is positioned and how the parents are rendered.</li> <li>It should <strong>not</strong> rely on <em>before/after</em> pseudo-elements. I want an explicit markup (and I'll use pseudo-elements for other things) <em>I can accept it as a fallback (in cases where <strong>flexbox</strong> isn't supported)</em></li> <li>It <strong>must</strong> always be on a <strong>single line</strong>, avoiding any kind of wrapping  <ul> <li>if the content of the <em>input/label/span</em> exceeds then this should grow (making the <em>parent</em> to grow as well), or overflow (hidden or not), but <strong>never</strong> wrap on a new line.</li> <li>the toggle can have a fixed width and doesn't need to grow with it's content (likely its content is static, or just a character/icon). This <strong>must</strong> never overflow or move out of the parent.</li> </ul></li> <li>It <strong>must</strong> support different widths; generally the width is <em>unknown</em> or <em>100% of the parent</em></li> <li>It <strong>must not</strong> rely on Javascript and <strong>must</strong> be compatible with all major browsers (IE9+)</li> <li>Be adaptable to different HTML elements; there could be an <em>input</em>, a <em>span</em> or a <em>label</em> for the <strong>main</strong> element, and a <em>button</em>, a <em>div</em>, or a <em>span</em> as a <strong>toggle</strong> element. (for consistence I'll reference them as <em>input</em> and as <em>button</em> elements)</li> <li><strong>edit:</strong> would also be nice if the <em>input</em> border could wrap also the <em>toggle</em> element, so that it could change easily and consistently in cases where there is a styling depending on the <em>input</em> validation (let's say a red border around the component when the <em>input</em> is invalid)</li> </ul>  <p>I thought about:</p>  <pre><code>&lt;div class="container"&gt;   &lt;div class="component"&gt;     &lt;input class="main" type="text" value="test content" /&gt;     &lt;div class="toggle"&gt;+&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt; </code></pre>  <p>*</p>  <p>Inline elements</p>  <pre><code> .component {       position: relative;       width: 100%;       white-space: nowrap;       background-color: #ccc;     }      .main {       width: 100%;       margin-right: 5em;     }      .toggle {       width: 3em;       padding: 1em;       background-color: #dfe;       position: absolute;       right: 0;       top: 0;     } </code></pre>  <p>This doesn't fit in all the situations, and the added margin-right doesn't sort the desired effect of making space for the toggle (cause of the 100% width) and it just add it <em>after</em> the toggle. With the absolute positioning of the <em>toogle</em> also I cannot get the whole component to consider the <em>height</em> of this latter, making vertical size adaptation more tricky.</p>  <ul> <li><p>Display: table But that is not so deeply manageable. And it could ask additional markup (that I do not want to add). And I generally have bad effects/conflicts on the wrappers/containers depending on where I position the component.</p></li> <li><p>Display: flex I think this is the best approach, it can define how the element should grow, keep them on a single line, adapt them easily. <strong>BUT</strong> I'm too stupid to be able to make it 100% width of the parent.</p></li> </ul>  <p>Could you provide some suggestions? Mainly I'm interested in a <strong>flexbox solution</strong>, but an <strong>inline solution</strong> could be nice as well cause i would work also on older browsers.</p>  <p>I hope this question is interesting and that could be useful to other people as well facing this recurring <strong>pattern of two elements that must be rendered as a single, compact, inline element</strong>.</p>