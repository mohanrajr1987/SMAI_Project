<p>I have a WPF Textbox which displays double values.</p>  <p>There is a converter attached to the texbox which rounds the values entered to two decimal places.</p>  <p>The rounding up works fine. When I type 1.345 it gets corrected to 1.35.</p>  <p>However the rounding down does not work. When I type 1.342 it stays as it is. I want it to be corrected to 1.34</p>  <p>The code on the XAML and the Converter need to be refactored BIG time, but currently I need to solve this issue.</p>  <p>What am I missing here?</p>  <p>Code on XAML:</p>  <pre><code>&lt;TextBox x:Name="TextBox1" Text="{Binding Object.Field, Converter={StaticResource ConvTextToNumberConverter}, Mode=TwoWay, StringFormat=\{0:F2\}, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True} PreviewTextInput="TextBoxNumericOnly_PreviewTextInput"                                                             /&gt; </code></pre>  <p>Code on Converter:</p>  <pre><code>public class TextToNumberConverter : IValueConverter     {         /// &lt;summary&gt;         /// Converts an integer Object to a string         /// &lt;/summary&gt;         /// &lt;param name="value"&gt;an Session Object&lt;/param&gt;         /// &lt;param name="targetType"&gt;targetType is not used&lt;/param&gt;         /// &lt;param name="parameter"&gt;parameter is not used&lt;/param&gt;         /// &lt;param name="culture"&gt;culture is not used&lt;/param&gt;         /// &lt;returns&gt;An integer&lt;/returns&gt;         public object Convert(            object value,            Type targetType,            object parameter,            CultureInfo culture)         {             string result = string.Empty;               int decimalsValue = 2;             if (parameter != null)             {                 Int32.TryParse(parameter.ToString(), out decimalsValue);             }              if (!double.IsNaN(System.Convert.ToDouble(value)))             {                 result = string.Format("{0}", Math.Round((double)value, decimalsValue, MidpointRounding.AwayFromZero));             }              return result;         }          /// &lt;summary&gt;         /// This method is not to be used         /// &lt;/summary&gt;         /// &lt;param name="value"&gt;value is not used&lt;/param&gt;         /// &lt;param name="targetType"&gt;targetType is not used&lt;/param&gt;         /// &lt;param name="parameter"&gt;parameter is not used&lt;/param&gt;         /// &lt;param name="culture"&gt;culture is not used&lt;/param&gt;         /// &lt;returns&gt;A NotSupportedException&lt;/returns&gt;         public object ConvertBack(          object value,          Type targetType,          object parameter,          CultureInfo culture)         {             string inVal = (string)value;              switch (targetType.Name)             {                  case "Int32":                     return this.StringToInt32(inVal);                 case "Double":                         if (inVal != String.Empty &amp;&amp;                         inVal != "-" &amp;&amp;                          inVal != "-0" &amp;&amp;                          inVal != "-0," &amp;&amp;                         inVal != "-0." &amp;&amp;                         inVal != "-0,0" &amp;&amp;                         inVal != "-0.0")                     {                         return this.StringToDouble(inVal);                     }                     else                         return Double.NaN;                 default:                     return 0;             }         }          /// &lt;summary&gt;         /// removes all characters other than [0-9-] and parses the remaining string to an integer         /// &lt;/summary&gt;         /// &lt;param name="inVal"&gt;A dirty string that contains an integer&lt;/param&gt;         /// &lt;returns&gt;the contained integer&lt;/returns&gt;         private int StringToInt32(string inVal)         {             int retVal = 0;              // remove non-integer characters             //string regExpressionPattern = "[^0-9-]";             //inVal = Regex.Replace(inVal, regExpressionPattern, String.Empty);              bool result = Int32.TryParse(inVal, out retVal);             if (true == result)             {                 return retVal;             }             else             {                 return 0;             }         }          /// &lt;summary&gt;         /// removes all characters other than [0-9-.,] and parses the remaining string to a double         /// &lt;/summary&gt;         /// &lt;param name="inVal"&gt;A dirty string that contains an double&lt;/param&gt;         /// &lt;returns&gt;the contained double&lt;/returns&gt;         private double StringToDouble(string inVal)         {             double retVal = double.NaN;              // remove non-numeric characters             //string regExpressionPattern = "[^0-9-.,]";             //inVal = Regex.Replace(inVal, regExpressionPattern, String.Empty);             inVal = Regex.Replace(inVal, "[,]", CultureInfo.InvariantCulture.NumberFormat.NumberDecimalSeparator);              bool result = Double.TryParse(inVal, NumberStyles.Float, CultureInfo.InvariantCulture.NumberFormat, out retVal);             if (true == result)             {                 return retVal;             }             else             {                 return double.NaN;             }                     } </code></pre>  <p>Code on PreviewTextInput Event:</p>  <pre><code>private void TextBoxNumericOnly_PreviewTextInput(object sender, System.Windows.Input.TextCompositionEventArgs e)         {             string regExpressionPattern = "[^0-9-.,]";             string strippedText = Regex.Replace(e.Text, regExpressionPattern, String.Empty);              if (strippedText != e.Text)             {                 e.Handled = true;             } </code></pre>