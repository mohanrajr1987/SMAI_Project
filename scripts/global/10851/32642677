<p>I don't usually require assistance understanding error messages, however this one seems like it must be a bug. I've combed through the "questions that may already have your answer", but none of those appear to be using the recent <code>_Generic</code> feature added by C11, so I think this might be a unique issue. Here is my testcase:</p>  <pre><code>#include &lt;stdio.h&gt; #define foo(bar) _Generic((bar), int:   sizeof (bar)   \                                , int *: sizeof *(bar))  int main(void) {     printf("%d\n", foo(42)); } </code></pre>  <p>The error message I'm seeing for gcc 5.2 reads:</p>  <blockquote>   <p>error: invalid type argument of unary '<code>*</code>' (have '<code>int</code>')</p>      <p>note: in expansion of macro '<code>foo</code>'</p> </blockquote>  <p>clang emits a message of similar meaning:</p>  <blockquote>   <p>fatal error: indirection requires pointer operand ('<code>int</code>' invalid)</p>      <p>note: expanded from macro '<code>foo</code>'</p> </blockquote>  <p>These messages seem to imply one of the following:</p>  <ul> <li>The compiler chose the expression from the <code>int *</code> generic association.</li> <li>The expressions from the generic associations were both evaluated.</li> </ul>  <p><a href="http://www.iso-9899.info/n1570.html#6.5.1.1p3" rel="nofollow">C11ยง6.5.1.1p3</a> seems to forbid both of these explanations explicitly:</p>  <blockquote>   <p>The controlling expression of a generic selection is not evaluated. If a generic selection has a generic association with a type name that is compatible with the type of the controlling expression, then the result expression of the generic selection is the expression in that generic association. Otherwise, the result expression of the generic selection is the expression in the default generic association. None of the expressions from any other generic association of the generic selection is evaluated.</p> </blockquote>  <p>Can anybody shed some light on this error message for me?</p>