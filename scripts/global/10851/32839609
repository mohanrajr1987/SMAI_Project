<p>The following simple code</p>  <pre><code>#include &lt;string&gt; #include &lt;sstream&gt; #include &lt;memory&gt; #include &lt;tuple&gt; #include &lt;map&gt; #include &lt;cassert&gt;  struct foo {   foo(std::ostringstream&amp;, std::unique_ptr&lt;int&gt;&amp;&amp;); };  struct bar  {   std::map&lt;std::string,foo&gt; map;   void add(std::string const &amp;name,            std::ostringstream &amp;str,            std::unique_ptr&lt;int&gt; &amp;&amp;ptr)   {     auto result = map.emplace       ( std::piecewise_construct,         std::forward_as_tuple(name),         std::forward_as_tuple(str,std::move(ptr)) );     assert(result.second);   } }; </code></pre>  <p>works fine with gcc as well as clang as installed in Mac OSX. However, I get some problems with clang 3.5 on linux systems when using <code>-stdlib=libc++</code> (fine with clang 3.2 and 3.4), where the library apparently is the one installed with clang 3.2 (how to obtain the version of llvm's libc++?), when the compiler gives the error</p>  <pre><code>In file included from test.cc:1: In file included from /cm/shared/apps/llvm/3.2/include/libcxx/string:434: In file included from /cm/shared/apps/llvm/3.2/include/libcxx/algorithm:594: In file included from /cm/shared/apps/llvm/3.2/include/libcxx/memory:599: /cm/shared/apps/llvm/3.2/include/libcxx/tuple:320:11: error: rvalue reference to type 'unique_ptr&lt;[2 * ...]&gt;' cannot bind to lvalue of type 'unique_ptr&lt;[2 * ...]&gt;'         : value(__t.get())           ^     ~~~~~~~~~ /cm/shared/apps/llvm/3.2/include/libcxx/tuple:444:8: note: in instantiation of member function 'std::__1::__tuple_leaf&lt;1, std::__1::unique_ptr&lt;int, std::__1::default_delete&lt;int&gt; &gt; &amp;&amp;, false&gt;::__tuple_leaf' requested here struct __tuple_impl&lt;__tuple_indices&lt;_Indx...&gt;, _Tp...&gt;        ^ utils2/test.cc:23:13: note: in instantiation of function template specialization 'std::__1::forward_as_tuple&lt;std::__1::basic_ostringstream&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &amp;, std::__1::unique_ptr&lt;int, std::__1::default_delete&lt;int&gt; &gt; &gt;' requested here        std::forward_as_tuple(str,std::move(ptr)));             ^ In file included from utils2/test.cc:1: In file included from /cm/shared/apps/llvm/3.2/include/libcxx/string:434: In file included from /cm/shared/apps/llvm/3.2/include/libcxx/algorithm:594: In file included from /cm/shared/apps/llvm/3.2/include/libcxx/memory:599: /cm/shared/apps/llvm/3.2/include/libcxx/tuple:321:10: error: static_assert failed "Can not copy a tuple with rvalue reference member"         {static_assert(!is_rvalue_reference&lt;_Hp&gt;::value, "Can not copy a tuple with rvalue reference member");}          ^             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ </code></pre>  <p>What is wrong here, the compiler, the library, or my code? And how can I avoid this problem (with the given compiler/library)?</p>