<p>I working with Database first C# MVC, EF6, LINQ and JSon to try and pass data to both Highcharts and Google Maps for some of my reporting.</p>  <p>If I could add an image I would show you the relevant portion of my model, but sadly I need more reputation to do that...</p>  <p>The portion of the Entity Model I'm concentrating on right now is based on a central Docket that contains a BuildingCode as part of a one-to-many relationship to a building with and address and further relationship to the buildings polygons (for mapping). Dockets are also classified by one or more DocketTypes and thus there is a many-to-many relationship between Dockets and DocketTypes, which is not directly exposed to through the EF.</p>  <p>As an example a Docket which represents an investigation, could be related to the theft of a mobile phone in building A located on Campus X, not only was the cellphone stolen but the assailant also assaulted the victim in order to steal the mobile phone. So there are 2 DocketTypes here 1. Theft of mobile phone and 2. assault. Note: this is fictitious and for illustration purposes only .</p>  <p>One of my fundamental reports requires that I count how many docketTypes affect each building and each campus in a given period. When I display this I also need to show what the DocketTypes are.</p>  <p>I have no end of nightmare trying to find a way to get this right, I keep running into circular reference errors and needing to use explicit conversions when trying to model the data with LINQ so that I can pass a single nested object through JSON to the client side where displaying will occur.</p>  <p>In the below code I am told I need an Explicit conversion: <code>Cannot implicitly convert type 'Campus_Investigator.ViewModels.DocketTypeViewModel' to 'System.Collections.Generic.IEnumerable&lt;Campus_Investigator.ViewModels.DocketTypeViewModel&gt;'. An explicit conversion exists (are you missing a cast?)</code></p>  <pre><code>var currentDocketQuery = from d in db.Dockets                  from dt in d.DocketTypes                  from bp in d.BuildingDetail.BuildingPolygons                  where d.OccurrenceStartDate &gt;= datetime &amp;&amp; d.BuildingDetail.CampusName == Campus                   select new CampusBuildingDocketTypeViewModel()                  {                      BuildingCode = d.BuildingDetail.BuildingCode,                      BuildingName = d.BuildingDetail.BuildingName,                      //BuildingPolygons = d.BuildingDetail.BuildingPolygons,                      DocketTypes = new DocketTypeViewModel()                      {                          Category = dt.Category,                          SubCategory = dt.SubCategory,                          ShortDescription = dt.ShortDescription                      }                  }; </code></pre>  <p>I appreciate any ideas on how I can explicitly convert this or is that a better method I can use and avoid the <code>circular reference error</code>?</p>