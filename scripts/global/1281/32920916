<p>I am new to dependency injection and Microsoft Unity IoC. My scenario is the follwing:</p>  <p>Employee-Class:</p>  <pre><code>class Employee {     private readonly ISalaryCalculation _salaryCalculationCalculator;      public Employee(ISalaryCalculation salaryCalculationCalculator)     {         _salaryCalculationCalculator = salaryCalculationCalculator;         BaseSalary = 42;     }      public string Firstname { get; set; }      public string Lastname { get; set; }      public int Age { get; set; }      public int BaseSalary { get; set; }      public int CalcSalary()     {         return _salaryCalculationCalculator.CalcSalary(BaseSalary);     } } </code></pre>  <p>I have two different implementations of my SalaryCalculation-Interface</p>  <pre><code>interface ISalaryCalculation {     int CalcSalary(int baseSalary); } </code></pre>  <p>My Unity setup is:</p>  <pre><code>static void Main(string[] args) {     UnityContainer unityContainer = new UnityContainer();     unityContainer.RegisterType&lt;Employee&gt;();      unityContainer.RegisterType&lt;ISalaryCalculation, BossSalaryCalculation&gt;("Boss");     unityContainer.RegisterType&lt;ISalaryCalculation, NormalSalaryCalculation&gt;("Normal");      var employee = unityContainer.Resolve&lt;Employee&gt;(new DependencyOverride(typeof(ISalaryCalculation),unityContainer.Resolve&lt;ISalaryCalculation&gt;("Boss")));     Console.WriteLine(employee.CalcSalary()); } </code></pre>  <p>Is there a smarter way to achiev this by using Unity? Because whenever I instantiate a new Employee, I have to pass its salaryCalculation logic.</p>