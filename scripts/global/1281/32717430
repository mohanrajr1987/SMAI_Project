<p>I'm writing unit tests for my app consisting of several projects. I have project A for which I'm writing tests, and project B where I want to store some needed beans to be autowired in A test classes. Prject A also needs B in the compilation scope.</p>  <p>If using dependency like that:</p>  <pre><code>... A/pom.xml ... &lt;dependency&gt;     &lt;artifactId&gt;B&lt;/artifactId&gt;     &lt;scope&gt;compile&lt;/scope&gt; &lt;dependency&gt; </code></pre>  <p>spring is unable to autowire beans of B project. It's strange, because according to the Maven docs, compile scope also makes project content available at the stage phase.</p>  <p>In case I use the save dependency but with test scope, unit tests work, but app itself faild (pretty predictable).</p>  <p>In case when I use both dependencies, like: </p>  <pre><code>... A/pom.xml ... &lt;dependency&gt;     &lt;artifactId&gt;B&lt;/artifactId&gt;     &lt;scope&gt;compile&lt;/scope&gt; &lt;dependency&gt;  &lt;dependency&gt;     &lt;artifactId&gt;B&lt;/artifactId&gt;     &lt;scope&gt;compile&lt;/scope&gt;     &lt;type&gt;test-jar&lt;/type&gt;     &lt;scope&gt;test&lt;/scope&gt; &lt;dependency&gt; </code></pre>  <p>mvn clean install fails since it's unable to resolve dependencies.</p>  <p>So what can I do? Is there any best practise of using other project beans in unit tests in Spring?</p>