<p>Hopefully I explain this well enough so that it isn't confusing.</p>  <p>Let's say I'm creating a static library called "SimpleImage". It uses two external static libraries: GraphicsMagick++ and libsquish. In my Additional Dependencies I include <code>libsquish.lib</code> and <code>CORE_RL_Magick++.lib</code>, as well as the dependencies for these libraries (for example, GraphicsMagick requires <code>CORE_RL_png.lib</code> and <code>CORE_RL_bzlib.lib</code>).</p>  <p>Now, let's say I have another static library called "SimpleGraphics". One of it's dependencies is my static library "SimpleImage". Now, my question is, do I STILL need to include <code>libsquish.lib</code>, <code>CORE_RL_Magick++.lib</code>, <code>CORE_RL_png.lib</code>, etc.? Or would that be redundant?</p>  <p>The reason I'm asking is because I've noticed that my static libraries are huge when compiled, and I'm curious if this is the culprit. When I eventually include my "master" static lib in either a DLL or an executable, they are also bloated in size. There is another program out there that uses the exact same libraries I do, plus MANY more (BOOST, an XML library, etc), and the exe is way smaller (3,141 MB) than my executable (5,503 MB!). My actual code base is much smaller than this other program to begin with. And yes, I have all optimizations on.</p>  <p>I just want to know if adding all these additional dependencies are necessary.</p>