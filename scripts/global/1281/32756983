<p>I'm writing a Gradle plugin for Android, which uses new <a href="http://tools.android.com/tech-docs/new-build-system/transform-api" rel="nofollow">Transform API</a>. Unfortunately, I faced a problem with adding Android plugin as a dependency to my plugin. A simplified Gradle configuration of my plugin looks like this:</p>  <p><strong>plugin/build.gradle</strong>:</p>  <pre><code>apply plugin: "groovy"  dependencies {     compile gradleApi()     compile localGroovy()     compile "com.android.tools.build:gradle:1.4.0-beta2" } </code></pre>  <p>And that's a simplified configuration of an application project that uses my Gradle plugin:</p>  <p><strong>application/build.gradle</strong>:</p>  <pre><code>buildscript {     dependencies {         classpath "com.android.tools.build:gradle:1.4.0-beta2"         classpath "my-plugin:my-plugin:1.0.0"     } }  apply plugin: "com.android.application" apply plugin: "my-plugin"  android {     compileSdkVersion 23     buildToolsVersion '23.0.1'      defaultConfig {         applicationId 'com.myapplication'         minSdkVersion 16         targetSdkVersion 23         versionCode 1         versionName version     } } </code></pre>  <p>With this configuration everything works fine but I also want my plugin to work properly with projects that use previous versions of Android plugin. So I tried to change Android plugin version in my application's configuration file:</p>  <p><strong>application/build.gradle (with Android plugin 1.3.1)</strong>:</p>  <pre><code>buildscript {     dependencies {         classpath "com.android.tools.build:gradle:1.3.1"         classpath "my-plugin:my-plugin:1.0.0"     } }  /* Everything else is the same. */ </code></pre>  <p>But in this case Android plugin <code>1.4.0-beta2</code> is still used. I believe it happens because when Gradle resolves classpath dependencies, it prefers <code>1.4.0-beta2</code> over <code>1.3.1</code> so the whole project starts using version <code>1.4.0-beta2</code> of Android plugin.</p>  <p>I've also tried to add Android plugin as a <code>runtime</code> dependency but after making this change my plugin stops compiling because of 'unable to resolve' errors like this one:</p>  <pre><code>Unable to resolve class com.android.build.gradle.api.BaseVariant @ line 19, column 1. import com.android.build.gradle.api.BaseVariant </code></pre>  <p>Is there a way to build my plugin against the latest version of Android plugin but at runtime use a version of Android plugin provided by the build environment?</p>