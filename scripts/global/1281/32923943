<p>I am trying to include a modular third-party library (<a href="http://wellcaffeinated.net/PhysicsJS" rel="nofollow">PhysicsJS</a>) into my webpack project. This library is AMD- and CommonJS-friendly, and has well-formed submodules that I want to access. However it is primarily structured for RequireJS, via its <code>packages</code> definition spec in <code>require.config()</code>, so the entry point isn't a standard <code>index.js</code>. Instead the entry point is <code>physicsjs.js</code>. </p>  <p>In other words, I can't seem to figure out how to configure webpack to resolve both the library's main file and its submodules. It just seems like if the library's entry point isn't <code>index.js</code> and it has submodules, you are out of luck, and I just can't believe that's correct, so I must be missing something.</p>  <p>So, how can the following statements be made to resolve?</p>  <pre><code>require('physicsjs'); // entry point require('physicsjs/bodies/rectangle');  // submodule </code></pre>  <p>I have tried variations of this config:</p>  <pre><code>resolve: {     modulesDirectories: [         'js/bower_components'     ],     alias: {         'physicsjs': 'PhysicsJS/dist/',         // doesn't find physicsjs.js          'physicsjs': 'PhysicsJS/dist/physicsjs.js'         // doesn't find the submodules     } }, </code></pre>  <p>The directory structure looks something like this:</p>  <pre><code>+ js   - main.js   + bower_modules     + PhysicsJS       + dist         - physicsjs.js // module entry point         + bodies           - rectangle.js // desired submodule   + lib     - MyModule.js </code></pre>  <p>Note that PhysicsJS does have a minified version of the entire library, which I will use if there is no other alternative, but I would rather only load what I actually use.</p>  <p>Also, the submodules themselves use <code>require('physicsjs')</code>, so calling <code>require('physicsjs/physicsjs')</code> is <em>not a solution</em>.</p>