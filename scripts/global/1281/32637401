<p>I'm having some trouble with Gradle plugins. I'm trying to do dependency substitution inside a plugin, and the result is different than when I'm doing the substitution in the <code>build.gradle</code> file.</p>  <p>I have Project1 which is dependent on Project2. In Project2, I have a class named <code>AClass</code> which I'm using in Project1. </p>  <p>I then want to substitute the module <code>org.example:Project2:1.0</code> with the project <code>:Project2</code>. So, in <code>build.gradle</code>, I put the following code:</p>  <pre><code>task updateDependency {     configurations.all {         resolutionStrategy.dependencySubstitution {             substitute module("org.example:Project2:1.0") with project(":Project2")         }     } } </code></pre>  <p>which works fine. However, if I try to put the following code in a plugin:</p>  <pre><code>public class UpdateDependency extends DefaultTask {      @TaskAction     public void executeTask() {           project.configurations.all {              resolutionStrategy.dependencySubstitution {                  substitute module("org.example:Project2:1.0") with project(":Project2")             }         }       } } </code></pre>  <p>and call the task associated with the code, it displays error the following error:</p>  <pre><code>/home/me/Workspace/Project1/src/Main.java: error: cannot find symbol           new AClass()               ^ symbol:   class AClass location: class Main 1 error :compileJava FAILED </code></pre>  <p>Obviously, Project1 cannot find Project2 for some reasons.</p>  <p>I run Gradle using the following tasks (where <code>updateDependency</code> is the name of the task associated with the dependency substitution):</p>  <pre><code>gradle clean updateDependency build </code></pre>  <p>I suspect that it has something to do with the order that Gradle applies the code, but I have no idea how to fix it.</p>