<p>I have run into the following situation a couple of times and I cannot find a fully satisfying solution:</p>  <p>I am developing a Java application using OSGi and, following OSGi's best practices, it is highly modularized. Here's an extract of some of my plugins and classes in them:</p>  <pre><code>- com.example.core.db.manager (plugin)     |- com.example.core.db.manager (package)          |- DatabaseManager (interface)  - com.example.core.business.objectmanager (plugin)     |- com.example.core.business.objectmanager (package)          |- BusinessObjectManager (interface)  - com.example.some.businessobjectmanager.consumer (plugin)     |- com.example.some.businessobjectmanager.consumer (package)          |- SomeBusinessObjectManagerConsumer (interface)             (obviously this is not the real name, but the name is irrelevant) </code></pre>  <p>Where</p>  <ul> <li><code>DatabaseManager</code> is a low-level construct that interacts directly with the database.</li> <li><code>BusinessObjectManager</code> is a high-level construct that acts (among other things) as a sort of adapter for the <code>DatabaseManager</code>.</li> <li><code>SomeBusinessObjectManagerConsumer</code> consumes <code>BusinessObjectManager</code> and should not know about the underlying database, not even that there <em>is</em> a database. It should <em>not</em> know about the <code>DatabaseManager</code>; rather, it should interact only with the <code>BusinessObjectManager</code>.</li> </ul>  <p>So far so good. But now <code>SomeBusinessObjectManagerConsumer</code> needs to update some edges between entities in the database (I use a <a href="https://en.wikipedia.org/wiki/Graph_database" rel="nofollow">graph database</a>, meaning my entities (what would normally be rows in a table) are nodes, and the relationships between them are edges). As explained before <code>SomeBusinessObjectManagerConsumer</code> doesn't know anything about the database, but it knows there are some "business objects" (nodes) and that there are links between some of them (edges).</p>  <p>In <code>BusinessObjectManager</code>, I create a method <code>replaceLinks</code> as follows...</p>  <pre class="lang-java prettyprint-override"><code>UpdatedLinks replaceLinks(BusinessObjectUID from, Set&lt;BusinessObjectUID&gt; to); </code></pre>  <p>...which is supposed to make sure that, by the time it returns, the <code>from</code> business object will only be linked to the <code>to</code> objects, possibly removing previous links and adding new ones. I would like to know about these removals and additions. I create an interface <code>UpdatedLinks</code> in plugin <code>com.example.core.business.objectmanager</code>:</p>  <pre class="lang-java prettyprint-override"><code>public interface UpdatedLinks {     Set&lt;BusinessObjectUID&gt; getRemovedLinks();     Set&lt;BusinessObjectUID&gt; getAddedLinks(); } </code></pre>  <p>But the <code>BusinessObjectManager</code> is not really the one who is going to perform this link replacement and put together the <code>UpdatedLinks</code> return object. Instead, it delegates this to <code>DatabaseManager</code>. So I create an equivalent method in <code>DatabaseManager</code>, and <code>BusinessObjectManager</code> will simply invoke this method.</p>  <p>The problem now is where to place the interface <code>UpdatedLinks</code>: it is needed by <code>DatabaseManager</code>, <code>BusinessObjectManager</code> and <code>SomeBusinessObjectManagerConsumer</code>, but the dependencies between these classes (and their corresponding plugins) goes in this direction:</p>  <pre><code>SomeBusinessObjectManagerConsumer ---depends-on---&gt; BusinessObjectManager ---depends-on---&gt; DatabaseManager </code></pre>  <p>So:</p>  <ul> <li>I cannot put <code>UpdatedLinks</code> in <code>BusinessObjectManager</code>'s plugin because then it is not visible for <code>DatabaseManager</code>.</li> <li>I cannot put it in <code>DatabaseManager</code>'s plugin because then it is not visible for <code>SomeBusinessObjectManagerConsumer</code> (remember that <code>SomeBusinessObjectManagerConsumer</code> doesn't know anything about <code>DatabaseManager</code>; because of modularization in OSGi, it can only have access to <code>DatabaseManager</code> if I declare an explicit dependency on it, which I don't want to do).</li> <li>It is too specific to put it in some kind of "utilities" plugin.</li> <li>I do not currently have any plugin where it makes sense to put this interface and that would make it available to all the dependent plugins.</li> </ul>  <p>Basically, I would have to create a new plugin <em>just for this interface</em> and I cannot even find any meaningful name for that plugin, considering who is going to depend on it. (But mainly, I resist the idea of creating a plugin just for this interface, which exists just as a means to deliver the results of the <code>replaceLinks</code> method).</p>  <p>I have encountered this situation several times (especially lately using OSGi, because of the modularization) and I can never find a fully satisfying solution. What would/do you do in such a case?</p>  <hr>  <p><strong><em>"Meta" disclaimers:</em></strong></p>  <ul> <li><em>The title could be better; I just can't come up with a better one. Feel free to change it.</em></li> <li><em>I'm not sure whether stackoverflow is the right StackExchange community for this question so please feel free to recommend others that may be more appropriate. I couldn't find a better one.</em></li> <li><em>I tried to explain in detail so that you can picture the situation. I hope I didn't overdo it ;)</em></li> </ul>