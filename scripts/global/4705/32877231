<p>I made a simple command line application based on Kaiji Ep. 16 that mimics the game Emperor Card (for our midterms in basic programming). I got stuck on what I think is a simple problem, but I can't seem to solve it on my own. I have this function "winChecker(List *root, Node *head)," that checks what cards are drawn and who wins over who.</p>  <p>And it seems that it returns a wrong return value whenever I draw Citizen and the opponent draws Citizen as well. It should just loop, since Citizen vs Citizen is draw, according to my code.</p>  <p>Can you help me understand what I'm doing wrong here. Also if you see some other mistakes, feel free to point them out. I'm open to learn.</p>  <p>PS: I only used struct for Node and List since we aren't allowed to use Class for our midterms yet. I got 1 header file for each of those.</p>  <p>Source.cpp</p>  <pre><code>    #include "Node.h" #include "List.h" #include &lt;iostream&gt; #include &lt;string&gt; #include &lt;ctime&gt;  using namespace std;  Node *createKaijiDeck(int round); Node *selectKaijiCard(Node *head, int index); Node *deleteSelectedKaijiCard(Node *head, int index); List* createTonegawaDeck(int round); List *selectTonegawaCard(List *root, int indexT); List *deleteSelectedTonegawaCard(List *root, int indexT); bool betCheck(int betLength, int remainingLength); int prizeCheck(int betLength, int round); void printDeck(Node * head); int winCheck(List *root, Node *head, int cardIndex, int randTonegawa); void gameOver(int cash, int round, int input, int remaining);  int main() {      // Seed the RNG     srand((unsigned int)time(0));      // Initilizing variables     int input, cardIndex, randTonegawa, countTonegawa = 0, cash = 0, remaining = 30;      // Round loop     for (int round = 1; round &lt; 12; round++) {          cout &lt;&lt; "===============================================" &lt;&lt; endl;         cout &lt;&lt; "                ROUND " &lt;&lt; round &lt;&lt; endl;         cout &lt;&lt; "===============================================" &lt;&lt; endl;         cout &lt;&lt; "How much would you like to bet, in milimeters?" &lt;&lt; endl;         cout &lt;&lt; "(You still have " &lt;&lt; remaining &lt;&lt; " milimeters left.)" &lt;&lt; endl;         cin &gt;&gt; input;         betCheck(input, remaining);          // Match loop         if (betCheck(input, remaining) == true) {              cout &lt;&lt; "You can win " &lt;&lt; prizeCheck(input, round) &lt;&lt; " Yen." &lt;&lt; endl &lt;&lt; endl;             cout &lt;&lt; "Cash currently at hand: " &lt;&lt; cash &lt;&lt; endl;             Node* head = createKaijiDeck(round);             List* root = createTonegawaDeck(round);             do {                 printDeck(head);                  cout &lt;&lt; "Select a card to play [1 - 5]: ";                 cin &gt;&gt; cardIndex;                 randTonegawa = (rand() % (5 - countTonegawa));                 Node* selectKaijiCardAtIndex = selectKaijiCard(head, cardIndex);                 cout &lt;&lt; "You chose the card: " &lt;&lt; selectKaijiCardAtIndex-&gt;cards &lt;&lt; endl;                 List* selectTonegawaCardAtIndex = selectTonegawaCard(root, randTonegawa);                 cout &lt;&lt; "Tonegawa chose the card: " &lt;&lt; selectTonegawaCardAtIndex-&gt;card &lt;&lt; endl;                 cout &lt;&lt; endl;                 countTonegawa++;             } while (winCheck(root, head, cardIndex, randTonegawa) == 0);              // Match up checker (Emperor &gt; Citizen &gt; Slave &gt; Emperor)             if (winCheck(root, head, cardIndex, randTonegawa) == 1) {                  cash = cash + prizeCheck(input, round);                 cout &lt;&lt; "Round " &lt;&lt; round &lt;&lt; " winner is Kaiji." &lt;&lt; endl;                 cout &lt;&lt; "You won " &lt;&lt; prizeCheck(input, round) &lt;&lt; " Yen!" &lt;&lt; endl;             }             else if (winCheck(root, head, cardIndex, randTonegawa) == 2) {                  remaining = remaining - input;                 cout &lt;&lt; "Round " &lt;&lt; round &lt;&lt; " winner is Tonegawa." &lt;&lt; endl;                 cout &lt;&lt; "The pin moved by " &lt;&lt; input &lt;&lt; " milimeters!" &lt;&lt; endl;             }          }         else if (betCheck(input, remaining) == false)         {             cout &lt;&lt; "You lose! You already lost your ear!" &lt;&lt; endl;             system("pause");             exit(0);         }     }     return 0; }  Node *createKaijiDeck(int round) {      Node* head = NULL;     Node* curr = NULL;     Node* prev = NULL;      if (round == 1 || round == 2 || round == 3 || round == 7 || round == 8 || round == 9) {         curr = new Node;         curr-&gt;cards = "Emperor";         prev = curr;         head = curr;          for (int i = 0; i &lt; 3; i++) {              curr = new Node;             curr-&gt;cards = "Citizen";             prev-&gt;next = curr;             prev = curr;         }          curr = new Node;         curr-&gt;cards = "Citizen";         prev-&gt;next = curr;      }      if (round == 4 || round == 5 || round == 6 || round == 10 || round == 11 || round == 12) {         curr = new Node;         curr-&gt;cards = "Slave";         prev = curr;         head = curr;          for (int i = 0; i &lt; 3; i++) {              curr = new Node;             curr-&gt;cards = "Citizen";             prev-&gt;next = curr;             prev = curr;         }          curr = new Node;         curr-&gt;cards = "Citizen";         prev-&gt;next = curr;      }      return head;  } Node *selectKaijiCard(Node *head, int indexK) {      for (int i = 0; i &lt; indexK - 1; i++) {          head = head-&gt;next;     }      return head; } Node *deleteSelectedKaijiCard(Node *head, int indexK) {      Node *curr = NULL;     if (indexK == 1)     {         curr = head;         head = head-&gt;next;         delete curr;         return head;     }      Node *deleteCard = head;      for (int i = 0; i &lt; indexK - 1; i++) {          curr = deleteCard;         deleteCard = deleteCard-&gt;next;     }     curr-&gt;next = deleteCard-&gt;next;     delete deleteCard;     return head; } List *createTonegawaDeck(int round) {      List *root = NULL;     List *front = NULL;     List *tail = NULL;      if (round == 1 || round == 2 || round == 3 || round == 7 || round == 8 || round == 9) {         front = new List;         front-&gt;card = "Slave";         tail = front;         root = front;          for (int i = 0; i &lt; 3; i++) {              front = new List;             front-&gt;card = "Citizen";             tail-&gt;next = front;             tail = front;         }          front = new List;         front-&gt;card = "Citizen";         tail-&gt;next = front;     }      if (round == 4 || round == 5 || round == 6 || round == 10 || round == 11 || round == 12) {         front = new List;         front-&gt;card = "Emperor";         tail = front;         root = front;          for (int i = 0; i &lt; 3; i++) {              front = new List;             front-&gt;card = "Citizen";             tail-&gt;next = front;             tail = front;         }          front = new List;         front-&gt;card = "Citizen";         tail-&gt;next = front;         front-&gt;next = root;     }      return root; } List *selectTonegawaCard(List *root, int indexT) {     for (int i = 0; i &lt; indexT; i++) {          root = root-&gt;next;     }      return root;  } List *deleteSelectedTonegawaCard(List *root, int indexT) {      List *front = NULL;     if (indexT == 0)     {         front = root;         root = root-&gt;next;         delete front;         return root;     }      List *deleteTonegawaCard = root;      for (int i = 0; i &lt; indexT; i++) {          front = deleteTonegawaCard;         deleteTonegawaCard = deleteTonegawaCard-&gt;next;     }     front-&gt;next = deleteTonegawaCard-&gt;next;     delete deleteTonegawaCard;     return root; } bool betCheck(int betLength, int remainingLength) {      bool flag;     if (betLength &lt;= remainingLength) {         flag = true;     }     else if (betLength &gt; remainingLength) {         flag = false;     }     return flag; } int prizeCheck(int betLength, int round) {      int yen;     if (round == 1 || round == 2 || round == 3 || round == 7 || round == 8 || round == 9) {          yen = betLength * 100000;     }     if (round == 4 || round == 5 || round == 6 || round == 10 || round == 11 || round == 12) {          yen = betLength * 500000;     }     return yen; } void printDeck(Node * head) {      int count = 1;     cout &lt;&lt; "===============" &lt;&lt; endl;     cout &lt;&lt; "Kaiji's cards" &lt;&lt; endl;     cout &lt;&lt; "===============" &lt;&lt; endl &lt;&lt; endl;     while (head != NULL) {         cout &lt;&lt; count &lt;&lt; ". " &lt;&lt; head-&gt;cards &lt;&lt; endl;         head = head-&gt;next;         count++;     }     cout &lt;&lt; endl; } int winCheck(List *root, Node *head, int cardIndex, int randTonegawa) {      int result = 0;      if ((head-&gt;cards == "Citizen") &amp;&amp; (root-&gt;card == "Citizen")) {          result = 0;     }     else if ((head-&gt;cards == "Emperor") &amp;&amp; (root-&gt;card == "Citizen") || (head-&gt;cards == "Slave") &amp;&amp; (root-&gt;card == "Emeperor") || (head-&gt;cards == "Citizen") &amp;&amp; (root-&gt;card == "Slave")) {          result = 1;     }     else if ((root-&gt;card == "Emperor") &amp;&amp; (head-&gt;cards == "Citizen") || root-&gt;card == "Slave" &amp;&amp; head-&gt;cards == "Emperor" || root-&gt;card == "Citizen" &amp;&amp; head-&gt;cards == "Slave") {          result = 2;     }     head = deleteSelectedKaijiCard(head, cardIndex);     root = deleteSelectedTonegawaCard(root, randTonegawa);     return result; } void gameOver(int cash, int round, int input, int remaining) {      if (round &lt;= 12 &amp;&amp; cash == 20000000 &amp;&amp; betCheck(input, remaining) == true) {         cout &lt;&lt; "You did not entirely win! You only got " &lt;&lt; cash &lt;&lt; " Yen in 12 rounds!" &lt;&lt; endl;         system("pause");         exit(0);     }     else if (round == 12 &amp;&amp; cash &lt; 20000000 &amp;&amp; betCheck(input, remaining) == false) {          cout &lt;&lt; "You won! You got" &lt;&lt; cash &lt;&lt; " Yen at Round " &lt;&lt; round &lt;&lt; endl;     }  } </code></pre>  <p>List.h</p>  <pre><code>#pragma once #include &lt;string&gt; using namespace std;  struct List {     string card;     List* next = NULL; }; </code></pre>  <p>Node.h</p>  <pre><code>#pragma once #include &lt;string&gt; using namespace std;  struct Node {     string cards;     Node* next = NULL;     Node* prev = NULL;   }; </code></pre>