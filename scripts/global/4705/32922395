<p>I have a code that checks if a wordpuzzle contains a certain word. This is the testclass:</p>  <pre><code>package application;  import org.junit.Before; import org.junit.Test; import static org.junit.Assert.*;  /**  * Test class for the implementation of the {@link WordPuzzle}  *  */ public class WordPuzzleTest {      WordPuzzle myPuzzle = null;      /**      * This function will initialize the myPuzzle variable before you start a new test method      * @throws Exception      */     @Before     public void setUp() {         try {             this.myPuzzle = new WordPuzzle("VNYBKGSRORANGEETRNXWPLAEALKAPMHNWMRPOCAXBGATNOMEL", 7);         } catch (IllegalArgumentException ex) {                 System.out.println("An exception has occured");                 System.out.println(ex.getMessage());         }      }      /**      * Test the constructor of the {@link WordPuzzle} class      */     @Test     public void testWordPuzzle() {             assertNotNull("The object failed to initialize", this.myPuzzle);             char[][] expectedArray = {{'V','N','Y','B','K','G','S'},                                  {'R','O','R','A','N','G','E'},                                  {'E','T','R','N','X','W','P'},                                  {'L','A','E','A','L','K','A'},                                  {'P','M','H','N','W','M','R'},                                  {'P','O','C','A','X','B','G'},                                  {'A','T','N','O','M','E','L'}};             assertArrayEquals(expectedArray, this.myPuzzle.getLetterArray());     }      /**      * Test to search for some words...      */     @Test     public void testSearchWord() {             assertFalse("The word SOFTWARE is found, and may not be found", this.myPuzzle.searchWord("SOFTWARE"));             assertTrue("The word BANANA is not found", this.myPuzzle.searchWord("BANANA"));     }  } </code></pre>  <p>This is the code I wrote to find that certain word:</p>  <pre><code>package application;  public class WordPuzzle {      private String puzzle;     private int numRows;     private char [][] puzzleArray = new char[numRows][numRows];      public WordPuzzle(String puzzle, int numRows) {         super();         this.puzzle = puzzle;         this.numRows = numRows;          puzzleArray = new char[numRows][numRows];         char[] puzzleChar;         puzzleChar=puzzle.toCharArray();          int index=0;         int i=0;         int j=0;         while (i&lt;numRows) {             while (j&lt;numRows) {                 puzzleArray[i][j] = puzzleChar[index];                 j++;                 index++;             }             i++;             j=0;         }        }      public Object[] getLetterArray() {         return puzzleArray;     }      public boolean searchWord(String word) {         char[] wordChar;         wordChar = new char[word.length()];         int xaxis=0;         int yaxis=0;         int index=0;         boolean wordFound=false;          while (yaxis&lt;numRows) {             while (xaxis&lt;numRows) {                 /**                  * Find first matching letter                  */                 if (puzzleArray[yaxis][xaxis]!=wordChar[index]) {                     xaxis++;                 }                 else {                     int xinit=xaxis;                     int yinit=yaxis;                      /**                       * Check left                      */                     while (xaxis&gt;-1 &amp;&amp; puzzleArray[yaxis][xaxis]==wordChar[index]) {                         if (index==word.length()-1) {                             wordFound=true;                             return wordFound;                         }                         else {                             xaxis--;                             index++;                         }                     }                     xaxis=xinit;                     yaxis=yinit;                     index=0;                      /**                       * Check up                      */                     while (yaxis&gt;-1 &amp;&amp; puzzleArray[yaxis][xaxis]==wordChar[index]) {                         if (index==word.length()-1) {                             wordFound=true;                             return wordFound;                         }                         else {                             yaxis--;                             index++;                         }                     }                     xaxis=xinit;                     yaxis=yinit;                     index=0;                      /**                       * Check down                      */                     while (yaxis&lt;numRows &amp;&amp; puzzleArray[yaxis][xaxis]==wordChar[index]) {                         if (index==word.length()-1) {                             wordFound=true;                             return wordFound;                         }                         else {                             yaxis++;                             index++;                         }                     }                     xaxis=xinit;                     yaxis=yinit;                     index=0;                      /**                       * Check right                      */                     while (xaxis&lt;numRows &amp;&amp; puzzleArray[yaxis][xaxis]==wordChar[index]) {                         if (index==word.length()-1) {                             wordFound=true;                             return wordFound;                         }                         else {                             xaxis++;                             index++;                         }                     }                     xaxis=xinit;                     yaxis=yinit;                 }             }             yaxis++;             xaxis=0;         }     return wordFound;     } } </code></pre>  <p>When I run the test, it will say that it didn't found the word "BANANA". I can't find my mistake. It should return </p>  <pre><code>wordFound=true </code></pre>  <p>when checking downwards. But it doesn't... </p>