<p>I'm trying to make a binary search of all prime numbers up to <code>num</code>, but the <code>search()</code> function won't <code>return</code> the booleans so that the <code>prime_maker()</code>function will <code>print</code> 'It's a prime!'.</p>  <pre><code>def split_list(x):        spliting = len(x)//2        return x[:spliting], x[spliting:] def search (A, a):        B, C = split_list(A)        if a &lt;= A[-1] and a &gt;= A[0]:            if A[len(A)//2] &gt; a:               A = B               if A[len(A)//2] != a:                   search(A,a)                else:                    # print('It is a prime!')                    return True                    # This won't return             elif A[len(A)//2] &lt; a:                A = C                if A[len(A)//2] != a:                    search(A,a)                else:                    # print('It is a prime!')                    return True                    # This won't return         else:            # print('It is not a prime.')            return False def prime_maker():     a = int(input('Is it a prime?: '))     num = 100     prim = []     for x in range(2, num + 1):         isPrime = True         for y in range(2, int(x**0.5)+1):             if not (x % y):                 isPrime = False                 break         if isPrime:             prim.append(x)     if a &lt; 0 or a &gt; num:         print ('Insert a number between 0 og %d' % num)         prime_maker()     else:         if search(prim,a):             print('It\'s a prime!')         else:             print('It\'s not a prime') prime_maker() </code></pre>  <p>Why doesn't the <code>search()</code> function <code>return</code> the <code>booleans</code> so that the <code>prime_maker()</code>function prints the right <code>if-statment</code> in the last few lines?</p>