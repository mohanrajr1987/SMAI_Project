<p>Suppose I have <code>n = 3</code> <code>boolean</code> variables -- <code>a</code>, <code>b</code> and <code>c</code> in <code>Java</code>.</p>  <p>These variables can have a total of <code>8 (2^n = 2^3)</code> combinations.</p>  <p>These conditions are used to determine the <code>return</code> statement in a <code>recursive</code> function as follows:</p>  <pre><code>static int recursiveFunc(int x){      boolean a, b, c;      a = getBoolVal(x);     b = getBoolVal(x + 1);     c = getBoolVal(x + 2);      if(a == true &amp;&amp; b == true &amp;&amp; c == true)        //7         return recursiveFunc(x + 1) + recursiveFunc(x + 2) + recursiveFunc(x + 3);      else if(a == true &amp;&amp; b == true &amp;&amp; c == false)  //6         return recursiveFunc(x + 1) + recursiveFunc(x + 2);      else if(a == true &amp;&amp; b == false &amp;&amp; c == true)  //5         return recursiveFunc(x + 1) + recursiveFunc(x + 3);      else if(a == true &amp;&amp; b == false &amp;&amp; c == false) //4         return recursiveFunc(x + 1);      else if(a == false &amp;&amp; b == true &amp;&amp; c == true)  //3         return recursiveFunc(x + 2) + recursiveFunc(x + 3);      else if(a == false &amp;&amp; b == true &amp;&amp; c == false) //2         return recursiveFunc(x + 2);      else if(a == false &amp;&amp; b == false &amp;&amp; c == true) //1         return recursiveFunc(x + 3);      else                                           //0         return 0;  }  static boolean getBoolVal(int x){      if(some condition with respect to x)         return true;      else         return false;  } </code></pre>  <p>As you can see, the number of conditions will get pretty lengthy with increasing value of <code>n</code>.</p>  <p>However, the return statement can be <em>generated</em> easily in <code>n + 2</code> steps (instead of <code>2^n</code>) as follows:</p>  <pre><code>String returnStat = "";  if(a == true)     returnStat += "recursiveFunc(x + 1) + ";  if(b == true)     returnStat += "recursiveFunc(x + 2) + ";  if(c == true)     returnStat += "recursiveFunc(x + 3) + ";  if(returnStat == "")     returnStat = "0";  else     returnStat = returnStat.substring(0, returnStat.length() - 3); //removing extra " + " </code></pre>  <p>Is there anyway in which I can return <code>returnStat</code> as a statement? Perhaps, something like -- </p>  <pre><code>return stringToCode(returnStat); </code></pre>  <p>If not, how to overcome this situation?</p>