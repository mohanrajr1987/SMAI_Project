<p>My data model is consisting of two objects; project and task. I load my data from the db via json and MVC-services and map my observableArrays like this:</p>  <pre><code>viewModel = function () {     var self = this;      // some code...      // projects     self.Projects = ko.observableArray();     var mappedProjects = [];     $.ajax({         url: "myService/GetProjectsByUserId",         data: "userID=" + meID,         dataType: 'json',         async: false,         success: function (allData) {             mappedProjects = $.map(allData, function (item) {                 return new Project(item);             });         }     });     self.Projects(mappedProjects);      // tasks     self.Tasks = ko.observableArray();     var mappedTasks = [];     $.ajax({         url: "myService/GetTasksByUserID",         data: "userid=" + meID,         dataType: 'json',         async: false,         success: function (allData) {             mappedTasks = $.map(allData, function (item) {                 return new Task(item, self.Projects);    // is there a smarter way to access self.Projects from the Scene prototype?                 //return new Task(item);             });         }     });     self.Tasks(mappedTasks);       //some more code...  }; </code></pre>  <p>where</p>  <pre><code>Project = function (data) {     this.projectID = data.projectID;     this.type = ko.observable(data.type); };   Task = function (data, projects) {      this.taskID = data.taskID;     this.projectID = data.projectID;      //this.projecttype = ??? simpler solution?      this.projecttype = ko.computed(function () {   // Is there a simpler way to access 'viewModel.Projects' from within 'Task'?         var project = ko.utils.arrayFirst(projects, function (p) {             return p.projectID === self.projectID;         });         if (!project) {             return null;         }         else {             return project.headerType();         }     });  }; </code></pre>  <p>The thing is (as you see) I want to access the projectType inside the Task-object. Is there a simpler way to do this than instantiating the object with the self.Projects as input?</p>  <p>Could self.Projects be bound when defined in some way so I could access it via the DOM?</p>