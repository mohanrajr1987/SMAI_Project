<p>I'm trying to create a custom component loader within <code>knockout</code> but I'm struggling with the view model. Essentially I want to remotely go grab both the HTML template and the JavaScript view model, but in this instance I don't want to use a traditional AMD module loader.</p>  <p>I've managed to get some of this working, specifically loading the HTML template but I can't figure out how to load the view model. Before I start here's my directory structure:</p>  <p>-- index.html<br> -- customerLoader.js<br> -- comps<br>       -- myCustom.html<br>       -- myCustom.js</p>  <p>So I've created my component loader like so. <code>getConfig</code> basically takes the name of the component and turns that into a path for the viewModel and the html template.</p>  <pre><code>var customLoader = {     getConfig: function(name, callback) {         callback({ template: "comps/" + name + ".html", viewModel: "comps/" + name + ".js" });     },     loadTemplate: function(name, templateConfig, callback) {         console.log("loadTemplate", name, templateConfig);         $.get(templateConfig, function(data) {             callback(data);         });     },     loadViewModel: function(name, templateConfig, callback) {         console.log("loadViewModel", name, templateConfig);         $.getScript(templateConfig, function(data) {             callback(data);         });     } };  ko.components.loaders.unshift(customLoader); </code></pre>  <p>This successfully makes a request to load the template, which brings back some basic content. What I'm struggling with is the view model. I'm not sure what should be in the target of my JavaScript file?</p>  <p>I assumed that I'd want to return a function that would take some parameters, most likely a <code>params</code> object. However if I try and do this I get an error, telling me the JavaScript is invalid:</p>  <blockquote>   <p>Uncaught SyntaxError: Illegal return statement</p> </blockquote>  <p>This is the current content I've got that is producing this error:</p>  <pre><code>return function(params) {      console.log("myCustom.js", name, viewModelConfig);      // Add a computed value on     params.bookNum = ko.computed(function() {         switch(this.title()) {             case "A": return 1;             case "B": return 2;             case "C": return 3;             default: return -1;         }     });      //ko.components.defaultLoader.loadViewModel(name, viewModelConstructor, callback);  }; </code></pre>  <p>So ultimately I'm not sure how to achieve this, but I guess there are 3 basic questions that explain the gaps in my understanding:</p>  <ol> <li>What should my "view model" JavaScript file contain exactly? A function? An object? etc...</li> <li>Do I need to call the <code>ko.components.defaultLoader.loadViewModel</code> at all?</li> <li>Within my <code>customLoader</code> what should <code>loadViewModel()</code> be doing with the result of the jQuery callback? I'm not sure if I get back a JavaScript object, or just a string? </li> </ol>  <p>I'm open to achieve this in a different way if need be (e.g. not using jQuery but getting files a different way), but I don't want to use a module loader (e.g. require.js/curl.js in this instance).</p>