<p>I am revamping a knockout-based web-app, that will have different themes. The variations between themes can be in the view as well as functionality. Some functionality is specific to the theme, while other functionality can be common in 2 or more themes, but not all. Still other functionality can be all the themes. </p>  <p>The goal is to have have framework that provides maintainability by removing code duplication, having proper structure, loosely bounded functionality and improved testability.</p>  <p>I am envisioning components that contain reusable functionality. I am calling them <strong>"base"</strong> components. These components can be configured via configuration parameters. These components are not specific to any theme. </p>  <p>I would like to make a framework that allows:</p>  <ul> <li>The base components to be included in themes. </li> <li>Themes can provide the theme-specific view of base component, that will over-ride the view provided by the base component.</li> <li>Themes can provide configuration parameters, specific to the theme.</li> <li>Themes can extend the functionality of base components. The extended component will have all the functionality of the base component</li> <li>Themes can have components specific to the theme.</li> <li>Component dependencies are managed by RequireJS</li> <li>The framework should support optimization through r.js</li> <li>Each component should be individually unit-testable</li> <li>Communication between components is based on pub-sub mechanism e.g. <a href="https://github.com/rniemeyer/knockout-postbox" rel="nofollow">ko.postbox</a></li> </ul>  <p>In order to realize the above requirements, I am using <a href="http://knockoutjs.com/documentation/component-overview.html" rel="nofollow">components</a> support provided in Knockout 3.2+</p>  <p>I have been able to handle theme-specific views, but not able to find a way to extend the "base" component in the theme.</p>  <p>Any ideas about that is welcome.</p>  <hr>  <p>I have create two KO components: "base-menu" and "menu".</p>  <p>"base-menu" component is:</p>  <pre><code>define("base-menu", ['knockout'], function (ko) {  function ViewModel(params) {      // this parameter should be configurable in theme     var name = params.name || "No Name";      this.name = ko.observable(name);      this.dispose = function () {         console.log("base dispose");     }  };  return {     viewModel: ViewModel,     template: '&lt;h2&gt;&lt;span data-bind="text: name"&gt;&lt;/span&gt; Settings in BASE&lt;/h2&gt;' }; }); </code></pre>  <p>"menu" component is:</p>  <pre><code>// TODO: this component should "inherit" from base-menu, so that it has a "name" observable  define("menu", ['knockout'], function (ko) {  function ViewModel(params) {     this.sections = params.sections || [];     this.selectedSection = ko.observable();      this.dispose = function () {         // TODO: this should call base-menu's dispose function         console.log("theme dispose");     }  };  return {     viewModel: ViewModel,     template: '&lt;h2&gt;&lt;span data-bind="text: name"&gt;&lt;/span&gt; Settings in THEME&lt;/h2&gt;&lt;ul class="nav nav-pills" data-bind="foreach: sections"&gt;&lt;li data-bind="css: { active: $parent.selectedSection() === $data }"&gt;&lt;a href="#" data-bind="text: $data, click: $parent.selectedSection"&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;' }; }); </code></pre>  <p>"menu" component should "inherit" from "base-menu" component, so that it has a "name" observable.</p>  <p>How can I achieve this?</p>  <p>Editable example is given at <a href="https://jsfiddle.net/waqqasjabbar/5mfd69yb/" rel="nofollow">JSFiddle</a></p>