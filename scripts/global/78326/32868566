<p>I'm working on an Single Page Application and we're using Knockout quite extensively. We've currently got a list of item that can be clicked, and upon doing so they'll load some content into a modal container. The image below illustrates the different items that'll trigger various content to be displayed:</p>  <p><a href="http://i.stack.imgur.com/c7QGd.png" rel="nofollow"><img src="http://i.stack.imgur.com/c7QGd.png" alt="enter image description here"></a></p>  <p>The content of these containers differs substantially, and can have many different custom bindings spread over several tabs. The items in the image are fairly simple and just use Knockout Components but when we start displaying the modal contents they are much more heavy on the JavaScript hence using bindings.</p>  <p>I've recently added in lazy loading of the JavaScript and HTML templates required by the components and this has worked really well. I've had to use a custom component loader as for various reasons we don't want to use require or similar AMD module loader. </p>  <p>Now I'm faced with the same issue with custom knockout bindings, as I expect we could end up with 100 hundred bindings quite easily as this product expands. Unfortunately there doesn't seem to be an obvious way to load custom bindings in a lazy way like components though, and I'm trying to figure out if there's a way to do this, and what the best way would be. Note that I also don't know the name of the binding up front all of the time, sometimes I may wish to load them dynamically based on the name of an observable.</p>  <p>The only things I've managed to find of note so far, are that there is a <code>ko.getBindingHandler()</code> function which can be overridden, but it requires a synchronous load of a binding handler.</p>  <hr>  <p>I have thought of an approach to try and do this, but it uses components and feels like a really backward way of achieving my end goal. It'd be something like this:</p>  <p>Replace a usual custom binding:</p>  <pre><code>&lt;div data-bind="lineChart: $data"/&gt;  </code></pre>  <p>with</p>  <pre><code>&lt;div data-bind="component { name: compName, params: { vm: $data } }"/&gt; </code></pre>  <p>I'd then use a custom component loader, which is actually just loading the binding handler JavaScript, and writing out essentially a placeholder <code>div</code> with the custom binding in:</p>  <pre><code>var bindingLoader = {    getConfig: function(name, callback) {       if(name.startsWith("binding-")) {          callback({ binding: name.replace("binding-", ""), jsUrl: "/bindings/" + name });          return;       }       callback(null);    },   loadComponent(name, componentConfig, callback) {      var obj = { };      obj.template = '&lt;div data-bind="' + componentConfig.name + ': $data"/&gt;';      $.ajax({ url: componentConfig.jsUrl, dataType: "text" })        .done(function(data)) {            (new Function(data))();            callback(obj);      });   } } </code></pre>  <p>I'm sure however there must be a better way of achieving this, but I can't think of any other options right now.</p>