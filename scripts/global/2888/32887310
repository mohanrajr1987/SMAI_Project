<p>I have always been able to find a way to fix my code just debugging and browsing the web but I am stuck on some code right now and I don't see what kind of tests I could do to debug it.</p>  <p>Basically I'm trying to implement a simple Client/Server relation in C++, I commented every line to be sure I was understanding what I'm doing but still, it doesn't work.</p>  <p>Here's my Client code :</p>  <pre><code>void startClient(){  int wsaStatus, connectStatus; //check errors WSADATA WSAData; wsaStatus=WSAStartup(MAKEWORD(2, 0), &amp;WSAData); if (wsaStatus != NO_ERROR) {     std::cout &lt;&lt; "WSA Startup failed with error : " &lt;&lt; wsaStatus; } SOCKET sock; //defines the sockets TO SEND SOCKADDR_IN sin;//information about the socket  sin.sin_addr.s_addr = inet_addr("127.0.0.1");//ip of the server you want to connect to sin.sin_family = AF_INET;//family of the socket, for internet it's AF_INET sin.sin_port = htons(1234);// 23 for telnet etc, it's the port sock = socket(AF_INET, SOCK_STREAM, 0);//second parameter is the type of the socket, SOCK_STREAM opens a connection ( use for TCD ), SOCK_DGRAM doesn't connect() or accept() it's used for UDP if (sock == INVALID_SOCKET) {     std::cout &lt;&lt; "INVALID SOCKET " &lt;&lt; WSAGetLastError();     WSACleanup(); }  bind(sock, (SOCKADDR *)&amp;sin, sizeof(sin)); //binds the socket to the port and the adress above  char buffer[255]; //creates a buffer to receive messages  connectStatus=connect(sock, (SOCKADDR *)&amp;sin, sizeof(sin)); //function to connect to the server if (connectStatus == SOCKET_ERROR) { //it returns 0 if no error occurs     std::cout &lt;&lt; "Connection failed with error : " &lt;&lt; WSAGetLastError();     closesocket(sock);     WSACleanup(); }  int iResult = send(sock, "Hello world!\r\n", 14, 0); if (iResult == SOCKET_ERROR) {     std::cout &lt;&lt; "Send failed with error : " &lt;&lt; WSAGetLastError() &lt;&lt; std::endl; }  closesocket(sock); WSACleanup();  system("pause"); </code></pre>  <p>Here's my Server code :</p>  <pre><code>void startServer(){  int wsaStatus; //check errors WSADATA WSAData; wsaStatus=WSAStartup(MAKEWORD(2, 0), &amp;WSAData); if (wsaStatus != NO_ERROR) {     std::cout &lt;&lt; "WSA Startup failed with error : " &lt;&lt; wsaStatus; }   SOCKET sock; //defines the sockets SOCKADDR_IN sin; //information about the socket  sin.sin_addr.s_addr = htonl(INADDR_ANY); //since it's the server we accept any connection sin.sin_family = AF_INET; //family of the socket, for internet it's AF_INET sin.sin_port = htons(1234); // 23 for telnet etc, it's the port sock = socket(AF_INET, SOCK_STREAM, 0); //second parameter is the type of the socket, SOCK_STREAM opens a connection ( use for TCD ), SOCK_DGRAM doesn't connect() or accept() it's used for UDP if (sock == INVALID_SOCKET) {     std::cout &lt;&lt; "INVALID SOCKET " &lt;&lt; WSAGetLastError();     WSACleanup(); }  bind(sock, (SOCKADDR *)&amp;sin, sizeof(sin)); //binds the socket to the port and the adress above char buffer[255]; //to receive the messages  listen(sock, 1); //listens on the port of the socket, second parameter is the maximum of connections accepted while (1) {      int sizeof_sin = sizeof(sin); //size of the socket used to take the information from the client connected     sock = accept(sock, (SOCKADDR *)&amp;sin, &amp;sizeof_sin); //first parameter : socket, second parameter : client information socket, third parameter : size of the information about the socket     std::cout &lt;&lt; "Connection ok" &lt;&lt; std::endl;     if (sock != INVALID_SOCKET)     {         recv(sock, buffer, sizeof(buffer), 0);         closesocket(sock);         std::cout &lt;&lt; buffer &lt;&lt; std::endl;     }     else{         std::cout &lt;&lt; "ERROR" &lt;&lt; std::endl;     } }   WSACleanup(); </code></pre>  <p>So I start the Server first and it stops at the accept() function waiting for a connection, then I start the Client which is sending the message successfully BUT the Server still waits at the accept() function and is not getting any message.</p>  <p>As you can see I implemented lots of errors checking, still not helping :')</p>  <p>Cheers !</p>