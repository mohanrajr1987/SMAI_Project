<p>I'm trying to make a Socket connection via TCP protocol.</p>  <p>But my server (written in C++ and running on my PC) does not receive connection request from my client (written in Java and running on Android)</p>  <p><strong>ServerSocket.h (in my PC)</strong></p>  <pre><code>class ServerSocket: public QObject{     Q_OBJECT      public:         explicit ServerSocket(QObject *rpParent = 0);     void initServerSocket();      public slots:         void acceptConnection();         void startRead();      private:         QTcpServer* server;         QTcpSocket* client; }; </code></pre>  <p><strong>ServerSocket.cpp (in my PC)</strong></p>  <pre><code>ServerSocket::SocketClient(QObject *rpParent) :     QObject(rpParent) {     server = new QTcpServer(this);     client = new QTcpSocket(this); }  void ServerSocket::initServerSocket(){   connect(server, SIGNAL(newConnection()), this, SLOT(acceptConnection()));   server-&gt;listen(QHostAddress::Any, 6005);     while(1){         if(server-&gt;hasPendingConnections() ){                printf("hasPendingConnections...\n");         }     } }  void ServerSocket::acceptConnection(){   client = server-&gt;nextPendingConnection();   connect(client, SIGNAL(readyRead()), this, SLOT(startRead())); }  void ServerSocket::startRead(){   char buffer[1024] = {0};   client-&gt;read(buffer, client-&gt;bytesAvailable());   printf("startRead %s\n", buffer);   client-&gt;close(); } </code></pre>  <p><strong>ClientSocket.java (in Android)</strong></p>  <pre><code>public class ClientSocket {      private Thread serverThread = null;      public ClientSocket(){         serverThread = new Thread(new ClientThread());     }      public void sendData(){         serverThread.start();     }       class ClientThread implements Runnable {         private PrintWriter printwriter;          public ClientThread() {         }          public void run() {             try {                 Socket socket = new Socket("192.168.0.12", 6005);                 if( socket.isConnected()){                        Log.e("sendData", "connected!");                 }                              String msg = "Hey server!";                 printwriter = new PrintWriter(socket.getOutputStream(), true);                 printwriter.write(msg);                   printwriter.flush();                 printwriter.close();                 socket.close();              } catch (UnknownHostException e) {                 e.printStackTrace();             } catch (IOException e) {                 e.printStackTrace();             }         }     }  } </code></pre>  <p>Could you help me?</p>