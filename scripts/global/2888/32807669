<p>recently I am attempting an exercise that requires to design a server with TWO clients based on tcp socket. After connected, the SenderClient should send a message typed by user to Server, and Server should then forward that message to the ReceiverClient. It is like:</p>  <blockquote>   <p>SenderClient -> Server -> ReceiverClient</p> </blockquote>  <p>Only when user types "quit" in sender, all the programs will be terminated, otherwise they are always listening for messages.</p>  <p>Now I have met the problem that: when I run that three programs in Eclipse Luna, what I found is that the message can be successfully passed from SenderClient -> Server -> ReceiverClient for only one time. And after that, the message will be blocked at the Server. Can you guys also run those three programs on your computer to see the strange phenomenon. Thank you and really need help here.</p>  <pre><code>import java.io.*; import java.net.*;  public class Server {  public static void main (String args[]) {      InputStream is = null;     InputStreamReader isr = null;     BufferedReader br = null;     OutputStream os = null;     PrintWriter pw = null;      String info = null;      try {         // listening to port         ServerSocket serverSocket = new ServerSocket(8888);         System.out.println("Server is listening to port 8888...");         while (true) {             // respond to clients             Socket receiverSocket = serverSocket.accept();             System.out.println("receiver client connected!");             Socket senderSocket = serverSocket.accept();             System.out.println("sender client connected!");             // get input stream, read messages from sender             is = senderSocket.getInputStream();             isr = new InputStreamReader(is);             br = new BufferedReader(isr);             info = br.readLine();             // close all resources when user types "quit"             if (info.equalsIgnoreCase("quit")) {                 // close resources when user types "quit"                 is.close();                 isr.close();                 br.close();                 os.close();                 pw.close();                 serverSocket.close();                 System.out.println("Server terminated!");                 break;             }             // print out the message             if (info != null) {                 System.out.println("Sender -&gt; Server: " + info);             }                            // get output stream, forward messages to receiver                       os = receiverSocket.getOutputStream();             pw = new PrintWriter(os);             pw.println(info);             pw.flush();         } // end while     } catch (IOException e) {         e.printStackTrace();     } // end try...catch  } // end main method  } // end class Server   import java.io.*; import java.net.*;  public class ReceiverClient {      public static void main (String args[]) {          InputStream is = null;         BufferedReader br = null;          String info = null;          try {             while (true) {                 // create receiver socket with host and port number                 Socket receiverSocket = new Socket("localhost", 8888);                 // get input stream, read the information                 is = receiverSocket.getInputStream();                 br = new BufferedReader(new InputStreamReader(is));                 info = br.readLine();                 // close all resources when user types "quit"                 if (info.equalsIgnoreCase("quit")) {                     is.close();                     br.close();                     System.out.println("Receiver client terminated!");                     break;                 }                 // print out the message                 if (info != null) {                     System.out.println("Sender -&gt; Server -&gt; Receiver: " + info);                 }                 receiverSocket.close();             } // end while         } catch (UnknownHostException e) {             e.printStackTrace();         } catch (IOException e) {             e.printStackTrace();         } // end try...catch      } // end main method  } // end class ReceiverClient  import java.io.*; import java.net.*;  public class SenderClient {      public static void main (String args[]) {          OutputStream os = null;         PrintWriter pw = null;         BufferedReader br = null;          String userInput = null;          try {             while (true) {                 // create sender socket with host and port number                 Socket senderSocket = new Socket("localhost", 8888);                 // get message from user input                 System.out.println("Please input a message:");                 br = new BufferedReader(new InputStreamReader(System.in));                 userInput = br.readLine();                 // get output stream, send message to server                 os = senderSocket.getOutputStream();                 pw = new PrintWriter(os);                 pw.println(userInput);                 pw.flush();                 senderSocket.close();                 // close all resources when user types "quit"                 if (userInput.equalsIgnoreCase("quit")) {                     os.close();                     pw.close();                     System.out.println("Sender client terminated!");                     break;                 }             } // end while         } catch (UnknownHostException e) {             e.printStackTrace();         } catch (IOException e) {             e.printStackTrace();         } // end try...catch          } // end main method  } // end class SenderClient </code></pre>