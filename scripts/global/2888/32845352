<p>I am trying to figure out why client is behaving in different ways in my two codes and is there a reason why my client code in sslconfigurator is not using pooling http client connection manager</p>  <p>i am trying to use connection pooling in my java project but my client code in ssl configurator is making a fin request after every request made to server so server is closing connection so i am not able to use connection pooling provided by PoolingHttpClientConnectionManager </p>  <p>i am telling this because in my wire shark i am seeing 10 tcp packets get captured for filter tcp.flags.syn==1 &amp;&amp; tcp.flags.ack==0</p>  <p>and also in netstat i am seeing 10 different ports are being used for all requests</p>  <p>and for every request client is making fin request after completion of request</p>  <p>here client is my code </p>  <p>mycode with ssl configurator:</p>  <pre><code>static PoolingHttpClientConnectionManager cm;     static {          SslConfigurator sslConfig = SslConfigurator.newInstance()                 .securityProtocol("TLS")                 .keyStoreFile("/Users/path")                 .keyStorePassword("pass").keyStoreType("JKS")                 .trustStoreFile("/Users/path");          SSLContext sslCtx = sslConfig.createSSLContext();         SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(                 sslCtx, NoopHostnameVerifier.INSTANCE);         Registry&lt;ConnectionSocketFactory&gt; r = RegistryBuilder                 .&lt;ConnectionSocketFactory&gt; create()                 .register("http",                         PlainConnectionSocketFactory.getSocketFactory())                 .register("https", sslsf).build();           cm = new PoolingHttpClientConnectionManager(r);         cm.setMaxTotal(8);         cm.setDefaultMaxPerRoute(5);          ConnectionReuseStrategy reuseStrategy = new DefaultConnectionReuseStrategy();         ConnectionKeepAliveStrategy keepAliveStrategy = new DefaultConnectionKeepAliveStrategy();         client = HttpClients.custom().setSSLSocketFactory(sslsf)                 .setConnectionManager(cm)                 .setConnectionReuseStrategy(reuseStrategy)                 .setKeepAliveStrategy(keepAliveStrategy).build();       }      public static void main(String a[]) throws JSONException,             ClientProtocolException, IOException {         JSONObject jsonRequest = new JSONObject();         JSONObject jsonMessage = new JSONObject();            JSONObject jsonResponse;          jsonMessage.put("keyID", keyID);         jsonMessage.put("Text", Text);          jsonRequest.put("message", jsonMessage);          StringEntity se = new StringEntity(jsonRequest.toString());         HttpResponse response2;         HttpPost httpPost = new HttpPost(target);           httpPost.setEntity(se);         httpPost.setHeader("Accept", "application/json");         httpPost.setHeader("Content-type", "application/json");         httpPost.setHeader("Connection", "keep-alive");          int i;         for (i = 0; i &lt; 10; i++) {             System.out.println(cm.getTotalStats());             response2 = client.execute(httpPost);              System.out.println(response2.getStatusLine());             HttpEntity entity2 = response2.getEntity();             String result = EntityUtils.toString(entity2);             System.out.println(cm.getTotalStats());             EntityUtils.consume(entity2);              System.out.println(result);           }     } } </code></pre>  <p>on the other side i tried same code on fb.com with out sslconfigurator there the client makes a fin request to server after all the requests to the server are finished so i am able to use connection pooling </p>  <p>here  in my wire shark i am seeing 2 tcp packets get captured for filter tcp.flags.syn==1 &amp;&amp; tcp.flags.ack==0</p>  <p>and client is making fin request after 50 requests </p>  <p>why is client behaving different in 2 codes </p>  <p>and how to make use of connection pooling in sslconfigurator code</p>  <p>my non sslconfigurator code:</p>  <p>private static CloseableHttpClient client;</p>  <pre><code>    static String target="https://fb.com";     static PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();     static     {     cm.setMaxTotal(15);     cm.setDefaultMaxPerRoute(5);  }  public static void main(String a[]) throws JSONException, ClientProtocolException, IOException {      HttpGet httpPost = new HttpGet(target);        HttpResponse response2;        int i;     for(i=0;i&lt;50;i++)     {         System.out.println(cm.getTotalStats());       response2 = client.execute(httpPost);       System.out.println(cm.getTotalStats());     System.out.println(response2.getStatusLine());      HttpEntity entity2 = response2.getEntity();      String result = EntityUtils.toString(entity2);       EntityUtils.consume(entity2);        }   } } </code></pre>