<p>i've seen other people with this problem, but maybe i can explain my situation and you can point out where the issue might be.</p>  <p>im getting a 'Warning : socket_bind(): unable to bind address [98]: Address already in use' error.</p>  <p>the situation is this. I am using a web application to trigger another program to perform tasks (from a webpage interface). The results of that program are sent through a socket to my web application that is listening on a socket.</p>  <p>first i create and open the socket, then i trigger the other program, then when that program is finished it should send its results back through the socket.</p>  <p>it works fine the first try. Then the next try (i trigger this process many times) i get the above socket bind error when trying to open the socket, obviously the socket is still bound.</p>  <p>i wait about a minute and i can successfully run the process again. I think the socket connection timesout.</p>  <p>I dont know if the problem is because of the way i have structure my socket code, or if the problem is in the external program that i am triggering. I dont know much about the internals of the external program as its a jar file built by someone else.</p>  <p>heres the code i use for creating and handling the socket. I just used an example on php.net and altered it for my needs.</p>  <pre><code>    $port1 = 15000;               // configure the socket     error_reporting(E_ALL);     set_time_limit(0);     ob_implicit_flush();                 $address = '127.0.0.1';     $port2 = 54321;     $sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);     $error = 'none';      if ($sock) {          if (socket_bind($sock, $address, $port2)) {              if (socket_listen($sock, 5)) {                   // trigger external process                  if (start_calibration()) {                                              $buf = array();                      // listen to the socket for incoming messages                     do {                         // if incomming connection is not accepted break out and close socket                         if (($msgsock = socket_accept($sock)) === false) {                             break;                         }                          do {                             // if cant read socket then break out and close socket                             if (false === ($buf = socket_read($msgsock, 2048, PHP_BINARY_READ))) {                                 break 2;                             }                              $buf = unpack('C*', $buf);                              socket_close($msgsock);                             break 2;                         } while (true);                         socket_close($msgsock);                     } while (true);                      socket_close($sock);                      // code to handle data recieved through the socket                  }                       else {                     // start_calibration failed                     $error = 'start_calibration failed';                     socket_close($sock);                 }                                     }             else {                 // socket_listen failed                 $error = 'socket_listen failed';                 socket_close($sock);             }                             }         else {             // socket_bind failed             $error = 'socket_bind failed';             socket_close($sock);         }                     }     else {         // socket_create failed         $error = 'socket_create failed';     }      $data['error'] = $error;     echo json_encode($data); </code></pre>  <p>also, is there is a more efficient way to handle the closing of sockets if there is problems with lines like 'socket_bind', 'socket_listen' etc?</p>