<p>A lot of the good posts on .Net sockets seen on SO are around writing scalable high performance servers.</p>  <p><a href="http://stackoverflow.com/questions/6023264/high-performance-tcp-server-in-c-sharp">High performance TCP server in C#</a></p>  <p><a href="http://stackoverflow.com/questions/869744/how-to-write-a-scalable-tcp-ip-based-server">How to write a scalable Tcp/Ip based server</a></p>  <p>While those posts are very good, what are the core things to focus on when writing high performance <strong>TCP Client</strong> Applications?</p>  <p>A scenario for a high performance client would be an application that streams requests to a server and processes responses in a non-blocking fashion.</p>  <p>Such a client should also have a strategy for reliable disconnect detection.</p>  <p>To further clarify, we have no control over the server end. </p>  <p>We simply have a server endpoint to connect to.</p>  <p>zmqNet mentioned in the comments is a great lib, but I think its strongest (or meant for cases) where both ends of the connection are using zmq (true?).</p>