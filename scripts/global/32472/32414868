<p>I'm learning to use Premake 5 (namely, "premake-5.0.0-alpha5-windows") to generate a Visual Studio 2008 solution.</p>  <p>The solution "Testbed" contains several static libraries and an executable. Some static libraries are prebuilt and not included in the solution (e.g. "SDL2.lib").</p>  <p><em>Using the "links" directive, I've successfully added the prebuilt libraries to the application's link dependencies, <strong>but I cannot link it with the static libraries which are built from source (i.e. the referenced "StaticLib" projects are not added to "Demo/Project Properties/Linker/Input/Additional Dependencies"). Am I missing something obvious?</em></strong></p>  <p>Here the minimal premake code, "premake5.lua" in the root folder:</p>  <pre><code>ROOT_DIR = _MAIN_SCRIPT_DIR BUILD_DIR = path.join( ROOT_DIR, ".Build" ) PROJECT_DIR = path.join( BUILD_DIR, _ACTION ) BINARIES_DIR = path.join( ROOT_DIR, "Binaries" ) THIRD_PARTY_DIR = path.join( ROOT_DIR, "External" ) local BX_DIR = path.join(THIRD_PARTY_DIR, "bx/include")  ENGINE_DIR = path.join( ROOT_DIR, "Engine" )      -- global scope, all workspaces will receive these values     defines {         -- "stdint.h" / "inttypes.h"         "__STDC_LIMIT_MACROS=1",    -- UINT16_C, etc.         "__STDC_FORMAT_MACROS=1",   -- PRIi64, etc.         "__STDC_CONSTANT_MACROS=1", -- UINT16_MAX, etc.         "_CRT_SECURE_NO_WARNINGS",     }     includedirs {         THIRD_PARTY_DIR,         BX_DIR,         ENGINE_DIR,         path.join( ROOT_DIR, "Engine/Runtime" ),     }  solution "Testbed"     location (PROJECT_DIR)     startproject "Demo-CSG"     language "C++" -- default     configurations { "Debug", "Release" }     platforms { "Win32", "Win64" }      filter { "action:vs*" }         includedirs {             path.join(BX_DIR, "compat/msvc")         }      filter "configurations:Debug"         defines { "DEBUG", "_DEBUG" }         flags { "Symbols" }         optimize "Off"         targetsuffix "_DEBUG"      filter "configurations:Release"         defines { "NDEBUG" }         --flags { "OptimizeSize" }         optimize "On"         targetsuffix "_RELEASE"      filter "platforms:Win32"         system "Windows"         architecture "x86"         defines { "WIN32" }         linkoptions { }         objdir (path.join( BUILD_DIR, "obj" )) -- premake will append "\Win32\Debug"         targetdir (path.join( BINARIES_DIR, "x86" ))         debugdir (targetdir())         libdirs {             path.join( THIRD_PARTY_DIR, "_libs32" ),             targetdir(),         }      filter "platforms:Win64"         system "Windows"         architecture "x86_64"         defines { "WIN64" }         objdir (path.join( BUILD_DIR, "obj" ))         targetdir (path.join( BINARIES_DIR, "x64" ))         debugdir (targetdir())         libdirs {             path.join( THIRD_PARTY_DIR, "_libs64" ),             targetdir(),         }  group "Engine"     include "Engine" -- builds my own static libraries  group "External" -- skipped external static libraries which are built from source  group "Programs"     include "Tests" --builds the Demo exe </code></pre>  <p>"testbed/Tests/Demo/premake5.lua":</p>  <pre><code>project "Demo"     kind "ConsoleApp"     language "C++"     location ( PROJECT_DIR )     files {         "**.h", "**.cpp",     }     links {         -- NOTE: custom libs are not added to linker dependencies!         "Runtime",         "Utility",         "Developer",         -- these will be added to linker deps just fine,         -- because they are not in the solution         "SDL2",         "ImGui",         "blablabla", -- will be added as blablabla.lib     } </code></pre>  <p>EDIT: right now I'm using the following workaround: I removed targetsuffix and added the ".lib" extension to each referenced library.</p>