<p>I'm having an internal debate as to how I go about supporting a pre-C++11 compiler - Visual Studio 2008. This is required to build for Windows 2000 boxes (don't ask!).</p>  <p>I'm using a few C++11 features, such as std::to_string, std::mutex, and so forth. Currently, I've been able to get the low-level projects to compile by using <code>boost</code> and <code>tr1</code> like:</p>  <pre><code>#if _MSC_VER == 1500     #   include &lt;boost/thread/lock_guard.hpp&gt;         using boost::lock_guard; #   include &lt;boost/thread/mutex.hpp&gt;     using boost::mutex; #   include &lt;memory&gt;     using std::tr1::shared_ptr; #else #   include &lt;mutex&gt;     using std::lock_guard;     using std::mutex;  #   include &lt;memory&gt;     using std::shared_ptr;     using std::unique_ptr; #endif </code></pre>  <p>and changing the source to <code>shared_ptr func_name()</code> instead of <code>std::shared_ptr func_name()</code>, for example. Far from perfect, and no doubt will have some subtle internal issues to fight with soon.</p>  <p>I'm now trying to figure out <code>std::to_string</code>, which cannot be adapted to the boost version so easily (there's also probably more issues in other classes I've not encountered yet).</p>  <p>As far as I can see, I have two-ish options:</p>  <p>1) Bite the bullet and preprocessor separate all backwards-compatibility code. This will uglify and bulk the code for something that isn't going to be used 99% of the time - but will be significantly quicker to implement.</p>  <p>2) Derive from std::string, and add the missing functionality as required. Repeat for other classes/functions. This will require 'using unknown classes' to people unfamiliar with the project, as well as additional time coding to fill in these gaps, with potential for bugs, but be the cleanest solution. It could also be used for future compatibility fixes too.</p>  <p>Swapping out every type isn't a big task, but I'd like to keep raw implementation types wherever possible, especially as the code needs to run on Linux and BSDs too. I'm not doing anything crazy that would be hard to backport either (no tuples, lambdas, or other things that'd be problematic in this context).</p>  <p>Has anyone had to do something similar before and found a nice solution?</p>