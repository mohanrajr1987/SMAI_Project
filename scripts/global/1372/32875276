<p>I am writing a bash script that renames JPG files based on their EXIF tags. My original files are named like this:</p>  <pre><code>IMG_2110.JPG IMG_2112.JPG IMG_2113.JPG IMG_2114.JPG </code></pre>  <p>I need to rename them like this:</p>  <pre><code>2015-06-07_11-21-38_iPhone6Plus_USA-CA-Los_Angeles_IMG_2110.JPG 2015-06-07_11-22-41_iPhone6Plus_USA-CA-Los_Angeles_IMG_2112.JPG 2015-06-13_19-05-10_iPhone6Plus_Morocco-Fez_IMG_2113.JPG 2015-06-13_19-12-55_iPhone6Plus_Morocco-Fez_IMG_2114.JPG </code></pre>  <p>My bash script uses exiftool to parse the EXIF header and rename the files. For those files that do not contain an EXIF create date, I am using the file modification time.</p>  <pre><code>#!/bin/bash IFS=$'\n'  for i in *.*; do     MOD=`stat -f %Sm -t %Y-%m-%d_%H-%m-%S $i`     model=$( exiftool -f -s3 -"Model" "${i}" )     datetime=$( exiftool -f -s3 -"DateTimeOriginal" "${i}" )     stamp=${datetime//:/-}"_"${model// /}     echo ${stamp// /_}$i done </code></pre>  <p>I am stuck on the location. I need to determine the country and city using the GPS information from the EXIF tag. exiftool provides a field called "GPS Position." Of all the fields, this seems the most useful to determine location.</p>  <pre><code>GPS Position : 40 deg 44' 49.36" N, 73 deg 56' 28.18" W </code></pre>  <p>Google provides a public API for geolocation, but it requires latitude/longitude coordinates in this format:</p>  <pre><code>40.7470444°, -073.9411611° </code></pre>  <p>The API returns quite a bit of information (click the link to see the results):</p>  <p><a href="https://maps.googleapis.com/maps/api/geocode/json?latlng=40.7470444,-073.9411611" rel="nofollow">https://maps.googleapis.com/maps/api/geocode/json?latlng=40.7470444,-073.9411611</a></p>  <p>My question is:</p>  <ol> <li><p>How do I format the GPS Position to a latitude/longitude value that will provide acceptable input to a service such as Google geolocation?</p></li> <li><p>How do I parse the JSON results to extract just the country and city, in a way that is consistent with many different kinds of locations? Curl, and then? Ideally, I’d like to handle USA locations one way, and non-USA locations, another. USA locations would be formatted USA-STATE-City, whereas non-USA locations would be formatted COUNTRY-City.</p></li> </ol>  <p>I need to do this all in a bash script. I've looked at pygeocoder and gpsbabel but they do not seem to do the trick. There are a few free web tools available but they don't provide an API (<a href="http://www.earthpoint.us/Convert.aspx" rel="nofollow">http://www.earthpoint.us/Convert.aspx</a>).</p>