<p>I have an app that requires both bluetooth and GPS. When the app starts, I check if they are enabled and if they're not I ask the user if he wants to enable them.</p>  <p>With bluetooth this is really easy and quite nice:</p>  <pre><code>final int REQUEST_ENABLE_BLUETOOTH = 0; final int REQUEST_ENABLE_GPS = 1;  /*  * Set up bluetooth adapter.  */ BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter(); if (bluetoothAdapter == null) {     Toast.makeText(LoginActivity.this, "Your device does not support bluetooth", Toast.LENGTH_SHORT).show();     return; }  /*  * Check if bluetooth is enabled. If it's not - ask for permission to enable it.  */ if (!bluetoothAdapter.isEnabled()) {     Intent enableBluetoothIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);     startActivityForResult(enableBluetoothIntent, REQUEST_ENABLE_BLUETOOTH); }  @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) {     super.onActivityResult(requestCode, resultCode, data);      // Check if user gave permission to enable bluetooth.     if (requestCode == REQUEST_ENABLE_BLUETOOTH &amp;&amp; resultCode != RESULT_OK) {         Toast.makeText(LoginActivity.this, "This app requires bluetooth to work properly", Toast.LENGTH_SHORT).show();     }      // TODO: handle if GPS was enabled or not. } </code></pre>  <p>A dialog pops up and if the user presses "Allow", bluetooth is automatically enabled, without having to leave the app.</p>  <p>However, with GPS it's another story.<br> I've looked around and everything I find points to the same: you can ask the user if he wants to enable GPS. If the user allows it, he is taken to the location settings screen in the Settings app. He can do what he feels like doing then and upon navigating back to our app, we have to check what the user did while he was in the Settings app, and <strong>then</strong> we can continue.</p>  <p>I wanted to mimic the bluetooth dialog for consistency. This lead to considerably more code:</p>  <pre><code>// Check if GPS is enabled. If it's not - ask for permission to do so. LocationManager locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE); if (!locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {     AlertDialog.Builder alert = new AlertDialog.Builder(this)             .setMessage("An app wants to enable GPS.")             .setPositiveButton("ALLOW", new DialogInterface.OnClickListener() {                 public void onClick(DialogInterface dialog, int whichButton) {                     Intent gpsOptionsIntent = new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS);                     startActivityForResult(gpsOptionsIntent, REQUEST_ENABLE_GPS);                     // after this we still need to check if the user really enabled it.                     // this should be done in onActivityResult, same as with bluetooth                 }             })             .setNegativeButton("DENY", new DialogInterface.OnClickListener() {                 public void onClick(DialogInterface dialog, int whichButton) {                     Toast.makeText(LoginActivity.this, "This app requires GPS to work properly", Toast.LENGTH_SHORT).show();                 }             });      alert.show(); } </code></pre>  <p>Bluetooth takes about 3 lines of code, while GPS requires me to set up and configure an alertdialog manually. Why? Is there maybe an easier way?</p>  <p>I don't want to enable GPS without prompting the user first. I know that is not allowed and for what reasons.</p>