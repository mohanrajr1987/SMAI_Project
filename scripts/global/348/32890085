<p>I'm trying to develop a relatively simple program for audio data processing in <code>Python 2.7</code>.</p>  <p>My platform is a <code>Raspberry Pi 2</code> and I'm using the <code>Cirrus Logic-Wolfson element14</code> audio interface for capturing data. </p>  <p>The module I'm using to implement the recording is <code>alsaaudio</code>. </p>  <p>Below is the capture part of the program. Although I require a single channel 48kHz/24bit recording I only seem to get 2 channels interleaved 44.1kHz/16bit data. </p>  <p>According to the datasheet the audio interface is capable of doing up to 192kHz/24 recordings and I can actually see that when using <code>arecord -f S24_LE -r 48000</code> in the command line it seems to work fine (apart from the single channel part- that doesn't seem to work here either). </p>  <p>I tried running the exact same program on a Raspberry Pi B+ with the same interface and I noticed that I don't face such issues (again apart from the single channel bid). That makes me think that I'm probably missing something in R-pi 2...Maybe some library or something? </p>  <p>I've also tried editing the <code>.asoundrc</code> file and setting default 48kHz sampling rate without any luck though. Does anybody have any ideas on how to fix this? Any help would be much appreciated :)  </p>  <pre><code>import alsaaudio, numpy,  struct   # PCM Object configuration CHANNELS    = 1 #TODO I only get 2 channels interleaved  INFORMAT    = alsaaudio.PCM_FORMAT_S24_LE #TODO I only get S16_LE RATE        = 48000 #TODO I only get 44.1kHz FRAMESIZE   = 882  # Set up audio input mydevice = 'hw:0,0' PCM_recorder=alsaaudio.PCM(type=alsaaudio.PCM_CAPTURE,mode = alsaaudio.PCM_NORMAL ,device=mydevice ) PCM_recorder.setchannels(CHANNELS) PCM_recorder.setrate(RATE) PCM_recorder.setformat(INFORMAT) PCM_recorder.setperiodsize(FRAMESIZE)  while True:   [length, raw_data]=PCM_recorder.read()   if length&gt;0:     count = len(raw_data)/2     form = "%dh"%(count)     unpacked_data = numpy.array(struct.unpack(form,raw_data),dtype='l' )     rawDataBuffer = numpy.append(rawDataBuffer, unpacked_data) </code></pre>