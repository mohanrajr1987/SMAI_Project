<p>So I know that the singleton pattern is implemented like this:</p>  <pre><code>public class ClassName {     private static ClassName instance;      public static ClassName getInstance() {         if (instance == null) {             instance = new ClassName();         }         return instance;     }      private ClassName() {} } </code></pre>  <p>What I want to ask is why you couldn't just do it like this:</p>  <pre><code>public class ClassName {     public static final ClassName instance = new ClassName();     private ClassName() {} } </code></pre>  <p>Way fewer lines of code and seems to do exactly the same thing. Minus the lazy initialization of course, but I don't see why lazy initialization would be a significant benefit anyway. I'm not very experienced and would appreciate if you would enlighten me with your knowledge, thanks.</p>