<p>This is the scenario: I have an angular app that allows the users to open details about a product on a modal window. The modal has corresponding url with it (/product/:id). A requirement of the app is that the users should be able to open multiple modals of this state on top of each other - for the different products they are viewing. Ex: /product/1, /product/2... The problem that I noticed is that when I open new modal for a product, all the other previously opened modals of this state show the info for the latest opened product. For example, if I open product 1, then product 2, then product 3 and then I start closing each modal one by one, I notice that all modals show the info for the product 3.</p>  <p>Here is how I configure the routes: </p>  <pre><code>$stateProvider.state('product', {     url: '/product/:id',     onEnter: ["$modal", function ($modal) {        $modal.open({           templateUrl: '/App/product/product.html',           controller: 'ProductController',           controllerAs: 'vm'        });     }]              }); </code></pre>  <p>And here is the relevant code from the ProductController:</p>  <pre><code>angular.module('app.product')     .controller('ProductController', ProductController);  function ProductController($stateParams, ProductData){     var vm = this;      vm.productId = $stateParams.id;     vm.product = ProductData.get({productId: vm.productId}); } </code></pre>  <p>The reason for this behavior is as I suspected that each time I open the state product, the ProductController not only runs for the new product but also re-runs for all the other previously opened products. And when I logged the $stateParams object I found that in all re-runs, the parameter id equals to the latest productId that I am trying to open (3 in out example). So now I understand why all modals contents change to the latest modal content, but I don't understand why all previously opened ProductController re-run again. The only thing that comes to my mind is that this behavior is only possible if controllers were Singletons...oh but wait, they actually are singletons.</p>  <p>This basically means that I need to simulate creating multiple instances of a controller. How can I accomplish the desired behavior?</p>