<p>This doesn't work. </p>  <pre><code>var genericClickHandler = function () {     this.handlers = [];     if (console &amp;&amp; console.log) {         console.log("this:", this);         console.log("event:", event);     } };  genericClickHandler.addHandler = function (handlerSpec) {     this.handlers.push(handlerSpec);     return this; };  genericClickHandler.executeHandler = function (handlerName) {     for (var i = 0; i &lt; this.handlers.length; i++) {         if (handlerName === this.handlers[i][0]) {             this.handlers[i][1]();         }     }     return this; }; </code></pre>  <p>It doesn't work because the <code>addHandler</code> can't see the <code>this.handlers</code> in <code>genericClickHandler</code>. </p>  <p>Anyway what I'm after is function that gets defined once, but has methods and properties. I want to be able to use the function with Google Maps like this:</p>  <pre><code>heatmap.addListener("click", genericClickHandler) circle.addListener("click", genericClickHandler) polygons.addListener("click", genericClickHandler) </code></pre>  <p>So in the first instance, it only reports the <code>this</code> and <code>event</code> object. However, I then want to write code which extends the <code>genericClickHandler</code> dynamically so that it can implement map-object-specific behaviour.</p>