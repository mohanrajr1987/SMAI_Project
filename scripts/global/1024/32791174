<p>In my iOS app, many ViewControllers will need to send/receive data from a server based on user input and actions.  I am going to use NSURLSession for all my networking activities.  But I don't want to make every ViewController conform to the NSURLSession delegate  protocol and repeat all the methods.</p>  <p>I see two solutions</p>  <ul> <li><p>Create a class that conforms to the NSURLSession delegate protocol.  Other classes create an instance of this class and use its methods to send/receive data from the server.  The reuse of the class handling all the networking will be done using singleton design pattern by overloading its init method so that only instance of it is created.</p>  <ul> <li>Disadvantage of this approach seems to be that having singletons make its tough to create unit tests that completely gets functionality of each class isolated form others. I.e.Suppose an error only happens because viewcontroler1 asked "shared class" to send a particular message followed viewcontroller 2 asked it send some other message.  Then it is not possible to catch this using unit tests.  </li> </ul></li> <li><p>Subclass of the UIViewController that implements the methods and subclass my ViewControllers of of this.  </p>  <ul> <li>One issue here is that if I have different kinds of views in app, then I need to create subclass for each type of ViewController with NSURL session delegate methods.  And I have to carefully assign the delegate object from method to method.  When I look at it, I think this approach also has the same unit-testing problem as approach 1.</li> </ul></li> </ul>  <p>I would appreciate any comments on 1. Approaches others have used in similar situation 2. Pros/cons of above approaches (including the 2 I have listed above).  I realize this may be a bit subjective, but IMHO getting good advice on design patterns is as important as (or even more important than) answers to what is wrong with my code or which API to use to solve problem X</p>