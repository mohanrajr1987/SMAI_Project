<h2>Background</h2>  <p>First of all, I think this question goes beyond the C++ standard. The standard deals with multiple translation units (instantiation units) and thus multiple object modules, but does not seem to acknowledge the possibility of having multiple independently compiled and linked binary modules (i.e., <code>.so</code> files on Linux and <code>.dll</code> files on Windows). After all, the latter more of less enters into the world of <a href="https://en.wikipedia.org/wiki/Application_binary_interface" rel="nofollow">application binary interface (ABI)</a> that the standard leaves to implementations to consider at present.</p>  <p>When only a single binary module is involved, the following code snippet illustrates an elegant and portable (standard-compliant) solution to make singletons.</p>  <pre><code>inline T&amp; get() {   static T var{};   return var; } </code></pre>  <p>There are two things to note about this solution. First, the <code>inline</code> specifier makes the function a candidate to be included in multiple translation units, which is very convenient. Note that, the standard guarantees there is only a single instance of <code>get()</code> and the local static variable <code>var</code> in the final binary module (see <a href="http://en.cppreference.com/w/cpp/language/inline" rel="nofollow">here</a>).</p>  <p>The second thing to note is that since C++11, initialization of static local variables is properly synchronized (see the <strong>Static local variables</strong> section <a href="http://en.cppreference.com/w/cpp/language/storage_duration" rel="nofollow">here</a>). So, concurrent invocations of <code>get()</code> is fine.</p>  <p>Now, I try to extend this solution to the case when multiple binary modules are involved. I find the following variant works with VC++ on Windows.</p>  <pre><code>// dllexport is used in building the library module, and // dllimport is used in using the library in an application module. // Usually controlled by a macro switch. __declspec(dllexport/dllimport) inline T&amp; get() {   static T var{};   return var; } </code></pre>  <p><strong>Note for non-Windows users:</strong> <code>__declspec(dllexport)</code> specifies that an entity (i.e., a function, a class or an object) is implemented (defined) in this module and is to be referenced by other modules. <code>__declspec(dllimport)</code>, on the other hand, specifies that an entity is not implemented in this module and is to be found in some other module.</p>  <p>Since VC++ supports exporting and importing template instantiations (see <a href="https://support.microsoft.com/en-us/kb/168958" rel="nofollow">here</a>), the above solution can even be templated. For example:</p>  <pre><code>template &lt;typename T&gt; inline T&amp; get() {   static T var{};   return var; }  // EXTERN is defined to be empty in building the library module, and  // to `extern` in using the library module in an application module. // Again, this is usually controlled by a macro switch. EXTERN template __declspec(dllexport/dllimport) int&amp; get&lt;int&gt;(); </code></pre>  <p>As a side note, the <code>inline</code> specifier is not mandatory here. See <a href="http://stackoverflow.com/questions/32879038/identity-of-function-template-instantiation-in-multiple-translation-units">this</a> S.O. question.</p>  <h2>The Question</h2>  <p>Since there is no <code>__declspec(dllexport/import)</code> equivalents in GCC and clang, is there a way to make a variant of the above solution that works on these two compilers?</p>  <p>Also, in Boost.Log, I noticed the <code>BOOST_LOG_INLINE_GLOBAL_LOGGER_DEFAULT</code> macro (see the <strong>Global logger objects</strong> section <a href="http://www.boost.org/doc/libs/1_59_0/libs/log/doc/html/log/tutorial/sources.html" rel="nofollow">here</a>). It is claimed to create singletons <em>even if the application consists of multiple modules</em>. If someone knows about the inner workings of this macro, explanations are welcome here.</p>  <p>Finally, if you know about any better solutions for making singletons, feel free to post it as an answer.</p>