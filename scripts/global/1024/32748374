<p>I have made a simple libwebsockets server according to this link: <a href="http://ahoj.io/libwebsockets-simple-websocket-server" rel="nofollow">http://ahoj.io/libwebsockets-simple-websocket-server</a>. The name of the server module is <code>WebsocketInterface</code>.</p>  <p>Outside this server interface, in the same application, I have a class <code>DataHandler</code>, which needs to read some user-submitted information from the <code>WebsocketInterface</code> to control itself.</p>  <p>Inside the <code>WebsocketInterface</code> I can read the user input from <code>void* in</code> in the block <code>case LWS_CALLBACK_RECEIVE:</code> and it works fine.</p>  <p>My question is that what could be a proper and effective way to deliver this data to the class DataHandler?</p>  <p>My current solution is to use a singleton class, let's call it <code>WebsocketMessenger</code>. This class is included and instantiated by both modules, <code>WebsocketInteface</code> and <code>DataHandler</code> class. The <code>WebsocketMessenger</code> has a buffer where the <code>WebsocketInterface</code> writes the user input and where the <code>DataHandler</code> can read it from.</p>  <p>This singleton-based solution works in the way I want it to. However, I'm curious if there are other design patterns applicable to this situation. What would be your solution?</p>