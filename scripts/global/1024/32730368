<p>The following code is part of the WP8.1 project template file</p>  <ul> <li><p>Clearly using the singleton pattern, but why it is not privatization of the constructor?</p></li> <li><p>Why some places use a singleton (<code>_sampleDataSource.xxx</code>), and in some places used by instance (<code>this.xxx</code>)? Since it is a singleton pattern, why not use (<code>_sampleDataSource.xxx</code>)?</p>  <pre><code>public sealed class SampleDataSource {     private static SampleDataSource _sampleDataSource = new SampleDataSource();      private ObservableCollection&lt;SampleDataGroup&gt; _groups = new ObservableCollection&lt;SampleDataGroup&gt;();     public ObservableCollection&lt;SampleDataGroup&gt; Groups     {         get { return this._groups; }     }      public static async Task&lt;IEnumerable&lt;SampleDataGroup&gt;&gt; GetGroupsAsync()     {         await _sampleDataSource.GetSampleDataAsync();          return _sampleDataSource.Groups;     }      public static async Task&lt;SampleDataGroup&gt; GetGroupAsync(string uniqueId)     {         await _sampleDataSource.GetSampleDataAsync();         // 对于小型数据集可接受简单线性搜索         var matches = _sampleDataSource.Groups.Where((group) =&gt; group.UniqueId.Equals(uniqueId));         if (matches.Count() == 1) return matches.First();         return null;     }      public static async Task&lt;SampleDataItem&gt; GetItemAsync(string uniqueId)     {         await _sampleDataSource.GetSampleDataAsync();         // 对于小型数据集可接受简单线性搜索         var matches = _sampleDataSource.Groups.SelectMany(group =&gt; group.Items).Where((item) =&gt; item.UniqueId.Equals(uniqueId));         if (matches.Count() == 1) return matches.First();         return null;     }      private async Task GetSampleDataAsync()     {         if (this._groups.Count != 0)         return;          Uri dataUri = new Uri("ms-appx:///DataModel/SampleData.json");          StorageFile file = await StorageFile.GetFileFromApplicationUriAsync(dataUri);         string jsonText = await FileIO.ReadTextAsync(file);         JsonObject jsonObject = JsonObject.Parse(jsonText);         JsonArray jsonArray = jsonObject["Groups"].GetArray();          foreach (JsonValue groupValue in jsonArray)         {             JsonObject groupObject = groupValue.GetObject();             SampleDataGroup group = new SampleDataGroup(groupObject["UniqueId"].GetString(),                                                     groupObject["Title"].GetString(),                                                     groupObject["Subtitle"].GetString(),                                                     groupObject["ImagePath"].GetString(),                                                     groupObject["Description"].GetString());              foreach (JsonValue itemValue in groupObject["Items"].GetArray())             {                 JsonObject itemObject = itemValue.GetObject();                 group.Items.Add(new SampleDataItem(itemObject["UniqueId"].GetString(),                                                itemObject["Title"].GetString(),                                                itemObject["Subtitle"].GetString(),                                                itemObject["ImagePath"].GetString(),                                                itemObject["Description"].GetString(),                                                itemObject["Content"].GetString()));         }         this.Groups.Add(group);     } } </code></pre>  <p>}</p></li> </ul>