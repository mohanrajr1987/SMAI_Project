<p>my code below is not comiling for the singleton pattern </p>  <p>(error LNK2019: unresolved external symbol "private: __thiscall Singleton::Singleton(void)" (??0Singleton@@AAE@XZ) referenced in function "public: static class Singleton * __cdecl Singleton::returnOneInstance(void)" (?returnOneInstance@Singleton@@SAPAV1@XZ))</p>  <p>can anyone help? i also want to know how one must manage the memory? thanks</p>  <pre><code>#include &lt;iostream&gt; #include &lt;string&gt; #include &lt;vector&gt; #include &lt;algorithm&gt; #include &lt;iterator&gt;  using namespace std;  class Singleton { private:     Singleton();     Singleton(const Singleton&amp; sing);     void operator=(const Singleton&amp; sing);     static Singleton* singleton;     /*The 'instance' field holds the reference of the one and only instance.       It is stored in a static variable because its scope has to be the class itself and not a particular instance.     */ public:     static Singleton* returnOneInstance();     void printme() const; };  Singleton* Singleton::singleton=NULL; Singleton* Singleton::returnOneInstance(){     if (!singleton){         singleton=new Singleton;     }     return singleton; };  void Singleton::printme()const {     cout &lt;&lt; "I'm the Singleton" &lt;&lt; endl; }  int main()  {     Singleton* m=Singleton::returnOneInstance();     m-&gt;printme();      system("PAUSE");     return 0; } </code></pre>