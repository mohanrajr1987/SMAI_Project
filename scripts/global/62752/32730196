<p>I have a C# Windows Store app with a streamsocket listener running in a task waiting for commands to come in over the network. I need to make sure each command is fully processed before doing the next one.</p>  <p>The listener takes a raw message and does</p>  <pre><code>await ProcessMessage(message); </code></pre>  <p>which is</p>  <pre><code>private async Task ProcessMessage(string message, string optionalFlags = "") </code></pre>  <p>Which parses the message and calls one of many methods, i.e.</p>  <pre><code>ProcessCommandXYZ(parameters); </code></pre>  <p>This seems to work, but in the async task ProcessMessage line I get a CS1998 "async method lacks 'await'" warning, and searching says if you get this message you're probably not using async correctly.</p>  <p>Is my approach correct and can I ignore this warning, or is there a better way to do this? </p>  <p><b><em>Update</em></b></p>  <p>I realize a lot of my problem is one of the methods is updating the state which is bound to a listview, so it's in a UI dispatcher and makes it get out of sync and I was awaiting it's ProcessCommandABC(). Since it's just the one method I believe I can optimize if that's best and don't await the one method?</p>