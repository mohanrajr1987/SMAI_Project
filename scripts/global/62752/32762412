<p>Just wondering the best approach when it comes to async. At first my code looked like this (example is simplified).</p>  <pre><code>public NotificationSummary SendNotification() {       var response = new NotificationSummary();       var first = FindSubscriptions(1);       ...        var seventh = FindSubscriptions(7);        Task.WaitAll(first, ... , seventh);        response.First = first.Result;       ...       response.Seventh = seventh.Result;       return response; }   private Task&lt;NotificationResult&gt; FindSubscriptions(int day) {      return Task.Run(() =&gt;       {         var subscriptions = // call to database to get list of subscriptions         var tasks = subscriptions.Select(x =&gt;  SendOutNotification(x))         var results = Task.WhenAll(tasks).Result.ToList();         return // map results to NotificationResult      } }   private Task&lt;IndividualResult&gt; SendOutNotification(Subscription subscription) {     return Task.Run(() =&gt;      {        var response = new IndividualResult();        foreach(var user in subscription.Users)        {             try             {                  // Send user info to EMAIL API                  response.Worked.Add(user);             }             catch(Exception ex) { response.Failed.Add(user)}        }         return response;     } } </code></pre>  <p>But this approach is violating single responsibility and it might be confusing to other developers when they come try figure out what this code is doing. I was trying to find a way to chain together the tasks and I came across ContinueWith. I have done some research (aka looked at other stackoverflow posts) and I get mixed reviews on ContinueWith. I would really like my SendNotification method to look like this, but I don't know if this is a good approach when it comes to async and tasking.</p>  <pre><code>public NotificationSummary SendNotification() {     var response = new NotificationSummary();     var firstTasks = new List&lt;IndivdualResult&gt;();     var first = FindSubscriptions(1).ContinueWith( x=&gt;                   x.Result.ForEach(r =&gt;                     firstTasks.Add(SendOutNotification(x).Result)));    response.First = // map first;     // do 2 - 7 tasks as well     return response; }  private Task&lt;List&lt;Subscription&gt;&gt; FindSubscriptions() {} //returns subscriptions  private Task&lt;IndividualResults&gt; SendOutNotication() {} // same as above </code></pre>  <p>I am wondering which one of these approaches would be considered the "right way" if either?</p>