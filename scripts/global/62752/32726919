<p>I have an application which performs the following:</p>  <ol> <li><p>Initialises a connected Webcam</p>  <pre><code>private async Task&lt;MediaCapture&gt; InitialiseWebCam() {     MediaCapture webCam = null;     webCam = new MediaCapture();      try     {         await webCam.InitializeAsync();     }     catch (Exception ex)     {         //Log error     }      return webCam; } </code></pre></li> <li><p>Takes an image</p>  <pre><code>private async Task&lt;StorageFile&gt; TakePicture(MediaCapture webCam) {     try     {         var image = await KnownFolders.PicturesLibrary.CreateFileAsync("TestImage.jpg", CreationCollisionOption.GenerateUniqueName);          var imageEncodingProperties = ImageEncodingProperties.CreatePng();         await webCam.CapturePhotoToStorageFileAsync(imageEncodingProperties, image);          return image;     }     catch (Exception ex)     {         //Log error     }     return null; } </code></pre></li> <li><p>Uploads image to Azure Blob Storage</p>  <pre><code>private async Task&lt;StorageFile&gt; UploadPictureToAzure(StorageFile image) { string Azure_StorageAccountName = "MYACCOUNTNAME"; string Azure_ContainerName = "MYCONTAINERNAME"; string Azure_AccessKey = "MYACCESSKEY";      try     {         StorageCredentials creds = new StorageCredentials(Azure_StorageAccountName, Azure_AccessKey);         CloudStorageAccount account = new CloudStorageAccount(creds, useHttps: true);         CloudBlobClient client = account.CreateCloudBlobClient();         CloudBlobContainer sampleContainer = client.GetContainerReference(Azure_ContainerName);          CloudBlockBlob blob = sampleContainer.GetBlockBlobReference(image.Name);          await blob.UploadFromFileAsync(image);          return image;     }     catch (Exception ex)     {         //Log     }      return image; } </code></pre></li> </ol>  <p>The three methods are invoked as below:</p>  <pre><code>public void Run(IBackgroundTaskInstance taskInstance) {     Monitor(); }  private void Monitor() {     var webCam = InitialiseWebCam().Result;     var image = TakePicture(webCam).Result;      var output = UploadPictureToAzure(image).Result; } </code></pre>  <p>At this point all is well and the image appears in my blob storage. I wanted this behaviour to run as a headless background application on Windows IoT, so I made the following adjustment:</p>  <pre><code>public void Run(IBackgroundTaskInstance taskInstance) {     taskInstance.GetDeferral();      timer = ThreadPoolTimer.CreatePeriodicTimer(Timer_Tick, TimeSpan.FromSeconds(60)); }  private void Timer_Tick(ThreadPoolTimer threadPoolTimer) {     Monitor(); } </code></pre>  <p>With those changes in place the Monitor function is triggered as expected, however the output of <code>UploadPictureToAzure(image).Result</code> is null even though <strong>webCam</strong> and <strong>image</strong> are working as intended, and the application exits abruptly.</p>  <p>What is the reason for the behaviour above? I was expecting the image to be uploaded and the overall process continue to occur within the timer loop created.</p>  <p><strong>EDIT:</strong></p>  <p>I attempted to force synchronous behavior by adjusting my UploadPictureToAzure like so:</p>  <pre><code>private void UploadPictureToAzure(StorageFile image) {     string Azure_StorageAccountName = "ACCOUNTNAME";     string Azure_ContainerName = "CONTAINERNAME";     string Azure_AccessKey = "ACCESSKEY";      try     {          StorageCredentials creds = new StorageCredentials(Azure_StorageAccountName, Azure_AccessKey);          CloudStorageAccount account = new CloudStorageAccount(creds, useHttps: true);          CloudBlobClient client = account.CreateCloudBlobClient();          CloudBlobContainer sampleContainer = client.GetContainerReference(Azure_ContainerName);           CloudBlockBlob blob = sampleContainer.GetBlockBlobReference(image.Name);           var response = blob.UploadFromFileAsync(image);          response.AsTask().Wait();      }      catch (Exception ex)      {          //Log      } } </code></pre>  <p>Now even with the call to <strong>.Wait()</strong>, execution returns immediately and the application exits.</p>  <p>If I remove usage of the <strong>ThreadPoolTimer.CreatePeriodicTimer</strong>, and replace it with a while loop then images upload without issue.</p>