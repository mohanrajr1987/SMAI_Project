<p>The <code>async</code> keyword <em>do</em> cause the <a href="http://en.wikipedia.org/wiki/Common_Intermediate_Language" rel="nofollow">CIL</a> to change (even if there's no await inside the method), but it is primarily to allow <code>await</code> to be present.</p>  <p>But I did not expect the following to happen:</p>  <pre><code>static void Main(string[] args) {     Task t = Go();     t.Wait(); }  static async Task Go() {     Console.WriteLine(1);     await AAA(3000);     Console.WriteLine(2); }   static  Task&lt;object&gt; AAA(int a) // &lt;--- No `async` {     TaskCompletionSource&lt;object&gt; tcs = new TaskCompletionSource&lt;object&gt;();     Task.Delay(a).ContinueWith(b =&gt; tcs.SetResult(null));     return tcs.Task; } </code></pre>  <p>This print:</p>  <pre><code>1 (wait) 2 </code></pre>  <p>But if I change  </p>  <pre><code>static  Task&lt;object&gt; AAA(int a)  </code></pre>  <p>to</p>  <pre><code>static async  Task&lt;object&gt; AAA(int a)  </code></pre>  <p>It prints:</p>  <pre><code>1 2 (no wait) </code></pre>  <p><strong>Question</strong></p>  <p>Why don't I see the delay? The TCS is only resolved after three seconds. Meanwhile, the task is not resolved and should be awaited.</p>