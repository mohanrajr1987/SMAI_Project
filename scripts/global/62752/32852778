<p>FYI: This will be my first real foray into Async/Await; for too long I've been settling for the familiar territory of BackgroundWorker. It's time to move on.</p>  <p>I wish to build a WCF service, self-hosted in a Windows service running on a remote machine in the same LAN, that does this:</p>  <ol> <li>Accepts a request for a single .ZIP archive</li> <li>Creates the archive and packages several files</li> <li>Returns the archive as its response to the request</li> </ol>  <p>I have to support archives as large as 10GB. Needless to say, this scenario isn't covered by basic WCF designs; we must take additional steps to meet the requirement. We must eliminate timeouts while the archive is building and memory errors while it's being sent. Both of these occur under basic WCF designs, depending on the size of the file returned.</p>  <p>My plan is to proceed using <a href="http://www.codeguru.com/imagesvr_ce/1145/Async-WCF-Services-image001.jpg" rel="nofollow">task-based asynchronous WCF calls</a> and <a href="http://www.codeproject.com/Articles/166763/WCF-Streaming-Upload-Download-Files-Over-HTTP" rel="nofollow">streaming mode</a>.</p>  <p>I have two concerns:</p>  <ol> <li>Is this the proper approach to the problem?</li> <li>Microsoft has done a nice job at abstracting all of this, but what of the underlying protocols? What goes on 'under the hood?' Does the server keep the connection alive while the archive is building (could be several minutes) or instead does it close the connection and initiate a new one once the operation is complete, thereby requiring me to properly route the request through the client machine firewall?</li> </ol>  <p>For #2, clearly I'm hoping for the former (keep-alive). But after some searching I'm not easily finding an answer. Perhaps you know.</p>