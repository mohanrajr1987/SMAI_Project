<p>I tested from a WinForm since I heard Console apps lie about <code>async</code> stuff :</p>  <pre><code>List&lt;string&gt; lstFiles = new List&lt;string&gt;();          lstFiles = FillList();   // File list with all files to Process                 List&lt;PSObject&gt; lstRetVals = new List&lt;PSObject&gt;();  try {     foreach (string strFullFile in lstFiles)     { lstRetVals.AddRange(clsOne.TestFifteen(strFullFile)); } } catch (Exception ex) {throw ex ;} </code></pre>  <p>This intermediary method is basically just here because I was testing proper use of await. It appears that not using await and blocking is best for my use..</p>  <pre><code>        //public async Task&lt;int&gt; TestFifteen(string  pStrFullFilePathFileNm)         // as you see from this previous Signature       public List&lt;PSObject&gt; TestFifteen(string pStrFullFilePathFileNm)                 {                  int iRetVal = -99;         Task&lt;PSDataCollection&lt;PSObject&gt;&gt; tRetval = null;         List&lt;PSObject&gt; lstPsObjs = null;         try         {             tRetval = TestFifteenSub(pStrFullFilePathFileNm);             lstPsObjs = tRetval.Result.ToList();         }         catch (Exception zz)         { throw zz; }          //  Debug.WriteLine("Is this OK");          foreach (PSObject psobj in tRetval.Result)         {             iRetVal = tRetval.Result.Count;             // return  Task&lt;PSDataCollection&lt;PSObject&gt;&gt;  or            }         //return iRetVal;         return lstPsObjs;     } </code></pre>  <p>And finally the area of concern : ----Task.Factory.FromAsync----  I have to use this as there is no TAP implementation for the Powershell API yet.. So is this line actually Async? ACTUALLY STARTING a new thread? </p>  <pre><code>public Task&lt;PSDataCollection&lt;PSObject&gt;&gt; TestFifteenSub(string p_scriptText)     {         //var tcs = new TaskCompletionSource&lt;int&gt;();         PowerShell ps = PowerShell.Create();         ps.AddScript(p_scriptText);         Task&lt;PSDataCollection&lt;PSObject&gt;&gt; plpl;         PSDataCollection&lt;PSObject&gt; psDtaColOfpsDtaObjs = null;         List&lt;PSObject&gt; lstPSObjs = null;          try         {             plpl = Task.Factory.FromAsync(ps.BeginInvoke(), pResult =&gt; ps.EndInvoke(pResult)); //  BLOCKS here No await Keyword so it waits for this call to complete             //await taskQue;                     psDtaColOfpsDtaObjs = plpl.Result;             lstPSObjs = plpl.Result.ToList();             //  lstPSObjs = convertedObject.ToList();         }          catch (Exception vv)         { throw vv; }          // return plpl.Result;                    return plpl;      } </code></pre>