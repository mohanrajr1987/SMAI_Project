<p>This question is similar to <a href="http://stackoverflow.com/questions/16552539/set-thread-currentprincipal-asynchronously">Set Thread.CurrentPrincipal Asynchronously?</a>. However, in my case I am trying to get this to work in <strong>unit-tests</strong>, and hope to solve this with a custom SynchronizationContext.</p>  <p>Is there a SynchronizationContext that behaves similar to the one used by ASP.NET, but that can be used by unit-tests? (My code works perfectly fine in ASP.NET.)</p>  <p>In particular, it's the feature of the AspNetSynchronizationContext that enables a principal to "buble" out of async methods that I want.</p>  <p>When the method SetCurrentPrincipalAsync (bellow) is called in an asp.net application/context, the Thread.CurrentPrincipal will not be overwritten by the calling method. - But when the test is run, it will fail.</p>    <pre class="lang-cs prettyprint-override"><code>[Fact] public async Task SetSynchronizationContext() {     //SynchronizationContext.SetSynchronizationContext(new SomeCustomSynchronizationContext());     await SetCurrentPrincipalAsync();     Assert.Equal("Name", Thread.CurrentPrincipal.Identity.Name); }  static async Task SetCurrentPrincipalAsync() {     var principal = new GenericPrincipal(new GenericIdentity("Name"), new []{"Role"});     Thread.CurrentPrincipal = principal;     if (HttpContext.Current != null)         HttpContext.Current.User = principal;     await Task.Delay(TimeSpan.FromSeconds(1)); } </code></pre>