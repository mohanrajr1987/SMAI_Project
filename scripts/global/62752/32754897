<p>I have this class with two public async methods, which also calls some private methods that are async.</p>  <p><strong>Here's the class:</strong></p>  <pre><code>public class AggregatedDataService { public async Task&lt;OrganizationAggregatedInfo&gt; GetOrganizationAggregatedInfo(int organizationId) {     var organization = await GetOrganization(organizationId);     var organizationContact = await GetOrganizationContact(organization.ID);     var associations = await GetOrganizationAssociations(organization.ID);      //await Task.WhenAll(organizationContact, associations);     return new OrganizationAggregatedInfo(organization.Name, organization.Address, organizationContact,         associations); }  public async Task&lt;SchoolAggregatedInfo&gt; GetSchoolAggreagtedInfo(int schoolId) {     if(schoolId &lt; 1)         return null;      var school = await GetSchool(schoolId);     if (school == null)     {         return null;     }     var getSchoolAddressTask = GetSchoolAddress(schoolId);      var getMemberSchoolsTask = GetMemberSchools(schoolId);     var getSchoolCurriculumTask = GetSchoolCurriculum(schoolId);     var getSchoolFacilitiesTask = GetSchoolFacilities(schoolId);     var getSchoolAssociationsTask = GetSchoolAssociations(schoolId);     var getSchoolAcreditationsTask = GetSchoolAcreditations(schoolId);     var getGovernanceStructureTask = GetGovernanceStructure(schoolId);      await Task.WhenAll(getSchoolAddressTask, getMemberSchoolsTask, getSchoolCurriculumTask,             getSchoolFacilitiesTask, getSchoolAssociationsTask, getSchoolAcreditationsTask,             getGovernanceStructureTask);      var schoolAddress = getSchoolAddressTask.Result;     var memberSchools = getMemberSchoolsTask.Result;      var teacherInfo = await GetTeacherInformation(schoolAddress.SchoolID);     var curriculum = getSchoolCurriculumTask.Result;     var facilities = getSchoolFacilitiesTask.Result;     var associations = getSchoolAssociationsTask.Result;     var accreditations = getSchoolAcreditationsTask.Result;     var studentInfo = await GetStudentInformation(schoolAddress.SchoolID);     var governanceStructure = getGovernanceStructureTask.Result;       SchoolContactReadView contact = null;      if (schoolAddress != null)//TODO: consider using null propagation     {         if (schoolAddress.SchoolContact != null)             contact = SchoolContactReadView.ShowSchoolContactView(schoolAddress.SchoolContact);     }      var schoolAggregateInfo = new SchoolAggregatedInfo     {         Name = school.Name,         Address = school.Address,         MemberSchoolsCount = memberSchools.Count(),         GovernanceStructure = governanceStructure,         Accreditations = accreditations.ToList(),         Associations = associations.ToList(),         Contact = contact,         Curriculum = curriculum,         Facilities = facilities.ToList()     };      return schoolAggregateInfo; }  private async Task&lt;List&lt;OrganizationAssociationReadView&gt;&gt; GetOrganizationAssociations(int organizationId) {     HttpResponseMessage response = await client.GetAsync("api/organization/associations/" + organizationId);     if (response.StatusCode == HttpStatusCode.OK)     {         var contentResult = await response.Content.ReadAsAsync&lt;List&lt;OrganizationAssociation&gt;&gt;();         associations = contentResult.Select(OrganizationAssociationReadView.MapFrom).ToList();     }     else     {         _log.Error("API Error Reason: " + response.ReasonPhrase);     } }  private async Task&lt;OrganizationContactReadView&gt; GetOrganizationContact(int organizationId) {     HttpResponseMessage response = await client.GetAsync("api/organization/contact/" + organizationId);     if (response.StatusCode == HttpStatusCode.OK)     {         var contentResult = await response.Content.ReadAsAsync&lt;OrganizationContact&gt;();         var organizationContactReadView = OrganizationContactReadView.MapFrom(contentResult);          organizationContact = organizationContactReadView;     }     else     {         _log.Error("API Error Reason: " + response.ReasonPhrase);     } }  private async Task&lt;OrganizationReadView&gt; GetOrganization(int organizationId) {     same as the other other methods.... }  private async Task&lt;GovernanceStructureReadView&gt; GetGovernanceStructure(int schoolId) {     .... }  private async Task&lt;IEnumerable&lt;AccreditationReadView&gt;&gt;  GetSchoolAcreditations(int schoolId) {     .... }  .... all other method ....           } </code></pre>  <p>and I also consume this method e.g</p>  <pre><code>var obj = await GetSchoolAggreagtedInfo(21).ConfigureAwait(false); </code></pre>  <p>I feel like I have too much <code>async</code> methods and which I'm afraid may cause more harm than good.</p>  <p>Is there a better way of doing all this async stuff (maybe a pattern), or is the code OK?</p>