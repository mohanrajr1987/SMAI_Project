<p>I'm building an <code>async</code> Web Api and after reading some articles about <code>async</code>/<code>await</code> I think I'm doing something wrong.</p>  <p>this is my actual code:</p>  <pre><code>public async Task&lt;IHttpActionResult&gt; GetAccount(int id) {     var i = await GetInstanceIdAsync(User, _db); //grabs a thread     ... }  public async static Task&lt;int&gt; GetInstanceIdAsync(IPrincipal user, Entities db) {     var userManager =           new UserManager&lt;ControliUser&gt;(new UserStore&lt;ControliUser&gt;(db));     //next line grabs another thread but since it was called from an await     //it holds 2 threads, am I correct?     var u = await userManager.FindByNameAsync(user.Identity.Name);     return u == null ? 0 : u.InstanceId ?? 0; } </code></pre>  <p><strong>So my first question is, Is this consuming 2 threads?</strong></p>  <p>If the answer is yes, then I made this extension method to prevent that.</p>  <pre><code>public static Task&lt;int?&gt; InstanceIdAsync(this Entities db, IPrincipal user) {     var userManager = new UserManager&lt;ControliUser&gt;(new UserStore&lt;ControliUser&gt;(db));     return userManager.FindByNameAsync(user.Identity.Name).ContinueWith(t =&gt;     {         if (t.IsCompleted &amp;&amp; t.Result != null)             return t.Result.InstanceId;         return null;     }); } </code></pre>  <p>I think this method will only consume 1 thread and reduce overhead since it saves an <code>async</code> method</p>  <p><strong>Am I correct?</strong></p>