<p>I need to increase a counter from multiple threads (async methods) in C#. </p>  <ul> <li>I cannot pass a ref parameter because it's an async method</li> <li>I cannot just update the value (or lock on it) because it's a value type</li> <li>I cannot use Interlocked because I can't put a ref to the counter in the async method</li> </ul>  <p>So the only thing I'm coming up with is to make something silly like a <code>List&lt;int&gt;</code> and put my <code>int</code> in there so threads can lock on the List and update the value.</p>  <p>I'm hoping that's a known use case and there's a more elegant way of doing it?</p>  <p>Here's a small example, never mind small syntax issues:</p>  <pre><code>public void DoStuff() {     int counter;     var tasks = new List&lt;Task&gt;()     for(int i = 0; i &lt; 10; i++)     {         tasks.Add(AsyncMethod(&lt;SOMETHING&gt;));     }     Task.WaitAll(tasks);     Console.WriteLine("Total: {0}", counter);  }   public async Task AsyncMethod(&lt;SOMETHING&gt;)  {      // Lock if needed by &lt;SOMETHING&gt;      &lt;SOMETHING&gt;+=20;  } </code></pre>  <p>Do I need to create a class with an <code>int</code> field, or does C# provide something off-the-box? I'm not stuck on this, just trying to learn in hindsight if there was a better way. Thanks!</p>  <p>FOR FUTURE VISITORS: The consensus seems to be to create a custom class such as <code>class IntHolder { public int Value {get;set;}}</code> that can be passed by reference and locked on (or use Interlocked on)</p>  <p>Thanks a lot all!</p>