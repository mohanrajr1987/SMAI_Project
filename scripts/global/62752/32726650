<p>This has always driven me crazy and I still cant get my head around it. In the code below, the if statement is flagged by the editor saying that the "expression is always true"</p>  <pre><code> public Task ConfigSendMailAsync(IdentityMessage message)     {          const string usertoken = "Sent";         var mailMessage = new MailMessage();         mailMessage.To.Add(new MailAddress(message.Destination));         mailMessage.From = new MailAddress("service@tradertoolkit.com");         mailMessage.Subject = message.Subject;         mailMessage.Body = message.Body;           var credentials = new NetworkCredential(                    ConfigurationManager.AppSettings["mailAccount"],                    ConfigurationManager.AppSettings["mailPassword"]                    );           var mailClient = new SmtpClient {Credentials = credentials};          ***if (mailClient != null)***         {             mailClient.SendAsync(mailMessage, usertoken);             return Task.FromResult(0);         }          else         {             //log error             return Task.FromResult(-1);         }     } </code></pre>  <p>How is it always true, what if the message that was passed was invalid, what if there was a failure creating the credentials, etc. etc. Certainly something COULD make that if statement true. I get that if anything failed prior, I'd get an exception. If I wanted to ensure the credential was valid, Id certainly test for that.</p>  <pre><code> if (credentials != null)         {          } </code></pre>  <p>But guess what, apparently thats always true as well. How can that be, what if there was nothing stored in those app settings? Can someone explain how this actually works and how best to structure this code </p>