<p><strong>If a method is marked as async, does that come with any guarantees?</strong></p>  <p><strong>If not, what are the best practices for calling async methods to ensure non-blocking behaviour? (especially when calling a third-party library)</strong></p>  <hr>  <p>Longer version:</p>  <p>Until now, I assumed that awaiting an async method is guaranteed not to block the thread (if implemented correctly). However, I recently had <a href="http://stackoverflow.com/q/32835391/905884">this situation</a> (also happened to <a href="http://stackoverflow.com/q/28675265/905884">others</a>). In this instance, the (non)blocking behaviour depends on the EF provider. Since the UI layer shouldn't really know or care about the DB provider implementation details, I suppose it makes sense to wrap all calls in Task.Run to ensure non-blocking bahaviour. But then I don't need async anywhere except the UI layer which makes me question the philosophy of having async all the way through.</p>