<p>Why does running a hundred async tasks take longer than running a hundred threads?</p>  <p>I have the following test class:</p>  <pre><code>public class AsyncTests {      public void TestMethod1()     {         var tasks = new List&lt;Task&gt;();          for (var i = 0; i &lt; 100; i++)         {             var task = new Task(Action);             tasks.Add(task);             task.Start();         }          Task.WaitAll(tasks.ToArray());                 }       public void TestMethod2()     {         var threads = new List&lt;Thread&gt;();          for (var i = 0; i &lt; 100; i++)         {             var thread = new Thread(Action);             threads.Add(thread);             thread.Start();         }          foreach (var thread in threads)         {             thread.Join();         }     }      private void Action()     {         var task1 = LongRunningOperationAsync();         var task2 = LongRunningOperationAsync();         var task3 = LongRunningOperationAsync();         var task4 = LongRunningOperationAsync();         var task5 = LongRunningOperationAsync();          Task[] tasks = {task1, task2, task3, task4, task5};         Task.WaitAll(tasks);     }      public async Task&lt;int&gt; LongRunningOperationAsync()     {         var sw = Stopwatch.StartNew();          await Task.Delay(500);          Debug.WriteLine("Completed at {0}, took {1}ms", DateTime.Now, sw.Elapsed.TotalMilliseconds);          return 1;     } } </code></pre>  <p>As far as can tell, <code>TestMethod1</code> and <code>TestMethod2</code> should do exactly the same. One uses TPL, two uses plain vanilla threads. One takes 1:30 minutes, two takes 0.54 seconds.</p>  <p>Why?</p>