<p>There are tons of examples of how to wait for a thread to exit, but sometimes i need to wait just until several threads are "ready" or have reached certain milestone.</p>  <p>After reading: <a href="http://stackoverflow.com/questions/15770538/whats-the-proper-way-to-wait-for-a-net-thread-to-start-up">What&#39;s the proper way to wait for a .NET thread to start up?</a></p>  <p>and  <a href="http://www.albahari.com/threading/" rel="nofollow">http://www.albahari.com/threading/</a></p>  <p>If i have understood correctly:</p>  <p>Wait for one Child Task to be <strong>ready</strong>:</p>  <pre><code>//Main Method var wh = new AutoResetEvent(false); Task childTask = Task.Run(() =&gt; ChildTask(wh); wh.WaitOne();  //Child private void ChildTask(Barrier barrier){ //do what is needed to be done before main thread continues... wh.Set();  } </code></pre>  <p>Wait for several Childs to be <strong>ready</strong>:</p>  <pre><code>//Main Method var barrier = new Barrier(N+1); Task childTask = Task.Run(() =&gt; ChildTask1(barrier); Task childTask = Task.Run(() =&gt; ChildTask2(barrier); ... Task childTask = Task.Run(() =&gt; ChildTaskN(barrier);  barrier.SignalAndWait(); //When all childs signal "ready" i will continue OnMyEvent(); //for example, trigger an event  //Every Child private void Child_i(Barrier barrier){ mainTask.MyEvent += MyEventHandler; //complete subscription before going any further //do what is needed to be done before main thread continues... barrier.SignalAndWait();  } </code></pre>  <p>(Please feel free to add or suggest another good patterns)</p>  <p>So my question is: Is posible to use the async/await pattern to achieve the same?</p>  <p>Are there any advantages/disadvantages by using this new pattern?</p>