<p>In the separation of concerns, I have a Controller, Handler, and Repository.  If I want the database IO to be done asynchronously, where should I put the async method?</p>  <p>For instance, I currently have the following:</p>  <p>In the Controller</p>  <pre><code>public async Task&lt;ActionResult&gt; CreateOrder(OrderCreateModel ocm) {     var order = await Using&lt;CreateOffer&gt;().Exeucte(ocm, userID);     ... } </code></pre>  <p>In the Handler</p>  <pre><code>public async Task&lt;Order&gt; Execute(OrderCreateModel ocm, Guid userID) {     ...     return await _ordersRepository.CreateOrderAsync(new Order(ConvertToDataObject(ocm, userID)); } </code></pre>  <p>And finally, in the Repository</p>  <pre><code>public async Task&lt;Order&gt; CreateOrderAsync(Order newOrder) {     context.orders.Add(newOrder);     await context.SaveChangesAsync();     return newOrder; } </code></pre>  <p>It seems like this is too many Async methods.  Would I get the same results if I:</p>  <ol> <li>just make the repository method async (and all the above methods synchronous)?</li> <li>Or if I just make the Controller method Async (and make all the underlying calls synchronous)?</li> </ol>  <p>What would be the best practices traversing the different layers to make the data operation asynchronous?</p>