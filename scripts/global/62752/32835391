<p>I'm experimenting with async await and I'm encountering UI blocking that shouldn't be happening.</p>  <pre><code>public partial class MainWindow : Window {     public MainWindow()     {         InitializeComponent();          LoadButton.Click += LoadButton_OnClick;     }      private async void LoadButton_OnClick(object sender, RoutedEventArgs e)     {         LoadButton.IsEnabled = false;          // await Task.Delay(2000);          using(TestContext ctx = new TestContext())         {             IList&lt;User&gt; users = await ctx.Users.ToListAsync();         }          LoadButton.IsEnabled = true;     } } </code></pre>  <p>If I comment the DbContext bit and uncomment Task.Delay, it behaves as expected - non blocking the UI.</p>  <p>Based on my understanding, the ToListAsync() method is still invoked from the UI thread but shouldn't block it. Even if the method is CPU-bound (probably isn't) it would cause lag, not a complete block.</p>  <p>My questions:</p>  <p>Do I understand this correctly?</p>  <p>Why is my UI blocking while awaiting on ToListAsync() ?</p>  <hr>  <p><strong>EDIT</strong></p>  <p>I tried doing a database call before calling this method to warm everything and ensure it doesn't block on establishing the first connection. Also I tried adding a couple of thousand entries to the DbSet and awaiting on SaveChangesAsync and the same thing happens - the UI freezes completely for several seconds.</p>  <hr>  <p><strong>EDIT 2</strong></p>  <p>I tried another example with the same code and it seems to be working. The difference is that in first example I'm using Code First and SQL CE and in the working example Database First and SQL Server.</p>