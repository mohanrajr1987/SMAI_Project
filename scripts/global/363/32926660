<p>I'm very new to JavaScript (very new to programming, learning Django, JQuery and JavaScript at the moment).  Anyhow, I'm trying to write an JS function to allow a user to click an element in the DOM which creates an input field so the user can dynamically change the text contents of the element.  I'll then be sending a JSON/AJAX request to alter the contents of the database to reflect the change.</p>  <p>I've got it mostly working however noticed a minor issue.  I'm binding 3 events to the function; keyup, focusout and keydown.  I'm trying to capture each key as they are pressed (to dynamically update another element in the DOM to reflect the change as its typed), when the user clicks away from the input and also when the enter key is pressed.  Clicking away and triggering for each key press works a treat, however pressing return has caused me an issue. I had to add the keydown event to capture this.  What seems to be happening though is that all three events are triggering (i.e. my AJAX POST is sent three times).  Cannot work a way around this issue.  Tried a few things (i.e. disabling event bubbling), however I'm very new to JS so a little out of my depth and resolving this issue.  Thanks in advance to any answers posted.  Below is the JS i've written, probably no the most efficient, I'm sure in time I'll learn how to streamline it more.</p>  <p>How can I ensure the function on runs once when the enter key is pressed ?</p>  <p>Thanks in advance, code below.</p>  <pre><code>/* track key pesses on menu name being updated */ $(document).on('keydown keyup focusout','.name_input',function(event){   /* added to try and fix multiple AJAX requests, doesnt seem to work though */   event.cancelBubble = true;   var levelurl;   var menu_id = parseInt($(this).attr("menu_id"));   var menu_root = $(this).attr("menu_root");   var el = '#subrelative' + menu_id;   var $input = $(this);   if (menu_root.length == 1){     levelurl = '/pages/ajax_request/menu/';   }   else{     levelurl = '/pages/ajax_request/submenu/';   }    /* strip unwanted characters from the input */   $input.val($input.val().replace(/[^A-Za-z-_?&amp;\d]/g, '' ));   if (event.type == 'focusout' || event.which === 13){     event.preventDefault();     $.ajax({       url: levelurl,       type: 'POST',       data: {id: menu_id, action: "modify_name"},        dataType: 'json',       success: function(data){         if (data.status){       /* add stuff once backend AJAX stuff is finished */                        }         else{                 $('#infomodalTitle').html(data.title);           $('#infomodalBody').html(data.message);           $('#infomodalFooter').html('&lt;a href="javascript:location.reload(true)"&gt;&lt;button type="button" class="btn btn-success btn-xs"&gt;Reload Page&lt;/button&gt;&lt;/a&gt;');           $('#infomodal').modal('show');         };         /* apparently should stop event bubbling but doesnt. Probably not understanding the event bubbling issue properly */         return false;       },       failure: function(data){         /* display info modal error message */         infotitle = "&lt;font color='red'&gt;&lt;b&gt;Error&lt;/b&gt;&lt;/font&gt;"         $('#infomodalTitle').html(infotitle);         $('#infomodalBody').html('&lt;p&gt;Server processing error&lt;/p&gt;');         $('#infomodalFooter').html('&lt;button type="button" class="btn btn-success btn-xs" data-dismiss="modal"&gt;Dismiss&lt;/button&gt;');                    $('#infomodal').modal('show');                 }     });   }   else{     var eltext = menu_root + $input.val() + '/';     $(el).html(eltext);   }; }); /* ******************** */ </code></pre>