<p>I've been having problem with putting data into postgreSQL in node, because of constrains. Now I was hoping someone could help me understand on how to do this. I have build me a rather big database, and for sake of all that, I will use simple dummy to demonstrate the tables and ask about what would be the best practice to implement this. </p>  <p>Lets say I have these two tables. </p>  <pre><code>CREATE TABLE "Test1" (   id serial NOT NULL,   name character(50),   CONSTRAINT test_id_pkey PRIMARY KEY (id) ) WITH (   OIDS=FALSE ); ALTER TABLE "Test1" OWNER TO postgres;    CREATE TABLE "Test2" (   id serial NOT NULL,   address character(50),   test_id integer,   CONSTRAINT test2_id_pkey PRIMARY KEY (id),   CONSTRAINT test_id_fkey FOREIGN KEY (test_id)   REFERENCES "Test1" (id) MATCH SIMPLE   ON UPDATE NO ACTION ON DELETE NO ACTION ) WITH (   OIDS=FALSE ); ALTER TABLE "Test2" OWNER TO postgres; </code></pre>  <p>When I insert into these table's I want to do it in one call to the API. The real database tables are more complex then this, there for I didn't want to go into them as such.</p>  <p>In routes in server, my code style is as follow : </p>  <pre><code>router.post('/addToDB', function (req, res, next) {     if (!req.body.id) {         return res.status(400).json({message: 'Please fill out all fields!'});     }     var results;     pg.connect(connectionString, function (err, client, done) {         if (err) {             done(err);             return res.status(400).json({message: 'Error fetching client from pool'});         }          var query = client.query('INSERT QUERY )', [some values],             function (err, result) {                 done();             }         );         /* Stream results back */         query.on('row', function (row) {             results = row.some data         });          /* close connection */         query.on('end', function () {             if (err) {                 /* Releasing the connec */                 done();                 return res.status(400).json({message: 'some message'});             } else {                 if (results) {                     if (something) {                         done();                         return results                     } else {                         done();                         res.status(400).json({message: 'some message.'});                     }                 } else {                     done();                     res.status(400).json({message: 'some message.'});                 }             }         });     }); }); </code></pre>  <p>I have tried few things to the related topic, with out any success, the example above is part of my code frame that I use, now I'm blank on how to do this. </p>  <p>What would be a good practice to do in this situation ? how can I go about this? what if there was 3rd table linked to both?</p>  <p>regards B</p>