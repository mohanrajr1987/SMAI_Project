<p>As far as I know all databases/access libraries have support for preparing statements and binding variables (e.g. <a href="http://www.postgresql.org/docs/current/static/sql-prepare.html" rel="nofollow">PostgreSQL</a>, <a href="https://msdn.microsoft.com/en-us/library/ms716530%28v=vs.85%29.aspx" rel="nofollow">ODBC</a>, <a href="https://dev.mysql.com/doc/refman/5.0/en/mysql-stmt-bind-param.html" rel="nofollow">MySQL</a>, etc.). The Python <a href="https://www.python.org/dev/peps/pep-0249/#id15" rel="nofollow">DB-API</a> seems to imply that database libraries should be implemented using bound variables internally, yet the two I've checked does not..?</p>  <p>MySQLdb uses string inerpolation internally (from <a href="https://github.com/farcepest/MySQLdb1/blob/d34fac681487541e4be07e6978e0db233faf8252/MySQLdb/cursors.py#L187" rel="nofollow">the implementation</a> of <code>cursor.execute(..)</code>):</p>  <pre><code>query = query % tuple([db.literal(item) for item in args]) </code></pre>  <p>and the <code>_mysql.c</code> <a href="https://github.com/farcepest/MySQLdb1/blob/d34fac681487541e4be07e6978e0db233faf8252/_mysql.c#L2030" rel="nofollow">implementation</a> uses:</p>  <pre><code>r = mysql_real_query(&amp;(self-&gt;connection), query, len); </code></pre>  <p>instead of the <code>mysql_stmt_*</code> functions.</p>  <p>In the <code>psycopg2</code> library all execute paths seem to end up in <code>_psyco_curs_execute</code>, which calls <code>_psyco_curs_merge_query_args</code>, which merges "together a query string and its arguments." (cf. <a href="https://github.com/psycopg/psycopg2/blob/master/psycopg/cursor_type.c#L307" rel="nofollow">code</a>).</p>  <p>Bound parameters are supposed to be both faster and more secure, so why do these libraries do string formatting instead? Since most queries will be unique, the query/statement caches will be of little use, should I dramatically reduce their sizes (to prevent the cache-maintenance overhead)?</p>