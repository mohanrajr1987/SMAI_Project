<p>I've developed a web application using spring oauth2 and it is running correctly when the user login in the normal flow, inserting e-mail and password. Now I want integrate this application with Facebook and I have no idea where I should go for this. I've tried use spring social, bellow are some configuration I used to do this. However I don't know if this is the best approach to achieve this integration.</p>  <p>These are the application configuration:</p>  <pre><code>@Configuration public class OAuth2ServerConfiguration {      @Configuration     @EnableResourceServer     protected static class ResourceServerConfiguration extends ResourceServerConfigurerAdapter {          @Inject         private Http401UnauthorizedEntryPoint authenticationEntryPoint;          @Inject         private AjaxLogoutSuccessHandler ajaxLogoutSuccessHandler;          @Inject         private RememberMeServices rememberMeServices;          @Inject         private Environment env;          @Override         public void configure(HttpSecurity http) throws Exception {             http                 .exceptionHandling()                 .authenticationEntryPoint(authenticationEntryPoint)                 .and()                 .rememberMe()                 .rememberMeServices(rememberMeServices)                 .key(env.getProperty("jhipster.security.rememberme.key"))                 .and()                 .logout()                 .logoutUrl("/api/logout")                 .logoutSuccessHandler(ajaxLogoutSuccessHandler)                 .and()                 .csrf()                 .requireCsrfProtectionMatcher(new AntPathRequestMatcher("/oauth/authorize"))                 .disable()                 .headers()                 .frameOptions().disable()                 .sessionManagement()                 .sessionCreationPolicy(SessionCreationPolicy.STATELESS)                 .and()                 .apply(new SpringSocialConfigurer())                 .and()                 .authorizeRequests()                 .antMatchers("/api/authenticate").permitAll()                 .antMatchers("/api/register").permitAll()                 .antMatchers("/api/logs/**").hasAnyAuthority(AuthoritiesConstants.ADMIN)                 .antMatchers("/api/**").authenticated()                 .antMatchers("/metrics/**").hasAuthority(AuthoritiesConstants.ADMIN)                 .antMatchers("/health/**").hasAuthority(AuthoritiesConstants.ADMIN)                 .antMatchers("/trace/**").hasAuthority(AuthoritiesConstants.ADMIN)                 .antMatchers("/dump/**").hasAuthority(AuthoritiesConstants.ADMIN)                 .antMatchers("/shutdown/**").hasAuthority(AuthoritiesConstants.ADMIN)                 .antMatchers("/beans/**").hasAuthority(AuthoritiesConstants.ADMIN)                 .antMatchers("/configprops/**").hasAuthority(AuthoritiesConstants.ADMIN)                 .antMatchers("/info/**").hasAuthority(AuthoritiesConstants.ADMIN)                 .antMatchers("/autoconfig/**").hasAuthority(AuthoritiesConstants.ADMIN)                 .antMatchers("/env/**").hasAuthority(AuthoritiesConstants.ADMIN)                 .antMatchers("/trace/**").hasAuthority(AuthoritiesConstants.ADMIN)                 .antMatchers("/api-docs/**").hasAuthority(AuthoritiesConstants.ADMIN)                 .antMatchers("/protected/**").authenticated();         }     }      @Configuration     @EnableAuthorizationServer     protected static class AuthorizationServerConfiguration extends AuthorizationServerConfigurerAdapter implements EnvironmentAware {          private static final String ENV_OAUTH = "authentication.oauth.";         private static final String PROP_CLIENTID = "clientid";         private static final String PROP_SECRET = "secret";         private static final String PROP_TOKEN_VALIDITY_SECONDS = "tokenValidityInSeconds";          private RelaxedPropertyResolver propertyResolver;          @Inject         private DataSource dataSource;          @Bean         public TokenStore tokenStore() {             return new JdbcTokenStore(dataSource);         }          @Inject         @Qualifier("authenticationManagerBean")         private AuthenticationManager authenticationManager;          @Override         public void configure(AuthorizationServerEndpointsConfigurer endpoints)         throws Exception {             endpoints                 .tokenStore(tokenStore())                 .authenticationManager(authenticationManager);         }          @Override         public void configure(ClientDetailsServiceConfigurer clients) throws Exception {             clients                 .inMemory()                 .withClient(propertyResolver.getProperty(PROP_CLIENTID))                 .scopes("read", "write")                 .authorities(AuthoritiesConstants.ADMIN, AuthoritiesConstants.USER)                 .authorizedGrantTypes("password", "refresh_token")                 .secret(propertyResolver.getProperty(PROP_SECRET))                 .accessTokenValiditySeconds(propertyResolver.getProperty(PROP_TOKEN_VALIDITY_SECONDS, Integer.class, 1800));         }          @Override         public void setEnvironment(Environment environment) {             this.propertyResolver = new RelaxedPropertyResolver(environment, ENV_OAUTH);         }     } } </code></pre>  <p>SocialContext class</p>  <pre><code>@Configuration @EnableSocial public class SocialContext implements SocialConfigurer {     @Inject     private DataSource dataSource;     @Inject     private ConnectionSignUp connectionSignUp;      @Override     public void addConnectionFactories(ConnectionFactoryConfigurer cfConfig, Environment env) {         cfConfig.addConnectionFactory(new FacebookConnectionFactory(             env.getProperty("social.facebook.appId"),             env.getProperty("social.facebook.appSecret")         ));     }      public UserIdSource getUserIdSource() {         return new AuthenticationNameUserIdSource();     }      @Override     public UsersConnectionRepository getUsersConnectionRepository(ConnectionFactoryLocator connectionFactoryLocator) {         JdbcUsersConnectionRepository repository = new JdbcUsersConnectionRepository(             dataSource,             connectionFactoryLocator,             Encryptors.noOpText()         );         repository.setConnectionSignUp(connectionSignUp);         return repository;     }      @Bean     public ConnectController connectController(ConnectionFactoryLocator connectionFactoryLocator, ConnectionRepository connectionRepository) {         return new ConnectController(connectionFactoryLocator, connectionRepository);     }      @Bean     public ProviderSignInController providerSignInController(ConnectionFactoryLocator connectionFactoryLocator, UsersConnectionRepository usersConnectionRepository) {         return new ProviderSignInController(connectionFactoryLocator, usersConnectionRepository, new SimpleSignInAdapter());     } } </code></pre>  <p>So my question is, spring social is the best approach to integrate my application's oauth2 server with Facebook? If it is, why my SimpleSignInAdapter is never called? If not, which could be a better approach?</p>