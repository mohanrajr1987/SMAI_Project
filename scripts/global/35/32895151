<p>I am extremely new to sockets and have been doing a small project based on python.</p>  <p>I've written a simple script, which is this : </p>  <pre><code>def runserver():     try:         s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)     except socket.error, msg:         print(msg[0])      s.bind((host, port))     s.listen(10)     while True:         client, address = s.accept()         # !clients.append(client)         request = client.recv(1024)         params = request.split("|")         if params[0] == "reg_user":             print(params[1] + ", " + params[2])             client.send("Registration Request Received.")         elif params[0] == "login":             print(params[1] + ", " + params[2])             client.send("Login Request Received.")             # !Handles administrative login         elif params[0] == "admin_login":             print("Administrator requested login.")             res = admin_login(params[1], params[2])             if res == 1:                 client.send("Login Successful!")                 print("Login Successful!")             else:                 client.send("Login Failed!")                 print("Login Failed!")         client.close()      s.close()  # !main function if __name__ == "__main__":     runserver() </code></pre>  <p>My Question is, the line </p>  <pre><code>client.close() </code></pre>  <p>Does this line hamper the performance of the code ? What I mean  is, each time a socket connection is made, it is catered to, and then disconnected. This means, that if the application needs further communication, it needs to reconnect to the socket before doing any further business.</p>  <p>I need to know if this hampers the performance and if so, how to get past this ? I want to use persistent connection basically, i.e after login (successful), there will be no disconnection and the application (client) and server can talk uninterrupted.</p>  <p>The second part of the question is :</p>  <pre><code>s.listen(10) </code></pre>  <p>I am allowing a backlog of 10 connections. What is the threshold value for this backlog ? How many connection can a server usually handle in a real life situation ?</p>