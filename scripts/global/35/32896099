<p>I am running a script that telnets to a <code>terminal server</code>. Occasionally the script is launched while one instance is already running, which causes the already running script to fail with </p>  <p><code>EOFError: telnet connection closed</code></p>  <p>Is there a quick and easy and <code>pythonic</code> way to check if the required socket is already in use on the client computer before I try to open a connection with <code>telnetlib</code>?</p>  <p>SOLUTION:</p>  <p>I wanted to avoid making a subprocess call but since I do not control software on the client computers, and other programs may be using the same socket, the file lock suggestion below (a good idea) wouldn't work for me. I ended up using SSutrave's suggestion. Here is my working code that uses netstat in Windows 7:</p>  <pre><code># make sure the socket is not already in use try:     netstat = subprocess.Popen(['netstat','-nao'],stdout=subprocess.PIPE) except:     raise ValueError("couldn't launch netstat to check sockets. exiting") ports = netstat.communicate()[0] if (ip + ':' + port) in ports:     print 'socket ' + ip + ':' + port + ' in use on this computer already. exiting'     return </code></pre>