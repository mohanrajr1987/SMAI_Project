<p>Ok last question bombed. How about this way.</p>  <p>How would I modify this GNU program to use two sockets on the same process, reading from one and then writing the message to the other socket?`</p>  <pre><code>while (1) {   /* Block until input arrives on one or more active sockets. */   read_fd_set = active_fd_set;   if (select (FD_SETSIZE, &amp;read_fd_set, NULL, NULL, NULL) &lt; 0)     {       perror ("select");       exit (EXIT_FAILURE);     }    /* Service all the sockets with input pending. */   for (i = 0; i &lt; FD_SETSIZE; ++i)     if (FD_ISSET (i, &amp;read_fd_set))       {         if (i == sock)           {             /* Connection request on original socket. */             int new;             size = sizeof (clientname);             new = accept (sock,                           (struct sockaddr *) &amp;clientname,                           &amp;size);             if (new &lt; 0)               {                 perror ("accept");                 exit (EXIT_FAILURE);               }             fprintf (stderr,                      "Server: connect from host %s, port %hd.\n",                      inet_ntoa (clientname.sin_addr),                      ntohs (clientname.sin_port));             FD_SET (new, &amp;active_fd_set);           }         else           {             /* Data arriving on an already-connected socket. */             if (read_from_client (i) &lt; 0)               {                 close (i);                 FD_CLR (i, &amp;active_fd_set);               }           }       } } </code></pre>  <p>}</p>