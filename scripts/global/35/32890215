<p>I am working on an Android application which needs to control laptop touch-pad or mouse remotely, means it can simply emulate the mouse or touchapad functionality.</p>  <p>I have tried an open source app called RemoteDroid, which has server side code written in Java, and  it can control complete touchpad of laptop, but I can't use it because my backend server is written in Python (as I am going to port the server side program on raspberry pi, so running JVM on PI almost makes it dead after some time).</p>  <p>I am  able to successfully gather continuous streaming touch coordinates using am Android program and send them over raw socket to the server-side Python program, which receives it and changes the current mouse coordinates using the <code>pyautogui</code> library. The problem is that my Android device uses far different screen resolution than my laptop, so can someone help me change or adjust the screen size (resolution) of Android device to map to the laptop's screen size.</p>  <p>For example, suppose my Android screen resolution is 750x1250px and the laptop has 1366x768px. How could I map laptop screen coordinates to be controlled by my Android app?</p>  <p>This is the code I am using in my Android application:</p>  <pre><code>setContentView(R.layout.activity_main);  touchView = (TextView) findViewById(R.id.textView3);  touchView.setOnTouchListener(new View.OnTouchListener() {      public boolean onTouch(View v, MotionEvent event) {         final int action = event.getAction();         switch (action &amp; MotionEvent.ACTION_MASK) {              case MotionEvent.ACTION_DOWN: {                  new SendXY(String.valueOf((int) event.getX())+":"+String.valueOf((int) event.getY())).execute();                   touchView.setText("ACTION_DOWN  X: "+String.valueOf((int) event.getX())+"\nY: "+String.valueOf((int) event.getY()));                 break;             }              case MotionEvent.ACTION_MOVE:{              new SendXY(String.valueOf((int) event.getX())+":"+String.valueOf((int) event.getY())).execute();                touchView.setText("ACTION_MOVE  X: "+String.valueOf((int) event.getX())+"\nY: "+String.valueOf((int) event.getY()));                 break;             }         }         return true;     }  }); </code></pre>