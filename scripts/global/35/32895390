<p>I wrote a script in blender game and I use sockets, I have a Server.blend and a client.blend.</p>  <p>this is my Server's Constructor:</p>  <pre><code>class Server:  def __init__(self, host="127.0.0.1", port= 9238):      self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)     self.socket.setblocking(False)     self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)     self.socket.bind((host, port)) </code></pre>  <p>and this is my client's:</p>  <pre><code>class Client:  def __init__(self, server_ip="127.0.0.1", server_port= 9238):      self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)     self.socket.setblocking(False)      self.serv_addr = (server_ip, server_port) </code></pre>  <p>The problem is that I don't know when the client is going to exit the game, so I can't close his socket- what keeps the used port open so i can't use the current port again.</p>  <p>I have a dictionary which contains all the addresses of all the clients, so I tried to send a message to all the addresses and in case that the client disconnected, i won't be able to send the message and use and exception to remove the address from the list (and it's avatar etc..):</p>  <pre><code>def Check_For_Disconnect(self):     for addr in self.addr_user:         try:             self.socket.sendto(b"You are connected!" , addr)         except socket.error:             scene = logic.getCurrentScene()             for obj in scene.objects:                 if str(obj) == "Text" and obj == self.addr_user[addr].name:                     obj.delete()                     del self.addr_user[addr] </code></pre>  <p>I suppose that I don't reach the exception because the client's socket is still open so the message arrives properly.  </p>  <p>Does anyone have any idea how I can around this problem?</p>