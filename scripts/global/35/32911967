<p>My server listen for TCP connections and process requests on main loop. I need also secondary loop that allow to send message to client by external notification.</p>  <p>Example of communication between client and server:</p>  <pre><code>client&gt;user1 server&gt;connected: user1 &lt;-- subscribed here for external notifications --&gt; client&gt;hello server&gt;user1: hello &lt;-- external notification received here for user1 --&gt; server&gt;user1: notification client&gt;foo server&gt;user1: foo  </code></pre>  <p>Sample code: (<a href="https://gist.github.com/alexsergeyev/f0704b49940d548812bf" rel="nofollow">https://gist.github.com/alexsergeyev/f0704b49940d548812bf</a>)</p>  <pre><code>require 'celluloid/current' require 'celluloid/io'  class Backend   include Celluloid   include Celluloid::Notifications   attr_accessor :user_id    def on_message(msg)     if user_id       "#{user_id}: #{msg}"     else       @user_id = msg.chomp       subscribe 'user1', :on_event       "connected: #{@user_id}\n"     end   end    def on_event(topic, msg)     "#{user_id}: #{msg}\n"   end end  class Daemon   include Celluloid::IO   include Celluloid::Notifications    finalizer :shutdown    def initialize(host, port)     @server = TCPServer.new(host, port)     async.run     async.ping   end    def shutdown     @server.close if @server   end    def run     loop do       async.handle_connection @server.accept     end   end    def ping     loop do       Celluloid::Notifications.publish 'user1', Time.now       sleep 1     end   end    def handle_connection(socket)     backend = Backend.new     loop { socket.write backend.on_message(socket.readpartial(100)) }   rescue EOFError     socket.close   end end  supervisor = Daemon.supervise as: :server, args: ["127.0.0.1", 1234] trap("INT") { supervisor.terminate; exit } sleep </code></pre>  <p>This loop blocks any other processing of actor events and I don't know how to interrupt that in correct way. </p>  <pre><code>loop { socket.write backend.on_message(socket.readpartial(100)) } </code></pre>