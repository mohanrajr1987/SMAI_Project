<h1>Use Case</h1>  <ol> <li><p>Assume that there is one Service Implemented in an multilayered .net app.</p></li> <li><p>Some ViewModels use this Service since it exposes functions they requires.</p></li> <li><p>This application has also possibility to run scripts executed by old legacy ScriptEngine (details are not imporant here).</p></li> <li><p>Above LegacyScriptEngine uses our Service</p></li> <li><p>Recently I added IronPython Engine to my application and would like to expose same functions as my old engine exposed.</p></li> <li>I was wondering how to prepare it to accomplish clean code.</li> <li><p>My solution should be flexible, e.g. in case another ScriptEngine used it could be used too.</p>  <p>public class LegacyScriptEngine  {     Service _service;</p>  <pre><code>public LegacyScriptEngine(Service service) {    _service = service; }  Func1(int param) {     _servcie.SomeFunc(param) }  Func2(int param1, int param2, int param3, int param4) {     //collect params and create someObject     _servcie.SomeFunc(someObject); }  //more functions... </code></pre>  <p>}</p>  <p>public class PythonEngine {     //Exposing same functions as old engine does     PythonEngine(BigService servcie)     {        _mainScope.SetVariable("host_legacy", servcie);     }<br> }</p></li> </ol>  <h1>Conclusions:</h1>  <ul> <li>In my opinion IronPython engine should not know anything about LegacyEngine at all.</li> <li>I should not expose my whole service since I would like use has only access to same functions as old engine allowed in order to cusomers could easily convert old scripts into new ones.</li> <li><p>I thought to prepare an interface with same functions heading as old legacy service uses. e.g:</p>  <p>public inteface LegacyFunctions {     Func1(int someparams)     {         servcie.SomeFunc(someparams);     }</p>  <pre><code>Func2(int param1, int param2, int param3, int param4) {     //collect params and create someObject     _servcie.SomeFunc(someObject); } </code></pre>  <p>}</p></li> <li><p>Then I could prepare some Adapter which implements my interface and exposes it to python.</p>  <pre><code>public class ServcieToLegacyFunctionsAdapter {     ServcieToLegacyFunctionsAdapter(BigService servcie)     {         _servcie = servcie;     }      Func1(someparams)     {         servcie.SomeFunc(someparams);     }      Func2(int param1, int param2, int param3, int param4)     {         //collect params and create someObject         _servcie.SomeFunc(someObject);     } } </code></pre></li> </ul>  <p>What do you think about such solution, do you have any conclusions?</p>