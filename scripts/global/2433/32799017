<p>Looking to figure something out about the singleton pattern.</p>  <p>If I implement a singleton pattern like the below, what could I do so that other classes could update and see updates to fields someString and someInt?</p>  <p>From what I read about the Singleton pattern, immutability was not one of the prerequisites. So technically could I have setter methods for the fields and change them and have these changes visible to other classes? For example if I have another two classes implementing Runnable and printing Foo's fields every few seconds. I tried this and what happened was that each class sees its own updates only and none of the other classes'.</p>  <pre><code>public class Foo {     private static Foo instance;     private String someString;     private int someNum;      private Foo(){         someString = "a";         someNum = 1;     }      public static Foo getInstance(){         if(instance == null){             instance = new Foo();         }         return instance;     }      public void setSomeString(String someString) {         this.someString = someString;     }      public void setSomeNum(int someNum) {         this.someNum = someNum;     }      @Override     public String toString() {         return "Foo{" +                 "someString='" + someString + '\'' +                 ", someNum=" + someNum +                 '}';     } } </code></pre>  <p>---UPDATE--- Added 2 classes (Baz and Bar below) and updated Foo with setters and overriden toString().</p>  <p>Running Baz first I expect it to print foo.toString() every second with the most up to date values.</p>  <p>Then running Bar, it first updates Foo's fields then prints foo.toString() every second. The updates from Bar are only visible to Bar and not to Baz.</p>  <p>Output from Baz:</p>  <p>1443284013576 Foo{someString='a', someNum=1}</p>  <p>1443284014576 Foo{someString='a', someNum=1}</p>  <p>1443284015576 Foo{someString='a', someNum=1}</p>  <p>1443284016577 Foo{someString='a', someNum=1}</p>  <p>1443284017577 Foo{someString='a', someNum=1}</p>  <p>1443284018577 Foo{someString='a', someNum=1}</p>  <p>Output from Bar:</p>  <p>1443284016416 Foo{someString='abc', someNum=2}</p>  <p>1443284017417 Foo{someString='abc', someNum=2}</p>  <p>1443284018417 Foo{someString='abc', someNum=2}</p>  <p>1443284019418 Foo{someString='abc', someNum=2}</p>  <p>1443284020418 Foo{someString='abc', someNum=2}</p>  <pre><code>public class Baz {     public static void main(String[] args) throws InterruptedException {         Foo foo = Foo.getInstance();         while(true){             System.out.println(foo);             Thread.sleep(1000);         }     } }   public class Bar{     public static void main(String[] args) throws InterruptedException {         Foo foo = Foo.getInstance();         foo.setSomeNum(2);         foo.setSomeString("abc");         while(true){             System.out.println(foo);             Thread.sleep(1000);         }     } } </code></pre>  <p>updated: some stupid typos</p>