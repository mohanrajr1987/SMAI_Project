<p>We use asp.net mvc with Entity Framework as our ORM.</p>  <p>Our database is really old and was built long time ago. So foreign keys are missing and we can't add it now. We need to bundle different models into ViewModels. We are not sure if we should do the initial model bundling in difference service methods or in the controller.</p>  <p>So my question is what design pattern and practice you think is best. Bundle in controller:</p>  <pre><code> public class PlayerController : ApiController  {      private readonly IPlayerService _playerService;      private readonly IItemService _itemService;       public PlayerController(IPlayerService playerService, IItemService itemService)      {          _playerService = playerService;          _itemService = itemService;      }        public UserViewModel Get(int id)      {         var user = playerService.GetUser(id);          var item = itemService.GetItem(id);          var userViewModel = Mapper.Map&lt;UserViewModel(user);          userViewModel.item = Mapper.Map&lt;ItemViewModel(item);          return userViewModel;      }  } </code></pre>  <p>Or bundle in the service:</p>  <pre><code>public class PlayerController : ApiController  {      private readonly IPlayerService _playerService;      private readonly IItemService _itemService;       public PlayerController(IPlayerService playerService, IItemService itemService)      {          _playerService = playerService;          _itemService = itemService;      }        public UserViewModel Get(int id)      {         var userWithItem = playerService.GetUserWithItem(id);         return Mapper.Map&lt;UserViewModel(userWithItem);      }  } </code></pre>  <p>The call to getting the item would be done in the "GetUserWithItem" instead, like this:</p>  <pre><code>public User GetUserWithItem(int id) {     var user = _dbContext.user.Find(id);     user.Item = _dbContext.item.Where(x=&gt;x.userId =&gt; id);      return user; } </code></pre>  <p>Which is the 'correct' way of doing it that would offer most benefits?</p>