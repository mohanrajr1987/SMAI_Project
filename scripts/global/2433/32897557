<p>I have two tables with a join table to allow a many-to-many relationship.</p>  <p><a href="http://i.stack.imgur.com/QRQ8y.png" rel="nofollow"><img src="http://i.stack.imgur.com/QRQ8y.png" alt="enter image description here"></a></p>  <p>It's a very familiar design pattern. It indicates which Branches each Member has access to.</p>  <p>As the number of members and branches increases I end up with a lot of data in the join table that is duplicated across members. Members tend to have access to the same groups of Branches as other Members.</p>  <p>So I'm looking at normalizing my data by creating a MemberProfile table that is effectively immutable. And rather than creating MemberBranch records for every Member I check for a matching MemberProfile, use if it already exists, or create one if it doesn't:</p>  <p>The idea being if I have a million Members with only a hundred access profiles this will save me a lot of space in my database.</p>  <p><a href="http://i.stack.imgur.com/x6UID.png" rel="nofollow"><img src="http://i.stack.imgur.com/x6UID.png" alt="enter image description here"></a></p>  <p>I'm happy that it all works and that the development effort is worth is.</p>  <p>My question is "Is this a standard database design pattern, and if so, what is it called?"</p>