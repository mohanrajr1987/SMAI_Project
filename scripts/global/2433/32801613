<p>I have a program where user enters the operations of a plane. User can select as many operations (holding, straight, landing etc.) as s/he wants. User can calculate the necessary fuel intake with operation 5.</p>  <p>I have applied to the Abstract Factory Design Pattern to the system as follows: </p>  <p><strong>FlightModeInterface.h</strong></p>  <pre><code>class FlightModeInterface{  protected: float time, fuel_rate, start, end, pace, distance; float total;  public:     enum FLIGHT_MODES{         HOLDING,         RAISING,         LANDING,         STRAIGHT     };      FlightModeInterface();      virtual ~FlightModeInterface(){ }      virtual float calcFuel(float, float, float,               float, float, float) = 0;      static FlightModeInterface* createFactory(FLIGHT_MODES); }; </code></pre>  <p><strong>FlightModeFactory.cpp</strong></p>  <pre><code>#include "FlightModeInterface.h" #include "Holding.h" #include "Landing.h" #include "Raising.h" #include "Straight.h"  class FlightModeFactory{ protected:     float time, fuel_rate, start, end, pace, distance;     float total; public:     static FlightModeInterface* createFactory(FlightModeInterface::FLIGHT_MODES mode){         switch (mode) {             case FlightModeInterface::HOLDING:                 return new Holding();             case FlightModeInterface::LANDING:                 return new Landing();             case FlightModeInterface::RAISING:                 return new Raising();             case FlightModeInterface::STRAIGHT:                 return new Straight();         }         throw "invalid flight mode.";      } }; </code></pre>  <p><strong>CalculateFuel.cpp</strong></p>  <pre><code>#include &lt;iostream&gt; #include &lt;stdio.h&gt; #include "FlightModeInterface.h"  using namespace std;   int main(){     char op = 's';     float time=0, fuel_rate=0, start=0, end=0, pace=0, distance=0;     float total = 0;     FlightModeInterface *factory;      while(op != 'x') {          float hold_result, raise_result, land_result, str_result;          cout &lt;&lt; "Please select an operation: " &lt;&lt; endl;         cout &lt;&lt; "1 ---&gt; Holding flight" &lt;&lt; endl;         cout &lt;&lt; "2 ---&gt; Raising" &lt;&lt; endl;         cout &lt;&lt; "3 ---&gt; Landing " &lt;&lt; endl;         cout &lt;&lt; "4 ---&gt; Straight " &lt;&lt; endl;         cout &lt;&lt; "5 ---&gt; Calculate total fuel consumption" &lt;&lt; endl;         cout &lt;&lt; "x ---&gt; Exit " &lt;&lt; endl;          cin &gt;&gt; op;          switch(op){         case '1':             cout &lt;&lt; "Holding time (minutes): ";             cin &gt;&gt; time;             cout &lt;&lt; "Fuel rate (kg/sec): ";             cin &gt;&gt; fuel_rate;              factory = FlightModeInterface::createFactory(FlightModeInterface::HOLDING);              hold_result = factory -&gt; calcFuel(time, fuel_rate, 0, 0, 0, 0);              total += hold_result;             break;         case '5':             cout &lt;&lt;"Total fuel requirement: "&lt;&lt; total &lt;&lt; " kg"&lt;&lt; endl;             total = 0;             break;         case 'x':             return 0;         default:             continue;         }     }     return 0;  } </code></pre>  <p>When I run CalculateFuel.cpp, I encounter this <strong>error</strong> (I use Eclipse Builder to build the code on MAC):</p>  <pre><code>23:46:08 **** Build of configuration Debug for project CalculateFuel **** make all  Building file: ../src/CalculateFuel.cpp Invoking: GCC C++ Compiler g++ -O0 -g3 -Wall -c -fmessage-length=0 -MMD -MP -MF"src/CalculateFuel.d" -MT"src/CalculateFuel.d" -o "src/CalculateFuel.o" "../src/CalculateFuel.cpp" Finished building: ../src/CalculateFuel.cpp  Building file: ../src/FlightModeFactory.cpp Invoking: GCC C++ Compiler g++ -O0 -g3 -Wall -c -fmessage-length=0 -MMD -MP -MF"src/FlightModeFactory.d" -MT"src/FlightModeFactory.d" -o "src/FlightModeFactory.o" "../src/FlightModeFactory.cpp" Finished building: ../src/FlightModeFactory.cpp  Building target: CalculateFuel Invoking: MacOS X C++ Linker g++  -o "CalculateFuel"  ./src/CalculateFuel.o ./src/FlightModeFactory.o    Undefined symbols for architecture x86_64:   "FlightModeInterface::createFactory(FlightModeInterface::FLIGHT_MODES)", referenced from:       _main in CalculateFuel.o ld: symbol(s) not found for architecture x86_64 clang: error: linker command failed with exit code 1 (use -v to see invocation) make: *** [CalculateFuel] Error 1 </code></pre>  <p>Any ideas on how to solve this?</p>