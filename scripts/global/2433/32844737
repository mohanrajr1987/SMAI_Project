<p>I need to refactor my whole system and I would like suggestions on how to deal with a problem with types.</p>  <p>I have this situation: I'm using PMML (basically an XML with a data schema specification) and HBase (a columnar storage that keeps no data type schema). I need to match the two while manipulating the values in my system. So I need to have an abstraction to handle all the possible data types that could be part of my system. Right now I have Int, Double and String.</p>  <p>For every type I need to be able to define a parser (for HBase), a writer and a set of operations defined as high order functions (<code>(T,T)=&gt;T)</code>.</p>  <p>Right now I tried to do that with a <code>trait MyValue[T]</code> that was extended by <code>MyValueInt extends MyValue[Int]</code> or <code>MyValueDouble extends MyValue[Double]</code>. I could define a list of operations like List[(MyValue,MyValue)=>MyValue] but I had to match it everytime with every case and created a lot of other problems with the type system.</p>  <p>What I need is a good abstraction to model the fact that these values can be only Int, Double and Strings, to create lists of these values and to be able to treat these values with a generic logic until I need to extract the real value and apply it to an operation.</p>