<p>Now that 5.4.x is at EOL, we are making the jump to 5.6 so we can actually get back to working on features. However we are running into the:</p>  <pre><code>Strict standards: Declaration of Hobis_Api_Cache::get() should be compatible with Memcached::get($key, $cache_cb = NULL, &amp;$cas_token = NULL, &amp;$udf_flags = NULL)  </code></pre>  <p>...warning.</p>  <p>It looks like a major SF2 bundle: <a href="https://github.com/LeaseWeb/LswMemcacheBundle/issues/21" rel="nofollow">LswMemcacheBundle</a> had the same issue, but their "fix" was to switch APIs from Memcached to Memcache, which may work, but we chose Memcached for a reason. However the maintainers of the php wrapper for memcached apparently don't see fixing <a href="https://github.com/php-memcached-dev/php-memcached/issues/126" rel="nofollow">this issue</a> as high priority. However as more users are compelled to update to 5.5+ due to 5.4 EOL, I think this issue will need to be addressed sooner rather than later.</p>  <p>So my question is, has anyone figured out an elegant solution to this issue? </p>  <p>Our in-house middleware (Hobis_Api) protects us a little bit, in that I can break out the <code>set</code> and <code>get</code> functions and put them in their own class, which does not extend Memcached, then treat them as wrapper functions based on current php version id, something like this:</p>  <pre><code>// Now class Hobis_Api_Cache extends memcached {     public function set($key, $value, $expiry = self::EXPIRY_DEFAULT) {} }  // Proposed class Hobis_Api_Cache_Package {     public static function set($key, $value, $expiry, $udfs)     {         $cache = new Memcached;          if (PHP_VERSION_ID &lt; 50500) {              $cache-&gt;set($key, $value, $expiry);          } else {              $cache-&gt;set($key, $value, $expiry, $udfs);         }     } } </code></pre>  <p>But obviously this will be a PITA b/c I have to update all the calling code from <code>$cache-&gt;set()</code> to <code>Hobis_Api_Cache_Package::set()</code></p>  <p>Thx to Paul's suggestion, here's the end result:</p>  <pre><code>class Hobis_Api_Cache extends memcached {     /**      * Magic method override so we can use our version of get/set      *  Otherwise default get/set will break in php 5.5+      *      * @param string      * @param array      */     public function __call($name, $arguments)     {         switch ($name)         {             // Override due to 5.5+ using php-memcache 2.2 and morons not fixing it             case 'get':                  $this-&gt;myGet($arguments);                  break;              // Override due to 5.5+ using php-memcache 2.2 and morons not fixing it             case 'set':                  $this-&gt;mySet($arguments);                  break;         }     } } </code></pre>