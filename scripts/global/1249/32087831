<p>I'm trying to get Memcache working in Spring.</p>  <p>I've setup a local Memcached server using Docker and Kitematic:</p>  <p><a href="http://i.stack.imgur.com/Zsq0D.png" rel="nofollow"><img src="http://i.stack.imgur.com/Zsq0D.png" alt="enter image description here"></a></p>  <p>I can access the Memcached server using telnet: <code>telnet 192.168.99.100 32780</code> and then run <code>stats</code> or <code>stats items</code> (which only prints out <code>END</code> if the cache is empty);</p>  <p>My <code>pom.xml</code>:</p>  <pre><code>    &lt;dependency&gt;         &lt;groupId&gt;com.google.code.simple-spring-memcached&lt;/groupId&gt;         &lt;artifactId&gt;simple-spring-memcached&lt;/artifactId&gt;         &lt;version&gt;3.6.0&lt;/version&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;com.google.code.simple-spring-memcached&lt;/groupId&gt;         &lt;artifactId&gt;spring-cache&lt;/artifactId&gt;         &lt;version&gt;3.6.0&lt;/version&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;com.google.code.simple-spring-memcached&lt;/groupId&gt;         &lt;artifactId&gt;xmemcached-provider&lt;/artifactId&gt;         &lt;version&gt;3.6.0&lt;/version&gt;     &lt;/dependency&gt; </code></pre>  <p>In my <code>applicationContext.xml</code> I have the following:</p>  <pre><code>    &lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt; &lt;beans      xmlns="http://www.springframework.org/schema/beans"      xmlns:context="http://www.springframework.org/schema/context"     xmlns:tx="http://www.springframework.org/schema/tx"     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"     xmlns:rabbit="http://www.springframework.org/schema/rabbit"     xmlns:task="http://www.springframework.org/schema/task"       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd                  http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd         http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd         http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd"&gt;      &lt;context:property-placeholder location="classpath*:META-INF/spring/*.properties"/&gt;     ...     &lt;import resource="cacheContext.xml" /&gt;     ... </code></pre>  <p>In <code>cacheContext.xml</code> my config is as follow:</p>  <pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xmlns:context="http://www.springframework.org/schema/context"        xmlns:cache="http://www.springframework.org/schema/cache"        xmlns:aop="http://www.springframework.org/schema/aop"        xsi:schemaLocation="http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd            http://www.springframework.org/schema/beans            http://www.springframework.org/schema/beans/spring-beans-3.2.xsd            http://www.springframework.org/schema/context            http://www.springframework.org/schema/context/spring-context-3.2.xsd"&gt;      &lt;aop:aspectj-autoproxy/&gt;     &lt;cache:annotation-driven/&gt;      &lt;context:component-scan base-package="com.google.code.ssm"/&gt;     &lt;context:component-scan base-package="com.mycee.application"/&gt;      &lt;bean id="cacheBase" class="com.google.code.ssm.aop.CacheBase"/&gt;      &lt;bean id="readThroughSingleCache" class="com.google.code.ssm.aop.ReadThroughSingleCacheAdvice"&gt;         &lt;property name="cacheBase" ref="cacheBase"/&gt;     &lt;/bean&gt;     &lt;bean id="readThroughMultiCache" class="com.google.code.ssm.aop.ReadThroughMultiCacheAdvice"&gt;         &lt;property name="cacheBase" ref="cacheBase"/&gt;     &lt;/bean&gt;     &lt;bean id="readThroughAssignCache" class="com.google.code.ssm.aop.ReadThroughAssignCacheAdvice"&gt;         &lt;property name="cacheBase" ref="cacheBase"/&gt;     &lt;/bean&gt;     &lt;bean id="updateSingleCache" class="com.google.code.ssm.aop.UpdateSingleCacheAdvice"&gt;         &lt;property name="cacheBase" ref="cacheBase"/&gt;     &lt;/bean&gt;     &lt;bean id="updateMultiCache" class="com.google.code.ssm.aop.UpdateMultiCacheAdvice"&gt;         &lt;property name="cacheBase" ref="cacheBase"/&gt;     &lt;/bean&gt;     &lt;bean id="updateAssignCache" class="com.google.code.ssm.aop.UpdateAssignCacheAdvice"&gt;         &lt;property name="cacheBase" ref="cacheBase"/&gt;     &lt;/bean&gt;     &lt;bean id="invalidateSingleCache" class="com.google.code.ssm.aop.InvalidateSingleCacheAdvice"&gt;         &lt;property name="cacheBase" ref="cacheBase"/&gt;     &lt;/bean&gt;     &lt;bean id="invalidateMultiCache" class="com.google.code.ssm.aop.InvalidateMultiCacheAdvice"&gt;         &lt;property name="cacheBase" ref="cacheBase"/&gt;     &lt;/bean&gt;     &lt;bean id="invalidateAssignCache" class="com.google.code.ssm.aop.InvalidateAssignCacheAdvice"&gt;         &lt;property name="cacheBase" ref="cacheBase"/&gt;     &lt;/bean&gt;      &lt;bean id="incrementCounterInCache" class="com.google.code.ssm.aop.counter.IncrementCounterInCacheAdvice"&gt;         &lt;property name="cacheBase" ref="cacheBase"/&gt;     &lt;/bean&gt;     &lt;bean id="decrementCounterInCache" class="com.google.code.ssm.aop.counter.DecrementCounterInCacheAdvice"&gt;         &lt;property name="cacheBase" ref="cacheBase"/&gt;     &lt;/bean&gt;     &lt;bean id="readCounterFromCache" class="com.google.code.ssm.aop.counter.ReadCounterFromCacheAdvice"&gt;         &lt;property name="cacheBase" ref="cacheBase"/&gt;     &lt;/bean&gt;     &lt;bean id="updateCounterInCache" class="com.google.code.ssm.aop.counter.UpdateCounterInCacheAdvice"&gt;         &lt;property name="cacheBase" ref="cacheBase"/&gt;     &lt;/bean&gt;      &lt;bean name="cacheManager" class="com.google.code.ssm.spring.SSMCacheManager"&gt;         &lt;property name="caches"&gt;             &lt;set&gt;                 &lt;bean class="com.google.code.ssm.spring.SSMCache"&gt;                     &lt;constructor-arg name="cache" index="0" ref="defaultCache"/&gt;                     &lt;constructor-arg name="expiration" index="1" value="300"/&gt;                     &lt;constructor-arg name="allowClear" index="2" value="false"/&gt;                 &lt;/bean&gt;             &lt;/set&gt;         &lt;/property&gt;     &lt;/bean&gt;      &lt;bean name="defaultCache" class="com.google.code.ssm.CacheFactory" depends-on="cacheBase"&gt;         &lt;property name="cacheName" value="defaultCache"/&gt;         &lt;property name="cacheClientFactory"&gt;             &lt;bean class="com.google.code.ssm.providers.xmemcached.MemcacheClientFactoryImpl"/&gt;         &lt;/property&gt;         &lt;property name="addressProvider"&gt;             &lt;bean class="com.google.code.ssm.config.DefaultAddressProvider"&gt;                 &lt;property name="address" value="localhost:11211"/&gt;             &lt;/bean&gt;         &lt;/property&gt;         &lt;property name="configuration"&gt;             &lt;bean class="com.google.code.ssm.providers.CacheConfiguration"&gt;                 &lt;property name="consistentHashing" value="true"/&gt;             &lt;/bean&gt;         &lt;/property&gt;     &lt;/bean&gt;   &lt;/beans&gt; </code></pre>  <p>I've created three different methods, each using different caching mechanisms:</p>  <pre><code>@Component("cacheEndpoint") public class CacheClass {      @Autowired     SSMCacheManager cache;      public String getDateTime1(String anything) {          SSMCache c = cache.getCache("defaultCache");          String s = c.get(anything, String.class);         if (s != null) {             return s;         }          Date d = new Date();         String response = d.toString() + " - " + d.getTime();         c.put(anything, response);          return response;      }      @Cacheable("defaultCache")     public String getDateTime2(String anything) {         Date d = new Date();         String response = d.toString() + " - " + d.getTime();         return response;     }      @ReadThroughSingleCache(namespace = "defaultCache", expiration = 15000)     public String getDateTime3(String anything) {         Date d = new Date();         String response = d.toString() + " - " + d.getTime();         return response;     }   } </code></pre>  <p>To access it I do:</p>  <pre><code>@Autowired CacheClass c;  ...  // caches perfectly c.getDateTime1("test");  // doesn't do any caching c.getDateTime2("test");  // doesn't do any caching c.getDateTime3("test"); </code></pre>  <p>After placing runtime exceptions in <code>getDateTime2</code> and <code>getDateTime3</code>, it was established that the interceptors aren't being invoked.</p>  <p>Any idea what could be the cause of <code>@Cachable</code> and <code>@ReadThroughSingleCache</code> not doing their interception magic?</p>  <p><strong>Update based on Matjaž Pečan's response:</strong></p>  <p>CacheClass Interface:</p>  <pre><code>public interface CacheClass {      public String getDateTime1(String anything);      public String getDateTime2(String anything);      public String getDateTime3(String anything);  } </code></pre>  <p>CacheClass Implementation:</p>  <pre><code>@Component("cacheEndpoint") public class CacheClassImpl implements CacheClass {      @Autowired     SSMCacheManager cache;      public String getDateTime1(String anything) {          SSMCache c = cache.getCache("defaultCache");          String s = c.get(anything, String.class);         if (s != null) {             return s;         }          Date d = new Date();         String response = d.toString() + " - " + d.getTime();         c.put(anything, response);          return response;      }      @Cacheable("defaultCache")     public String getDateTime2(String anything) {          Date d = new Date();         String response = d.toString() + " - " + d.getTime();         return response;      }      @ReadThroughSingleCache(namespace = "defaultCache", expiration = 15000)     public String getDateTime3(String anything) {          Date d = new Date();         String response = d.toString() + " - " + d.getTime();         return response;      }   } </code></pre>  <p>SOAP Endpoint where I'm testing the cache:</p>  <pre><code>@Endpoint public class PingEndpoint {      @Autowired     CacheClass c;      @ResponsePayload     @PayloadRoot(localPart = "PingRequest", namespace = "http://www.mycee.com/Application")     public PingResponse doPing(@RequestPayload PingRequest request) {          // caches perfectly         System.out.println(c.getDateTime1("test"));          // doesn't do any caching         System.out.println(c.getDateTime2("test"));          // doesn't do any caching         System.out.println(c.getDateTime3("test"));      } } </code></pre>  <p>cacheContext.xml:</p>  <pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xmlns:context="http://www.springframework.org/schema/context"        xmlns:cache="http://www.springframework.org/schema/cache"        xmlns:aop="http://www.springframework.org/schema/aop"        xsi:schemaLocation="http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd            http://www.springframework.org/schema/beans            http://www.springframework.org/schema/beans/spring-beans-3.2.xsd            http://www.springframework.org/schema/context            http://www.springframework.org/schema/context/spring-context-3.2.xsd"&gt;      &lt;aop:aspectj-autoproxy proxy-target-class="true"/&gt;     &lt;cache:annotation-driven/&gt;      ... </code></pre>