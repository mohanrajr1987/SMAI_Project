<p>I am refactoring somone elses code. One thing i have noticed is that memcache seems to just cache every request made whenever its made.</p>  <p>Example: we have a  getUsers($city,$state,$country) function, in which it gets all users. Right now we look for a memcache store with the exact params, then we lookup the DB, store to memcache. So if the results were 300 people, we would put that whole dataset into memcache. If any user changes, we dont know which possible memcache stores they are in, so we must dump them all.</p>  <p>I was thinking it would be better to have a getUser($id) which stores to memcache with a longer timer. On update, it updates the memcache for user($id).</p>  <p>then instead getUsers($city,state,country) instead would get ids, and foreach getUser($id) from memcache. We can still memcache the result of the ids, so commonly looked at queries are stored. </p>  <p>Is this theoretically the right direction? or is it just better to memcache last request?</p>