<p>I have a database in SQL server and I'm building an interface for it using javafx. Some of the columns  in the tableView show the data and some don't ,I have checked and there is no problems with the database or the queries  .I have been searching for an answer to this problem for weeks . I'm posting one of the table with this problem in hope for your help (have many tables with this problem):</p>  <pre><code>    import java.sql.Connection;     import java.sql.ResultSet;     import java.sql.ResultSetMetaData;     import java.sql.SQLException;     import java.sql.Statement;     import java.util.ArrayList;      import LOGIC.Criteria;     import LOGIC.functions;     import javafx.application.Application;     import javafx.collections.FXCollections;     import javafx.collections.ObservableList;     import javafx.geometry.Insets;     import javafx.geometry.Pos;     import javafx.scene.Scene;     import javafx.scene.control.Button;     import javafx.scene.control.TableColumn;     import javafx.scene.control.TableView;     import javafx.scene.control.TextField;     import javafx.scene.control.cell.PropertyValueFactory;     import javafx.scene.layout.FlowPane;     import javafx.scene.layout.HBox;     import javafx.scene.layout.VBox;     import javafx.stage.Stage;     import javafx.scene.control.Label;      public class Main extends Application {          Stage window;         TableView&lt;Criteria&gt; table;         TextField criteriaCodeInput, criteriaNameInput, amountInput;         Scene CriteriaList,updateCriteria;         TextField criteriaCodeUp, criteriaNameUp, amountUp;         public static Criteria chosenCriteriaToUpdate;           public static void main(String[] args) throws ClassNotFoundException, SQLException {             launch(args);         }          @Override         public void start(Stage primaryStage) throws Exception {             Start(primaryStage);         }          //update button clicked         public void updateButtonClicked(){             window.setScene(updateCriteria);             window.setResizable(false);             Criteria temp=new Criteria();             temp=table.getSelectionModel().getSelectedItem();             chosenCriteriaToUpdate=temp;             criteriaCodeUp.setText(Integer.toString(temp.getCriteriaCode()));             criteriaNameUp.setText(temp.getCriteriaName());               amountUp.setText(Integer.toString(temp.getAmount()));              }       //cancel button clicked         public void cancelButtonClicked(){              window.setScene(CriteriaList);         }        //ok button clicked         public void okButtonClicked(){             Criteria c = new Criteria();             Criteria updatec = new Criteria(c.getCriteriaCode(),c.getCriteriaName(),c.getAmount());             c=chosenCriteriaToUpdate;             table.getItems().remove(c);             table.getItems().add(updatec);               ////////////////save changes in database//////////////////////              functions f = new functions();             Connection con;             try {                 con = f.ConnectToDataBase();                 ResultSet rs = null;                 Statement stmt = con.createStatement();                 rs = stmt.executeQuery("updateCriteria "+criteriaCodeUp.getText().toString()+","+criteriaNameUp.getText()+","+amountUp.getText().toString());                 ResultSetMetaData rsmd = rs.getMetaData();             } catch (ClassNotFoundException | SQLException e) {                 //System.out.println("CAN'T ADD ERROR");             }               window.close();             try {                 Start(window);             } catch (ClassNotFoundException | SQLException e) {                 // TODO Auto-generated catch block                 e.printStackTrace();             }         }        //Add button clicked         public void addButtonClicked(){             Criteria CriteriaAdd = new Criteria();             CriteriaAdd.setCriteriaCode(Integer.valueOf(criteriaCodeInput.getText()));             CriteriaAdd.setCriteriaName(criteriaNameInput.getText());             CriteriaAdd.setAmount(Integer.valueOf(amountInput.getText()));             table.getItems().add(CriteriaAdd);              ///////////////////////ADD to database/////////////////////////             functions f = new functions();             Connection con;             try {                 con = f.ConnectToDataBase();                 ResultSet rs = null;                 Statement stmt = con.createStatement();                 stmt.executeQuery("insertCriteria "+criteriaCodeInput.getText().toString()+","+criteriaNameInput.getText()+","+amountInput.getText().toString());                 ResultSetMetaData rsmd = rs.getMetaData();             } catch (ClassNotFoundException | SQLException e) {                 //System.out.println("CAN'T ADD ERROR");             }             ///////////////////////////////////////////////////////////////             criteriaCodeInput.clear();             criteriaNameInput.clear();             amountInput.clear();         }          //Delete button clicked         public void deleteButtonClicked(){             ObservableList&lt;Criteria&gt; CriteriaSelected, allCriterias;             Criteria temp=null;             allCriterias= table.getItems();             CriteriaSelected = table.getSelectionModel().getSelectedItems();             for (Criteria c : allCriterias) {                 if(CriteriaSelected.indexOf(c)!=-1){                     temp=c;              }                  CriteriaSelected.forEach(allCriterias::remove);              ///////////////////////Delete from database/////////////////////////             functions f = new functions();             Connection con;             try {                 con = f.ConnectToDataBase();                 ResultSet rs = null;                 Statement stmt = con.createStatement();                 rs = stmt.executeQuery("deleteCriteria "+temp.getCriteriaCode());                 ResultSetMetaData rsmd = rs.getMetaData();             } catch (ClassNotFoundException | SQLException e) {                 //System.out.println("CAN'T ADD ERROR");             }             ////////////////////////////////////////////////////////////////////             }       }          //Get all of the Criterias         public ObservableList&lt;Criteria&gt; getCriteria(ArrayList&lt;String&gt; allCriterias){             ObservableList&lt;Criteria&gt; Criterias = FXCollections.observableArrayList();             for (int i=0; i&lt;allCriterias.size();i+=3) {                 Criterias.add(new Criteria(Integer.valueOf(allCriterias.get(i)),allCriterias.get(i+1),Integer.valueOf(allCriterias.get(i+2))));             }                return Criterias;         }           public void Start(Stage primaryStage) throws ClassNotFoundException, SQLException {             functions f = new functions();             Connection con = f.ConnectToDataBase();             ResultSet rs = null;             Statement stmt = con.createStatement();             System.out.println("# - Statement Created");             ArrayList&lt;String&gt; allCriterias = f.GetAllCriterias(rs, stmt);            window = primaryStage;              //criteriaCodeColumn column             TableColumn&lt;Criteria, String&gt; criteriaCodeColumn = new TableColumn&lt;&gt;("Criteria Code");             criteriaCodeColumn.setMinWidth(200);             criteriaCodeColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;("Criteria Code"));              //criteriaName column             TableColumn&lt;Criteria, String&gt; criteriaNameColumn = new TableColumn&lt;&gt;("Criteria Name");             criteriaNameColumn.setMinWidth(200);             criteriaNameColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;("Criteria Name"));              //amount column             TableColumn&lt;Criteria, String&gt; amountColumn = new TableColumn&lt;&gt;("Amount");             amountColumn.setMinWidth(200);             amountColumn.setCellValueFactory(new PropertyValueFactory&lt;&gt;("Amount"));              //criteriaCode input             criteriaCodeInput = new TextField();             criteriaCodeInput.setPromptText("Criteria Code");             criteriaCodeInput.setMinWidth(100);              //criteriaName input             criteriaNameInput = new TextField();             criteriaNameInput.setPromptText("Criteria Name");             criteriaNameInput.setMinWidth(100);            //amount input             amountInput = new TextField();             amountInput.setPromptText("Amount");             amountInput.setMinWidth(100);               //Button             Button addButton = new Button("Add");             addButton.setOnAction(e -&gt; addButtonClicked());             Button deleteButton = new Button("Delete");             deleteButton.setOnAction(e -&gt; deleteButtonClicked());             Button updateButton = new Button("update");             updateButton.setOnAction(e -&gt; updateButtonClicked());               HBox hBox = new HBox();             hBox.setPadding(new Insets(10,10,10,10));             hBox.setSpacing(10);             hBox.getChildren().addAll(criteriaCodeInput,criteriaNameInput,amountInput, addButton, deleteButton,updateButton);              table = new TableView&lt;&gt;();             table.setItems(getCriteria(allCriterias));             table.getColumns().addAll(criteriaCodeColumn, criteriaNameColumn,amountColumn);              VBox vBox = new VBox();             vBox.getChildren().addAll(table, hBox);              CriteriaList = new Scene(vBox);                 ////////////////////update window////////////////////////              Label criteriaCodeLable=new Label("Criteria Code");             Label criteriaNameLabel=new Label("Criteria Name");             Label amountLabel=new Label("Amount");              HBox hBoxUpLa = new HBox(120);             hBoxUpLa.getChildren().addAll(criteriaCodeLable,criteriaNameLabel,amountLabel);              Button okButton = new Button("ok");             okButton.setOnAction(e -&gt; okButtonClicked());             Button cancelButton = new Button("cancel");             cancelButton.setOnAction(e -&gt; cancelButtonClicked());             HBox hBoxUpBut = new HBox();             hBoxUpBut.setPadding(new Insets(10,10,10,10));             hBoxUpBut.setSpacing(100);             hBoxUpBut.getChildren().addAll(okButton,cancelButton);               criteriaCodeUp = new TextField();             criteriaCodeUp.setMinWidth(100);              criteriaNameUp = new TextField();             criteriaNameUp.setMinWidth(100);              amountUp = new TextField();             amountUp.setMinWidth(100);              HBox hBoxUp = new HBox();             hBoxUp.setPadding(new Insets(10,10,10,10));             hBoxUp.setSpacing(10);             hBoxUp.getChildren().addAll(criteriaCodeUp,criteriaNameUp,amountUp);              FlowPane flowPane=new FlowPane();             flowPane.getChildren().addAll(hBoxUpLa,hBoxUp,hBoxUpBut);             flowPane.setPadding(new Insets(10));             flowPane.setVgap(10);             flowPane.setAlignment(Pos.CENTER);             updateCriteria=new Scene(flowPane);              window.setScene(CriteriaList);             window.show();             window.setTitle("Game It - JavaFX");         }     }      import java.sql.Connection; import java.sql.DriverManager; import java.sql.ResultSet; import java.sql.ResultSetMetaData; import java.sql.SQLException; import java.sql.Statement; import java.util.ArrayList;  public class functions {     public Connection ConnectToDataBase() throws ClassNotFoundException, SQLException {          // Note :         // • SQL Server's port no can be found by using TCPView s/w         // OR         // • You can also set a fixed port for the server in Sql server TCP/IP         // properties         // • Sql Server's TCP/IP should be enabled first for this         // • A 'SQL' user should be created and GRANTED access to the Database         // • Rest is just as normal JDBC          Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");         System.out.println("# - Driver Loaded");           String server = "VERASARACHAKOV\\sqlexpress";         int port = 1433;         String user = "sa"; // Sql server username         String password = "1234";         String database = "gameIt_DBSummer";          String jdbcUrl = "jdbc:sqlserver://"+server+":"+port+";user="+user+";password="+password+";databaseName="+database+"";          Connection con = DriverManager.getConnection(jdbcUrl);         return con;     }       public ArrayList&lt;String&gt; GetAllCriterias(ResultSet rs,Statement stmt) throws SQLException {         rs = stmt.executeQuery("ShowAllCriterias");         System.out.println("# - Query Executed");         System.out.println();         System.out.println("Criterias:");         ResultSetMetaData rsmd = rs.getMetaData();         int columnsNumber = rsmd.getColumnCount();         ArrayList&lt;String&gt; answer= new ArrayList&lt;&gt;();         ArrayList&lt;String&gt; allgames = QueryToArray(rs, columnsNumber, answer) ;         return allgames;      }     ////////////////////////////////////////////////////////////////////      //////////////////PRINT QUERY//////////////////////////////////////     public void PrintQuery(ResultSet rs,int columnsNumber) throws SQLException{         while (rs.next()) {             //Print one row                       for(int i = 1 ; i &lt;= columnsNumber; i++){                   System.out.print(rs.getString(i) + " "); //Print one element of a row              }         System.out.println();//Move to the next line to print the next row.                    }         System.out.println();     }     ///////////////////////////////////////////////////////////////////      //////////////////INSERT QUERY TO ARRAY//////////////////////////////////////     public ArrayList&lt;String&gt; QueryToArray(ResultSet rs,int columnsNumber,ArrayList&lt;String&gt; answer) throws SQLException{         while (rs.next()) {         //Print one row                       for(int i = 1 ; i &lt;= columnsNumber; i++){                 answer.add(rs.getString(i));              }                }         return answer;     }     ///////////////////////////////////////////////////////////////////   }       public class Criteria {      private int criteriaCode;     private String criteriaName;     private int amount;     public Criteria() {         super();     }     public Criteria(int criteriaCode, String criteriaName, int amount) {         super();         this.criteriaCode = criteriaCode;         this.criteriaName = criteriaName;         this.amount = amount;     }     public int getCriteriaCode() {         return criteriaCode;     }     public void setCriteriaCode(int criteriaCode) {         this.criteriaCode = criteriaCode;     }     public String getCriteriaName() {         return criteriaName;     }     public void setCriteriaName(String criteriaName) {         this.criteriaName = criteriaName;     }     public int getAmount() {         return amount;     }     public void setAmount(int amount) {         this.amount = amount;     }  } </code></pre>