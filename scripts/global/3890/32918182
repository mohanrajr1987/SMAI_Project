<p>I am designing the close window functionality for my desktop application. A high level explanation of the functionality is listed:</p>  <ol> <li>If I click the Exit menuItem, it prompts a <code>ConfirmBox</code> the user to confirm whether he wants to save or not before closing the application.</li> <li>If the user click on the CloseButton on the window to force close the window (i.e. setOnCloseRequest function), the Exit menuItem event is fire off, which brings the user to case (1) again.</li> <li>Within my <code>ConfirmBox</code>code, I have bind ENTER key to save things, N key to not save things and ESCAPE key to close confirmBox. </li> <li>I have also set accelerator for the Exit menuItem (METAKEY + E). </li> </ol>  <p>Everything works fine. However, there is a minor bug if I follow this special sequence of steps. <strong>Whenever I use the accelerator for the Exit menuItem</strong> (i.e. METAKEY + E) <strong>and</strong> then I press either one of the 3 keys(ENTER, ESCAPE, N), the confirmBox closes but it pops up again. </p>  <p>I am wondering why is this happening only in this very special case?</p>  <pre><code>public class ConfirmBox {     // answer[0] determines the need to Save     // answer[1] determines whether to close the application or not     private static boolean[] answer = new boolean[]{false,false};     private static Stage window;      public static boolean[] displayWarning(String title, String message){         window = new Stage();         window.initModality(Modality.APPLICATION_MODAL);         window.setTitle(title);         window.setMinWidth(300);         Label label = new Label();         label.setText(message);         Button yesButton = new Button("Yes");         Button noButton = new Button("No");          // needToSave = true, close Application = true and close this confirmbox         yesButton.setOnAction(ey -&gt;{             answer[0] = true;             answer[1] = true;             window.close();         });          // needToSave = false, close Application = true and close this confirmbox         noButton.setOnAction(en -&gt; {             answer[0] = false;             answer[1] = true;             window.close();         });           // needToSave = false, close Application = false and close this confirmbox         window.setOnCloseRequest(e -&gt; {             answer[0] = false;             answer[1] = false;             closeConfirmBox();         });          // key binding               window.addEventHandler(KeyEvent.KEY_PRESSED, e -&gt; {             if ( e.getCode() == KeyCode.N){                 noButton.fire();                 e.consume();               }         });          // bind enter key to yesButton               window.addEventHandler(KeyEvent.KEY_PRESSED, ev -&gt; {             if (ev.getCode() == KeyCode.ENTER ){                   yesButton.fire();                ev.consume();              }         });           window.addEventFilter(KeyEvent.KEY_PRESSED, ev -&gt;{             if(ev.getCode()==KeyCode.ESCAPE){                 ev.consume();                 answer[0] = false;                 answer[1] = false;                 closeConfirmBox();             }         });          VBox layout = new VBox(20);         layout.setPadding(new Insets(20,5,20,5));         HBox bottomLayout = new HBox(50);         bottomLayout.setPadding(new Insets(20,5,20,5));         bottomLayout.getChildren().addAll(yesButton,noButton);         bottomLayout.setAlignment(Pos.CENTER);         layout.getChildren().addAll(label,bottomLayout);         layout.setAlignment(Pos.CENTER);          Scene scene = new Scene(layout);         window.setScene(scene);         window.showAndWait();         return answer;     }      public static void closeConfirmBox(){         window.close();      } } </code></pre>  <p>Within my controller class, this is how I designed my <code>MenuItem menuItemExit</code>. </p>  <pre><code>        menuItemExit.setOnAction(new EventHandler&lt;ActionEvent&gt;(){             @Override              public void handle(ActionEvent e){                 //System.out.println("set stage" + primaryStage);                 boolean[] answer;                 boolean needToSave = false;                 boolean closeApplication = false;                 if(saved.get() == false){                     answer = ConfirmBox.displayWarning("Warning", "Do you want to save your stuff?");                     needToSave = answer[0];                     closeApplication = answer[1];                 }                 if(needToSave == true){                     menuItemSave.fire();                 }                 if(closeApplication== true){                     Platform.runLater(new Runnable() {                         public void run() {                             close();                         }                     });                 }             }         });          primaryStage.setOnCloseRequest(e -&gt; {             e.consume();             menuItemExit.fire();         });          menuItemExit.setAccelerator(new KeyCodeCombination(KeyCode.E, KeyCombination.META_DOWN));      public void close(){         this.primaryStage.close();     } </code></pre>