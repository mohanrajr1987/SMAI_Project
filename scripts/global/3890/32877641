<p>I wanted to use a standard <code>TextInputDialog</code> to enable the user to enter a <code>Price</code> (a dollar value) which will then be applied to all selected rows of a <code>TableView</code> (after conversion).</p>  <p>According to the API the <code>getEditor()</code> method of <code>TextInputDialog</code> returns the <code>TextField</code> used in the <code>Dialog</code>. When I attempted to assign a <code>KeyEvent</code> handler to the editor (<code>TextField</code>) I received a compiler error on <code>tField.setOnKeyPressed</code> in NetBeans:</p>  <pre><code>"incomaptible types &lt; anonymous EventHandler&lt;java.awt.event.KeyEvent&gt;&gt; cannot be converted to EventHandler&lt;?, super javafx.Scene.Input.KeyEvent&gt;&gt; type argument T is a type-variable: T extends Event declared in interface EventHandler. </code></pre>  <p>Basic code is:       </p>  <pre><code>    TextInputDialog dialog = new TextInputDialog();     dialog.setTitle("Set PRICE per kg.");     dialog.setContentText("Price per kg:");      // Configure the EDITOR.     TextField tField = dialog.getEditor();             tField.setOnKeyPressed(new EventHandler&lt;KeyEvent&gt;()     {         @Override         public void handle(KeyEvent ke)          {             String character = ke.getCharacter();             String text = ke.getText();              if ( !LM_Utility.isNumberKeyValid(text, character, 99.99) )                 ke.consume();                         }     }); </code></pre>  <p>where the utility function I have used effectively in other places is:</p>  <pre><code>public static Boolean isNumberKeyValid(String text, String character, Double maxValue) {     Boolean valid = Boolean.FALSE;     String fullText = text + character;     Double fullNumber = Double.valueOf(fullText);       if ( ( character.matches("\\d")  || character.equals(".") ) &amp;&amp; ( fullNumber &lt;= maxValue ) )           valid = Boolean.TRUE;    return valid;    }  </code></pre>