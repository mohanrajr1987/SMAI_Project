<p>I am making an Analog Clock using JavaFx. I have a problem setting the time values. When I run the project, the clock starts with the current time. Then on the button event it takes the time value from a text field and applies it; the clock's hands move according to that set time just for a second, and then immediately reset to the current time. </p>  <p>Why is the current time overwriting the input time?</p>  <p>Here is the code:</p>  <pre><code>     delayTimeline = new Timeline();     delayTimeline.getKeyFrames().add(             new KeyFrame(new Duration(1000 - (System.currentTimeMillis() % 1000)), new EventHandler&lt;ActionEvent&gt;() {         @Override         public void handle(ActionEvent event) {             secondTimeline = new Timeline();            secondTimeline.setCycleCount(Timeline.INDEFINITE);             secondTimeline.getKeyFrames().add(                     new KeyFrame(Duration.seconds(1), new EventHandler&lt;ActionEvent&gt;() {                 @Override                 public void handle(ActionEvent event) {                     Calendar cal = Calendar.getInstance(TimeZone.getDefault());                     int hours = cal.getTime().getHours();                     int minut = cal.getTime().getMinutes();                     hours = hours * 30 + minut / 2;                     minut = minut * 6;                     int second = cal.getTime().getSeconds();                     minut = minut + second / 10;                     second = second * 6;                      hour.setRotate(hours);                     min.setRotate(minut);                     sec.setRotate(second);                  }             }));           secondTimeline.play();          }     }));     delayTimeline.play();  setButton.setOnAction(new EventHandler&lt;ActionEvent&gt;() {          @Override         public void handle(ActionEvent event) {             try{             // delayTimeline.setCycleCount(Timeline.INDEFINITE);                  // secondTimeline.pause();             // delayTimeline.pause();             // secondTimeline.pause();              Calendar cal = Calendar.getInstance(TimeZone.getDefault());             int hours = cal.getTime().getHours();              int minut = cal.getTime().getMinutes();              hours = Integer.parseInt(hr.getText())  * 30 + Integer.parseInt(minute.getText()) / 2;              minut =Integer.parseInt(minute.getText()) * 6;              int second = cal.getTime().getSeconds();              minut = Integer.parseInt(minute.getText()) + Integer.parseInt(secnd.getText()) / 10;              second =  Integer.parseInt(secnd.getText())* 6;               hour.setRotate(hours);              min.setRotate(minut);              sec.setRotate(second);           secondTimeline.playFromStart();               delayTimeline.stop();             }             catch(Exception ex){                 System.out.println(ex.getMessage());             }         }     }); </code></pre>