<p>I have a classical JavaBean which will be bond with a JavaFX TextField. </p>  <pre><code>public class Cell {      public static final String CELL_VALUE = "Cell.Value";      private Optional&lt;Integer&gt; value;      private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);       public Optional&lt;Integer&gt; getValue() {         return value;     }      public void setValue(Optional&lt;Integer&gt; value) {         Optional&lt;Integer&gt; old = this.value;         this.value = value;         this.pcs.firePropertyChange(CELL_VALUE, old, value);     }      /**      * The values must be from 1 to 9. 0 or null will be converted to Option.none.      */     public void setValue(int value) {         this.setValue(Optional.of(value));     }  } </code></pre>  <p>Also I created a StringConverter subclass:</p>  <pre><code>import java.util.Optional; import javafx.util.StringConverter;  public class CellValueStringConverter extends StringConverter&lt;Optional&lt;Integer&gt;&gt; {      @Override     public String toString(Optional&lt;Integer&gt; value) {         System.out.printf("toString()   : %s%n", value);         return value.isPresent()? String.valueOf(value.get()): "";     }      @Override     public Optional&lt;Integer&gt; fromString(String string) {         System.out.printf("fromString() : %s%n", string);         if(string.matches("^[1-9]$")) {             return Optional.of(Integer.valueOf(string));         }         if(string.isEmpty() || string.matches("^( |0)$")) {             return Optional.empty();         }          throw new IllegalArgumentException("Illegal value for a Cell: " + string);     }   } </code></pre>  <p>In the controller class, before the main stage become visible, I made the binding between Cell value and TextField:</p>  <pre><code>ObjectProperty&lt;Optional&lt;Integer&gt;&gt; valueProperty = JavaBeanObjectPropertyBuilder.create().bean(cell)         .name("value").build(); final StringProperty textProperty = textField.textProperty(); // Binding ... textProperty.bindBidirectional(valueProperty, new CellValueStringConverter());  textField.addEventFilter(MouseEvent.MOUSE_CLICKED, me -&gt; {     if (me.getClickCount() == 2) {         cell.setValue(random.nextInt(8) + 1);     } });          textProperty.addListener(                 (ov, oldValue, newValue) -&gt; System.out.printf("textProperty : %s -&gt; %s%n", oldValue, newValue));         valueProperty.addListener(                 (ov, oldValue, newValue) -&gt; System.out.printf("valueProperty: %s -&gt; %s%n", oldValue, newValue));         cell.addPropertyChangeListener(                 evt -&gt; System.out.printf("cell         : %s -&gt; %s%n", evt.getOldValue(), evt.getNewValue())); </code></pre>  <p>When I start the application, I get the message <code>toString()   : Optional.empty</code>. When I type a value (Let's say "4") in an empty TextField, these messages are printed:</p>  <pre><code>fromString() : 4 cell         : Optional.empty -&gt; Optional[4] valueProperty: Optional.empty -&gt; Optional[4] textProperty :  -&gt; 4 </code></pre>  <p>If I type "8" in this TextField I got this:</p>  <pre><code>fromString() :  cell         : Optional[4] -&gt; Optional.empty valueProperty: Optional[4] -&gt; Optional.empty textProperty : 4 -&gt;  fromString() : 8 cell         : Optional.empty -&gt; Optional[8] valueProperty: Optional.empty -&gt; Optional[8] textProperty :  -&gt; 8 </code></pre>  <p>Finally, if I type "0", the Cell Will become empty:</p>  <pre><code>fromString() :  cell         : Optional[8] -&gt; Optional.empty valueProperty: Optional[8] -&gt; Optional.empty textProperty : 8 -&gt;  </code></pre>  <p>So far, so good. But I if double click over the TextField, instead replace the text, nothing happens. Suppose that the cell value (and the texfField) is 4. When I double click, I get this message:</p>  <pre><code>cell         : Optional[4] -&gt; Optional[8] </code></pre>  <p>However the textField continues showing "4". The message in <code>CellValueStringConverter.toString()</code> is not showed.</p>  <p>Supposedly, when I wrapped the cell value in a <code>ObjectProperty</code> (<code>JavaBeanObjectPropertyBuilder.create().bean(cell).name("value").build()</code>), it should observe all changes in the value property. But is is not occuring. What is missing here?</p>  <p>Thanks,</p>  <p>Rafael Afonso </p>