<p>Hi this is the structure of my application. MCVE:</p>  <pre><code> @FXML void OnSimulateClick(ActionEvent event) throws IOException {     if (event.getSource() == simulatebutton) {         primaryStage = (Stage) simulatebutton.getScene().getWindow();         pane = (Pane) FXMLLoader.load(TDC.class.getResource("view/Simulation.fxml"));         scene = new Scene(pane);         primaryStage.setScene(scene);         primaryStage.show();     }  } </code></pre>  <p>FXML    </p>  <pre><code>&lt;Pane prefHeight="500.0" prefWidth="750.0"   xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.mdw.tdc.view.SimulationController" &gt; &lt;children&gt;   &lt;Button fx:id="abortbutton" layoutX="650.0" layoutY="230.0"  onAction="#onAbortClicked"  text="Abort" /&gt;   &lt;Button fx:id="homebutton" layoutX="650.0" layoutY="330.0"onAction="#onHomeClicked" text="Home"  /&gt;   &lt;TextArea fx:id="logscreen" layoutX="21.0" layoutY="20.0" prefHeight="395.0" prefWidth="600.0" /&gt; &lt;/children&gt; &lt;/Pane&gt; </code></pre>  <p>controller</p>  <pre><code>public class SimulationController implements Initializable { @FXML private Button homebutton; @FXML private TextArea logscreen; @FXML private Button abortbutton; private Simulate simulate;  @Override public void initialize(URL location, ResourceBundle resources) {         simulate = new Simulate(list, logscreen);         simulate.setOnCancelled(new EventHandler&lt;WorkerStateEvent&gt;() {              @Override             public void handle(WorkerStateEvent event) {                 System.out.println("Simulation Aborted by User...");             }         });         simulate.setOnFailed(new EventHandler&lt;WorkerStateEvent&gt;() {              @Override             public void handle(WorkerStateEvent event) {                 System.out.println("Simulation Failed...");             }         });         simulate.setOnSucceeded(new EventHandler&lt;WorkerStateEvent&gt;() {              @Override             public void handle(WorkerStateEvent event) {                 System.out.println("Simulation Success...");             }         });         simulate.start(); }   @FXML void onAbortClicked(ActionEvent event) throws IOException, InterruptedException {     if (event.getSource() == abortbutton) {         simulate.cancel();     } } }  @FXML void onHomeClicked(ActionEvent event) throws IOException {     if (event.getSource() == homebutton) {         simulate.reset();         /*back to Home screen*/     pane = (Pane) FXMLLoader.load(TDC.class.getResource("view/Simulation.fxml"));     scene = new Scene(pane);     primaryStage.setScene(scene);     primaryStage.show();     } } </code></pre>  <p>Simulate Sercice    </p>  <pre><code>public class Simulate extends Service&lt;Void&gt; { private ObservableList&lt;TestData&gt; list; private TextArea logscreen; private ConsoleStream consoleStream;  public Simulate(ObservableList&lt;TestData&gt; list, TextArea logscreen) {     this.list = list;     this.logscreen = logscreen; }  @Override protected Task&lt;Void&gt; createTask() {     return new Task&lt;Void&gt;() {          @Override         protected Void call() throws Exception {             consoleStream = new ConsoleStream(logscreen);             consoleStream.start();             /*Some Code*/             System.out.println("End of  Simulation");             return null;         }     }; }  /* Few other methods called from inside my code inside createTask()&gt;call() method */  // using this method to flag when cancelled public void isFlagged(boolean b) {     consoleStream.isFlagged(true);     consoleStream.setOnCancelled(new EventHandler&lt;WorkerStateEvent&gt;() {          @Override         public void handle(WorkerStateEvent event) {             consoleStream.reset();         }     });     consoleStream.cancel();  } } </code></pre>  <p>ConsoleStream Service</p>  <pre><code>public class ConsoleStream extends Service&lt;Void&gt; { private PipedOutputStream outPipedOutputStream, errorPipedOutputStream; private PipedInputStream outPipedInputStream, errorPipedInputStream; private TextArea logscreen; private Console outCon;  public ConsoleStream(TextArea logscreen) {     this.logscreen = logscreen; }  @Override protected Task&lt;Void&gt; createTask() {     return new Task&lt;Void&gt;() {          @Override         protected Void call() throws Exception {             try {                  System.err.flush();                 System.out.flush();                  outPipedInputStream = new PipedInputStream();                 outPipedOutputStream = new PipedOutputStream(                         outPipedInputStream);                  System.setOut(new PrintStream(outPipedOutputStream));                  errorPipedInputStream = new PipedInputStream();                 errorPipedOutputStream = new PipedOutputStream(                         errorPipedInputStream);                  System.setErr(new PrintStream(errorPipedOutputStream));                  outCon = new Console(outPipedInputStream, logscreen);                 outCon.setOnCancelled(new EventHandler&lt;WorkerStateEvent&gt;() {                      @Override                     public void handle(WorkerStateEvent event) {                         // TODO Auto-generated method stub                         System.out.println("ConsoleStream Aborted by User...");                         outCon.reset();                     }                 });                 outCon.start();             } catch (IOException e) {                 e.printStackTrace();             }             return null;         }     }; }  public void isFlagged(boolean b) {     outCon.cancel(); } } </code></pre>  <p>Console Service</p>  <pre><code>public class Console extends Service&lt;Void&gt; {  private final InputStream inputStream; private TextArea logscreen;  public Console(PipedInputStream errorPipedInputStream, TextArea logscreen) {     inputStream = errorPipedInputStream;     this.logscreen = logscreen; }  @Override protected Task&lt;Void&gt; createTask() {     return new Task&lt;Void&gt;() {          @Override         protected Void call() throws Exception {             while(isCancelled()){                 inputStream.close();                 break;             }                            try {                 InputStreamReader is = new InputStreamReader(inputStream);                 BufferedReader br = new BufferedReader(is);                 while (br.readLine() != null) {                     String read = br.readLine();                     logscreen.appendText(read + "\n");                 }                 is.close();                 br.close();             } catch (IOException e) {                 e.printStackTrace();             }             return null;         }     }; }  } </code></pre>  <p>This is the first attempt at JavaFx not sure this is good way of doing. any suggestions are appriciated Thanks</p>