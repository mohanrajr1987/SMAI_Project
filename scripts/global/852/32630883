<p>I am thinking about how to design a REST api for a tree like structure. I read already this one: <a href="http://stackoverflow.com/questions/2150171/how-should-a-rest-url-schema-look-like-for-a-tree-hierarchy">How should a REST URL schema look like for a tree hierarchy?</a> and a lot of other resources, but still am on the fence between several possibilities.</p>  <p>This is my tree (root is artificial as it is only displayed for UI purposes, the datamodel has no root).</p>  <pre>  root ___ |credit| __>10000__ |status| __=gold__ || = helpFast|| || = callBack ||                              |status| __=silver__ || = helpFast||       ___ |node| __branch__ |another_node| __another_branch__ ||result_node||   ...  </pre>  <p>Where <strong>| |</strong> is a node and __ >xxx__ is a condition on a branch, so the first line reads as: If Credit > 10000 and status = gold then helpFast and callBack.</p>  <p>From a very abstract point of view this consists of nodes and branches. So my first Idea is to have two resources:</p>  <ul> <li>/tree/treename/node with PUT, POST and DELETE</li> <li>/tree/treename/branch with PUT, POST and DELETE</li> </ul>  <p>and one GET resource:</p>  <ul> <li>/tree/treename</li> </ul>  <p>which returns the whole data as one.</p>  <p>This is all we need for now.</p>  <p>However, you can see that we have nodes here with different meanings.</p>  <p>First there is a condition node (credit) with a condition branch (>10000) which belongs together and then there is a result node (a leaf basically) that may contain many assignments and another special field that is unique to the assignment and does not exist in a condition.</p>  <p>So another approach is to have:</p>  <ul> <li>/tree/name/conditionNode PUT, POST, DELETE</li> <li>/tree/name/branch PUT, POST, DELETE</li> <li>/tree/name/leave PUT, POST, DELETE</li> <li>/tree/name/result PUT, POST, DELETE (just as a convenience for the leave)</li> </ul>  <p>Or maybe use something completely different.</p>  <p>I find all solutions that I came up with having some disadvantages, so I am open for every idea and discussion points or considerations.</p>  <p>Thanks, Sven</p>  <p><strong>EDIT</strong> When using the plain <code>node</code>, <code>branch</code> approach I would identify the transferred data by a <code>type</code> key value pair that would contain types like conditionNode, resultNode, result and may be some more. This could map to possible resources.</p>