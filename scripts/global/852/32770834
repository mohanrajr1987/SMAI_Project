<p>I am trying to write a program that can extract specific resources from a PE file. Basically re-writing Windows API FindResource(), LoadResource(), SizeofResource(). However my code is failing and I cant seem to figure out why.</p>  <p>I am writing resources to the PE File @ RT_RCDATA. I am writing 10 Resource to the PE File. The Names of the Resources are 10, 11, 12.. 20</p>  <p>I can retrieve my first resource (10) but then I try to find resource 11, it fails</p>  <pre><code>PBYTE GetBaseAddress() {     return static_cast&lt;LPBYTE&gt;(NtCurrentTeb()-&gt;Peb-&gt;ImageBaseAddress); }  PIMAGE_RESOURCE_DATA_ENTRY GetResource(WORD argID) {     printf("Trying To Find Resource With ID: %i\n", argID);      // Get Self     PBYTE data = reinterpret_cast&lt;PBYTE&gt;(reinterpret_cast&lt;HMODULE&gt;(GetBaseAddress()));      // Get The DOS Header     PIMAGE_DOS_HEADER IDH = reinterpret_cast&lt;PIMAGE_DOS_HEADER&gt;(data);      // Get The NT Header Using 'e_lfanew' As A Pointer To The NT Header     PIMAGE_NT_HEADERS ISH = reinterpret_cast&lt;PIMAGE_NT_HEADERS&gt;(data + IDH-&gt;e_lfanew);      // Get The Resource Directory Using NT Header -&gt; Optional Header -&gt; Data Directory     PIMAGE_RESOURCE_DIRECTORY IRD = reinterpret_cast&lt;PIMAGE_RESOURCE_DIRECTORY&gt;(data + ISH-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_RESOURCE].VirtualAddress);      // Convert Resource Directory To PBYTE     PBYTE resData = reinterpret_cast&lt;PBYTE&gt;(IRD);      // Entry Point To Directory     PIMAGE_RESOURCE_DIRECTORY_ENTRY IRDE = reinterpret_cast&lt;PIMAGE_RESOURCE_DIRECTORY_ENTRY&gt;(IRD + 1);      // Loop All Resource Directories     for (int i = 0; i &lt; IRD-&gt;NumberOfIdEntries; i++)     {         // Find Directory We Want (Which Is 10 Because We Want RT_RCDATA)         if (IRDE[i].Id == 10)         {             // Enter This Directory             IRD = reinterpret_cast&lt;PIMAGE_RESOURCE_DIRECTORY&gt;(resData + IRDE[i].OffsetToDirectory);             IRDE = reinterpret_cast&lt;PIMAGE_RESOURCE_DIRECTORY_ENTRY&gt;(IRD + 1);              for (int j = 0; j &lt; IRD-&gt;NumberOfIdEntries; j++)             {                 if (IRDE[j].Id == argID)                 {                     printf("Found Our Resource!\n");                      IRD = reinterpret_cast&lt;PIMAGE_RESOURCE_DIRECTORY&gt;(resData + IRDE[j].OffsetToDirectory);                     IRDE = reinterpret_cast&lt;PIMAGE_RESOURCE_DIRECTORY_ENTRY&gt;(IRD + 1);                      return reinterpret_cast&lt;PIMAGE_RESOURCE_DATA_ENTRY&gt;(resData + IRDE-&gt;OffsetToData);                 }             }         }      }     return(NULL); } </code></pre>