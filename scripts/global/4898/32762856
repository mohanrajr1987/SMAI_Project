<p>Is there a way to make a collection of existing class fields?</p>  <p>I have a class with a lot of fields/properties of various types with meaningful names.</p>  <pre><code>class ExampleClass {    public string meaningfulName1 { get; set;}    public double meaningfulName2 { get; set;}    ...    public myOtherClass meaningfulNameN { get; set;} } </code></pre>  <p>I need to read values for those properties from a file, generated in external (not mine) program.</p>  <p>As there're a lot of fields/properties, reading values and assigning them one by one seems inefficient. So I want a collection of those fields/properties. Something like</p>  <pre><code>foreach (fieldReference in ExampleClass.fieldReferenceCollection) {    readValueFromFile(fieldReference); }  </code></pre>  <p>But how do I make one while keeping all the names?</p>  <p>Making a collection with all the parameters values instead of separate fields seems logical, but field names would be lost then. And, given the number of fields, we'd like to keep those names if possible to simplify further development.</p>  <p>So I need separate fields/properties AND a collection of them to be available at the same time.</p>  <p>Dictionary collection is not exactly fast, afaik, so parameter names as keys for values doesn't seem exactly fitting too.</p>  <p>Another option I found is reflection, but I'm not yet sure how the order of fields in reflected collection is determined. Order of fields is very important as the file, I'm reading values from, has no metadata, just a sequence of hex values. Also reflection seems to be overkill for reading values from a file, and it is slow too, afaik.</p>  <p>So the question is: what should I do in order to have class fields and a collection of them at the same time?</p>  <p>Are my assumptions wrong about this task? Is there any other approach to reading a lot of dumb values from a file into a complex object?</p>  <p>P.S. My first SO question and English is my very second language, so I'm sorry for the mistakes.</p>