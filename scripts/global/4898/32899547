<p>I'm using an MVP pattern to expose field values from my View to my Presenter. I'd like to add an <code>ErrorProvider</code> to my View and add the errors from the Presenter, but that would mean exposing my controls, which I'm not keen on doing. My solution involved creating an <code>ExposableControlValue</code> class that exposes a value generically and has the added function <code>CreateError(string errorMessage)</code>. </p>  <pre><code>public interface IExposableControlValue&lt;T&gt; {    T Value { get; set; }    void CreateError(string errorMessage);    void ClearErrors();  } </code></pre>  <p>My thought was, I'll pass in the <code>Property</code> by reference and now my generic value will essentially point to the <code>Control</code>'s backing field. All the <code>ErrorProvider</code> logic could be handled View side and all of the error checking could be handled by the presenter. </p>  <p>Obviously, I'm here because you can't pass the <code>Property</code> by reference, and all of the examples I've seen aren't close enough to my situation that I can decipher them for this example. </p>  <p>I'd also be fine with setting <code>T Get()</code> , <code>Set(T value)</code>methods dynamically if there is a way to do that, but in short, I'd like to mimic having that Property 'live' inside of my class instance.</p>