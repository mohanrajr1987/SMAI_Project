<p>This is the setup of the problem.</p>  <p>I have a VB.NET solution in .net 4.5.2 which uses the Activator via Remoting to create an instance of another class in another library. It also has a AssemblyResolve event handler.</p>  <pre><code>Sub Main   AddHandler AppDomain.CurrentDomain.AssemblyResolve, AddressOf MyResolveHandler    Dim assembly As Reflection.Assembly   Dim path As String = "c:\SomeAssembly.dll"   assembly = Reflection.Assembly.LoadFrom(path)   Dim myType as Type = assembly.GetType("Notification", True, True)   Dim instance as Object = Activator.CreateInstance(myType)   myType.InvokeMember("RunThis", BindingFlags.InvokeMethod, Nothing, instance, Nothing)  End Sub  Private Function MyResolveHandler(ByVal sender As Object, ByVal e As ResolveEventArgs) As Reflection.Assembly   Return MInvokerHelper.LoadAssembly(e.Name) End Function </code></pre>  <p>Now in the SomeAssembly.dll, in function RunThis, I just use a string from the resources file.</p>  <pre><code>Function RunThis()     Dim s as String = My.Resources.testthisstring End Function </code></pre>  <p>In SomeAssembly.dll, I have my Resources.resx file with the correct string in.</p>  <p>Now when I run the Main function, and I set a breakpoint at the MyResolveHandler line of code, I will get a stack trace similar to the below.</p>  <pre><code>MyResolveHandler(Object sender, System.ResolveEventArgs e) mscorlib.dll!System.AppDomain.OnAssemblyResolveEvent(System.Reflection.RuntimeAssembly assembly, string assemblyFullName)   Unknown [Native to Managed Transition]   mscorlib.dll!System.Reflection.RuntimeAssembly.InternalGetSatelliteAssembly(string name, System.Globalization.CultureInfo culture, System.Version version, bool throwOnFileNotFound, ref System.Threading.StackCrawlMark stackMark) Unknown mscorlib.dll!System.Resources.ManifestBasedResourceGroveler.GetSatelliteAssembly(System.Globalization.CultureInfo lookForCulture, ref System.Threading.StackCrawlMark stackMark)    Unknown mscorlib.dll!System.Resources.ManifestBasedResourceGroveler.GrovelForResourceSet(System.Globalization.CultureInfo culture, System.Collections.Generic.Dictionary&lt;string,System.Resources.ResourceSet&gt; localResourceSets, bool tryParents, bool createIfNotExists, ref System.Threading.StackCrawlMark stackMark)    Unknown mscorlib.dll!System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo requestedCulture, bool createIfNotExists, bool tryParents, ref System.Threading.StackCrawlMark stackMark) Unknown mscorlib.dll!System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo culture, bool createIfNotExists, bool tryParents) Unknown mscorlib.dll!System.Resources.ResourceManager.GetString(string name, System.Globalization.CultureInfo culture) SomeAssembly.My.Resources.get_testthisstring SomeAssembly.Runthis() </code></pre>  <p>I watched the ResolveEventArgs.Name, and the value was SomeAssembly.resources.</p>  <p>The resources file is an embedded resource in the SomeAssembly.dll. Why is it asking for SomeAssembly.resources ? It looks like the resourcemanager is not able to find the embedded resources for that dll. Anyone has a clue on how to work around this ? </p>