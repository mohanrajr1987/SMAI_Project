<p>I have a column in my database called "kiss" and I am trying to display it on my android device screen but I keep getting the "NullPointerException". But this only happens with the column kiss. if i put store.getStore_desc() in the first line of the DetailActivity.java for example the application runs without errors.</p>  <p>link to sql image: <a href="http://sabrazimportexport.com/error.PNG" rel="nofollow">http://sabrazimportexport.com/error.PNG</a></p>  <p><strong>1.Store.java</strong></p>  <pre><code>public class Store extends Rating implements Serializable{   private static final long serialVersionUID = 3855881834307278660L;  @JsonProperty("category_id") int category_id;  @JsonProperty("created_at") int created_at;  @JsonProperty("distance") double distance;  @JsonProperty("email") String email;  @JsonProperty("featured") int featured;  @JsonProperty("icon_id") int icon_id;  @JsonProperty("lat") double lat;  @JsonProperty("lon") double lon;  @JsonProperty("phone_no") String phone_no;  @JsonProperty("rating_count") int rating_count;  @JsonProperty("rating_total") int rating_total;  @JsonProperty("sms_no") String sms_no;  @JsonProperty("store_address") String store_address;  @JsonProperty("store_desc") String store_desc;  @JsonProperty("store_id") int store_id;  @JsonProperty("store_name") String store_name;  @JsonProperty("updated_at") int updated_at;  @JsonProperty("website") String website;  @JsonProperty("kiss") String kiss;  @JsonProperty("is_deleted") int is_deleted;  @JsonProperty("slug") String slug;    public void setSlug(String slug) {     this.slug = slug; }  public String getSlug() {     return slug; }  public void setCategory_id(int category_id) {     this.category_id = category_id; }  public int getCategory_id() {     return category_id; }    public void setDistance(double distance) {     this.distance = distance; }  public double getDistance() {     return distance; }    public void setEmail(String email) {     this.email = email; }  public String getEmail() {     return email; }    public void setFeatured(int featured) {     this.featured = featured; }  public int getFeatured() {     return featured; }  public String getKiss() {     return kiss; }  public void setKiss(String kiss) {     this.kiss = kiss;  }  public void setIcon_id(int icon_id) {     this.icon_id = icon_id; }  public int getIcon_id() {     return icon_id; }    public void setLat(double lat) {     this.lat = lat; }  public double getLat() {     return lat; }    public void setLon(double lon) {     this.lon = lon; }  public double getLon() {     return lon; }    public void setPhone_no(String phone_no) {     this.phone_no =phone_no; }  public String getPhone_no() {     return phone_no; }    public void setRating_count(int rating_count) {     this.rating_count =rating_count; }  public int getRating_count() {     return rating_count; }    public void setRating_total(int rating_total) {     this.rating_total =rating_total; }  public int getRating_total() {     return rating_total; }    public void setSms_no(String sms_no) {     this.sms_no =sms_no; }  public String getSms_no() {     return sms_no; }    public void setStore_address(String store_address) {     this.store_address =store_address; }  public String getStore_address() {     return store_address; }    public void setStore_desc(String store_desc) {     this.store_desc =store_desc; }  public String getStore_desc() {     return store_desc; }    public void setStore_id(int store_id) {     this.store_id =store_id; }  public int getStore_id() {     return store_id; }    public void setStore_name(String store_name) {     this.store_name =store_name; }  public String getStore_name() {     return store_name; }    public void setWebsite(String website) {     this.website = website; }  public String getWebsite() {     return website; }    public void setCreated_at(int created_at) {     this.created_at = created_at; }  public int getCreated_at() {     return created_at; }    public void setUpdated_at(int updated_at) {     this.updated_at = updated_at; }  public int getUpdated_at() {     return updated_at; }    public void setIs_deleted(int is_deleted) {     this.is_deleted = is_deleted; }  public int getIs_deleted() {     return is_deleted; }   } </code></pre>  <p><strong>2. Queries.java</strong></p>  <pre><code>public class Queries {  private SQLiteDatabase db; private DbHelper dbHelper;   public Queries(SQLiteDatabase db, DbHelper dbHelper) {     this.db = db;     this.dbHelper = dbHelper; }  public void deleteTable(String tableName) {      db = dbHelper.getWritableDatabase();     try{         db.delete(tableName, null, null);     }     catch(Exception e) {         e.printStackTrace();     }     db.close(); }  public void insertNews(News entry) {      db = dbHelper.getWritableDatabase();     ContentValues values = new ContentValues();     values.put("news_content", entry.getNews_content());     values.put("news_title", entry.getNews_title());     values.put("news_url", entry.getNews_url());     values.put("photo_url", entry.getPhoto_url());     values.put("created_at", entry.getCreated_at());     values.put("is_deleted", entry.getIs_deleted());     values.put("news_id", entry.getNews_id());     values.put("updated_at", entry.getUpdated_at());      db.insert("news", null, values);     db.close(); }  public void insertStore(Store entry) {      db = dbHelper.getWritableDatabase();     ContentValues values = new ContentValues();     values.put("email", entry.getEmail());     values.put("phone_no", entry.getPhone_no());     values.put("sms_no", entry.getSms_no());     values.put("store_address", entry.getStore_address());     values.put("store_desc", entry.getStore_desc());     values.put("store_name", entry.getStore_name());     values.put("website", entry.getWebsite());     values.put("category_id", entry.getCategory_id());     values.put("created_at", entry.getCreated_at());     values.put("distance", entry.getDistance());     values.put("kiss", entry.getKiss());       values.put("featured", entry.getFeatured());     values.put("icon_id", entry.getIcon_id());     values.put("is_deleted", entry.getIs_deleted());     values.put("lat", entry.getLat());     values.put("lon", entry.getLon());     values.put("rating_count", entry.getRating_count());     values.put("rating_total", entry.getRating_total());     values.put("store_id", entry.getStore_id());     values.put("updated_at", entry.getUpdated_at());      db.insert("stores", null, values);     db.close(); }  public void updateStore(Store entry) {      db = dbHelper.getWritableDatabase();     ContentValues values = new ContentValues();     values.put("email", entry.getEmail());     values.put("phone_no", entry.getPhone_no());     values.put("sms_no", entry.getSms_no());     values.put("store_address", entry.getStore_address());     values.put("store_desc", entry.getStore_desc());     values.put("store_name", entry.getStore_name());     values.put("website", entry.getWebsite());     values.put("category_id", entry.getCategory_id());     values.put("created_at", entry.getCreated_at());     values.put("distance", entry.getDistance());     values.put("kiss", entry.getKiss());       values.put("featured", entry.getFeatured());     values.put("icon_id", entry.getIcon_id());     values.put("is_deleted", entry.getIs_deleted());     values.put("lat", entry.getLat());     values.put("lon", entry.getLon());     values.put("rating_count", entry.getRating_count());     values.put("rating_total", entry.getRating_total());     values.put("store_id", entry.getStore_id());     values.put("updated_at", entry.getUpdated_at());     values.put("updated_at", entry.getUpdated_at());      db.update("stores", values, "store_id = " + entry.getStore_id(), null);     db.close(); }  public void insertCategory(Category entry) {      db = dbHelper.getWritableDatabase();     ContentValues values = new ContentValues();     values.put("category", entry.getCategory());     values.put("category_icon", entry.getCategory_icon());     values.put("category_id", entry.getCategory_id());     values.put("created_at", entry.getCreated_at());     values.put("is_deleted", entry.getIs_deleted());     values.put("updated_at", entry.getUpdated_at());      db.insert("categories", null, values);     db.close(); }  public void insertPhoto(Photo entry) {      db = dbHelper.getWritableDatabase();     ContentValues values = new ContentValues();     values.put("photo_url", entry.getPhoto_url());     values.put("thumb_url", entry.getThumb_url());     values.put("created_at", entry.getCreated_at());     values.put("is_deleted", entry.getIs_deleted());     values.put("photo_id", entry.getPhoto_id());     values.put("store_id", entry.getStore_id());     values.put("updated_at", entry.getUpdated_at());      db.insert("photos", null, values);     db.close(); }  public void insertFavorite(Favorite entry) {      db = dbHelper.getWritableDatabase();     ContentValues values = new ContentValues();     values.put("store_id", entry.getStore_id());      db.insert("favorites", null, values);     db.close(); }  public void deleteFavorite(int store_id) {      db = dbHelper.getWritableDatabase();     db.delete("favorites", "store_id = " + store_id, null);     db.close(); }  public Favorite getFavoriteByStoreId(int storeId) {      Favorite entry = null;     String sql = String.format("SELECT * FROM favorites WHERE store_id = %d", storeId);     db = dbHelper.getReadableDatabase();     Cursor mCursor = db.rawQuery(sql , null);      mCursor.moveToFirst();      if (!mCursor.isAfterLast()) {         do {             entry = new Favorite();             entry.setFavorite_id( mCursor.getInt( mCursor.getColumnIndex("favorite_id")) );             entry.setStore_id( mCursor.getInt( mCursor.getColumnIndex("store_id")) );         } while (mCursor.moveToNext());     }     mCursor.close();     dbHelper.close();     return entry; }  public ArrayList&lt;News&gt; getNews() {      ArrayList&lt;News&gt; list = new ArrayList&lt;News&gt;();     db = dbHelper.getReadableDatabase();     Cursor mCursor = db.rawQuery("SELECT * FROM news ORDER BY updated_at DESC", null);      mCursor.moveToFirst();      if (!mCursor.isAfterLast()) {         do {              News news = formatNews(mCursor);              list.add(news);         } while (mCursor.moveToNext());     }     mCursor.close();     dbHelper.close();      return list; }  public News getNewsByNewsId(int newsId) {      News news = null;     db = dbHelper.getReadableDatabase();      String sql = String.format("SELECT * FROM news WHERE news_id = %d", newsId);     Cursor mCursor = db.rawQuery(sql, null);      mCursor.moveToFirst();      if (!mCursor.isAfterLast()) {         do {              news = formatNews(mCursor);          } while (mCursor.moveToNext());     }     mCursor.close();     dbHelper.close();      return news; }  public ArrayList&lt;Favorite&gt; getFavorites() {      ArrayList&lt;Favorite&gt; list = new ArrayList&lt;Favorite&gt;();     db = dbHelper.getReadableDatabase();     Cursor mCursor = db.rawQuery("SELECT * FROM favorites", null);      mCursor.moveToFirst();      if (!mCursor.isAfterLast()) {         do {              Favorite fave = new Favorite();             fave.setFavorite_id( mCursor.getInt( mCursor.getColumnIndex("favorite_id")) );             fave.setStore_id( mCursor.getInt( mCursor.getColumnIndex("store_id")) );              list.add(fave);         } while (mCursor.moveToNext());     }     mCursor.close();     dbHelper.close();      return list; }   public ArrayList&lt;Store&gt; getStores() {      ArrayList&lt;Store&gt; list = new ArrayList&lt;Store&gt;();     db = dbHelper.getReadableDatabase();     Cursor mCursor = db.rawQuery("SELECT * FROM stores", null);      mCursor.moveToFirst();      if (!mCursor.isAfterLast()) {         do {              Store entry = formatStore(mCursor);              list.add(entry);         } while (mCursor.moveToNext());     }     mCursor.close();     dbHelper.close();      return list; }  public ArrayList&lt;Store&gt; getStoresByCategoryId(int categoryId) {      ArrayList&lt;Store&gt; list = new ArrayList&lt;Store&gt;();     db = dbHelper.getReadableDatabase();      String sql = String.format("SELECT * FROM stores WHERE category_id = %d", categoryId);     Cursor mCursor = db.rawQuery(sql, null);      mCursor.moveToFirst();      if (!mCursor.isAfterLast()) {         do {              Store entry = formatStore(mCursor);              list.add(entry);         } while (mCursor.moveToNext());     }     mCursor.close();     dbHelper.close();      return list; }   public Store getStoresByStoreId(int storeId) {      Store entry = null;     db = dbHelper.getReadableDatabase();      String sql = String.format("SELECT * FROM stores WHERE store_id = %d", storeId);     Cursor mCursor = db.rawQuery(sql, null);      mCursor.moveToFirst();      if (!mCursor.isAfterLast()) {         do {              entry = formatStore(mCursor);          } while (mCursor.moveToNext());     }     mCursor.close();     dbHelper.close();      return entry; }  public ArrayList&lt;Store&gt; getStoresFeatured() {      ArrayList&lt;Store&gt; list = new ArrayList&lt;Store&gt;();     db = dbHelper.getReadableDatabase();     Cursor mCursor = db.rawQuery("SELECT * FROM stores WHERE featured = 1", null);      mCursor.moveToFirst();      if (!mCursor.isAfterLast()) {         do {              Store entry = formatStore(mCursor);              list.add(entry);         } while (mCursor.moveToNext());     }     mCursor.close();     dbHelper.close();      return list; }  public Photo getPhotoByStoreId(int storeId) {      Photo entry = null;     db = dbHelper.getReadableDatabase();      String sql = String.format("SELECT * FROM photos WHERE store_id = %d ORDER BY photo_id ASC", storeId);     Cursor mCursor = db.rawQuery(sql, null);      mCursor.moveToFirst();      if (!mCursor.isAfterLast()) {         do {              entry = formatPhoto(mCursor);          } while (mCursor.moveToNext());     }     mCursor.close();     dbHelper.close();      return entry; }  public ArrayList&lt;Photo&gt; getPhotosByStoreId(int storeId) {      ArrayList&lt;Photo&gt; list = new ArrayList&lt;Photo&gt;();     db = dbHelper.getReadableDatabase();      String sql = String.format("SELECT * FROM photos WHERE store_id = %d", storeId);     Cursor mCursor = db.rawQuery(sql, null);       mCursor.moveToFirst();      if (!mCursor.isAfterLast()) {         do {              Photo entry = formatPhoto(mCursor);              list.add(entry);         } while (mCursor.moveToNext());     }     mCursor.close();     dbHelper.close();      return list; }   public ArrayList&lt;Category&gt; getCategories() {      ArrayList&lt;Category&gt; list = new ArrayList&lt;Category&gt;();     db = dbHelper.getReadableDatabase();     Cursor mCursor = db.rawQuery("SELECT * FROM categories ORDER BY category ASC", null);      mCursor.moveToFirst();      if (!mCursor.isAfterLast()) {         do {              Category entry = formatCategory(mCursor);              list.add(entry);         } while (mCursor.moveToNext());     }     mCursor.close();     dbHelper.close();      return list; }  public ArrayList&lt;Store&gt; getStoresFavorites() {      ArrayList&lt;Store&gt; list = new ArrayList&lt;Store&gt;();     db = dbHelper.getReadableDatabase();     Cursor mCursor = db.rawQuery("SELECT * FROM stores INNER JOIN favorites ON stores.store_id = favorites.store_id ORDER BY stores.store_name", null);      mCursor.moveToFirst();      if (!mCursor.isAfterLast()) {         do {              Store entry = formatStore(mCursor);              list.add(entry);         } while (mCursor.moveToNext());     }     mCursor.close();     dbHelper.close();      return list; }   public ArrayList&lt;String&gt; getCategoryNames() {      ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();     db = dbHelper.getReadableDatabase();     Cursor mCursor = db.rawQuery("SELECT * FROM categories ORDER BY category ASC", null);      mCursor.moveToFirst();      if (!mCursor.isAfterLast()) {         do {             list.add(mCursor.getString( mCursor.getColumnIndex("category")));         } while (mCursor.moveToNext());     }     mCursor.close();     dbHelper.close();      return list; }   public Category getCategoryByCategory(String cat) {      Category entry = null;     db = dbHelper.getReadableDatabase();      String sql = String.format("SELECT * FROM categories WHERE category = '%s' ORDER BY category ASC", cat);     Cursor mCursor = db.rawQuery(sql, null);      mCursor.moveToFirst();      if (!mCursor.isAfterLast()) {         do {              entry = formatCategory(mCursor);          } while (mCursor.moveToNext());     }     mCursor.close();     dbHelper.close();      return entry; }  public Category getCategoryByCategoryId(int categoryId) {      Category entry = null;     db = dbHelper.getReadableDatabase();      String sql = String.format("SELECT * FROM categories WHERE category_id = %d", categoryId);     Cursor mCursor = db.rawQuery(sql, null);      mCursor.moveToFirst();      if (!mCursor.isAfterLast()) {         do {              entry = formatCategory(mCursor);          } while (mCursor.moveToNext());     }     mCursor.close();     dbHelper.close();      return entry; }  public Category formatCategory(Cursor mCursor) {      Category entry = new Category();     entry.setCategory( mCursor.getString( mCursor.getColumnIndex("category")) );     entry.setCategory_icon( mCursor.getString( mCursor.getColumnIndex("category_icon")) );     entry.setCategory_id( mCursor.getInt( mCursor.getColumnIndex("category_id")));     entry.setCreated_at(mCursor.getInt( mCursor.getColumnIndex("created_at")));     entry.setIs_deleted(mCursor.getInt( mCursor.getColumnIndex("is_deleted")));     entry.setUpdated_at(mCursor.getInt( mCursor.getColumnIndex("updated_at")) );      return entry; }  public Store formatStore(Cursor mCursor) {      Store entry = new Store();     entry.setCategory_id(mCursor.getInt( mCursor.getColumnIndex("category_id")));     entry.setCreated_at(mCursor.getInt( mCursor.getColumnIndex("created_at")));     entry.setDistance(mCursor.getDouble( mCursor.getColumnIndex("distance")));     entry.setEmail(mCursor.getString( mCursor.getColumnIndex("email")));     entry.setFeatured(mCursor.getInt( mCursor.getColumnIndex("featured")));     entry.setIcon_id(mCursor.getInt( mCursor.getColumnIndex("icon_id")));     entry.setIs_deleted(mCursor.getInt( mCursor.getColumnIndex("is_deleted")));     entry.setLat(mCursor.getDouble( mCursor.getColumnIndex("lat")));     entry.setLon(mCursor.getDouble( mCursor.getColumnIndex("lon")));      entry.setPhone_no(mCursor.getString( mCursor.getColumnIndex("phone_no")));     entry.setRating_count(mCursor.getInt(mCursor.getColumnIndex("rating_count")));     entry.setRating_total(mCursor.getInt(mCursor.getColumnIndex("rating_total")));     entry.setSms_no(mCursor.getString( mCursor.getColumnIndex("sms_no")));     entry.setKiss(mCursor.getString( mCursor.getColumnIndex("kiss")));      entry.setStore_address(mCursor.getString( mCursor.getColumnIndex("store_address")));     entry.setStore_desc(mCursor.getString( mCursor.getColumnIndex("store_desc")));     entry.setStore_id(mCursor.getInt( mCursor.getColumnIndex("store_id")));      entry.setStore_name(mCursor.getString( mCursor.getColumnIndex("store_name")));     entry.setUpdated_at(mCursor.getInt( mCursor.getColumnIndex("updated_at")));     entry.setWebsite(mCursor.getString( mCursor.getColumnIndex("website")) );       return entry; }  public Photo formatPhoto(Cursor mCursor) {      Photo entry = new Photo();     entry.setCreated_at( mCursor.getInt( mCursor.getColumnIndex("created_at")) );     entry.setIs_deleted( mCursor.getInt( mCursor.getColumnIndex("is_deleted")) );     entry.setPhoto_id( mCursor.getInt( mCursor.getColumnIndex("photo_id")) );     entry.setPhoto_url( mCursor.getString( mCursor.getColumnIndex("photo_url")));     entry.setStore_id(mCursor.getInt( mCursor.getColumnIndex("store_id")));     entry.setThumb_url(mCursor.getString( mCursor.getColumnIndex("thumb_url")));     entry.setUpdated_at(mCursor.getInt( mCursor.getColumnIndex("updated_at")) );       return entry; }  public News formatNews(Cursor mCursor) {       News news = new News();     news.setCreated_at( mCursor.getInt( mCursor.getColumnIndex("created_at")) );     news.setIs_deleted( mCursor.getInt( mCursor.getColumnIndex("is_deleted")) );     news.setNews_content( mCursor.getString( mCursor.getColumnIndex("news_content")) );     news.setNews_id( mCursor.getInt( mCursor.getColumnIndex("news_id")) );     news.setNews_title( mCursor.getString( mCursor.getColumnIndex("news_title")));     news.setNews_url(mCursor.getString( mCursor.getColumnIndex("news_url")));     news.setPhoto_url(mCursor.getString( mCursor.getColumnIndex("photo_url")));     news.setUpdated_at(mCursor.getInt( mCursor.getColumnIndex("updated_at")) );      return news; } } </code></pre>  <p><strong>3.DetailActivity.java</strong></p>  <pre><code>String strDesc = store.getKiss().replace("\\n", "[{~}]");     strDesc = strDesc.replace("&amp;quot;", "\"");     Spanned details = Html.fromHtml(strDesc);     details = Html.fromHtml(details.toString());     strDesc = details.toString().replace("[{~}]", "\n");      tvDetails.setText(strDesc); </code></pre>  <p><strong>4. fragment_detail.xml</strong></p>  <pre><code>&lt;TextView             android:id="@+id/tvDetails"             android:layout_width="match_parent"             android:layout_height="wrap_content"             android:layout_margin="@dimen/dimen_10dp"             android:minHeight="100dp"             android:text="Medium Text"             android:textAppearance="?android:attr/textAppearanceMedium" /&gt; </code></pre>  <p><strong>5. logcat error output</strong></p>  <pre><code>10-03 19:24:57.974  23178-23178/com.projects.storefinder E/AndroidRuntime﹕      FATAL EXCEPTION: main java.lang.RuntimeException: Unable to start activity     ComponentInfo{com.projects.storefinder/com.projects.activities.DetailActivity}:  java.lang.NullPointerException at  android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2305) at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2359) at android.app.ActivityThread.access$700(ActivityThread.java:165) at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1326) at android.os.Handler.dispatchMessage(Handler.java:99) at android.os.Looper.loop(Looper.java:137) at android.app.ActivityThread.main(ActivityThread.java:5455) at java.lang.reflect.Method.invokeNative(Native Method) at java.lang.reflect.Method.invoke(Method.java:525) at     com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1187) at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1003) at dalvik.system.NativeStart.main(Native Method) Caused by: java.lang.NullPointerException at   com.projects.activities.DetailActivity.updateStore(DetailActivity.java:524) at com.projects.activities.DetailActivity.onCreate(DetailActivity.java:135) at android.app.Activity.performCreate(Activity.java:5372) at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1104) at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2267) at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2359) at android.app.ActivityThread.access$700(ActivityThread.java:165) at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1326) at android.os.Handler.dispatchMessage(Handler.java:99) at android.os.Looper.loop(Looper.java:137) at android.app.ActivityThread.main(ActivityThread.java:5455) at java.lang.reflect.Method.invokeNative(Native Method)at  java.lang.reflect.Method.invoke(Method.java:525) at   com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1187) at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1003) at dalvik.system.NativeStart.main(Native Method) </code></pre>