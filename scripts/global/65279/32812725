<p>Having navigation drawer in application, Each drawer represents one Fragment each Fragment is having an AsyncTask to download separate data. I am changing Fragments by these codes</p>  <pre><code>private void setupNavigationDrawerContent(NavigationView navigationView) {     navigationView.setNavigationItemSelectedListener(             new NavigationView.OnNavigationItemSelectedListener() {                 @Override                 public boolean onNavigationItemSelected(MenuItem menuItem) {                     switch (menuItem.getItemId()) {                         case R.id.home_main:                             menuItem.setChecked(true);                             actionBar.setTitle("Home");                             drawerLayout.closeDrawer(GravityCompat.START);                             if(getSupportFragmentManager().findFragmentByTag("ranking")==null)                                 {                                 getSupportFragmentManager().beginTransaction().add(R.id.list_view_container,                                         new Home(), "ranking").                                         addToBackStack("ranking").                                         setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)                                         .commit();                                 }                             else                                 {                                 getSupportFragmentManager().popBackStack("ranking", 0);                                 }                             return true;                         case R.id.national_events:                             menuItem.setChecked(true);                             actionBar.setTitle("National events");                             drawerLayout.closeDrawer(GravityCompat.START);                             if(getSupportFragmentManager().findFragmentByTag("ranking3")==null)                             {                                 getSupportFragmentManager().beginTransaction().add(R.id.list_view_container,                                         new NationalEvents(), "ranking3").                                         addToBackStack("ranking3").                                         setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)                                         .commit();                             }                             else                             {                                 getSupportFragmentManager().popBackStack("ranking3", 3);                             }                             return true;                         case R.id.workshops:                             menuItem.setChecked(true);                             actionBar.setTitle("Workshops");                             drawerLayout.closeDrawer(GravityCompat.START);                             if(getSupportFragmentManager().findFragmentByTag("ranking4")==null)                             {                                 getSupportFragmentManager().beginTransaction().add(R.id.list_view_container,                                         new Workshops(), "ranking4").                                         addToBackStack("ranking4").                                         setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)                                         .commit();                             }                             else                             {                                 getSupportFragmentManager().popBackStack("ranking4", 4);                             }                             return true; </code></pre>  <p>And the code being used for downloading data is </p>  <pre><code>@Override public View onCreateView(LayoutInflater inflater, ViewGroup container,Bundle savedInstanceState) {      View home_view = inflater.inflate(R.layout.list_view, container, false);      tf = Typeface.createFromAsset(getActivity().getAssets(), "fonts/cool_jazz.ttf");       swipeLayout = (SwipeRefreshLayout) home_view.findViewById(R.id.swipe_container);     swipeLayout.setColorSchemeColors(R.color.md_purple_500,             R.color.md_deep_purple_A400,             R.color.md_pink_500,             R.color.md_red_500);      mRecyclerView = (RecyclerView) home_view.findViewById(R.id.recycler_view);     mRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));     mRecyclerView.setItemAnimator(new DefaultItemAnimator());      mProgressBar = (ProgressBar) home_view.findViewById(R.id.progress_bar);     mProgressBar.setVisibility(View.VISIBLE);        mDescription=(TextView)home_view.findViewById(R.id.desription);     mDescription.setText(getString(R.string.national_events));     mDescription.setTypeface(tf);      iu1=(TextView)home_view.findViewById(R.id.iu1);     iu1.setTypeface(tf);     iu2=(TextView)home_view.findViewById(R.id.iu2);     iu2.setTypeface(tf);     iu3=(TextView)home_view.findViewById(R.id.iu3);     iu3.setTypeface(tf);     iu4=(TextView)home_view.findViewById(R.id.iu4);     iu4.setTypeface(tf);     iu5=(TextView)home_view.findViewById(R.id.iu5);     iu5.setTypeface(tf);     iu6=(TextView)home_view.findViewById(R.id.iu6);     iu6.setTypeface(tf);        internet=(RelativeLayout)home_view.findViewById(R.id.internet_unavailable);     internet.setVisibility(View.GONE);     Senturl = "http://javatechig.com/?json=get_recent_posts&amp;count=45";     new MainActivityData().execute(Senturl);      swipeLayout.setOnRefreshListener(this);       return home_view; } @Override public void onCreate(Bundle savedInstanceState)  {     super.onCreate(savedInstanceState);setRetainInstance(true); }  @Override public void onRefresh() {     mProgressBar.setVisibility(View.GONE);     internet.setVisibility(View.GONE);     new MainActivityData().execute(Senturl);  }   public class MainActivityData extends AsyncTask&lt;String,Void,Integer&gt; {     @Override     protected void onPreExecute() {         getActivity().setProgressBarIndeterminateVisibility(true);     }      @Override     protected Integer doInBackground(String... params) {         Integer result = 0;         HttpURLConnection urlConnection;          try {             URL url = new URL(params[0]);             urlConnection = (HttpURLConnection) url.openConnection();             int statusCode = urlConnection.getResponseCode();              // 200 represents HTTP OK             if (statusCode ==200 ) {                 BufferedReader r = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));                 StringBuilder response = new StringBuilder();                 String line;                 while ((line = r.readLine()) != null) {                     response.append(line);                 }                 parseResult(response.toString());                 result = 1; // Successful             } else {                 result = 0; //"Failed to fetch data!";             }         } catch (Exception e){             if(e.getLocalizedMessage()!=null){                 Log.d(TAG, e.getLocalizedMessage());             }         }         return result; //"Failed to fetch data!";     }      @Override     protected void onPostExecute(Integer result) {         // Download complete. Let us update UI         mProgressBar.setVisibility(View.GONE);         swipeLayout.setRefreshing(false);         mDescription.setVisibility(View.GONE);         if (result == 1) {              new Thread(new Runnable() {                 @Override                 public void run() {                     mAdapter = new MembersAdapter(getActivity(),membersList);                     getActivity().runOnUiThread(new Runnable() {                         @Override                         public void run() {                             if (mAdapter != null)                             {                                 mRecyclerView.setAdapter(mAdapter);                             }}                     });                 }             }).start();          } else {             internet.setVisibility(View.VISIBLE);         }     } }   private void parseResult(String result) {     try {         JSONObject response = new JSONObject(result);         JSONArray posts = response.optJSONArray("posts");         membersList = new ArrayList&lt;&gt;();          for (int i = 0; i &lt; posts.length(); i++) {             JSONObject post = posts.optJSONObject(i);             Members item = new Members();             item.setTitle(post.optString("title"));             item.setThumbnail(post.optString("thumbnail"));             item.setDescription(post.optString("content"));             item.setDate(post.optString("date"));             //item.setSub_title(post.optString("sub_title"));             membersList.add(item);         }     } catch (JSONException e) {         e.printStackTrace();     } } </code></pre>  <p>Things are working fine but when I am changing the multiple fragments in very small interval of time then Application is getting crashed. What I think is this all is due to a lot of AysncTasks given to the system. May be this want to pause AsyncTask.</p>