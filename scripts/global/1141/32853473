<p>I'm having trouble writing an Active Record query that returns the results I want. I have the following setup:</p>  <p>abridged <code>User</code> model:</p>  <pre><code>class User &lt; ActiveRecord::Base   has_many :answers end </code></pre>  <p>abridged <code>Answer</code> model:</p>  <pre><code>class Answer &lt; ActiveRecord::Base   belongs_to :question   belongs_to :user end </code></pre>  <p>abridged <code>Question</code> model:</p>  <pre><code>class Question &lt; ActiveRecord::Base   has_many :answers    def self.unanswered_by(user)     where(       'id NOT IN (SELECT question_id FROM answers WHERE user_id = ?)',       user.id     )   end    def self.recently_answered     includes(:answers).order('answers.updated_at DESC')   end end </code></pre>  <p>I'm trying to get an <code>ActiveRecord::Relation</code> back that orders the questions by those that have been most recently answered and then filters that result so it only contains questions a <code>current_user</code> has yet to answer.</p>  <p>Ideally, I'd like to write</p>  <pre><code>Question.recently_answered.unanswered_by current_user </code></pre>  <p>but this doesn't appear to work and I'm struggling to understand why with my limited understanding of SQL.</p>  <p>This is the result I get when I run this in the Rails console:</p>  <pre><code>me = User.find(8) Question.recently_answered.unanswered_by me =&gt;   SQL (0.5ms)  SELECT `questions`.`id` AS t0_r0,      `questions`.`question_text` AS t0_r1,      `questions`.`example_answer` AS t0_r2,      `questions`.`created_at` AS t0_r3,      `questions`.`updated_at` AS t0_r4,      `answers`.`id` AS t1_r0,      `answers`.`question_id` AS t1_r1,      `answers`.`user_id` AS t1_r2,      `answers`.`answer_text` AS t1_r3,      `answers`.`created_at` AS t1_r4,      `answers`.`updated_at` AS t1_r5      FROM `questions` LEFT OUTER JOIN `answers`      ON `answers`.`question_id` = `questions`.`id`      WHERE (id NOT IN (SELECT question_id FROM answers WHERE user_id = 8))      ORDER BY answers.updated_at DESC      #&lt;ActiveRecord::Relation:0x3fd42e362a80&gt; </code></pre>  <p>Running <code>Question.recently_answered.unanswered_by(me).to_sql</code> gives me this:</p>  <pre><code>=&gt; "SELECT `questions`.*    FROM `questions`    WHERE (id NOT IN (SELECT question_id           FROM answers WHERE user_id = 8))    ORDER BY answers.updated_at DESC" </code></pre>  <p>I'm working around this right now by doing</p>  <pre><code>Question   .recently_answered   .reject { |q| q.answers.map(&amp;:user_id).include? current_user.id } </code></pre>  <p>but this returns an <code>Array</code> of <code>Question</code> objects instead of the <code>ActiveRecord::Relation</code> that I'd prefer.</p>  <p>Could someone help me understand why I can't chain <code>recently_answered</code> and <code>unanswered_by</code> as written and how I could go about rewriting this so I can get the result I want? Thanks.</p>