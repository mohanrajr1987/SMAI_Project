<p>These are obviously not my actual Models but they serve as an example. I have the following class definitions.</p>  <pre><code>class Movie &lt; ActiveRecord::Base     has_one :opening     has_one :opening_info, through: :opening end  class Opening &lt; ActiveRecord::Base     belongs_to :movie     has_one :opening_info end  class OpeningInfo &lt; ActiveRecord::Base     belongs_to :opening     # OpeningInfo has a opening_date attribute in the DB end </code></pre>  <p>I want to find all movies that have either a non existent Opening, an existent Opening but a non existent OpeningInfo, or a existent Opening  and existent OpeningInfo but a nil opening_date. I can do it as follows</p>  <pre><code>ids = Movie.joins(:opening_info).where.not(opening_infos: { opening_date: nil }) Movie.where("id not in (?)", ids) </code></pre>  <p>But this query was slow, ~2/3 seconds, and ideally I'd like it to take no longer than other ordinary queries, ~100-500 ms. What's the rails way of doing this?</p>