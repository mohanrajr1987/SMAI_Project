<p>I'm reviewing some code and I came across a line that does the following:</p>  <pre><code>Person.find_by(name: "Tom").id </code></pre>  <p>The above code gets the FIRST record with a name of "Tom", then builds a model, then gets the id of that model.  Since we only want the id, the process of retreiving all data in the model and initializing the model is unneeded.  What's the best way to optimize this using active record queries?  </p>  <p>I'd like to avoid a raw sql solution.  So far I have been able to come up with:</p>  <pre><code>Person.where(name: "Tom").pluck(:id).first </code></pre>  <p>This is faster in some situations since <code>pluck</code> doesn't build the actual model object and doesn't load all the data.  However, <code>pluck</code> is going to build an array of records with name "Tom", whereas the original statement only ever returns a single object or nil - so this technique could potentially be worse depending on the <code>where</code> statement.  I'd like to avoid the array creation and potential for having a very long list of ids returned from the server.  I could add a <code>limit(1)</code> in the chain,</p>  <pre><code>Person.where(name: "Tom").limit(1).pluck(:id).first </code></pre>  <p>but is seems like I'm making this more complicated than it should be.</p>