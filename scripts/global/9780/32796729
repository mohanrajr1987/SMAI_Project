<p>I have a model, <code>FittingProject</code>, which I'm trying to map to another model, <code>FittingsProjectSharepointModel</code>. </p>  <p>Unfortunately <code>FittingProject</code> and <code>FittingsProjectSharepointModel</code> only share values, both property names and types are different. </p>  <p>To ease the mapping process I have created a custom attribute for <code>FittingProject</code> which I use to look up the matching property on <code>FittingsProjectSharepointModel</code>. The problem is that most values fail during conversion, for example going from <code>int</code> to <code>double?</code>. </p>  <p>As you can see by snippet below I have attempt to use the <code>Convert.ChangeType</code>, but it still fails with the same Exception. </p>  <pre><code>public ModelMapper MapModelToFittingsProjectSharepointModel(object model) {     if (model == null)     {         return null;     }      var propertiesWithCustomAttributes = model         .GetType()         .GetProperties()         .Where(p =&gt; p.GetCustomAttributes(typeof(SharepointModelPropertyAttribute), true).Length &gt; 0);      foreach (var prop in propertiesWithCustomAttributes)     {         foreach (var customAttribute in prop.GetCustomAttributes(true))         {             SharepointModelPropertyAttribute sharePointModelPropertyAttribute =                  customAttribute as SharepointModelPropertyAttribute;              PropertyDescriptor sharePointModelprop = TypeDescriptor                 .GetProperties(typeof(FittingsProjectSharepointModel))                 .Find(sharePointModelPropertyAttribute.SharepointModelProperty, false);              try             {                 var projectValue = prop.GetValue(model);                 var projectValueConverted = Convert.ChangeType(projectValue, sharePointModelprop.PropertyType);                  sharePointModelprop.SetValue(FittingsProjectSharepointModel, projectValueConverted);             }             catch (Exception ex)             {                 //              }         }     }     return this; } </code></pre>