<p>When you stream variables to an output stream such as cout, type conversion is automatic. What I'm trying to figure out is how to do this via a function call, for example:</p>  <pre><code>inline void DEBUG(ostream&amp; s)   // Don't know if this prototype is appropriate {   cout &lt;&lt; s; }   main() {   int i = 5;    DEBUG("The value is: " &lt;&lt; i &lt;&lt; endl); // This doesn't compile    DEBUG("The value is: " + i + endl); // Neither does this } </code></pre>  <p>I found similar questions on here, but they all involve passing the stream object as a parameter, whereas I'm trying to pass the <em>"streamed data"</em> to a function that already has the stream object, so it's the other way round. Is this even possible? I don't want to resort to explicit type conversions. I also found <a href="http://stackoverflow.com/questions/2803403/c-stream-as-a-parameter-when-overloading-operator">this question</a>, but I really don't want to write a whole logger class if I can avoid it.</p>  <p>At the moment I'm implementing it as a macro, which works, but I'd rather use an inline function if possible.</p>  <pre><code>#define DEBUG(s)    (cout &lt;&lt; s) </code></pre>