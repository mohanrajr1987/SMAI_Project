<p>(...or, alternatively, what is the Pythonic version of C#'s <code>Select(...)</code> method? )</p>  <p>Given a list <code>l</code> of a custom class <code>A</code> what is the (most?) Pythonic way to map each element of <code>l</code> to a different custom class <code>B</code>?</p>  <p>for example, the following code will do it, but is it the most Pythonic way of doing it? Note, the real types have many properties.</p>  <pre><code>l = [A('Greg', 33), A('John', 39)]  def map_to_type_b(the_list):     new_list = []     for item in the_list:         new_list.append(B(item.name, item.age))      return new_list  l2 = map_to_type_b(l) </code></pre>  <p>I'm coming from a C# background, where I would use LinQ <code>select</code> or the <code>Select()</code> extensions method to project from the source sequence to a new sequence of type <code>B</code>.</p>