<p>I am aware of the fact that C++ allows only a single user-defined implicit conversion when converting between types. However, I recently came across a situation where it seems like double user-defined implicit conversions <em>are</em> allowed on initialization.</p>  <p>Consider the following classes:</p>  <pre><code>//fractions class Rational { public:     int num, den;     // default constructor, etc.     Rational(int n) : num(n), den(1) {} // NOT explicit     // arithmetic and compound assignment defined between two Rational's. };  //numbers of the form a + b sqrt(N), where a, b are of type R template&lt;typename R, int N&gt; class RingExtension { public:     R a, b;     // default constructor, etc.     RingExtension&lt;R, N&gt;(R a) : a(a), b(0) {} // NOT explicit     // arithmetic and compound assignment defined between two RingExtension&lt;R, N&gt;'s. }; </code></pre>  <p>As expected, the following will not compile:</p>  <pre><code>int main() {     RingExtension&lt;Rational, N&gt; x;     x /= 3; // ERROR! Can't do the conversion int -&gt; Rational -&gt; RingExtension&lt;Rational, 2&gt;     x /= (Rational)3; // this does work } </code></pre>  <p>However, the following <em>does</em> compiles in Visual Studio 2013:</p>  <pre><code>int main() {     RingExtension&lt;Rational, 2&gt; x = 3; // int -&gt; Rational -&gt; RingExtension&lt;Rational, 2&gt; } </code></pre>  <p>Why is the double user-defined conversion allowed in the latter situation? Is Visual Studio not standard-compliant in this particular situation? Or is there some exception in the standard for initialization?</p>  <p>EDIT: As Kerrek SB suggested, I have tested my code in clang and gcc through Wandbox. Both compilers spat out an error on the initialization, as one would expect. Question remains, who is in the wrong here? It would seem that Visual Studio is too permissive, but it would be great if someone could confirm this.</p>  <p>EDIT: The full source code for these classes, including the main()-function, can be found here: <a href="http://pastebin.com/JNSvkwi0#" rel="nofollow">http://pastebin.com/JNSvkwi0#</a></p>