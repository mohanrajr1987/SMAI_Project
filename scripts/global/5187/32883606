<p>If I want to create a Tkinter GUI simply with statements, I can do this:</p>  <pre><code>from Tkinter import * root = Tk() root.title("Test Window") tkFrame = Frame(root) tkButton = Button(tkFrame) [...] </code></pre>  <p>The documentation, however, advises that Tkinter be used with a class definition, subclassing a Frame widget:</p>  <pre><code>class App(Frame):   [...] </code></pre>  <p>I would like to understand why that is so. Why can't we subclass the Frame's container, the window? It appears that is what is done with statements in the first example, so why not in a class definition?</p>  <p>EDIT (following Bryan Oakley's answer):</p>  <p>I would like to instantiate at the highest level of Tkinter, which I assume to be Tk() (though I have come across references stating Frame is the top level, but never mind). Indeed, the following will create a window:</p>  <pre><code>from Tkinter import * class Application(Tk):   pass app = Application() app.mainloop() </code></pre>  <p>...but as soon as I try to add widgets I either get errors or two windows, with the widgets in a new window, depending on how I structure the code. Here's a basic example that will produce a second window with the button:</p>  <pre><code>from Tkinter import * class Application(Tk):   tkBtn = Button()   tkBtn.pack() app = Application() app.mainloop() </code></pre>  <p>Anything more, using <code>self</code>, <code>__init__</code>, etc., produces errors. Could someone point me to working code that instantiates Tkinter at the highest level? Just like all the <code>Frame</code> subclasses I'm seeing, but at the highest level?</p>