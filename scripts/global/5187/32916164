<p>In the interest of being more "pythonic" (and being more modular), I want to convert my procedural code to a <code>Class</code>.  The object of interest here is the idea of a marriage of <code>husband</code> and <code>wife</code>, referred to here as <code>lastname</code>, with some shared and some unique attributes among each spouse.  These attributes are being filled in from a file into a generator object via <code>yield</code>.  </p>  <p>Part of me wants to perform these two parsing functions <code>get_husband</code> and <code>get_wife</code> (and maybe the final zip function) as a Class function that still uses an iterator object to fill in the attributes of <code>marriage.firstname</code>, <code>marriage.husbandscore</code>, <code>marriage.wifescore</code>, etc.  I would then create methods that would perform further analysis on the information from each <code>marriage</code> object as it is spit out from the generator.</p>  <p>But part of me is unsure whether the parsing definitions are best kept as methods, since I would be returning <code>self</code> which is not the generator that I need for my downstream work...</p>  <pre><code>from itertools import izip  def get_husband(husbandfile):     lastname, firstname, husbandscore = '', '', ''     for line in husbandfile.readlines():         # Parse files to fill out the names, wifescores in wifefile         yield name, husbandscore  def get_wife(wifefile):     lastname, firstname, wifescore = '', '',''     for line in wifefile.readlines():         # Parse files to fill out the names, wifescores in wifefile         yield name, wifescore  def make_family(husbandfile, wifefile):     for husband, wife in izip(get_husband(husbandfile), get_wife(wifefile)):         if husband[0] == wife[0]:             lastname = husband[0]             parentscore = husband[1] + wife[0]              yield lastname, parentscore         else:             raise Exception("These two aren't married </code></pre>  <p>What do you suppose is the best way to factor this as a class so I can be like: <code>min_score = marriage.parentscore.min()</code></p>