<p>I was programming up a nice little utility and all was going well, but then I tried to add some labels.  They showed up.  Then I made them longer and they disappeared. I tried many experiments (repositioning, changing font, changing the order) but nothing was consistent other than the longer strings were problematic.  Thinking that I was using Swing incorrectly, I tried to simplify by moving back to AWT, but I see almost identical problems.  I have even stepped through the code using jdb and, again, sometimes the g.drawString works on the longer strings and other times it does not. I tried catching any errors and did not see anything as well.</p>  <p>Clearly, I am missing something fundamental.  Can someone explain:  1) why do the shorter strings (e.g. "label") seem to always work? 2) why do the longer strings sometimes not show at all? 3) are the failures due to the sting not being rendered at all or are they getting overwritten by some other image? 4) if #3 is "overwritten", how does one control the order of these other (unknown) images?</p>  <p>I have stripped the code down. I am compiling with javac 1.7.0_79</p>  <pre><code>import java.awt.*;  public class GraphicsQuestion extends Frame {    public GraphicsQuestion()    {        super("Question");  //call to Frame        setFocusable(true);    }    public void DrawLabels(Graphics g)    {        g.setFont(new Font("Courier", Font.PLAIN, 16));        g.setColor(Color.BLACK);         g.drawString("label", 0, 100);        String ss = new String("label1234567890123456789");        g.drawString(ss, 100, 150);         g.drawString("label12345", 100, 170); //does not print        g.drawString("label1", 10, 170);     }    public void paint(Graphics g)    {       super.paint(g);       DrawLabels(g);    }    public static void main(String args[]) {       GraphicsQuestion gq = new GraphicsQuestion();       gq.setBackground(Color.WHITE);       gq.setSize(800, 200);       gq.setVisible(true);    } } </code></pre>  <p>As the comment in the code suggests, the output is missing one of the labels. At times, it is missing both of the longer labels.  And if I comment out the printing of the "label12345", the first time I execute, I am missing the "label1234567890123456789" label.  And if I make the "label12345" string shorter, like "label123" <strong>everything is printed</strong>.</p>  <p>I am used to consistent behavior in my programming. If I am having trouble understanding what is going on with this simple example, I am hesitant to build anything more complicated. Can anyone explain the inconsistent behavior?</p>  <p>**** original question above, what follows is based on answers received ****</p>  <p>Thanks to VGR for the quick response. I had been trying to not "mix Swing with AWT" but I tried the code. It seemed to improve things.  Unfortunately, I have taken it to the next level and added KeyListener functionality and I see the instabilities again.</p>  <p>Now I wonder if I have something deeper than a Java error.  Maybe I have some hardware or graphics driver failure because the font can be distorted.  I can compile the code and it will be missing the labels 20 out of 20 times and then recompile <strong>the same code the same way</strong> and get this distorted output.</p>  <p><a href="http://www.screencast.com/t/rsBjRZlXlWu" rel="nofollow">http://www.screencast.com/t/rsBjRZlXlWu</a></p>  <p>I will include my new code below, but this is looking less and less like a Java programming issue and more like an environment issue.  I am running Ubuntu 14.04.3 LTS on a Dell E7450</p>  <pre><code>import java.awt.*; import java.awt.event.*; import javax.swing.SwingUtilities;  class GraphicsAnswer extends Frame implements KeyListener {    public GraphicsAnswer()    {        super("Question2");  //call to Frame        addKeyListener(this);        setFocusable(true);    }    public void DrawLabels(Graphics g)    {        g.setFont(new Font("Courier", Font.PLAIN, 16));        g.setColor(Color.BLACK);         g.drawString("label", 0, 100);        String ss = new String("label1234567890123456789");        g.drawString(ss, 100, 150);            //sometimes distorted         g.drawString("label123456", 100, 170); //sometimes distorted        g.drawString("label1", 10, 170);     }    public void paint(Graphics g)    {       super.paint(g);       DrawLabels(g);    }    public void keyPressed(KeyEvent e)    {       int keyCode = e.getKeyCode();       if (e.getKeyChar() == 'X')          System.exit(0);       else          update(e.getKeyChar());    }    public void keyReleased(KeyEvent e)    {    }    public void keyTyped(KeyEvent e)    {    }    public void update( char c)    {       Graphics g = this.getGraphics();       g.drawString("done", 10, 10);    } }  public class QMain2 implements Runnable {     public void run() {        // Invoked on the event dispatching thread        // Construct and show GUI        GraphicsAnswer ga = new GraphicsAnswer();        ga.setBackground(Color.WHITE);        ga.setSize(800, 200);        ga.setVisible(true);     }     public static void main(String [] args) {        SwingUtilities.invokeLater(new QMain2());     } } </code></pre>  <p>Anyone know of a font driver test suite for Java so I can test my environment?</p>