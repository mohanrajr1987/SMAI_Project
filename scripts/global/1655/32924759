<p>I'm developing APP that fetch movies data from TMDB.com  into gridview. So the problem is that <code>doInBackground</code> method is not executing. It does not show any LOG message, I get no error just blank screen displayed<br> I've tried to set the adapter in <code>onPostExecute</code> method instead in <code>OnCreateView</code> but no thing changed.</p>  <p><strong>ASYNCTASK SUBCLASS</strong></p>  <pre><code> public class fetchmovies extends AsyncTask&lt;String, Void, String[]&gt; {  private final String LOG_TAG = fetchmovies.class.getSimpleName();   @Override protected String[] doInBackground(String... params) {     if (params.length == 0) {         return null;     }     HttpURLConnection urlConnection = null;     BufferedReader reader = null;     String moviejasonSTR = null;     String size = "w185";     String poster_path = "poster_path";     String api_key = "my api key";      try {         final String base_move_url = " http://image.tmdb.org/t/p/";         final String SORT_BY_PARM = "sort_by";         final String Api_KEY_PARM = "api_key";          Uri bulitUri = Uri.parse(base_move_url).buildUpon()                 .appendQueryParameter(SORT_BY_PARM, params[0])                 .appendQueryParameter(Api_KEY_PARM, api_key).build();          URL url = new URL(bulitUri.toString());         urlConnection = (HttpURLConnection) url.openConnection();         urlConnection.setRequestMethod("GET");         urlConnection.connect();          // Read the input stream into a String         InputStream inputStream = urlConnection.getInputStream();         StringBuffer buffer = new StringBuffer();         if (inputStream == null) {             // Nothing to do.             return null;         }         reader = new BufferedReader(new InputStreamReader(inputStream));         String line;         while ((line = reader.readLine()) != null) {              buffer.append(line + "\n");         }         if (buffer.length() == 0) {             // Stream was empty.  No point in parsing.             return null;         }         moviejasonSTR = buffer.toString();         Log.v(LOG_TAG, "movie string: " + moviejasonSTR);     } catch (IOException e) {         Log.e(LOG_TAG, "Error ", e);           return null;     } finally {         if (urlConnection != null) {             urlConnection.disconnect();         }         if (reader != null) {             try {                 reader.close();             } catch (final IOException e) {                 Log.e(LOG_TAG, "Error closing stream", e);             }         }         try {             return getMoviesDatFromJason(moviejasonSTR);           } catch (JSONException e) {             Log.e(LOG_TAG, e.getMessage(), e);             e.printStackTrace();         }     }       return null; }  private String[] getMoviesDatFromJason(String movieJasonStr) throws   JSONException {     final String RESULT = "results";     // final String OVERVIEW = "overview";     //final String ORIGINAL_TITLE = "original_title";     //final String VOTE_AVERAGE = "vote_average";     final String POSTER_PATH = "poster_path";     // final String RELEASE_DATE = "release_date";      JSONObject movieJason = new JSONObject(movieJasonStr);     JSONArray MOVIEARAY = movieJason.getJSONArray(RESULT);     String[] imagearry = new String[MOVIEARAY.length()];     for (int i = 0; i &lt; MOVIEARAY.length(); i++) {         JSONObject movie = MOVIEARAY.getJSONObject(i);         String poster_path = movie.getString(POSTER_PATH);         String poster_uril = "http://image.tmdb.org/t/p/w185/" +   poster_path;         imagearry[i] = poster_uril;      }       return imagearry; }   @Override protected void onPostExecute(String[] result) {   } } </code></pre>  <p><strong>BASE ADAPTER</strong></p>  <pre><code> public class mcustomAdapter extends BaseAdapter {         private Context context;         private String[] posterURL;          public mcustomAdapter(Context context, String[] posterUrl) {             this.context = context;             this.posterURL = posterUrl;          }          @Override         public int getCount() {             return posterURL.length;         }          @Override         public Object getItem(int position) {             return posterURL[position];         }          @Override         public long getItemId(int position) {             return position;         }          @Override         public View getView(int position, View convertView, ViewGroup parent) {             imageView = null; // created as a global view             if (convertView == null) {                 imageView = new ImageView(context);             } else {                 imageView = (ImageView) convertView;             }             Picasso.with(context).load(posterURL[position]).into(imageView);               return imageView;         }     } </code></pre>  <p><strong>OnCreateView OnCreate OnStart</strong></p>  <pre><code>@Override public View onCreateView(LayoutInflater inflater, ViewGroup container,                           Bundle savedInstanceState) {     final View rootview = inflater.inflate(R.layout.fragment_main, container, false);     imageView = (ImageView) rootview.findViewById(R.id.list_itempostr);     grideview = (GridView) rootview.findViewById(R.id.movie_grid_view);     grideview.setAdapter(movieadapter);     movieadapter = new mcustomAdapter(getActivity(), imagearry);     movieadapter.notifyDataSetChanged();     grideview.setOnItemClickListener(new AdapterView.OnItemClickListener() {         @Override         public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {          }     });       return rootview; }  @Override public void onCreate(Bundle savedInstanceState) {     super.onCreate(savedInstanceState);     updatemovies();  }  public void updatemovies() {     String sortby = "popularity.asc";     fetch.execute(sortby);  }  @Override public void onStart() {     super.onStart();     //updatemovies();  } </code></pre>  <p><strong>FragmentMain</strong></p>  <pre><code>    &lt;FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"     xmlns:tools="http://schemas.android.com/tools"      android:layout_width="match_parent"     android:layout_height="match_parent"     tools:context=".MainActivityFragment"  &gt;     &lt;GridView     android:layout_width="match_parent"     android:layout_height="match_parent"     android:id="@+id/movie_grid_view"     android:numColumns="auto_fit"     android:verticalSpacing="5dp"     android:horizontalSpacing="5dp"         /&gt;  &lt;/FrameLayout&gt; </code></pre>  <p><strong>image view</strong></p>  <pre><code> &lt;?xml version="1.0" encoding="utf-8"?&gt;  &lt;ImageView     xmlns:android="http://schemas.android.com/apk/res/android"     android:layout_width="match_parent"     android:layout_height="match_parent"     android:id="@+id/list_itempostr"        /&gt; </code></pre>  <p><strong>mainfest</strong></p>  <pre><code>    &lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"     package="com.exampel.android.mdb" &gt;     &lt;uses-permission android:name="android.permission.INTERNET" /&gt;     &lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /&gt;       &lt;application         android:allowBackup="true"         android:icon="@mipmap/ic_launcher"         android:label="@string/app_name"         android:theme="@style/AppTheme" &gt;         &lt;activity             android:name=".MainActivity"             android:label="@string/app_name" &gt;             &lt;intent-filter&gt;                 &lt;action android:name="android.intent.action.MAIN" /&gt;                  &lt;category android:name="android.intent.category.LAUNCHER" /&gt;             &lt;/intent-filter&gt;         &lt;/activity&gt;     &lt;/application&gt;  &lt;/manifest&gt; </code></pre>