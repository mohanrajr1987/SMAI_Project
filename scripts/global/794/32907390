<p>I'm currently working on a project with a friend with many nodes in a network, and would like to adapt it from p2p to a mesh network.</p>  <p>Some background on the application:</p>  <ul> <li>we aren't doing anything complicated, we're just starting off with a chat client, sending messages to/from an individual/group(s)</li> <li>language agnostic (I'm writing my 'client' in ruby, and my friend is writing his in python)</li> <li>currently, we have a listening socket (which is always active), and only open sockets for sending, so there is no 'always-on' connection to all of our nodes (though, from the <a href="https://en.wikipedia.org/wiki/Mesh_networking" rel="nofollow">wiki</a>, it seems they prefer constant connections)</li> <li>I've also read this on <a href="https://en.wikipedia.org/wiki/Scalable_Source_Routing" rel="nofollow">scalable source routing</a>, but it more or less just lays out "a" algorithm, and doesn't necessarily define any sort of protocol for communication.</li> </ul>  <p>So, my questions:</p>  <ul> <li>What's the best (or a comparison of) mesh networking protocol(s) for finding shortest path? (I know there are a couple, defined by IEEE and others)  <ul> <li>Lets say you want to send a message to someone you aren't directly connected to   <ul> <li>do you have a list of all nodes on the network and lookup which of your connected nodes has the shortest path to your intended target node? -- would this mean that every time the network changes, you'd have to update each node's graph of the network?</li> <li>alternatively, would a node just have a list of which of its connected nodes have the shortest path to a desired destination? (this way the responsibility of shortest path falls to the next-in-line node)?</li> </ul></li> </ul></li> <li>how do you decide which nearby nodes to maintain connections to?</li> </ul>  <p>thanks!</p>