<p>For this program, I am trying to set up a payroll for inputted employees. The program has the user enter the employee's name, tax ID, and wage, and automatically generates an ID number for each employee entered. After this information is inputted, the user is asked to give the number of hours worked for 2 weeks. To do this, the employee ID number is entered to give reference to the employee that worked a certain number of hours. Next, either week 1 or 2 is entered to determine which week they worked. Finally, the number of hours worked that week is entered. Once the information is finished, the user enters 0 to stop entering the data, and the payroll is printed in a chart. The main issue I am having is that you MUST enter the ID, week, and hours for EACH employee added to the list, regardless of whether or not they worked in the 2 week period. I want to try and figure out how to set the Hours Worked and Total pay numbers to 0 if I do not enter any information for a certain employee. For example, if I enter: 1, for employee 1; 1, for week 1; 20, for hours worked in week 1; press enter; 1, again for employee 1; 2, for week 2; and 30, for hours worked in week 2, this information will print in the table. Say I have another employee, employee 2. I do not want to enter all of this information for employee 2 if they did not work at all in week 1 or 2, so the table should print 0 for Hours Worked, and 0 for Total Pay if I decide not to enter the ID, week number, and hours worked. Instead, however, it gives me an outOfBoundsException: Index: 1 Size: 1 Error when I try to do this. I was wondering if anyone had a solution to this. The 3 classes of my code are posted below. An example of the executed program with the outOfBoundsException is given in the main class.</p>  <pre><code>import java.util.Scanner; import java.util.ArrayList;  /**  * A class that contains methods for prompting a user for ACME employee information including names, tax IDs, and wages.  */ public class EmployeeRecord {     // ArrayLists used in methods.     ArrayList&lt;String&gt; employees = new ArrayList&lt;String&gt;();     ArrayList&lt;String&gt; tIds = new ArrayList&lt;String&gt;();     ArrayList&lt;Double&gt; wages = new ArrayList&lt;Double&gt;();     ArrayList&lt;String&gt; employeesLast = new ArrayList&lt;String&gt;();      Scanner in = new Scanner(System.in);      // Private Instance variables used in methods.     private String employeeId = "%03d";     private String employeeName = " ";     private String employeeNameLast = " ";     private String taxId = " ";     private double wage = 0.0;      /**      * A method that prompts the user to enter ACME employee names, tax IDs, and wages. This method also generates an ID number for each employee.      */     public void setEmployeeInfo()     {         System.out.println("Please enter the names of each ACME employee, each employee tax ID, and each employee wage rate. Press Q when you are done entering names.");          while(!employeeName.equalsIgnoreCase("Q"))         {                 employeeName = in.next();                 if(employeeName.equalsIgnoreCase("Q"))                 {                 break;                 }                 employeeNameLast = in.next();                 taxId = in.next();                 wage = in.nextDouble();                  employees.add(employeeName);                 employeesLast.add(employeeNameLast);                 tIds.add(taxId);                 wages.add(wage);                  System.out.println("Employee ID  |  Employee Name        |  Tax ID          |  Wage");                 for(int i = 1; i &lt;= employees.size(); i++)                 {                     System.out.printf(String.format(employeeId, i) + "          | " + employees.get(i - 1) + " " + employeesLast.get(i - 1) + "              | " + tIds.get(i - 1) + "          | " + "%1.2f",wages.get(i - 1));                     System.out.println();                 }         }     }      /**      * A method that gets the list of ACME employee first names added to the record.      * @return      * Returns the ArrayList containing the first names of each employee entered.      */     public ArrayList&lt;String&gt; getEmployeeArrayList()     {         return employees;     }      /**      * A method that gets the list of ACME employee last names added to the record.      * @return      * Returns the ArrayList containing the last names of each employee entered.      */     public ArrayList&lt;String&gt; getEmployeeLastArrayList()     {         return employeesLast;     }      /**      * A method that gets the list of ACME employee tax IDs added to the record.      * @return      * Returns the ArrayList containing the tax IDs of each tax ID entered.      */     public ArrayList&lt;String&gt; getTaxIdsArrayList()     {         return tIds;     }      /**      * A method that gets the list of ACME employee wages added to the record.      * @return      * Returns the ArrayList containing the wages of each wage entered.      */     public ArrayList&lt;Double&gt; getWageArrayList()     {         return wages;     }  } </code></pre>  <hr>  <pre><code>import java.util.Scanner; import java.util.ArrayList; import java.util.Date; import java.text.DateFormat; import java.text.SimpleDateFormat;  /**  * A class that contains methods for entering payroll information for each ACME employee. This class uses methods from the EmployeeRecord class in order to run and therefore, relies on the EmployeeRecord class to operate.  */ public class Employee {     // ArrayLists that will implement return methods from the EmployeeRecord class.     ArrayList&lt;String&gt; eMp;     ArrayList&lt;String&gt; eMpL;     ArrayList&lt;Double&gt; eW;      // ArrayLists used to store values in setEmployeePayroll() method.     ArrayList&lt;Integer&gt; eId = new ArrayList&lt;Integer&gt;();     ArrayList&lt;Double&gt; hours = new ArrayList&lt;Double&gt;();     ArrayList&lt;Double&gt; tPay = new ArrayList&lt;Double&gt;();      // Instance Variables used in setEmployeePayroll() method.     private String employeeId = "%03d";     private int weekNumber = 0;     private double hoursWorked = 0.0;     private double hoursWorked2 = 0.0;     private int terminate = 1000;     private int i = 0;       Scanner in = new Scanner(System.in);      /**      * A method that implements the EmployeeRecord class to prompt the user to enter information for the payroll of each ACME employee. The payroll for each employee is then displayed.      */     public void setEmployeePayroll()     {         // Constructs a new EmployeeRecord to implement classes from EmployeeRecord class.         EmployeeRecord e = new EmployeeRecord();         e.setEmployeeInfo();          eMp = e.getEmployeeArrayList();         eMpL = e.getEmployeeLastArrayList();         eW = e.getWageArrayList();          // Local variables used in this method.         double totalPay = 0.0;         double totalHours = 0.0;         double overTime = 0.0;         double overTime2 = 0.0;          System.out.println("Please enter ACME employee ID, the week they worked (1 or 2), and the number of hours worked. This information should be entered in the order the names were entered. Enter 0 when you are done inputing information.");          while(terminate != 0)         {             terminate = in.nextInt();             if(terminate == 0)             {                 break;             }              weekNumber = in.nextInt();              if(weekNumber == 1)             {                 hoursWorked = in.nextDouble();             }             else if(weekNumber == 2)             {                 hoursWorked2 = in.nextDouble();             }              // Checks to see if an employee receives a 150% bonus on their payroll.             if(hoursWorked &gt; 0 &amp;&amp; hoursWorked &lt;= 40 &amp;&amp; hoursWorked2 &gt; 0 &amp;&amp; hoursWorked2 &lt;= 40)             {                 totalHours = hoursWorked + hoursWorked2;                 hours.add(totalHours);                 totalPay = totalHours * (eW.get(i - 1));                 tPay.add(totalPay);                 hoursWorked = 0.0;                 hoursWorked2 = 0.0;             }             else if(hoursWorked2 &gt; 40 &amp;&amp; hoursWorked &gt; 0 &amp;&amp; hoursWorked &lt;= 40)             {                 overTime2 = hoursWorked2 - 40;                 totalHours = hoursWorked + hoursWorked2;                 hours.add(totalHours);                 totalPay = totalHours * (eW.get(i - 1)) + (overTime2 * 1.5);                 tPay.add(totalPay);                 hoursWorked = 0.0;                 hoursWorked2 = 0.0;             }             else if(hoursWorked &gt; 40 &amp;&amp; hoursWorked2 &lt;= 40 &amp;&amp; hoursWorked2 &gt; 0)             {                 overTime = hoursWorked - 40;                 totalHours = hoursWorked + hoursWorked2;                 hours.add(totalHours);                 totalPay = totalHours * (eW.get(i - 1)) + (overTime * 1.5);                 tPay.add(totalPay);                 hoursWorked = 0.0;                 hoursWorked2 = 0.0;             }             else if(hoursWorked &gt; 40 &amp;&amp; hoursWorked2 &gt; 40)             {                 overTime = hoursWorked - 40;                 overTime2 = hoursWorked2 - 40;                 totalHours = hoursWorked + hoursWorked2;                 hours.add(totalHours);                 totalPay = totalHours * (eW.get(i - 1)) + (1.5 * (overTime + overTime2));                 tPay.add(totalPay);                 hoursWorked = 0.0;                 hoursWorked2 = 0.0;             }              i = terminate;         }          // Constructs a new date format for the date of the payroll.         DateFormat format = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");         Date d = new Date();          // Gets current date and time for payroll.         System.out.println("ACME Payroll run on " + format.format(d));         System.out.println();         System.out.println("Employee Number  |  Employee Name    |  Hours Worked  |  Total Pay");         for(int i = 1; i &lt;= e.getEmployeeArrayList().size(); i++)         {             System.out.println(String.format(employeeId, i) + "              | " + eMp.get(i - 1) + " " + eMpL.get(i - 1) + "        | " + hours.get(i - 1) + "           | " + tPay.get(i - 1));         }     } } </code></pre>  <hr>  <pre><code>/**  * The main class that runs the contents of the EmployeeRecord and Employee classes.  *  *  */ public class runPayroll  {     public static void main(String[] args)     {         Employee eE = new Employee();         eE.setEmployeePayroll();     } } /**  * Please enter the names of each ACME employee, each employee tax ID, and each employee wage rate. Press Q when you are done entering names. Jane Smith 1010101 10 Employee ID  |  Employee Name        |  Tax ID          |  Wage 001          | Jane Smith              | 1010101          | 10.00 John Smith 1111111 10 Employee ID  |  Employee Name        |  Tax ID          |  Wage 001          | Jane Smith              | 1010101          | 10.00 002          | John Smith              | 1111111          | 10.00 q Please enter ACME employee ID, the week they worked (1 or 2), and the number of hours worked. This information should be entered in the order the names were entered. Enter 0 when you are done inputing information. 1 1 20 1 2 30 0 ACME Payroll run on 2015/09/15 22:25:19  Employee Number  |  Employee Name    |  Hours Worked  |  Total Pay Exception in thread "main" 001              | Jane Smith        | 50.0           | 500.0 java.lang.IndexOutOfBoundsException: Index: 1, Size: 1     at java.util.ArrayList.rangeCheck(ArrayList.java:653)     at java.util.ArrayList.get(ArrayList.java:429)     at Employee.setEmployeePayroll(Employee.java:128)     at runPayroll.main(runPayroll.java:11)   */ </code></pre>