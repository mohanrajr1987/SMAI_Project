<p>Ladies and Gents, </p>  <p>Generally, I'm pretty awesome when it comes to VBA in Excel, Word or Powerpoint.  However, this one has me stumped!</p>  <p>Basic idea of what I am doing... - I want to use Excel to store "tag names" in column A and their associated "replacement text" in Column B.  When the code runs, it needs to collect each tag, one at a time (row by row), search an entire Word document for those words, and replace them with their corresponding replacements. - I had this all working, or so I thought, until I noticed that the special tags in the headers and footers weren't being replaced.  So, I turned to this artical (<a href="http://word.mvps.org/faqs/customization/ReplaceAnywhere.htm" rel="nofollow">http://word.mvps.org/faqs/customization/ReplaceAnywhere.htm</a>) and found that working with a range of ranges (or cycling through all available Story Ranges in the document) I was able to do this. - So, I improved my code, just like it was recommended in the link above and it worked, so long as my code was embedded in my "Normal" word file, thereby using my VBA code from Word to operate on another Word document.  However, the goal is to use VBA Excel to operate the replacements while reading an Excel file. - When I moved the code to Excel, it seems as if it isn't quite working and I'm getting hung up on an Automation error which reads, "Run-time error '-2147319779 (8002801d)': Automation error  Library not registered.". - I've looked and looked for answers from reviewing the Registry to using "Word.Application.12" in place of "Word.Application", but to no avail.</p>  <p>I currently have a Windows 7, 64-Bit machine, with Microsoft Office 2007.  I currently have the following libraries selected:</p>  <ul> <li><p>Excel:</p>  <ul> <li>Visual Basic For Applications</li> <li>Microsft Excel 12.0 Object Library</li> <li>OLE Automation</li> <li>Microsoft Access 12.0 Object Library</li> <li>Microsoft Outlook 12.0 Object Library</li> <li>Microsoft Word 12.0 Object Library</li> <li>Microsoft Forms 2.0 Object Library</li> <li>Microsoft Office 14.0 Object Library</li> </ul></li> <li><p>Word:</p>  <ul> <li>Visual Basic For Applications</li> <li>Microsoft Word 12.0 Object Library</li> <li>OLE Automation</li> <li>Microsoft Office 12.0 Object Library</li> </ul></li> </ul>  <p>I have absolutely no issues with operating inside of excel with regard to VBA.  Normally, I will be passing a set of strings to this function, but for now, I have embedded the strings inside of the function, as if I am only planning on swapping one string (for any number of instances), with another predetermined string.</p>  <pre><code>Function Story_Test() Dim File As String Dim Tag As String Dim ReplacementString As String  Dim a As Integer  Dim WordObj As Object Dim WordDoc As Object Dim StoryRange As Word.Range Dim Junk As Long  Dim BaseFile As String  'Normally, these lines would be strings which get passed in File = "Z:\File.docx" Tag = "{{Prepared_By}}" ReplacementString = "Joe Somebody"  'Review currently open documents, and Set WordDoc to the correct one 'Don't worry, I already have error handling in place for the more complex code Set WordObj = GetObject(, "Word.Application") BaseFile = Basename(File) For a = 1 To WordObj.Documents.Count     If WordObj.Documents(a).Name = BaseFile Then         Set WordDoc = WordObj.Documents(a)         Exit For     End If Next a  'This is a fix provided to fix the skipped blank Header/Footer problem Junk = WordDoc.Sections(1).Headers(1).Range.StoryType   'Okay, this is the line where we can see the error. 'When this code is run from Excel VBA, problem.  From Word VBA, no problem. 'Anyone known why this is??? '*********************************************************************** For Each StoryRange In WordObj.Documents(a).StoryRanges '***********************************************************************     Do         'All you need to know about the following function call is that I have a function that works to replace strings.  It works fine provided it has valid strings and a valid StoryRange.         Call SearchAndReplaceInStory_ForVariants(StoryRange, Tag, ReplacementString, PreAdditive, FinalAdditive)         Set StoryRange = StoryRange.NextStoryRange     Loop Until StoryRange Is Nothing Next StoryRange  Set WordObj = Nothing Set WordDoc = Nothing  End Function </code></pre>  <p>Lastly, allow me to be BLUNT.  Please throw anything at me!  I don't mind learning from my mistakes, but finding an answer to the core problem is a must for me.  All I ask is that your comments remain 'construtive'.  With me, you can't provide 'too much' detail toward what you are thinking.  I am just looking for someone to help me gain a more thorough understanding into my problem.</p>  <p>Thank you for your time!</p>