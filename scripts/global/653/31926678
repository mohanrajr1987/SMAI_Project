<p>I have an installer (<code>installer.exe</code>) that calls off to another installer (<code>subinstaller.exe</code>).  This is how I trigger the other installer:</p>  <pre><code>public void Run(String commandName, params String[] args) {     var commandProcess = new Process();      commandProcess.StartInfo.FileName = "cmd.exe";     commandProcess.StartInfo.RedirectStandardInput = true;     commandProcess.StartInfo.RedirectStandardOutput = true;     commandProcess.StartInfo.RedirectStandardError = true;     commandProcess.StartInfo.CreateNoWindow = true;     commandProcess.StartInfo.UseShellExecute = false;     commandProcess.EnableRaisingEvents = true;      var arguments = String.Join(" ", args);     var command = String.Format("/C \"\"{0}\" {1}\"", commandName, arguments);     commandProcess.StartInfo.Arguments = command;      using (commandProcess)     {         commandProcess.Start();          var errors = commandProcess.StandardError.ReadToEnd();         if (String.IsNullOrEmpty(errors) == false)         {             var message = String.Format("A problem occurred while running \"{0}\": {1}", command, errors);             throw new Exception(message);         }          commandProcess.WaitForExit();     } } </code></pre>  <p>The command that is causing me trouble ends up being the following:</p>  <pre><code>cmd.exe /C ""C:\Updater\subinstaller.exe" /norestart /silent /serial="TRIAL"" </code></pre>  <p>If I run that command in a command prompt, everything works as expected.  However, if I run it via the process as described above (where <code>commandName</code> is <code>C:\Updater\subinstaller.exe</code>), then it does not run properly.  I would assume this is because of a permission issue, but I have effectively ruled that out:</p>  <ol> <li>My highest-level installer is running as admin via a manifest requiring elevated permissions.  I have individually verified that the <code>cmd.exe</code> process that is kicked off runs under the same elevated permissions.</li> <li>I have explicitly had it run under both SYSTEM and a local admin account, both of which also did not work.</li> </ol>  <p>I really am running out of ideas on what could be causing the problem.  Considering that it works in raw command-line, it is very unlikely to be the sub-installer.  Does anyone have any ideas?</p>  <p><strong>UPDATE</strong></p>  <p>I have also tried taking <code>cmd</code> out of the equation:</p>  <pre><code>public void Run(String commandName, params String[] args) {     var commandProcess = new Process();      commandProcess.StartInfo.FileName = commandName;     commandProcess.StartInfo.RedirectStandardInput = true;     commandProcess.StartInfo.RedirectStandardOutput = true;     commandProcess.StartInfo.RedirectStandardError = true;     commandProcess.StartInfo.CreateNoWindow = true;     commandProcess.StartInfo.UseShellExecute = false;     commandProcess.EnableRaisingEvents = true;      var arguments = String.Join(" ", args);     commandProcess.StartInfo.Arguments = arguments;      using (commandProcess)     {         commandProcess.Start();          var errors = commandProcess.StandardError.ReadToEnd();         if (String.IsNullOrEmpty(errors) == false)         {             var message = String.Format("A problem occurred while running \"{0}\": {1}", commandName, errors);             throw new Exception(message);         }          commandProcess.WaitForExit();          if (commandProcess.ExitCode != 0)         {             var message = String.Format("A problem occurred while running \"{0}\": Exit code {1}", commandName, commandProcess.ExitCode);             throw new Exception(message);         }     } } </code></pre>