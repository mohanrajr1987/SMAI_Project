<p>I have been browsing some C code recently and noticed that some people write functions to dynamically allocate and initialise C structs, e.g.</p>  <pre><code>struct pool {     /* ... */ };  struct pool *pool_new(/* ... */) {      struct pool *p = calloc(1, sizeof(*p));      /* initialise p ... */      return p; } </code></pre>  <p>I am unsure if this is good practice as this kind of definition enforces the use of dynamic allocation and may lead to unnecessary memory fragmentation. I know this is probably the way to define opaque objects but i've seen this kind of code for "normal" structs as well. What are the advantages of this kind of practice? </p>