<p>why doesn't this code compile?</p>  <p>The compilation error is in the struct FirmDecoder "return Firm()".</p>  <p>The error message is: 'Firm' cannot be constructed because it has no accessible initializers.</p>  <pre><code>//: Playground - noun: a place where people can play import UIKit protocol EntityDecoder {   func decode&lt;U&gt;(json: [String:AnyObject], index: Int) -&gt; U }  public struct Firm {   public init(){} }  struct FirmDecoder : EntityDecoder {   func decode&lt;Firm&gt;(json: [String : AnyObject], index: Int) -&gt; Firm {     return Firm()   } }  //extension EntityDecoder { // func decode&lt;Firm&gt;(json: [String : AnyObject], index: Int) -&gt; Firm { // return Firm() // } //} </code></pre>  <p><a href="http://i.stack.imgur.com/q6bAE.png" rel="nofollow">http://i.stack.imgur.com/q6bAE.png</a></p>  <p>Thanks in advance.</p>  <p><strong>UPDATE</strong> @JeremyP @mixel I didn't mean to declare FirmDecoder.decode() as a generic function. So your "orginal answer" was what I was trying to achieve.</p>  <p>Am I right thinking that instead of having to implement .decode for FirmDecoder, I could make an extension protocol to provide a default implementation, so FirmDecoder would just need to implement the HasInitializer you proposed in your updated answer.</p>  <p>Something like (I don't have access to XCode currently):</p>  <pre><code>protocol HasJsonInitializer {     init(json: [String:AnyObject], index: Int) }  protocol EntityDecoder {     func decode&lt;U: HasJsonInitializer&gt;(json: [String:AnyObject], index: Int) -&gt; U }  extension EntityDecoder {     func decode&lt;U: HasJsonInitializer&gt;(json: [String : AnyObject], index: Int) -&gt; U {         return U(json, index: index)     } }  struct FirmDecoder : EntityDecoder, HasJsonInitializer {     init(json: [String:AnyObject], index: Int) {         // json processing     } } </code></pre>  <p>Thanks for your inputs.</p>