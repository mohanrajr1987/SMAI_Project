<p>I am trying to pass in a empty struct pointer into a function called "initialize" as an output parameter and then after the function finishes I could retrieve the object pointed by the struct pointer. Some unexpected behaviors occur and I don't quite understand.</p>  <p>Below is my code:</p>  <pre><code>static void initialize(complex_struct*&amp; infoPtr) {     complex_struct myInfo;     infoPtr = &amp;myInfo;     // some other codes that modify the contents of myInfo     infoPtr-&gt;input_components = 3; }  static void myfunction() {     complex_struct* infoPtr = nullptr;     initialize(infoPtr);     std::cout &lt;&lt; infoPtr-&gt;input_components &lt;&lt; std::endl; } </code></pre>  <p>The output of this is an arbitrary large integer number. But I was expecting an integer 3 is printed.</p>  <p>Restrictions: I cannot modify complex_struct; it is a third_party struct that needs to be used.  Also, the reason why I need initialize() to be a separate function is that I am doing performance measurement on the memory allocation of complex_struct. So moving the first line of code in initialize() to myfunction() is not an ideal solution.</p>