<p>This is my code that I"m having problems with. I keep getting these errors:</p>  <blockquote>   <p>bad.c: In function ‘driver’:</p>      <p>bad.c:41: warning: initialization makes pointer from integer without a   cast</p>      <p>bad.c:49: warning: assignment makes pointer from integer without a   cast</p>      <p>bad.c:60: error: too few arguments to function ‘searchStudentID’</p>      <p>bad.c: At top level:</p>      <p>bad.c:89: error: conflicting types for ‘readStudents’</p>      <p>bad.c:41: note: previous implicit declaration of ‘readStudents’ was   here</p>      <p>bad.c: In function ‘readStudents’:</p>      <p>bad.c:95: warning: assignment makes pointer from integer without a   cast</p>      <p>bad.c:103: error: expected ‘;’ before ‘fclose’</p>      <p>bad.c: In function ‘printStudents’:</p>      <p>bad.c:116: error: request for member ‘FName’ in something not a   structure or  union</p>      <p>bad.c:116: error: request for member ‘LName’ in something not a   structure or  union</p>      <p>bad.c:116: error: request for member ‘GPA’ in something not a   structure or union</p>      <p>bad.c:116: error: request for member ‘ID’ in something not a structure   or union</p>      <p>bad.c:119: warning: ‘return’ with a value, in function returning void</p>      <p>bad.c: In function ‘searchStudentID’:</p>      <p>bad.c:131: error: invalid operands to binary == (have ‘int’ and   ‘Student’)</p>      <p>bad.c: At top level:</p>      <p>bad.c:160: error: conflicting types for ‘sortStudentsByLastName’</p>      <p>bad.c:49: note: previous implicit declaration of   ‘sortStudentsByLastName’ was  here</p>      <p>bad.c: In function ‘sortStudentsByLastName’:</p>      <p>bad.c:176: error: incompatible types when initializing type ‘int’   using type  ‘Student’</p>      <p>bad.c:178: error: incompatible types when assigning to type ‘Student’   from type  ‘int’</p>      <p>bad.c: In function ‘sortStudentsByID’:</p>      <p>bad.c:201: error: incompatible types when initializing type ‘int’   using type  ‘Student’</p>      <p>bad.c:203: error: incompatible types when assigning to type ‘Student’   from type  ‘int’</p> </blockquote>  <pre><code>typedef struct student { char FName[20]; char LName[20]; float GPA; int ID; } Student;  #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; /*  *   */  Student* ReadStudents(char* filename, int* numStudentsRef); void printStudents(Student* students, int numStudents); Student* searchStudentID(Student* students, int low, int high, int targetID); Student* sortStudentsByID(Student* students, int numStudents); Student* findHighestGPA(Student* students, int numStudents);  void writeToReadableFile(Student* students, int numStudents, char* filename); void driver(char* filename, char* filename2);  int main(int argc, char** argv) {  driver(argv[0], argv[1]);   return (EXIT_SUCCESS); }  void driver(char* filename, char* filename2) {     int numStudents;     Student* students = readStudents(filename, &amp;numStudents);     printf("Sudents: \n");     printStudents(students, numStudents);   printf("The highest GPA is %.2f.\n", findHighestGPA(students, numStudents).GPA);  printf("------------\nStudents sorted by last name:\n"); students=sortStudentsByLastName(students, numStudents); printStudents(students, numStudents);  students = sortStudentsByID(students, numStudents); int ID; int control; while(1) {     printf("------------\nGive me a student ID to search for: ");     scanf("%d", ID);       Student* result = searchStudentID(students, numStudents-1, ID);      if(result = NULL)      {         printf("Student not found.\n");     }     else     {         printf("Found student: \n");         printStudents(result, 1);     }     printf("\n\nEnter 0 to quit or 1 to search for another ID: ");     scanf("%d", &amp;control);     while(control != 1 || control != 0)     {         printf("Sorry, I don't understand that command. Try again.\n");         printf("\n\nEnter 0 to quit or 1 to search for another ID: ");         scanf("%d", &amp;control);     }     if(control == 0)     {         break;     } }  writeToReadableFile(students, numStudents, filename2);  }  Student* readStudents(char* filename, int* numStudentsRef) {     FILE* fp = fopen(filename, "r");  fseek(fp, 0, SEEK_END);  numStudentsRef = (int)ftell(fp) / sizeof(Student); rewind(fp);  Student* students;  fread(&amp;students, sizeof(Student), *numStudentsRef, fp);  free(students)  fclose(fp);  return students;   }  void printStudents(Student* students, int numStudents) { int i = 0;  for(; i &lt; numStudents; i++) {     printf("-----%s %s\n\tGPA: %f\n\tStudent ID: %d\n------\n",              students.FName, students.LName, students.GPA, students.ID); }  return 0;  }  Student* searchStudentID(Student* students, int low, int high, int targetID) { if(low&lt;=high) {     return NULL; }  int mid = (low+high)/2;  if(targetID == students[mid]) {     return &amp;students[mid]; } else if(targetID &gt; students[mid].ID) {     return searchStudentID(students, low, mid, targetID); } else {     return searchStudentID(students, mid+1, high, targetID); } }  Student* findHighestGPA(Student* students, int numStudents) { Student* max = &amp;students[0]; int i = 1; for(i; i &lt; numStudents; i++) {     if(students[i].GPA &gt; max-&gt;GPA)     {         max = &amp;students[i];     } }  return max; }  Student* sortStudentsByLastName(Student* students, int numStudents) { int i, j, min;  for(j = 0; j &lt; numStudents-1; j++) {     for(i = j+1; i &lt; numStudents; i++)     {         if(strcmp(students[i].LName, students[min].LName) &gt; 0)          {             min = i;         }     }      if(min != j)     {         int tmp = students[j];         students[j] = students[min];         students[min] = tmp;     } }  return students; }  Student* sortStudentsByID(Student* students, int numStudents) { int i, j, min; for(j = 0; j &lt; numStudents-1; j++) {     min = j;     for(i = j+1; i &lt; numStudents; i++)     {         if(students[i].ID &lt; students[min].ID)         {             min = i;         }     }      if(min != j)     {         int tmp = students[j];         students[j] = students[min];         students[min] = tmp;     } }  return students; }  void writeToReadableFile(Student* students, int numStudents, char* filename) { FILE* fp = fopen(filename, "w"); int i = 0; for(;i &lt; numStudents; i++) {     fprintf(fp, "%s %s\n", students[i].FName, students[i].LName);     fprintf(fp, "%d %d\n", &amp;students[i].GPA, &amp;students[i].ID); } fclose(fp); free(students); } </code></pre>