<p>I've run into a problem with structs which I believe is caused by incorrect mallocs, or possibly rather my reallocs. I've cut down the code as much as possible to only show what I believe could be relevant, so nearly all the actual operations are omitted.</p>  <p>The struct I have looks as follows: </p>  <pre><code>struct poly_t {     int nvars, *factor, *exp; }; </code></pre>  <p>The value that's acting weird is <code>nvars</code>, which to me would signify that I'm somehow not reserving memory properly. What I do is that I first have a function that creates and fills the struct, then I have another function where I send two of these structs in and create a third identical struct. When editing the value of nvars in this third struct, it very rarely also edits the value of nvars in the first struct. When running gdb, it shows the exact row it happens on is when I do <code>thirdp-&gt;nvars++;</code> in my mul function.</p>  <p>So with this function I create my first and second structs (<code>a</code> and <code>b</code>).</p>  <pre><code>poly_t* new_poly_from_string(const char* a){     struct poly_t* p = malloc(sizeof(struct poly_t));     p-&gt;nvars = 0;     p-&gt;factor = malloc(strlen(a) * sizeof(int));     p-&gt;exp = malloc(strlen(a) * sizeof(int));     for (int i = 0; i &lt; strlen(a); i++){         //do stuff to put a into p, using at most p-&gt;factor[p-&gt;nvars] and the same for p-&gt;exp     p-&gt;factor = realloc(p-&gt;factor, p-&gt;nvars*sizeof(int));     p-&gt;exp = realloc(p-&gt;exp, p-&gt;nvars*sizeof(int));     printf("%d", p-&gt;nvars); //At this point, nvars is the correct value     return p; } </code></pre>  <p>And below is the function that works in 9/10 cases but in some rare cases it doesn't. I've marked the exact row that changes <code>a-&gt;nvars</code> with an arrow <code>--&gt;</code>.</p>  <pre><code>poly_t* mul(poly_t* a, poly_t* b){     struct poly_t* thirdp = malloc(sizeof(struct poly_t));     thirdp-&gt;nvars = 0;     thirdp-&gt;factor = malloc((a-&gt;nvars + b-&gt;nvars) * sizeof(int));     thirdp-&gt;exp = malloc((a-&gt;nvars + b-&gt;nvars) * sizeof(int));     for (int i = 0; i &lt; a-&gt;nvars; i++){         for (int j = 0; j &lt; b-&gt;nvars; j++){             for (int k = 0; k &lt; p-&gt;nvars; k++){                 if (p-&gt;exp[k] == a-&gt;exp[i] + b-&gt;exp[j]){                     p-&gt;factor[k] += a-&gt;factor[i]*b-&gt;factor[j];                     found = 1;                     break;                 }             }             if (!found){                 p-&gt;factor[p-&gt;nvars] = a-&gt;factor[i]*b-&gt;factor[j];                 p-&gt;exp[p-&gt;nvars] = a-&gt;exp[i] + b-&gt;exp[j]; --&gt;             p-&gt;nvars++; //This is the row that changes a-&gt;nvars according to gdb             }         }     }      return thirdp; } </code></pre>  <p>Here's what I got when running gdb while trying to figure out what was changing <code>a-&gt;nvars</code>. Note that <code>p</code> is the same as <code>thirdp</code> above, I just renamed it here for clarity. </p>  <p><a href="http://i.stack.imgur.com/xWT5v.png" rel="nofollow"><img src="http://i.stack.imgur.com/xWT5v.png" alt="GDB output"></a></p>  <p>edit: Readded the actual code in the mul function</p>