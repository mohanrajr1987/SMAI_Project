<p>So bellow follows a function that will then be called for a main program. My problem is, if I do not declare challInfo as a struct, upon compiling, it will return:</p>  <blockquote>   <p>ERROR on page PhotoPoints at line 5, col 21: ‘challInfo’ was not declared in this scope</p> </blockquote>  <p>Meanwhile, if I do declare it (as it is bellow) it returns:</p>  <blockquote>   <p>ERROR on page PhotoPoints at line 5, col 30: expected primary-expression before ‘.’ token ERROR on page PhotoPoints at line 7, col 52: expected primary-expression before ‘.’ token ERROR on page PhotoPoints at line 8, col 28: expected primary-expression before ‘.’ token ERROR on page PhotoPoints at line 8, col 60: expected primary-expression before ‘.’ token ERROR on page PhotoPoints at line 8, col 109: expected primary-expression before ‘.’ token ERROR on page PhotoPoints at line 9, col 31: expected primary-expression before ‘.’ token ERROR on page PhotoPoints at line 9, col 66: expected primary-expression before ‘.’ token ERROR on page PhotoPoints at line 9, col 118: expected primary-expression before ‘.’ token ERROR on page PhotoPoints at line 14, col 35: expected primary-expression before ‘.’ token ERROR on page PhotoPoints at line 14, col 57: expected primary-expression before ‘.’ token</p> </blockquote>  <p>I have been looking around the internet, including Stack Overflow, and it always seems the answer to this is specific to each case. I admit I'm lost. Can you help?</p>  <pre><code>float PhotoPoints() { struct challInfo;    bool isFacingOther();   bool sphereInDark();   bool isCameraOn = challInfo.camera.cameraOn;   bool isFacingOtherResult = isFacingOther();   bool isOppNotInDarkZone = !sphereInDark(challInfo.other.zrState);   bool myMirror = challInfo.me.mirrorTime != 0 &amp;&amp; challInfo.me.mirrorTime + ITEM_MIRROR_DURATION &gt; challInfo.currentTime;   bool otherMirror = challInfo.other.mirrorTime != 0 &amp;&amp; challInfo.other.mirrorTime + ITEM_MIRROR_DURATION &gt; challInfo.currentTime;   float picturePointValue = 0;   if (isCameraOn &amp;&amp; isFacingOtherResult &amp;&amp; isOppNotInDarkZone &amp;&amp; !myMirror)   {     float bet[3], distance;     mathVecSubtract(bet, challInfo.me.zrState, challInfo.other.zrState, 3);     distance = mathVecMagnitude(bet, 3);      if (distance &lt; PHOTO_MIN_DISTANCE) {       DEBUG(("Not a good shot: too close to the other satellite | "));       return 0.0;     }     picturePointValue = 2.0 + 0.1/(distance - PHOTO_MIN_DISTANCE + 0.1);     if(otherMirror){       picturePointValue = 0;       DEBUG(("Not a good shot: Opposing mirror active |"));     }    }   else if(!isCameraOn){     DEBUG(("Not a good shot: camera off |"));   }   else if(myMirror){     DEBUG(("Not a good shot: my mirror's in the way |"));   }   else if(!isFacingOtherResult) {         DEBUG(("Not a good shot: not facing the other satellite | "));     }   else if(!isOppNotInDarkZone){     DEBUG(("Not a good shot: opponent in dark zone |"));   }   return picturePointValue; } </code></pre>