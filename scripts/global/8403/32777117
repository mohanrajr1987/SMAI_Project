<p>I’m trying to create an arrow that is rotatable and resizable. I have the functionality for each set up and working in isolation but am struggling to understand the necessary calculations involved to get the resizable functionality working after a rotation. I’ve set up a fiddle so you can see where I am. The dream would be to have rotation and resize via a single control but for now I’ve got two (blue is rotate, green resize). I’ve been looking at transform matrices – pulling, updating and resetting them (I haven’t included any of this in the fiddle as I didn’t really get anywhere) – I just can’t seem to get the calculations right. Any help would be much appreciated!</p>  <p>Fiddle: <a href="https://jsfiddle.net/bigwigal/5syv35wL/15/" rel="nofollow">https://jsfiddle.net/bigwigal/5syv35wL/15/</a></p>  <pre><code>(function() {     this.isDragging = false;     this.isRotate = false;     this.isResize = false;     this.hx = null;     this.hy = null;     this.ox = null;     this.oy = null;     this.cx = null;     this.cy = null;     this.rx = null;     this.ry = null;     this.lastAngle = 0;      this.init = function() {         this.setEventHandlers();     };      this.setEventHandlers = function() {         var that = this;          $('.arrow-resize')             .on('mousedown', function(e) {                 e.preventDefault();                 e.stopPropagation();                 that.isResize = true;                 that.initArrowDrag(e);             });          $('.arrow-rotate')             .on('mousedown', function(e) {                 e.preventDefault();                 e.stopPropagation();                 that.isRotate = true;                 that.initArrowDrag(e);             });          $(document)             .on('mousemove', function(e) {                 if (that.isDragging) {                     e.preventDefault();                      if (that.isRotate) {                         that.dragRotate(e);                     }                     else if (that.isResize) {                         that.dragResize(e);                     }                 }             })             .on('mouseup mouseleave', function(e) {                 if (that.isDragging) {                      if (that.isRotate) {                         that.stopDragRotate(e);                     }                     else if (that.isResize) {                         that.stopDragResize(e);                     }                  }             });     };      this.initArrowDrag = function(e) {         var $arrow = $(e.target).parents('.arrow-container');         var offset = $arrow.offset();         var width = $arrow.width();         var height = $arrow.height();          this.isDragging = true;         this.ox = offset.left;         this.oy = offset.top;         this.cx = this.ox + width / 2;         this.cy = this.oy + height / 2;         this.hx = e.pageX;         this.hy = e.pageY;         this.rx = e.pageX - this.ox; //pageX relative to offset left         this.ry = e.pageY - this.oy; //pageY relative to offset top         this.tr = $arrow.css('transform');          if (!this.lastAngle) {             this.lastAngle = 0;             console.log('Initial start angle: 0');         }     };      this.dragResize = function(e) {         var $arrow = $(e.target).parents('.arrow-container');         var $tail = $arrow.find('.arrow-tail');         var diff = (e.pageX &gt; this.hx) ? -Math.abs(this.hx - e.pageX) : this.hx - e.pageX;         var x = e.pageX - this.rx;         var y = this.oy;          $tail.width($tail.width() + diff);          $arrow.css({             'top': y,             'left': x         });          this.hx = e.pageX;     };      this.stopDragResize = function(e) {         this.isDragging = false;         this.isResize = false;     };      this.dragRotate = function(e) {         var sx = e.pageX;         var sy = e.pageY;          if (sx !== this.cx &amp;&amp; sy !== this.cy) {             var radians = Math.atan2(sy - this.cy, sx - this.cx);             var degree;              console.log('start angle: ' + this.lastAngle);              radians -= Math.atan2(this.hy - this.cy, this.hx - this.cx);             radians += this.lastAngle;             degree = (radians * (360 / (2 * Math.PI)));              $('.arrow-container').css({                 '-ms-transform': 'rotate(' + degree + 'deg)',                 '-webkit-transform': 'rotate(' + degree + 'deg)',                 'transform': 'rotate(' + degree + 'deg)'             });              console.log(radians, degree);         }     };      this.stopDragRotate = function(e) {         var sx = e.pageX;         var sy = e.pageY;         var radians = Math.atan2(sy - this.cy, sx - this.cx);          this.isDragging = false;         this.isRotate = false;          $('.arrow-rotate').css('opacity', '0.5');          radians -= Math.atan2(this.hy - this.cy, this.hx - this.cx);         radians += this.lastAngle;          this.lastAngle = radians;          console.log('end angle: ' + this.lastAngle);     };      return init();     })(); </code></pre>