<p>first question so take it easy! </p>  <p>Creating a simple iOS App. I have a view which contains a rotating dial (a UIImageView) (rotates through Rotation Gesture) and a UIButton which when pressed uses UIView animateWithDuration to move the button to one of 3 locations. </p>  <p>My issue.. rotating the dial is fine, moving the button is fine, BUT.. when I move the button, then rotate the dial, the location of the button is "reset" to its original frame.</p>  <p>How can I stop the rotation effecting the location of the button / the movement of the button.</p>  <p>ViewController.h</p>  <pre><code>#import &lt;UIKit/UIKit.h&gt; #import &lt;AVFoundation/AVFoundation.h&gt;  @interface ViewController : UIViewController &lt;UIGestureRecognizerDelegate&gt;{  IBOutlet UIImageView *lock; IBOutlet UILabel *number; IBOutlet UILabel *displayNumber1; IBOutlet UILabel *displayNumber2; IBOutlet UILabel *displayNumber3;  IBOutlet UIButton *slider;  AVAudioPlayer *theAudio;  }  @property (retain, nonatomic) IBOutlet UIImageView *lock; @property (retain, nonatomic) IBOutlet UILabel *number; @property (retain, nonatomic) IBOutlet UILabel *displayNumber1; @property (retain, nonatomic) IBOutlet UILabel *displayNumber2; @property (retain, nonatomic) IBOutlet UILabel *displayNumber3;  @property (retain, nonatomic) IBOutlet UIButton *slider;  @property (retain, nonatomic) AVAudioPlayer *theAudio;  -(IBAction)moveSlider:(id)sender;  @end </code></pre>  <p>ViewController.m</p>  <pre><code>#import "ViewController.h"  @interface ViewController ()  @end  @implementation ViewController  #define RADIANS_TO_DEGREES(radians) ((radians) * (180.0 / M_PI))  @synthesize lock, number, slider, displayNumber1, displayNumber2, displayNumber3, theAudio;  CGFloat _lastRotation; int lastNumber; NSTimer *clickTimer;  int _whichNumberSelected;  int _currentDirection; CGFloat _changeDirectionMatch;  float no1Left = 61; float no2Left = 151; float no3Left = 238;  NSString *lastText1;  CGRect newFrameSet;  - (BOOL)prefersStatusBarHidden {     return YES; }    - (void)viewDidLoad {     [super viewDidLoad];      lock.userInteractionEnabled = YES;       UIRotationGestureRecognizer *rotationGestureRecognizer = [[UIRotationGestureRecognizer alloc] initWithTarget:self action:@selector(handleRotationWithGestureRecognizer:)];     rotationGestureRecognizer.delegate = self;     [lock addGestureRecognizer:rotationGestureRecognizer];      _lastRotation = 0;      lastNumber = 0;       NSString *path = [[NSBundle mainBundle] pathForResource:@"click" ofType:@"wav"];     NSURL *fileURL = [[NSURL alloc] initFileURLWithPath: path];     theAudio = [[AVAudioPlayer alloc] initWithContentsOfURL:fileURL error:NULL];     theAudio.volume = 1.0;     [theAudio prepareToPlay];      _currentDirection = 0;     _changeDirectionMatch = 0;     _whichNumberSelected = 1;      lastText1 = ([NSString stringWithFormat:@"0"]);  }    -(IBAction)moveSlider:(id)sender {      [UIView animateWithDuration:0.5 delay:0 options:UIViewAnimationOptionCurveEaseOut animations:^{         CGRect newFrame = slider.frame;         switch (_whichNumberSelected) {             case 1:                 newFrame.origin.x= no2Left;                 _whichNumberSelected = 2;                 break;             case 2:                 newFrame.origin.x= no3Left;                 _whichNumberSelected = 3;                 break;             case 3:                 newFrame.origin.x= no2Left;                 _whichNumberSelected = 4;                 break;             case 4:                 newFrame.origin.x= no1Left;                 _whichNumberSelected = 1;                 break;              default:                 break;         }         slider.frame = newFrame;         newFrameSet = newFrame;     } completion:nil]; }     -(void)handleRotationWithGestureRecognizer:(UIRotationGestureRecognizer *)rotationGestureRecognizer{        CGFloat newRot = RADIANS_TO_DEGREES(rotationGestureRecognizer.rotation) / 3.6;     lock.transform = CGAffineTransformRotate(lock.transform, rotationGestureRecognizer.rotation);     CGFloat c = _lastRotation - newRot;     _lastRotation = c;      if(c &lt; 0){         c = c + 100;         _lastRotation = c;     }     if(c &gt;= 100){         c = c-100;         _lastRotation = c;     }        if(c &gt;= 99.5){         displayNumber1.text = @"0";     } else {         displayNumber1.text = ([NSString stringWithFormat:@"%.f", c]);     }      if([displayNumber1.text isEqualToString:lastText1]){     } else {         [theAudio play];     }        lastText1 = displayNumber1.text;      rotationGestureRecognizer.rotation = 0.0;  }       - (void)didReceiveMemoryWarning {     [super didReceiveMemoryWarning];     // Dispose of any resources that can be recreated. }  @end </code></pre>