<p>The GCC intrinsic <code>__atomic_store</code> has signature:</p>  <pre><code>void __atomic_store (type *ptr, type *val, int memorder) </code></pre>  <p>In order to store the value of <code>*val</code> into <code>*ptr</code>, first the value <code>*val</code> must be loaded.  Is this operation atomic as well or is it just the store into <code>*ptr</code> which is atomic?</p>  <p>My feeling is the latter, because the other atomic store function <code>__atomic_store_n</code> doesn't have this issue because the value to be loaded is passed by value not pointer.  Although that's not scientific, that's just a gut feeling as to why the load operation isn't atomic.</p>  <p><strong>EDIT</strong></p>  <p>N.B. There are analgous questions for all the other <code>__atomic</code> functions which have <code>_n</code> variants, e.g. </p>  <pre><code>void __atomic_load (type *ptr, type *ret, int memorder)  </code></pre>  <p>has an implicit store into <code>*ret</code> once <code>*ptr</code> has been loaded.  Again I'm guessing that the guarantees only apply to the initial load from <code>*ptr</code>.</p>