<p>I am having a problem with my Primefaces Project. I am using Primefaces 5.2 and also Hibernate 5.0 for ORM. I am working on Eclipse and using Microsoft SQL Server. I am NOT using Maven (which I noticed several people do use). I also checked several SO questions with no positive result, including these:</p>  <p><a href="http://stackoverflow.com/questions/17873963/unable-to-create-managed-bean-primefaces">unable to create managed bean primefaces</a></p>  <p><a href="http://stackoverflow.com/questions/11582881/unable-to-create-managed-bean-userbean-jsf">Unable to create managed bean UserBean - JSF</a></p>  <p>Previous to the error I was able to Write to my Database from a Java Controller without trouble and verified the correct insertion directly on my database. </p>  <p>I am now working on a LogIn validator, for which I have this class I am working on:</p>  <pre><code>package modelo;  import java.util.List;  import java.util.Date; import java.util.Iterator;   import org.hibernate.HibernateException;  import org.hibernate.Session;  import org.hibernate.Transaction; import org.hibernate.SessionFactory; import org.hibernate.cfg.Configuration;  import modelo.Empleado;  public class LoginController {      private static SessionFactory factory;     private String usuario;     private String contraseña;      public String validar(){         try{              factory = new Configuration().configure().buildSessionFactory();              System.out.println("Validando");         }         catch (Throwable ex) {               System.err.println("Failed to create sessionFactory object." + ex);              System.out.println("NOPE");              throw new ExceptionInInitializerError(ex);          }          LoginController LC = new LoginController();          /*Verificar exista un usuario con ese login_name y contraseña*/          Session session = factory.openSession();         Transaction tx = null;               try{              tx = session.beginTransaction();             List validados = session.createQuery("FROM EMPLEADO WHERE contraseña ='"+contraseña+"' and nombre ='"+usuario+"'").list();              Empleado emp = (Empleado) validados.get(0);             if(emp == null){                 System.out.println("Error de Autenticación");                 return "login";             }             else{                 System.out.println("Autenticacion Correcta, User: "+usuario+", pass: "+contraseña);                 return "asistencia";             }          }catch(HibernateException e){             if (tx!=null) tx.rollback();             e.printStackTrace();          }finally{             session.close();         }         return "login";     }      public String getUsuario() {         return usuario;     }      public void setUsuario(String usuario) {         this.usuario = usuario;     }      public String getContraseña() {         return contraseña;     }      public void setContraseña(String contraseña) {         this.contraseña = contraseña;     }  } </code></pre>  <p>However, when I run it I get the following error: <a href="http://i.stack.imgur.com/E4QUN.png" rel="nofollow"><img src="http://i.stack.imgur.com/E4QUN.png" alt="enter image description here"></a></p>  <p>I have searched for a way to "configure" that "dependency" but with no success. I am possitive that my <code>hibernate.cfg.xml</code> is correctly written because I could write to my DB as mentioned above, however here is the code for that file:</p>  <pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;!DOCTYPE hibernate-configuration SYSTEM  "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;  &lt;hibernate-configuration&gt;   &lt;session-factory&gt;     &lt;property name="connection.driver_class"&gt;com.microsoft.sqlserver.jdbc.SQLServerDriver&lt;/property&gt;     &lt;property name="connection.url"&gt;jdbc:sqlserver://localhost:1433;databaseName=Medidas&lt;/property&gt;     &lt;property name="connection.username"&gt;sa&lt;/property&gt;     &lt;property name="connection.password"&gt;***&lt;/property&gt;     &lt;property name="dialect"&gt;org.hibernate.dialect.SQLServerDialect&lt;/property&gt;      &lt;property name="hibernate.connection.pool_size"&gt;100&lt;/property&gt;             &lt;property name="show_sql"&gt;false&lt;/property&gt;      &lt;property name="current_session_context_class"&gt;thread&lt;/property&gt;      &lt;!-- Mapping files --&gt;     &lt;mapping resource="Empleado.hbm.xml"/&gt;    &lt;/session-factory&gt; &lt;/hibernate-configuration&gt; </code></pre>  <p>I suspect it has something to do with the <code>web.xml</code> file but I did not find how to configure it. Here is my <code>web.xml</code> practically unchanged since I downloaded the Base Project:</p>  <pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"           xmlns="http://java.sun.com/xml/ns/javaee"           xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"           version="3.0"&gt;   &lt;!-- The bare minimum needed for JSF 2.2 is a servlet 2.5 or later        declaration (this uses 3.0) and the mapping for the FacesServlet.        Setting PROJECT_STAGE to Development is highly recommended        during initial development so that you get more helpful        error messages. Whether you want server-side state saving        (default) or client-side is a more complicated question:        client-side uses more bandwidth but fewer server resources.        Client-side also helps to avoid the dreaded view expired exceptions.         From JSF 2 and PrimeFaces tutorial         at http://www.coreservlets.com/JSF-Tutorial/jsf2/   --&gt;   &lt;!-- Hibernate Here ??? --&gt;   &lt;resource-env-ref&gt;     &lt;resource-env-ref-name&gt;jdbc/DSWebAppDB&lt;/resource-env-ref-name&gt;     &lt;resource-env-ref-type&gt;javax.sql.DataSource&lt;/resource-env-ref-type&gt;   &lt;/resource-env-ref&gt;   &lt;servlet&gt;     &lt;servlet-name&gt;Faces Servlet&lt;/servlet-name&gt;     &lt;servlet-class&gt;javax.faces.webapp.FacesServlet&lt;/servlet-class&gt;   &lt;/servlet&gt;   &lt;servlet-mapping&gt;     &lt;servlet-name&gt;Faces Servlet&lt;/servlet-name&gt;     &lt;url-pattern&gt;*.jsf&lt;/url-pattern&gt;   &lt;/servlet-mapping&gt;   &lt;context-param&gt;     &lt;param-name&gt;javax.faces.PROJECT_STAGE&lt;/param-name&gt;     &lt;param-value&gt;Development&lt;/param-value&gt;   &lt;/context-param&gt;   &lt;context-param&gt;     &lt;description&gt;State saving method: 'client' or 'server' (default). See JSF Specification section 2.5.2&lt;/description&gt;     &lt;param-name&gt;javax.faces.STATE_SAVING_METHOD&lt;/param-name&gt;     &lt;param-value&gt;client&lt;/param-value&gt;   &lt;/context-param&gt;   &lt;!-- If you go to http://host/project/ (with no file name), it will        try index.jsf first, welcome.jsf next, and so forth.    --&gt;   &lt;welcome-file-list&gt;     &lt;welcome-file&gt;index.jsf&lt;/welcome-file&gt;     &lt;welcome-file&gt;welcome.jsf&lt;/welcome-file&gt;     &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;     &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;   &lt;/welcome-file-list&gt; &lt;/web-app&gt; </code></pre>  <p>Any Ideas on what is causing my problem? Should I add configurations or dependencies that I am missing? Thanks in advance (if you need more snippets or information please do tell me)</p>