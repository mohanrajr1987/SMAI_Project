<p>For my new project I plan to use Hibernate 5 and Spring 4 and as always like to separate into different layers / projects.</p>  <p>Gradle dependencies:<br>     "org.springframework:spring-webmvc:4.2.1.RELEASE",     "org.springframework:spring-orm:4.2.1.RELEASE",     'org.hibernate:hibernate-core:5.0.2.Final',     'mysql:mysql-connector-java:5.1.36'</p>  <p>There is an API project, that contains a User.class. From my opinion this user class must not use any annotations for a database layer. It must not specify <code>@Table(name = "users")</code> or other things. It should be a simple Objects with getters and setters.</p>  <p>The database layer should decide how to store the data and this depends strongly on the database (e.g. MongoDB or MySQL).</p>  <p>I followed some tutorials for Hibernate and ended up with the following <code>@Configuration</code> class</p>  <pre><code>@Configuration @ComponentScan("de.pentos.proto") @EnableWebMvc @EnableTransactionManagement public class AppConfig {     private static final Logger log = LoggerFactory.getLogger(AppConfig.class);      private static Properties getHibernateProperties() {         final Properties properties = new Properties();         properties.put("hibernate.show_sql", "true");         // properties.put("hibernate.dialect", "org.hibernate.dialect.MySQLDialect");         properties.put("hibernate.dialect", "org.hibernate.dialect.MySQL5Dialect");         properties.put("hbm2ddl.auto", "create");         return properties;     }      {         log.debug("Here am I: {}");     }      @Bean(name = "dataSource")     public DataSource getDataSource() {         final DriverManagerDataSource dataSource = new DriverManagerDataSource();         dataSource.setDriverClassName("com.mysql.jdbc.Driver");         dataSource.setUrl("jdbc:mysql://localhost:3306/myschema");         dataSource.setUsername("user");         dataSource.setPassword("password");         return dataSource;     }      @Inject     @Bean(name = "sessionFactory")     public SessionFactory getSessionFactory(final DataSource dataSource) {         final LocalSessionFactoryBuilder sessionBuilder = new LocalSessionFactoryBuilder(dataSource);         sessionBuilder.addAnnotatedClasses(User.class);         sessionBuilder.addProperties(getHibernateProperties());         return sessionBuilder.buildSessionFactory();     }      @Inject     @Bean(name = "transactionManager")     public HibernateTransactionManager getTransactionManager(final SessionFactory sessionFactory) {         final HibernateTransactionManager transactionManager = new HibernateTransactionManager(                 sessionFactory);         return transactionManager;     } } </code></pre>  <p>It works very well, except it uses an annotated class.</p>  <p>How can I add my <code>hbm/user.xml</code> to the sessionBuilder?</p>  <p>I tried with <code>Configuration</code> class, that I found in some examples, but the Method <code>buildSessionFactory()</code> is deprecated.</p>  <p>I also tried the <code>ServiceRegistry</code> described <a href="http://stackoverflow.com/questions/8621906/is-buildsessionfactory-deprecated-in-hibernate-4">here</a> but then lost my datasource approach and without the datasource the system was not able to setup the <code>HibernateTransactionManager</code>.<br> Without <code>HibernateTransactionManager</code> I was not able to use <code>@Transactional</code> and I don't like to open and close me transactions manually.</p>  <p>Currently I'm spinning in circles and really need help to get it to work. I already thought about throwing Hibernate away and use my good old MyBatis approach, but you know, I like to learn something new...</p>