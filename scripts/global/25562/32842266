<p>How far down the <a href="https://en.wikipedia.org/wiki/Separation_of_concerns" rel="nofollow">Separation of Concerns</a> route can we go with Classic ASP?</p>  <p>Presently, I try to minimise the use of Classic ASP in my mark-up pages by using <code>Include</code>s and only embedding (<code>&lt;%= %&gt;</code>) <code>Response.Writes</code> in output attributes or inner HTML text (e.g. <code>&lt;input type="text"&gt;&lt;%= myVal %&gt;&lt;/input&gt;</code>).</p>  <p>On rare occasions it does become necessary to use conditional statements to branch output, but I usually embed this as a call to a <code>Sub</code> defined in the included ASP code.</p>  <p>That is where things become a little more crazy, though. I'm interested in seeing how others separate their mark-up when coding up a section of a form, or group of HTML controls, within a Classic ASP code file.</p>  <p>As a simple example, let's say we have a function that simply displays a label and a text box on a form when the sub <code>InputPair</code> is called from the mark-up:</p>  <pre class="lang-vbs prettyprint-override"><code>&lt;% InputPair "Forename", dsFormItem(C_COL_FORENAME, 0) %&gt; </code></pre>  <p>The sub behind the call then needs to display the appropriate HTML mark-up elements, obviously a <code>label</code> and <code>input (type=text)</code> box. I have seen this done several ways, including:</p>  <ul> <li><code>Response.Write()</code></li> <li>Nested HTML</li> <li>Separated HTML lniked via <code>include</code></li> </ul>  <p>But how would you, the reader, go about applying SoC in such circumstances? This is a two way road, after all; personally I find it poor practice to include HTML mark-up in strings.</p>