<p>I am building a notifications list for an application I'm working on and I'm having trouble finding a way to take my list of notifications from the server and displaying them in separate lists in a RecyclerView. The end product would display the list of notifications with headers for Recent notifications and Older notifications, a la:</p>  <pre><code>&lt;RECENT HEADER&gt;     &lt;NOTIF-1&gt;     &lt;NOTIF-2&gt; &lt;OLDER HEADER&gt;     &lt;NOTIF-3&gt;     &lt;NOTIF-4&gt;     &lt;NOTIF-5&gt;     &lt;NOTIF-6&gt; </code></pre>  <p>except instead of angle-bracket text it's actual views representing those, complete with images, actual notification details and dividers.</p>  <p>I already have code that displays them in a RecyclerView:</p>  <p>XML:</p>  <pre><code>&lt;!-- Main layout --&gt; &lt;LinearLayout     android:layout_width="match_parent"     android:layout_height="match_parent"     android:orientation="vertical"&gt;      &lt;include layout="@layout/include_toolbar"/&gt;      &lt;RelativeLayout         android:id="@+id/content"         android:layout_width="match_parent"         android:layout_height="match_parent"&gt;          &lt;android.support.v4.widget.SwipeRefreshLayout             android:id="@+id/notification_swipe_refresh"             android:layout_width="match_parent"             android:layout_height="match_parent"&gt;              &lt;com.mapjungle.mymoose.ui.widget.EmptyRecyclerView                 android:id="@+id/notification_list"                 android:layout_width="match_parent"                 android:layout_height="match_parent"/&gt;          &lt;/android.support.v4.widget.SwipeRefreshLayout&gt;      &lt;/RelativeLayout&gt;  &lt;/LinearLayout&gt; </code></pre>  <p>Java:</p>  <pre><code>@InjectView(R.id.notification_list) RecyclerView mRecyclerView; @Inject Picasso mPicasso; @Inject NotificationService mUserService; private NotificationAdapter mAdatper;  @Override public void onCreate(Bundle savedInstanceState) {     super.onCreate(savedInstanceState);     setContentView(R.layout.activity_notifications);     ButterKnife.inject(this);     setTitle("Notifications");     mAdatper = new NotificationAdapter(mPicasso);     mRecyclerView.addItemDecoration(new HorizontalDividerItemDecoration.Builder(this)             .color(getResources().getColor(R.color.secondary_color))             .size(1)             .build());     final LinearLayoutManager layoutManager = new LinearLayoutManager(this);     layoutManager.setOrientation(LinearLayoutManager.VERTICAL);     mRecyclerView.setLayoutManager(layoutManager);     mRecyclerView.setAdapter(mAdatper);     updateList(); }  @Override protected int getSelfNavDrawerItem() {     return NAVDRAWER_ITEM_PHOTO_POST; }  public void updateList() {     mUserService.getNotifications(new Callback&lt;List&lt;Notification&gt;&gt;() {          @Override         public void success(List&lt;Notification&gt; notificationList, Response response) {             mAdatper.replaceWith(notificationList);         }          @Override         public void failure(RetrofitError error) {             Timber.e(error, "Failed to load notifications...");         }     }); } </code></pre>  <p>This all works fine enough to display all of the notifications and they're all sorted in the order from newest to oldest descending. But each has a boolean property "acknowledged" that is set to false if the user hasn't seen them before. I want to put split the list into the two groups I've explained above using this flag, but I don't know how to throw in the headers. I've thought about subclassing Notification to create NotificationHeader views and inserting them into the list where appropriate but that just feels sloppy to me. I've also thought about doing two recycler views, one for the new and another for the old, but visually that didn't work the way I intended (I haven't confirmed it but it looked like each recycler view scrolled independently of the others, something that I do not want). Any suggestions?</p>  <p>I know that the first idea of creating special Notification Headers will probably work, I've done something like that before, but it just feels like bad practice.</p>