<p>In my back end(java) i have a code for reminder job. After finishing the reminder job task i need to send the notification message to the users those who are added to the reminder functionality.We finished the coding for back end.I don't know how to add this functionality to front end(android studio)..I need to add this notification message in my chat window.Please tell me the solution for this.</p>  <p>This is my controller</p>  <pre><code>public class ReminderTask implements Task {      private static final Logger log = Logger.getLogger(ReminderTask.class);      @Autowired     private SendReminderMessageProcess sendReminderMessageProcessImpl;      /**      * @see com.ringee.web.job.Task#StartJob()      * @param      * @throws      */     @Override     public void StartJob() {         log.info("inside the reminder task");         Date todaysDate = new Date(System.currentTimeMillis());         log.info(" todays date ==== " + todaysDate);         try {             // starting reminder job             SchedulerData schedulerData = sendReminderMessageProcessImpl.startJob();              sendReminderMessageProcessImpl.extractReminderDaysData(schedulerData);              sendReminderMessageProcessImpl.endJob(schedulerData);          } catch (UserServiceException e) {             // TODO Auto-generated catch block             e.printStackTrace();         }     }  } </code></pre>  <p>This is my manage sir code for reminder job //Here we have a coding for send reminder message</p>  <pre><code>    @Service("sendReminderMessageProcessImpl")     public class SendReminderMessageProcessImpl implements SendReminderMessageProcess {          private static final Logger log = Logger.getLogger(SendReminderMessageProcessImpl.class);         private static final String SERVER_NODE_NAME = System.getProperty(IRingeeConstants.SERVER_NAME);          @Autowired         private JobDAO reminderJobDAOImpl;          @Autowired         private ManageEventService manageEventServiceImpl;          @Autowired         private ManageUserService manageUserServiceImpl;          @Autowired         private ManageMessageService manageMessageServiceImpl;          /**          * @see com.ringee.service.util.SendReminderMessageProcess#extractReminderDaysData()          * @param          * @throws          */         @Override         @Transactional(propagation = Propagation.REQUIRES_NEW)         public void extractReminderDaysData(SchedulerData schdulerData) throws UserServiceException {             // converting db date format which is EST timezone, to IST timezone, we             // are converting EDT (daylight savings) to IST date             // for fetching occasion date matching the converted date.             // if EST date is 2014-09-17 23:00:00 hours will result in 2014-09-18             // 08:30:00 hours, which means EDT is 9:30 hrs behind IST.             // so converteing EST timezone to IST timezone so above conversion will             // result in actual date and time in IST format with respect to EST/EDT             // format.             try {                 String dateESTTimeZone = schdulerData.getLastRunTime();                 String ISODateFormat = DateAndTimeUtility.formatDateTimeToISO8601(dateESTTimeZone);                 log.info("*********** todays date converted timezone IST ***********" + ISODateFormat);                 String todaysDate = DateAndTimeUtility.convertTimeZones(TimeZoneConstant.EST, TimeZoneConstant.IST, DATEFORMAT.DB_DATE_TIME_FORMAT, ISODateFormat);                 log.info(" todays date"+todaysDate);                 List&lt;EventBO&gt; eventBOs = manageEventServiceImpl.getEventsForSendingReminderMessage(todaysDate);                 for (EventBO eventBO : eventBOs) {                     List&lt;UserBO&gt; userBOs = manageUserServiceImpl.getUsersForEvent(eventBO.getEventId());                     for (UserBO userBO : userBOs) {                         MessageBO messageBO = new MessageBO();                         messageBO.setEventId(eventBO.getEventId());                         messageBO.setEventTitle(eventBO.getText());                         messageBO.setfromUserName(userBO.getUserName());                         messageBO.setMobileNumber(userBO.getMobileNumber());                         messageBO.setRingeeUserId(userBO.getRingeeUserId()); //here we are setting notification message                         messageBO.setMessage("Today is " + eventBO.getText() + " Place :" + eventBO.getPlace() + " Start Time :" + eventBO.getStartTime() + " End Time :" + eventBO.getEndTime());                         String result = manageMessageServiceImpl.sendMessageToGroup(userBOs, messageBO);                         log.info("Gcm result :" + result);                     }                 }             } catch (Exception Exp) {                 log.error("Exception while sending message to users", Exp);             }          } </code></pre>  <p>After finishing the reminder task i need to sent the notification to user</p>  <p><strong>FRONT END CODE</strong> This is my delegate code</p>  <pre><code>public String sendMessageToGroup(List&lt;UserMO&gt; UserMos, MessageMO messageMO) {         final StringBuilder result = new StringBuilder();         final String jsonStringMessageMO = gson.toJson(messageMO);         final String jsonStringUserMOs = gson.toJson(UserMos);         try {             HttpClient client = new DefaultHttpClient();             HttpConnectionParams.setConnectionTimeout(client.getParams(), 10000); // Timeout             List&lt;NameValuePair&gt; nameValuePairs = new ArrayList&lt;NameValuePair&gt;();             nameValuePairs.add(new BasicNameValuePair("messaseMo", jsonStringMessageMO));             nameValuePairs.add(new BasicNameValuePair("userBos", jsonStringUserMOs));             HttpPost post = new HttpPost(Constants.ROOTURL + "/message/sendMessageToGroup");             post.setEntity(new UrlEncodedFormEntity(nameValuePairs));             HttpResponse response = client.execute(post);             BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));             result.append(rd.readLine());         } catch (Exception e) {             e.printStackTrace();         }         return result.toString();     } } </code></pre>  <p>This is my group chat activity code </p>  <pre><code>@Override     public void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         setContentView(R.layout.chat_main);         context = getApplicationContext();         DatabaseHelper dbHelper = new DatabaseHelper(context);         inputMsg = (EditText) findViewById(R.id.inputMsg);         listViewMessages = (ListView) findViewById(R.id.list_view_messages);         adapter = new MessagesListAdapter(context, listChatMessageObjectses);         //adapter functionality added for show the previous chat list of event/invite         listViewMessages.setAdapter(adapter);         sharedpreferences = getSharedPreferences(Constants.SHARED_PREFERENCE_NAME, context.MODE_PRIVATE);         // by default first primary user is current user in sql lite         // user table         userMO = dbHelper.getRingeeUserData(1);           if (!sharedpreferences.getString("MessageMO", "null").equals("null")) {             MessageMO messageMO1 = (MessageMO) gson.fromJson(sharedpreferences.getString("MessageMO", "null"), new TypeToken&lt;MessageMO&gt;() {             }.getType());             eventMO.setEventId(messageMO1.getEventId());             eventMO.setText(messageMO1.getEventTitle());             Log.i("message values", messageMO1.toString());             ChatMessageObjects chatMessageObjects = new ChatMessageObjects();             //chatMessageObjects.setMessage(messageMO1.getMessage());             chatMessageObjects.setSelf(0);             chatMessageObjects.setFromName(messageMO1.getfromUserName());             listChatMessageObjectses.add(chatMessageObjects);             //listViewMessages.setAdapter(adapter);             adapter.notifyDataSetChanged();         }         if (getIntent().getExtras() != null &amp;&amp; getIntent().getExtras().containsKey("eventMo")) {             eventMO = (EventMO) getIntent().getExtras().getSerializable("eventMo");          }          new AsyncTask&lt;Void, Void, String&gt;() {             @Override             protected String doInBackground(Void... arg0) {                 return userDelegate.getUsersForEvent(eventMO.getEventId());             }              @Override             protected void onPostExecute(String eventlists) {                 eventUserMOs = gson.fromJson(eventlists, new TypeToken&lt;ArrayList&lt;UserMO&gt;&gt;() {                 }.getType());                 Toast.makeText(getApplicationContext(), "event users " + eventUserMOs.size(), Toast.LENGTH_LONG).show();             }         }.execute(null, null, null);         Button sendButton = (Button) findViewById(R.id.btnSend);          sendButton.setOnClickListener(new View.OnClickListener() {              @Override             public void onClick(View arg0) {                 ChatMessageObjects chatMessageObjects = new ChatMessageObjects();                 chatMessageObjects.setMessage_type(Constants.MESSAGE_TYPE_MSG);                 chatMessageObjects.setMessage(inputMsg.getText().toString());                 chatMessageObjects.setSelf(1);                 chatMessageObjects.setIs_delete(0);                 chatMessageObjects.setFromName("");                 //date and time function added here                 chatMessageObjects.setDate(DateFormat.getDateTimeInstance().format(new Date()));                 chatMessageObjects.setEvent_id(eventMO.getEventId());                 DatabaseHelper dbHelper = new DatabaseHelper(context);                 long RowId = dbHelper.insertGroupChatMessage(chatMessageObjects);                 Toast.makeText(getApplicationContext(), "message row id" + RowId, Toast.LENGTH_SHORT).show();                 listChatMessageObjectses.add(chatMessageObjects);                 listViewMessages.setAdapter(adapter);                 adapter.notifyDataSetChanged();                 messageMO.setMessage(inputMsg.getText().toString());                 messageMO.setRingeeUserId(userMO.getRingeeUserId());                 messageMO.setMobileNumber(userMO.getMobileNumber());                 messageMO.setEventId(eventMO.getEventId());                 messageMO.setEventTitle(eventMO.getText());                 messageMO.setfromUserName(userMO.getUserName());                 messageMO.setMessageType(Constants.MESSAGE_TYPE_MSG);                  new AsyncTask&lt;Void, Void, String&gt;() {                     @Override                     protected String doInBackground(Void... arg0) {                         return messageDelegates.sendMessageToGroup(eventUserMOs, messageMO);                     }                      @Override                     protected void onPostExecute(String result) {                         Toast.makeText(getApplicationContext(), "sending result " + result, Toast.LENGTH_LONG).show();                     }                 }.execute(null, null, null);                 // Clearing the input filed once message was sent                 inputMsg.setText("");                 RingtoneManager.getRingtone(getApplicationContext(),                         RingtoneManager                                 .getDefaultUri(RingtoneManager.TYPE_NOTIFICATION)).play();              }         });      }      public class MessagesListAdapter extends BaseAdapter {          private Context context;         private List&lt;ChatMessageObjects&gt; messagesItems;          public MessagesListAdapter(Context context, List&lt;ChatMessageObjects&gt; navDrawerItems) {             this.context = context;             this.messagesItems = navDrawerItems;         }          @Override         public int getCount() {             return messagesItems.size();         }          @Override         public Object getItem(int position) {             return messagesItems.get(position);         }          @Override         public long getItemId(int position) {             return position;         }           @Override         public View getView(int position, View convertView, ViewGroup parent) {              /**              * The following list not implemented reusable list items as list items              * are showing incorrect data Add the solution if you have one              * */              ChatMessageObjects m = messagesItems.get(position);              LayoutInflater mInflater = (LayoutInflater) context                     .getSystemService(Activity.LAYOUT_INFLATER_SERVICE);               if (messagesItems.get(position).getMessage_type() == Constants.IS_TYPE_CHAT_IMAGE) {                 convertView = mInflater.inflate(R.layout.chat_image,                         null);                  ImageView imageView = (ImageView) convertView.findViewById(R.id.imgView);                 TextView imageLabel = (TextView) convertView.findViewById(R.id.lblImage);                 if (messagesItems.get(position).isSelf() == 0) {                     Log.i(Constants.TAG, " the value is from others");                     try {                         URL url = new URL(messagesItems.get(position).getMessage());                         HttpURLConnection connection = (HttpURLConnection) url.openConnection();                         connection.setDoInput(true);                         connection.connect();                         InputStream input = connection.getInputStream();                         imageView.setImageBitmap(BitmapFactory.decodeStream(input));                     } catch (IOException e) {                         Log.i(Constants.TAG, e.toString());                     }                 } else if (messagesItems.get(position).isSelf() == 1) {                     Log.i(Constants.TAG, " the value is itself");                     imageView.setImageURI(Uri.fromFile(imgFile));                     imageLabel.setText(messagesItems.get(position).getFromName());                 }             } else if (messagesItems.get(position).getMessage_type() == Constants.MESSAGE_TYPE_MSG) {                 if (messagesItems.get(position).isSelf() == 1) {                     // message belongs to you, so load the right aligned layout                     convertView = mInflater.inflate(R.layout.chat_message_right,                             null);                     TextView lblFrom = (TextView) convertView.findViewById(R.id.lblMsgFrom);                     TextView txtMsg = (TextView) convertView.findViewById(R.id.txtMsg);                     //date and time declared on date here                     TextView date = (TextView) convertView.findViewById(R.id.txtTime);                     try {                         //actualDate contains date "(i.e)27-Aug-2015 6:20:25 am/pm" in this format                         String actualDate = m.getDate();                         Date FormatDate = new SimpleDateFormat("dd-MMM-yyyy h:mm:ss a").parse(actualDate);                         //actualDate converted from "(i.e)27-Aug-2015 6:20:25 am/pm" to "6:20 pm" in this                         //format for display the chat time for every chat message .                         dateResult = new SimpleDateFormat("h:mm a").format(FormatDate);                         // lblFrom.setText(m.getFromName());                     } catch (ParseException e) {                          e.printStackTrace();                     }                      date.setText(dateResult);                     txtMsg.setText(m.getMessage());                  } else {                     // message belongs to other person, load the left aligned layout                     convertView = mInflater.inflate(R.layout.chat_message_left,                             null);                     TextView lblFrom = (TextView) convertView.findViewById(R.id.lblMsgFrom);                     TextView txtMsg = (TextView) convertView.findViewById(R.id.txtMsg);                     //date and time added here                     final TextView date = (TextView) convertView.findViewById(R.id.txtTime);                      String actualDate = m.getDate();//initially time is null for receive message.                     if (actualDate == null) {                         Calendar c = Calendar.getInstance();                         SimpleDateFormat sdf = new SimpleDateFormat("h:mm a");                         formatDate = sdf.format(c.getTime());//time is set here                         m.setDate(formatDate);                     }                     lblFrom.setText(m.getFromName());                      //below if condition check whether the message is empty or not                     //every time when ontap a listview an empty message should passed                     // hence no values are displayed on chat layout                     //if else when user receive message from others that time the message is displayed                     // along with time on chat layout.                     if (m.getMessage() != null) {                         date.setText(m.getDate());                         txtMsg.setText(m.getMessage());                      } else {                         date.setVisibility(View.GONE);                         txtMsg.setVisibility(View.GONE);                         convertView.setVisibility(View.GONE);                     }                 }              }              return convertView;         }      } </code></pre>  <p>How to add notification message in group chat activity after finishing reminder job in back end....Please help me to find out</p>