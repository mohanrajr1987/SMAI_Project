<p>I have a parent control with a child inside. Now I want to be able to move that child around inside the parent by</p>  <ol> <li>Clicking on it to pull it around</li> <li>Clicking somewhere on the parent to start pulling it around from the click location</li> <li>Click somewhere on the parent or child to set the child to the cursors position</li> </ol>  <p>I defined one MouseDown event for the parent and child that initially moves the child and then attaches a MouseMove Handler to the child and parent. The child and parent also have a MouseUp Handler that removes the MouseMove handler. I want the MouseUp to be called even if MouseUp occurs outside of the window or if the window is alt+tabbed away.</p>  <p>Here is my code, which is basically working, but unreliable. I often end up in the situation where MM (MouseMove) is attached, yet MouseUp or MouseDown can't be called anymore, essentially deadlocking my application. One way to end up in that state is</p>  <ol> <li>pressing on the parent/child</li> <li>alt+tabbing to another window</li> <li>releasing the mouse while hovering on the other window</li> </ol>  <p><b>How do I correctly implement this behavior of moving the child inside of it's parent?</b></p>  <p>My child is called slider. This code is in the code behind of my parent, which is a custom control I am working on.</p>  <pre><code>    slider.MouseLeftButtonDown += MD;     MouseLeftButtonDown += MD;      slider.MouseUp += MU;     PreviewMouseUp += MU;      private void MM(object sender, MouseEventArgs meva)     {         double percentage = meva.GetPosition(this).Y / this.ActualHeight;         if (percentage &lt;= 0)         {             Percentage = 0;             slider.Margin = new Thickness(0, -2, 0, 0);         }         else if (percentage &gt;= 1)         {             Percentage = 1;             slider.Margin = new Thickness(0, this.ActualHeight - 2, 0, 0);         }         else         {             Percentage = percentage;             slider.Margin = new Thickness(0, meva.GetPosition(this).Y - 2, 0, 0);         }     }     // MouseDown Handler     private void MD(object sender, MouseButtonEventArgs e)     {         ReleaseMouseCapture(); // might be unnecessary?         MM(sender, e); // initial movement of child         this.CaptureMouse(); // To enable MouseUp outside         this.PreviewMouseMove += MM;         slider.PreviewMouseMove += MM;     }     // MouseUp Handler     private void MU(object sender, MouseButtonEventArgs e)     {         ReleaseMouseCapture();         this.PreviewMouseMove -= MM;         slider.PreviewMouseMove -= MM;     } </code></pre>  <p>Picture related, what I am working on: <a href="http://i.stack.imgur.com/Je934.png" rel="nofollow"><img src="http://i.stack.imgur.com/Je934.png" alt="enter image description here"></a></p>