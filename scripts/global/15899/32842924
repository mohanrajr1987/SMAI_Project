<p>I'd like to have ability to change display format of a readonly data in runtime. I've found that Label has ContentStringFormat property. I binded a ContentStringFormat to a DependencyProperty but when I change it Label's content doesn't changes.</p>  <pre><code>&lt;Window x:Class="TestApp.MainWindow"     xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"     xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"     Title="MainWindow" Height="350" Width="525" x:Name="Window"&gt; &lt;Grid&gt;     &lt;Grid.RowDefinitions&gt;        &lt;RowDefinition Height="Auto"/&gt;        &lt;RowDefinition Height="Auto"/&gt;      &lt;RowDefinition Height="Auto"/&gt;   &lt;/Grid.RowDefinitions&gt;   &lt;Label Grid.Row="0" x:Name="Label" ContentStringFormat="{Binding ElementName=Window,                   Path=StringFormat, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/&gt;   &lt;StackPanel Orientation="Horizontal" Grid.Row="2"&gt;      &lt;Button Content="Add accuracy" Click="ButtonAdd_OnClick"/&gt;      &lt;Button Content="Reduce accuracy" Click="ButtonReduce_OnClick"/&gt;   &lt;/StackPanel&gt; </code></pre>  <p> </p>  <pre><code>using System.ComponentModel; using System.Runtime.CompilerServices; using System.Windows; using System.Windows.Controls; using TestApp.Annotations; namespace TestApp {   public partial class MainWindow : Window, INotifyPropertyChanged   {      public static readonly DependencyProperty StringFormatProperty =    DependencyProperty.Register("StringFormat", typeof(string), typeof(Label),         new PropertyMetadata(null));       public string StringFormat      {         get { return (string)GetValue(StringFormatProperty); }         set { SetValue(StringFormatProperty, value); }      }    public MainWindow()   {       InitializeComponent();      Label.Content = 10m;      StringFormat = "f2";      OnPropertyChanged("StringFormat");   }    public event PropertyChangedEventHandler PropertyChanged;    [NotifyPropertyChangedInvocator]   protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)   {      var handler = PropertyChanged;      if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));   }    private void ButtonAdd_OnClick(object sender, RoutedEventArgs e)   {      var num = int.Parse(StringFormat.Substring(1));      StringFormat = "f" + (num + 1);   }    private void ButtonReduce_OnClick(object sender, RoutedEventArgs e)   {      var num = int.Parse(StringFormat.Substring(1));      if(num&lt;=0)         return;      StringFormat = "f" + (num - 1);   }   } } </code></pre>