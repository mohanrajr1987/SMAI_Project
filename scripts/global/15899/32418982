<p>I'm pretty new to WPF (moving from WinForms). I'm trying to transfer some scenario from a WinForms application to a WPF one:</p>  <ol> <li>A window has a ListView control with 3 columns.</li> <li>There is a button there to add new rows to that ListView.</li> <li>The first and the second columns contain the ComboBox control.</li> <li>The third column must contain different controls but just one at a time is visible. Which one is visible, it depends on the selected value of the ComboBox at the first column.</li> <li>The content of the ComboBox at the second column changes every time a user selects a value from the ComboBox at the first column.</li> </ol>  <p>The general scenario is: a user selects a type from the list of types from the first ComboBox, after that the second ComboBox changes its content to a list of supported operations for the selected type and the third column at that time must change its content to display a control that supports the input for that type.</p>  <p>I know how to implement it using WinForms but I have no idea yet how to do it using WPF. Can someone help me to implement it or can anyone help with the information that facilitate implementing that?</p>  <p>I have the code so far:</p>  <pre><code>public class ViewModelBase : INotifyPropertyChanged {     public event PropertyChangedEventHandler PropertyChanged;      protected virtual void OnPropertyChanged(string propertyName)     {         OnPropertyChanged(new PropertyChangedEventArgs(propertyName));     }      protected virtual void OnPropertyChanged(PropertyChangedEventArgs args)     {         if (PropertyChanged != null) PropertyChanged(this, args);     } }  public class RecordFilter : ViewModelBase {     private static readonly ObservableCollection&lt;KeyValuePair&lt;PropertyInfo, string&gt;&gt; ColumnAliases =         new ObservableCollection&lt;KeyValuePair&lt;PropertyInfo, string&gt;&gt;(Card.ColumnAliases);      private KeyValuePair&lt;PropertyInfo, string&gt; _currentSelectedProperty;      public IEnumerable&lt;OperationInfo&gt; Operations     {         get         {             return Operations.GetOperationInfosForType(GetTypeUnwrapNullable(SelectedProperty.Key.PropertyType));         }     }      public OperationInfo SelectedOperation { get; set; }      public KeyValuePair&lt;PropertyInfo, string&gt; SelectedProperty     {         get { return _currentSelectedProperty; }         set         {             _currentSelectedProperty = value;              OnPropertyChanged("Operations");         }     }      public ObservableCollection&lt;KeyValuePair&lt;PropertyInfo, string&gt;&gt; Properties     {         get { return ColumnAliases; }     }      //DateTime or int or float, depends on the selected property type     //public object PropertyValue { get; set; } } </code></pre>  <p>Here is the XAML code: <div class="snippet" data-lang="js" data-hide="false"> <div class="snippet-code"> <pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;Window         xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"         xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"         xmlns:Converters="clr-namespace:App.Converters" x:Class="App.DialogWindows.CardFilterWindow"         Title="Search filters" Height="347" Width="628" x:Name="wdw" ShowInTaskbar="False" WindowStartupLocation="CenterScreen"&gt;     &lt;Window.Resources&gt;         &lt;Converters:NotNullObjectToEnabledConverter x:Key="NotNullObjectToEnabledConverter"/&gt;     &lt;/Window.Resources&gt;     &lt;DockPanel&gt;         &lt;StackPanel DockPanel.Dock="Bottom" Orientation="Horizontal" HorizontalAlignment="Center" Height="Auto"&gt;             &lt;Button x:Name="bnOK" Margin="5" Width="41" Content="OK" IsDefault="True" Click="bnOK_Click"/&gt;             &lt;Button x:Name="bnCancel" Margin="5" Content="Отмена" IsCancel="True"/&gt;         &lt;/StackPanel&gt;         &lt;ListView ItemsSource="{Binding Filters, ElementName=wdw}" Name="LvExpr" DataContext="{Binding Filters, ElementName=wdw}"&gt;             &lt;ListView.Resources&gt;                 &lt;Style TargetType="{x:Type ListViewItem}"&gt;                     &lt;Setter Property="HorizontalContentAlignment" Value="Stretch" /&gt;                 &lt;/Style&gt;             &lt;/ListView.Resources&gt;             &lt;ListView.View&gt;                 &lt;GridView&gt;                     &lt;GridViewColumn Header="Alias" Width="210"&gt;                         &lt;GridViewColumn.CellTemplate&gt;                             &lt;DataTemplate&gt;                                 &lt;ComboBox VerticalAlignment="Center"                                     ItemsSource="{Binding Properties}"                                     DisplayMemberPath="Value"                                     SelectedValue="{Binding SelectedProperty, Mode=TwoWay}"                                     /&gt;                             &lt;/DataTemplate&gt;                         &lt;/GridViewColumn.CellTemplate&gt;                     &lt;/GridViewColumn&gt;                     &lt;GridViewColumn Header="Operation" Width="150"&gt;                         &lt;GridViewColumn.CellTemplate&gt;                             &lt;DataTemplate&gt;                                 &lt;ComboBox VerticalAlignment="Center"                                     ItemsSource="{Binding Operations}"                                     DisplayMemberPath="OperationAlias"                                     SelectedValue="{Binding SelectedOperation, Mode=TwoWay}"                                 /&gt;                             &lt;/DataTemplate&gt;                         &lt;/GridViewColumn.CellTemplate&gt;                     &lt;/GridViewColumn&gt;                     &lt;GridViewColumn Header="Value" Width="100"&gt;                         &lt;GridViewColumn.CellTemplate&gt;                             &lt;DataTemplate&gt;                                 &lt;TextBox Text="ValidatesOnDataErrors=True}" /&gt;                             &lt;/DataTemplate&gt;                         &lt;/GridViewColumn.CellTemplate&gt;                     &lt;/GridViewColumn&gt;                     &lt;GridViewColumn Width="33"&gt;                         &lt;GridViewColumn.CellTemplate&gt;                             &lt;DataTemplate&gt;                                 &lt;Button Tag="{Binding Mode=OneWay}" Click="BnDelete_Click" ToolTip="Delete filter"&gt;                                     &lt;Image Source="delete.ico" Height="16" Width="16"/&gt;                                 &lt;/Button&gt;                             &lt;/DataTemplate&gt;                         &lt;/GridViewColumn.CellTemplate&gt;                         &lt;GridViewColumnHeader&gt;                             &lt;DataGridCell&gt;                                 &lt;Button Click="ButtonAdd_Click" Height="22" Padding="0" ToolTip="Add filter"&gt;                                     &lt;Image Source="plus.ico" Focusable="False"/&gt;                                 &lt;/Button&gt;                             &lt;/DataGridCell&gt;                         &lt;/GridViewColumnHeader&gt;                     &lt;/GridViewColumn&gt;                 &lt;/GridView&gt;             &lt;/ListView.View&gt;         &lt;/ListView&gt;     &lt;/DockPanel&gt; &lt;/Window&gt;</code></pre> </div> </div> </p>