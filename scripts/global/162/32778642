<p>we use QAxServer of Qt 4.8.6 to create a COM object that we want to integrate in one of our .net/C# applications. The COM object exposes a method that returns a QVariantList that is filled with QStringList objects. The method is intended to return a variable number of strings per channel as the following simplified sample code illustrates.</p>  <pre><code>QVariantList COMgetChannelName() {    QStringList sl1;    sl.append("s1");    sl.append("s2");     QStringList sl2;    sl.append("s3");     QVariantList vl;    vl.append(QVariant(sl1));    vl.append(QVariant(sl2));     return vl; } </code></pre>  <p>The IDC tool creates the following description for the method:</p>  <pre><code>[id(20)] SAFEARRAY(VARIANT) COMgetChannelName(); </code></pre>  <p>The aximp tool then creates the .net assembly containing the following C# signature:</p>  <pre><code>object[] COMgetChannelName(); </code></pre>  <p>When calling this function in C#, we get a System.InvalidCastException for the return parameter. It seems that marshalling of QVariantList works not that straightforward for QVariantLists containing QVariant items that contain lists. </p>  <p>The workaround we are currently using is to use a plain QStringList as return parameter that contains all entries flattened and an additional QByteArray as a reference parameter, that receives the number of entries that belong to each channel.</p>  <p>Does anyone know how to solve this issue in a better way?</p>