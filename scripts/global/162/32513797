<p>I'm using <code>PowerShell</code> to automate some excel tasks via COM, via a <code>PowerShell</code> script like so: </p>  <pre><code>$xl = new-object -ComObject Excel.Application sleep 5 DO THINGS... $xl.quit() sleep 5 $null = [System.Runtime.Interopservices.Marshal]::ReleaseComObject($xl) [GC]::collect() </code></pre>  <p>My issue is that if I omit the first call to <code>sleep</code>, Excel won't be ready to perform tasks that require add-ins, and the call to <code>$xl.quit()</code> doesn't work, and the process fails to quit, as evidenced by: </p>  <pre><code>PS &gt; Get-Process EXCEL  Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName -------  ------    -----      ----- -----   ------     -- -----------     784     104   104008     109380   944     3.21   5996 EXCEL </code></pre>  <p>Likewise, if I omit the second call to <code>sleep</code>, excel doesn't have time to complete shutting down, and eventually this results in a dialog box stating "Microsoft Excel has stopped working..." and the next time Excel starts up, another dialog box states "Microsoft Excel failed to shut down properly, Start in safe mode?"</p>  <pre><code>function XLtest {     $xl = new-object -ComObject Excel.Application     $xl.quit()     $null = [System.Runtime.Interopservices.Marshal]::ReleaseComObject($xl)     [GC]::collect() }  for($i=0;$i -lt 10; $i++){ XLtest } # generates multiple errors </code></pre>  <p>Obviously these are problems that I want to avoid, but the heuristic solution of calling <code>sleep 5</code> could still fail on ocasion. Is there any way to detect when excel has completed it's start-up sequence and is ready to issue commands (<code>xl.quit()</code> in particular) and when the shut-down sequence is complete (i.e. when it's ok to call <code>[System....Marshal]::ReleaseComObject($xl)</code>?</p>