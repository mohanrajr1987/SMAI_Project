<p>What i want to do is set the Windows Media Player's volume level. By default the volume is in-/decreased by 10% when e.g. clicking the down or up menu item (Play -> Volume -> Up), but this is, in my opinion, not fine enough (especially when e.g. skypeing with someone while listening to music).</p>  <p>The media player should stay an independent application.<br> Currently i'm using a little tool that sends app commands via SendMessage to the player with parameters as seen in spy++.</p>  <p>I thought of three ways to achieve my goal:</p>  <ul> <li>using WASAPI to get the media player's audio session and dynamically set the volume level</li> <li>sending mouse down/up events to the volume slider of the media player host control by point</li> <li>getting an instance of the media player control via IWMPPlayer4</li> <li>including a media player control in my WPF application within a windows forms host (not preferred due to loss of independence)</li> </ul>  <p>Point 2 seems rather ugly due to the fact that the media player control is a COM element and has as far spy++ displays only one handle, meaning i would have to determine the exact position of the volume slider and send very precise mouse events. Additional i don't know whether this would work at all.</p>  <p>Point 3 has the presupposition that one can get an instance of a COM element by a handle. Since i have yet not worked with COM elements i don't know if this is possible.<br> <b>Update:</b> One can get an instance of a remote mediay player using the <code>IWMPPlayer4</code> interface. Though i have to see whether one can change settings.</p>  <p>Point 1 has the impression on me that it would be possible without much effort. Though i'd be facing the next problem: identifying the media players audio session. Enumerating them using <code>IAudioSessionManager2</code> and displaying the name using</p>  <pre><code>IAudioSessionControl2 ctrl2 = NULL; // ... hr = ctrl2-&gt;GetDisplayName(&amp;name);  if (FAILED(hr)) {     SafeRelease(ctrl);     SafeRelease(ctrl2);     continue; }  String ^sessionName = gcnew String(name); Console::WriteLine("Session name: '" + sessionName + "'"); </code></pre>  <p>prints most the times an emtpy string except for Mozilla Firefox and System Sounds (the other processes might not have set a session name themselfes => a default name is chosen and <code>GetDisplayName</code> returns an empty string).</p>  <p><b>Update 2:</b> As Simon Mourier pointed out one can compare the process ids to get the right <code>ISimpleAudioVolume</code> instance and it works as far as it comes to WMP to adopt the changes. The said instance is aquired the following way:</p>  <pre><code>IMMDeviceEnumerator *pEnumerator = NULL; ISimpleAudioVolume *pVolume = NULL; IMMDevice *pDevice = NULL; IAudioSessionManager2 *pManager = NULL; IAudioSessionEnumerator *pSessionEnumerator = NULL; int sessionCount = 0;  CoCreateInstance(__uuidof(MMDeviceEnumerator), NULL,     CLSCTX_ALL, __uuidof(IMMDeviceEnumerator), (void**)&amp;pEnumerator); pEnumerator-&gt;GetDefaultAudioEndpoint(EDataFlow::eRender, ERole::eMultimedia, &amp;pDevice); pDevice-&gt;GetState(&amp;deviceState); pDevice-&gt;Activate(__uuidof(IAudioSessionManager2), CLSCTX_ALL, NULL, (void**)&amp;pManager); pManager-&gt;GetSessionEnumerator(&amp;pSessionEnumerator); pSessionEnumerator-&gt;GetCount(&amp;sessionCount);  for (int i = 0; i &lt; sessionCount; i++) {     IAudioSessionControl *ctrl = NULL;     IAudioSessionControl2 *ctrl2 = NULL;     DWORD processId = 0;      hr = pSessionEnumerator-&gt;GetSession(i, &amp;ctrl);      if (FAILED(hr))     {         continue;     }      hr = ctrl-&gt;QueryInterface(__uuidof(IAudioSessionControl2), (void**)&amp;ctrl2);      if (FAILED(hr))     {         SafeRelease(ctrl);         continue;     }      hr = ctrl2-&gt;GetProcessId(&amp;processId);      if (FAILED(hr))     {         SafeRelease(ctrl);         SafeRelease(ctrl2);         continue;     }      if (processId == wmpProcessId)     {         hr = ctrl2-&gt;QueryInterface(__uuidof(ISimpleAudioVolume), (void**)&amp;pVolume);         SafeRelease(ctrl);         SafeRelease(ctrl2);         break;     }      SafeRelease(ctrl);     SafeRelease(ctrl2); } </code></pre>  <p>When aquiering an <code>ISimpleAudioVolume</code> instance via a <code>IAudioClient</code> one has to provide a session id to have volume changes reported to event subscribers. Is this possible using this approach?</p>  <p>Though i know that adding a media player control to my application would be the easiest way, i'd like to not use this option if possible.</p>