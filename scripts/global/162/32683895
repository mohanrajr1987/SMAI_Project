<p>There are questions asking on how to get Registration free COM working, and this is not one of those. I have a DirectShow video source filter (catagory <code>860BB310-5D01-11d0-BD3B-00A0C911CE86</code>) implemented in <code>.Net</code> with the help of an edited version of the code available here: <a href="http://www.codeproject.com/Articles/421167/Pure-NET-DirectShow-Filters-in-Csharp" rel="nofollow">Pure .Net DirectShow Filters</a> by Maxim Kartavenkov.</p>  <p>I need to get <code>ffmpeg</code> to recognize my <code>.Net</code> DirectShow filter as a video source using Registration Free COM (Side by Side / sxs). Built into the <code>.Net</code> framework is support for COM component servers, so theoretically as long as the manifests are correct, <code>ffmpeg</code> should detect the filters.</p>  <p>Here is a snippet of the relevant sections of my manifest files currently.</p>  <pre><code>&lt;!-- FFMPEG MANIFEST --&gt; &lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt; &lt;assembly manifestVersion="1.0" xmlns="urn:schemas-microsoft-com:asm.v1" xmlns:asmv1="urn:schemas-microsoft-com:asm.v1" xmlns:asmv2="urn:schemas-microsoft-com:asm.v2" xmlns:asmv3="urn:schemas-microsoft-com:asm.v3"&gt; &lt;assemblyIdentity name="ffmpeg.exe" version="1.0.0.0" type="win32" processorArchitecture="*"/&gt; &lt;dependency&gt;  &lt;dependentAssembly asmv2:codebase="DShowVideoFilter.manifest"&gt;   &lt;assemblyIdentity name="DShowVideoFilter" version="1.0.0.0" publicKeyToken="26A05D7C90FBA3E8"/&gt;  &lt;/dependentAssembly&gt; &lt;/dependency&gt; &lt;/assembly&gt; </code></pre>  <p><br/></p>  <pre><code>&lt;!-- DIRECTSHOW FILTER MANIFEST --&gt; &lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt; &lt;assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0"&gt;    &lt;assemblyIdentity name="DShowVideoFilter" version="1.0.0.0" publicKeyToken="26A05D7C90FBA3E8" /&gt;    &lt;clrClass       clsid="{65722BE6-3449-4628-ABD3-74B6864F9739}"       progid="DShowVideoFilter.VideoCaptureFilter"       threadingModel="Both"       runtimeVersion="v2.0.50727"/&gt;    &lt;file name="DShowVideoFilter.dll"&gt;    &lt;/file&gt;    &lt;file name="DShowVideoFilter.tlb"&gt;      &lt;typelib         tlbid="{B618E67B-64C8-48E9-9F94-F13214B76808}"         version="1.0"         helpdir=""         flags="hasdiskimage"/&gt;    &lt;/file&gt; &lt;/assembly&gt; </code></pre>  <p>So, I get no errors when running <code>ffmpeg</code> (like you would if there was a manifest error) - and I am confident that everything that is configured correctly (related to traditional sxs com loading), the problem I think (unconfirmed) is that <code>ffmpeg</code> loads DShow filters via DirectShow's intelligent connect system, which requires the filter and pins to be registered. Here are some documents that talk about how filters need to be registered that I've found: </p>  <ul> <li><a href="https://msdn.microsoft.com/en-us/library/ms924596.aspx" rel="nofollow">#1 Registering DirectShow Filters</a></li> <li><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd376682(v=vs.85).aspx" rel="nofollow">#2 Implementing DllRegisterServer</a></li> </ul>  <p>Now, in Maxim Kartavenkov's DShow base classes, he takes care of #2 automatically. Here is a significantly shortened version of the method that registers the filters implementing <code>BaseFilter</code>.</p>  <pre><code>[ComRegisterFunction] public static void RegisterFunction(Type _type) {     AMovieSetup _setup = (AMovieSetup)Attribute.GetCustomAttribute(_type, typeof(AMovieSetup));     BaseFilter _filter = (BaseFilter)Activator.CreateInstance(_type);     string _name = _filter.Name;     DsGuid _category = new DsGuid(_setup.Category);     IFilterMapper2 _mapper2 = (IFilterMapper2)new FilterMapper2();      RegFilter2 _reg2 = new RegFilter2();     _reg2.dwVersion = (int)_setup.Version;     _reg2.dwMerit = _setup.FilterMerit;     _reg2.rgPins = IntPtr.Zero;     _reg2.cPins = 0;      IntPtr _register = Marshal.AllocCoTaskMem(Marshal.SizeOf(_reg2));     Marshal.StructureToPtr(_reg2, _register, true);      hr = _mapper2.RegisterFilter(_type.GUID, _name, IntPtr.Zero, _category, _instance, _register);      Marshal.FreeCoTaskMem(_register); } </code></pre>  <p>That is the method (particularly <code>mapper2.RegisterFilter</code>) that allows <code>ffmpeg</code> to find the DShow filter when it is registered traditionally (with <code>RegAsm</code>) into the registry, which creates registry keys for the filter and pins as described by #2 link.</p>  <p><strong>tldr;</strong><br/> So the question is, how to emulate the function of <code>RegisterFilter</code> or the intelligent connect registry entries this within a manifest file as to allow the sxs context to find my DirectShow filter when <code>ffmpeg</code> searches for it.</p>