<p>My application needs to interact with a COM object that, for reasons irrelevant to this post, cannot be added to my project as a reference.  I thought the C# dynamic keyword would be the perfect solution, but am running into RuntimeBinderException when trying to access documented members that I believe to be accurate.</p>  <p>For completeness, I am working against the HP Application Lifecycle Management (ALM) OTA COM library for ALM 12.20, although I am going to generalize what I think might be happening without referring to those objects directly.</p>  <p>Consider the following code structure of the COM objects (in C# syntax for readability)</p>  <pre><code>public interface InterfaceA {     string PropertyA { get; } }  public interface InterfaceB {     string PropertyB { get; } }  public class ClassA : InterfaceA {     public string PropertyA { get; } }  public class ClassB : ClassA, InterfaceB {     public string PropertyB { get; } } </code></pre>  <p>This is this basic signature of a method on an object that returns the object I need to use:</p>  <pre><code>public InterfaceA ReturnObject() {     // Returns object that implements InterfaceA and also InterfaceB     var myClassB = new ClassB();     return myClassB; } </code></pre>  <p>And the following shows the basics of how I consume those objects (disregard specific syntax)</p>  <pre><code>dynamic dynamicClassB = someOtherDynamicObject.ReturnObject(); Debug.WriteLine(dynamicClassB.PropertyA + "; this works"); Debug.WriteLine(dynamicClassB.PropertyB + "; this throws RuntimeBinderException"); </code></pre>  <p>I did not author this COM library, so I'm not entirely certain of the object and interface relationships, but I believe the pseudo-code accurately reflects what is happening.</p>  <p>Normally, you'd have to explicitly cast ClassA to ClassB in order to access the property of the the ClassB object, but my understanding of the C# dynamic keyword is that this should not be necessary and may not even be possible.  At run-time, it's possible that the dynamic object is being resolved as an instance of ClassA instead of ClassB, perhaps due to the signature of the method that returned the object (since it defined ClassA as the return type).</p>  <p>I've used dynamic successfully for many of the COM objects in this library, but am specifically having trouble with a few of the methods/properties on an instance of a class that is like ClassB in this example.</p>  <p>Thoughts/ideas/workarounds are appreciated.  The only thing I can't do is directly reference the COM DLL in my project.  Thanks in advance.</p>