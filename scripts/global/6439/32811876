<p>I was using various color utilities to mix in colors but due to an unorganised order it produces incorrect values. I've looked around and only found single colors or two color blends.</p>  <p>So instead I've placed the colors into an array and I'm currently trying to figure out how to blend them but now I'm stuck.</p>  <p>My attempt:</p>  <pre><code>Array&lt;Color&gt; colorsArray; for(Color eachColor : colors)     colorsArray.add(new Color(         eachColor.r, eachColor.g, eachColor.b,         strength //&lt;&lt;Varies.     ); ));  /We have an array of play colors and there strengths, process them into an average. float totalRed = 0f, totalBlue = 0f, totalGreen = 0f; for(ColorStorage colorStorage : colorVectorsWithInfectionStrength) {     totalRed += (colorStorage.getRed() * colorStorage.getAlpha());     totalBlue += (colorStorage.getBlue() * colorStorage.getAlpha());     totalGreen += (colorStorage.getGreen() * colorStorage.getAlpha()); }  /* Makes dark colors. HMM. totalRed /= colorVectorsWithInfectionStrength.size; totalBlue /= colorVectorsWithInfectionStrength.size; totalGreen /= colorVectorsWithInfectionStrength.size; */  ColorStorage averageColor = new ColorStorage(totalRed, totalBlue, totalGreen);  //varying var goes from 0-1 depending on the max strength. endColor = ColorUtils.blend(averageColor, endColor, varyingVar); </code></pre>  <p>And the blend function:</p>  <pre><code>public static ColorStorage blend(ColorStorage color1, ColorStorage color2, double ratio) {     float r  = (float) ratio;     float ir = (float) 1.0 - r;      float rgb1[] = color1.getColorComponents();     float rgb2[] =  color2.getColorComponents();      return new ColorStorage (         rgb1[0] * r + rgb2[0] * ir,         rgb1[1] * r + rgb2[1] * ir,         rgb1[2] * r + rgb2[2] * ir     ); } </code></pre>  <p><em>EDIT</em> The color object here is custom that always returns 0-1f for RGBA. (Each value)</p>