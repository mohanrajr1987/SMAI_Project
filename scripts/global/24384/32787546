<p>I have a list or records containing images and text and I would like the user browse these records as on the Flipboard app, that is with a “half-a-page-style” transition. So I created a new UIViewController on my storyboard and called it “Form view". Its main view contains one single UIScrollView displaying a single record, with images and text. The scrollView scrolls vertically only and it works well. To flip to the next-previous record I actually use my interactive and custom transition which works pretty well too. The problem is that, in order to display the next record using my transition, I am forced to instantiate a copy of the “Form View” controller from the storyboard then to push it. So I end up with a bunch of unwanted extra UIViewControllers in the stack. Worst, the leftBarButtonItem reports the name “Form view" and not “Record List” as I should really come from. Removing the extra controller when the animation has done, creates some unexpected troubles.</p>  <p>So my question is: Can I use an interactive custom transition without using an extra viewController? Here’s my code:</p>  <pre><code>- (void)viewDidLoad {     [super viewDidLoad];      self.animator = [MyFlipPageAnimator new];      UIPanGestureRecognizer  *pan = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(PanToFlipPage:)];     pan.cancelsTouchesInView = NO;     pan.delaysTouchesEnded = NO;     [self.view addGestureRecognizer:pan]; }   - (void)PanToFlipPage:(UIPanGestureRecognizer*)recognizer {        switch(recognizer.state)     {         case UIGestureRecognizerStateBegan:          {             if(mTurnPage) return;              CGPoint velocity = [recognizer velocityInView:view];             mPanHorizontal = fabs(velocity.x) &gt; fabs(velocity.y);             if(mPanHorizontal == NO) return;              self.animator.reverse = location.x &gt; midWidth &amp;&amp; velocity.x &lt; 0;             NSInteger   increment = self.animator.reverse ? 1 : -1;             NSInteger   newIndex = self.mCurrentRecord + increment;              MyFormViewController   *extraViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"FormView”];             [extraViewController setRecords:self.records showRecordIndex:recIndex];             self.interactionController = [UIPercentDrivenInteractiveTransition new];            [self.navigationController pushViewController: extraViewController animated:YES];       }       break;        case UIGestureRecognizerStateChanged:           if(!mTurnPage) return;           CGPoint translation = [recognizer translationInView:view];           CGFloat d = fabs(-translation.x / 150);           [self.interactionController updateInteractiveTransition:d];       break;        case UIGestureRecognizerStateCancelled:       case UIGestureRecognizerStateEnded:           CGFloat donePercent = self.interactionController.percentComplete;           CGPoint velocity = [recognizer velocityInView:view];            BOOL    sameDirection = (mVelocityStart.x &gt; 0 &amp;&amp; velocity.x &gt; 0) || (mVelocityStart.x &lt; 0 &amp;&amp; velocity.x &lt; 0);           BOOL    finish = donePercent &gt; 0.5 || (sameDirection &amp;&amp; fabs(velocity.x) &gt; 200);            if(finish) [self.interactionController finishInteractiveTransition];           else [self.interactionController cancelInteractiveTransition];            self.interactionController = nil;           mTurnPage = NO;     } }  - (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer*)otherGestureRecognizer {        return mPanHorizontal == NO; }  - (id &lt;UIViewControllerAnimatedTransitioning&gt;)navigationController:(UINavigationController *)navigationController                                animationControllerForOperation:(UINavigationControllerOperation)operation                                             fromViewController:(UIViewController *)fromVC                                               toViewController:(UIViewController *)toVC {        if(mTurnPage){        if (operation == UINavigationControllerOperationPop || operation == UINavigationControllerOperationPush){            return self.animator;         }         return nil;      }      else return nil; }  - (id &lt;UIViewControllerInteractiveTransitioning&gt;)navigationController:(UINavigationController *)navigationController                       interactionControllerForAnimationController:(id &lt;UIViewControllerAnimatedTransitioning&gt;) animationController {      if(mTurnPage)     {         return self.interactionController;     }     else return nil; } </code></pre>