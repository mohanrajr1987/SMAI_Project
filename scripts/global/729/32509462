<p>The web application is using c#, .net, MVC, ado.net, and the database is SQL 2008.  The Database Application Role are used to update the database.  So before update the data in tables, call "sp_setapprole" which works successfully, then after the updating, call "sp_unsetapprole" which failed.  Have done research, seems the "connection pooling" maybe the reason.</p>  <p>If turn on the pooling,"pooling=true", got exception: <strong>A severe error occurred on the current command. The results, if any, should be discarded.</strong></p>  <p>If turn off the pooling,"pooling=false", got exception:<strong>Cannot unset application role because none was set or the cookie is invalid.</strong></p>  <p>Here are lines working the update data,</p>  <pre><code>      public class workwithdata        {  ...            DBApplicationRole AppRole = new DBApplicationRole();           // Set Database App Role          DbConnection connstring = //The Entity(using ADO.net) connection          byte[] appRoleCookie = AppRole.SetAppRole(connstring);           try          {//update the database}          catch (DbEntityValidationException e){//work with exception}           // Unset App Role          AppRole.UnsetAppRole(connstring, appRoleCookie);           //Entity connection.Open();        } </code></pre>  <p>Here is DBApplicationRole class:</p>  <pre><code>        public class DBApplicationRole         {            public byte[] SetAppRole(DbConnection conn)            {                        ConnectionState initialState = conn.State;             try            {             if (initialState != ConnectionState.Open)                 conn.Open();              using (DbCommand setCmd = conn.CreateCommand())             {                 setCmd.CommandText = "sp_setapprole";                 setCmd.CommandType = CommandType.StoredProcedure;                  DbParameter paraRoleName = setCmd.CreateParameter();                 paraRoleName.ParameterName = "@rolename";                 paraRoleName.Direction = ParameterDirection.Input;                 paraRoleName.Value = ConfigurationManager.AppSettings["approlname"];                 setCmd.Parameters.Add(paraRoleName);                 DbParameter paraPassword = setCmd.CreateParameter();                 paraPassword.ParameterName = "@password";                 paraPassword.Direction = ParameterDirection.Input;                 paraPassword.Value = ConfigurationManager.AppSettings["approlepassword"];                 setCmd.Parameters.Add(paraPassword);                 DbParameter parasetcookie = setCmd.CreateParameter();                 parasetcookie.ParameterName = "@fCreateCookie";                 parasetcookie.Direction = ParameterDirection.Input;                 parasetcookie.Value = true;                 setCmd.Parameters.Add(parasetcookie);                 DbParameter paracookie = setCmd.CreateParameter();                 paracookie.ParameterName = "@cookie";                 paracookie.DbType = DbType.Binary;                 paracookie.Direction = ParameterDirection.Output;                 paracookie.Size = 8000;                 setCmd.Parameters.Add(paracookie);                  setCmd.ExecuteNonQuery();//work successfully                 DbParameter outVal = setCmd.Parameters["@cookie"];                 return (byte[])outVal.Value;             }          }          catch (Exception ex)          {             string _string = ex.ToString();             throw ex;          }     }      public void UnsetAppRole(DbConnection unsetConn, byte[] appRoleCookie)     {         ConnectionState initialState = unsetConn.State;          try         {             if (initialState != ConnectionState.Open)                 unsetConn.Open();              using (DbCommand unsetCmd = unsetConn.CreateCommand())             {                 unsetCmd.CommandText = "sp_unsetapprole";                 unsetCmd.CommandType = CommandType.StoredProcedure;                 DbParameter unsetParam = unsetCmd.CreateParameter(); ;                 unsetParam.Direction = ParameterDirection.Input;                 unsetParam.ParameterName = "@cookie";                 unsetParam.Value = appRoleCookie;                 unsetCmd.Parameters.Add(unsetParam);                 unsetCmd.ExecuteNonQuery();//When run the line, throw exception                 unsetConn.Close();             }         }         catch (Exception ex)         {             string _string = ex.ToString();             throw ex;         }         finally         {             if (initialState == ConnectionState.Open)                 unsetConn.Close();         }       } </code></pre>  <p>Stuck with this problem for a few days, any help is appreciated. </p>