<p>I'm doing a simple Tower Defense game on XNA and I'm having some trouble. I have an enemy sprite that sould be green, the image is correct, but when I insert it on the program it appears all black, but in the right shape. Here's my code (sorry that it's a mess):</p>  <pre><code>namespace MicroDefense {     public class Game1 : Microsoft.Xna.Framework.Game     {      GraphicsDeviceManager graphics;     SpriteBatch spriteBatch;      enum GameState     {         MainMenu,         Options,         Playing,     }     GameState CurrentGameState = GameState.MainMenu;      // Screen Adjustments     int screenWidth = 800, screenHeight = 600;      cButton btnPlay;      Level level = new Level();      WaveManager waveManager;      Player player;      GUI.Button arrowButton;     GUI.Button spikeButton;     GUI.Button slowButton;      GUI.Toolbar toolBar;      public Game1()     {         graphics = new GraphicsDeviceManager(this);         Content.RootDirectory = "Content";          // The width of the level in pixels         graphics.PreferredBackBufferWidth = level.Width * 32;         // The height of the toolbar + the height of the level in pixels         graphics.PreferredBackBufferHeight = 32 + level.Height * 32;          graphics.ApplyChanges();          IsMouseVisible = true;     }      protected override void Initialize()     {          base.Initialize();     }      protected override void LoadContent()     {          spriteBatch = new SpriteBatch(GraphicsDevice);          // Screen stuff         graphics.PreferredBackBufferWidth = screenWidth;         graphics.PreferredBackBufferHeight = screenHeight;         graphics.ApplyChanges();         IsMouseVisible = true;          btnPlay = new cButton(Content.Load&lt;Texture2D&gt;("Button"), graphics.GraphicsDevice);         btnPlay.setPosition(new Vector2(350, 300));           Texture2D topBar = Content.Load&lt;Texture2D&gt;("tool bar");         SpriteFont font = Content.Load&lt;SpriteFont&gt;("Arial");          toolBar = new GUI.Toolbar(topBar, font, new Vector2(0, level.Height * 32));          Texture2D grass = Content.Load&lt;Texture2D&gt;("grass");         Texture2D path = Content.Load&lt;Texture2D&gt;("path");          level.AddTexture(grass);         level.AddTexture(path);          Texture2D bulletTexture = Content.Load&lt;Texture2D&gt;("bullet");          Texture2D[] towerTextures = new Texture2D[]         {             Content.Load&lt;Texture2D&gt;("arrow tower"),             Content.Load&lt;Texture2D&gt;("spike tower"),             Content.Load&lt;Texture2D&gt;("slow tower"),         };          player = new Player(level, towerTextures, bulletTexture);          Texture2D enemyTexture = Content.Load&lt;Texture2D&gt;("enemy");         Texture2D healthTexture = Content.Load&lt;Texture2D&gt;("health bar");          waveManager = new WaveManager(player, level, 24, enemyTexture,                                                          healthTexture);          // The "Normal" texture for the arrow button.         Texture2D arrowNormal = Content.Load&lt;Texture2D&gt;("GUI\\Arrow Tower\\arrow button");         // The "MouseOver" texture for the arrow button.         Texture2D arrowHover = Content.Load&lt;Texture2D&gt;("GUI\\Arrow Tower\\arrow hover");         // The "Pressed" texture for the arrow button.         Texture2D arrowPressed = Content.Load&lt;Texture2D&gt;("GUI\\Arrow Tower\\arrow pressed");          // The "Normal" texture for the spike button.         Texture2D spikeNormal = Content.Load&lt;Texture2D&gt;("GUI\\Spike Tower\\spike button");         // The "MouseOver" texture for the spike button.         Texture2D spikeHover = Content.Load&lt;Texture2D&gt;("GUI\\Spike Tower\\spike hover");         // The "Pressed" texture for the spike button.         Texture2D spikePressed = Content.Load&lt;Texture2D&gt;("GUI\\Spike Tower\\spike pressed");          // The "Normal" texture for the slow button.         Texture2D slowNormal = Content.Load&lt;Texture2D&gt;("GUI\\Slow Tower\\slow button");         // The "MouseOver" texture for the slow button.         Texture2D slowHover = Content.Load&lt;Texture2D&gt;("GUI\\Slow Tower\\slow hover");         // The "Pressed" texture for the slow button.         Texture2D slowPressed = Content.Load&lt;Texture2D&gt;("GUI\\Slow Tower\\slow pressed");          // Initialize the arrow button.         arrowButton = new GUI.Button(arrowNormal, arrowHover,             arrowPressed, new Vector2(0, level.Height * 32));          // Initialize the spike button.         spikeButton = new GUI.Button(spikeNormal, spikeHover,             spikePressed, new Vector2(32, level.Height * 32));          // Initialize the slow button.         slowButton = new GUI.Button(slowNormal, slowHover,             slowPressed, new Vector2(32 * 2, level.Height * 32));          //arrowButton.Clicked += new EventHandler(arrowButton_Clicked);         //spikeButton.Clicked += new EventHandler(spikeButton_Clicked);         //slowButton.Clicked += new EventHandler(slowButton_Clicked);          arrowButton.OnPress += new EventHandler(arrowButton_OnPress);         spikeButton.OnPress += new EventHandler(spikeButton_OnPress);         slowButton.OnPress += new EventHandler(slowButton_OnPress);     }      protected override void UnloadContent()     {      }      private void arrowButton_Clicked(object sender, EventArgs e)     {         player.NewTowerType = "Arrow Tower";         player.NewTowerIndex = 0;     }     private void spikeButton_Clicked(object sender, EventArgs e)     {         player.NewTowerType = "Spike Tower";         player.NewTowerIndex = 1;     }     private void slowButton_Clicked(object sender, EventArgs e)     {         player.NewTowerType = "Slow Tower";         player.NewTowerIndex = 2;     }      private void arrowButton_OnPress(object sender, EventArgs e)     {         player.NewTowerType = "Arrow Tower";         player.NewTowerIndex = 0;     }     private void spikeButton_OnPress(object sender, EventArgs e)     {         player.NewTowerType = "Spike Tower";         player.NewTowerIndex = 1;     }     private void slowButton_OnPress(object sender, EventArgs e)     {         player.NewTowerType = "Slow Tower";         player.NewTowerIndex = 2;     }      public Vector2 size;      protected override void Update(GameTime gameTime)     {         MouseState mouse = Mouse.GetState();         switch (CurrentGameState)         {             case GameState.MainMenu:                 if (btnPlay.isClicked == true) CurrentGameState = GameState.Playing;                 btnPlay.Update(mouse);                 if (cButton.control)                 {                     graphics.PreferredBackBufferHeight = 288;                     graphics.PreferredBackBufferWidth = 256;                     graphics.ApplyChanges();                 }                 break;              case GameState.Playing:                 player.Update(gameTime, waveManager.Enemies);             waveManager.Update(gameTime);               //Update the arrow button.             arrowButton.Update(gameTime);             //Update the spike button.             spikeButton.Update(gameTime);             //Update the slow button.             slowButton.Update(gameTime);                 break;         }          base.Update(gameTime);     }      protected override void Draw(GameTime gameTime)     {         GraphicsDevice.Clear(Color.CornflowerBlue);          spriteBatch.Begin();          switch (CurrentGameState)         {             case GameState.MainMenu:                 spriteBatch.Draw(Content.Load&lt;Texture2D&gt;("MainMenu"), new Rectangle(0, 0, screenWidth, screenHeight), Color.White);                 btnPlay.Draw(spriteBatch);                 break;              case GameState.Playing:                 level.Draw(spriteBatch);                 player.Draw(spriteBatch);                 waveManager.Draw(spriteBatch);                  // Draw the tool bar first,                 toolBar.Draw(spriteBatch, player);                 // and then our buttons.                 arrowButton.Draw(spriteBatch);                 spikeButton.Draw(spriteBatch);                 slowButton.Draw(spriteBatch);                  player.DrawPreview(spriteBatch);                 break;         }         spriteBatch.End();          base.Draw(gameTime);     } } </code></pre>  <p>}</p>  <p>Edit1:The sprite has the right shape but the color is black.</p>  <p>Edit2: Here's the wave manager:</p>  <pre><code>public class WaveManager {     private int numberOfWaves; // How many waves the game will have     private float timeSinceLastWave; // How long since the last wave ended      private Queue&lt;Wave&gt; waves = new Queue&lt;Wave&gt;(); // A queue of all our waves      private Texture2D enemyTexture; // The texture used to draw the enemies      private bool waveFinished = false; // Is the current wave over?      private Level level; // A reference to our level class.      public Wave CurrentWave // Get the wave at the front of the queue     {         get { return waves.Peek(); }     }     public List&lt;Enemy&gt; Enemies // Get a list of the current enemeies     {         get { return CurrentWave.Enemies; }     }     public int Round // Returns the wave number     {         get { return CurrentWave.RoundNumber + 1; }     }      public WaveManager(Player player, Level level, int numberOfWaves,         Texture2D enemyTexture, Texture2D healthTexture)     {         this.numberOfWaves = numberOfWaves;         this.enemyTexture = enemyTexture;          this.level = level;          for (int i = 0; i &lt; numberOfWaves; i++)         {             int initialNumerOfEnemies = 6;//NÃºmero de inimigos por wave &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;             int numberModifier = (i / 6) + 1;              // Pass the reference to the player, to the wave class.             Wave wave = new Wave(i, initialNumerOfEnemies * numberModifier,                 player, level, enemyTexture, healthTexture);              waves.Enqueue(wave);         }          StartNextWave();     }      private void StartNextWave()     {         if (waves.Count &gt; 0) // If there are still waves left         {             waves.Peek().Start(); // Start the next one              timeSinceLastWave = 0; // Reset timer             waveFinished = false;         }     }      public void Update(GameTime gameTime)     {         CurrentWave.Update(gameTime); // Update the wave          if (CurrentWave.RoundOver) // Check if it has finished         {             waveFinished = true;         }          if (waveFinished) // If it has finished         {             timeSinceLastWave += (float)gameTime.ElapsedGameTime.TotalSeconds; // Start the timer         }          if (timeSinceLastWave &gt; 10.0f) // If 10 seconds has passed Tempo entre waves &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;         {             waves.Dequeue(); // Remove the finished wave             StartNextWave(); // Start the next wave         }     }      public void Draw(SpriteBatch spriteBatch)     {         CurrentWave.Draw(spriteBatch);     } } </code></pre>