<p>I'm trying make 3D XNA game, but when I try load my model, it fails to render texture and lightining dosent really work, looks mostly just black, but model shape is right.</p>  <p>Looks in-game:</p>  <p><a href="https://i.gyazo.com/40cb3aa029db0e42f440c1c3a65f16c1.png" rel="nofollow"><img src="https://i.gyazo.com/40cb3aa029db0e42f440c1c3a65f16c1.png" alt="Screenshot"></a></p>  <p>Should look:</p>  <p><a href="http://i.stack.imgur.com/Wkylk.png" rel="nofollow"><img src="http://i.stack.imgur.com/Wkylk.png" alt="Screenshot"></a></p>  <p>Code:</p>  <pre><code>class Floor {     private int floorWidth;     private int floorHeight;     private VertexBuffer floorBuffer;     private IndexBuffer indexBuffer;     private GraphicsDevice device;      public Floor(GraphicsDevice device, int width, int height)     {         this.device = device;         this.floorWidth = width;         this.floorHeight = height;          BuildFloorBuffer();     }      private void BuildFloorBuffer()     {         List&lt;short&gt; indexList = new List&lt;short&gt;();         List&lt;VertexPositionNormalTexture&gt; vertexList = new List&lt;VertexPositionNormalTexture&gt;();          foreach (ModelMesh mesh in Game1.myModel.Meshes)         {             foreach (ModelMeshPart part in mesh.MeshParts)             {                 VertexPositionNormalTexture[] vertexArray = new VertexPositionNormalTexture[part.VertexBuffer.VertexCount];                 part.VertexBuffer.GetData&lt;VertexPositionNormalTexture&gt;(vertexArray);                 vertexList.AddRange(vertexArray.ToList());                  short[] indexArray = new short[part.IndexBuffer.IndexCount];                 part.IndexBuffer.GetData&lt;short&gt;(indexArray);                 indexList.AddRange(indexArray);             }         }          floorBuffer = new VertexBuffer(device, VertexPositionNormalTexture.VertexDeclaration, vertexList.Count, BufferUsage.None);         floorBuffer.SetData&lt;VertexPositionNormalTexture&gt;(vertexList.ToArray());          indexBuffer = new IndexBuffer(device, IndexElementSize.SixteenBits, sizeof(short) * indexList.Count, BufferUsage.None);         indexBuffer.SetData&lt;short&gt;(indexList.ToArray());     }      public void Draw(Camera camera,  BasicEffect effect)     {         effect.VertexColorEnabled = false;         effect.TextureEnabled = true;         effect.LightingEnabled = true;          effect.View = camera.View;         effect.Projection = camera.Projection;         effect.World = Matrix.Identity;          effect.EnableDefaultLighting();          foreach(EffectPass pass in effect.CurrentTechnique.Passes)         {             pass.Apply();              device.Indices = indexBuffer;             device.SetVertexBuffer(floorBuffer);             device.DrawIndexedPrimitives(PrimitiveType.TriangleList, 0, 0, floorBuffer.VertexCount, 0, floorBuffer.VertexCount);         }     } } </code></pre>