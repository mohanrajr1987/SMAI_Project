<p><code>enter code here</code>When im drawing it to a string it just stays at 300,300 . My mouse always updates its Vector2 position.X, position.Y. I need to be able to update my players position or my enemy wont follow my player. It just goes to that certain player position i set for it. PLEASE HELP AND THANK YOU!</p>  <pre><code>class Enemy     {         Player p = new Player();          public Vector2 direction, velocity,position;         public float speed;         public Texture2D texture;          public Enemy()         {             speed = 1;             texture = null;             position = new Vector2(600, 500);          }          public void LoadContent(ContentManager Content)         {             texture = Content.Load&lt;Texture2D&gt;("circle");         }          public void Update(GameTime gameTime)         {             MouseState mouse = Mouse.GetState();              direction = p.position - position;             direction.Normalize();             velocity = direction * speed;             position += velocity;            }          public void Draw(SpriteBatch spriteBatch)         {             spriteBatch.Draw(texture, position, Color.Red);          }           /*         direction = p.position - position;         direction.Normalize();         velocity = direction * speed;         position += velocity;           */     }  class Player     {         public float rotation, bulletDelay;         public Vector2 position,velocity,origin;         public string spriteName;         public Texture2D texture,bulletTexture;         List&lt;Bullets&gt; bullets = new List&lt;Bullets&gt;();         public float speed = 10;         public float health = 100;          public Player()         {             texture = null;             spriteName = "playerover";             position = new Vector2(300, 300);             bulletDelay = 20;          }          public void LoadContent(ContentManager Content)         {             texture = Content.Load&lt;Texture2D&gt;(spriteName);             bulletTexture = Content.Load&lt;Texture2D&gt;("playerbullet");         }          public void Draw(SpriteBatch spriteBatch)         {             origin = new Vector2(texture.Width / 2, texture.Height / 2);              spriteBatch.Draw(texture, new Rectangle((int)position.X, (int)position.Y, texture.Width, texture.Height), null, Color.White, rotation,new Vector2(texture.Width / 2, texture.Height / 2), SpriteEffects.None, 0);              foreach (Bullets bullet in bullets)             {                 bullet.Draw(spriteBatch);             }         }          public void Update(GameTime gameTime)         {              MouseState curMouse = Mouse.GetState();              KeyboardState keyState = Keyboard.GetState();              Vector2 mouseLoc = new Vector2(curMouse.X, curMouse.Y);              Vector2 direction = mouseLoc - position;              rotation = (float)(Math.Atan2(direction.Y, direction.X));              if (keyState.IsKeyDown(Keys.W))             {                 position.Y -= speed;              }              if (keyState.IsKeyDown(Keys.S))             {                 position.Y += speed;              }             if (keyState.IsKeyDown(Keys.A))             {                 position.X -= speed;              }             if (keyState.IsKeyDown(Keys.D))             {                 position.X += speed;              }              if (curMouse.LeftButton == ButtonState.Pressed)             {                 Shoot();             }             UpdateBullets();         }          public void UpdateBullets()         {             foreach (Bullets bullet in bullets)             {                 bullet.position += bullet.velocity;                 if (bullet.position.Y &lt;= 5)                 {                     bullet.isVisible = false;                 }                  if (bullet.position.X &lt;= 5)                 {                     bullet.isVisible = false;                 }                  if (bullet.position.X &gt;= 785)                 {                     bullet.isVisible = false;                 }                  if (bullet.position.Y &gt;= 575)                 {                     bullet.isVisible = false;                 }              }                    for (int i = 0; i &lt; bullets.Count; i++)                 {                     if (!bullets[i].isVisible)                     {                         bullets.RemoveAt(i);                         i--;                     }                  }           }          public void Shoot()         {               if (bulletDelay &gt;= 0)                 bulletDelay--;               if (bulletDelay &lt;= 0)             {                  Bullets newBullet = new Bullets(bulletTexture);                 newBullet.velocity = new Vector2((float)Math.Cos(rotation), (float)Math.Sin(rotation)) * 5f + velocity;                 newBullet.position = position + newBullet.velocity * 5;                 newBullet.isVisible = true;                  if (bullets.Count &lt; 20)                 {                     bullets.Add(newBullet);                 }             }              if (bulletDelay == 0)             {                 bulletDelay = 20;             }         }     }   class Hud     {         public SpriteFont font;         public bool showHud;         Player p = new Player();         Enemy e = new Enemy();           public Hud()         {             showHud = true;           }          public void LoadContent(ContentManager Content)         {             font = Content.Load&lt;SpriteFont&gt;("font");         }          public void Draw(SpriteBatch spriteBatch)         {             MouseState mouse = Mouse.GetState();                 if (showHud)                  {                 spriteBatch.DrawString(font, "Mouse.X = " + mouse.X, new Vector2(10, 0), Color.White);                 spriteBatch.DrawString(font, "Mouse.Y = " + mouse.Y, new Vector2(10, 20), Color.White);                 spriteBatch.DrawString(font, "Health = " + p.health, new Vector2(10, 40), Color.White);                 spriteBatch.DrawString(font, "Pos.Y = " + p.position.Y, new Vector2(10, 60), Color.White);                 spriteBatch.DrawString(font, "Pos.X = " + p.position.X, new Vector2(10, 80), Color.White);                  }                    }       } </code></pre>