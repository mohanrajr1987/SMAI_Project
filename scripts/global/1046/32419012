<p>I'm looking to make an abstract class Entity which then has few classes that derive from it like Enemy, Friendly and Player. The reason I do this is because the classes have a lot of properties/fields that are alike. I also have 2 methods: <code>updateEntity</code> and <code>drawEntity</code>. The reason I have the update and draw entity is that <code>drawEntity</code> &amp; <code>updateEntity</code> is the same for most of the classes that inherit from it. This is the code of my entity class:</p>  <pre><code>public abstract class Entity {     private string name;      public string Name     {         get { return name; }         set { name = value; }     }      private Texture2D texture;      public Texture2D Texture     {         get { return texture; }         set { texture = value; }     }      private Vector2 position;      public Vector2 Position     {         get { return position; }         set { position = value; }     }      private int health;      public int Health     {         get { return health; }         set { health = value; }     }      private Color entColor;      public Color EntColor     {         get { return entColor; }         set { entColor = value; }     }      public Entity(string name, Texture2D texture, Vector2 position, int health, Color entColor)     {         this.name = name;         this.texture = texture;         this.position = position;         this.health = health;         this.entColor = entColor;     }      public virtual void updateEntity(GameTime gameTime)     {         //update stuff here     }      public virtual void drawEntity(SpriteBatch spriteBatch)     {         spriteBatch.Draw(texture, new Rectangle((int)position.X, (int)position.Y, texture.Width, texture.Height), entColor);     } } </code></pre>  <p>And this is how I envision my Enemy class :</p>  <pre><code>public Enemy(string name, Texture2D texture, Vector2 position, int health, Color entColor) {     Name = name;     Texture = texture;     Position = position;     Health = health;     EntColor = entColor; } </code></pre>  <p>Can anybody tell me if this is a good use of abstract class or if I'm doing something completely wrong in game design/architecture way?</p>