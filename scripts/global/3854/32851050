<p>I have an ASP 5 application using the security that comes with ASP.NET that uses Microsoft.AspNet.Identity and Owin along with System.Web.Security.  I have a serious login issue that will prevent my website going public - successful logins do not work sometimes.  Last summer the website was used privately by my agility club where the login problems became showed up.</p>  <p>When the problem happens, a user that logs in successfully is redirected to another web page and in the code on the next page of a successful login in the Page_Load, HttpContext.Current.User.Identity.IsAuthenticated is false instead of the usual and expected true which causes what looks like a login doing nothing because it returns.  I have 2 login pages for different scenarios where one page works better then the other one, although the code is the same except for some logic determining the next page having nothing to do with logging in. The better group login page goes to the same page as a less working page.  The login might work or might not, once it fails it will continue to fail on the same login page.</p>  <p>This code from Login button callback is identical in both main logins.</p>  <pre><code> protected void LogIn(object sender, EventArgs e)  {     if (IsValid) {          // Validate the user password         var signinManager = Context.GetOwinContext().GetUserManager&lt;ApplicationSignInManager&gt;();          string password = Password.Text;         if (Helper.IsEmpty(password)) {             password = OrgGroup.DEFAULT_PASSWORD;         }          // This doesn't count login failures towards account lockout         // To enable password failures to trigger lockout, change to shouldLockout: true         var result = signinManager.PasswordSignIn(LoginEmail.Text, password, RememberMe.Checked, false);          switch (result)         {             case SignInStatus.Success:                 ApplicationUser user = signinManager.UserManager.FindByName(LoginEmail.Text);                 if (RememberMe.Checked)  {                     SignUpPlace.RememberMe(Response, LoginEmail.Text);                 }                 FormsAuthentication.SetAuthCookie(user.UserName, true);                  if (user.GroupId.Equals(Guid.Empty)) {                     Response.Redirect("/Home");                  }                 else {                     Response.Redirect("/Member/" + user.GroupId.ToString());                  }                 break;             case SignInStatus.LockedOut:                 Response.Redirect("/Account/Lockout");                 break;             case SignInStatus.RequiresVerification:                  Response.Redirect(String.Format("/Account/TwoFactorAuthenticationSignIn?ReturnUrl={0}&amp;RememberMe={1}",                                      Request.QueryString["ReturnUrl"],                                     RememberMe.Checked),                                     true);                 break;             case SignInStatus.Failure:             default:                 FailureText.Text = "Invalid login attempt";                 ErrorMessage.Visible = true;                 break;         }     }  } </code></pre>  <p>SignUpPlace.RememberMe is a static method in a class for the 3 logins to use to set a longer expiry date for remember me.</p>  <pre><code> public class SignUpPlace  { ...     public static void RememberMe(HttpResponse response, string email)     {         response.Cookies.Clear();          DateTime expiryDate = DateTime.Now.AddMonths(12);         FormsAuthenticationTicket ticket = new FormsAuthenticationTicket(2, email,  DateTime.Now, expiryDate, true, String.Empty);         string encryptedTicket = FormsAuthentication.Encrypt(ticket);         HttpCookie authenticationCookie = new HttpCookie(FormsAuthentication.FormsCookieName, encryptedTicket);         authenticationCookie.Expires = ticket.Expiration;         response.Cookies.Add(authenticationCookie);         FormsAuthentication.SetAuthCookie(email, true);      }  } </code></pre>  <p>Web config has</p>  <pre><code>&lt;system.web&gt;   &lt;authentication mode="None" /&gt; ... &lt;system.webServer&gt;   &lt;validation validateIntegratedModeConfiguration="false" /&gt;   &lt;modules runAllManagedModulesForAllRequests="true"&gt;   &lt;remove name="FormsAuthentication" /&gt;  ... </code></pre>  <p>I have a few more technical oriented users telling me about login failure and success from the two logins they can use (public and member). The more luddite type users just think nothing works. Remember me appears to be working fine which helped in avoiding logins and its problem.</p>  <p>I managed to reproduce the problem on my development system a couples times where I determined IsAuthenticated is false leaving me at a dead end not understanding how a successful login translates to IsAuthenticated in a redirect.  Searching online has not helped me understand the black box that is microsoft security.</p>  <p>Does anyone know what could cause IsAuthenticated to be false after a successful login?<br> Is there something I should look at if it reproduces in my development again sometime?<br> Was it a mistake to use the provided security tools? They provide everything I need.</p>  <p>I cannot have successful logins failing randomly. </p>