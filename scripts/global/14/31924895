<p>I am trying to learn Lisp/Scheme and I tried implementing a very simple version of the mandelbrot set in it to get practice. The problem I ran into is that the code runs very, very slow. At first I thought it was because I was using recursion instead of imperative loops, but I tried re-writing more or less the same code (recursion included) in python (which doesn't even have tail-call optimisation), and it ran very smooth</p>  <p>So I am wondering if there is something obvious I am missing in my code and what I could do to make it run faster.</p>  <p>Here is the code snippet in Scheme (racket). I also did pretty much the same thing in SBCL and the speed was comparable</p>  <pre><code>#lang racket  (define-syntax dotimes     (syntax-rules ()       ((_ (var n res) . body)        (do ((limit n)             (var 0 (+ var 1)))            ((&gt;= var limit) res)          . body))       ((_ (var n) . body)        (do ((limit n)             (var 0 (+ var 1)))            ((&gt;= var limit))          . body))))  (define (print-brot zr zc)   (if (&lt; (+ (* zr zr) (* zc zc)) 2)       (display "@")       (display ".")))  (define (brot zr zc cr cc i)   (if (= i 0)       (print-brot zr zc)       (let ((z2r (- (* zr zr) (* zc zc))) (z2c (* 2 zr zc)))         (brot (+ z2r cr) (+ z2c cc) cr cc (- i 1)))))  (define (linspace i w)   (/ (- i (/ w 2)) (/ w 4)))  (define (brot-grid w h n)   (dotimes (i w)            (dotimes (j h)                     (let ((x (linspace i w)) (y (linspace j h)))                       (brot 0 0 x y n)))            (newline)))  (brot-grid 40 80 20) </code></pre>  <p>(I hope the code block is not too clustery, it was hard to strip it to something more simple)</p>  <p>Also, I know Scheme and Common Lisp have complex numbers built in but I wanted to test it using regular real numbers, I don't think this is the reason it runs so slow.</p>  <p>The parameter "i" of the brot function is the number of iterations, and the parameter "n" of brot-grid is also the number of iterations to use for each point. When I set it to more than like 10, the code takes forever to run, which doesn't seem normal. The increase in time taken also doesn't seem to be linear, for instance it only takes about a second on my machine with n = 10 but takes several minutes with n = 15 and doesn't even finish with n = 20</p>  <p>So, what is it that makes this code run so slow?</p>  <p>Thanks in advance</p>