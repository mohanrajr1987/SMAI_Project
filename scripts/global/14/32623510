<p>I'm wondering how to get good practice with exploring another language of similar function. This doesn't apply to something like reimplementing C libraries in Ruby, because some of those may not even be practical to do. I'm meaning things like C to Ada, Lisp, FORTRAN, COBOL, etc.</p>  <p>This is a dual-featured question, one for me, and one for the community:</p>  <ol> <li><p>I have agreed to reimplement some libraries of  C as explorations for Ada and Lisp (hence the mentioning them), and am looking for a good, robust subset of the standard C libraries to reimplement in other languages (efficiency here is not the main goal) in order to explore them. Can anyone recommend some libraries or particular functions that would be good candidates?</p></li> <li><p>For people like me who are not terribly creative and do not like to produce code in their free time, thus preempting the "recode something you made for fun in language x" example, what are good "standard code items" you can churn through in some given new language that will force you to explore the featureset and  familiarize yourself with them and its syntax? That is, a generalized tutorial so that when you start producing actual codebases in the target language, you aren't fumbling around realizing that the language had feature X the whole time and you were operating without it.</p></li> </ol>  <p>My apologies if this is not a question well-suited to this format, I figured the SE/SO community would far and away be the best place to ask this.</p>  <p><strong>UPDATE</strong>:</p>  <p>As I expected would happen, I've been asked to rephrase the question to be more specific. At the possible expense of usefulness, I rephrase it like this:</p>  <p><strong>What are some C functions that are non-trivial, non-internal</strong> (like <em>atoi</em> which merely does a clever ASCII conversion, or environment functions, both of which are however certainly not trivial)<strong>, as these functions would be good practice for acclimatizing to another language?</strong></p>