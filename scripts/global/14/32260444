<p><a href="https://github.com/grassdog/The-Little-Schemer/blob/master/ten-commandments-and-five-rules.md#the-third-commandment">The Third Commandment</a> of <a href="https://mitpress.mit.edu/books/little-schemer">The Little Schemer</a> states:</p>  <blockquote>   <p>When building a list, describe the first typical element, and then cons it onto the natural recursion.</p> </blockquote>  <p>What is the exact definition of "natural recursion"? The reason why I am asking is because I am taking a class on programming language principles by Daniel Friedman and the following code is not considered "naturally recursive":</p>  <pre class="lang-lisp prettyprint-override"><code>(define (plus x y)     (if (zero? y) x         (plus (add1 x) (sub1 y)))) </code></pre>  <p>However, the following code is considered "naturally recursive":</p>  <pre class="lang-lisp prettyprint-override"><code>(define (plus x y)     (if (zero? y) x         (add1 (plus x (sub1 y))))) </code></pre>  <p>I prefer the "unnaturally recursive" code because it is tail recursive. However, such code is considered anathema. When I asked as to why we shouldn't write the function in tail recursive form then the associate instructor simply replied, "You don't mess with the natural recursion."</p>  <p>What's the advantage of writing the function in the "naturally recursive" form?</p>