<p>You can use <a href="https://docs.docker.com/reference/builder/#expose" rel="nofollow">EXPOSE</a> in Docker for:</p>  <blockquote>   <p>The EXPOSE instructions informs Docker that the container will listen   on the specified network ports at runtime.</p> </blockquote>  <p>Can I do the opposite? Can I expose port from my Ubuntu to the docker container? </p>  <p><strong>Background:</strong> I'm trying to setup a simple php7-fpm as a docker image and I would like to expose port 3306 (MySQL service) to the docker container.</p>  <p>My <code>Dockerfile</code>:</p>  <pre><code>FROM debian:jessie  # persistent / runtime deps RUN apt-get update &amp;&amp; apt-get install -y ca-certificates curl libpcre3 librecode0 libsqlite3-0 libxml2 --no-install-recommends &amp;&amp; rm -r /var/lib/apt/lists/*  # phpize deps RUN apt-get update &amp;&amp; apt-get install -y autoconf file g++ gcc libc-dev make pkg-config re2c --no-install-recommends &amp;&amp; rm -r /var/lib/apt/lists/*  ENV PHP_INI_DIR /usr/local/etc/php RUN mkdir -p $PHP_INI_DIR/conf.d  ##&lt;autogenerated&gt;## ENV PHP_EXTRA_CONFIGURE_ARGS --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data ##&lt;/autogenerated&gt;##  ENV PHP_VERSION 7.0.0RC2  # --enable-mysqlnd is included below because it's harder to compile after the fact the extensions are (since it's a plugin for several extensions, not an extension in itself) RUN buildDeps=" \         $PHP_EXTRA_BUILD_DEPS \         libcurl4-openssl-dev \         libpcre3-dev \         libreadline6-dev \         librecode-dev \         libsqlite3-dev \         libssl-dev \         libxml2-dev \         xz-utils \     " \     &amp;&amp; set -x \     &amp;&amp; apt-get update &amp;&amp; apt-get install -y $buildDeps --no-install-recommends &amp;&amp; rm -rf /var/lib/apt/lists/* \     &amp;&amp; curl -SL "https://downloads.php.net/~ab/php-$PHP_VERSION.tar.xz" -o php.tar.xz \     &amp;&amp; mkdir -p /usr/src/php \     &amp;&amp; tar -xof php.tar.xz -C /usr/src/php --strip-components=1 \     &amp;&amp; rm php.tar.xz* \     &amp;&amp; cd /usr/src/php \     &amp;&amp; ./configure \         --with-config-file-path="$PHP_INI_DIR" \         --with-config-file-scan-dir="$PHP_INI_DIR/conf.d" \         $PHP_EXTRA_CONFIGURE_ARGS \         --disable-cgi \         --enable-mysqlnd \         --with-pdo-mysql \         --enable-mbstring \         --with-curl \                --with-openssl \         --with-pcre \         --with-readline \         --with-recode \         --with-zlib \     &amp;&amp; make -j"$(nproc)" \     &amp;&amp; make install \     &amp;&amp; { find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; } \     &amp;&amp; apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false -o APT::AutoRemove::SuggestsImportant=false $buildDeps \     &amp;&amp; make clean  COPY docker-php-ext-* /usr/local/bin/  ##&lt;autogenerated&gt;## WORKDIR /var/www/html COPY php-fpm.conf /usr/local/etc/  EXPOSE 9000 CMD ["php-fpm"] ##&lt;/autogenerated&gt;##  </code></pre>  <p>This is the command I use to run my container:</p>  <pre><code>docker run --name=php7-fpm -v /var/www/html/:/var/www/html/ -p 9002:9000 marty/php7 </code></pre>  <p>My PHP app database configuration:</p>  <pre><code>database:     main:         host: 127.0.0.1         dbname: edu         user: root         password: myPassword         port: 3306 </code></pre>