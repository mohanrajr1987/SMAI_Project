<p>I am trying to figure out the best ways to manage sessions when using a centralized cache such as memcached or Redis.</p>  <p>My problem is that right now I don't really know how to forcibly log out a user (password change, account disabled etc.), since I don't know how to make the session IDs have a matchable pattern that identifies the user.</p>  <p>I came up with the idea to do:</p>  <pre><code>PHPSESSID:[userid]:[default random ID generated by PHP] </code></pre>  <p>Such that I could tell Redis to Purge by pattern <code>PHPSESSID:[userid]:*</code> when a user changes his password.</p>  <p>Unfortunately it seems that one cannot both get the random value of <code>session_start();</code> and then set it with prefixed values with <code>session_id(':[userid]:[random value]');</code> as was my plan, since <code>session_id('[id]');</code> must always be called before <code>session_start();</code></p>  <p>This leaves me with the option of generating the session ID myself, prepending the user id and then starting the session. Enter cryptography. I use urandom and sha-256 for my current auto-generated session ID-config. This solution would have to be just as secure, of course.</p>  <p>I would like to know if this idea is completely off the rails, and in that case what might be a better solution to implementing a "log out all sessions of this user"-function.</p>