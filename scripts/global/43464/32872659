<p>"Fixed"</p>  <p>The problem 'went away' when I reset my server. Seems like resque stores info on the server until it can put it into redis.</p>  <p>Original Problem:</p>  <p>I'm using Resque with Redis, with Ruby on Rails.</p>  <p>My Redis has gone a bit mad. It's creating many broken queues.</p>  <p>When I click on "Stats" I get this error:</p>  <pre><code>RuntimeError at /resque/stats/resque can't add a new key into hash during iteration </code></pre>  <p>I've tried <code>redis.flushall</code>, to no effect.</p>  <p>Here's the full list of broken queues: <a href="http://snag.gy/a3owG.jpg" rel="nofollow">http://snag.gy/a3owG.jpg</a></p>  <pre><code>Name    Jobs ["[[:failed, []], []]", []] 0 ["[[[:failed, []], []], []]", []]   0 ["[[[[:failed, []], []], []], []]", []] 0 [:failed, []]   0 [["[[:failed, []], []]", []], []]   0 [["[[[:failed, []], []], []]", []], []] 0 [["[[[[:failed, []], []], []], []]", []], []]   0 [[:failed, []], []] 0 [[["[[:failed, []], []]", []], []], []] 0 [[["[[[:failed, []], []], []]", []], []], []]   0 [[["[[[[:failed, []], []], []], []]", []], []], []] 0 [[[:failed, []], []], []]   0 [[[["[[:failed, []], []]", []], []], []], []]   0 [[[["[[[:failed, []], []], []]", []], []], []], []] 0 [[[["[[[[:failed, []], []], []], []]", []], []], []], []]   0 [[[[:failed, []], []], []], []] 0 [[[[["[[:failed, []], []]", []], []], []], []], []] 0 [[[[["[[[:failed, []], []], []]", []], []], []], []], []]   0 [[[[["[[[[:failed, []], []], []], []]", []], []], []], []], []] 0 [[[[[:failed, []], []], []], []], []]   0 [[[[[["[[:failed, []], []]", []], []], []], []], []], []]   0 [[[[[["[[[:failed, []], []], []]", []], []], []], []], []], []] 0 [[[[[[:failed, []], []], []], []], []], []] 0 [[[[[[["[[:failed, []], []]", []], []], []], []], []], []], []] 0 [[[[[[[:failed, []], []], []], []], []], []], []]   0 [[[[[[[[:failed, []], []], []], []], []], []], []], []] 0 [[[[[[[[[:failed, []], []], []], []], []], []], []], []], []]   0 failed  0 </code></pre>  <p>Here's the code to create tasks - I believe this might explain the iteration.</p>  <pre><code>class RegistrationEmails::LeadCreatedJob   @queue = :slow_emails    def self.perform(application_id)      # No check - send it when added     application = Application.find_by_id(application_id)     if application       # Send email       LeadMailer.lead_created(application_id).deliver_now        # Queue second part of campaign       Resque.enqueue_in(1.minute, RegistrationEmails::LeadCreatedFollowupJob, application_id)     end    end end </code></pre>