<p>I'm still fairly new to NoSQL databases, but the query-able object store concept seems straightforward enough.  However in planning my algorithm for a <em>Content Based Image Retrieval</em> database, I need to wrap my head around the process by which Couchbase compares the stored properties.  </p>  <p>It seems that writing documents only accepts an NSString, so I'm assuming the given NSDictionary keys are only assumed to be strings.  Furthermore, the documentation and example apps don't really explain how the data is stored and reasoned with during a query.</p>  <p>For instance, from the <a href="http://developer.couchbase.com/documentation/mobile/1.1.0/develop/training/build-first-ios-app/couchbase-lite-views/index.html" rel="nofollow">examples page</a>.</p>  <pre><code>CBLView* orderedByDateView = [self getView]; [orderedByDateView setMapBlock: MAPBLOCK({     emit(doc[@"date"], nil); }) version: @"1" /* Version of the mapper */ ];  orderedByDateQuery.descending = YES; orderedByDateQuery.startKey = @"2015";      orderedByDateQuery.endKey = @"2014";      orderedByDateQuery.limit = 20; </code></pre>  <p>What this code says to me is select a maximum of 20 objects such that the range of property <code>date</code> is between 2014 and 2015 (assuming there were intermediary values, e.g. 2014.1, 2014.2).  But what about objects that that aren't as cut and dry and strings or whose description method doesn't represent it well enough?  What mechanism is used for equality and are there other operators than just equality?  Can my objects adopt NSCopying protocol and be stored and restored?</p>  <p>I've also looked into NanoStore.  It seems to store more Objective-C ish data structures, though it apparently hasn't been updated since 2013.  Perhaps it's a better suit for my needs?</p>