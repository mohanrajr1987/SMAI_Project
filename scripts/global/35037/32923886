<p>I understand the benefit of nosql document oriented databases(of having related data in single doc) .But how do people generally solve the problem like this one explained below.</p>  <p>for example let us take the scenario of a document having information about an employee.</p>  <pre><code>{   "name" : "harish",  "dept" "Electronics and Communication" } </code></pre>  <p>so similar to this there are n users.</p>  <pre><code>{   "name" : "harish",  "dept" : "Electronics and Communication" } {   "name" : "surya",  "dept" : "Electronics and Communication" } {   "name" : "vignesh",  "dept" : "Electrical" } {   "name" : "vikas",  "dept" : "Electronics and Communication" } </code></pre>  <p>now if for some reason the management decides to change the department name from "Electronics and Communication" to the short form "ECE".</p>  <p>But now in this case it does not make sense for me to find all docs with department as "Electronics and Communication" and update it to "ECE".</p>  <p>how is such a scenario handled in document oriented db's.</p>  <p>Is it ok to do as </p>  <pre><code>{   "name" : "harish",  "dept" : 1001 } {   "name" : "surya",  "dept" : 1001 } {   "name" : "vignesh",  "dept" : 1002 } {   "name" : "vikas",  "dept" : 1001 } </code></pre>  <p>and have dept document separately as</p>  <pre><code>{   "id" : 1001,   "name" : "Electronics and Communication" }, {   "id" : 1002,   "name" : "Electrical" } </code></pre>  <p>But this forces me to read a employee record I should access 2 documents. also to update I should access two documents. which is  a cross document operation.</p>  <p>I am asking this question as document oriented db's in general do not guaranteed atomicity when done across documents, it is guarantee only within documents. </p>