<p>I have a list of items. I use pagination here to show 10 items/page which works fine. However, when I "check" this item, I change the "checked" value in the database from 'false' to 'true'. When an item's status is 'true' it shouldn't be shown on the list anymore. Changing this value is also working fine, but my problem is with the pagination. It updates by removing the item from the list, which is good, but now there's no longer 10 items on the first page, but 9. This goes on all the way until the first page is empty, and I have to switch to page 2 to continue checking items, which is obviously not good. What am I doing wrong with my pagination?</p>  <p>My list in the view:</p>  <pre><code>@using PagedList.Mvc @model PagedList.IPagedList&lt;WebApplication1.Models.ErrorModel&gt;  &lt;ul class="list-group"&gt; @foreach (var item in Model) {     if (item.Checked == "False")     {         &lt;li class="list-group-item"&gt;             &lt;div class="row"&gt;                 &lt;div class="col-md-4"&gt;                     &lt;h4&gt;                         Instrument ID: @item.InstrumentId                     &lt;/h4&gt;                     &lt;h4 id="checkBtn"&gt;@Html.ActionLink("Go to instrument", "Instrument", new {instrumentid = item.InstrumentId})&lt;/h4&gt;                     Not yet checked: &lt;button type="button" class="open-dialog btn btn-primary btn-sm" data-toggle="modal" data-target="#myModal" data-url="@Url.Action("CheckError", new {isChecked = item.Checked, error = item.InstrumentId})"&gt;Check&lt;/button&gt;                 &lt;/div&gt;                 &lt;div class="col-md-4"&gt;                     @item.Type                 &lt;/div&gt;                 &lt;div class="col-md-4"&gt;                     @item.Message                 &lt;/div&gt;             &lt;/div&gt;         &lt;/li&gt;     } } </code></pre>  <p></p>  <p>The dialog opened by the button:</p>  <pre><code>&lt;!-- Remove from error list-Modal --&gt; &lt;div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"&gt; &lt;div class="modal-dialog" role="document"&gt;     &lt;div class="modal-content"&gt;         &lt;div class="modal-header"&gt;             &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;                 &lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;             &lt;/button&gt;         &lt;/div&gt;         &lt;div class="modal-body"&gt;             &lt;p&gt;Do you want to remove this error from the error list?&lt;/p&gt;         &lt;/div&gt;         &lt;div class="modal-footer"&gt;             &lt;button type="button" class="btn btn-default" data-dismiss="modal"&gt;Close&lt;/button&gt;             &lt;a id="error" class="btn btn-primary btn-sm" href="#"&gt;Yes, save changes&lt;/a&gt;         &lt;/div&gt;     &lt;/div&gt; &lt;/div&gt; </code></pre>  <p></p>  <pre><code>&lt;script type="text/javascript"&gt;     $(document).on("click", ".open-dialog", function() {         $('#error').attr('href', $(this).data('url')); // update the link's url     }); &lt;/script&gt; </code></pre>  <p>Here's the controller:</p>  <pre><code>    public ActionResult CheckError(string error)     {         string cs = "Data Source=" + "some url";          using (SQLiteConnection con = new SQLiteConnection(cs))         {             string stm = "UPDATE Error SET Checked = 'True' WHERE InstrumentID = " + "'" + error + "'";             con.Open();              using (SQLiteCommand cmd = new SQLiteCommand(stm, con))             {                 cmd.CommandText = stm;                 cmd.ExecuteNonQuery();             }              con.Close();         }          return RedirectToAction("Error");     } </code></pre>  <p>And for good measure, the controller which is being redirected to:</p>  <pre><code>   public ActionResult Error(int? page)     {         string cs = "Data Source=" + "some url";          using (SQLiteConnection con = new SQLiteConnection(cs))         {             var listOfErrors = new List&lt;ErrorModel&gt;();             string stm = "SELECT * FROM Error";             con.Open();              using (SQLiteCommand cmd = new SQLiteCommand(stm, con))             {                 using (SQLiteDataReader rdr = cmd.ExecuteReader())                 {                     while (rdr.Read())                     {                         listOfErrors.Add(new ErrorModel                         {                             Checked = rdr["Checked"].ToString(),                          });                     }                      rdr.Close();                     ErrorList = listOfErrors;                 }             }              con.Close();         }          // stuff for paging         int pageSize = 10;         int pageNumber = (page ?? 1); // if there is no page, return page 1          return View(ErrorList.ToPagedList(pageNumber, pageSize));     } </code></pre>