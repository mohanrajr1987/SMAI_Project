<p>I use ant pack an android apk,it can run normal on every mobile except android 6.0 mobile like nexus. If I do not use ant, the project and apk can run normal on every mobile besides android 6.0 mobile. the build.xml is:</p>  <pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; </code></pre>  <p></p>  <pre><code>&lt;condition property="debug"&gt;     &lt;istrue value="false"/&gt; &lt;/condition&gt;  &lt;!-- control envrypt  --&gt; &lt;condition property="encrypt_jug"&gt;     &lt;istrue value="true"/&gt; &lt;/condition&gt;  &lt;!-- ANT env --&gt; &lt;property environment="env" /&gt; &lt;!-- 应用名称 --&gt; &lt;property name="appName" value="${ant.project.name}"/&gt; &lt;property name="appNameAligned" value="TZYJ"/&gt; &lt;!-- SDK directory( get ANDROID_SDK_HOME env) --&gt; &lt;property name="sdk-folder" value="${env.SDK_HOME}" /&gt; &lt;!-- SDK plateform specify --&gt; &lt;property name="sdk-platform-folder" value="${sdk-folder}/platforms/android-7"/&gt; &lt;!-- SDK  tools directory --&gt; &lt;property name="sdk-tools" value="${sdk-folder}/tools" /&gt; &lt;!-- SDK specify tools directory --&gt; &lt;property name="sdk-platform-tools" value="${sdk-folder}/platform-tools" /&gt; &lt;!-- proguard directory --&gt; &lt;property name="proguard-home" value="${sdk-tools}\proguard/lib" /&gt;   &lt;!-- command( system is windows,if linux,.bat replaced) --&gt; &lt;property name="aapt" value="${sdk-platform-tools}/aapt" /&gt; &lt;property name="aidl" value="${sdk-platform-tools}/aidl" /&gt; &lt;property name="dx" value="${sdk-platform-tools}/dx.bat" /&gt; &lt;property name="apkbuilder" value="${sdk-tools}/apkbuilder.bat" /&gt; &lt;property name="jarsigner" value="${env.JAVA_HOME}/bin/jarsigner" /&gt; &lt;property name="zipalign" value="${sdk-tools}/zipalign" /&gt;  &lt;!-- required jar; maps.jar --&gt; &lt;property name="android-jar" value="${sdk-platform-folder}/android.jar" /&gt; &lt;property name="android-maps-jar" value="${sdk-folder}/add-ons/addon_google_apis_google_inc_8/libs/maps.jar"/&gt;  &lt;!-- aidl required framework.aidl --&gt; &lt;property name="framework-aidl" value="${sdk-platform-folder}/framework.aidl" /&gt;  &lt;!-- generated R Directory --&gt; &lt;property name="outdir-gen" value="gen" /&gt; &lt;!--  --&gt; &lt;property name="outdir-bin" value="bin" /&gt;  &lt;!-- APK Directory --&gt; &lt;property name="apk-packet" value="packet" /&gt; &lt;property name="outdir-bin-apk" value="${apk-packet}" /&gt; &lt;property name="manifestpacket" value="AndroidManifest" /&gt;  &lt;!-- android manifest --&gt; &lt;property name="manifest-xml" value="AndroidManifest.xml" /&gt; &lt;property name="manifest-xml1" value="${manifestpacket}/${manifest-xml}" /&gt;  &lt;!-- src --&gt; &lt;property name="resource-dir" value="res" /&gt; &lt;property name="asset-dir" value="assets" /&gt; &lt;!-- java src --&gt; &lt;property name="srcdir" value="src" /&gt; &lt;property name="srcdir-ospath" value="${basedir}/${srcdir}" /&gt; &lt;!-- external lib --&gt; &lt;property name="external-lib" value="libs" /&gt; &lt;property name="external-lib-ospath" value="${basedir}/${external-lib}" /&gt; &lt;property name="external-annotation" value="${sdk-tools}/support" /&gt;   &lt;!--  generated class directory --&gt; &lt;property name="outdir-classes" value="${outdir-bin}" /&gt; &lt;property name="outdir-classes-ospath" value="${basedir}/${outdir-classes}" /&gt;  &lt;!-- classes.dex related var --&gt; &lt;property name="dex-file" value="classes.dex" /&gt; &lt;property name="dex-path" value="${outdir-bin}/${dex-file}" /&gt; &lt;property name="dex-ospath" value="${basedir}/${dex-path}" /&gt;  &lt;!-- aapt generated resource --&gt; &lt;property name="resources-package" value="${outdir-bin}/resources.ap_" /&gt; &lt;property name="resources-package-ospath" value="${basedir}/${resources-package}" /&gt;  &lt;!-- unsigned apk --&gt; &lt;property name="out-unsigned-package" value="${outdir-bin-apk}/${appName}-unsigned.apk" /&gt; &lt;property name="out-unsigned-package-ospath" value="${basedir}/${out-unsigned-package}" /&gt;  &lt;!-- keystore support --&gt; &lt;property name="keystore-file" value="${basedir}/release.keystore" /&gt;  &lt;!-- apk --&gt; &lt;property name="out-signed-package" value="${outdir-bin-apk}/${appName}.apk" /&gt; &lt;property name="out-signed-package-ospath" value="${basedir}/${out-signed-package}" /&gt;  &lt;!-- align apk --&gt; &lt;property name="out-signed-package-align" value="${outdir-bin-apk}/${appNameAligned}.apk" /&gt; &lt;property name="out-signed-package-ospath-align" value="${basedir}/${out-signed-package-align}" /&gt;  &lt;!-- initial  --&gt;     &lt;target name="init"&gt;         &lt;echo&gt;Initializing all output directories...gen-R,path:${outdir-gen}&lt;/echo&gt;         &lt;delete dir="${outdir-bin}" /&gt;         &lt;mkdir dir="${outdir-bin}" /&gt;         &lt;delete dir="${outdir-gen}" /&gt;         &lt;mkdir dir="${outdir-gen}" /&gt;         &lt;mkdir dir="${outdir-classes}" /&gt;         &lt;delete dir="${outdir-bin-apk}" /&gt;         &lt;mkdir dir="${outdir-bin-apk}" /&gt;         &lt;!--copy overwrite="true" tofile="${manifest-xml1}"--&gt;             &lt;!--fileset file="${manifest-xml}"/--&gt;         &lt;!--/copy--&gt;     &lt;/target&gt;  &lt;!-- configure encrypt --&gt;     &lt;target name="encrypt" if="encrypt_jug"&gt;         &lt;echo&gt;encrypt config file...&lt;/echo&gt;         &lt;copy file="tools/hs20120918.dat" tofile="${resource-dir}/raw/hs20120918.dat" overwrite="true"/&gt;          &lt;echo&gt;encrypt winner_config&lt;/echo&gt;         &lt;java jar="tools/android-encrypt.jar" fork="true" failonerror="true"&gt;             &lt;arg value="encode"/&gt;             &lt;arg value="${resource-dir}/raw/winner_config.properties.encode"/&gt;             &lt;arg value="${resource-dir}/raw/winner_config.properties.encode"/&gt;             &lt;arg value="${resource-dir}/raw/hs20120918.dat"/&gt;         &lt;/java&gt;          &lt;echo&gt;encrypt requirementscfg.xml&lt;/echo&gt;         &lt;java jar="tools/android-encrypt.jar" fork="true" failonerror="true"&gt;             &lt;arg value="encode"/&gt;             &lt;arg value="${resource-dir}/raw/requirementscfg.xml.encode"/&gt;             &lt;arg value="${resource-dir}/raw/requirementscfg.xml.encode"/&gt;             &lt;arg value="${resource-dir}/raw/hs20120918.dat"/&gt;         &lt;/java&gt;         &lt;echo&gt;encrypt trade_function_config.xml&lt;/echo&gt;         &lt;java jar="tools/android-encrypt.jar" fork="true" failonerror="true"&gt;             &lt;arg value="encode"/&gt;             &lt;arg value="${resource-dir}/raw/trade_function_config.xml.encode"/&gt;             &lt;arg value="${resource-dir}/raw/trade_function_config.xml.encode"/&gt;             &lt;arg value="${resource-dir}/raw/hs20120918.dat"/&gt;         &lt;/java&gt;     &lt;/target&gt;  &lt;!-- generated R.java  --&gt;     &lt;target name="gen-R" depends="init, encrypt"&gt;         &lt;echo&gt;Generating R.java from the resources...&lt;/echo&gt;         &lt;exec executable="${aapt}" failonerror="true"&gt;             &lt;arg value="package" /&gt;             &lt;arg value="-f" /&gt;             &lt;arg value="-m" /&gt;             &lt;arg value="-J" /&gt;             &lt;arg value="${outdir-gen}" /&gt;             &lt;arg value="-S" /&gt;             &lt;arg value="${resource-dir}" /&gt;             &lt;arg value="-M" /&gt;             &lt;arg value="${manifest-xml}" /&gt;             &lt;arg value="-I" /&gt;             &lt;arg value="${android-jar}" /&gt;         &lt;/exec&gt;     &lt;/target&gt;  &lt;!-- compiled aidl files --&gt;     &lt;target name="aidl" depends="gen-R"&gt;         &lt;echo&gt;Compiling .aidl into java files...&lt;/echo&gt;         &lt;apply executable="${aidl}" failonerror="true"&gt;             &lt;!-- specify precompile file --&gt;             &lt;arg value="-p${framework-aidl}"/&gt;             &lt;!-- aidl  --&gt;             &lt;arg value="-I${srcdir}"/&gt;             &lt;!-- destination --&gt;             &lt;arg value="-o${outdir-gen}"/&gt;             &lt;!-- specify which files compile --&gt;             &lt;fileset dir="${srcdir}"&gt;                 &lt;include name="**/*.aidl"/&gt;             &lt;/fileset&gt;         &lt;/apply&gt;     &lt;/target&gt;      &lt;target name="compile" depends="aidl"&gt;         &lt;echo&gt;Compiling java source code...&lt;/echo&gt;         &lt;javac encoding="utf-8" target="1.6" srcdir="." debug="${debug}" destdir="${outdir-classes}" bootclasspath="${android-jar}"&gt;             &lt;classpath&gt;                 &lt;fileset dir="${external-lib}" includes="*.jar"/&gt;                 &lt;fileset dir="${external-annotation}" includes="*.jar"/&gt;             &lt;/classpath&gt;         &lt;/javac&gt;     &lt;/target&gt;   &lt;!-- proguard --&gt;  &lt;target name="proguard" depends="compile" unless="debug"&gt;      &lt;jar basedir="${outdir-classes}" destfile="temp.jar" /&gt;      &lt;java jar="${proguard-home}/proguard.jar" fork="true" failonerror="true"&gt;           &lt;jvmarg value="-Dmaximum.inlined.code.length=32"/&gt;         &lt;arg value="-injars temp.jar"/&gt;         &lt;arg value="-outjars optimized.jar"/&gt;         &lt;arg value="-libraryjars ${android-jar}"/&gt;          &lt;arg value="-libraryjars ${external-lib}/"/&gt;         &lt;arg value="-libraryjars ${external-annotation}"/&gt;          &lt;arg value="-dontpreverify"/&gt;         &lt;arg value="-dontoptimize"/&gt;         &lt;arg value="-dontusemixedcaseclassnames"/&gt;          &lt;arg value="-allowaccessmodification"/&gt;         &lt;!--&lt;arg value="-keep public class ${exclude-activity}"/&gt;--&gt;         &lt;!--&lt;arg value="-keep public class ${exclude-provider}"/&gt;--&gt;          &lt;arg value="@proguard.cfg"/&gt;         &lt;arg value="-optimizationpasses 5"/&gt;         &lt;arg value="-verbose"/&gt;         &lt;arg value="-dontskipnonpubliclibraryclasses"/&gt;         &lt;arg value="-dontskipnonpubliclibraryclassmembers"/&gt;           &lt;/java&gt;      &lt;delete file="temp.jar" /&gt;      &lt;delete dir="${outdir-classes}" /&gt;      &lt;mkdir dir="${outdir-classes}" /&gt;      &lt;unzip src="optimized.jar" dest="${outdir-classes}" /&gt;      &lt;delete file="optimized.jar" /&gt;  &lt;/target&gt;    &lt;!-- .class to .dex --&gt;     &lt;target name="dex" depends="proguard"&gt;         &lt;echo&gt;Converting compiled files and external libraries into a .dex file...&lt;/echo&gt;         &lt;exec executable="${dx}" failonerror="true"&gt;             &lt;arg value="--dex" /&gt;             &lt;!-- output --&gt;             &lt;arg value="--output=${dex-ospath}" /&gt;             &lt;!-- .dex  classes and libraries --&gt;             &lt;arg value="${outdir-classes-ospath}" /&gt;             &lt;arg value="${external-lib-ospath}"/&gt;             &lt;arg value="${external-annotation}"/&gt;         &lt;/exec&gt;     &lt;/target&gt;  &lt;!-- output --&gt;     &lt;target name="package-res-and-assets"&gt;         &lt;echo&gt;Packaging resources and assets...&lt;/echo&gt;         &lt;exec executable="${aapt}" failonerror="true"&gt;             &lt;arg value="package" /&gt;             &lt;arg value="-f" /&gt;             &lt;arg value="-M" /&gt;             &lt;arg value="${manifest-xml1}" /&gt;             &lt;arg value="-S" /&gt;             &lt;arg value="${resource-dir}" /&gt;             &lt;arg value="-A" /&gt;             &lt;arg value="${asset-dir}" /&gt;             &lt;arg value="-I" /&gt;             &lt;arg value="${android-jar}" /&gt;             &lt;arg value="-F" /&gt;             &lt;arg value="${resources-package}" /&gt;         &lt;/exec&gt;     &lt;/target&gt;  &lt;!-- pack un apk --&gt;     &lt;target name="package" depends="dex, package-res-and-assets"&gt;         &lt;echo&gt;Packaging unsigned apk for release...&lt;/echo&gt;         &lt;exec executable="${apkbuilder}" failonerror="true"&gt;             &lt;arg value="${out-unsigned-package-ospath}" /&gt;             &lt;arg value="-u" /&gt;             &lt;arg value="-z" /&gt;             &lt;arg value="${resources-package-ospath}" /&gt;             &lt;arg value="-f" /&gt;             &lt;arg value="${dex-ospath}" /&gt;             &lt;arg value="-rf" /&gt;             &lt;arg value="${srcdir-ospath}" /&gt;             &lt;arg value="-nf"/&gt;             &lt;arg value="${external-lib-ospath}"/&gt;         &lt;/exec&gt;         &lt;echo&gt;It will need to be signed with jarsigner before being published.&lt;/echo&gt;     &lt;/target&gt;  &lt;!-- apk --&gt;     &lt;target name="jarsigner" depends="package"&gt;         &lt;echo&gt;Packaging signed apk for release...&lt;/echo&gt;         &lt;exec executable="${jarsigner}" failonerror="true"&gt;              &lt;arg value="-keystore" /&gt;             &lt;arg value="${keystore-file}" /&gt;             &lt;arg value="-storepass" /&gt;             &lt;arg value="hschyf" /&gt;             &lt;arg value="-keypass" /&gt;             &lt;arg value="hschyf" /&gt;             &lt;arg value="-signedjar" /&gt;             &lt;arg value="${out-signed-package-ospath}" /&gt;             &lt;arg value="${out-unsigned-package-ospath}"/&gt;              &lt;arg value="hswinner"/&gt;         &lt;/exec&gt;     &lt;/target&gt;  &lt;!-- release --&gt;     &lt;target name="release" depends="jarsigner"&gt;         &lt;!-- delete apk --&gt;         &lt;delete file="${out-unsigned-package-ospath}"/&gt;         &lt;echo&gt;APK is released. path:${out-signed-package-ospath}&lt;/echo&gt;     &lt;/target&gt;      &lt;target name="align" depends="release"&gt;         &lt;exec executable="${zipalign}" failonerror="true"&gt;             &lt;arg value="-v" /&gt;             &lt;arg value="-f" /&gt;             &lt;arg value="4" /&gt;             &lt;arg value="${out-signed-package-ospath}" /&gt;             &lt;arg value="${out-signed-package-ospath-align}" /&gt;         &lt;/exec&gt;         &lt;delete file="${out-signed-package-ospath}"/&gt;     &lt;/target&gt; </code></pre>  <p></p>