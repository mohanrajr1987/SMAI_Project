<p>This is somewhat of an <strong>abstract question</strong>. I'm referencing <strong>Mike Bostock's</strong> code for importing an external <code>svg</code> file: <a href="http://bl.ocks.org/mbostock/1014829" rel="nofollow">http://bl.ocks.org/mbostock/1014829</a></p>  <p>My plan is to use an external <code>SVG</code> as an <code>icon</code> (or <code>sprite</code>) that will be used multiple times in one interface.  Is there a method for creating a copy of the <code>xml.documentElement</code> below? In summary, how does one create multiple instances of one <code>svg</code> file without loading the file for each instance?</p>  <pre><code>d3.xml("rect01.svg", "image/svg+xml", function(xml) { document.body.appendChild(xml.documentElement); }); </code></pre>  <p>The end goal is to add an external <code>svg</code> to each cell in the grid created from this example: <a href="http://bl.ocks.org/bunkat/2605010" rel="nofollow">http://bl.ocks.org/bunkat/2605010</a></p>  <p>Referencing the link above, how does one work the <code>xml.documentElement</code> data into the grid in the code below, so that the external <code>svg</code> is visible, rather than a rectangle?</p>  <pre><code>   var col = row.selectAll(".cell")                  .data(function (d) { return d; })                 .enter().append("svg:rect")                  .attr("class", "cell")                  .attr("x", function(d) { return d.x; })                  .attr("y", function(d) { return d.y; })                  .attr("width", function(d) { return d.width; })                  .attr("height", function(d) { return d.height; })                  .on('mouseover', function() {                     d3.select(this)                         .style('fill', '#0F0');                  })                  .on('mouseout', function() {                     d3.select(this)                         .style('fill', '#FFF');                  })                  .on('click', function() {                     console.log(d3.select(this));                  })                  .style("fill", '#FFF')                  .style("stroke", '#555'); } </code></pre>