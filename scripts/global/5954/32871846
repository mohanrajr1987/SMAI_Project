<p>I've been trying to verify my app with the following codesign command (as stated in the "Code Signing Tasks" on the apple deliver site. I'm using a distribution enterprise certificate and when I generate my ipa and distribute it via my HTTPS server, everything works great. All iphones can install and download my app. My only issue that now certain management solutions need to have an app verified (or so I'm being told). I'm using the command below to verify, but it keeps failing.</p>  <pre><code>codesign --verify -vvvv -R='anchor apple generic and certificate 1[field.1.2.840.113635.100.6.2.1] exists and (certificate leaf[field.1.2.840.113635.100.6.1.2] exists or certificate leaf[field.1.2.840.113635.100.6.1.4] exists)' MyApp.ipa MyApp.ipa: code object is not signed at all </code></pre>  <p>BUT if I run the exact same command on the .app version of my file, it works great!</p>  <pre><code>codesign --verify -vvvv -R='anchor apple generic and certificate 1[field.1.2.840.113635.100.6.2.1] exists and (certificate leaf[field.1.2.840.113635.100.6.1.2] exists or certificate leaf[field.1.2.840.113635.100.6.1.4] exists)' MyApp.app MyApp.app: valid on disk MyApp.app: satisfies its Designated Requirement MyApp.app: explicit requirement satisfied </code></pre>  <p>To convert my .app to .ipa I simply put the .app folder into a Payload folder and then compress it. Is there something wrong I'm doing? I have a valid Provisional Profile (not a wildcard, one with a specific APP ID). I have tried building the IPA both by command line and by Xcode but to no avail. I'm using OS X 10.10.5 and Xcode 6.4. I'm using the "--deep" flag in my code signing options. I use the following frameworks in my app:</p>  <pre><code>Security.framework ImageIO.framework. </code></pre>  <p>I also have these frame works present in the /Frameworks/ folder of my .app:</p>  <pre><code>libswiftCore.dylib       libswiftCoreImage.dylib      libswiftFoundation.dylib     libswiftUIKit.dylib libswiftCoreAudio.dylib      libswiftDarwin.dylib         libswiftObjectiveC.dylib libswiftCoreGraphics.dylib   libswiftDispatch.dylib       libswiftSecurity.dylib </code></pre>  <p>One thing I am using the j2obc converter from Google (<a href="http://j2objc.org/docs/j2objc.html" rel="nofollow">http://j2objc.org/docs/j2objc.html</a>). I have a common library in Java that I port over into Objective C, and then I import a bridging header to my Swift project. I have the following "Other Linker Flags"</p>  <pre><code>-jlre_emul -ObjC </code></pre>  <p>In addition to this, I'm using the following Build Rules mentioned here" <a href="http://j2objc.org/docs/Xcode-Build-Rules.html" rel="nofollow">http://j2objc.org/docs/Xcode-Build-Rules.html</a></p>  <p>I'm also use a scheme with "Release", and all my certificates in the </p>  <p>Any ideas? I don't get how the APP version verifies correctly, yet the IPA version fails...</p>