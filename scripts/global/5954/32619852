<p>So, I'm looking for some help, most with understanding the process of code-signing and encryption because I'm still shaky on both topics.</p>  <p><em>What I think I understand:</em></p>  <ul> <li>First thing needed is a KEY, which is generated using some encryption algorithm (RSA/SHA1/etc)</li> <li>With this key we create a certificate signing request or CSR (something to do with X509?) which holds all of our information that will be on the certificate (Name, Location, Email, Domain)</li> <li>Both the KEY and the CSR get sent to the Root CA who then issues a certificate - in the form of a .pem or .p12 file (using the CSR and key for generation). </li> <li>Something about intermediate CAs and more certificates</li> <li><p>This cert can then be used in addition to the intermediate CAs to <em>sign</em> a file so that it basically has your name on it and recipients can be assured it's the what you intended them to receive.</p>  <p><em>Versus</em>: </p></li> <li>Same process with obtaining a certificate</li> <li>The public key inside of the certificate is used to encrypt the contents of the file using aes and as a result the certificate must be installed on the destination before installing the encrypted file. (this seems secure but not what people would want, secret code that people can't read or decode but still has function)</li> <li>I guess it makes sense that you can't make the file entirely encrypted because it needs to be decoded to be executed on the target. Am I off on this?</li> </ul>  <p>QUESTION: When I sign code using a certificate, does the payload also get encrypted? How is this different than SSL security for a website, ensuring the security and privacy of a connection? It seems like they all use the same technology to accomplish many different tasks.</p>