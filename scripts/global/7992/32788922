<p>I'm doing an exercise in "Scala for the Impatient", Chapter 14, Q8:</p>  <p>Essentially I need to create a function (<strong>utilizing pattern matching</strong>) that takes in an operator and nodes, and it outputs the result of the operation. E.G. Node(+, Node(*, Leaf(2), Leaf(3)) Leaf(1)) should output 7.</p>  <p>Here are some of the given classes:</p>  <pre><code>sealed abstract class BinaryTree case class Leaf(value: Int) extends BinaryTree </code></pre>  <p>So I create a Node class, but I'm having difficulties figuring out how to pass in the operator.</p>  <pre><code>case class Node(op: Function (what goes here?) , leaves: BinaryTree*) extends BinaryTree </code></pre>  <p>I want to use pattern matching like so:</p>  <pre><code>  tree match {     case Node(op, leaves @ _*) =&gt; op match {       case op : Function =&gt; leaves.reduceLeft(_ op _)     }     case leaf: Leaf =&gt; leaf.value </code></pre>  <p>But the </p>  <pre><code>case op : Function =&gt; leaves.reduceLeft(_ op _) </code></pre>  <p>part is wrong. I don't know how to use the operator that's being passed in the Node class. What am I doing wrong here?</p>