<p>While programming with PHP I often find myself needing to build values (strings or numbers) with loops. For such tasks the combined operators <code>.=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code> (there are also the bitwise and the modulo one) are really helpful:</p>  <pre><code>// my real world code is far more complex // and involes mutliple calculations, of course for($i = 0; $i &lt; 10; ++$i) {   $result += $i; }  // or something like this: foreach($myStrings as $s) {   $text .= $s; } </code></pre>  <p>In PHP a variable exists as soon as it is used. Now I was wondering if I need to initialize <code>$result</code> or <code>$text</code> before using <code>.=</code> or <code>+=</code> because these operators are doing <code>$var = $var + $value</code>.</p>  <p>Of course I tried it myself before asking the question (on PHP 5.6) and it actually worked (in the example case <code>$result</code> was <code>45</code> and <code>$text</code> was the correct concatenation of <code>$myStrings</code>), only that I was getting a <code>Notice: Undefined variable</code>.</p>  <p>So I was wondering if there could go anything wrong on initializing variables like this in any PHP version?</p>  <p><strong>Disclaimer:</strong> I know that this is bad style, because one could easily initialize the variables before the loops (what I actually do in my real world code). I'm asking out of curiosity and to understand some details of PHP better!</p>