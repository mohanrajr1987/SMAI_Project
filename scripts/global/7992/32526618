<p>I have this simple example of using a functor in C++:</p>  <pre><code>#include &lt;memory&gt; #include &lt;ostream&gt; #include &lt;iostream&gt;  template &lt;typename T&gt; struct Point {     T x, y;      Point(T x, T y) : x(x), y(y){};     Point(){};      Point&lt;T&gt; operator+(const Point&lt;T&gt;&amp; other) {         this-&gt;x += other.x;         this-&gt;y += other.y;         return *this;     } };  template &lt;typename T&gt; struct AddSome {     AddSome(){};     AddSome(T* what) { add_what = (T)*what; };     AddSome(T what) : add_what(what){};     T operator()(T to_what) {         if (ptr) {             return to_what + add_what;         }         return to_what + add_what;     };     private:     std::shared_ptr&lt;T&gt; ptr;     T add_what; };  int main(int argc, char* argv[]) {     Point&lt;int&gt;* pt = new Point&lt;int&gt;(5, 6);      AddSome&lt;Point&lt;int&gt;&gt; adder5(pt);     Point&lt;int&gt; test = adder5(*pt);      std::cout &lt;&lt; test.x &lt;&lt; " " &lt;&lt; test.y &lt;&lt; std::endl;      return 0; } </code></pre>  <p>In the version above it works very well but it doesn't work at all if I delete the <strong>default constructor of the <code>Point</code> class</strong>.</p>  <p>What does the compiler need this constructor for?</p>