<p>I have a class <code>Color</code>, that has <code>friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp;, Color&amp;)</code>. It looks like this:</p>  <pre><code>struct Color {     Color(CID c, sstr s)     :color(c),     str(s)     {     }       friend sost&amp; operator&lt;&lt;(sost&amp; o, Color&amp; c)     {         o &lt;&lt; "\033[1;" &lt;&lt; c.color &lt;&lt; "m" &lt;&lt; c.str &lt;&lt; "\033[0m";         return o;     }      CID color;     sstr str; }; </code></pre>  <p>I can call the operator without any issue in all circumstances but in a templated function:</p>  <pre><code>template&lt;typename T&gt; void print_head(const T&amp; head, sost&amp; o) {     o &lt;&lt; head &lt;&lt; "\r";     o.flush();     spaces+=(headSize); } </code></pre>  <p>I invoke it with <code>print_head&lt;helper::Color&gt;(rsym, o);</code> with <code>rsym</code> being a instance of <code>Color</code>. And I get </p>  <pre><code>error: invalid operands to binary expression ('sost'   (aka 'basic_ostream&lt;char&gt;') and 'const helper::Color')             o &lt;&lt; head &lt;&lt; "\r";             ~ ^  ~~~~ note: in instantiation of function template specialization   'blk::Bouncer::print_head&lt;helper::Color&gt;' requested here                             print_head&lt;helper::Color&gt;(rsym, o); </code></pre>  <p>Whats wrong with the template function?</p>