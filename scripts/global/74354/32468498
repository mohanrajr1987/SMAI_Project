<p>I've been struggling to overcome scala and squeryl and I keep getting following exception during invocation database:</p>  <pre><code>[error] - play.core.server.netty.PlayDefaultUpstreamHandler - Cannot invoke the action java.lang.RuntimeException: java.lang.NoClassDefFoundError: Could not initialize class db.FreeWriterSchema$     at play.api.mvc.ActionBuilder$$anon$1.apply(Action.scala:498) ~[play_2.11-2.4.1.jar:2.4.1]     at play.api.mvc.Action$$anonfun$apply$1$$anonfun$apply$4$$anonfun$apply$5.apply(Action.scala:105) ~[play_2.11-2.4.1.jar:2.4.1]     at play.api.mvc.Action$$anonfun$apply$1$$anonfun$apply$4$$anonfun$apply$5.apply(Action.scala:105) ~[play_2.11-2.4.1.jar:2.4.1]     at play.utils.Threads$.withContextClassLoader(Threads.scala:21) ~[play_2.11-2.4.1.jar:2.4.1]     at play.api.mvc.Action$$anonfun$apply$1$$anonfun$apply$4.apply(Action.scala:104) ~[play_2.11-2.4.1.jar:2.4.1]     at play.api.mvc.Action$$anonfun$apply$1$$anonfun$apply$4.apply(Action.scala:103) ~[play_2.11-2.4.1.jar:2.4.1]     at scala.Option.map(Option.scala:146) ~[scala-library-2.11.6.jar:na]     at play.api.mvc.Action$$anonfun$apply$1.apply(Action.scala:103) ~[play_2.11-2.4.1.jar:2.4.1]     at play.api.mvc.Action$$anonfun$apply$1.apply(Action.scala:96) ~[play_2.11-2.4.1.jar:2.4.1]     at play.api.libs.iteratee.Iteratee$$anonfun$mapM$1.apply(Iteratee.scala:524) ~[play-iteratees_2.11-2.4.1.jar:2.4.1]     at play.api.libs.iteratee.Iteratee$$anonfun$mapM$1.apply(Iteratee.scala:524) ~[play-iteratees_2.11-2.4.1.jar:2.4.1]     at play.api.libs.iteratee.Iteratee$$anonfun$flatMapM$1.apply(Iteratee.scala:560) ~[play-iteratees_2.11-2.4.1.jar:2.4.1]     at play.api.libs.iteratee.Iteratee$$anonfun$flatMapM$1.apply(Iteratee.scala:560) ~[play-iteratees_2.11-2.4.1.jar:2.4.1]     at play.api.libs.iteratee.Iteratee$$anonfun$flatMap$1$$anonfun$apply$14.apply(Iteratee.scala:537) ~[play-iteratees_2.11-2.4.1.jar:2.4.1]     at play.api.libs.iteratee.Iteratee$$anonfun$flatMap$1$$anonfun$apply$14.apply(Iteratee.scala:537) ~[play-iteratees_2.11-2.4.1.jar:2.4.1]     at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) ~[scala-library-2.11.6.jar:na]     at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24) ~[scala-library-2.11.6.jar:na]     at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) [akka-actor_2.11-2.3.11.jar:na]     at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [akka-actor_2.11-2.3.11.jar:na]     at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [scala-library-2.11.6.jar:na]     at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [scala-library-2.11.6.jar:na]     at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [scala-library-2.11.6.jar:na]     at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [scala-library-2.11.6.jar:na] Caused by: java.lang.NoClassDefFoundError: Could not initialize class db.FreeWriterSchema$     at db.UserService$$anonfun$get$1.apply(UserService.scala:21) ~[classes/:na]     at db.UserService$$anonfun$get$1.apply(UserService.scala:24) ~[classes/:na]     at org.squeryl.dsl.QueryDsl$class._using(QueryDsl.scala:45) ~[squeryl_2.11-0.9.5-7.jar:0.9.5-7]     at org.squeryl.dsl.QueryDsl$class._executeTransactionWithin(QueryDsl.scala:115) ~[squeryl_2.11-0.9.5-7.jar:0.9.5-7]     at org.squeryl.dsl.QueryDsl$class.transaction(QueryDsl.scala:78) ~[squeryl_2.11-0.9.5-7.jar:0.9.5-7]     at org.squeryl.PrimitiveTypeMode$.transaction(PrimitiveTypeMode.scala:40) ~[squeryl_2.11-0.9.5-7.jar:0.9.5-7]     at db.UserService$.get(UserService.scala:20) ~[classes/:na]     at controllers.Users$$anonfun$login$1$$anonfun$apply$2.apply(Users.scala:24) ~[classes/:2.4.1]     at controllers.Users$$anonfun$login$1$$anonfun$apply$2.apply(Users.scala:22) ~[classes/:2.4.1]     at play.api.libs.json.JsResult$class.fold(JsResult.scala:72) ~[play-json_2.11-2.4.1.jar:2.4.1]     at play.api.libs.json.JsSuccess.fold(JsResult.scala:9) ~[play-json_2.11-2.4.1.jar:2.4.1]     at controllers.Users$$anonfun$login$1.apply(Users.scala:16) ~[classes/:2.4.1]     at controllers.Users$$anonfun$login$1.apply(Users.scala:15) ~[classes/:2.4.1]     at play.api.mvc.ActionBuilder$$anonfun$apply$16.apply(Action.scala:408) ~[play_2.11-2.4.1.jar:2.4.1]     at play.api.mvc.ActionBuilder$$anonfun$apply$16.apply(Action.scala:407) ~[play_2.11-2.4.1.jar:2.4.1]     at play.api.mvc.Action$.invokeBlock(Action.scala:533) ~[play_2.11-2.4.1.jar:2.4.1]     at play.api.mvc.Action$.invokeBlock(Action.scala:530) ~[play_2.11-2.4.1.jar:2.4.1]     at play.api.mvc.ActionBuilder$$anon$1.apply(Action.scala:493) ~[play_2.11-2.4.1.jar:2.4.1]     ... 22 common frames omitted [error] - application -   ! @6nd3c46bb - Internal server error, for (POST) [/login] -&gt;  play.api.http.HttpErrorHandlerExceptions$$anon$1: Execution exception[[RuntimeException: java.lang.NoClassDefFoundError: Could not initialize class db.FreeWriterSchema$]]     at play.api.http.HttpErrorHandlerExceptions$.throwableToUsefulException(HttpErrorHandler.scala:265) ~[play_2.11-2.4.1.jar:2.4.1]     at play.api.http.DefaultHttpErrorHandler.onServerError(HttpErrorHandler.scala:191) ~[play_2.11-2.4.1.jar:2.4.1]     at play.api.GlobalSettings$class.onError(GlobalSettings.scala:179) [play_2.11-2.4.1.jar:2.4.1]     at Global$.onError(Global.scala:6) [classes/:na]     at play.api.http.GlobalSettingsHttpErrorHandler.onServerError(HttpErrorHandler.scala:94) [play_2.11-2.4.1.jar:2.4.1]     at play.core.server.netty.PlayDefaultUpstreamHandler$$anonfun$3.applyOrElse(PlayDefaultUpstreamHandler.scala:273) [play-netty-server_2.11-2.4.1.jar:2.4.1]     at play.core.server.netty.PlayDefaultUpstreamHandler$$anonfun$3.applyOrElse(PlayDefaultUpstreamHandler.scala:269) [play-netty-server_2.11-2.4.1.jar:2.4.1]     at scala.concurrent.Future$$anonfun$recoverWith$1.apply(Future.scala:344) [scala-library-2.11.6.jar:na]     at scala.concurrent.Future$$anonfun$recoverWith$1.apply(Future.scala:343) [scala-library-2.11.6.jar:na]     at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:32) [scala-library-2.11.6.jar:na]     at play.api.libs.iteratee.Execution$trampoline$.executeScheduled(Execution.scala:109) [play-iteratees_2.11-2.4.1.jar:2.4.1]     at play.api.libs.iteratee.Execution$trampoline$.execute(Execution.scala:71) [play-iteratees_2.11-2.4.1.jar:2.4.1]     at scala.concurrent.impl.CallbackRunnable.executeWithValue(Promise.scala:40) [scala-library-2.11.6.jar:na]     at scala.concurrent.impl.Promise$DefaultPromise.tryComplete(Promise.scala:248) [scala-library-2.11.6.jar:na]     at scala.concurrent.Promise$class.complete(Promise.scala:55) [scala-library-2.11.6.jar:na]     at scala.concurrent.impl.Promise$DefaultPromise.complete(Promise.scala:153) [scala-library-2.11.6.jar:na]     at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:23) [scala-library-2.11.6.jar:na]     at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) [akka-actor_2.11-2.3.11.jar:na]     at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [akka-actor_2.11-2.3.11.jar:na]     at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [scala-library-2.11.6.jar:na]     at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [scala-library-2.11.6.jar:na]     at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [scala-library-2.11.6.jar:na]     at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [scala-library-2.11.6.jar:na] Caused by: java.lang.RuntimeException: java.lang.NoClassDefFoundError: Could not initialize class db.FreeWriterSchema$     at play.api.mvc.ActionBuilder$$anon$1.apply(Action.scala:498) ~[play_2.11-2.4.1.jar:2.4.1]     at play.api.mvc.Action$$anonfun$apply$1$$anonfun$apply$4$$anonfun$apply$5.apply(Action.scala:105) ~[play_2.11-2.4.1.jar:2.4.1]     at play.api.mvc.Action$$anonfun$apply$1$$anonfun$apply$4$$anonfun$apply$5.apply(Action.scala:105) ~[play_2.11-2.4.1.jar:2.4.1]     at play.utils.Threads$.withContextClassLoader(Threads.scala:21) ~[play_2.11-2.4.1.jar:2.4.1]     at play.api.mvc.Action$$anonfun$apply$1$$anonfun$apply$4.apply(Action.scala:104) ~[play_2.11-2.4.1.jar:2.4.1]     at play.api.mvc.Action$$anonfun$apply$1$$anonfun$apply$4.apply(Action.scala:103) ~[play_2.11-2.4.1.jar:2.4.1]     at scala.Option.map(Option.scala:146) ~[scala-library-2.11.6.jar:na]     at play.api.mvc.Action$$anonfun$apply$1.apply(Action.scala:103) ~[play_2.11-2.4.1.jar:2.4.1]     at play.api.mvc.Action$$anonfun$apply$1.apply(Action.scala:96) ~[play_2.11-2.4.1.jar:2.4.1]     at play.api.libs.iteratee.Iteratee$$anonfun$mapM$1.apply(Iteratee.scala:524) ~[play-iteratees_2.11-2.4.1.jar:2.4.1]     at play.api.libs.iteratee.Iteratee$$anonfun$mapM$1.apply(Iteratee.scala:524) ~[play-iteratees_2.11-2.4.1.jar:2.4.1]     at play.api.libs.iteratee.Iteratee$$anonfun$flatMapM$1.apply(Iteratee.scala:560) ~[play-iteratees_2.11-2.4.1.jar:2.4.1]     at play.api.libs.iteratee.Iteratee$$anonfun$flatMapM$1.apply(Iteratee.scala:560) ~[play-iteratees_2.11-2.4.1.jar:2.4.1]     at play.api.libs.iteratee.Iteratee$$anonfun$flatMap$1$$anonfun$apply$14.apply(Iteratee.scala:537) ~[play-iteratees_2.11-2.4.1.jar:2.4.1]     at play.api.libs.iteratee.Iteratee$$anonfun$flatMap$1$$anonfun$apply$14.apply(Iteratee.scala:537) ~[play-iteratees_2.11-2.4.1.jar:2.4.1]     at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) [scala-library-2.11.6.jar:na]     at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24) [scala-library-2.11.6.jar:na]     ... 6 common frames omitted Caused by: java.lang.NoClassDefFoundError: Could not initialize class db.FreeWriterSchema$     at db.UserService$$anonfun$get$1.apply(UserService.scala:21) ~[classes/:na]     at db.UserService$$anonfun$get$1.apply(UserService.scala:24) ~[classes/:na]     at org.squeryl.dsl.QueryDsl$class._using(QueryDsl.scala:45) ~[squeryl_2.11-0.9.5-7.jar:0.9.5-7]     at org.squeryl.dsl.QueryDsl$class._executeTransactionWithin(QueryDsl.scala:115) ~[squeryl_2.11-0.9.5-7.jar:0.9.5-7]     at org.squeryl.dsl.QueryDsl$class.transaction(QueryDsl.scala:78) ~[squeryl_2.11-0.9.5-7.jar:0.9.5-7]     at org.squeryl.PrimitiveTypeMode$.transaction(PrimitiveTypeMode.scala:40) ~[squeryl_2.11-0.9.5-7.jar:0.9.5-7]     at db.UserService$.get(UserService.scala:20) ~[classes/:na]     at controllers.Users$$anonfun$login$1$$anonfun$apply$2.apply(Users.scala:24) ~[classes/:2.4.1]     at controllers.Users$$anonfun$login$1$$anonfun$apply$2.apply(Users.scala:22) ~[classes/:2.4.1]     at play.api.libs.json.JsResult$class.fold(JsResult.scala:72) ~[play-json_2.11-2.4.1.jar:2.4.1]     at play.api.libs.json.JsSuccess.fold(JsResult.scala:9) ~[play-json_2.11-2.4.1.jar:2.4.1]     at controllers.Users$$anonfun$login$1.apply(Users.scala:16) ~[classes/:2.4.1]     at controllers.Users$$anonfun$login$1.apply(Users.scala:15) ~[classes/:2.4.1]     at play.api.mvc.ActionBuilder$$anonfun$apply$16.apply(Action.scala:408) ~[play_2.11-2.4.1.jar:2.4.1]     at play.api.mvc.ActionBuilder$$anonfun$apply$16.apply(Action.scala:407) ~[play_2.11-2.4.1.jar:2.4.1]     at play.api.mvc.Action$.invokeBlock(Action.scala:533) ~[play_2.11-2.4.1.jar:2.4.1]     at play.api.mvc.Action$.invokeBlock(Action.scala:530) ~[play_2.11-2.4.1.jar:2.4.1]     at play.api.mvc.ActionBuilder$$anon$1.apply(Action.scala:493) ~[play_2.11-2.4.1.jar:2.4.1]     ... 22 common frames omitted </code></pre>  <p>Here are classes I use: Users.scala (controller)</p>  <pre><code>package controllers  import db.UserService import models.{UserDTO, User} import play.api.libs.json.{JsError, Json} import play.api.mvc.Action  class Users extends BaseController {     def login = Action(parse.json) { request =&gt;         request.body.validate[UserDTO].fold({ errors =&gt;             BadRequest(Json.obj(                 "status" -&gt; "Error",                 "message" -&gt; "Bad JSON",                 "details" -&gt; JsError.toJson(errors)             ))         }, { userDto =&gt;             val userDB: User = new User(0, "", userDto.email, userDto.password, "")             val storedUser = UserService.get(userDB)              storedUser.fold(NotFound(""))((user: User) =&gt;                 Ok(Json.toJson(user))             )         })      }  } </code></pre>  <p>UserService.scala</p>  <pre><code>package db  import db.FreeWriterSchema.userTable import models.User import org.squeryl.PrimitiveTypeMode._  object UserService {     def create(user: User) = transaction {         userTable.insert(user)     }      def isExist(email: String): Boolean = transaction {         userTable.where(             u =&gt;                 u.email === email         ).headOption.exists(u=&gt;true)     }       def get(user: User) = transaction {         userTable.where(             u =&gt;                 u.email === user.email and u.password === user.password         ).headOption     }       def users: List[User] = transaction {         from(userTable) {             user =&gt; select(user)         }.toList     }  } </code></pre>  <p>FreeWriterSchema.scala</p>  <pre><code>package db  import models.User import org.squeryl.{Table, Schema} import org.squeryl.customtypes._  object FreeWriterSchema extends Schema with CustomTypesMode{      val userTable: Table[User] = table[User]      on(userTable) { u =&gt; declare {         u.id is autoIncremented     }} } </code></pre>  <p>UserDTO.scala</p>  <pre><code>package models  import play.api.libs.functional.syntax._ import play.api.libs.json._  case class UserDTO(id: Option[Long],                 name: Option[String],                 email: String,                 password: String,                 userType: Option[String])  object UserDTO {      implicit val reader = (         (__ \ 'id ).readNullable[Long] ~         (__ \ 'name ).readNullable[String] ~             (__ \ 'email ).read[String] ~             (__ \ 'password ).read[String] ~             (__ \ 'userType).readNullable[String]         ) (UserDTO.apply _)       implicit val writesUser: Writes[UserDTO] = new Writes[UserDTO] {         def writes(user: UserDTO): JsValue = {             Json.obj(                 "id" -&gt; user.id,                 "name" -&gt; user.name,                 "email" -&gt; user.email,                 "userType" -&gt; user.userType             )         }     } } </code></pre>  <p>User.scala</p>  <pre><code>package models  import org.squeryl.KeyedEntity import org.squeryl.annotations.Column import play.api.libs.json.{Json, Writes, JsValue}  case class User(id: Long,                    name: String,                    email: String,                    password: String,                    @Column("user_type") userType: String) extends KeyedEntity[Long] { }  object User {     implicit val writesUser: Writes[User] = new Writes[User] {         def writes(user: User): JsValue = {             Json.obj(                 "id" -&gt; user.id,                 "name" -&gt; user.name,                 "email" -&gt; user.email,                 "userType" -&gt; user.userType             )         }     } } </code></pre>  <p>The exception is like Chinese ABC for me - can't get any clue on what I do wrong :( help!!!</p>