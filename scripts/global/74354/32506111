<p>I have some user uploaded images that I'm storing as byte[ ] on a heroku Postgres db. I'm trying to download an image as a jpeg through an http response similar to something below. </p>  <pre><code>ImageModel image = ImageModel.getImage(imageID); response().setContentType("image/jpeg"); response().setHeader("Content-disposition","attachment; filename=image.jpeg"); return ok(image.imageByteArray); </code></pre>  <p>When I try to return it I get a null pointer exception. I'm using Ebean to save and load my ImageModel. When I put the model into a JsonNode and return that I can see the data for that byte[]. </p>  <pre><code>"id":1,"imageByteArray":"","processedImage":null} </code></pre>  <p>However, if I try to reference the byte[] directly from the model I get the null pointer exception. I'm a bit of a Play noob so I'm not sure what is going on. Any help would be greatly appreciated. </p>  <pre><code>[error] - application - Exception java.lang.NullPointerException: null at java.io.ByteArrayInputStream.&lt;init&gt;(ByteArrayInputStream.java:106) ~[na:1.8.0_51] at controllers.Application.requestImageFile(Application.java:95) ~[classes/:2.4.2] at router.Routes$$anonfun$routes$1$$anonfun$applyOrElse$4$$anonfun$apply$4.apply(Routes.scala:208) [classes/:na] at router.Routes$$anonfun$routes$1$$anonfun$applyOrElse$4$$anonfun$apply$4.apply(Routes.scala:208) [classes/:na] at play.core.routing.HandlerInvokerFactory$$anon$4.resultCall(HandlerInvoker.scala:136) [play_2.11-2.4.2.jar:2.4.2] at play.core.routing.HandlerInvokerFactory$JavaActionInvokerFactory$$anon$14$$anon$3$$anon$1.invocation(HandlerInvoker.scala:127) [play_2.11-2.4.2.jar:2.4.2] at play.core.j.JavaAction$$anon$1.call(JavaAction.scala:70) [play_2.11-2.4.2.jar:2.4.2] at play.http.DefaultHttpRequestHandler$1.call(DefaultHttpRequestHandler.java:20) [play_2.11-2.4.2.jar:2.4.2] at play.core.j.JavaAction$$anonfun$7.apply(JavaAction.scala:94) [play_2.11-2.4.2.jar:2.4.2] at play.core.j.JavaAction$$anonfun$7.apply(JavaAction.scala:94) [play_2.11-2.4.2.jar:2.4.2] at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) [scala-library-2.11.6.jar:na] at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24) [scala-library-2.11.6.jar:na] at play.core.j.HttpExecutionContext$$anon$2.run(HttpExecutionContext.scala:40) [play_2.11-2.4.2.jar:2.4.2] at play.api.libs.iteratee.Execution$trampoline$.execute(Execution.scala:70) [play-iteratees_2.11-2.4.2.jar:2.4.2] at play.core.j.HttpExecutionContext.execute(HttpExecutionContext.scala:32) [play_2.11-2.4.2.jar:2.4.2] at scala.concurrent.impl.Future$.apply(Future.scala:31) [scala-library-2.11.6.jar:na] at scala.concurrent.Future$.apply(Future.scala:492) [scala-library-2.11.6.jar:na] at play.core.j.JavaAction.apply(JavaAction.scala:94) [play_2.11-2.4.2.jar:2.4.2] at play.api.mvc.Action$$anonfun$apply$1$$anonfun$apply$4$$anonfun$apply$5.apply(Action.scala:105) [play_2.11-2.4.2.jar:2.4.2] at play.api.mvc.Action$$anonfun$apply$1$$anonfun$apply$4$$anonfun$apply$5.apply(Action.scala:105) [play_2.11-2.4.2.jar:2.4.2] at play.utils.Threads$.withContextClassLoader(Threads.scala:21) [play_2.11-2.4.2.jar:2.4.2] at play.api.mvc.Action$$anonfun$apply$1$$anonfun$apply$4.apply(Action.scala:104) [play_2.11-2.4.2.jar:2.4.2] at play.api.mvc.Action$$anonfun$apply$1$$anonfun$apply$4.apply(Action.scala:103) [play_2.11-2.4.2.jar:2.4.2] at scala.Option.map(Option.scala:146) [scala-library-2.11.6.jar:na] at play.api.mvc.Action$$anonfun$apply$1.apply(Action.scala:103) [play_2.11-2.4.2.jar:2.4.2] at play.api.mvc.Action$$anonfun$apply$1.apply(Action.scala:96) [play_2.11-2.4.2.jar:2.4.2] at play.api.libs.iteratee.Iteratee$$anonfun$mapM$1.apply(Iteratee.scala:524) [play-iteratees_2.11-2.4.2.jar:2.4.2] at play.api.libs.iteratee.Iteratee$$anonfun$mapM$1.apply(Iteratee.scala:524) [play-iteratees_2.11-2.4.2.jar:2.4.2] at play.api.libs.iteratee.Iteratee$$anonfun$flatMapM$1.apply(Iteratee.scala:560) [play-iteratees_2.11-2.4.2.jar:2.4.2] at play.api.libs.iteratee.Iteratee$$anonfun$flatMapM$1.apply(Iteratee.scala:560) [play-iteratees_2.11-2.4.2.jar:2.4.2] at play.api.libs.iteratee.Iteratee$$anonfun$flatMap$1$$anonfun$apply$13.apply(Iteratee.scala:536) [play-iteratees_2.11-2.4.2.jar:2.4.2] at play.api.libs.iteratee.Iteratee$$anonfun$flatMap$1$$anonfun$apply$13.apply(Iteratee.scala:536) [play-iteratees_2.11-2.4.2.jar:2.4.2] at scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24) [scala-library-2.11.6.jar:na] at scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24) [scala-library-2.11.6.jar:na] at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40) [akka-actor_2.11-2.3.11.jar:na] at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:397) [akka-actor_2.11-2.3.11.jar:na] at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260) [scala-library-2.11.6.jar:na] at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339) [scala-library-2.11.6.jar:na] at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979) [scala-library-2.11.6.jar:na] at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107) [scala-library-2.11.6.jar:na] </code></pre>