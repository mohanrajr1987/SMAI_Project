<p>I'm having trouble in Scala Play to connect <code>Conncurrent.broadcast</code> with <code>EventSource()</code> to create working SSE chat. </p>  <p>This code below is not working. All I see are debug messages when users are connecting to feed and that's all. No data is being sent down to browsers. And I'm sure data is send successfully to server and pushed to chatChannel. What's wrong? How can I debug this? </p>  <pre><code>val (chatOut, chatChannel) = Concurrent.broadcast[JsValue]  def postMessage = Action(parse.json) { req =&gt;   chatChannel.push(req.body)   Ok }  def chatFeed = Action { req =&gt;   println("User connected to chat: " + req.remoteAddress)   Ok.chunked(chatOut     &amp;&gt; EventSource()   ).as("text/event-stream") } </code></pre>  <p>This simple debugging code below is working, and I see data sent from browser, through <code>chatChannel</code>, in console, so this side is working fine. </p>  <pre><code>val (chatOut, chatChannel) = Concurrent.broadcast[JsValue] val chatDebug = Iteratee.foreach[JsValue](m =&gt; println("Debug: " + m.toString)) chatOut |&gt;&gt;&gt; chatDebug  def postMessage = Action(parse.json) { req =&gt;   chatChannel.push(req.body)   Ok } </code></pre>  <p>And this is working as well, and I see random strings being send to browser. So JS part is also OK. </p>  <pre><code>def chatFeed = Action { req =&gt;   val producer = Enumerator.generateM[String](Promise.timeout(Some(Random.nextString(5)),3 second))   Ok.chunked(producer &amp;&gt; EventSource()).as("text/event-stream") } </code></pre>  <p>And somehow when I connect this two parts, messages are not broadcasted to browser.</p>