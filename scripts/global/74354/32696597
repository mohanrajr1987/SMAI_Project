<p>I have a class Person and class Employee. Class Employee extends class Person. </p>  <p>My current implicit writes to convert classes to JSON looks like this:</p>  <pre><code>implicit val implicitPersonWrites = new Writes[Person] {   def writes(v: Person): JsValue = {     Json.obj("label" -&gt; v.label, "age" -&gt; v.age)   } }  implicit val implicitEmployeeWrites = new Writes[Employee] {   def writes(v: Employee): JsValue = {     Json.obj("label" -&gt; v.label, "age" -&gt; v.age, "company" -&gt; v.company)   } } </code></pre>  <p>The problem is that even my object is of type Employee, implicit write for Person superclass is always used. So at the end the fields specific to Employee class are not present in the output. How to make implicit writes properly in case of inheritance?</p>