<p>I have a web application in Scala/Play with Cassandra as the database. I ran into following issue while testing for potential errors.</p>  <p>Below are the components of my project</p>  <ol> <li><p>Application.scala -> Basic controller</p></li> <li><p>Model.scala -> Holds the     business logic</p></li> <li><p>CassandraClient.scala -> Logic to connect to     cassandra and run query on cassandra</p></li> </ol>  <p>CassandraClient.scala looks like below</p>  <pre><code>object CassandraClient {  private val cluster = Cluster.builder()     .withLoadBalancingPolicy(       new WhiteListPolicy(new RoundRobinPolicy(), nodes))     .withSocketOptions(socketOptions)     .addContactPointsWithPorts(nodes)     .withCredentials(CASSANDRA_USERNAME, CASSANDRA_PWD).build() }   private val session = cluster.connect()  def getValueFromCassandraTable(token:String) = {  var query = QueryBuilder.select.all()...  seesion.execute(query) } </code></pre>  <p>The Cassandra connection is first established when i call getValueFromCassandraTable the first time. And since CassandraClient is an Object, the logic to connect to Cassandra only gets called once.</p>  <p>Model.Scala has some code to handle future returned by session.execute.</p>  <p>For eg: Look at sample code below in Model.scala.</p>  <pre><code>    def getTitles(titles: String)(implicit ctxt: ExecutionContext): Future[List[&lt;Sometype&gt;]] = {         try{             CassandraClient.getValueFromCassandraTable(token).toScalaFuture.map { rows =&gt;                   rows.map(row =&gt; row("value").toList                 }.recover { case e: Exception =&gt;List()}               }         } catch{case e:Exception =&gt;             Logger.info("THIS DOES NOT EXECUTE??")            Future{List()}}     } </code></pre>  <p>Now when the above sample code gets executed the first time, session.execute(), gets executed. And then getValueFromCassandraTable is executed. So i thought that the flow of execution is  Code snippet above in Models.scala -> session.execute() -> getValueFromCassandraTable()</p>  <p>So, if session.execute fails, i should be able to capture it in try catch exception block. But to my surprise catch block is not executed when session.execute fails. Instead play framework throws an exception. Can someone explain this behavior.</p>  <p>Exception Stack</p>  <pre><code>Caused by: java.lang.RuntimeException: java.lang.ExceptionInInitializerError     at play.api.mvc.ActionBuilder$$anon$1.apply(Action.scala:498) ~[play_2.10-2.4.2.jar:2.4.2]     at play.api.mvc.Action$$anonfun$apply$1$$anonfun$apply$4$$anonfun$apply$5.apply(Action.scala:105) ~[play_2.10-2.4.2.jar:2.4.2]     at play.api.mvc.Action$$anonfun$apply$1$$anonfun$apply$4$$anonfun$apply$5.apply(Action.scala:105) ~[play_2.10-2.4.2.jar:2.4.2]     at play.utils.Threads$.withContextClassLoader(Threads.scala:21) ~[play_2.10-2.4.2.jar:2.4.2]     at play.api.mvc.Action$$anonfun$apply$1$$anonfun$apply$4.apply(Action.scala:104) ~[play_2.10-2.4.2.jar:2.4.2]     at play.api.mvc.Action$$anonfun$apply$1$$anonfun$apply$4.apply(Action.scala:103) ~[play_2.10-2.4.2.jar:2.4.2]     at scala.Option.map(Option.scala:145) ~[scala-library-2.10.5.jar:na]     at play.api.mvc.Action$$anonfun$apply$1.apply(Action.scala:103) ~[play_2.10-2.4.2.jar:2.4.2]     at play.api.mvc.Action$$anonfun$apply$1.apply(Action.scala:96) ~[play_2.10-2.4.2.jar:2.4.2]     at play.api.libs.iteratee.DoneIteratee$$anonfun$mapM$2.apply(Iteratee.scala:741) ~[play-iteratees_2.10-2.4.2.jar:2.4.2] Caused by: java.lang.ExceptionInInitializerError: null     at models.Model$.getTitles(Model.scala:121) ~[classes/:na]     at models.Model$.getMatchingTitles(Model.scala:48) ~[classes/:na]     at models.Model$.getMatchingTitles(Model.scala:56) ~[classes/:na]     at controllers.Application$$anonfun$searchTitle$1.apply(Application.scala:15) ~[classes/:na]     at controllers.Application$$anonfun$searchTitle$1.apply(Application.scala:15) ~[classes/:na]     at play.api.mvc.ActionBuilder$$anonfun$async$1.apply(Action.scala:456) ~[play_2.10-2.4.2.jar:2.4.2]     at play.api.mvc.ActionBuilder$$anonfun$async$1.apply(Action.scala:456) ~[play_2.10-2.4.2.jar:2.4.2]     at play.api.mvc.Action$.invokeBlock(Action.scala:533) ~[play_2.10-2.4.2.jar:2.4.2]     at play.api.mvc.Action$.invokeBlock(Action.scala:530) ~[play_2.10-2.4.2.jar:2.4.2]     at play.api.mvc.ActionBuilder$$anon$1.apply(Action.scala:493) ~[play_2.10-2.4.2.jar:2.4.2] Caused by: com.datastax.driver.core.exceptions.AuthenticationException: Authentication error on host /10.65.5.44:9042: Username and/or password are incorrect     at com.datastax.driver.core.Connection$8.apply(Connection.java:368) ~[cassandra-driver-core-2.1.6.jar:na]     at com.datastax.driver.core.Connection$8.apply(Connection.java:338) ~[cassandra-driver-core-2.1.6.jar:na]     at com.google.common.util.concurrent.Futures$ChainingListenableFuture.run(Futures.java:861) ~[guava-16.0.1.jar:na]     at com.google.common.util.concurrent.MoreExecutors$SameThreadExecutorService.execute(MoreExecutors.java:297) ~[guava-16.0.1.jar:na]     at com.google.common.util.concurrent.ExecutionList.executeListener(ExecutionList.java:156) ~[guava-16.0.1.jar:na]     at com.google.common.util.concurrent.ExecutionList.execute(ExecutionList.java:145) ~[guava-16.0.1.jar:na]     at com.google.common.util.concurrent.AbstractFuture.set(AbstractFuture.java:185) ~[guava-16.0.1.jar:na]     at com.datastax.driver.core.Connection$Future.onSet(Connection.java:1170) ~[cassandra-driver-core-2.1.6.jar:na]     at com.datastax.driver.core.Connection$Dispatcher.channelRead0(Connection.java:1000) ~[cassandra-driver-core-2.1.6.jar:na]     at com.datastax.driver.core.Connection$Dispatcher.channelRead0(Connection.java:922) ~[cassandra-driver-core-2.1.6.jar:na] </code></pre>  <p>Lin# 121 in Modle.scala is the one which calls CassandrClient.getValueFromCassandraTable.  I am mimicking the exception by passing a wrong password connecting to cassandra, hence getting AuthroizationException. I expect this exception to be caught in Try catch. But it is not caught. </p>  <p>(Note that this is has nothing to do with Future, as session.executAysnc is not even called when the exception occurs. So futures have yet not come into play.)</p>  <p>--EDIT--</p>  <p>Looks like Play is swallowing Exception and throwing an Error object. Not sure why is that happening.</p>