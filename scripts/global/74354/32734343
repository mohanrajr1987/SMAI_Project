<p>I'm using Play2+Scala+ReactiveMongo to build a web application. Since <code>mongodb</code> doesn't require all documents to have the same structure, I make a large use of case classes with <code>Options</code> as parameters to implement models. For example:</p>  <pre><code>case class PersonInfo(address: Option[String],                       telephone: Option[String],                       age: Option[Int],                       job: Option[String]) case class Person(id: UUID, name: String, info: PersonInfo) </code></pre>  <p>Now suppose I want to merge two <code>PersonInfo</code> objects, for example in a update function. I do right now is:</p>  <pre><code>val updPInfo = old.copy(address = new.address orElse address,                         telephone = new.telephone orElse telephone,                         age = new.age orElse age,                         job = new.job orElse job) </code></pre>  <p>This way I have an object that has new values where they were specified by the <code>new</code> object and old values for the remaining ones.</p>  <p>This actually works fine, but it is bit ugly to see when the list of parameters grows.</p>  <p>Is there a more elegant way to do that?</p>