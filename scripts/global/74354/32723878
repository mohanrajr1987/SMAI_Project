<p>I have a case class as follows: </p>  <pre><code>case class TKAuthenticatedRequest[A](optUser: Option[TKUser], request: Request[A], tkMenuLiteral: TKMenuLiteral = TKSiteMenuConstants.HOME) extends WrappedRequest[A](request) with TKLog {} </code></pre>  <p>There is of course lots of guts to the class but I don't believe that is relevant to the problem at hand. There is not a copy method override not interesting enough can I create an alternate copy method inside the class as the same compile error (below) shows up. </p>  <p>Now I'm trying to implement an <code>ActionRefiner</code> as follows:</p>  <pre><code>def TKMenuDefined(xkMenuLiteral: TKMenuLiteral) =  new ActionRefiner[TKAuthenticatedRequest, TKAuthenticatedRequest] {   def refine[A](input: TKAuthenticatedRequest[A]) = Future.successful {  // Right(input)     Right(input.copy(tkMenuLiteral = xkMenuLiteral))  // Right(new TKAuthenticatedRequest(input.optUser, input.request, xkMenuLiteral))   } } </code></pre>  <p>The first commented out line compiles (but of course does nothing) </p>  <p>The uncommented line does NOT compile </p>  <p>The third Right (second commented line also compiles and works but has the overhead of creating yet another object (needlessly). </p>  <p>The compiler error is as follows: </p>  <pre><code>not found: value tkMenuLiteral [error]       Right(input.copy(tkMenuLiteral = xkMenuLiteral)) </code></pre>  <p><code>tkMenuLiteral</code> is NOT a value it is a field in the case class </p>  <p>I renamed the value as <code>xkMenuLiteral</code> just to explicitly avoid any name collision problems. </p>  <p>Amusingly if I rewrite the current work-around as:</p>  <pre><code>Right(new TKAuthenticatedRequest(input.optUser, input.request, tkMenuLiteral = xkMenuLiteral)) </code></pre>  <p>It too compiles (and works) </p>  <p>So I'm pretty much at a loss as to what to do next to figure out this problem...</p>  <p>Yes in a perfect world I'd instantiate the original object with all the fields properly populated but I can't seem to figure out the correct way to pass anything through to an <code>ActionBuilder</code> (that wouldn't end up being messier than simply adding an <code>ActionRefiner</code> IF copy actually worked)</p>