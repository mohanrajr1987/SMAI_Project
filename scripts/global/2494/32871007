<p>I ran into a surprise today, we are working on a application in C# that connects to a mysql database. Everything worked fine until today when we migrated some stuff from one server to another. Now, some data are missing in the database and the Stored Procedures were expected to return null values because of it. Unfortunately instead of null values for integers we get integer values of 0.</p>  <p>For simplicity lets say that I have the following stored procedure in our MySql Server:</p>  <pre><code>CREATE DEFINER=`root`@`localhost` PROCEDURE `get_config_code`( IN order_n BIGINT, IN order_position_n INT, OUT out_config_code BIGINT) BEGIN     set out_config_code = null; END </code></pre>  <p>then I call the stored procedure through MySqlConnector .net by creating a MySqlCommand instance adding the parameters to it. Then the stored procedure is called in a very straightforward way as follows:</p>  <pre><code>mReader = mCommand.ExecuteReader(); if ((mReader != null) &amp;&amp; (mReader .HasRows)) {     mReader .Close(); } </code></pre>  <p>then I try to check if the parameter is Null like this:</p>  <pre><code>if (mCommand.Parameters[param_id].Value != System.DBNull.Value) </code></pre>  <p>unfortunately despite the stored procedure explicitly setting the output parameter to null, the parameter is non null, and it is of type Int64 and has a value of 0 (checked it through the debugger)</p>  <p>The code works perfectly if data is actually there, and I get the correct integer value. My best guess is that it is not very easy to have a null "integer value" in c# as it is a non-nullable type... but I expected the parameter to be of type System.DBNull anyway, even for non-nullable types (it works perfectly for strings)</p>  <p>What am I missing?</p>  <p>Thanks in advance for any help</p>