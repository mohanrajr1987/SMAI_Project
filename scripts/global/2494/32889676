<p>I have a blog model and a blog comment model. The blog has a collection of blog comments associated with it however when I'm getting all my blogs so that I can list them out on some sort of summary page, I don't want to be pulling all the comments as well, I only need the comments when I select a specific blog and go to it's page. However, I do want the count of the comments to be displayed on the summary section.</p>  <p>I've created a stored procedure for retrieving the blogs which doesn't return any comments but does return a value for the count of the comments associated with the blog.</p>  <p>When selecting a specific blog, I will simply let EF grab it for me rather than using a stored procedure.</p>  <p>The problem I'm having is that I don't want the comment count to be a column in the blog table so initially I thought I should ignore it in the OnModelCreating method using fluent api. However, this means that when I run my stored procedure, it does not return the value which my stored procedure should be giving me.</p>  <p>Blog Class:</p>  <pre><code>public class Blog {     public Guid BlogGuid { get; set; }     public string Title { get; set; }     public string Text { get; set; }     public string Author { get; set; }     public DateTime DatePosted { get; set; }     public IList&lt;BlogComment&gt; Comments { get; set; }     public int CommentCount { get; set; }      public Blog()     {         Comments = new List&lt;BlogComment&gt;();     } } </code></pre>  <p>Blog Comment Class:</p>  <pre><code>public class BlogComment {     public Guid BlogCommentGuid { get; set; }     public Guid BlogGuid { get; set; }     public int ContactRef { get; set; }     public DateTime DatePosted { get; set; }     public string Text { get; set; } } </code></pre>  <p>OnModelCreating:</p>  <pre><code>protected override void OnModelCreating(DbModelBuilder modelBuilder) {     var blog = modelBuilder.Entity&lt;Blog&gt;();     blog.ToTable("Blogs");     blog.HasKey(b =&gt; b.BlogGuid);     blog.HasMany(b =&gt; b.Comments).WithRequired().HasForeignKey(c =&gt; c.BlogGuid);     blog.Ignore(b =&gt; b.CommentCount);      var blogComment = modelBuilder.Entity&lt;BlogComment&gt;();     blogComment.ToTable("BlogComments");     blogComment.HasKey(c =&gt; c.BlogCommentGuid); } </code></pre>  <p>Get Blogs Method:</p>  <pre><code>public IList&lt;Blog&gt; GetBlogs() {     return context.Database.SqlQuery&lt;Blog&gt;("Get_Blogs").ToList(); } </code></pre>  <p>Stored procedure code:</p>  <pre><code>CREATE TABLE #Blogs  (     BlogGuid uniqueidentifier,      Title nvarchar(50),      Text nvarchar(MAX),      Author nvarchar(50),      DatePosted datetime )  IF (@BlogCount IS NOT NULL AND @BlogCount &gt; 0) BEGIN     INSERT INTO #Blogs         SELECT TOP (@BlogCount) *             FROM Blogs             ORDER BY DatePosted DESC END ELSE BEGIN     INSERT INTO #Blogs         SELECT *             FROM Blogs             ORDER BY DatePosted DESC END  SELECT *,      (SELECT COUNT(*)         FROM BlogComments         WHERE BlogComments.BlogGuid = #Blogs.BlogGuid) CommentCount  FROM #Blogs  DROP TABLE #Blogs </code></pre>  <p>When calling <code>GetBlogs()</code>, <code>CommentCount</code> is always zero even when blogs do have comments in the blog comment table.</p>  <p>I think I understand why this is happening, I just can't think of a solution.</p>