<p>When executing this code on IDEONE:</p>  <pre><code>#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt;  struct A{     int x;     char c; };  struct B{     int y; };  int main(void) {     // your code goes here     struct A* pa = malloc(sizeof(struct B));     printf("%d\n",sizeof(*pa));     pa = malloc(sizeof(int));     printf("%d\n",sizeof(*pa));     pa = malloc(sizeof(char));     printf("%d\n",sizeof(*pa));     pa = malloc(0);     printf("%d\n",sizeof(*pa));     return 0; } </code></pre>  <p>I got:</p>  <pre><code>8 8 8 8 </code></pre>  <p>I'm guessing that since <code>pa</code> is of type <code>struct A *</code> and <code>struct A</code> is 8 bytes long, then malloc is allocating 8 bytes, as it should, but if so, why use sizeof?</p>