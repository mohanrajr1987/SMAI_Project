<p>I am going through the cs50x course, doing speller check program. In my fourth implementation of this program I've ran into malloc problem. This time I decided to implement a binary tree. I've read a lot of threads about this problem and checked my code for several times, but I still can't understand what I'm doing wrong. Problem appears in the recursive function that loads dictionary into ram.</p>  <pre><code>#include &lt;stdbool.h&gt; #include &lt;stdio.h&gt; #include &lt;math.h&gt; #include &lt;stdlib.h&gt; #include &lt;string.h&gt; #include &lt;ctype.h&gt;  #include "dictionary.h"    // standart node of the trie typedef struct node {     char word[LENGTH + 1];     struct node* less;     struct node* more; } node;  // Function definitions void unload_node(node* pr_node); void ld_bin_tree(int min, int max, node* node); bool check_word(char* lword, node* parent);  // Global variables // root of the tree node* root; FILE* dict; //size of dictionary int dict_size = 0;  bool load(const char* dictionary) {     // open dictionary file      dict = fopen(dictionary, "r");     int nwords = 0;     int min = 0;     int max = 0;     root = malloc(sizeof(node));      //if file wasn't open     if(dict == NULL)     {         printf("Error opening ditionary file!");         return false;     }      // tmp storage for read word     char buffer[LENGTH + 1];      // count words in the dictionary     while(fscanf(dict, "%s", buffer) &gt; 0)     {         nwords++;     }     max = nwords;     rewind(dict);     ld_bin_tree(min, max, root);       // close file     fclose(dict);     return false; } /*  * Recursion function to fill in binary tree  */  void ld_bin_tree(int min, int max, node* node) {     // tmp word holder     char buffer[LENGTH + 1];      // next mid value     int mid = (min + max) / 2;      // if mid == 0 then the bottom of the brunch reached, so return     if(max - min &lt; 2)     {         if(min == 0)         {             fscanf(dict, "%s", node-&gt;word);             dict_size++;             return;         }         return;     }      // go through the dict to the mid string     for(int i = 0; i &lt;= mid; i++)     {         fscanf(dict, "%s", buffer);     }      // fill in word      strcpy(node-&gt;word, buffer);     // go at the beginning of the dict     rewind(dict);      // fill in input node     // fill in new children nodes     struct node* new_node = malloc(sizeof(node));      node-&gt;less = new_node;      // send lesser side     ld_bin_tree(min, mid, node-&gt;less);      new_node = malloc(sizeof(node));     node-&gt;more = new_node;     // send greater side     ld_bin_tree(mid, max, node-&gt;more);      dict_size++;     return; } </code></pre>  <p>I've tried to get this error using valgrind but it gives me a lot of warnings about reading and writing in unappropriated memory blocks. But because I'm not very good with programming yet, this warnings didn't give me a clue of what's happening.</p>  <p>So I'm asking for more precise help, if it's possible. Thank you in advance.</p>  <p>Other parts of the speller program may be found here: <a href="https://www.dropbox.com/sh/m1q1ui2g490fls7/AACnVhjjdFpv1J0mUUhY2uV2a?dl=0" rel="nofollow">https://www.dropbox.com/sh/m1q1ui2g490fls7/AACnVhjjdFpv1J0mUUhY2uV2a?dl=0</a></p>