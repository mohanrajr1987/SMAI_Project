<p>I'm trying to use dynamic memory allocation with a 2D array and I can't seem to get my function to work as intended. I want to pass my function a long string of characters, break up and store certain parts as individual strings (in their own character arrays), then add them to a 2D array and return the final thing. The part of the function that splits the string up and stores what I want works fine. The memory allocation is what I'm doing wrong.</p>  <p>For example, I pass my function the string  "0,,10000,10000,"Albany Hwy After Armadale Rd","",-32.1479054960,116.0201957650,4" and it pulls out '10000', '-32.1479054960' and '116.0201957650', stores them in their own arrays, then adds it all into one array called 'stop'. What I'm (attempting) to do is allocate memory for my 3 strings that I will store, then as I add the strings I allocate memory for them as they are added.</p>  <p>Here is my function:</p>  <pre><code> char **getStopData(char line[]) { int commas = 0; int len = strlen(line); char **stop = malloc(3); //Block of memory for each string char stop_id[20]; //Temp array to build stop_id string  char lat[20]; //Temp array to build lat string char lon[20]; //Temp array to build lon string int counter;  for(int i = 0; i &lt;len; i++) {      if(line[i] == ',')  {         commas++;         counter = 0;         continue;     }     switch(commas) { //Build strings here and store them - works fine         case 2 :             stop_id[counter++] = line[i];              if(line[i+1] == ',') stop_id[counter] = '\0';             break;         case 6 :              lat[counter++] =  line[i];              if(line[i+1] == ',') lat[counter] = '\0';             break;         case 7 :              lon[counter++] =  line[i];             if(line[i+1] == ',') lon[counter] = '\0';             break;     } } //Assign memory for each string to be added to 'stop' &amp; add my strings to 'stop' stop[0] = malloc(sizeof(stop_id)); stop[0] = stop_id; stop[1] = malloc(sizeof(lat)); stop[1] = lat; stop[2] = malloc(sizeof(lon)); stop[2] = lon;  return stop; } </code></pre>  <p>And my main:</p>  <pre><code>int main(int argc, char *argv[]) { char  **niceRows = getStopData(argv[1]); for (int i=0; i&lt;sizeof(niceRows); i++) {         printf("%d\n",*niceRows[i]);     free(niceRows[i]); } free(niceRows); return 0; } </code></pre>  <p>When I run my function I get a bunch of runtime errors to do with my memory allocation. "error for object 0x7fff5266bb70: pointer being freed was not allocated *** set a breakpoint in malloc_error_break to debug"</p>