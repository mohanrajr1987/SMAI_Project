<p>I need to initialize a 2D array in C after dynamically allocating memory for it. I'm allocating memory as follows:</p>  <pre><code>double **transition_mat = (double **) malloc(SPACE_SIZE * sizeof(double *));  for (int i = 0; i &lt; SPACE_SIZE; i++) {     transition_mat[i] = (double *) malloc(SPACE_SIZE * sizeof(double)); } </code></pre>  <p>but then I want to initialize it to a certain 2D array, similar to the way initialization can be done when storing the array on the stack:</p>  <pre><code>double arr[2][2] = {{1.0, 7.0}, {4.1, 2.9}}; </code></pre>  <p>However, after allocating memory in the first code segment, trying to do assignment as follows produces an error:</p>  <pre><code>transition_mat = (double **) {{1.0, 7.0}, {4.1, 2.9}}; </code></pre>  <p>Does anyone know of a clean way to initialize arrays after malloc'ing memory?</p>  <p><em>Note</em>: someone suggested that I loop over <code>0 &lt;= i &lt; SPACE_SIZE</code> and <code>0 &lt;= j &lt; SPACE_SIZE</code> and assign values that way. The problem with that is that the entries cannot simply be computed from <code>i</code> and <code>j</code>, so that code ends up looking no cleaner than any brute force method.</p>