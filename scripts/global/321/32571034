<p>I have written a function that allocates and initialises a 2D array, like this - </p>  <pre><code>static state **symbols;  void initNFAStates() {     int i,j;     numStates = 256;     symbols = (state**)malloc(numStates * sizeof(char));     for(i = 0;i &lt; numStates;i++)     {         symbols[i] = (state*)malloc(NUMSYMBOLS * sizeof(state));         for(j = 0;j &lt; NUMSYMBOLS;j++)             symbols[i][j] = 0;     } } </code></pre>  <p>and a function to print this array, like this -</p>  <pre><code>void printNFAStateTable() {     int i, j;      for(i = 0;i &lt; numStates;i++)     {         printf("%d \t",i);         for(j = 0;j &lt; NUMSYMBOLS;j++)             printf("%ld",symbols[i][j]);         printf("\n");     } } </code></pre>  <p>When called consecutively from the <code>main()</code> function, they both work fine. However, the code as follows results in a segfault after reading only the first 32 lines from the array.</p>  <pre><code>int main(int argc, char **argv) {     int i;     clock_t begin, end;     double timeTaken;     currNFAState = 0;     initNFAStates();       if(getChars(argc,argv) != NULL)     {         printNFAStateTable();         begin = clock();         regex();         ... </code></pre>  <p>Similarly, the <code>printf()</code> function causes the same issue, but only when printing a floating point number -</p>  <pre><code>int main(int argc, char **argv) {     int i;     clock_t begin, end;     double timeTaken;     currNFAState = 0;     initNFAStates();     printf("A floating point number - %f",0.0124f);     printNFAStateTable();     ... </code></pre>  <p>I am aware this has to do with the <code>symbols</code> array being static, as the issue does not appear when the array is global. Could anyone explain why this occurs? </p>