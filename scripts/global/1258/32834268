<p>First, I made two sketches each, Webcam and Motion Typo.</p>  <p>Then I combined those thing together, It doesn't work.</p>  <p>I can see just Webcam.</p>  <p>I want to make Webcam to be background and motion typo to be added like layers.</p>  <p>What's wrong? and What can I do?</p>  <pre><code>    import processing.video.*;     Capture cam;     PImage preFrame;     float threshold = 50;     int fc, num = 8000;     ArrayList ballCollection;      boolean save = false;     float scal, theta;     PGraphics letter;     PFont font;     String l = "福";      void setup() {       background(0);       size(800, 600);       letter = createGraphics(width, height);       font = createFont("䡡湄楮札䍓ⵆ潮瑳", 700);       ballCollection = new ArrayList();          String[] cameras = Capture.list();        cam = new Capture(this, width, height, 30);       preFrame = createImage(cam.width, cam.height, RGB);        cam.start();     }     void draw() {       background(0);       for (int i=0; i&lt;ballCollection.size (); i++) {         Ball mb = (Ball) ballCollection.get(i);         mb.run();       }         theta += .0523;       if(cam.available() ==true){          preFrame.copy(cam, 0, 0, cam.width, cam.height, 0, 0, cam.width, cam.height);         preFrame.updatePixels();          cam.read();     }     loadPixels();       cam.loadPixels();       preFrame.loadPixels();       for(int x = 0; x&lt; cam.width; x++){         for(int y = 0; y &lt; cam.height; y++){           int loc = x + y * cam.width;           color current = cam.pixels[loc];           color previous = preFrame.pixels[loc];           float r1 = red(current); float g1 = green(current); float b1 = blue(current);           float r2 = red(previous); float g2 = green(previous); float b2 = blue(previous);            float diff = dist(r1, g1, b1, r2, g2, b2);            if(diff &gt; threshold){             pixels[loc] = color(198,47,27);           } else {             pixels[loc] = color(248,229,191);           }         }       }       updatePixels();        createStuff();     }     void createStuff() {       ballCollection.clear();        letter.beginDraw();       letter.noStroke();       letter.background(255);       letter.fill(0);       letter.textFont(font, 700);       letter.textAlign(CENTER);       letter.text(l, 830, 720);       letter.endDraw();       letter.loadPixels();       for (int i=0; i&lt;num; i++) {         int x = (int)random(width);         int y = (int)random(height);         //color c = letter.get(x, y);         int c = letter.pixels[x+y*width];         if (brightness(c)&lt;255) {           PVector org = new PVector(x, y);           float radius = random(5, 10);           PVector loc = new PVector(org.x+radius, org.y);           float offSet = random(TWO_PI);           int dir = 1;           float r = random(1);           if (r&gt;.5) dir =-1;           Ball myBall = new Ball(org, loc, radius, dir, offSet);           ballCollection.add(myBall);         }       }     }     class Ball {       PVector org, loc;       float sz = 2;       float radius, offSet, a;       int s, dir, countC, d = 20;       boolean[] connection = new boolean[num];       Ball(PVector _org, PVector _loc, float _radius, int _dir, float _offSet) {         org = _org;         loc = _loc;         radius = _radius;         dir = _dir;         offSet = _offSet;       }       void run() {         display();         move();         lineBetween();       }       void move() {         loc.x = org.x + sin(theta*dir+offSet)*radius;         loc.y = org.y + cos(theta*dir+offSet)*radius;       }       void lineBetween() {         countC = 1;         for (int i=0; i&lt;ballCollection.size(); i++) {           Ball other = (Ball) ballCollection.get(i);           float distance = loc.dist(other.loc);           if (distance &gt;0 &amp;&amp; distance &lt; d) {             a = map(countC,0,10,10,255);             stroke(255, a);             line(loc.x, loc.y, other.loc.x, other.loc.y);             connection[i] = true;           }            else {             connection[i] = false;           }         }         for (int i=0; i&lt;ballCollection.size(); i++) {           if (connection[i]) countC++;         }       }       void display() {         noStroke();         fill(255, 200);         ellipse(loc.x, loc.y, sz, sz);       }     } </code></pre>