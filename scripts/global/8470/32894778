<p>I have a list of dictionaries that maps different IDs to a central ID. I have a document with these different IDs associated with terms. I have created a function that now has a key the central ID from the different IDs in the document. The goFile is the document where in the first column there's an ID and in the second one there's a GOterm. The mappingList is a list containing dictionaries in which the ID in the goFile is mapped to a main ID. My expected output is a dictionary with a main ID as a key and a set with the go terms associated with it as value.</p>  <pre><code>def parseGO(mappingList, goFile):      # open the file     file = open(goFile)      # this will be the dictionary that this function returns     # entries will have as a key an Ensembl ID     # and the value will be a set of GO terms      GOdict = {}     GOset = set()      for line in file:          splitline = line.split(' ')          GO_term = splitline[1]         value_ID = splitline[0]           for dict in mappingList:             if value_ID in dict:                 ENSB_term = dict[value_ID]          #my best try         for dict in mappingList:             for key in GOdict.keys():                 if value_ID in dict and key == dict[value_ID]:                   GOdict[ENSB_term].add(GO_term)          GOdict[ENSB_term] = GOset      return GOdict    </code></pre>  <p>My problem is that now I have to add to the central ID in my GOdict the terms that are associated in the document to the different IDs. To avoid duplicates i use a set (GOset). How do I do it? All my try end having all the terms mapped to all the main IDs.<br> Some sample:</p>  <pre><code>mappingList = [{'1234': 'mainID1', '456': 'mainID2'}, {'789': 'mainID2'}] </code></pre>  <p>goFile:</p>  <pre><code>1234    GOTERM1 1234    GOTERM2 456    GOTERM1 456    GOTERM3 789    GOTERM1 </code></pre>  <p>expected output:</p>  <pre><code>GOdict = {'mainID1': set([GOTERM1, GOTERM2]), 'mainID2': set([GOTERM1, GOTERM3])} </code></pre>