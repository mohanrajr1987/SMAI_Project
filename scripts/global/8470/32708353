<p>Given two sets set1 and set2, I need to compute the ratio of their intersection by their union. So far, I have the following code:</p>  <pre><code>double ratio(const set&lt;string&gt;&amp; set1, const set&lt;string&gt;&amp; set2) {     if( set1.size() == 0 || set2.size() == 0 )         return 0;      set&lt;string&gt;::const_iterator iter;     set&lt;string&gt;::const_iterator iter2;     set&lt;string&gt; unionset;      // compute intersection and union     int len = 0;     for (iter = set1.begin(); iter != set1.end(); iter++)      {         unionset.insert(*iter);         if( set2.count(*iter) )             len++;     }     for (iter = set2.begin(); iter != set2.end(); iter++)          unionset.insert(*iter);      return (double)len / (double)unionset.size();    } </code></pre>  <p>It seems to be very slow (I'm calling the function about 3M times, always with different sets). The python counterpart, on the other hand, is way much faster  </p>  <pre><code>def ratio(set1, set2):     if not set1 or not set2:         return 0     return len(set1.intersection(set2)) / len(set1.union(set2)) </code></pre>  <p>Any idea about how to improve the C++ version (possibly, not using Boost)?</p>