<p>I have a acquistion device that reads data and adds it to the buffer. This is done in a separate thread. Once this data is dequeued, I set up a delegate that raise the event OnDataRead().</p>  <p>In my signal monitor, when the event is received I want to plot the data in multiple charts (16 in total). I sucessfully plot the first samples but then charts stop plotting data, starting from the 16th and progressively stopping all of them. What would be the correct way of doing that? Do I need a separate thread?</p>  <p>Receives event with data </p>  <pre><code>    public void OnDataRead(object source, DataEventArgs e)     {         if (e.rawData.Length &gt; 0)         {             AddData(e.rawData, e.numChannels, e.triggerEnabled);         }     } </code></pre>  <p>Add datapoints in the appropiate chart</p>  <pre><code> private void AddData(float[] rawData, int numChannels, bool triggerEnabled)     {         //for (int i=0; i&lt;chChannels.Count; i++)        // {             if (this.InvokeRequired)             {                 SetAddDataCallback d = new SetAddDataCallback(AddData);                 this.Invoke(d, new object[] {rawData, numChannels, triggerEnabled})                     ;             }             else             {                 DateTime timeStamp = DateTime.Now;                  // Find the channel selected                 int channelIdx = 0; //boxChannelSelection.SelectedIndex;                 // Add new data points for the selected channel                 for (int sampleIdx = 0; sampleIdx &lt; rawData.Length; sampleIdx++)                 {                     channelIdx = sampleIdx %(numChannels + 1);                      if (triggerEnabled &amp;&amp; (channelIdx != numChannels))                     {                         foreach (Series ptSeries in chChannels[channelIdx].Series)                         {                             AddNewPoint(timeStamp, rawData[sampleIdx], channelIdx, ptSeries);                         }                     }                     else if (!triggerEnabled)                     {                         foreach (Series ptSeries in chChannels[channelIdx].Series)                         {                             AddNewPoint(timeStamp, rawData[sampleIdx], channelIdx, ptSeries);                         }                      }                     }                 }            // }     } </code></pre>  <p>Plot new datapoint in the chart</p>  <pre><code> public void AddNewPoint(DateTime timeStamp, float yValue, int channel, System.Windows.Forms.DataVisualization.Charting.Series ptSeries)         {              ptSeries.Points.AddXY(timeStamp.ToOADate(), yValue);              // Remove old datapoints if needed             double removeBefore = timeStamp.AddSeconds((double)(8) * (-1)).ToOADate();             while (ptSeries.Points[0].XValue &lt; removeBefore)             {                 ptSeries.Points.RemoveAt(0);             }              chChannels[channel].ChartAreas[0].AxisX.Minimum = ptSeries.Points[0].XValue;             chChannels[channel].ChartAreas[0].AxisX.Maximum = DateTime.FromOADate(ptSeries.Points[0].XValue).AddSeconds(10).ToOADate();              chChannels[channel].Invalidate(); </code></pre>