<p>i'm trying to get the distance between the calibrated omnidirectional camera ( placed on a mobile robot ) and a object that i detect in a ROI. I've completed the calibration process using a chessboard and then applied Levenberg-Marquardt. Here's the code that i've written:</p>  <pre><code>ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)  img = cv2.imread("test.png") h, w = img.shape[:2] newcameramtx, roi = cv2.getOptimalNewCameraMatrix(mtx, dist, (w, h), 1, (w, h)) </code></pre>  <p>My mobile robot has to walk autonomously and in case it finds an object in front of itself (in a ROI) I need to calculate the distance. <a href="https://drive.google.com/folderview?id=0B31R-zgAGm06VUVrZVFIdXc5V3M&amp;usp=sharing" rel="nofollow">Here is some images</a></p>  <p>Here's how i check the ROI for each frame</p>  <pre><code>    ret,frame = self.cap.read()     #Resize the frame to the right resolution (1280x720)     frame = imtransform.imresize(frame,height=720)     #Crop the image     frame = frame[0:720, 320:960]     newimage = cv2.undistort(frame, self.cameraMatrix, self.distCoeffs, None, self.newCameraMatrix)     newimage = newimage[self.y:self.y + self.h, self.x:self.x + self.w]     canny_image = newimage[260 : 320 , self.x+120 : self.w-202]     canny = cv2.GaussianBlur(canny_image, (3, 3), 0)     canny = cv2.Canny(canny, 80, 120) </code></pre>  <p>Now I have to calculate the distance in order to perform some obstacle avoidance/path-planning algorithm. Any advice is appreciated, cause I've been stuck at this for a long time.</p>