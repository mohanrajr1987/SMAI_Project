<p>I have a mapreduce job where the mapper reads from several HBase tables.  It works fine on my cluster.  I am writing some unit tests retroactively with MRUnit.  I am attempting to compose a Result object from a list of manually instantiated KeyValue objects for use as the input to the map() method.  Only the first KeyValue object in the list seems to get retained in the Result object when I subsequently attempt to read my several columns in the map() method -- the others are null.  In the below I have a single column family named "0".</p>  <pre><code>private MapDriver&lt;ImmutableBytesWritable, Result, Text, Text&gt; mapDriver; private HopperHbaseMapper hopperHbaseMapper;  @Before public void setUp() {       hopperHbaseMapper = new HopperHbaseMapper();   mapDriver = MapDriver.newMapDriver(hopperHbaseMapper);     }  @Test public void testMapHbase() throws Exception {       String testKey = "123";   ImmutableBytesWritable key = new ImmutableBytesWritable(testKey.getBytes());       List&lt;KeyValue&gt; keyValues = new ArrayList&lt;KeyValue&gt;();   KeyValue keyValue1 = new KeyValue(testKey.getBytes(), "0".getBytes(), "first_name".getBytes(), "Joe".getBytes());   KeyValue keyValue2 = new KeyValue(testKey.getBytes(), "0".getBytes(), "last_name".getBytes(), "Blow".getBytes());   keyValues.add(keyValue1);   keyValues.add(keyValue2);   Result result = new Result(keyValues);   mapDriver.withInput(key, result);   mapDriver.withOutput(new Text(testKey), new Text(testKey + "\tJoe\tBlow"));   mapDriver.runTest(); } </code></pre>  <p>Am I creating the Result object incorrectly?  As mentioned, the mapper works fine on real HBase data on my cluster, so I believe it is my test setup that is at fault.</p>