<p>I want to add a std::map m_mapName in the initialization list of the constructor. </p>  <p>If I type m_mapName() in the constructor's init list, the compiler accepts it.</p>  <p>But, is it correct? If it is not correct, how can I add the map to the initialization list?</p>  <p>Then, I do several insertions in the map. What is a more elegant way of inserting values, so I don't call insert function everytime?</p>  <hr>  <p>More info:</p>  <p>Just like in : <a href="http://stackoverflow.com/questions/2172053/c-can-i-statically-initialize-a-stdmap-at-compile-time">C++, can I statically initialize a std::map at compile time?</a>, the compiler doesn't accept syntax like: </p>  <pre><code>std::map&lt;int, char&gt; example = { (1,'a'),                             (2, 'b'),                             (3, 'c') }; </code></pre>  <p>Cannot use Boost.  My code looks like this:</p>  <p><strong>* className.h: *</strong></p>  <pre><code>typedef std::map &lt;uint16_t, int&gt; mapType;  typedef std::pair &lt;uint16_t, int&gt; mapPair;  className{  private:       mapType m_mapName;   } </code></pre>  <p><strong>* className.cpp: *</strong></p>  <pre><code>className::className () :   m_mapName()  {  ...  m_mapName.insert(mapPair(someMapValue1, 0));  m_mapName.insert(mapPair(someMapValue2, 0));  m_mapName.insert(mapPair(someMapValue3, 0)); </code></pre>