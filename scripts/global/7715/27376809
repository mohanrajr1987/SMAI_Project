<p>I am trying to write a function in clojure returns cartesian product</p>  <pre><code>(my-compute-fn [1 2 3] [4 5 6])  </code></pre>  <p>will return</p>  <pre><code>[[1 4] [1 5] [1 6] [2 4] [2 5] ....] </code></pre>  <p>My attempt resulted in this</p>  <pre><code>(defn compute [col1 col2]     (let [totcol2 (count col2)           totcol1 (count col2)]          (map #(vector %1 %2)                (mapcat #(repeat totcol1 %1) col1)                (take (* totcol1 totcol2) (cycle col2))))) </code></pre>  <p>Which does the job, but looks a bit clunky. What would be a better and more concise implementation, involving more readily available functions from clojure.core?</p>  <p>Thanks!</p>  <p>edit: Found clojure combinatorics, and it doesn't seem there's a <em>magic functional way</em> of doing this.</p>