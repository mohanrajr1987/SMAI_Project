<p>I am getting data for a particular user id from 14 tables as shown below. As part of data, I am extracting <code>user_id</code>, <code>record_name</code> and <code>record_value</code> and then I get <code>timestamp</code> from <code>record_name</code> (by splitting on it) and then populate my TreeMap with key as <code>timestamp</code> and value as <code>record_value</code>. </p>  <p>After that I am extracting 100 most recent <code>record_value</code> from <code>valueTimestampMap</code> and then populating it in my <code>recordValueHolder</code> LinkedList.</p>  <p>In my case 100 most recent means by looking at the timestamp not the way they are coming.</p>  <p>Below is my code -</p>  <pre><code>public List&lt;String&gt; getData(String userId) {      List&lt;String&gt; recordValueHolder = new LinkedList&lt;String&gt;();     Map&lt;Long, String&gt; valueTimestampMap = new TreeMap&lt;Long, String&gt;(Collections.reverseOrder());      for (int tableNumber = 0; tableNumber &lt; 14; tableNumber++) {          String sql = "select * from table_" + tableNumber + " where user_id='" + userId + "';";          SimpleStatement query = new SimpleStatement(sql);         query.setConsistencyLevel(ConsistencyLevel.QUORUM);         ResultSet res = session.execute(query);          Iterator&lt;Row&gt; rows = res.iterator();         while (rows.hasNext()) {             Row r = rows.next();              String user_id = r.getString("user_id"); // get user id             String record_name = r.getString("record_name"); // get record name             String record_value = r.getString("record_value"); // get record value              long timestamp = Long.parseLong(record_name.split("\\.")[1]);              // populate my tree map             valueTimestampMap.put(timestamp, record_value);         }     }      // now extract 100 most recent record_value since     // valueTimestampMap is already sorted basis on key in     // descending order     for (Map.Entry&lt;Long, String&gt; entry : valueTimestampMap.entrySet()) {         if (recordValueHolder.size() &gt; 99)             break;         recordValueHolder.add(entry.getValue());     }             return recordValueHolder; } </code></pre>  <p>I am sorting TreeMap in descending order of the keys by using <code>Collections.reverseOrder()</code> so that I have most recent timestamps at the top and then I can simply extract 100 most recent <code>record_value</code> from it and that's what my above code does.</p>  <p><strong>Problem Statement:-</strong></p>  <p>I have 100 most recent <code>record_value</code> in recordValueHolder List. Now I also need to find out which <code>tableNumber</code> each <code>record_value</code> out of 100 came from and what was the <code>record_name</code> for that <code>record_value</code> as well?</p>  <p>So I was thinking to make a data structure something like below which can hold 100 most recent <code>record_value</code> along with their tableNumber, record_name and timestamp as well.</p>  <pre><code>public class RecordValueTimestampTableHolder {      private long timestamp;     private String recordName;     private String recordValue;     private Integer tableNumber;      // setters and getters  } </code></pre>  <p>So the size of <code>List&lt;RecordValueTimestampTableHolder&gt;</code> should be 100. Is this possible to do with my current setup? I am not able to understand how to make this work?</p>  <p>Now my return data type of <code>getData</code> method will change and instead of returning <code>List&lt;String&gt;</code>, now it will return <code>List&lt;RecordValueTimestampTableHolder&gt;</code> which will have 100 most recent record_values along with other values as well.</p>