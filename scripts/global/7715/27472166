<p>I'm trying to map a drawing function to every element in a list. The function itself, drawMap, seems ok but when I use it I get the following error:</p>  <pre><code>Couldn't match type `[]' with `IO' Expected type: IO (IO Bool)   Actual type: [IO Bool] In the return type of a call of `drawMap' In a stmt of a 'do' block: drawMap testMap 32 img screen In the second argument of `($)', namely   `do { screen &lt;- SDL.setVideoMode 640 480 32 [SDL.SWSurface];         img &lt;- SDL.loadBMP "grass.bmp";         drawMap testMap 32 img screen;         SDL.flip screen;         .... }' </code></pre>  <p>From reading <a href="http://stackoverflow.com/questions/25467031/couldnt-match-type-with-io-haskell">this</a> I now understand that it's got something to do with what the function is returning, but I've got no idea at the moment how to fix it.</p>  <p>My code looks like this:</p>  <pre><code>testMap = [Tile 0 0 1, Tile 0 1 1, Tile 0 2 1, Tile 0 3 1]  drawTile :: Int -&gt; SDL.Surface -&gt; SDL.Surface -&gt; Tile -&gt; IO Bool drawTile tilesize img dst tile = applySurface (tileX tile * tilesize) (tileY tile * tilesize) img dst  drawMap :: [Tile] -&gt; Int -&gt; SDL.Surface -&gt; SDL.Surface -&gt; [IO Bool] drawMap tiles tilesize img dst =   map (drawTile tilesize img dst) tiles  main :: IO () main = SDL.withInit [SDL.InitEverything] $ do    screen &lt;- SDL.setVideoMode 640 480 32 [SDL.SWSurface]    img &lt;- SDL.loadBMP "grass.bmp"    --drawTile 32 img screen (testMap !! 1)   drawMap testMap 32 img screen    SDL.flip screen    mainLoop </code></pre>