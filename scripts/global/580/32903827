<p>Acording to <a href="http://perldoc.perl.org/perlop.html#Terms-and-List-Operators-%28Leftward%29" rel="nofollow">doc</a> <strong>list operators tend to gobble up all arguments that follow</strong></p>  <pre><code>#!/usr/bin/env perl use warnings; #sub test; #sub My::test;  sub list {    print "&gt;&gt;@_&lt;&lt;\n"; }  sub new {    my $class =  shift;    my $self =  bless {}, 'main';    list 0, main::test $self, 1, 2, 3;    list 0, My::test $self, 1, 2, 3; }  # sub test (@) { # it has not matter there is prototype or not sub test {    print "test&gt;&gt;@_&lt;&lt;\n";    return; }  new();  package My;  # sub test (@) { # it has not matter there is prototype or not sub test {    print "My::test&gt;&gt;@_&lt;&lt;\n";    return; } </code></pre>  <p>In this example the output is:</p>  <pre><code>test&gt;&gt;main=HASH(0x24a3160)&lt;&lt; &gt;&gt;0 1 2 3&lt;&lt; My::test&gt;&gt;main=HASH(0x24a3160)&lt;&lt; &gt;&gt;0 1 2 3&lt;&lt; </code></pre>  <p>Which means that list does not gobble up all the arguments that follow it<br> <strong>The expecting result is:</strong></p>  <pre><code>test&gt;&gt;main=HASH(0x1bea160) 1 2 3&lt;&lt; &gt;&gt;0&lt;&lt; My::test&gt;&gt;main=HASH(0x1bea160) 1 2 3&lt;&lt; &gt;&gt;0&lt;&lt; </code></pre>  <p>What a problem is?</p>