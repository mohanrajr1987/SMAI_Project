<p>Sometimes Moose's method modifiers do not play well with symbol table entries created by other packages that try to do Moose-like things their own way.</p>  <p>I am working with some older code that follows this pattern:</p>  <pre><code>package MethodCreator;  sub make_some_method {     my $caller = caller();     *{$caller . '::generated_method'} = sub { print 'I am a generated method' } }  1; </code></pre>  <p>The intent of the MethodCreator package is to add some standard definitions to multiple consumer packages, and it implements this via direct glob assignment.  The problem is, these created methods do not play well with Moose's method modifiers:</p>  <pre><code>package Consumer;  use Moose; use MethodCreator;  MethodCreator::make_some_method();  # The following line causes compilation to fail                                                                                                                                                               # before generated_method =&gt; sub { print 'About to call a generated method: ' };                                                                                                                               generated_method();  1; </code></pre>  <p>As the comment indicates, an attempt to use a method modifier on one of these dynamically-added subroutines results in a compile time error ("generated_method is not in the inheritance hierarchy").</p>  <p>It will not be practical to change or replace MethodCreator (as much as that may be the "right solution").  So the question is: how can package Consumer be changed to make the 'before' modifier play well with such subroutines, i.e. to behave as you would expect if 'generated_method' were defined directly within Consumer?</p>