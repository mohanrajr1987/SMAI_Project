<p>I am really have a hard time with this program but I almost have it were it does what I want it to do. I am having an issue with one of my methods the replaceNode() method. The idea is have the method delete and replace or visa verser but I can not get my code to do what I want. Any thoughts?</p>  <pre><code>enter code here enter code here  public class LinkedList {     // i = head     // j = tail     static Node head, temp, tail;     int num;       static private class Node {          int num;         Node nextNode;          Node(int num) {             this.num = num;          }     }      public void addNodes(int num) {         Node node = new Node(num);         if (tail == null) {             tail = node;             tail.nextNode = tail;         } else {             head = tail;              while (head.nextNode != tail) {                 head = head.nextNode;             }             head.nextNode = node;              node.nextNode = tail;         }     }      public void insertNode(int data, int after) {         Node node = new Node(data);         int ithNode = 1;         head = tail;          while (after != ithNode) {             head = head.nextNode;             ithNode++;         }         temp = head.nextNode;         head.nextNode = node;         node.nextNode = temp;     }     public void replaceNode(int data, int nodeDeleted, int replaced){         int ithNode = 1;         head = tail;         int replaced1 = replaced +1;         if (nodeDeleted == 1) {              temp = tail.nextNode;             while (temp.nextNode != tail) {                 temp = temp.nextNode;             }             temp.nextNode = temp.nextNode.nextNode;             tail = head.nextNode;         } else {             while (ithNode != nodeDeleted - 1) {                 head = head.nextNode;                 ithNode++;             }             head.nextNode = head.nextNode.nextNode;         }         Node node = new Node(data);         int ithNodes = 1;         head = tail;          while (replaced1 != ithNodes) {             head = head.nextNode;             ithNodes++;         }         temp = head.nextNode;         head.nextNode = node;         node.nextNode = temp;     }        //}      public void deleteNode(int nodeToBeDeleted) {         int ithNode = 1;         head = tail;          if (nodeToBeDeleted == 1) {              temp = tail.nextNode;             while (temp.nextNode != tail) {                 temp = temp.nextNode;             }             temp.nextNode = temp.nextNode.nextNode;             tail = head.nextNode;         } else {             while (ithNode != nodeToBeDeleted - 1) {                 head = head.nextNode;                 ithNode++;             }             head.nextNode = head.nextNode.nextNode;         }         //Node.numOfLists--;     }      public void print() {         head = tail;         boolean list = false;          do {             System.out.print((list) ? "--&gt; |" + head.num + "|" : "|" + head.num                     + "|");             list = true;             head = head.nextNode;         } while (head != tail);      }      public static void main(String[] args) {         LinkedList list = new LinkedList();         list.addNodes(3);         list.addNodes(7);         list.addNodes(2);         list.addNodes(1);         list.replaceNode(14,1,1);         //list.insertNode(4, 1);         //list.deleteNode(5);         list.print();      } } </code></pre>