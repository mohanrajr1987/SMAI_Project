<p>I know the function vs. method discussions are well beat up on, so I will try to be brief.  I am looking to show a tiny block of code and get feedback on:</p>  <ol> <li>Is it a method, function, both, or something else?</li> <li>If it be a method, can it be made into a function?  <em>(other than by val f = m _)</em></li> <li>Are there more idiomatic ways to do what I'm trying in this example?</li> </ol>  <p>When I see docs for methods we see the following:</p>  <pre><code>def m(a:Int, b:Int):Int = { a + b } </code></pre>  <p>Looking for functions we see:</p>  <pre><code>(a:Int, b:Int) =&gt; a + b    OR val f:(Int,Int) =&gt; Int = (a, b) =&gt; a + b </code></pre>  <p>However, when we poke around for <code>recursive functions</code> we nearly always see:</p>  <pre><code>@tailrec def countStrings(a:List[String], b:Int = 0):Int = {   if (a == Nil) b   else countStrings(a.tail, b + 1) } countStrings: (a: List[String], b: Int)Int </code></pre>  <p>So, based on all that I've read about methods the above recursive string counter is a recursive method - not a function.  Now, if we re-write this as a function according to how the docs tell us to write functions:</p>  <pre><code>val countStrings:(List[String],Int) =&gt; Int = (a,b) =&gt; {   if (a == Nil) b   else countStrings(a.tail, b + 1) } countStrings: (List[String], Int) =&gt; Int = &lt;function2&gt; </code></pre>  <p>So my question is precisely this: Is the following block annotated with <code>@tailrec</code> a function, a method, both, or something else?</p>  <pre><code>@tailrec def countStrings(a:List[String], b:Int = 0):Int = {   if (a == Nil) b   else countStrings(a.tail, b + 1) } </code></pre>  <p><em>Also, apologies if this is a duplicate, I have searched and, as with most things scala, have found conflicting opinions on this matter.  So my hope is to put forth an extremely simple example and get a definitive answer.  Thank you.</em></p>