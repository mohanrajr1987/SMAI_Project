<p>publi class A extends B implements C{</p>  <p>public getSomeClass >> Returns InterfaceD</p>  <p>public returnSomeClass methodName(someClass sc){</p>  <p>getSomeClass().someGetterD() // getSomeClass is defined above </p>  <p>} }</p>  <p>How to mock getSomeClass().someGetterD(). I tried mocking this way in the test class:</p>  <p>when(reference.getSomeClass().someGetterD()).willReturn(returnValue)</p>  <p>and getting the following error: </p>  <p>org.mockito.exceptions.misusing.MissingMethodInvocationException:  when() requires an argument which has to be 'a method call on a mock'. For example:     when(mock.getArticles()).thenReturn(articles);</p>  <p>Also, this error might show up because: 1. you stub either of: final/private/equals()/hashCode() methods.    Those methods <em>cannot</em> be stubbed/verified. 2. inside when() you don't call method on mock but on some other object.</p>