<p>EDIT my question after several tries. After being authenticated FilterChainProxy behaves adding wrong url I did not request instead of the ones I actually requested. My case: I request /public/something, it adds /private/somethingelse. I strongly believe my problem is due to a lack of theory about how actually Spring (its servlet) maps urls against each controller. I have the authentication against db through a custom authentication provider working. Then I have set a default success url which is requested at class-level from UserHomeController with @RequestMapping. After the controller returned that page I am just stuck on there, all the links from that page where I have been redirected after login aren't added into FiletrChainProxy, on click it adds to the chain the path returned by the controller. Some details:</p>  <blockquote>   <p>web.xml</p> </blockquote>  <pre><code>&lt;servlet-mapping&gt;     &lt;servlet-name&gt;wseds&lt;/servlet-name&gt;     &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; </code></pre>  <blockquote>   <p>servlet, view resolver</p> </blockquote>  <pre><code>&lt;bean   id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"         p:prefix="/jsp/view/"         p:suffix=".jsp"          /&gt; </code></pre>  <blockquote>   <p>SecurityConfig</p> </blockquote>  <pre><code>@Override     protected void configure(HttpSecurity http) throws Exception     {          http             .authorizeRequests()                 .antMatchers("/private/**")                     .access("hasRole('ROLE_PERMISSION_booking')")                         .and()                                        .formLogin()                             .defaultSuccessUrl("/private/userhome") //mapped to UserHomeController                             .loginPage("/public/login")                         .and()                             .authorizeRequests()                             .antMatchers("/public/**")                             .permitAll(); </code></pre>  <blockquote>   <p>UserHomeController</p> </blockquote>  <pre><code>@Controller @RequestMapping("/private/userhome") public class UserHomeController {     @RequestMapping(method = RequestMethod.GET)     public String displayUserHome(Model model)     {         model.addAttribute("username", this.getUsername());         return "userhome";     }      private String getUsername()     {         String userName;     Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();              if (principal instanceof UserDetails)              {         userName = ((UserDetails)principal).getUsername();             }              else              {         userName = principal.toString();             }             return userName;     } } </code></pre>  <blockquote>   <p>userhome.jsp</p> </blockquote>  <pre><code>    &lt;body&gt;             &lt;h1&gt;Userhome&lt;/h1&gt;             &lt;h2&gt;Personal profile&lt;/h2&gt;             &lt;h3&gt;Welcome, ${username}.&lt;/h3&gt;             &lt;c:url value="/public/services" var="ServicesURL" /&gt;             &lt;h4&gt;&lt;a href="${ServicesURL}"&gt;Services&lt;/a&gt;&lt;/h4&gt;  &lt;!-- requesting services will add /private/userhome to the filter chain --&gt;     &lt;/body&gt; </code></pre>  <blockquote>   <p>LOGS after requesting /public/services</p> </blockquote>  <pre><code>2015-09-24 10:09:20 DEBUG FilterChainProxy:324 - /private/userhome at position 1 of 12 in additional filter chain; firing Filter: 'WebAsyncManagerIntegrationFilter' 2015-09-24 10:09:20 DEBUG FilterChainProxy:324 - /private/userhome at position 2 of 12 in additional filter chain; firing Filter: 'SecurityContextPersistenceFilter' 2015-09-24 10:09:20 DEBUG HttpSessionSecurityContextRepository:192 - Obtained a valid SecurityContext from SPRING_SECURITY_CONTEXT: 'org.springframework.security.core.context.SecurityContextImpl@4ae27bef: Authentication: org.springframework.security.authentication.UsernamePasswordAuthenticationToken@4ae27bef: Principal: desmogix; Credentials: [PROTECTED]; Authenticated: true; Details: org.springframework.security.web.authentication.WebAuthenticationDetails@fffed504: RemoteIpAddress: 127.0.0.1; SessionId: 2CC070278D2318A34B6EE9D122A8ADE1; Granted Authorities: wseds.security.methods.AccountAuthority@58801ca1, wseds.security.methods.AccountAuthority@2f5f73ac' </code></pre>  <p>Any link like ${ServiceURL} returns a wrong address path to the filter chain.  What's is wrong with this? Many thanks</p>