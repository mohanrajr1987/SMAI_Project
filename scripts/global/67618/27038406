<p>I am trying to render view to a string in a unit test (so no HostingEnvironment, no VirtualPathProvider) to then assert a regex result to add a harness for a certain value to not be changed. My rendering method (much comprised of samples found on this site):</p>  <pre><code>  private string RenderHomeIndexAction()     {       var controller = new HomeController();       using (var writer = new StringWriter())       {         var httpContext = new HttpContext(new HttpRequest(string.Empty, "http://example.com", string.Empty), new HttpResponse(writer));         HttpContext.Current = httpContext;         var controllerName = controller.GetType().Name;         var routeData = new RouteData();         routeData.Values.Add("controller", typeofHomeController("Controller", string.Empty));         routeData.Values.Add("action", "index");         var controllerContext = new ControllerContext(new HttpContextWrapper(httpContext), routeData, controller);         controller.ControllerContext = controllerContext;         var res = controller.Index();         res.ExecuteResult(controllerContext);         HttpContext.Current = null;         return writer.ToString();       }     } </code></pre>  <p>This throws a NullReferenceException in the res.ExecuteResult(controllerContext) with the following stactkrace:</p>  <pre><code>   at System.Web.VirtualPath.GetCacheKey()    at System.Web.Compilation.BuildManager.GetCacheKeyFromVirtualPath(VirtualPath virtualPath, Boolean&amp; keyFromVPP)    at System.Web.Compilation.BuildManager.GetVPathBuildResultFromCacheInternal(VirtualPath virtualPath, Boolean ensureIsUpToDate)    at System.Web.Compilation.BuildManager.GetVPathBuildResultInternal(VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate)    at System.Web.Compilation.BuildManager.GetVPathBuildResultWithNoAssert(HttpContext context, VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate)    at System.Web.Compilation.BuildManager.GetVirtualPathObjectFactory(VirtualPath virtualPath, HttpContext context, Boolean allowCrossApp, Boolean throwIfNotFound)    at System.Web.Compilation.BuildManager.GetVirtualPathObjectFactory(VirtualPath virtualPath, HttpContext context, Boolean allowCrossApp)    at System.Web.Compilation.BuildManager.CreateInstanceFromVirtualPath(VirtualPath virtualPath, Type requiredBaseType, HttpContext context, Boolean allowCrossApp)    at System.Web.Compilation.BuildManager.CreateInstanceFromVirtualPath(String virtualPath, Type requiredBaseType)    at System.Web.Mvc.BuildManagerWrapper.System.Web.Mvc.IBuildManager.CreateInstanceFromVirtualPath(String virtualPath, Type requiredBaseType)    at System.Web.Mvc.WebFormViewEngine.FileExists(ControllerContext controllerContext, String virtualPath)    at System.Web.Mvc.VirtualPathProviderViewEngine.GetPathFromGeneralName(ControllerContext controllerContext, List`1 locations, String name, String controllerName, String areaName, String cacheKey, String[]&amp; searchedLocations)    at System.Web.Mvc.VirtualPathProviderViewEngine.GetPath(ControllerContext controllerContext, String[] locations, String[] areaLocations, String locationsPropertyName, String name, String controllerName, String cacheKeyPrefix, Boolean useCache, String[]&amp; searchedLocations)    at System.Web.Mvc.VirtualPathProviderViewEngine.FindView(ControllerContext controllerContext, String viewName, String masterName, Boolean useCache)    at System.Web.Mvc.ViewEngineCollection.&lt;&gt;c__DisplayClass6.&lt;FindView&gt;b__5(IViewEngine e)    at System.Web.Mvc.ViewEngineCollection.Find(Func`2 cacheLocator, Func`2 locator)    at System.Web.Mvc.ViewEngineCollection.FindView(ControllerContext controllerContext, String viewName, String masterName)    at System.Web.Mvc.ViewResult.FindView(ControllerContext context)    at System.Web.Mvc.ViewResultBase.ExecuteResult(ControllerContext context) </code></pre>