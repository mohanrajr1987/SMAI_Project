<p>I was facing a problem when I try to return an Action from another Action. I got something like this:</p>  <pre><code>public ActionResult Action (int param1, string param2) {     ActionViewModel vm = new ActionViewModel();     vm.Param1Prop = param1;     vm.Param2Prop = param2;      return View(vm); }  [AcceptVerbs(HttpVerbs.Post)] public ActionResult Action (ActionViewModel vm) {     //Do Something...      if (vm.DoItAgain)     {         return Action(vm.Param1Prop-1, vm.Param2Prop);     }      return View(vm); } </code></pre>  <p>When the line <code>return Action(vm.Param1Prop-1, vm.ParamProp);</code> goes to <code>Action(int param1, string param2)</code>, executes and everything looks like go well. But don't. The render result looks like <code>return View(vm)</code> was executed instead, all the values of the <code>vm</code> are the same as sended in the Post Action, not the ones i'm passing on <code>return Action(vm.Param1Prop-1, vm.ParamProp);</code>.</p>  <p>I'm not sure why isn't working, the ActionResult returning is being ignored? The code inside the first Action method executes fine (I debug and put a log inside to check it) and the return of the first method is the end of the response so why it looks like that line never happened? I also try to modify the vm on the PostAction to see if the vm was being infered somehow. That don't work either. To make that work, I put a RedirectToAction instead of using the return Action: <code>RedirectToAction("Action", new { param1 = vm.Param1Prop-1, param2 = vm.Param2Prop });</code> and everything work fine. I completly understand why RedirectToAction works, but i cannot figure out why invoke the Action method don't.  Anyone can enlighten me about it?</p>