<p>What I basically want to do is drawing on an image using CoreGraphics and touches. For that the user chooses an image by using UIImagePickerController. I create an UIImageView that uses the maximum available space on screen while keeping the original image ratio.</p>  <p>Apparently I did an mistake (in the touchesMoved function), because whenever I move my finger/the mouse pointer on the image, my drawing shifts to the left, blurs and gets slimmer. I have absolutely no idea why it behaves this way. </p>  <p>I'm using the iOS Simulator to test my app, loading the default images of the photo app. On some photos drawing works fine, on others it doesn't. </p>  <p>I shortened and removed some of the code that has nothing to do with my question.</p>  <p>Is somebody able to tell my what I'm doing wrong? Thank you very much in advance. Here is my code: </p>  <pre><code>import UIKit  class ViewController: UIViewController, UIImagePickerControllerDelegate,     UINavigationControllerDelegate {  var imageView: UIImageView? var image: UIImage? var drawView: UIImageView! var touchMoved: Bool!  override func viewWillAppear(animated: Bool) {     if image != nil {         // Setup image view          let imageRatio = (image?.size.width)! / (image?.size.height)!          imageView = UIImageView(image: image)         imageView!.frame = CGRectMake((view.bounds.height - view.bounds.width * imageRatio) / 2, 0, view.bounds.width * imageRatio, view.bounds.width)         view.addSubview(imageView!)          // Setup draw view          drawView = UIImageView(frame: imageView!.frame)         drawView.alpha = 0.6 // original image still visible         view.addSubview(drawView)     } }  override func viewDidAppear(animated: Bool) {     if image == nil {         // After loading an empty view          pickImage()     } }  // MARK: - UIImagePickerController  func pickImage() {     /*** shortened: picking image with UIImagePickerController ***/ }  func imagePickerController(picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject]) {     // Image picked, load it to the imageView      image = info[UIImagePickerControllerOriginalImage] as? UIImage      dismissViewControllerAnimated(true, completion: nil) }  // MARK: - Touches  override func touchesBegan(touches: Set&lt;UITouch&gt;, withEvent event: UIEvent?) {     // User touches the screen      if image != nil {         touchMoved = false     }  }  override func touchesMoved(touches: Set&lt;UITouch&gt;, withEvent event: UIEvent?) {     // User moves finger on the screen      if image != nil {         let touch = touches.first         let previousPoint = touch?.previousLocationInView(drawView)         let currentPoint = touch?.locationInView(drawView)         touchMoved = true          UIGraphicsBeginImageContext(drawView.frame.size)         let context = UIGraphicsGetCurrentContext()         drawView.image?.drawInRect(CGRectMake(0, 0, drawView.frame.size.width, drawView.frame.size.height))          CGContextSetLineCap(context, .Round)         CGContextSetLineWidth(context, 20)         CGContextSetGrayStrokeColor(context, 0.5, 1)         CGContextSetBlendMode(context, .Normal)         CGContextMoveToPoint(context, previousPoint!.x, previousPoint!.y)         CGContextAddLineToPoint(context, (currentPoint?.x)!, (currentPoint?.y)!)         CGContextStrokePath(context)         drawView.image = UIGraphicsGetImageFromCurrentImageContext()          UIGraphicsEndImageContext()     } }  override func touchesEnded(touches: Set&lt;UITouch&gt;, withEvent event: UIEvent?) {     // User lifts finger from screen      if image != nil {         if !touchMoved {             // User touched the screen without moving, draw a dot              UIGraphicsBeginImageContext(drawView.frame.size)             let context = UIGraphicsGetCurrentContext()             drawView.image?.drawInRect(CGRectMake(0, 0, drawView.frame.size.width, drawView.frame.size.height))              CGContextSetLineCap(context, .Round)             CGContextSetLineWidth(context, 20)             CGContextSetGrayStrokeColor(context, 0.5, 1)             CGContextMoveToPoint(context, lastPoint.x, lastPoint.y)             CGContextAddLineToPoint(context, lastPoint.x, lastPoint.y)             CGContextStrokePath(context)             CGContextFlush(context)              drawView.image = UIGraphicsGetImageFromCurrentImageContext()             UIGraphicsEndImageContext()         }     } } } </code></pre>  <p>Here is a screenshot of what happens (with alpha at 1.0): <a href="http://i.stack.imgur.com/EPihq.png" rel="nofollow"><img src="http://i.stack.imgur.com/EPihq.png" alt="drawing"></a></p>  <p>EDIT: I found out that it works properly, when the draw view covers the complete view, but it's necessary for the app to limit the area where drawing is enabled. The app is running in <strong>landscape mode</strong>. Do you have any ideas?</p>