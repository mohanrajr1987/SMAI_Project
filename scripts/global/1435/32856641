<p>I'm using this lib <a href="https://github.com/bennyguitar/CollapseClick" rel="nofollow">Collapse Click</a>. It used to add the subviews to scrollview and able to collapse or expand the view. If I only add 1-2 views, it loads OK but my app needs to load 8 views and the loading speed has a problem. It loads slowly, now how I can improve the loading speed in scrollview? I already tried GCD but it still the same. This is my code using:</p>  <p>InitSubView from ViewController</p>  <pre><code>-(void) initSubViewController {     // Doing something on the main thread     dispatch_queue_t myQueue = dispatch_queue_create("My Queue",NULL);     dispatch_async(myQueue, ^{         // Perform long running process         // property Photo VC         if(_pPhotoVC == nil)         {             _pPhotoVC = [[PhotoViewController alloc] initWithNibName:@"PhotoViewController" bundle:nil];         }          if(_pInforVC == nil)         {             _pInforVC = [[InforViewController alloc] initWithNibName:@"InforViewController" bundle:nil];         }         ..... // DO THE SAME FOR THE REST VIEWS          dispatch_async(dispatch_get_main_queue(), ^{             // Update the UI             [self addChildViewController:_pPhotoVC];             [_pPhotoVC didMoveToParentViewController:self];              [self addChildViewController:_pInforVC];             [_pInforVC didMoveToParentViewController:self];         });     });  } </code></pre>  <p>Call CollapseClick in ViewDidAppear()</p>  <pre><code>-(void) viewDidAppear:(BOOL)animated {     [super viewDidAppear:animated];      if (!_isLoaded) {          [_indicator stopAnimating];          // setup Scrollview         _scrollView_Collapse.CollapseClickDelegate = self;         [_scrollView_Collapse reloadCollapseClick];          _isLoaded = YES;     } } </code></pre>  <p>And here is the reloadCollapseClick() : (it's in CollapseClick.m)</p>  <pre><code>-(void)reloadCollapseClick {     // Set Up: Height     float totalHeight = 0;      // If Arrays aren't Init'd, Init them     if (!(self.isClickedArray)) {         self.isClickedArray = [[NSMutableArray alloc] initWithCapacity:[CollapseClickDelegate numberOfCellsForCollapseClick]];     }      if (!(self.dataArray)) {         self.dataArray = [[NSMutableArray alloc] initWithCapacity:[CollapseClickDelegate numberOfCellsForCollapseClick]];     }      // Make sure they are clear     [self.isClickedArray removeAllObjects];     [self.dataArray removeAllObjects];      // Remove all subviews     for (UIView *subview in self.subviews) {         [subview removeFromSuperview];     }      // Add cells     for (int xx = 0; xx &lt; [CollapseClickDelegate numberOfCellsForCollapseClick]; xx++) {         // Create Cell         CollapseClickCell *cell = [CollapseClickCell newCollapseClickCellWithTitle:[CollapseClickDelegate titleForCollapseClickAtIndex:xx] index:xx content:[CollapseClickDelegate viewForCollapseClickContentViewAtIndex:xx]];           // Set cell.TitleView's backgroundColor         if ([(id)CollapseClickDelegate respondsToSelector:@selector(colorForCollapseClickTitleViewAtIndex:)]) {             cell.TitleView.backgroundColor = [CollapseClickDelegate colorForCollapseClickTitleViewAtIndex:xx];         }         else {             cell.TitleView.backgroundColor = [UIColor colorWithWhite:0.4 alpha:1.0];         }           // Set cell.TitleLabel's Color         if ([(id)CollapseClickDelegate respondsToSelector:@selector(colorForTitleLabelAtIndex:)]) {             cell.TitleLabel.textColor = [CollapseClickDelegate colorForTitleLabelAtIndex:xx];         }         else {             cell.TitleLabel.textColor = [UIColor whiteColor];         }           // Set cell.TitleArrow's Color         if ([(id)CollapseClickDelegate respondsToSelector:@selector(colorForTitleArrowAtIndex:)]) {             [cell.TitleArrow drawWithColor:[CollapseClickDelegate colorForTitleArrowAtIndex:xx]];         }         else {             [cell.TitleArrow drawWithColor:[UIColor colorWithWhite:0.0 alpha:0.35]];         }          // Set cell.ContentView's size         cell.ContentView.frame = CGRectMake(0, kCCHeaderHeight + kCCPad, self.frame.size.width, cell.ContentView.frame.size.height);          // Set cell's size         cell.frame = CGRectMake(0, totalHeight, self.frame.size.width, kCCHeaderHeight);           // Add target to Button         [cell.TitleButton addTarget:self action:@selector(didSelectCollapseClickButton:) forControlEvents:UIControlEventTouchUpInside];          // Add cell         [self addSubview:cell];          // Add to DataArray &amp; isClickedArray         [self.isClickedArray addObject:[NSNumber numberWithBool:NO]];         [self.dataArray addObject:cell];          // Calculate totalHeight         totalHeight += kCCHeaderHeight + kCCPad;     }      // Set self's ContentSize and ContentOffset     [self setContentSize:CGSizeMake(self.frame.size.width, totalHeight)];     [self setContentOffset:CGPointZero]; } </code></pre>  <p>Any suggestion or answer would be appreciated. Thanks for your time.</p>