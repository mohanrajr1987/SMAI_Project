<p>I have a simple EJB, packaged with maven annotation "ejb". Currently - in its simple form - it looks like this:</p>  <pre><code>@Stateless @SecurityDomain("other") @RolesAllowed({ "guest" }) @PermitAll public class ReceptionService {   @PermitAll     public String welcome() {         return "Hello, Developer! No XML, No Configuration, and it works!";     } } </code></pre>  <p>The domain "other" and role "guest" is supposed to be provided in the default standalone.xml configuration I run, or at least google says so.</p>  <p>I deploy the ejb using the wildfly plugin with no errors, and it is visible and active in the management console.</p>  <p>So ... what's next? My vaadin webapp has the dependency to the ejb-project annotated as "provided" in pom.xml. If I remove "provided" the bean is included in war and part of the same deployment, hence security is no issue, everything works fine. But I want separate deployment of service layer and webapp, to speed up the development cycle a bit (there is quite a bit to be gained in my real-life project, if only I could get my hello-world-template-project up and running ...), and now I only get the message "Forbidden" in my vaadin app. Clearly I need to specify some security-parameters somewhere in my webapp as well, but how? Currently I use CDI to instantiate the bean:</p>  <pre><code>@Inject ReceptionService service; </code></pre>  <p>Adding a @Local interface to the ejb doesn't make any difference. Neither do using @EJB to inject it.</p>  <p>I want to go with as much annotation-based config as possible, and leave the xml-configuration in wildfly unchanged, as well as skipping stuff in web.xml and ejb-jar.xml if possible. If the wildfly config need to be changed, I'd prefer CLI-based instructions :) The general idea here is just to get it running, adding "real life" security later.</p>  <p>The stuff is running on Vaadin 7.5.6 and Wildly 9.0.1, btw.</p>