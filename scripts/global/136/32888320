<p>I have been recently looking into running javascript code in node.js in isolation.  The first thing that popped out has been the node <code>vm</code> module.  Many of the sandboxing modules on github/npm use it internally.  </p>  <p>In the vm documentation there is a <a href="https://nodejs.org/api/vm.html#vm_vm_runinnewcontext_code_sandbox_options" rel="nofollow">warning</a>:</p>  <blockquote>   <p>Note that running untrusted code is a tricky business requiring great   care. vm.runInNewContext is quite useful, but safely running untrusted   code requires a separate process.</p> </blockquote>  <p>Being new to security, and node.js in general, I was wondering the main exploits that could occur when this module is used.  If I provide a specific context, and am careful about that context, how is isolation not achieved?  Isn't that the whole point of <code>vm</code>?  If it's not, I'm not sure I understand the point of the <code>vm</code> module.</p>  <p>Why must untrusted code be ran in its own process to be ran securely. Is it because calling code  can access the full stacktrace at any time? Can JavaScript inspect frames of the stack and modify specific frames?  I understand that everyone recommends running in a seperate process, but I was interested in learning about specific exploits that should be considered.  </p>