<p>I've just come across the <code>MachineKey.Protect()</code> method. I've not seen this before (a contractor introduced it into the code base). It seems interesting but the <a href="https://msdn.microsoft.com/en-us/library/system.web.security.machinekey.protect(v=vs.110).aspx" rel="nofollow">documentation</a> on what it's doing is a little sparse.</p>  <p>I'm not really one for blindly following Microsoft's lead without a little investigation so I tried to find docs on <strong>how</strong> this works, what ciper does it use, how big is the key, how's the key generated, etc. But the doc's contain surprisingly little information and I couldn't find any other information on how this is implemented:</p>  <blockquote>   <p>This method supersedes the Encode method, which requires the caller to   specify whether the plaintext data should be encrypted, signed, or   both. The Protect method performs the <strong>appropriate operation</strong> and   securely protects the data. Ciphertext data produced by this method   can <strong>only be deciphered</strong> by the Unprotect method.</p>      <p>The purposes parameter is an optional list of reasons that can lock   the ciphertext to a specific purpose. This parameter lets you isolate   cryptographic operations performed by different subsystems within an   application. A malicious client should not be able to get the result   of one subsystem's Protect method and feed it as input to another   subsystem's Unprotect method, which could compromise application   security. The purposes parameter helps ensure that protected data can   only be used by the component that originally generated it.   Applications should make sure that each subsystem uses a unique   purposes list.</p> </blockquote>  <p>so can anyone shed some light on what cipher this uses to "protect" the data sent into it? Any best practice on usage would be useful too. When is this appropriate to use, when not, etc.?</p>