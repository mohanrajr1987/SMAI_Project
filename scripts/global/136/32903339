<p>I know this topic has been covered to death but I would like some feedback from the community regarding security within our web application.</p>  <p>We have standard LAMP stack web app which contains a large number of database queries which are executed using <code>mysqli_query</code>. These queries are not parameterized and at the moment but there is some naive escaping of the inputs using <code>addslashes</code>.</p>  <p>I have been tasked with making this system safer as we will be penetration tested very shortly. The powers above know that parameterized queries are the way to go to make the system safer however they don't want to invest the time and effort into re-writing all the queries in the application and also changing the framework we have to make them all work correctly.</p>  <p>So basically I'm asking what my options are here?</p>  <p>I've run <code>mysqli_real_escape_string</code> over the inputs. I've setup a filter which doesn't allow words like SELECT, WHERE, UNION to be passed in which I guess makes it safer. I know <code>mysqli_query</code> only allows one query to be run at once so there's some security there (from concatenating updates onto the end of of selects).</p>  <p>Do I have any other options here?</p>  <p>Edit: I should probably add that if anyone is able to provide an example of an attack which is completely unavoidable without parameterized queries that would also be helpful. We have a query which looks like this:</p>  <pre><code>SELECT pl.created p.LoginName, pl.username_entered, pl.ip_address FROM loginattempts pl LEFT JOIN people p ON p.PersonnelId = pl.personnel_id WHERE p.personnelid = $id AND pl.created &gt; $date1 AND pl.created &lt; $date2 </code></pre>  <p>I've substituted a UNION query into the $id <code>UNION SELECT * FROM p WHERE 1 = 1</code> sort of thing and I can prevent that by not allowing SELECT/UNION but then I'm sure there are countless other types of attack which I can't think of. Can anyone suggest a few more?</p>