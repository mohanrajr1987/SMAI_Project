<p>Suppose I have a Python dict of lists like so:</p>  <pre><code>{'Grp': ['2'   , '6'   , '6'   , '5'   , '5'   , '6'   , '6'   , '7'   , '7'   , '6'],  'Nums': ['6.20', '6.30', '6.80', '6.45', '6.55', '6.35', '6.37', '6.36', '6.78', '6.33']} </code></pre>  <p>I can easily group the numbers and group key using <a href="https://docs.python.org/2/library/itertools.html#itertools.groupby" rel="nofollow">itertools.groupby</a>:</p>  <pre><code>from itertools import groupby for k, l in groupby(zip(di['Grp'], di['Nums']), key=lambda t: t[0]):     print k, [t[1] for t in l] </code></pre>  <p>Prints:</p>  <pre><code>2 ['6.20'] 6 ['6.30', '6.80']      # one field, key=6 5 ['6.45', '6.55'] 6 ['6.35', '6.37']      # second 7 ['6.36', '6.78'] 6 ['6.33']              # third </code></pre>  <p>Note the <code>6</code> key is separated into three separate groups or fields .</p>  <p>Now suppose I have the equivalent Pandas DataFrame to my dict (same data, same list order and same keys):</p>  <pre><code>  Grp  Nums 0   2  6.20 1   6  6.30 2   6  6.80 3   5  6.45 4   5  6.55 5   6  6.35 6   6  6.37 7   7  6.36 8   7  6.78 9   6  6.33 </code></pre>  <p>If I use Pandas' <a href="http://pandas.pydata.org/pandas-docs/stable/groupby.html" rel="nofollow">groupby</a> I am not seeing how to get group by group iteration. Instead, Pandas groups by key value:</p>  <pre><code>for e in df.groupby('Grp'):     print e </code></pre>  <p>Prints:</p>  <pre><code>('2',   Grp  Nums 0   2  6.20) ('5',   Grp  Nums 3   5  6.45 4   5  6.55) ('6',   Grp  Nums 1   6  6.30             2   6  6.80                # df['Grp'][1:2] first field 5   6  6.35                # df['Grp'][5:6] second field 6   6  6.37                  9   6  6.33)               # df['Grp'][9] third field ('7',   Grp  Nums 7   7  6.36 8   7  6.78) </code></pre>  <p>Note are the <code>6</code> group keys are bunched together; not separate groups. </p>  <p>My question: Is there an equivalent way to use Pandas' groupby so that <code>6</code>, for example, would be in three groups in the same fashion as Python's <code>groupby</code>?</p>  <p>I tried this:</p>  <pre><code>&gt;&gt;&gt; df.reset_index().groupby('Grp')['index'].apply(lambda x: np.array(x)) Grp 2                [0] 5             [3, 4] 6    [1, 2, 5, 6, 9]         # I *could* do a second groupby on this... 7             [7, 8] Name: index, dtype: object </code></pre>  <p>But it is still grouped by overall <code>Grp</code> key and I would need to do a second groupby on the <code>nd.array</code> to split the sub groups of each key out. </p>