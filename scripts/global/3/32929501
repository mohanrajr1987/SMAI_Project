<p>So I'm hooking into an application api that returns a flat array of values - the order of the values defines the specific structure of data, and I'd like to be able to transform this array into an object that reflects this underlying structure.</p>  <p>Working backward, this is what I'd like to end up with:</p>  <pre><code>{"app_name":"app_X",  "affected_nodes" : [                        {"node_name":"node_X","node_id":"xxx"},                        {"node_name":"node_Y","node_id":"yyy"}                     ] } </code></pre>  <p>But this is what I'm given:</p>  <pre><code>["app_X","2","node_X","xxx","node_Y","yyy"] </code></pre>  <p>The actual data is much more complex, with multiple tiers of attribute arrays nested within each other. As you can see, I'm given the length of each nested attribute in the original flat array, represented in my example as <code>"2"</code>. I've started wrangling with transforming the flat array into a proper object structure and the whole business seems very inefficient and difficult to maintain. My approach currently looks something like this:</p>  <pre><code>var arr = ["app_X","2","node_X","xxx","node_Y","yyy"]; var obj = {};  obj.app_name = arr[0];  var num_nodes = arr[1];  obj.affected_nodes = [];  var position = 1;  for(var i = 0; i &lt; num_nodes; i++){     var sub_obj = {};     sub_obj.node_name = arr[position + 1];     sub_obj.node_id = arr[position + 2];     obj.affected_nodes.push(sub_obj);     position = position + 2; } </code></pre>  <p>This is working, but I feel like there may be a more efficient solution out there that hasn't occurred to me. Is there a better algorithm or perhaps library function to accomplish this sort of task?</p>