<p>I'm very close to having this work, but can't quite get past the last hurdle. I have the UI working and displaying properly. It's calling the correct endpoint, but I can't figure out how to extract the image from the request body. Here's what I have so far:</p>  <p>Template: </p>  <pre><code>&lt;template name="listingSubmit"&gt; &lt;form class="main form page"&gt;     {{&gt; dropzone url='http://localhost:3000/listings/imgUpload' id='dropzoneDiv'}}     &lt;input type="submit" value="Submit" class="btn btn-primary" /&gt; &lt;/form&gt; &lt;/template&gt; </code></pre>  <p>router.js:</p>  <pre><code>Router.route('/listings/imgUpload', {where: 'server', name: 'imgUpload'})     .post(function () {         console.log('dropped');         var body = this.request; // your file is in there. Do what you want with it.          console.log(body);  }); </code></pre>  <p>Here's the request:</p>  <pre><code>I20151002-22:19:53.149(-5)? { _readableState: I20151002-22:19:53.149(-5)?    { highWaterMark: 16384, I20151002-22:19:53.149(-5)?      buffer: [], I20151002-22:19:53.149(-5)?      length: 0, I20151002-22:19:53.150(-5)?      pipes: null, I20151002-22:19:53.150(-5)?      pipesCount: 0, I20151002-22:19:53.150(-5)?      flowing: false, I20151002-22:19:53.150(-5)?      ended: false, I20151002-22:19:53.150(-5)?      endEmitted: false, I20151002-22:19:53.150(-5)?      reading: false, I20151002-22:19:53.150(-5)?      calledRead: false, I20151002-22:19:53.150(-5)?      sync: true, I20151002-22:19:53.150(-5)?      needReadable: false, I20151002-22:19:53.150(-5)?      emittedReadable: false, I20151002-22:19:53.150(-5)?      readableListening: false, I20151002-22:19:53.151(-5)?      objectMode: false, I20151002-22:19:53.151(-5)?      defaultEncoding: 'utf8', I20151002-22:19:53.151(-5)?      ranOut: false, I20151002-22:19:53.151(-5)?      awaitDrain: 0, I20151002-22:19:53.151(-5)?      readingMore: false, I20151002-22:19:53.151(-5)?      decoder: null, I20151002-22:19:53.151(-5)?      encoding: null }, I20151002-22:19:53.151(-5)?   readable: true, I20151002-22:19:53.151(-5)?   domain: null, I20151002-22:19:53.151(-5)?   _events: { close: [Function] }, I20151002-22:19:53.151(-5)?   _maxListeners: 10, I20151002-22:19:53.151(-5)?   socket: I20151002-22:19:53.152(-5)?    { _connecting: false, I20151002-22:19:53.152(-5)?      _handle: I20151002-22:19:53.152(-5)?       { fd: null, I20151002-22:19:53.152(-5)?         writeQueueSize: 0, I20151002-22:19:53.152(-5)?         owner: [Circular], I20151002-22:19:53.152(-5)?         onread: [Function: onread], I20151002-22:19:53.152(-5)?         reading: true }, I20151002-22:19:53.152(-5)?      _readableState: I20151002-22:19:53.152(-5)?       { highWaterMark: 16384, I20151002-22:19:53.152(-5)?         buffer: [], I20151002-22:19:53.152(-5)?         length: 0, I20151002-22:19:53.152(-5)?         pipes: null, I20151002-22:19:53.153(-5)?         pipesCount: 0, I20151002-22:19:53.153(-5)?         flowing: false, I20151002-22:19:53.153(-5)?         ended: false, I20151002-22:19:53.153(-5)?         endEmitted: false, I20151002-22:19:53.153(-5)?         reading: true, I20151002-22:19:53.153(-5)?         calledRead: true, I20151002-22:19:53.153(-5)?         sync: false, I20151002-22:19:53.153(-5)?         needReadable: true, I20151002-22:19:53.153(-5)?         emittedReadable: false, I20151002-22:19:53.153(-5)?         readableListening: false, I20151002-22:19:53.153(-5)?         objectMode: false, I20151002-22:19:53.153(-5)?         defaultEncoding: 'utf8', I20151002-22:19:53.154(-5)?         ranOut: false, I20151002-22:19:53.154(-5)?         awaitDrain: 0, I20151002-22:19:53.154(-5)?         readingMore: false, I20151002-22:19:53.154(-5)?         decoder: null, I20151002-22:19:53.154(-5)?         encoding: null }, I20151002-22:19:53.154(-5)?      readable: true, I20151002-22:19:53.154(-5)?      domain: null, I20151002-22:19:53.154(-5)?      _events: I20151002-22:19:53.155(-5)?       { end: [Object], I20151002-22:19:53.155(-5)?         finish: [Function: onSocketFinish], I20151002-22:19:53.155(-5)?         _socketEnd: [Function: onSocketEnd], I20151002-22:19:53.155(-5)?         drain: [Object], I20151002-22:19:53.155(-5)?         timeout: [Function], I20151002-22:19:53.155(-5)?         error: [Function], I20151002-22:19:53.155(-5)?         close: [Object] }, I20151002-22:19:53.155(-5)?      _maxListeners: 10, I20151002-22:19:53.155(-5)?      _writableState: I20151002-22:19:53.156(-5)?       { highWaterMark: 16384, I20151002-22:19:53.156(-5)?         objectMode: false, I20151002-22:19:53.156(-5)?         needDrain: false, I20151002-22:19:53.156(-5)?         ending: false, I20151002-22:19:53.156(-5)?         ended: false, I20151002-22:19:53.156(-5)?         finished: false, I20151002-22:19:53.156(-5)?         decodeStrings: false, I20151002-22:19:53.156(-5)?         defaultEncoding: 'utf8', I20151002-22:19:53.156(-5)?         length: 0, I20151002-22:19:53.156(-5)?         writing: false, I20151002-22:19:53.156(-5)?         sync: true, I20151002-22:19:53.156(-5)?         bufferProcessing: false, I20151002-22:19:53.157(-5)?         onwrite: [Function], I20151002-22:19:53.157(-5)?         writecb: null, I20151002-22:19:53.157(-5)?         writelen: 0, I20151002-22:19:53.157(-5)?         buffer: [], I20151002-22:19:53.157(-5)?         errorEmitted: false }, I20151002-22:19:53.157(-5)?      writable: true, I20151002-22:19:53.157(-5)?      allowHalfOpen: true, I20151002-22:19:53.157(-5)?      onend: [Function], I20151002-22:19:53.157(-5)?      destroyed: false, I20151002-22:19:53.157(-5)?      bytesRead: 2071, I20151002-22:19:53.157(-5)?      _bytesDispatched: 0, I20151002-22:19:53.157(-5)?      _pendingData: null, I20151002-22:19:53.158(-5)?      _pendingEncoding: '', I20151002-22:19:53.158(-5)?      server: I20151002-22:19:53.158(-5)?       { domain: null, I20151002-22:19:53.158(-5)?         _events: [Object], I20151002-22:19:53.158(-5)?         _maxListeners: 10, I20151002-22:19:53.158(-5)?         _connections: 2, I20151002-22:19:53.158(-5)?         connections: [Getter/Setter], I20151002-22:19:53.158(-5)?         _handle: [Object], I20151002-22:19:53.159(-5)?         _usingSlaves: false, I20151002-22:19:53.159(-5)?         _slaves: [], I20151002-22:19:53.159(-5)?         allowHalfOpen: true, I20151002-22:19:53.159(-5)?         httpAllowHalfOpen: false, I20151002-22:19:53.159(-5)?         timeout: 5000, I20151002-22:19:53.159(-5)?         _connectionKey: '4:0.0.0.0:25345' }, I20151002-22:19:53.159(-5)?      _idleTimeout: 5000, I20151002-22:19:53.159(-5)?      _idleNext: I20151002-22:19:53.159(-5)?       { _connecting: false, I20151002-22:19:53.160(-5)?         _handle: [Object], I20151002-22:19:53.160(-5)?         _readableState: [Object], I20151002-22:19:53.160(-5)?         readable: true, I20151002-22:19:53.160(-5)?         domain: null, I20151002-22:19:53.160(-5)?         _events: [Object], I20151002-22:19:53.160(-5)?         _maxListeners: 10, I20151002-22:19:53.161(-5)?         _writableState: [Object], I20151002-22:19:53.161(-5)?         writable: true, I20151002-22:19:53.161(-5)?         allowHalfOpen: false, I20151002-22:19:53.161(-5)?         onend: null, I20151002-22:19:53.161(-5)?         destroyed: false, I20151002-22:19:53.161(-5)?         bytesRead: 981, I20151002-22:19:53.162(-5)?         _bytesDispatched: 174, I20151002-22:19:53.162(-5)?         _pendingData: null, I20151002-22:19:53.162(-5)?         _pendingEncoding: '', I20151002-22:19:53.162(-5)?         _idleTimeout: 30000, I20151002-22:19:53.162(-5)?         _idleNext: [Object], I20151002-22:19:53.162(-5)?         _idlePrev: [Circular], I20151002-22:19:53.163(-5)?         _idleStart: 1443842392399, I20151002-22:19:53.163(-5)?         _monotonicStartTime: 136301187, I20151002-22:19:53.163(-5)?         pipe: [Function], I20151002-22:19:53.163(-5)?         addListener: [Function: addListener], I20151002-22:19:53.163(-5)?         on: [Function: addListener], I20151002-22:19:53.163(-5)?         pause: [Function], I20151002-22:19:53.163(-5)?         resume: [Function], I20151002-22:19:53.163(-5)?         read: [Function], I20151002-22:19:53.164(-5)?         _consuming: true }, I20151002-22:19:53.164(-5)?      _idlePrev: { _idleNext: [Circular], _idlePrev: [Object] }, I20151002-22:19:53.164(-5)?      _idleStart: 1443842393086, I20151002-22:19:53.164(-5)?      _monotonicStartTime: 136301875, I20151002-22:19:53.164(-5)?      parser: I20151002-22:19:53.164(-5)?       { _headers: [], I20151002-22:19:53.164(-5)?         _url: '', I20151002-22:19:53.164(-5)?         onHeaders: [Function: parserOnHeaders], I20151002-22:19:53.164(-5)?         onHeadersComplete: [Function: parserOnHeadersComplete], I20151002-22:19:53.165(-5)?         onBody: [Function: parserOnBody], I20151002-22:19:53.165(-5)?         onMessageComplete: [Function: parserOnMessageComplete], I20151002-22:19:53.165(-5)?         socket: [Circular], I20151002-22:19:53.165(-5)?         incoming: [Circular], I20151002-22:19:53.165(-5)?         maxHeaderPairs: 2000, I20151002-22:19:53.165(-5)?         onIncoming: [Function] }, I20151002-22:19:53.165(-5)?      ondata: [Function], I20151002-22:19:53.165(-5)?      _paused: false, I20151002-22:19:53.165(-5)?      _httpMessage: I20151002-22:19:53.166(-5)?       { domain: null, I20151002-22:19:53.166(-5)?         _events: [Object], I20151002-22:19:53.166(-5)?         _maxListeners: 10, I20151002-22:19:53.166(-5)?         output: [], I20151002-22:19:53.166(-5)?         outputEncodings: [], I20151002-22:19:53.166(-5)?         writable: true, I20151002-22:19:53.166(-5)?         _last: false, I20151002-22:19:53.166(-5)?         chunkedEncoding: false, I20151002-22:19:53.166(-5)?         shouldKeepAlive: true, I20151002-22:19:53.167(-5)?         useChunkedEncodingByDefault: true, I20151002-22:19:53.167(-5)?         sendDate: true, I20151002-22:19:53.167(-5)?         _headerSent: false, I20151002-22:19:53.167(-5)?         _header: '', I20151002-22:19:53.167(-5)?         _hasBody: true, I20151002-22:19:53.167(-5)?         _trailer: '', I20151002-22:19:53.167(-5)?         finished: false, I20151002-22:19:53.167(-5)?         _hangupClose: false, I20151002-22:19:53.167(-5)?         socket: [Circular], I20151002-22:19:53.167(-5)?         connection: [Circular], I20151002-22:19:53.168(-5)?         _headers: [Object], I20151002-22:19:53.168(-5)?         _headerNames: [Object], I20151002-22:19:53.168(-5)?         write: [Function], I20151002-22:19:53.168(-5)?         end: [Function] } }, I20151002-22:19:53.168(-5)?   connection: I20151002-22:19:53.168(-5)?    { _connecting: false, I20151002-22:19:53.168(-5)?      _handle: I20151002-22:19:53.168(-5)?       { fd: null, I20151002-22:19:53.168(-5)?         writeQueueSize: 0, I20151002-22:19:53.168(-5)?         owner: [Circular], I20151002-22:19:53.168(-5)?         onread: [Function: onread], I20151002-22:19:53.169(-5)?         reading: true }, I20151002-22:19:53.169(-5)?      _readableState: I20151002-22:19:53.169(-5)?       { highWaterMark: 16384, I20151002-22:19:53.169(-5)?         buffer: [], I20151002-22:19:53.169(-5)?         length: 0, I20151002-22:19:53.169(-5)?         pipes: null, I20151002-22:19:53.169(-5)?         pipesCount: 0, I20151002-22:19:53.169(-5)?         flowing: false, I20151002-22:19:53.169(-5)?         ended: false, I20151002-22:19:53.169(-5)?         endEmitted: false, I20151002-22:19:53.169(-5)?         reading: true, I20151002-22:19:53.170(-5)?         calledRead: true, I20151002-22:19:53.170(-5)?         sync: false, I20151002-22:19:53.170(-5)?         needReadable: true, I20151002-22:19:53.170(-5)?         emittedReadable: false, I20151002-22:19:53.170(-5)?         readableListening: false, I20151002-22:19:53.170(-5)?         objectMode: false, I20151002-22:19:53.170(-5)?         defaultEncoding: 'utf8', I20151002-22:19:53.170(-5)?         ranOut: false, I20151002-22:19:53.170(-5)?         awaitDrain: 0, I20151002-22:19:53.170(-5)?         readingMore: false, I20151002-22:19:53.170(-5)?         decoder: null, I20151002-22:19:53.171(-5)?         encoding: null }, I20151002-22:19:53.171(-5)?      readable: true, I20151002-22:19:53.171(-5)?      domain: null, I20151002-22:19:53.171(-5)?      _events: I20151002-22:19:53.171(-5)?       { end: [Object], I20151002-22:19:53.171(-5)?         finish: [Function: onSocketFinish], I20151002-22:19:53.171(-5)?         _socketEnd: [Function: onSocketEnd], I20151002-22:19:53.171(-5)?         drain: [Object], I20151002-22:19:53.171(-5)?         timeout: [Function], I20151002-22:19:53.171(-5)?         error: [Function], I20151002-22:19:53.171(-5)?         close: [Object] }, I20151002-22:19:53.172(-5)?      _maxListeners: 10, I20151002-22:19:53.172(-5)?      _writableState: I20151002-22:19:53.172(-5)?       { highWaterMark: 16384, I20151002-22:19:53.172(-5)?         objectMode: false, I20151002-22:19:53.172(-5)?         needDrain: false, I20151002-22:19:53.172(-5)?         ending: false, I20151002-22:19:53.172(-5)?         ended: false, I20151002-22:19:53.172(-5)?         finished: false, I20151002-22:19:53.173(-5)?         decodeStrings: false, I20151002-22:19:53.173(-5)?         defaultEncoding: 'utf8', I20151002-22:19:53.173(-5)?         length: 0, I20151002-22:19:53.173(-5)?         writing: false, I20151002-22:19:53.267(-5)?         sync: true, I20151002-22:19:53.267(-5)?         bufferProcessing: false, I20151002-22:19:53.267(-5)?         onwrite: [Function], I20151002-22:19:53.267(-5)?         writecb: null, I20151002-22:19:53.268(-5)?         writelen: 0, I20151002-22:19:53.268(-5)?         buffer: [], I20151002-22:19:53.268(-5)?         errorEmitted: false }, I20151002-22:19:53.268(-5)?      writable: true, I20151002-22:19:53.268(-5)?      allowHalfOpen: true, I20151002-22:19:53.268(-5)?      onend: [Function], I20151002-22:19:53.268(-5)?      destroyed: false, I20151002-22:19:53.268(-5)?      bytesRead: 2071, I20151002-22:19:53.269(-5)?      _bytesDispatched: 0, I20151002-22:19:53.269(-5)?      _pendingData: null, I20151002-22:19:53.269(-5)?      _pendingEncoding: '', I20151002-22:19:53.269(-5)?      server: I20151002-22:19:53.269(-5)?       { domain: null, I20151002-22:19:53.269(-5)?         _events: [Object], I20151002-22:19:53.269(-5)?         _maxListeners: 10, I20151002-22:19:53.269(-5)?         _connections: 2, I20151002-22:19:53.269(-5)?         connections: [Getter/Setter], I20151002-22:19:53.269(-5)?         _handle: [Object], I20151002-22:19:53.269(-5)?         _usingSlaves: false, I20151002-22:19:53.270(-5)?         _slaves: [], I20151002-22:19:53.270(-5)?         allowHalfOpen: true, I20151002-22:19:53.270(-5)?         httpAllowHalfOpen: false, I20151002-22:19:53.270(-5)?         timeout: 5000, I20151002-22:19:53.270(-5)?         _connectionKey: '4:0.0.0.0:25345' }, I20151002-22:19:53.270(-5)?      _idleTimeout: 5000, I20151002-22:19:53.270(-5)?      _idleNext: I20151002-22:19:53.270(-5)?       { _connecting: false, I20151002-22:19:53.270(-5)?         _handle: [Object], I20151002-22:19:53.270(-5)?         _readableState: [Object], I20151002-22:19:53.271(-5)?         readable: true, I20151002-22:19:53.271(-5)?         domain: null, I20151002-22:19:53.271(-5)?         _events: [Object], I20151002-22:19:53.271(-5)?         _maxListeners: 10, I20151002-22:19:53.271(-5)?         _writableState: [Object], I20151002-22:19:53.271(-5)?         writable: true, I20151002-22:19:53.272(-5)?         allowHalfOpen: false, I20151002-22:19:53.272(-5)?         onend: null, I20151002-22:19:53.272(-5)?         destroyed: false, I20151002-22:19:53.272(-5)?         bytesRead: 981, I20151002-22:19:53.272(-5)?         _bytesDispatched: 174, I20151002-22:19:53.272(-5)?         _pendingData: null, I20151002-22:19:53.272(-5)?         _pendingEncoding: '', I20151002-22:19:53.272(-5)?         _idleTimeout: 30000, I20151002-22:19:53.272(-5)?         _idleNext: [Object], I20151002-22:19:53.272(-5)?         _idlePrev: [Circular], I20151002-22:19:53.272(-5)?         _idleStart: 1443842392399, I20151002-22:19:53.272(-5)?         _monotonicStartTime: 136301187, I20151002-22:19:53.273(-5)?         pipe: [Function], I20151002-22:19:53.273(-5)?         addListener: [Function: addListener], I20151002-22:19:53.273(-5)?         on: [Function: addListener], I20151002-22:19:53.273(-5)?         pause: [Function], I20151002-22:19:53.273(-5)?         resume: [Function], I20151002-22:19:53.273(-5)?         read: [Function], I20151002-22:19:53.273(-5)?         _consuming: true }, I20151002-22:19:53.273(-5)?      _idlePrev: { _idleNext: [Circular], _idlePrev: [Object] }, I20151002-22:19:53.273(-5)?      _idleStart: 1443842393086, I20151002-22:19:53.273(-5)?      _monotonicStartTime: 136301875, I20151002-22:19:53.273(-5)?      parser: I20151002-22:19:53.274(-5)?       { _headers: [], I20151002-22:19:53.274(-5)?         _url: '', I20151002-22:19:53.274(-5)?         onHeaders: [Function: parserOnHeaders], I20151002-22:19:53.274(-5)?         onHeadersComplete: [Function: parserOnHeadersComplete], I20151002-22:19:53.274(-5)?         onBody: [Function: parserOnBody], I20151002-22:19:53.274(-5)?         onMessageComplete: [Function: parserOnMessageComplete], I20151002-22:19:53.274(-5)?         socket: [Circular], I20151002-22:19:53.274(-5)?         incoming: [Circular], I20151002-22:19:53.274(-5)?         maxHeaderPairs: 2000, I20151002-22:19:53.274(-5)?         onIncoming: [Function] }, I20151002-22:19:53.274(-5)?      ondata: [Function], I20151002-22:19:53.274(-5)?      _paused: false, I20151002-22:19:53.275(-5)?      _httpMessage: I20151002-22:19:53.275(-5)?       { domain: null, I20151002-22:19:53.275(-5)?         _events: [Object], I20151002-22:19:53.275(-5)?         _maxListeners: 10, I20151002-22:19:53.275(-5)?         output: [], I20151002-22:19:53.275(-5)?         outputEncodings: [], I20151002-22:19:53.275(-5)?         writable: true, I20151002-22:19:53.275(-5)?         _last: false, I20151002-22:19:53.275(-5)?         chunkedEncoding: false, I20151002-22:19:53.276(-5)?         shouldKeepAlive: true, I20151002-22:19:53.276(-5)?         useChunkedEncodingByDefault: true, I20151002-22:19:53.276(-5)?         sendDate: true, I20151002-22:19:53.276(-5)?         _headerSent: false, I20151002-22:19:53.276(-5)?         _header: '', I20151002-22:19:53.276(-5)?         _hasBody: true, I20151002-22:19:53.276(-5)?         _trailer: '', I20151002-22:19:53.276(-5)?         finished: false, I20151002-22:19:53.276(-5)?         _hangupClose: false, I20151002-22:19:53.277(-5)?         socket: [Circular], I20151002-22:19:53.277(-5)?         connection: [Circular], I20151002-22:19:53.277(-5)?         _headers: [Object], I20151002-22:19:53.277(-5)?         _headerNames: [Object], I20151002-22:19:53.277(-5)?         write: [Function], I20151002-22:19:53.277(-5)?         end: [Function] } }, I20151002-22:19:53.277(-5)?   httpVersion: '1.1', I20151002-22:19:53.277(-5)?   complete: false, I20151002-22:19:53.277(-5)?   headers: I20151002-22:19:53.277(-5)?    { 'x-forwarded-proto': 'http', I20151002-22:19:53.277(-5)?      'x-forwarded-port': '3000', I20151002-22:19:53.277(-5)?      'x-forwarded-for': '127.0.0.1', I20151002-22:19:53.278(-5)?      'accept-language': 'en-US,en;q=0.8', I20151002-22:19:53.278(-5)?      'accept-encoding': 'gzip, deflate', I20151002-22:19:53.278(-5)?      referer: 'http://localhost:3000/submit', I20151002-22:19:53.278(-5)?      'x-requested-with': 'XMLHttpRequest', I20151002-22:19:53.278(-5)?      'cache-control': 'no-cache', I20151002-22:19:53.278(-5)?      accept: 'application/json', I20151002-22:19:53.278(-5)?      'content-type': 'multipart/form-data; boundary=----WebKitFormBoundary3V6QB3FPSQ8IzZtH', I20151002-22:19:53.278(-5)?      'user-agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrom I20151002-22:19:53.278(-5)?      origin: 'http://localhost:3000', I20151002-22:19:53.278(-5)?      'content-length': '189268', I20151002-22:19:53.278(-5)?      connection: 'keep-alive', I20151002-22:19:53.279(-5)?      host: 'localhost:3000' }, I20151002-22:19:53.279(-5)?   trailers: {}, I20151002-22:19:53.279(-5)?   _pendings: [], I20151002-22:19:53.279(-5)?   _pendingIndex: 0, I20151002-22:19:53.279(-5)?   url: '/listings/imgUpload', I20151002-22:19:53.279(-5)?   method: 'POST', I20151002-22:19:53.279(-5)?   statusCode: null, I20151002-22:19:53.279(-5)?   client: I20151002-22:19:53.279(-5)?    { _connecting: false, I20151002-22:19:53.279(-5)?      _handle: I20151002-22:19:53.279(-5)?       { fd: null, I20151002-22:19:53.279(-5)?         writeQueueSize: 0, I20151002-22:19:53.280(-5)?         owner: [Circular], I20151002-22:19:53.280(-5)?         onread: [Function: onread], I20151002-22:19:53.280(-5)?         reading: true }, I20151002-22:19:53.280(-5)?      _readableState: I20151002-22:19:53.280(-5)?       { highWaterMark: 16384, I20151002-22:19:53.280(-5)?         buffer: [], I20151002-22:19:53.280(-5)?         length: 0, I20151002-22:19:53.280(-5)?         pipes: null, I20151002-22:19:53.280(-5)?         pipesCount: 0, I20151002-22:19:53.280(-5)?         flowing: false, I20151002-22:19:53.280(-5)?         ended: false, I20151002-22:19:53.280(-5)?         endEmitted: false, I20151002-22:19:53.281(-5)?         reading: true, I20151002-22:19:53.281(-5)?         calledRead: true, I20151002-22:19:53.281(-5)?         sync: false, I20151002-22:19:53.281(-5)?         needReadable: true, I20151002-22:19:53.281(-5)?         emittedReadable: false, I20151002-22:19:53.281(-5)?         readableListening: false, I20151002-22:19:53.281(-5)?         objectMode: false, I20151002-22:19:53.281(-5)?         defaultEncoding: 'utf8', I20151002-22:19:53.281(-5)?         ranOut: false, I20151002-22:19:53.281(-5)?         awaitDrain: 0, I20151002-22:19:53.281(-5)?         readingMore: false, I20151002-22:19:53.282(-5)?         decoder: null, I20151002-22:19:53.282(-5)?         encoding: null }, I20151002-22:19:53.282(-5)?      readable: true, I20151002-22:19:53.282(-5)?      domain: null, I20151002-22:19:53.282(-5)?      _events: I20151002-22:19:53.282(-5)?       { end: [Object], I20151002-22:19:53.282(-5)?         finish: [Function: onSocketFinish], I20151002-22:19:53.282(-5)?         _socketEnd: [Function: onSocketEnd], I20151002-22:19:53.282(-5)?         drain: [Object], I20151002-22:19:53.282(-5)?         timeout: [Function], I20151002-22:19:53.282(-5)?         error: [Function], I20151002-22:19:53.282(-5)?         close: [Object] }, I20151002-22:19:53.283(-5)?      _maxListeners: 10, I20151002-22:19:53.283(-5)?      _writableState: I20151002-22:19:53.283(-5)?       { highWaterMark: 16384, I20151002-22:19:53.283(-5)?         objectMode: false, I20151002-22:19:53.283(-5)?         needDrain: false, I20151002-22:19:53.284(-5)?         errorEmitted: false }, I20151002-22:19:53.284(-5)?      writable: true, I20151002-22:19:53.284(-5)?      allowHalfOpen: true, I20151002-22:19:53.284(-5)?      onend: [Function], I20151002-22:19:53.284(-5)?      destroyed: false, I20151002-22:19:53.284(-5)?      bytesRead: 2071, I20151002-22:19:53.285(-5)?      _bytesDispatched: 0, I20151002-22:19:53.285(-5)?      _pendingData: null, I20151002-22:19:53.285(-5)?      _pendingEncoding: '', I20151002-22:19:53.285(-5)?      server: I20151002-22:19:53.285(-5)?       { domain: null, I20151002-22:19:53.285(-5)?         _events: [Object], I20151002-22:19:53.285(-5)?         _maxListeners: 10, I20151002-22:19:53.285(-5)?         _connections: 2, I20151002-22:19:53.285(-5)?         connections: [Getter/Setter], I20151002-22:19:53.285(-5)?         _handle: [Object], I20151002-22:19:53.285(-5)?         _usingSlaves: false, I20151002-22:19:53.286(-5)?         _slaves: [], I20151002-22:19:53.286(-5)?         allowHalfOpen: true, I20151002-22:19:53.286(-5)?         httpAllowHalfOpen: false, I20151002-22:19:53.286(-5)?         timeout: 5000, I20151002-22:19:53.286(-5)?         _connectionKey: '4:0.0.0.0:25345' }, I20151002-22:19:53.286(-5)?      _idleTimeout: 5000, I20151002-22:19:53.286(-5)?      _idleNext: I20151002-22:19:53.286(-5)?       { _connecting: false, I20151002-22:19:53.286(-5)?         _handle: [Object], I20151002-22:19:53.288(-5)?         read: [Function], I20151002-22:19:53.288(-5)?         _consuming: true }, I20151002-22:19:53.289(-5)?      _idlePrev: { _idleNext: [Circular], _idlePrev: [Object] }, I20151002-22:19:53.289(-5)?      _idleStart: 1443842393086, I20151002-22:19:53.289(-5)?      _monotonicStartTime: 136301875, I20151002-22:19:53.289(-5)?      parser: I20151002-22:19:53.289(-5)?       { _headers: [], I20151002-22:19:53.289(-5)?         _url: '', I20151002-22:19:53.289(-5)?         onHeaders: [Function: parserOnHeaders], I20151002-22:19:53.289(-5)?         onHeadersComplete: [Function: parserOnHeadersComplete], I20151002-22:19:53.289(-5)?         onBody: [Function: parserOnBody], I20151002-22:19:53.289(-5)?         onMessageComplete: [Function: parserOnMessageComplete], I20151002-22:19:53.289(-5)?         socket: [Circular], I20151002-22:19:53.289(-5)?         incoming: [Circular], I20151002-22:19:53.290(-5)?         maxHeaderPairs: 2000, I20151002-22:19:53.290(-5)?         onIncoming: [Function] }, I20151002-22:19:53.290(-5)?      ondata: [Function], I20151002-22:19:53.290(-5)?      _paused: false, I20151002-22:19:53.290(-5)?      _httpMessage: I20151002-22:19:53.290(-5)?       { domain: null, I20151002-22:19:53.392(-5)?         end: [Function] } }, I20151002-22:19:53.392(-5)?   _consuming: false, I20151002-22:19:53.393(-5)?   _dumped: false, I20151002-22:19:53.393(-5)?   httpVersionMajor: 1, I20151002-22:19:53.393(-5)?   httpVersionMinor: 1, I20151002-22:19:53.393(-5)?   upgrade: false, I20151002-22:19:53.393(-5)?   originalUrl: '/listings/imgUpload', I20151002-22:19:53.393(-5)?   _parsedUrl: I20151002-22:19:53.393(-5)?    { protocol: null, I20151002-22:19:53.393(-5)?      slashes: null, I20151002-22:19:53.393(-5)?      auth: null, I20151002-22:19:53.393(-5)?      host: null, I20151002-22:19:53.394(-5)?      port: null, I20151002-22:19:53.394(-5)?      hostname: null, I20151002-22:19:53.394(-5)?      hash: null, I20151002-22:19:53.394(-5)?      search: null, I20151002-22:19:53.394(-5)?      query: null, I20151002-22:19:53.394(-5)?      pathname: '/listings/imgUpload', I20151002-22:19:53.395(-5)?      path: '/listings/imgUpload', I20151002-22:19:53.395(-5)?      href: '/listings/imgUpload' }, I20151002-22:19:53.395(-5)?   query: {}, I20151002-22:19:53.395(-5)?   body: {} } </code></pre>  <p>I don't see a file anywhere in there... what am I missing? In the browser console, the request looks fine, like there's a file there:</p>  <pre><code>Accept:application/json Accept-Encoding:gzip, deflate Accept-Language:en-US,en;q=0.8 Cache-Control:no-cache Connection:keep-alive Content-Length:189268 Content-Type:multipart/form-data; boundary=----WebKitFormBoundary3V6QB3FPSQ8IzZtH Host:localhost:3000 Origin:http://localhost:3000 Referer:http://localhost:3000/submit User-Agent:Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36 X-Requested-With:XMLHttpRequest Request Payload ------WebKitFormBoundary3V6QB3FPSQ8IzZtH Content-Disposition: form-data; name="file"; filename="02.jpg" Content-Type: image/jpeg   ------WebKitFormBoundary3V6QB3FPSQ8IzZtH-- </code></pre>