<p>I have two nested arrays:</p>  <pre><code>array1 = [[String_1, [String_2, [String_3.1, String_3.2, …]…]…] String_4…] array2 = [[String_3.1, [String_3.1.1, String_3.1.2]], [String_3.2, [String_3.2.1, String_3.2.2]]] </code></pre>  <p>I need to replace String_3.1 in <code>array1</code> with the matching part of <code>array2</code>:</p>  <pre><code>[String_3.1, [String_3.1.1, String_3.1.2]] </code></pre>  <p>This whole part should slip into the position of String_3.1 in <code>array1</code>.</p>  <p>I can't access the values to exchange by the <code>find_index</code> method because they are buried in the structure. I cannot flatten the array because the structure needs to stay intact.</p>  <p>I tried an approach with a recursive function:</p>  <pre><code>def find_insert_point(array1)   array1.each do |value|     if value.is_a?(Array) == true       find_insert_point(value)       puts "#{value}" if value.class == String     end   end end </code></pre>  <p>This iterates through the entries without flattening the array. But I cannot use <code>map!</code> to alter the underlying real <code>array1</code> structure while iterating over <code>array2</code> data (not included in the code).</p>  <p>Is there any way to search for a specific index (e.g. by string) in a nested array with multiple levels and exchange a hit with other data (e.g. a sub-array)?</p>