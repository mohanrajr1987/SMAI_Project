<p>I am building an inverted index in Java. I already have the structure populated with data from files read. Now I want sort all three levels of the structure and then create an unmodifiable copy of it to return to another class for writing it to a file. Ideally I could use the <code>Collections.sort()</code> and the <code>Collections.unmodifiableSet()</code> / <code>Collections.unmodifiableMap()</code> functions. And no, I do not want to use a TreeSet.</p>  <p>Current code:</p>  <pre><code>public HashMap&lt;String, HashMap&lt;Path, HashSet&lt;Integer&gt;&gt;&gt; getInvertedIndex() {      // sortInvertedIndex();     HashMap&lt;String, HashMap&lt;Path, HashSet&lt;Integer&gt;&gt;&gt; copyOfInvertedIndex = null;      // Set&lt;String&gt; words = invertedIndex.keySet();     Set&lt;Entry&lt;String, HashMap&lt;Path, HashSet&lt;Integer&gt;&gt;&gt;&gt; m = invertedIndex.entrySet();      // copyOfInvertedIndex = Collections.unmodifiableMap(invertedIndex);     return copyOfInvertedIndex; }  public void sortInvertedIndex() {      // List words = new List();     // Collections.addAll(words, invertedIndex.keySet());     // invertedIndex.keySet();     // // SortedSet&lt;String&gt; keys = new TreeSet&lt;String&gt;(myHashMap.keySet());     // // SortedSet&lt;String&gt; values = new     // TreeSet&lt;String&gt;(myHashMap.values());     // Collections.sort(list);  } </code></pre>