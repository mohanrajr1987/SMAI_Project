<p>I'm running a windows service using python 2.7.9. As part of it i'm trying to connect to a server using HTTPS. I'm using requests model (2.7.0) to do it. I'm also using wincertstore (0.2) model to read windows certificate store and use it as the CA. the server certificate is singed using an intermediate certificate in the following order -</p>  <p>Root is "Go Daddy Root Certificate Authority - G2" </p>  <p>Intermediate is "Go Daddy Secure Certificate Authority - G2"</p>  <p>The server certificate "*.demoserver.com"</p>  <p>My problem is that the certificate validation fails with the following error - SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:581).</p>  <p>Here is the code i'm using:</p>  <pre><code>import requests import wincertstore ca = wincertstore.CertFile() ca.addcerts('ROOT') ca.addcerts('CA') requests.get('https://server.demoserver.com', verify=ca.name) </code></pre>  <p>If I open it on Chrome\Firefox\IE the verification is successful. I did notice the following behavior:</p>  <p>On a fresh OS, if i open the server using a browser for the first time the intermediate certificate ("Go Daddy Secure Certificate Authority - G2") will be added to Windows certificate store, under that user, under Intermediate Certification Authorities. If then I will run the code above from a python console the validation will work, since the certificate was added to windows store. However, since my code is run as a service, and that means using SYSTEM user and local machine store, the certificate won't be there and the validation will fail.</p>  <p>My question is how do I make it work? How can I tell python to check the entire chain, I think it checks the server certificate, sees only one level up (the intermediate certificate), doesn't recognizes it and fails, even though the root certificate is found in the system store also.</p>  <p>I also tried using certifi as the CA which also fails</p>