<p>I have an SBT Scala multi-project with the following structure:</p>  <pre><code>multiprojectRoot             project/SharedProjectBuildCode.scala     project1         src/sourceFiles         project1-build.sbt     project2         src/sourceFiles         project2-build.sbt     projectN         src/sourceFiles         projectN-build.sbt </code></pre>  <ul> <li><p>multiprojectRoot/project/SharedProjectBuildCode.scala: contains multi-project definitions that use dependsOn to create dependencies on local projects. For example:</p>  <pre><code>lazy val project2 = Project(     ... ).dependsOn(project1) </code></pre></li> <li><p>multiprojectRoot/project2/project2-build.sbt: Contains the settings and dependencies for a given project. For example:</p>  <pre><code>name := "project2"  libraryDependencies ++= Seq(                     ...           "my.company" % "project1" % "1.0" ) </code></pre></li> </ul>  <p>First dependency to project1 is declared with dependsOn on  SharedProjectBuildCode.scala file and the second is created on standalone project2-build.sbt build definition file.</p>  <p>So, project2 definition contains either:</p>  <ul> <li>an ambiguous dependency to project1 or </li> <li>a double dependency to project1</li> </ul>  <p>We want to keep this project structure, because is the best for our current workflow: </p>  <ul> <li>Independent .sbt files serve standalone deployment purposes for each project on our continuous delivery server. </li> <li>Multi-project .scala file with dependsOn is used to facilitate development, allowing us to avoid things such as continuous publishLocal.</li> </ul>  <p>We need to have control for such dependency ambiguities someway. Can you help me? </p>