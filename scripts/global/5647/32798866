<p>I'm writing C++ project made of few files on Linux. The project have no subdirectories.</p>  <p>I wanted like to have some as simple as possible, generic build script.</p>  <p>By generic, I mean that I don't want to hardcode file names, so that when I put new <code>.cpp</code> file into project, I don't have to modify build script. It should find and compile all modyfied source files in current directory, and link object files into executable. Nothing more.</p>  <p>I don't care about tool you'll use, since I don't know any yet.</p>  <p>I don't want to learn a tool from basics to write something as simple as that. For now, I just need a code, I'll learn when I'll need something more fancy.</p>  <h1>What I tryed</h1>  <h2><code>make</code>:</h2>  <pre><code>a.out: %.o     $(CXX) %.o  %.o: %.cpp     $(CXX) -Wall -c %.cpp </code></pre>  <p>with no success:</p>  <pre><code>make: *** Brak regu≈Ç do zrobienia obiektu `%.o', wymaganego przez `a.out'. Stop. </code></pre>  <p>my translation of this message:</p>  <pre><code>make: *** No rules to make object `%.o', required by `a.out'. Stop. </code></pre>  <p>Before someone will ask, I'll answer: yes, my makefile is indented with 1 tab, not with spaces.</p>  <p><code>make -d</code> prints out 664 lines, so I won't paste it here.</p>  <h2><code>scons</code>:</h2>  <pre><code>Program("main.cpp") </code></pre>  <p>It's copyed from some StackOverflow answer, but it is definietly intended to build a executable from one source file, because I get linker errors when I want use it.</p>  <p>I ended us using bash:</p>  <pre><code>g++ -Wall *.cpp </code></pre>  <p>Simple. Does the job well... for now. I don't think it's elegant and I know it's probably inefficent, because it recompiles everything, even unmodyfied files.</p>