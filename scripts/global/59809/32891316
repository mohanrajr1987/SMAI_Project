<p>This project is implemented for a single file to be browsed and get the file path . </p>  <p>i want to select multiple files inside any folder on device external storage . </p>  <p>i am new to Android development . It will be very much appreciated to solve this issue. Thanks</p>  <p>here is my code with single file selection :</p>  <p><strong>Mainactivity.java</strong></p>  <pre><code>package com.example.andeval;   import java.io.File; import android.os.Bundle; import android.app.Activity; import android.content.Intent; import android.view.View; import android.view.View.OnClickListener; import android.widget.Button; import android.widget.TextView;  public class MainActivity extends Activity implements OnClickListener {  private static final int REQUEST_PICK_FILE = 1;  private TextView filePath; private Button Browse; private File selectedFile;  @Override public void onCreate(Bundle savedInstanceState) {     super.onCreate(savedInstanceState);     setContentView(R.layout.activity_main);      filePath = (TextView)findViewById(R.id.file_path);     Browse = (Button)findViewById(R.id.browse);     Browse.setOnClickListener(this);       }  public void onClick(View v) {      switch(v.getId()) {      case R.id.browse:         Intent intent = new Intent(this, FilePicker.class);                     startActivityForResult(intent, REQUEST_PICK_FILE);         break;     } }  @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) {      if(resultCode == RESULT_OK) {          switch(requestCode) {          case REQUEST_PICK_FILE:              if(data.hasExtra(FilePicker.EXTRA_FILE_PATH)) {                  selectedFile = new File                         (data.getStringExtra(FilePicker.EXTRA_FILE_PATH));                 filePath.setText(selectedFile.getPath());               }             break;         }     } } } </code></pre>  <p><strong>FilePicker.java</strong></p>  <pre><code>package com.example.andeval;   import java.io.File; import java.io.FilenameFilter; import java.util.ArrayList; import java.util.Collections; import java.util.Comparator; import java.util.List; import android.app.ListActivity; import android.content.Context; import android.content.Intent; import android.os.Bundle; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.ArrayAdapter; import android.widget.ImageView; import android.widget.ListView; import android.widget.TextView;  public class FilePicker extends ListActivity {     public final static String EXTRA_FILE_PATH = "file_path";    public final static String EXTRA_SHOW_HIDDEN_FILES = "show_hidden_files";    public final static String EXTRA_ACCEPTED_FILE_EXTENSIONS = "accepted_file_extensions";    private final static String DEFAULT_INITIAL_DIRECTORY = "/";     protected File Directory;    protected ArrayList&lt;File&gt; Files;    protected FilePickerListAdapter Adapter;    protected boolean ShowHiddenFiles = false;    protected String[] acceptedFileExtensions;     @Override    protected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);     LayoutInflater inflator = (LayoutInflater)          getSystemService(Context.LAYOUT_INFLATER_SERVICE);     View emptyView = inflator.inflate(R.layout.empty_view, null);    ((ViewGroup) getListView().getParent()).addView(emptyView);    getListView().setEmptyView(emptyView);     // Set initial directory    Directory = new File(DEFAULT_INITIAL_DIRECTORY);     // Initialize the ArrayList    Files = new ArrayList&lt;File&gt;();     // Set the ListAdapter    Adapter = new FilePickerListAdapter(this, Files);    setListAdapter(Adapter);     // Initialize the extensions array to allow any file extensions    acceptedFileExtensions = new String[] {};     // Get intent extras    if(getIntent().hasExtra(EXTRA_FILE_PATH))      Directory = new File(getIntent().getStringExtra(EXTRA_FILE_PATH));     if(getIntent().hasExtra(EXTRA_SHOW_HIDDEN_FILES))      ShowHiddenFiles = getIntent().getBooleanExtra(EXTRA_SHOW_HIDDEN_FILES, false);     if(getIntent().hasExtra(EXTRA_ACCEPTED_FILE_EXTENSIONS)) {         ArrayList&lt;String&gt; collection =              getIntent().getStringArrayListExtra(EXTRA_ACCEPTED_FILE_EXTENSIONS);         acceptedFileExtensions = (String[])              collection.toArray(new String[collection.size()]);    }    }     @Override    protected void onResume() {    refreshFilesList();    super.onResume();    }     protected void refreshFilesList() {     Files.clear();    ExtensionFilenameFilter filter =          new ExtensionFilenameFilter(acceptedFileExtensions);     File[] files = Directory.listFiles(filter);     if(files != null &amp;&amp; files.length &gt; 0) {         for(File f : files) {             if(f.isHidden() &amp;&amp; !ShowHiddenFiles) {                 continue;            }             Files.add(f);        }         Collections.sort(Files, new FileComparator());    }     Adapter.notifyDataSetChanged();    }     @Override    public void onBackPressed() {     if(Directory.getParentFile() != null) {         Directory = Directory.getParentFile();        refreshFilesList();        return;    }     super.onBackPressed();    }     @Override    protected void onListItemClick(ListView l, View v, int position, long id) {     File newFile = (File)l.getItemAtPosition(position);     if(newFile.isFile()) {      Intent extra = new Intent();        extra.putExtra(EXTRA_FILE_PATH, newFile.getAbsolutePath());        setResult(RESULT_OK, extra);        finish();    }     else {         Directory = newFile;        refreshFilesList();    }     super.onListItemClick(l, v, position, id);    }     private class FilePickerListAdapter extends ArrayAdapter&lt;File&gt; {     private List&lt;File&gt; mObjects;     public FilePickerListAdapter(Context context, List&lt;File&gt; objects) {         super(context, R.layout.list_item, android.R.id.text1, objects);        mObjects = objects;    }     @Override    public View getView(int position, View convertView, ViewGroup parent) {         View row = null;         if(convertView == null) {              LayoutInflater inflater = (LayoutInflater)                  getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);             row = inflater.inflate(R.layout.list_item, parent, false);        }         else             row = convertView;         File object = mObjects.get(position);         ImageView imageView = (ImageView)row.findViewById(R.id.file_picker_image);        TextView textView = (TextView)row.findViewById(R.id.file_picker_text);        textView.setSingleLine(true);        textView.setText(object.getName());         if(object.isFile())             imageView.setImageResource(R.drawable.file);          else             imageView.setImageResource(R.drawable.folder);         return row;    }    }     private class FileComparator implements Comparator&lt;File&gt; {     public int compare(File f1, File f2) {         if(f1 == f2)             return 0;         if(f1.isDirectory() &amp;&amp; f2.isFile())             // Show directories above files            return -1;         if(f1.isFile() &amp;&amp; f2.isDirectory())             // Show files below directories            return 1;         // Sort the directories alphabetically        return f1.getName().compareToIgnoreCase(f2.getName());    }    }     private class ExtensionFilenameFilter implements FilenameFilter {     private String[] Extensions;     public ExtensionFilenameFilter(String[] extensions) {         super();        Extensions = extensions;    }     public boolean accept(File dir, String filename) {         if(new File(dir, filename).isDirectory()) {             // Accept all directory names            return true;        }         if(Extensions != null &amp;&amp; Extensions.length &gt; 0) {             for(int i = 0; i &lt; Extensions.length; i++) {                 if(filename.endsWith(Extensions[i])) {                     // The filename ends with the extension                    return true;                }            }            // The filename did not match any of the extensions            return false;        }        // No extensions has been set. Accept all file extensions.        return true;    }    } } </code></pre>  <p><strong>activity_main.xml</strong></p>  <pre><code>&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="match_parent" android:layout_height="match_parent" &gt;  &lt;Button      android:layout_width="wrap_content"     android:layout_height="wrap_content"     android:layout_centerHorizontal="true"     android:layout_marginTop="100dp"     android:id="@+id/browse"     android:text="Browse" /&gt;  &lt;TextView     android:layout_width="wrap_content"     android:layout_height="wrap_content"     android:layout_below="@+id/browse"     android:layout_marginTop="20dp"     android:id="@+id/selected"     android:textStyle="bold"     android:textColor="#4189E1"     android:textSize="20sp"     android:text="Selected file" /&gt;  &lt;TextView     android:layout_width="wrap_content"     android:layout_height="wrap_content"     android:layout_below="@+id/selected"     android:layout_marginTop="20dp"     android:id="@+id/file_path"     android:text="No file has been selected"     android:textSize="18sp" /&gt; </code></pre>  <p></p>  <p><strong>empty_view.xml</strong></p>  <pre><code>&lt;TextView xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="match_parent" android:layout_height="match_parent" android:text="No files or directories" android:background="@android:drawable/toast_frame" android:textSize="28sp" android:gravity="center_vertical|center_horizontal" /&gt; </code></pre>  <p><strong>list_item.xml</strong></p>  <pre><code>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="match_parent" android:layout_height="wrap_content" android:orientation="horizontal" &gt;  &lt;ImageView     android:id="@+id/file_picker_image"     android:layout_width="40dip"     android:layout_height="40dip"     android:layout_marginTop="5dip"     android:layout_marginBottom="5dip"     android:layout_marginLeft="5dip"     android:src="@drawable/ic_launcher"     android:scaleType="centerCrop" /&gt;  &lt;TextView     android:id="@+id/file_picker_text"     android:layout_width="wrap_content"     android:layout_height="wrap_content"     android:layout_weight="1"     android:layout_gravity="left|center_vertical"     android:textSize="28sp"     android:layout_marginLeft="10dip"     android:singleLine="true"     android:text="Filename" /&gt;  &lt;/LinearLayout&gt; </code></pre>  <p><strong>AndroidManifest.xml</strong></p>  <pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.example.andeval" android:versionCode="1" android:versionName="1.0" &gt;  &lt;uses-sdk     android:minSdkVersion="8"     android:targetSdkVersion="18" /&gt;  &lt;application     android:allowBackup="true"     android:icon="@drawable/ic_launcher"     android:label="@string/app_name"     android:theme="@style/AppTheme" &gt;     &lt;activity         android:name=".MainActivity"         android:label="@string/app_name" &gt;         &lt;intent-filter&gt;             &lt;action android:name="android.intent.action.MAIN" /&gt;              &lt;category android:name="android.intent.category.LAUNCHER" /&gt;         &lt;/intent-filter&gt;     &lt;/activity&gt;       &lt;activity android:name=".FilePicker"&gt;&lt;/activity&gt; &lt;/application&gt; </code></pre>  <p></p>  <p>How can i Add Multiple file check and load their file paths in order to further read them one by one.. please help me this i want to select a folder and it should provide the file path of all the files inside that folder . </p>  <p>or</p>  <p>if the folder is opened and showing all files i could select each file and show their file paths . only selected files. ?? i found nothing in this regard on internet.</p>