<p>I have to find maximum sum starting from root node to the leaf node. I have come up with the following node but it does not give correct output. The tree can have more than 2 child nodes (it is not a binary tree).</p>  <pre><code>public static long findBestPath(Path path) {     long max = 0, sum = 0;     if (path.getChildren().size() == 0)         return path.getValue();     else if (path.getChildren().size() == 1)         return path.getValue() + findBestPath(path.getChildren().get(0));     else {         for (int i = 0; i &lt; path.getChildren().size(); i++) {             sum = path.getChildren().get(i).getValue() + findBestPath(path.getChildren().get(i));             if (sum &gt; max)                 max = sum;         }         return max;     } } </code></pre>  <p>I used another method to solve my problem. Though it would be good to know correct solution to find path with max sum for a non-binary tree.</p>