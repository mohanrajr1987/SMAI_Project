<p>I've been asked to compute the average depth of a node in both a binary search tree, and an AVL tree. Through some research, I found that the average depth of a tree is the internal path length divided by the number of nodes in a tree, and that the internal path length (the sum of the path lengths of every node in the tree) is given by this recurrence:</p>  <pre><code>D(1) = 0, D(N) = D(i) + D(N − i − 1) + N − 1 </code></pre>  <p>where D(N) is a tree with N nodes, D(i), is the IPL of the left subtree, and D(N-i-1) is the IPL of the right subtree.</p>  <p>Using that, I wrote this function:</p>  <pre><code>int internalPathLength(Node *t, int&amp; sum) const{         if(t == nullptr || (t-&gt;left == nullptr &amp;&amp; t-&gt;right == nullptr)) {             return 0;         }         else {             int a = 0;             sum += internalPathLength(t-&gt;left, sum) + internalPathLength(t-&gt;right, sum) + (countNodes(t,a)-1);             cout &lt;&lt; sum &lt;&lt; endl;             return sum;         } </code></pre>  <p>This function gives me, with a binary search tree of 565 nodes, an IPL of 1,264,875,230 and an average depth of 2,238,717, a preposterously high number. Using it on an AVL tree of similar size gives me an IPL of -1,054,188,525 and an average depth of -1,865,820, which is a negative number on top of being preposterously high. Is there something wrong my interpretation/implementation of the recurrence? what else can I try? Or are the values I'm getting in the normal range for this computation after all?</p>