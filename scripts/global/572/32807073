<p>Im trying to implement a tree that stores the vector of children at a given node. I've implemented the <code>find_index</code> function that finds nodes. It has two arguments: <code>Node * cur</code> and some <code>key</code>. I'm trying to use this function while working on <code>insert</code>, but I don't know what <code>Node*</code> to search for. Such a node must exist, but I don't know which one to call <code>find_index</code> with. Also I don't know if my functions are working properly. Thanks in advance.</p>  <pre><code>#include &lt;iostream&gt; #include &lt;vector&gt; using namespace std; class Node{     public:     Node *parent;     vector &lt; Node* &gt; children;     string key;     Node(){         parent=NULL;     } }; class tree{     public:     int size;         tree(){             size=0;         }     Node* find_index(Node *cur,string key){         Node *tmp;         if(cur-&gt;key==key){             tmp=cur;             }         if(cur==NULL){             tmp=NULL;         }         for(int i=0;i&lt;cur-&gt;children.size();i++){             find_index(cur-&gt;children[i],key);         }         return tmp;     }     void  add(){          string father,son;         while(cin&gt;&gt;father&gt;&gt;son){             if(find_index(?,father)==NULL){//I don't know what node to put instead of question mark and is my function working                 size++;                 Node *newnode=new Node();                 newnode-&gt;key=father;                 newnode-&gt;parent=NULL;             }             else if(find_index(t,son)==NULL){                 size++;                 Node *newnode1=new Node();                 newnode1-&gt;key=son;                 newnode1-&gt;parent-&gt;children.push_back(newnode1);             }             else{                 Node *newnode2=new Node();                 newnode2-&gt;key=father;                 Node *newnode3=new Node();                 newnode3-&gt;key=son;                 newnode2-&gt;children.push_back(newnode3);                 newnode3-&gt;parent=newnode2;               }         }     } };    </code></pre>