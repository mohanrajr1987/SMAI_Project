<p>I'm struggling to set a property AdjustWidth and I want this to increase the width of a tree I add to the tree. I can add nodes (scenarios) to the tree but then I have to adjust the window myself, and the initial width of the window starts at a specified width and I want the width to be enough just for the specific number of nodes shown on the window. I am wondering how to set a property to adjust the width depending on the number of nodes shown?</p>  <pre><code>        private readonly CognitiveTreeBuilderViewModel viewModel;     private CognitiveTreeMode mode;     private CognitiveTreeMode autoWidth;     private readonly IDiagramBuilder builder;      public CognitiveTreeBuilder()     {         InitializeComponent();          var diagramFacade = new DiagramFacade(diagramModel);         var pointTrackingService = new PointTracker(new Point(20, 200), new Point(20, 50), new Point(126, 16), new Point(20, 16), new Point(0, 16));         var templateCollection = new TemplateCollection();          AddTemplates(templateCollection);         builder = new DiagramBuilder(diagramFacade, pointTrackingService, templateCollection) {Mode = mode};         this.viewModel = new CognitiveTreeBuilderViewModel(builder);         DataContext = viewModel;     }      public void Bind(CognitiveTreeRoot root)     {         viewModel.Bind(root);     }      public CognitiveTreeMode Mode     {         get { return mode; }         set         {             mode = value;             if (builder != null)             {                 builder.Mode = mode;             }         }     }      public CognitiveTreeMode AutoWidth     {         get { return autoWidth; }         set         {          }     }      private void AddTemplates(TemplateCollection templateCollection)     {         var keyCollection = templateCollection.Keys.ToArray();         foreach (var key in keyCollection)         {             templateCollection[key] = (DataTemplate) this.FindResource(key);         }     }      private void CreateScenario_OnClick(object sender, RoutedEventArgs e)     {         var propertyNode = GetContextNode&lt;PropertyNode&gt;(sender);         this.viewModel.CreateScenario(propertyNode);     }      private void CreateParallelScenario_OnClick(object sender, RoutedEventArgs e)     {         var scenarioNode = GetContextNode&lt;ScenarioNode&gt;(sender);         this.viewModel.CreateScenario(scenarioNode.Parent);     }      private void RenameScenario_OnClick(object sender, RoutedEventArgs e)     {         var scenarioNode = GetContextNode&lt;ScenarioNode&gt;(sender);         this.viewModel.RenameScenario(scenarioNode);     }      private void EditingTextBox_KeyDown(object sender, KeyEventArgs e)     {         if (!e.Key.Equals(Key.Enter)) return;         var textBox = sender as TextBox;         var scenarioNode = textBox.DataContext as ScenarioNode;         this.viewModel.RenameScenario(scenarioNode);     }      private void RemoveProperty_OnClick(object sender, RoutedEventArgs e)     {         var propertyNode = GetContextNode&lt;PropertyNode&gt;(sender);         propertyNode.Remove();         this.viewModel.Rebuild();     }      private void RemoveScenario_OnClick(object sender, RoutedEventArgs e)     {         var scenarioNode = GetContextNode&lt;ScenarioNode&gt;(sender);         scenarioNode.Remove();         this.viewModel.Rebuild();     }      private static T GetContextNode&lt;T&gt;(object sender) where T : TreeNode      {         var menuItem = sender as MenuItem;         var node = menuItem.DataContext as Node;         return node.Content as T;     }      private void ButtonBase_OnClick(object sender, RoutedEventArgs e)     {         var button = sender as Button;         var propertyNode = button.DataContext as PropertyNode;         this.viewModel.ToggleExpanded(propertyNode);     }      private void Selector_OnSelectionChanged(object sender, SelectionChangedEventArgs e)     {         var listBox = sender as ListBox;         if (listBox.SelectedItems.Count == 0)         {             return;         }         var item = listBox.SelectedItems[0] as PropertyNode;         var treeRoot = listBox.DataContext as CognitiveTreeRoot;         treeRoot.AddChild(item);         this.viewModel.Rebuild();     }      private void AddScenarioButton_OnClick(object sender, RoutedEventArgs e)     {         var button = sender as Button;         var propertyNode = button.DataContext as PropertyNode;         this.viewModel.CreateScenario(propertyNode);     }      private void Diagram_MouseMove(object sender, MouseEventArgs e)     {         System.Windows.Point mouseXPosition = e.GetPosition(diagramControl);         this.viewModel.DisplayAddScenarioButton(mouseXPosition.X);     } } </code></pre>  <p><strong>XAML</strong></p>  <pre><code>&lt;UserControl.Resources&gt;      &lt;BooleanToVisibilityConverter x:Key="AddButtonVisibilityConverter"/&gt;     &lt;converters:ImageToSourceConverter x:Key="ImageToSourceConverter" /&gt;     &lt;localconverters:OppositeBooleanConverter x:Key="OppositeBooleanConverter" /&gt;     &lt;localconverters:ProbabilityDisplayConverter x:Key="ProbabilityDisplayConverter" /&gt;      &lt;BitmapImage x:Key="ImageBkgEmpty" UriSource="Images/bkg_empty.png" /&gt;     &lt;BitmapImage x:Key="ImageBkgMinus" UriSource="Images/bkg_minus.png" /&gt;     &lt;BitmapImage x:Key="ImageBkgPlus" UriSource="Images/bkg_plus.png" /&gt;      &lt;Style x:Key="ChromelessToggleButton" TargetType="{x:Type ToggleButton}"&gt;         &lt;Setter Property="Template"&gt;             &lt;Setter.Value&gt;                 &lt;ControlTemplate TargetType="ToggleButton"&gt;                     &lt;Border BorderThickness="0"&gt;                         &lt;ContentPresenter/&gt;                     &lt;/Border&gt;                 &lt;/ControlTemplate&gt;             &lt;/Setter.Value&gt;         &lt;/Setter&gt;     &lt;/Style&gt;     &lt;Style x:Key="ChromelessButton" TargetType="{x:Type Button}"&gt;         &lt;Setter Property="Template"&gt;             &lt;Setter.Value&gt;                 &lt;ControlTemplate TargetType="Button"&gt;                     &lt;Border BorderThickness="0"&gt;                         &lt;ContentPresenter/&gt;                     &lt;/Border&gt;                 &lt;/ControlTemplate&gt;             &lt;/Setter.Value&gt;         &lt;/Setter&gt;     &lt;/Style&gt;      &lt;DataTemplate x:Key="TreeRootTemplate"&gt;         &lt;Border BorderBrush="Black" BorderThickness="1" VerticalAlignment="Center" Background="White"&gt;             &lt;StackPanel Margin="2" Width="170" Orientation="Horizontal"&gt;                 &lt;Image Source="{Binding Icon, Converter={StaticResource ImageToSourceConverter}}" Width="16" Height="16" Margin="5"/&gt;                 &lt;TextBlock Text="{Binding Name}" x:Name="NodeLabel" Foreground="Black" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="10"/&gt;             &lt;/StackPanel&gt;         &lt;/Border&gt;     &lt;/DataTemplate&gt;      &lt;DataTemplate x:Key="PropertyNodeTemplate"&gt;         &lt;Grid VerticalAlignment="Top" HorizontalAlignment="Center"&gt;             &lt;Grid.RowDefinitions&gt;                 &lt;RowDefinition Height="30"/&gt;                 &lt;RowDefinition Height="30"/&gt;                 &lt;RowDefinition Height="*"/&gt;             &lt;/Grid.RowDefinitions&gt;         &lt;Border BorderBrush="Black" BorderThickness="1" VerticalAlignment="Center" Grid.Row="0"&gt;                 &lt;StackPanel Margin="2" Width="120" Orientation="Horizontal" Background="White"                 Tag="{Binding RelativeSource={RelativeSource AncestorType={x:Type syncfusion:Node}}}"&gt;                     &lt;StackPanel.ContextMenu&gt;                         &lt;ContextMenu DataContext="{Binding PlacementTarget.Tag, RelativeSource={RelativeSource Self}}"&gt;                             &lt;MenuItem Header="Remove" Click="RemoveProperty_OnClick"&gt;                                 &lt;MenuItem.Icon&gt;                                     &lt;Image Source="Images/icon_remove.bmp"/&gt;                                 &lt;/MenuItem.Icon&gt;                             &lt;/MenuItem&gt;                             &lt;MenuItem Header="Add Scenario" Click="CreateScenario_OnClick"&gt;                                 &lt;MenuItem.Icon&gt;                                     &lt;Image/&gt;                                 &lt;/MenuItem.Icon&gt;                             &lt;/MenuItem&gt;                         &lt;/ContextMenu&gt;                     &lt;/StackPanel.ContextMenu&gt;                     &lt;Image Source="{Binding Icon, Converter={StaticResource ImageToSourceConverter}}" Width="16" Height="16" Margin="5"/&gt;                     &lt;Label Content="{Binding Name}" x:Name="NodeLabel" Foreground="Black" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="10"/&gt;                 &lt;/StackPanel&gt;             &lt;/Border&gt;             &lt;Button Name="AddScenario" Click="AddScenarioButton_OnClick" Grid.Row="2" BorderThickness="0"&gt;                 &lt;Button.Style&gt;                 &lt;Style TargetType="Button"&gt;                         &lt;Setter Property="Template"&gt;                             &lt;Setter.Value&gt;                                 &lt;ControlTemplate TargetType="Button"&gt;                                     &lt;Border BorderThickness="0"&gt;                                         &lt;ContentPresenter/&gt;                                     &lt;/Border&gt;                                 &lt;/ControlTemplate&gt;                             &lt;/Setter.Value&gt;                         &lt;/Setter&gt;                         &lt;Style.Triggers&gt;                         &lt;DataTrigger Binding="{Binding IsHighlighted}" Value="True"&gt;                             &lt;Setter Property="Visibility" Value="Visible"&gt;&lt;/Setter&gt;                         &lt;/DataTrigger&gt;                             &lt;DataTrigger Binding="{Binding IsHighlighted}" Value="False"&gt;                             &lt;Setter Property="Visibility" Value="Hidden"&gt;&lt;/Setter&gt;                         &lt;/DataTrigger&gt;                         &lt;/Style.Triggers&gt;                 &lt;/Style&gt;                 &lt;/Button.Style&gt;                 &lt;Border BorderThickness="1,1,1,1" VerticalAlignment="Center" Background="LightGray"&gt;                     &lt;Border.BorderBrush&gt;                         &lt;DrawingBrush Viewport="8,8,8,8" ViewportUnits="Absolute" TileMode="Tile"&gt;                             &lt;DrawingBrush.Drawing&gt;                                 &lt;DrawingGroup&gt;                                     &lt;GeometryDrawing Brush="LightGray"&gt;                                         &lt;GeometryDrawing.Geometry&gt;                                             &lt;GeometryGroup&gt;                                                 &lt;RectangleGeometry Rect="0,0,50,50" /&gt;                                                 &lt;RectangleGeometry Rect="50,50,50,50" /&gt;                                             &lt;/GeometryGroup&gt;                                         &lt;/GeometryDrawing.Geometry&gt;                                     &lt;/GeometryDrawing&gt;                                 &lt;/DrawingGroup&gt;                             &lt;/DrawingBrush.Drawing&gt;                         &lt;/DrawingBrush&gt;                     &lt;/Border.BorderBrush&gt;                     &lt;StackPanel Margin="2" Width="120" Orientation="Horizontal" Tag="{Binding RelativeSource={RelativeSource AncestorType={x:Type syncfusion:Node}}}"&gt;                         &lt;Image Source="{StaticResource ImageBkgPlus}" Width="16" Height="16" Margin="5"/&gt;                         &lt;Label Width="70" FontSize="10" VerticalAlignment="Center" Content="Add Scenario"&gt;                         &lt;/Label&gt;                     &lt;/StackPanel&gt;                 &lt;/Border&gt;             &lt;/Button&gt;         &lt;/Grid&gt;     &lt;/DataTemplate&gt;      &lt;DataTemplate x:Key="ScenarioNodeTemplate"&gt;         &lt;Border BorderBrush="Black" BorderThickness="1" ToolTip="{Binding Parent.Name}" VerticalAlignment="Center"&gt;             &lt;Border.Style&gt;                 &lt;Style TargetType="Border"&gt;                     &lt;Setter Property="Background" Value="White"&gt;&lt;/Setter&gt;                     &lt;Style.Triggers&gt;                         &lt;DataTrigger Binding="{Binding Path=IsDisabled}" Value="True"&gt;                             &lt;Setter Property="Background" Value="#FFEEEEEE"&gt;&lt;/Setter&gt;                         &lt;/DataTrigger&gt;                     &lt;/Style.Triggers&gt;                 &lt;/Style&gt;             &lt;/Border.Style&gt;             &lt;StackPanel Margin="2" Width="120" Orientation="Horizontal"                 Tag="{Binding RelativeSource={RelativeSource AncestorType={x:Type syncfusion:Node}}}"&gt;                 &lt;StackPanel.ContextMenu&gt;                     &lt;ContextMenu DataContext="{Binding PlacementTarget.Tag, RelativeSource={RelativeSource Self}}"&gt;                         &lt;MenuItem Header="Add Scenario" Click="CreateParallelScenario_OnClick"&gt;                             &lt;MenuItem.Icon&gt;                                 &lt;Image/&gt;                             &lt;/MenuItem.Icon&gt;                         &lt;/MenuItem&gt;                         &lt;MenuItem Header="Rename Scenario" Click="RenameScenario_OnClick"&gt;                             &lt;MenuItem.Icon&gt;                                 &lt;Image Source="Images/icon_rename.bmp"/&gt;                             &lt;/MenuItem.Icon&gt;                         &lt;/MenuItem&gt;                         &lt;MenuItem Header="Remove Scenario" Click="RemoveScenario_OnClick"&gt;                             &lt;MenuItem.Icon&gt;                                 &lt;Image Source="Images/icon_remove.bmp"/&gt;                             &lt;/MenuItem.Icon&gt;                         &lt;/MenuItem&gt;                     &lt;/ContextMenu&gt;                 &lt;/StackPanel.ContextMenu&gt;                 &lt;Image Source="{Binding Icon, Converter={StaticResource ImageToSourceConverter}}" Width="16" Height="16" Margin="5"/&gt;                                    &lt;Label Width="60" FontSize="10" Content="{Binding Path=Name, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center"&gt;                     &lt;Label.Style&gt;                         &lt;Style TargetType="Label"&gt;                             &lt;Style.Triggers&gt;                                 &lt;DataTrigger Binding="{Binding IsEditing}" Value="True"&gt;                                     &lt;Setter Property="Visibility" Value="Collapsed"&gt;&lt;/Setter&gt;                                 &lt;/DataTrigger&gt;                                 &lt;DataTrigger Binding="{Binding IsEditing}" Value="False"&gt;                                     &lt;Setter Property="Visibility" Value="Visible"&gt;&lt;/Setter&gt;                                 &lt;/DataTrigger&gt;                              &lt;/Style.Triggers&gt;                         &lt;/Style&gt;                     &lt;/Label.Style&gt;                 &lt;/Label&gt;                 &lt;TextBox Text="{Binding Path=Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Name="editingTextBox"                          SelectionLength="10" Width="70" Height="20" KeyDown="EditingTextBox_KeyDown" VerticalAlignment="Center"&gt;                     &lt;TextBox.Style&gt;                         &lt;Style TargetType="TextBox"&gt;                             &lt;Style.Triggers&gt;                                 &lt;DataTrigger Binding="{Binding IsEditing}" Value="False"&gt;                                     &lt;Setter Property="Visibility" Value="Collapsed"&gt;&lt;/Setter&gt;                                 &lt;/DataTrigger&gt;                                 &lt;DataTrigger Binding="{Binding IsEditing}" Value="True"&gt;                                     &lt;Setter Property="Visibility" Value="Visible"&gt;&lt;/Setter&gt;                                 &lt;/DataTrigger&gt;                             &lt;/Style.Triggers&gt;                         &lt;/Style&gt;                     &lt;/TextBox.Style&gt;                 &lt;/TextBox&gt;                 &lt;CheckBox IsChecked="{Binding IsDisabled, Converter={StaticResource OppositeBooleanConverter}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center"&gt;                     &lt;CheckBox.Style&gt;                         &lt;Style TargetType="CheckBox"&gt;                             &lt;Style.Triggers&gt;                                 &lt;DataTrigger Binding="{Binding IsEditing}" Value="True"&gt;                                     &lt;Setter Property="Visibility" Value="Collapsed"&gt;&lt;/Setter&gt;                                 &lt;/DataTrigger&gt;                                 &lt;DataTrigger Binding="{Binding IsEditing}" Value="False"&gt;                                     &lt;Setter Property="Visibility" Value="Visible"&gt;&lt;/Setter&gt;                                 &lt;/DataTrigger&gt;                             &lt;/Style.Triggers&gt;                         &lt;/Style&gt;                     &lt;/CheckBox.Style&gt;                 &lt;/CheckBox&gt;                 &lt;Label Content="{Binding Probability, Converter={StaticResource ProbabilityDisplayConverter}}" FontSize="9" VerticalAlignment="Center"&gt;&lt;/Label&gt;             &lt;/StackPanel&gt;         &lt;/Border&gt;     &lt;/DataTemplate&gt;      &lt;DataTemplate x:Key="ConnectorNodeTemplate"&gt;         &lt;Button Style="{StaticResource ChromelessButton}" Click="ButtonBase_OnClick"&gt;             &lt;Ellipse Stroke="Black" Width="20" Height="20" VerticalAlignment="Center" Margin="0,7,0,0"&gt;                 &lt;Ellipse.Style&gt;                     &lt;Style TargetType="Ellipse"&gt;                         &lt;Setter Property="Fill"&gt;                             &lt;Setter.Value&gt;                                 &lt;ImageBrush ImageSource="{StaticResource ImageBkgEmpty}"/&gt;                             &lt;/Setter.Value&gt;                         &lt;/Setter&gt;                         &lt;Style.Triggers&gt;                             &lt;DataTrigger Binding="{Binding IsExpanded}" Value="True"&gt;                                 &lt;Setter Property="Fill"&gt;                                     &lt;Setter.Value&gt;                                         &lt;ImageBrush ImageSource="{StaticResource ImageBkgMinus}"/&gt;                                     &lt;/Setter.Value&gt;                                 &lt;/Setter&gt;                             &lt;/DataTrigger&gt;                             &lt;DataTrigger Binding="{Binding IsExpanded}" Value="False"&gt;                                 &lt;Setter Property="Fill"&gt;                                     &lt;Setter.Value&gt;                                         &lt;ImageBrush ImageSource="{StaticResource ImageBkgPlus}"/&gt;                                     &lt;/Setter.Value&gt;                                 &lt;/Setter&gt;                             &lt;/DataTrigger&gt;                         &lt;/Style.Triggers&gt;                     &lt;/Style&gt;                 &lt;/Ellipse.Style&gt;             &lt;/Ellipse&gt;         &lt;/Button&gt;     &lt;/DataTemplate&gt;      &lt;DataTemplate x:Key="ClosingNodeTemplate"&gt;     &lt;/DataTemplate&gt;      &lt;DataTemplate x:Key="AddNodeTemplate"&gt;         &lt;StackPanel&gt;             &lt;ToggleButton Style="{StaticResource ChromelessToggleButton}" x:Name="toggleButtonAdd" IsHitTestVisible="{Binding ElementName=Popup, Path=IsOpen, Mode=OneWay, Converter={StaticResource OppositeBooleanConverter}}"&gt;                 &lt;Rectangle Stroke="Black" Width="20" Height="20" VerticalAlignment="Center" Margin="0,7,0,0"                     Tag="{Binding RelativeSource={RelativeSource AncestorType={x:Type syncfusion:Node}}}"&gt;                     &lt;Rectangle.Fill&gt;                         &lt;ImageBrush ImageSource="Images/bkg_plus.png"/&gt;                     &lt;/Rectangle.Fill&gt;                 &lt;/Rectangle&gt;             &lt;/ToggleButton&gt;             &lt;Popup IsOpen="{Binding IsChecked, ElementName=toggleButtonAdd}" x:Name="Popup" StaysOpen="False" Placement="Right"&gt;                 &lt;Border BorderBrush="Black" BorderThickness="1" Background="Gainsboro"&gt;                     &lt;StackPanel Margin="5,10,5,5"&gt;                         &lt;TextBlock Text="Add Existing Property:"&gt;&lt;/TextBlock&gt;                         &lt;ListBox BorderBrush="Black" BorderThickness="1" Background="White" Margin="5" Padding="4" Width="130"                                  ItemsSource="{Binding Path=AvailableProperties}" SelectionChanged="Selector_OnSelectionChanged"&gt;                             &lt;ListBox.ItemContainerStyle&gt;                                 &lt;Style TargetType="ListBoxItem"&gt;                                     &lt;Style.Triggers&gt;                                         &lt;Trigger Property="IsSelected" Value="True"&gt;                                             &lt;Setter Property="FontWeight" Value="Bold"/&gt;                                             &lt;Setter Property="Background" Value="Transparent"/&gt;                                             &lt;Setter Property="Foreground" Value="Black"/&gt;                                         &lt;/Trigger&gt;                                         &lt;Trigger Property="IsMouseOver" Value="True"&gt;                                             &lt;Setter Property="Background" Value="#C8C8E6"/&gt;                                         &lt;/Trigger&gt;                                     &lt;/Style.Triggers&gt;                                 &lt;/Style&gt;                             &lt;/ListBox.ItemContainerStyle&gt;                             &lt;ListBox.ItemTemplate&gt;                                 &lt;DataTemplate&gt;                                         &lt;StackPanel Orientation="Horizontal"&gt;                                             &lt;Image Source="{Binding Icon, Converter={StaticResource ImageToSourceConverter}}" Width="12" Height="12" Margin="3" VerticalAlignment="Center"/&gt;                                             &lt;TextBlock Text="{Binding Name}" VerticalAlignment="Center"/&gt;                                         &lt;/StackPanel&gt;                                 &lt;/DataTemplate&gt;                             &lt;/ListBox.ItemTemplate&gt;                         &lt;/ListBox&gt;                     &lt;/StackPanel&gt;                 &lt;/Border&gt;             &lt;/Popup&gt;         &lt;/StackPanel&gt;     &lt;/DataTemplate&gt; &lt;/UserControl.Resources&gt;      &lt;syncfusion:DiagramControl IsSymbolPaletteEnabled="False" x:Name="diagramControl"&gt;         &lt;syncfusion:DiagramControl.Model&gt;              &lt;syncfusion:DiagramModel x:Name="diagramModel" VerticalSpacing="70" HorizontalSpacing="30" SpaceBetweenSubTrees="30"/&gt;          &lt;/syncfusion:DiagramControl.Model&gt;         &lt;syncfusion:DiagramControl.View&gt;              &lt;syncfusion:DiagramView x:Name="diagramView" IsPageEditable="False" IsPanEnabled="False" IsZoomEnabled="True" MouseMove="Diagram_MouseMove"/&gt;          &lt;/syncfusion:DiagramControl.View&gt;      &lt;/syncfusion:DiagramControl&gt; </code></pre>  <p><strong>Section code</strong></p>  <pre><code>public class Section : INotifyPropertyChanged {     private bool isVisible = true;     private bool isSelected = false;      public Section(string name, object icon)     {         Name = name;         Icon = icon as BitmapImage;     }      public string Name { get; private set; }     public BitmapImage Icon { get; private set; }     public bool IsLocked { get; set; }      public bool IsVisible     {         get { return isVisible; }         set         {             if (IsLocked || value == isVisible) return;             isVisible = value;             OnPropertyChanged();         }     }      public bool IsSelected     {         get { return isSelected; }         set         {             if (IsLocked || value == isSelected) return;             isSelected = value;             OnPropertyChanged();         }     }      public object Content { get; set; }      public event PropertyChangedEventHandler PropertyChanged;      [NotifyPropertyChangedInvocator]     protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)     {         var handler = PropertyChanged;         if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));     } }  public class SectionCollection : ObservableCollection&lt;Section&gt; {     public new void Add(Section item)     {         item.PropertyChanged += ItemOnPropertyChanged;         base.Add(item);     }      private void ItemOnPropertyChanged(object sender, PropertyChangedEventArgs propertyChangedEventArgs)     {         if (propertyChangedEventArgs.PropertyName == "IsSelected")         {             var section = sender as Section;             if (section.IsSelected)             {                 foreach (var item in Items)                 {                     if (item != section)                     {                         item.IsSelected = false;                     }                 }             }         }     } } </code></pre>