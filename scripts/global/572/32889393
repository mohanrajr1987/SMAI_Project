<p>First of all, I have a data type for ordered trees:</p>  <pre><code>data OrdTree a = OrdTree a [OrdTree a]                     deriving (Show) </code></pre>  <p>I need to get a list of all nodes in order of DFS (depth-first search).</p>  <p>Here is my attempt to solve this:</p>  <pre><code>dfsTreeList :: OrdTree a -&gt;  [a]                        dfsTreeList (OrdTree a (x:xt)) = a : (dfsTreeList x) ++ (dfsTreeList (OrdTree a xt))                           dfsTreeList (OrdTree a []) = a : []  </code></pre>  <p>But a new problem appears: every non-last node is included in the list twice.</p>  <p>For instance, input data:</p>  <pre><code>dfsTreeList (OrdTree 7 [(OrdTree 3 [(OrdTree 1 []), (OrdTree 4 [])]), (OrdTree 10 [(OrdTree 8 []), (OrdTree 12 [])])]) </code></pre>  <p>And result:</p>  <pre><code>[7,3,1,3,4,3,7,10,8,10,12,10,7] </code></pre>  <p>Does someone have any ideas? Thanks for any reply.</p>