<p>I'm trying to build a parser that can turn a paragraph into a list of sentences, but I'm running into a major problem. So I'm using the stanford parser to pull out the sentences intelligently, but the issue is that the parser only stores the list of tokens, rather than the sentence itself. This can become very problematic if my client wants the text EXACTLY as it showed up before (including any spacing that was there before.</p>  <p>Does anyone have any suggestions about how I can get around this problem?</p>  <pre><code>def prepSentenceStrings(text: String): List[String] = {      val mod = text.replace("Sr.", "Sr") // deals with an edge case      val doc = new DocumentPreprocessor(new StringReader(mod))      doc.map(x =&gt; reconfigureSentence(Sentence.listToString(x))).toList}   def reconfigureSentence(text:String) :String = {     text.replace(" .", ".").replace(" ,",",").replace(" !", "!").replace("( ","(").replace("&lt; ", "&lt;").replace(" )", ")") </code></pre>  <p>}</p>