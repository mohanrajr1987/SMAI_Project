<p>I'm implementing a class that tries to detect stop words on a corpus. One of the methods in said class is, of course, <code>idf()</code>:</p>  <pre><code>public function idf(){      // 1) In how many articles does each term appear     $tokensFreq = $this-&gt;computeTokensFreq();      // 2) Applies the IDF formula (array format : $term =&gt; $idf)     $tokensIDF = $this-&gt;computeIDF($tokensFreq);      // 3) Sort array so that 'stopwords' (smaller idfs) appear at the top     arsort($tokensIDF);      return $tokensIDF;  } </code></pre>  <p>The problem is, this function is veeery slow: it takes more than 5 minutes to go through a relatively small array of 4 006 tokens. </p>  <p>At first, I thought I misimplemented the algorithm (I even replaced all <code>array_key_exists</code> with <code>isset</code>). But after further inspection, it turned out that it's the <code>arsort</code> call who takes the lion part of the execution time.</p>  <p>To help reduce the load, I added the <code>SORT_NUMERIC</code> flag to the <code>arsort</code> function, but in vain. </p>  <p>First of all, is it normal that sorting such an array takes up all that time? Secondly, and most importantly, what can I do to make things go smoother?</p>