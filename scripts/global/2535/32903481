<p>I have two databases and two datacontexts (I am using code first approach). So code:</p>  <pre><code>using (var tr1 = internalDb.Database.BeginTransaction()) using (var tr2 = externalDb.Database.BeginTransaction()) {     try     {         //Some changes to internalDb (inserted)         //Some changes to externalDb (update, deleting some values)          internalDb.SaveChanges();         externalDb.SaveChanges();         tr1.Commit();         tr2.Commit();     }     catch (Exception exc)     {         tr1.Rollback();         tr2.Rollback();         _log.Error(exc);     } </code></pre>  <p>Everything worked fine, but one time I get incident: somewhere in the middle of process, I had very short (5 sec) network down event. After rollback, data deleted from externalDb, tr2 was corrupted - was lost small chunk of data (I don't know: maybe 128 letters, maybe a little more). </p>  <p>So I wonder: how can it be??? Entity framework transaction != SQL transaction? Or maybe I'm doing transactions incorrect way?</p>