<p>Using Spring Data jpa and Spring Data Rest I could able to get basic CRUD operations to work. But I am facing problem with one to many (owner -> car(s)) relationship. Can any one help me in this. </p>  <p>Owner.java</p>  <pre><code>@Entity @Table(name = "OWNER") @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE) public class Owner implements Serializable {     @Id     @GeneratedValue(strategy = GenerationType.AUTO)     private Long id;      @Column(name = "name")     private String name;      @Column(name = "age")     private Integer age;      @OneToMany(mappedBy = "owner")     @JsonIgnore     @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)     private Set&lt;Car&gt; cars = new HashSet&lt;&gt;();   } </code></pre>  <p>OwnerResource.java</p>  <pre><code>    @RestController     @RequestMapping("/api")     public class OwnerResource {             private final Logger log = LoggerFactory.getLogger(OwnerResource.class);             @Inject         private OwnerRepository ownerRepository;              @RequestMapping(value = "/owners",                 method = RequestMethod.POST,                 produces = MediaType.APPLICATION_JSON_VALUE)         @Timed         public ResponseEntity&lt;Owner&gt; create(@RequestBody Owner owner) throws URISyntaxException {             log.debug("REST request to save Owner : {}", owner);             if (owner.getId() != null) {                 return ResponseEntity.badRequest().header("Failure", "A new owner cannot already have an ID").body(null);             }             Owner result = ownerRepository.save(owner);             return ResponseEntity.created(new URI("/api/owners/" + result.getId()))                     .headers(HeaderUtil.createEntityCreationAlert("owner", result.getId().toString()))                     .body(result);         }         @RequestMapping(value = "/owners",             method = RequestMethod.PUT,             produces = MediaType.APPLICATION_JSON_VALUE)         @Timed         public ResponseEntity&lt;Owner&gt; update(@RequestBody Owner owner) throws URISyntaxException {             log.debug("REST request to update Owner : {}", owner);             if (owner.getId() == null) {                 return create(owner);             }             Owner result = ownerRepository.save(owner);             return ResponseEntity.ok()                     .headers(HeaderUtil.createEntityUpdateAlert("owner", owner.getId().toString()))                     .body(result);         }         @RequestMapping(value = "/owners",                 method = RequestMethod.GET,                 produces = MediaType.APPLICATION_JSON_VALUE)         @Timed         public ResponseEntity&lt;List&lt;Owner&gt;&gt; getAll(@RequestParam(value = "page" , required = false) Integer offset,                                       @RequestParam(value = "per_page", required = false) Integer limit)             throws URISyntaxException {             Page&lt;Owner&gt; page = ownerRepository.findAll(PaginationUtil.generatePageRequest(offset, limit));             HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(page, "/api/owners", offset, limit);             return new ResponseEntity&lt;&gt;(page.getContent(), headers, HttpStatus.OK);         }   @RequestMapping(value = "/owners/{id}",                 method = RequestMethod.GET,                 produces = MediaType.APPLICATION_JSON_VALUE)         @Timed         public ResponseEntity&lt;Owner&gt; get(@PathVariable Long id) {             log.debug("REST request to get Owner : {}", id);             return Optional.ofNullable(ownerRepository.findOne(id))                 .map(owner -&gt; new ResponseEntity&lt;&gt;(                     owner,                     HttpStatus.OK))                 .orElse(new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND));         }      } </code></pre>  <p>OwnerRepository.java</p>  <pre><code>/**  * Spring Data JPA repository for the Owner entity.  */ public interface OwnerRepository extends JpaRepository&lt;Owner,Long&gt; {       } </code></pre>  <p>The basic crud operation is working fine for Owner. But now I need to get all cars of a particular owner for that I need to add one rest call entry in <code>OwnerResource.java</code> and a method entry in <code>OwneRepository.java</code>. I tried different ways but getting many errors and is not working. The following is what I tried.</p>  <p>In OwnerRepository.java </p>  <pre><code>Owner findAllByOwnerId(Long id);//But eclipse shows error here for this method </code></pre>  <p>In OwnerResource.java</p>  <pre><code>//Get All Cars     @RequestMapping(value = "/{id}/cars",             method = RequestMethod.GET,             produces = MediaType.APPLICATION_JSON_VALUE)     @Timed     public ResponseEntity&lt;Owner&gt; getAll(@PathVariable Long id) {         log.debug("REST request to get All Cars of the Owner : {}", id);         return Optional.ofNullable(ownerRepository.findAllByOwnerId(id))             .map(owner -&gt; new ResponseEntity&lt;&gt;(                 owner,                 HttpStatus.OK))             .orElse(new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND));     } </code></pre>  <p>But these two changes are not working out. I am beginner to spring data jpa and spring data rest. Can any one help me in correcting these two so that I can get all cars of the owner. </p>