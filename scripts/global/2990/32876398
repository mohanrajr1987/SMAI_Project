<p>I have worked a bit with Entity in ASP.NET MVC and a model class would look something like this</p>  <pre><code>public class Address() {     public int Id { get; set; }     public string StreetLine1 { get; set; }     public string StreetLine2 { get; set; }     public string City { get; set; }     public int StateId { get; set; }     public string ZipCode { get; set; }      public virtual State State { get; set; } } </code></pre>  <p>Where the stateId property and reference to the State object are both stored. However I never see this in JPA code / example.</p>  <p>In JPA it would look like the following:</p>  <pre><code>public class Address implements Serializable {      private static final long serialVersionUID = 1L;      @Id     @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "addressSeq")     @SequenceGenerator(name = "addressSeq", sequenceName = "T_ADDRESS_SEQ", allocationSize = 1)     @Column(name = "ID")     private Long id;      @Size(max = 255)     @Column(name = "STREET_LINE_1")     private String streetLine1;      @Size(max = 255)     @Column(name = "STREET_LINE_2")     private String streetLine2;      @NotBlank     @Size(max = 255)     @Column(name = "CITY")     private String city;      @NotBlank     @Size(max = 10)     @Column(name = "POSTAL_CODE")     private String postalCode;      // Mapping Properties     @ManyToOne(fetch = FetchType.EAGER, optional = false)     @JoinColumn(name = "STATE_ID", referencedColumnName = "ID")     private State state;      .... } </code></pre>  <p>Would there be any benefit to also storing the actual StateID in the JPA entity as such?</p>  <pre><code>public class Address implements Serializable {      private static final long serialVersionUID = 1L;      @Id     @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "addressSeq")     @SequenceGenerator(name = "addressSeq", sequenceName = "T_ADDRESS_SEQ", allocationSize = 1)     @Column(name = "ID")     private Long id;      @Size(max = 255)     @Column(name = "STREET_LINE_1")     private String streetLine1;      @Size(max = 255)     @Column(name = "STREET_LINE_2")     private String streetLine2;      @NotBlank     @Size(max = 255)     @Column(name = "CITY")     private String city;      // I'm new!!!!     @Column(name = "STATE_ID", insertable = false, updatable = false)     private Long stateId;      @NotBlank     @Size(max = 10)     @Column(name = "POSTAL_CODE")     private String postalCode;      // Mapping Properties     @ManyToOne(fetch = FetchType.EAGER, optional = false)     @JoinColumn(name = "STATE_ID", referencedColumnName = "ID")     private State state;  } </code></pre>  <p>I would think either stateId or state would have to be marked as not insertable and not updatable otherwise Hibernate would try to do both.</p>  <p>Is there any benefit to showing the stateId if there is already a referenced State object? Is this common in JPA?</p>  <p>Off my head I thought the main benefit would be you could still view the Ids without necessarily fetching the associated object.</p>