<p>I am trying to implement my own TableGenerator strategy (basically the same as default JPA TableGenerator), there is a way to use my own implementation instead of default one? I was trying the approach shown on: <a href="https://wiki.eclipse.org/EclipseLink/Examples/JPA/CustomSequencing" rel="nofollow">https://wiki.eclipse.org/EclipseLink/Examples/JPA/CustomSequencing</a>.</p>  <p>I implemented: </p>  <pre><code>public class PrefixCustomSequence extends TableSequence implements SessionCustomizer {     private String prefix;      public PrefixCustomSequence(String name, String prefix) {         super(name);         this.prefix=prefix;     }      @Override     public Object getGeneratedValue(Accessor accessor,                                     AbstractSession writeSession, String seqName) {         Object value=super.getGeneratedValue(accessor,writeSession,seqName)         return prefix+"_"+value.toString();     }  ....     public void customize(Session session) throws Exception {         String idPrefix= (String) session.getProperty("com.property.idPrefix");         PrefixCustomSequence sequence = new PrefixCustomSequence("prefix-custom",idPrefix);         session.getLogin().addSequence(sequence);     } } </code></pre>  <p>I am extending TableSequence in order to re-use all bundled functionality. But there is no way to force EclipseLink to use this implementation instead of default TableSequence.</p>  <p>Is there a way to do this in EclipseLink JPA? or is better to use UUIDs?</p>