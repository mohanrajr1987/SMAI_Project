<p>I have 2 entities: <strong>User</strong> and <strong>UserProfile</strong> that have a bidirectional  @OneToOne relationship between them.<br> Due to some old DB Design the UserProfile is the owner (i have the column user_id in users_profiles table)<br>    The relationship is Lazy as I have fetchType Lazy and optional = false.<br> Everything works as expected, I mean when I load an UserProfile it does not automatically loads the User also. I guess this is perfectly normal as I load from the owner side.<br> My problem is that if I load a User (owned side) it loads automatically the UserProfile although the relationship is lazy.  </p>  <p>I mean: Is this normal that when I load an entity from the owned side to load the owner entity also ? </p>  <pre><code>@Entity @Table(name = "users") public class User extends BaseEntity implements Serializable {      @OneToOne(mappedBy = "user", optional=false, fetch = FetchType.LAZY)      private UserProfile profile;     // .................rest of entity   }     @Entity @Table(name="users_profiles") public class UserProfile extends BaseEntity implements Serializable {      @OneToOne(optional=false, fetch = FetchType.LAZY)     @JoinColumn(name="user_id")     private User user;     // ... rest of entity here  } </code></pre>  <p>The way that I test this is by loading the User entity with EntityManager method find(id).<br> I have noticed that when the relation is not lazy I have only one query with a join inside. If I put the current setup I have two individual queries: 1 for user and the other one for profile.</p>