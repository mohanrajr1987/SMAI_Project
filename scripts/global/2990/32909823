<p>I've written a small SpringBoot application with two entities. They are as follows and Person having a OneToMany relationship with Phone:</p>  <pre><code>  import java.util.HashSet; import java.util.Set;  import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany;  @Entity  public class Person {      @OneToMany(mappedBy="person")     private Set&lt;Phone&gt; phones = new HashSet&lt;&gt;();      @Id     @GeneratedValue(strategy = GenerationType.AUTO)      private long id;      private String firstName;     private String lastName;      @Column(columnDefinition="int default 0")     private Integer age;        public Person() {         super();     }      public Person(String firstName, String lastName, Integer age) {          this.firstName = firstName;         this.lastName = lastName;         this.age = age;     }      public long getId() {         return id;     }      public Set&lt;Phone&gt; getPhones() {         return phones;     }      public void setPhones(Set&lt;Phone&gt; phones) {         this.phones = phones;     }      public String getFirstName() {         return firstName;     }      public void setFirstName(String firstName) {         this.firstName = firstName;     }      public String getLastName() {         return lastName;     }      public void setLastName(String lastName) {         this.lastName = lastName;     }      public Integer getAge() {         return age;     }      public void setAge(Integer age) {         this.age = age;     }    } </code></pre>  <p>And the Phone entity has ManyToOne:</p>  <pre><code>package org.prdas;  import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.ManyToOne;  @Entity public class Phone {      @ManyToOne     private Person person;      @Id     @GeneratedValue(strategy = GenerationType.AUTO)      private Long id;      private String homePhone;     private String workPhone;      public Phone() {      }      public Phone(Person person, String homePhone, String workPhone) {          this.person = person;         this.homePhone = homePhone;         this.workPhone = workPhone;     }      public Person getPerson() {         return person;     }      public void setPerson(Person person) {         this.person = person;     }      public String getHomePhone() {         return homePhone;     }      public void setHomePhone(String homePhone) {         this.homePhone = homePhone;     }      public String getWorkPhone() {         return workPhone;     }      public void setWorkPhone(String workPhone) {         this.workPhone = workPhone;     }      public Long getId() {         return id;     }     } </code></pre>  <p>I have defined following two repositories:</p>  <pre><code>import java.util.List;  import org.springframework.data.repository.PagingAndSortingRepository; import org.springframework.data.repository.query.Param; import org.springframework.data.rest.core.annotation.RepositoryRestResource;  @RepositoryRestResource(collectionResourceRel = "people", path = "people") public interface PersonRepository extends PagingAndSortingRepository&lt;Person, Long&gt; {      List&lt;Person&gt; findByLastName(@Param("name") String name);     List&lt;Person&gt; findByFirstName(@Param("name") String name);  }   import java.util.Collection;  import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.data.repository.query.Param; import org.springframework.data.rest.core.annotation.RepositoryRestResource;  @RepositoryRestResource(collectionResourceRel = "{id}", path = "phone") public interface PhoneRepository extends JpaRepository&lt;Phone, Long&gt; {      Collection&lt;Phone&gt; findByPersonLastName(@Param("name") String name);  } </code></pre>  <p>And finally the Application class:</p>  <pre><code>import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication;  @SpringBootApplication public class Application {      public static void main(String[] args) {         SpringApplication.run(Application.class, args);      }  } </code></pre>  <p>Now when I run the jar, using Postman, I am able to GET, POST, PUT and DELETE the Person entity using URLs like, for example,</p>  <pre><code>(POST) http://localhost:8080/people/ </code></pre>  <p>Body</p>  <pre><code>{"firstName":"Jack", "lastName":"Brown"} </code></pre>  <p>But when I try to do a POST for the Phone under a person like the following:</p>  <pre><code>(Post) http://localhost:8080/people/5/phones </code></pre>  <p>Body</p>  <pre><code>{"homePhone":"24102234", "workPhone":"9831299878"} </code></pre>  <p>I get the response as follows:</p>  <pre><code>{   "timestamp": 1443796964061,   "status": 405,   "error": "Method Not Allowed",   "exception": "org.springframework.web.HttpRequestMethodNotSupportedException",   "message": "Request method 'POST' not supported",   "path": "/people/5/phones" } </code></pre>  <p>I will be grateful if someone can help me to resolve this out.</p>  <p>Thanks, Prana</p>