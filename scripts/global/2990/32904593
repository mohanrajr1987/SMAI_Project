<p>I would like to have a search like this:</p>  <pre><code>Select * From Users where ( ( username Like %criteria% OR firstName Like %criteria% ...) AND (CarId = carId) )  </code></pre>  <p>I did with 2 Predicate combined into an array, but need to do it with 1 Predicate only</p>  <pre><code>@Entity @Table(name = "users", uniqueConstraints = { @UniqueConstraint(columnNames = { "username" }) }) public class User{ @Id @GeneratedValue(generator = "seq_id_user", strategy = GenerationType.SEQUENCE) @SequenceGenerator(name = "seq_id_user", sequenceName = "seq_id_user") private Long id; @Column(unique = true) @NotNull private String username; @Column(name = "first_name") private String firstName; .... @ManyToOne @JoinColumn(name = "car_id", nullable = false, foreignKey = @ForeignKey(name = "CAR_ID_FK")) private Car car; ... </code></pre>  <p>The Car is a similar class, the User has 1 foreign key.</p>  <pre><code>@Override public List&lt;User&gt; searchUsers(String criteria, Car car) {     //TODO: check params and return values based on test cases      CriteriaBuilder builder = entityManager.getCriteriaBuilder();     CriteriaQuery&lt;User&gt; query = builder.createQuery(User.class);     Root&lt;User&gt; r = query.from(User.class);      Predicate predicate = builder.conjunction();      predicate = builder.or(predicate, builder.like(r.get("username"), "%" + criteria + "%"));     predicate = builder.or(predicate, builder.like(r.get("firstName"), "%" + criteria + "%"));     predicate = builder.or(predicate, builder.like(r.get("lastName"), "%" + criteria + "%"));     predicate = builder.or(predicate, builder.like(r.get("nickname"), "%" + criteria + "%"));      // how to implement the filter by foreign key value with AND? - can be a sub query to, which will be executed first time     // I  need to use 1 Predicate, not a Predicate Array!     query.select(r).where(predicate);      List&lt;User&gt; result = entityManager.createQuery(query).getResultList(); </code></pre>