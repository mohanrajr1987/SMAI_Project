<p>I'm doing some research on how to use Vaadin+JPA+EclipseLink+PostreSQL for the development of a web application for sharing pictures and how well is this combination suited for this purpose. I'm struggling with the decision on the management of user contacts. I will go into further detail on this after I explain the structure of my tables:</p>  <p><strong>Users table</strong></p>  <p>The users table consists of the following columns:</p>  <ul> <li><strong>User ID</strong> - automatically generated upon registration (unique)</li> <li><strong>Username</strong> - the name of the user; defined upon registration (unique)</li> <li><strong>Password</strong> - the password of the user; defined upon registration</li> <li><strong>Uploads</strong> - all the IDs of images that the user has uploaded. I will not go into detail here because this doesn't concern my problem. Suffice to say that this column is used together with another table called <strong>Images</strong> for managing the gallery of the current user</li> </ul>  <p><strong>Contacts table</strong></p>  <p>This table is purely for storing relation information between the users (a colleague of mine decided to do that, which I frankly don't like but it's already done...). It has only two columns:</p>  <ul> <li><strong>User ID</strong> - the user's ID who has the contacts (see below)</li> <li><p><strong>Contacts</strong> - stores all user IDs that the user with <strong>User ID</strong> has given permission to to view his image gallery.</p>  <p><strong>Note:</strong> this is <strong>not</strong> a bidirectional relation. This means that when user X adds user Y to his contacts, user X grants access to his <strong>own</strong> image gallery to user Y. However this does not make user Y's gallery visible to user X. This can only happen if user Y also adds user X to his contacts. And image can be either public or private. Public images can be viewed by all users however the private ones can be viewed only by the user who owns those and all others whom the owner has granted access to by adding them to his contacts. "Private" might not be the best term here so you might view it as "allow friends to view it" kind of thing.</p></li> </ul>  <p>Whenever I delete a user I have to do the following:</p>  <ol> <li>Delete all image files uploaded by the user - an image in the <strong>Images</strong> table has a single uploader. The viewing status  it's totally safe to simply delete the file and remove its entry from the <strong>Images</strong> table since each image is bound to its uploader and noone else (affected: <strong>Images</strong> table, storage)</li> <li>Delete the user's folder - sadly the way Java works you have to first make sure a folder is empty before you delete it (affected: storage)</li> <li>Delete user from all contacts lists of all users - <strong>THIS HERE</strong> is the main dilemma I'm having (affected: <strong>Users</strong> table)</li> <li>Delete the user himself (affected: <strong>Users</strong> table)</li> </ol>  <p>Because of the queries I've written so far this order is basically how it is supposed to be. I find it to be the optimal considering the relations between my tables.</p>  <p>As I've mentioned in point <strong>3</strong> I have quite the dilemma on how to do this with as less effort (coding- and performance-wise) as possible. I'm looking into two solutions for this:</p>  <ul> <li><p><strong>Unidirectional relation</strong> - don't change the <strong>Users</strong> table and simply travers all users in it and then traverse the contacts of each user looking for the user ID of the current user that I want to delete</p></li> <li><p><strong>Bidirectional relation</strong> - add a new column to <strong>Users</strong> called <strong>addedBy</strong> that stores all user IDs of users who have added the current user that I want to delete to their contacts. Every time user X adds another user to his contacts, that other user "adds" user X to his <strong>addedBy</strong> list but not <strong>contacts</strong>.</p></li> </ul>  <p>The problem I'm seeing in the <strong>unidirectional relation</strong> is exactly the fact that I have to traverse through all users and then check the contacts of each to see whether it contains the user ID I want to remove.</p>  <p>The problem I'm seeing in the <strong>bidirectional relation</strong> is the overhead that is added with the new column. The big plus here however is that I can skip looking into the contacts of all users (of course worst case here is when the user has been added to the contacts of all users which omho is not likely to happen ;)) and do that only for those who are in the <strong>addedBy</strong> list.</p>  <p>I'm far from a database expert and as you might have noticed from the written above there is probably a much better way of doing things. However I'm interested in only the two versions I've mentioned above and with as few changes to the DB as possible. Also I don't know which query would be easier to write. I have managed to do all the other steps (1,2 and 4) from the deletion process but number 3 is a tough one.</p>  <p>Any idea which one would be better? Number of users is not important since this is done purely for research however a couple of hundreds/thousands entries in the <strong>Users</strong> table should make things more realistic.</p>