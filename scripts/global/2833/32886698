<p>I've got a simple Drag and Drop setup for my relatively positioned divs but on resizing them using CSS's resize the elements on the old row are shifted instead of the new one. I don't want to use any libraries aside from jQuery.</p>  <p>Here is a fiddle showing whats happening: <a href="http://jsfiddle.net/RainyCats/6zega6zo/4/" rel="nofollow">http://jsfiddle.net/RainyCats/6zega6zo/4/</a></p>  <p>code: </p>  <pre><code>    &lt;div id='container'&gt;`         &lt;div id='main'&gt;&lt;/div&gt;`     &lt;/div&gt;  #container {     width: 500px;     height: 500px;     position: absolute; }  #main {     position: relative;     display: flex;     flex-wrap: wrap;     justify-content: space-around; }  .tile {     position: relative;     width: 100px;     height: 100px;     background-color: #128CAB;     resize: both;     border: 1px solid #DDD;     border-radius: 2px;     box-shadow: 2px 2px #CCC;     margin: 15px;     cursor: grab;     overflow: auto; }   for (var i = 0; i &lt; 6; i++) {     var tile = "&lt;div class='tile' draggable='true' id='" + i +"'&gt;&lt;/div&gt;"     $('#main').append(tile);     $('#'+i).append('&lt;p&gt;'+i+'&lt;/p&gt;');     addListeners(document.getElementById(i)); } function addListeners(el) {     el.addEventListener('dragstart', handleDragStart, false);     el.addEventListener('dragenter', handleDragEnter, false);     el.addEventListener('dragover', handleDragOver, false);     el.addEventListener('dragleave', handleDragLeave, false);     el.addEventListener('drop', handleDragDrop, false); }   function handleDragStart (event) {     event.stopPropagation();     console.log('called drag start');     event.dataTransfer.effectAllowed = 'all';      //send id of DnD source     event.dataTransfer.setData('text/plain', this.id); }   function handleDragEnter(event) {     event.stopPropagation();     event.preventDefault();     event.dataTransfer.dropEffect = 'move';     console.log('called drag enter');  }  function handleDragOver(event) {     event.stopPropagation();     event.preventDefault();       console.log('called drag over');  }  function handleDragLeave(event) {     event.stopPropagation();     event.preventDefault();     console.log('called drag leave');  }  function handleDragEnd(event) {     event.stopPropagation();     event.preventDefault();     console.log('called drag end');  }  function handleDragDrop(event) {     event.stopPropagation();     event.preventDefault();        console.log('called drag drop');      //get the source element and its offset     var srcId = event.dataTransfer.getData('text/plain');     var srcEl = document.getElementById(srcId);     var srcOffset = $('#'+srcId).offset();      var targetOffset = $('#'+this.id).offset();       //swap the offsets of the target and source         var newSrcOffset = {'left':targetOffset.left, 'top': targetOffset.top};     $('#'+srcId).offset(newSrcOffset);      var newTargetOffset = {'left':srcOffset.left, 'top': srcOffset.top};     $('#'+this.id).offset(newTargetOffset); } </code></pre>  <p>To repeat the bug drag a div from the top row to the row below it and then resize it horizontally and you will see the elements from the top row will be shifted.</p>  <p>The reason this is a issue is because i have other functionality like docking a div to left of the screen etc.</p>  <p>Any other tips/best practices are greatly appreciated. Thanks guys!</p>