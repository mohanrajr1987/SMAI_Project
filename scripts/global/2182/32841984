<p><a href="https://github.com/bbatsov/rubocop" rel="nofollow">Rubocop</a> confirms to <a href="https://github.com/bbatsov/ruby-style-guide" rel="nofollow">The Ruby Style Guide</a>. It discourages use of anything besides instance variables. I find it confusing to not use at the least class variables. This snippet from the Style Guide frowns on usage of global variables and instead recommends <em>module instance variables</em>: </p>  <pre><code># bad $foo_bar = 1  # good module Foo   class &lt;&lt; self     attr_accessor :bar   end end  Foo.bar = 1 </code></pre>  <p>It makes sense to be wary of using global variables, but using neither global nor class variables blows my mind.</p>  <p>Among <em>module instance variables</em> and <em>class instance variables</em>, which is more efficient usage of memory?</p>  <p>For example:</p>  <p><strong>Option A (Class Instance Variable):</strong></p>  <pre><code># things that exist only with life module Life   # an instance of life with unique actions/attributes   class Person     attr_accessor :memories      def initialize       @memories = []     end      def memorize(something)       @memories &lt;&lt; something     end   end end  bob = Life::Person.new bob.memorize 'birthday' bob.memorize 'wedding' bob.memorize 'anniversary'  bob.memories # =&gt; ["birthday", "wedding", "anniversary"] </code></pre>  <p><strong>Option B (Module Instance Variable):</strong></p>  <pre><code># things that exist only with life module Life   # something all living things possess   module Memory     class &lt;&lt; self       attr_accessor :memories     end   end    # an instance of life with unique actions/attributes   class Person     include Memory      def initialize       Memory.memories = []     end      def memorize(something)       Memory.memories &lt;&lt; something     end      def memories       Memory.memories     end   end end  bob = Life::Person.new bob.memorize 'birthday' bob.memorize 'wedding' bob.memorize 'anniversary'  bob.memories # =&gt; ["birthday", "wedding", "anniversary"] </code></pre>