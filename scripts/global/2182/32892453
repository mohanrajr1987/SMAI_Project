<p>I am using Angular 1.4.7.</p>  <p>I have an Angular directive that is sometimes turned off with an ngIf toggle.</p>  <p>Inside the directive I have it watching for changes to an object in a service.</p>  <p>What I am having trouble with is that after the ngIf is toggled to false, then back to true, the directive's scope should effectively reset.</p>  <p>But the "oldVal" in my $watch is being maintained after the $scope is $destroy-ed. Thus when the $scope comes back into existence after the ngIf has been made truthy, the $watch logic always fails to see any change between what it was before being $destroy-ed and after. In other words the new value is the same as the old value, but the old value should be null or something undefined. Of course although it can't tell that the $scope was $destroy-ed, the local data the watch is manipulating and populating is empty.</p>  <p>If I do not perform the check of comparing the old to new value, then the watch triggers additional logic too often.</p>  <p>Why is the 'oldVal' maintained even after the $scope is $destroy-ed, and can I do anything to forcefully clear it out?</p>  <pre><code>var module = angular.module('SeFarmFieldsList', ['ui.router']); module.directive('seFarmFieldsList',      ['FarmSvc','MapSvc','FormSvc','UtilSvc',     function(FarmSvc, MapSvc, FormSvc, UtilSvc) {         return {             restrict: 'E',             replace: false,             transclude: false,             scope: {},             templateUrl: '/views/directives/seFarmFieldsList.html',             link: function($scope,elem,attributes) {                 console.log('Starting Directive [Farm Fields List]');                 //========== INIT ===================================                 $scope.selFarm = {};                 $scope.fieldListDisplay = [];                 $scope.selFieldId;                 //========= WATCHES ==================================                 $scope.$on('$destroy', function handleDestroyEvent() {                     console.log('[Farm Fields List] DESTROYED!!!!!!');                     watch_getSelFarm();                 });                  var watch_getSelFarm = $scope.$watch(                     function () {                          return FarmSvc.getSelFarm();                         },                      function (newVal, oldVal) {                         if (!newVal) { return false;}                         if (newVal === oldVal) { return false; } // &lt;- HERE!                         $scope.selFarm = newVal;                         $scope.selFieldId = FarmSvc.getSelFieldId();                         if (!($scope.selFarm.fields)) { return false; }                         doStuff();                     }, true);  [...] </code></pre>