<p>After some aggravation, I found (IMO) odd behavior when a function calls another. If the outer function creates a temporary table, and the inner function creates a temporary table with the same name, the inner function "wins."  Is this intended?  FWIW, I am proficient at SQL Server, and temporary tables do not act this way.  Temporary tables (<code>#temp</code> or <code>@temp</code>) are scoped to the function.  So, an equivalent function (SQL Server stored procedure) would return "7890," not "1234."</p>  <pre><code>drop function if exists inner_function(); drop function if exists outer_function();  create function inner_function() returns integer as $$ begin     drop table if exists tempTable;     create temporary table tempTable (         inner_id int     );     insert into tempTable (inner_id) values (1234);     return 56; end; $$ language plpgsql;  create function outer_function() returns table (     return_id integer ) as $$     declare intReturn integer; begin     drop table if exists tempTable; -- note that inner_function() also declares tempTable     create temporary table tempTable (          outer_id integer     );     insert into tempTable (outer_id) values (7890);     intReturn = inner_function(); -- the inner_function() function recreates tempTable     return query         select * from tempTable; -- returns "1234", not "7890" like I expected end; $$ language plpgsql;  select * from outer_function(); -- returns "1234", not "7890" like I expected </code></pre>