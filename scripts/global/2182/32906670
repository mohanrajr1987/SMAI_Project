<p>I have a event listener registered as follow :</p>  <pre><code>evo_app.listener:     class: %evo_app.listener.class%     arguments:  [@service_container, @event_dispatcher]     tags:         - { name: doctrine.event_listener, event: prePersist }         - { name: doctrine.event_listener, event: postPersist }         - { name: doctrine.event_listener, event: preUpdate } </code></pre>  <p>and the service :</p>  <pre><code>&lt;?php  namespace Evo\AppBundle\Listener;  use Doctrine\ORM\Event\LifecycleEventArgs; use Symfony\Component\DependencyInjection\Container; use Symfony\Component\EventDispatcher\EventDispatcher; use Evo\BackendBundle\Entity\Contact; use Evo\UserBundle\Entity\Customer; use Evo\UserBundle\EvoUserEvents; use Evo\UserBundle\Event\CustomerEvent;  class Listener {     /**      *      * @var \Symfony\Component\DependencyInjection\Container      */     protected $container;      /**      *      * @var \Symfony\Component\EventDispatcher\EventDispatcher      */     protected $eventDispatcher;      /**      * constructor      *      * @param Container $container      * @param EventDispatcher $eventDispatcher      */     public function __construct(Container $container, EventDispatcher $eventDispatcher)     {         $this-&gt;container = $container;         $this-&gt;eventDispatcher = $eventDispatcher;     }      /**      * prePersist      *      * @param LifecycleEventArgs $args      */     public function prePersist(LifecycleEventArgs $args)     {         $entity = $args-&gt;getEntity();         $em = $args-&gt;getEntityManager();          // Contact entity         if ($entity instanceof Contact) {             if (null === $entity-&gt;getType()) {                 $entity-&gt;setType($em-&gt;getRepository('EvoBackendBundle:ContactType')-&gt;find(2));             }         }          // Customer entity         if ($entity instanceof Customer) {             $request = $this-&gt;container-&gt;get('request');             $routeName = $request-&gt;getRequestUri();              // On appel l'event d'insert du customer             $this-&gt;eventDispatcher-&gt;dispatch(EvoUserEvents::PRE_CUSTOMER_INSERTED, $event = new CustomerEvent($entity, $routeName));         }     }      /**      * postPersist      *      * @param LifecycleEventArgs $args      */     public function postPersist(LifecycleEventArgs $args)     {         $entity = $args-&gt;getEntity();          // Customer entity         if ($entity instanceof Customer) {             $request = $this-&gt;container-&gt;get('request');             $routeName = $request-&gt;getRequestUri();              // On appel l'event d'insert du customer             $this-&gt;eventDispatcher-&gt;dispatch(EvoUserEvents::POST_CUSTOMER_INSERTED, $event = new CustomerEvent($entity, $routeName));         }     }      public function preUpdate(LifecycleEventArgs $args)     {         $entity = $args-&gt;getEntity();          // Customer entity         if ($entity instanceof Customer) {             $request = $this-&gt;container-&gt;get('request');             $routeName = $request-&gt;getRequestUri();              // On appel l'event d'insert du customer             $this-&gt;eventDispatcher-&gt;dispatch(EvoUserEvents::PRE_CUSTOMER_UPDATED, $event = new CustomerEvent($entity, $routeName, $args));         }     } } </code></pre>  <p>When browsing the site, everything is ok. But when I try to load fixtures, especially a "Customer" fixture, which create and persist a new Customer entity, I got the following error in the CLI : </p>  <p>[Symfony\Component\DependencyInjection\Exception\InactiveScopeException]   You cannot create a service ("request") of an inactive scope ("request").</p>  <p>I guess it's because of line 58 of the service : <code>$request = $this-&gt;container-&gt;get('request');</code> because CLI mode cannot access the request.</p>  <p>How can I make this service works for both browser and CLI ?</p>