<p>I'm making a paint-like program with a <code>Canvas</code> and several shapes (lines, rectangles etc that the user can draw) inside it. I want the user to be able to make this <code>Canvas</code> be scaled up and scaled down using pinch gestures to a large extent (within reasonable limits, say 5x times smaller/larger from the default size of <code>Width</code>=1000 and <code>Height</code>=1000).</p>  <p>This is pretty easily doable using a <code>ScaleTransform</code> from the control's <code>ManipulationDelta</code>. But I want the <code>Canvas</code> to be as the same size as before; meaning if the <code>Canvas</code> took up the whole screen and then the user pinches-inwards, the <code>Canvas</code> and it's contents should get smaller but the <code>Canvas</code> must still take up the whole screen space (so everything looks smaller but now there is more room for the user to draw shapes).</p>  <p>To do this, I tried increasing the <code>Width</code> and <code>Height</code> of the <code>Canvas</code> in accordance with the amount scaled.</p>  <pre><code>private void ccDraw_ManipulationDelta(object sender, ManipulationDeltaRoutedEventArgs e)     {         CanvasControl ccSender = (CanvasControl)sender;         CompositeTransform ctSender = ccSender.RenderTransform as CompositeTransform;          ctSender.ScaleX *= e.Delta.Scale;         ctSender.ScaleY *= e.Delta.Scale;          ccDraw.Width *= 1/e.Delta.Scale; // sizing up inverse of amount scaled down         ccDraw.Height *= 1/e.Delta.Scale;// same here     } </code></pre>  <p>You'd think this code would do the trick; I'm offset-ing the smaller scale size with an increase in proportions so the end result would be the same - but no the <code>Canvas</code> does shrink but there is no visible increase in <code>Width</code>/<code>Height</code>. However, I could see in the debug output that the Height/Width value had changed from default value 5000 to 6000.13~.</p>  <p>Can anybody tell me what I'm doing wrong ? Or if there's a better way to go about doing this ? Note that the <code>Canvas</code> is not really the inbuilt one but the <code>CanvasControl</code> from Win2D though it shouldn't matter.</p>