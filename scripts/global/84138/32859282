<p>It took me a bit of time to discover this, but designer-specific attributes like <code>TemplatePart</code> are now causing issues with the release build of my UWP application.</p>  <p>Applying this attribute to your controls is using reflection.</p>  <pre><code>[TemplatePart(Name = PART_Panel, Type = typeof(Panel))] public class MyAwesomeControl : Control {    ... } </code></pre>  <p>And build output gives me this:</p>  <blockquote>   <p>warning : Type 'Windows.UI.Xaml.Controls.Panel' was not included in   compilation, but was referenced in type 'MyAwesomeControl'. There may   have been a missing assembly.</p> </blockquote>  <p>If you want the build to work, I have to exclude that attribute. However, that defeats the purpose of a control library. Users of my library will not know that a <code>Panel</code> with the name <code>PART_Panel</code> is required in the template of MyAwesomeControl.</p>  <p>Is there a solution to this? Do I have to enable reflection for that type just to allow design-time attributes through?</p>  <p>I am aware of the <code>rd.xml</code> file that can be embedded in a project. However, if a <code>&lt;Type Name="Windows.UI.Xaml.Controls.Panel" ... /&gt;</code> is included, doesn't that mean that I'm telling the compiler to exclude that panel from .Net Native optimization?</p>