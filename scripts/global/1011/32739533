<p>What I want to achieve is to get base64 string from std::vector&lt;bool&gt;. Basing on examples of boost::archive::iterator::base64_from_binary I've created the following implementation, but is has some drawbacks:</p>  <pre><code>std::string get_as_base64(const std::vector&lt;bool&gt; &amp;sequence) {     namespace bai = boost::archive::iterators;      std::ostringstream stream;      typedef bai::base64_from_binary&lt;bai::transform_width&lt;std::vector&lt;bool&gt;::const_iterator, 6, 1, char&gt;&gt; base64_encoder;     std::copy(base64_encoder(sequence.cbegin()), base64_encoder(sequence.cend()), bai::ostream_iterator&lt;char&gt;(stream));      return stream.str(); } </code></pre>  <p>First thing, it requires the container to has the size as the multiple of 6 (in other case it encounters infinite loop possibly by some misimplementation). Next thing, it causes some compiler warnings to occur because of mangling bool and char types. I've just think that transform_width is not the right tool because it was designed to operate on strings...</p>  <p>Could you propose some better implementation?</p>