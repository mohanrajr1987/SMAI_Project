<p>I have just noticed that if I have 2 tag helpers targeting the same element, both can be executed. The order in which they are executed depends on the order in which they are registered in <strong>_ViewImports.cshtml</strong>.</p>  <p>For example, I can create another tag helper for the anchor element:</p>  <pre><code>[TargetElement("a", Attributes = "foo")] public class FooTagHelper : TagHelper {     public override void Process(TagHelperContext context, TagHelperOutput output)     {         //Get the url from href attribute generated in the default AnchorTagHelper         var url = output.Attributes["href"].Value.ToString();          ...     } } </code></pre>  <p>Use it as follows (notice I am also adding attributes of the default anchor helper like <code>asp-controller</code>):</p>  <pre><code>&lt;a class="menu" asp-controller="Home" asp-action="Index" foo&gt;Foo&lt;/a&gt; </code></pre>  <p>If this helper is registered in _ViewImports.cshtml <strong>after</strong> the default ASP ones:</p>  <ul> <li>Whenever <code>Process</code> is called, the <code>TagHelperOutput</code> already contains the <strong>href</strong> generated by the default <a href="https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.TagHelpers/AnchorTagHelper.cs" rel="nofollow"><code>AnchorTagHelper</code></a>. I could also update the anchor generated by the default tag helper in any way I like.</li> </ul>  <p><strong>Is there any degree of control over this behavior?</strong></p>  <p>You might want to decide whether or not to execute further helpers targeting the same element (As if <em>sealing</em> your output). You might also want to allow other helpers, but make sure some attribute wasn't modified.</p>