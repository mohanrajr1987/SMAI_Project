<p>I have, so far, managed to create default roles and a default user. Now, I would like to display a list of users to manage.  So, I have added a view model for a single user:</p>  <pre><code>public class UserViewModel     {         [Required]         [Display(Name = "Email")]         [EmailAddress]         public string Email { get; set; }          [Required]         [Display(Name = "Enabled")]         public Boolean Enabled {get; set; }         [Required]         [Display(Name ="Active")]         public Boolean Active { get; set; }      } </code></pre>  <p>Now, if anybody is wondering, Enabled and Active are needed for basic management.I know there's code to lock users out, but that is - as far as I know - a protection against multiple wrong logins and it should not change meaning. Now, this view model is a bit basic (I still need all of the lockout stuff to add, so that the admin panel can take care of that as needed) but it's the principle I am after at the moment. So, with this ViewModel in place, I need another one which holds a collection of this stuff and, in its constructor, I need to navigate the Users table and basically assign values from the ApplicationUser to the above ViewModel.  </p>  <p>Please note I have looked at the TypeCastException <a href="http://typecastexception.com/post/2013/11/11/Extending-Identity-Accounts-and-Implementing-Role-Based-Authentication-in-ASPNET-MVC-5.aspx" rel="nofollow">tutorial on the topic</a> but that code strips out a lot of stuff I'd like to keep (such as external logins). That tutorial is also geared towards the higher goal of implementing groups which at the moment is not a priority for me (but it will be once I have some other stuff going).</p>  <p>[UPDATE] Ok, it seems VS does not like my ViewModel without a key.I have researched this and it appears that VS thinks I am trying to create a new database entity (which I really am not, promise!). So, this is my current (and I know it's probably wrong) ViewModel for the user list:</p>  <pre><code>public class UserListViewModel     {         private ICollection&lt;UserViewModel&gt; _UserList = new List&lt;UserViewModel&gt;();         public UserListViewModel( ApplicationDbContext ctx)         {             UserViewModel User;             foreach (var user in ctx.Users)             {                 User = new UserViewModel();                 User.Email = user.Email;                 User.Active = user.Active;                 User.Enabled = user.Enabled;                 User.LockoutEnabled = user.LockoutEnabled;                 User.LockoutEndDateUtc = user.LockoutEndDateUtc;             }         }         public ICollection&lt;UserViewModel&gt; UserList         {             get             {                 return _UserList;             }         } </code></pre>  <p>I think it's pretty obvious what I am trying to do here: I want to create a list that processes the app users and shows a list of relevant properties for each user. </p>  <p>Can somebody please show me the error of my ways and how to do it properly?</p>