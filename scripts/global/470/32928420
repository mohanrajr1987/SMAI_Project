<p>I'm using EF 6 code first with ninject  in an MVC app. For local DEV. I'm using SQLCE which will eventually be replaced by Sql proper. Per <a href="http://stackoverflow.com/questions/12664636/ef-code-first-ioc-and-dbconnection">this post</a>, I've setup the ninject bindings as follows for the <strong>Dbconnection</strong>.</p>  <pre><code>kernel.Bind&lt;DbConnection&gt;().ToMethod((ctx) =&gt;{return new SqlConnection("Data Source=(localdb)\\v11.0;Database=ThatProject;MultipleActiveResultSets=true");});  kernel.Bind&lt;MyContext&gt;.To&lt;MyContext&gt;().InRequestScope() </code></pre>  <p>The following is the context class, the ctor takes a <strong>DbConnection</strong> which allows me to use either a <strong>SqlCeConnection</strong> or a <strong>SqlConnection</strong> as needed.</p>  <pre><code>public class MyContext : DbContext {    public MyContext(DbConnection conn) : base(conn,true){    //true indicates that the context owns the connection which suggests that the connection will be closed when the context is disposed.     } } </code></pre>  <p>Per the above, a new <strong>SqlConnection</strong> will be instantiated per web request. I am not familiar with how EF handles <strong>SqlConnections</strong> by default and I am seeking  some clarity as to whether the above set up is the proper way to setup the Ninject bindings for the <strong>DbConnection</strong> without causing any performance issues / leaks for the SqlConnection.</p>