<p>I have an ASP.NET MVC Application I am working on. The core functionality of the Application all happens in the service layer, with the MVC Website just handling basic request routing and view/model preparation. </p>  <p>Because this application will need to be customizable for 1...N number of clients that all may have different code needs, I want to develop the core functionality with a heavy reliance on Interfaces. In my reading, I feel like Unit or another Dependency Injection / IOC framework would be a idea for this code. All the examples I have seen so far though involve using Unity to resolve <em>everything</em> including the Controllers. This seems like overkill to me since I do not see needing this functionality. Is there a way to use an IoC container without abstracting away the entire MVC framework. </p>