<p>So, I was helping out in an <a href="http://serverfault.com/questions/726346/how-can-i-export-to-csv-a-custom-output-along-with-module-properties-powershel/726357?noredirect=1#comment904801_726357">question on ServerFault</a> and I ran into some odd behaviour.</p>  <p>If I get an object of the <code>Microsoft.ActiveDirectory.Management.ADUser</code> type, such as through <code>Get-ADUser</code>, whenever I try to add a <code>NoteProperty</code> using <code>Add-Member</code>, you get the following situation:</p>  <pre><code>PS C:\Users\someuser&gt; $u = get-aduser someuser PS C:\Users\someuser&gt; $u | add-member ldskfjlkdsfj dfklsjdflkdsjf add-member : Cannot add a member with the name "ldskfjlkdsfj" because a member with that name already exists. To overwrite the member anyway, add the Force parameter to your command. At line:1 char:6 + $u | add-member ldskfjlkdsfj dfklsjdflkdsjf +      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~     + CategoryInfo          : InvalidOperation: (CN=someuser,...example,DC=com:PSObject) [Add-Member], InvalidOperationException     + FullyQualifiedErrorId : MemberAlreadyExists,Microsoft.PowerShell.Commands.AddMemberCommand </code></pre>  <p>Using the <code>-Force</code> parameter does allow me to "overwrite" this bogus property, but what is it about this object that makes it act like it already has every property?</p>  <p>Trying to access any property (even one not previously added) just returns nothing, rather than throwing an exception as I'd expect. Setting a property is possible, although with a "regular" PowerShell object I imagine it shouldn't be.</p>  <pre><code>PS C:\Users\someuser&gt; $u = get-aduser someuser PS C:\Users\someuser&gt; $u.bogus PS C:\Users\someuser&gt; $u.fishy PS C:\Users\someuser&gt; $u.fishy = "fish" PS C:\Users\someuser&gt; $u.fishy fish PS C:\Users\someuser&gt; </code></pre>  <p>I'm not sure if this matters, but this behaviour is seen for me on Windows Server 2012 R2 with PowerShell 4.0.</p>