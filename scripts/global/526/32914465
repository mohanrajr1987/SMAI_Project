<p>I'm having issues making calls to the local database using the method outlined below.</p>  <p><strong>Error Message</strong></p>  <blockquote>   <p>invoke-sqlcmd : Value cannot be null.   Parameter name: ServerInstance   At C:\filelocation\HealthCheckCombined.ps1:86 char:3    1.         invoke-sqlcmd -query $agentquery -serverinstance $servername  ...    2.         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~       + CategoryInfo          : InvalidArgument: (:) [Invoke-Sqlcmd], ArgumentNullException       + FullyQualifiedErrorId : CannotGetServerInstance,Microsoft.SqlServer.Management.PowerShell.GetScriptCommand</p> </blockquote>  <hr>  <p><strong>Environment(s)</strong></p>  <ul> <li>Server 2016 Candidate 3</li> <li>Server 2012</li> <li>SQL Server 2014</li> <li>SQL Server 2012</li> <li>PowerShell 3.0, 4.0 &amp; 5.0</li> </ul>  <hr>  <p><strong>Goal</strong></p>  <p>I'm trying to run a query via PowerShell against whatever SQL instance is listed in the servers.txt (config file).</p>  <hr>  <p><strong>Two components</strong>-</p>  <ol> <li>External Configuration File (servers.txt)</li> <li>PowerShell script containing functions, loop to create an array from servers.txt and execute the function.</li> </ol>  <p>So the contents of <strong>servers.txt</strong> looks like=</p>  <pre><code>server=test2k16\powershell server=test2k16\healthcheck </code></pre>  <p>Here's the section where I import the text file and create the function=</p>  <pre><code>#=============================================================================== #Configurable variables #=============================================================================== $configfile = 'C:\filelocation\servers.txt' Import-Module "sqlps" #===============================================================================  #=============================================================================== #SQL Agent Jobs #=============================================================================== function SQLAgent{ $agentquery= @"     declare @count int     select @count = count(1) from msdb.dbo.sysjobs as sj     join msdb.dbo.sysjobhistory as sjh on sj.job_id = sjh.job_id     where sj.enabled != 0     and sjh.sql_message_id &gt; 0     and sjh.run_date &gt; CONVERT(char(8), (select dateadd (day,(-30), getdate())), 112)     and sjh.Step_id &lt;= 1      if (@count &gt;= 1)         begin             select distinct sj.name as SQLJobName             from msdb.dbo.sysjobs as sj             join msdb.dbo.sysjobhistory as sjh on sj.job_id = sjh.job_id             where sj.enabled != 0             and sjh.sql_message_id &gt; 0             and sjh.run_date &gt; CONVERT(char(8), (select dateadd (day,(-30), getdate())), 112)             and sjh.Step_id &lt;= 1         order by name     end          else         begin             Select 'No Job Failed in Last Month' as SQLJobName         end "@          invoke-sqlcmd -query $agentquery -serverinstance $servername -username "user" -password "password" | Format-Table -AutoSize -Wrap } #=============================================================================== </code></pre>  <p>Now I make the magic happen by formatting the imported variables and looping through them while running the function=</p>  <pre><code>#=============================================================================== #Run Health Check for each server #=============================================================================== $import = $(foreach ($line in get-content $configfile) {$line.tolower().split(" ")}) | sort | get-unique ForEach ($_ in $import){     $servername = $import.trimstart("server=") } ForEach ($_ in $servername){     SQLAgent } #=============================================================================== </code></pre>  <hr>  <p><strong>Findings thus far</strong></p>  <ul> <li>Extracting the code within in the function and importing the text file works perfectly fine.  No error.</li> <li>The $servername variable in the loop displays the correct values (test2k16\powershell &amp; test2k16\healthcheck) if I change the script to only display those variables in the loop</li> </ul>  <p>I'm obviously missing something... I've been searching the stack and Google for a day now and finding nothing.  Hopefully it's something small I overlooked or don't understand about PowerShell yet.</p>  <p>Thanks in advance for any help!</p>