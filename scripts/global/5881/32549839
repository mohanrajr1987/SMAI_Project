<p><strong>Introduction</strong></p>  <p>I recently started working on a legacy product, under Linux, which incorporates a builtin TCL shell. Due to company limitations, I can't gain control to "behind the scenes" and all of the code I can write must be run under this TCL shell, handling the pre-defined clumsy TCL API of the product. </p>  <p>I found myself wondering a few times whether it will be possible to patch some Python into this setup, as some solutions seem more legitimate in Python than in TCL. By patching Python I mean: either calling the Python code from the TCL code itself (which can be done with <em>Elmer</em>, for example), or to use Python from outside of the product to wrap the TCL API (for which I found no "classic" solution). </p>  <p><strong>The Problem</strong></p>  <p>Given that the product already <strong>has</strong> an existing TCL shell <em>in it</em>, most solutions I browsed through (e.g. <em>Tkinter</em>) can't be used to run the TCL code from Python. I need to "inject" the code to the existing shell.</p>  <p><strong>Solutions Considered</strong></p>  <p>As a solution, I thought about bringing up a simple server on the TCL side which runs simple commands it receives from the Python side. I wrote a small demo and it worked. This enabled me to write a nice, class based, wrapper in Python for the clumsy TCL API, also manage a command queue, etc.</p>  <p>Another two solutions I thought of is forking the software from Python and playing with the read/write file descriptors or connecting through FIFO rather than a socket.</p>  <p>However, I wondered whether I'm actually doing it right or can you suggest a better solution?</p>  <p>Thanks in advance.</p>