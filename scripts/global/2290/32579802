<p>What is the best way to handle a <code>File</code> entity where you have multiple <code>ManyToOne</code> relationships. </p>  <p>Let's say I have 5 entities that has a <code>OneToMany</code> relationship with the <code>File</code> entity.</p>  <p>File.php </p>  <pre><code>/**  * @ORM\ManyToOne(targetEntity="Entity1", inversedBy="files")  * @ORM\JoinColumn(name="entity1_id", referencedColumnName="id", nullable=true, onDelete="CASCADE")  */ private $entity1;   /**  * @ORM\ManyToOne(targetEntity="Entity2", inversedBy="files")  * @ORM\JoinColumn(name="entity2_id", referencedColumnName="id", nullable=true, onDelete="CASCADE")  */ private $entity2;  and so one....  </code></pre>  <p>Entity1.php</p>  <pre><code>  /**  * @ORM\OneToMany(targetEntity="File", mappedBy="entity1" , cascade={"persist", "remove"}, orphanRemoval=true)  */ protected $images; </code></pre>  <p>The great thing about the above is the getter and setter are set, I can persist and save to the database automatically. The relationship is set and I can load the files by just calling <code>$entity1-&gt;getFiles()</code>.</p>  <p>What I don't like is every time I want to add another entity that has a <code>OneToMany</code> with <code>File</code> it creates a new column in the database so potential I could have 10 columns referencing Ids from other entities.</p>  <p>What I would like to achieve is saving the class of the entity in the <code>class</code> field and saving the <code>id</code> of the record in an <code>id</code> field but also somehow still allowing the persist and collection saving to work.</p>  <pre><code>entity_id | class ------------------------------------------ 2         | ProjectBundle/Entity/Entity1 3         | ProjectBundle/Entity/Entity2 </code></pre>