<p>I'm new to Doctrine and had a hard time deciding how to get random rows within it without creating custom DQL functions or using a native query.  The solution I have come up with is below, this is within a custom repository for an Entity. I'm hoping for some constructive criticism in regards to it, however it currently is working. </p>  <pre><code>class MyRepository extends EntityRepository {  /**  * @param int $numberOfResults  * @return array  */ public function getRandomResults($numberOfResults = 1) {     $maxID = $this-&gt;getMax();     $count = 0;     $randomNumberCounter = 0;     $randomNumbers = array();     while ($randomNumberCounter &lt; $numberOfResults) {         $randomNumberCounter++;         $randomNumbers[] = $this-&gt;getRandom(0, $maxID);     }      $qb = $this-&gt;createQueryBuilder('r');     while ($count &lt; $numberOfResults) {         $qb             -&gt;andWhere(                 $qb-&gt;expr()-&gt;orX(                     // the greater than is to account for holes within the primary key                     $qb-&gt;expr()-&gt;gte("r.id", "?".$count),                     /* the less than is in case we have a beginning database with a large disparity                     between starting and ending ID */                     $qb-&gt;expr()-&gt;lte("r.id", "?".$count)                 )             );         $count++;     }     $result = $qb         -&gt;setParameters($randomNumbers)         -&gt;setMaxResults($numberOfResults)         // ensure we have no duplicates         -&gt;groupBy('r.id')         -&gt;getQuery();      return $result-&gt;getResult(); }   /**  * get the maximum ID that the table has  * @return mixed  * TODO: Create a Cron job to set this every 6 hours  */ public function getMax() {     $maxID = $this-&gt;createQueryBuilder('r')         -&gt;select('(MAX(r.id))')         -&gt;getQuery()         -&gt;getSingleScalarResult();     return $maxID; }  /**  * @param $min  * @param $max  * @return int  */ public function getRandom($min, $max) {     return mt_rand($min, $max); } } </code></pre>