<p>i wanted to create an Custom EntityRepository to load a User from the Database, so i followed <a href="http://symfony.com/doc/current/cookbook/security/entity_provider.html" rel="nofollow">http://symfony.com/doc/current/cookbook/security/entity_provider.html</a> this tutorial.</p>  <p>Now i get a exception and i do not know why:<br><br> <code>{"error":{"code":500,"message":"Internal Server Error","exception":[{"message":"The user provider must be an instance of WebserviceUserRepository (Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider was given)."</code></p>  <p>If I remove <code>extends EntityRepository</code> from my WebserviceUser repo and also change security.ml and <code>services.yml</code> than the authentication works and the class is an instanceof WebserviceUserRepository.</p>  <p>I am using <code>Symfony 2.7</code></p>  <p>I hope somebody can help me with that i am starting to pull my hair out ;-)</p>  <p>My Api Key Authenticator looks like that:<br><br></p>  <pre><code>class ApiKeyAuthenticator implements SimplePreAuthenticatorInterface,       AuthenticationFailureHandlerInterface {  public function createToken(Request $request, $providerKey) {     // look for an apikey query parameter     $apiKey = $request-&gt;query-&gt;get('apikey');      // or if you want to use an "apikey" header, then do something like     this:     // $apiKey = $request-&gt;headers-&gt;get('apikey');      if (!$apiKey) {         throw new BadCredentialsException('No API key found');          // or to just skip api key authentication         //return null;     }      return new PreAuthenticatedToken(         'anon.',         $apiKey,         $providerKey     ); }  public function authenticateToken(TokenInterface $token, UserProviderInterface $userProvider, $providerKey) {      **if (!$userProvider instanceof WebserviceUserRepository) {**         throw new \InvalidArgumentException(             sprintf(                 'The user provider must be an instance of WebserviceUserRepository (%s was given).',                 get_class($userProvider)             )         );     }      $apiKey = $token-&gt;getCredentials();     $username = $userProvider-&gt;getUsernameForApiKey($apiKey);      if (!$username) {         throw new AuthenticationException(             sprintf('API Key "%s" does not exist.', $apiKey)         );     }      $user = $userProvider-&gt;loadUserByUsername($username);      return new PreAuthenticatedToken(         $user,         $apiKey,         $providerKey,         $user-&gt;getRoles()     ); }  public function supportsToken(TokenInterface $token, $providerKey) {     return $token instanceof PreAuthenticatedToken &amp;&amp; $token-&gt;getProviderKey() === $providerKey; }  public function onAuthenticationFailure(Request $request, AuthenticationException $exception) {     return new Response("Authentication Failed.".$exception-&gt;getMessage(), 403); } </code></pre>  <p>this is my user repo: <br><br></p>  <pre><code>class WebserviceUserRepository extends EntityRepository implements  UserProviderInterface {  public function getUsernameForApiKey($apiKey) {     // Look up the username based on the token in the database, via     // an API call, or do something entirely different      $username = 'username';      return $username; }  public function loadUserByUsername($username) {     // make a call to your webservice here     $userData = "";     // pretend it returns an array on success, false if there is no user      if (false) {         $password = 'password';         $salt = '';         $roles = array('roles' =&gt; 'ROLE_ADMIN');          return new WebserviceUser($username, $password, $salt, $roles);     }          throw new UsernameNotFoundException(             sprintf('Username "%s" does not exist.', $username)         );  }  public function refreshUser(UserInterface $user) {     $class = get_class($user);     if (!$this-&gt;supportsClass($class)) {         throw new UnsupportedUserException(             sprintf(                 'Instances of "%s" are not supported.',                 $class             )         );     }      return $this-&gt;find($user-&gt;getUsername()); }  public function supportsClass($class) {     return $this-&gt;getEntityName() === $class     || is_subclass_of($class, $this-&gt;getEntityName()); } } </code></pre>  <p>i also added the repository class to my entity object:</p>  <pre><code> * @ORM\Table()  *     @ORM\Entity(repositoryClass="Moera\RestBundle\Entity\WebserviceUserRepository")  */ class WebserviceUser implements UserInterface, \Serializable, EquatableInterface </code></pre>  <p>and i also registered bot classes in security.yml and services.yml:</p>  <pre><code>services:   webservice_user_provider:     class: Moera\RestBundle\Entity\WebserviceUserRepository  apikey_authenticator:     class: Moera\RestBundle\Security\ApiKeyAuthenticator     public: false  security:   encoders:     Moera\RestBundle\Entity\WebserviceUser:         algorithm: bcrypt    providers:     webservice_user_provider:         entity:             class: MoeraRestBundle:WebserviceUser    firewalls:     secured_area:         pattern: ^/         stateless: true         simple_preauth:             authenticator: apikey_authenticator         provider: webservice_user_provider </code></pre>  <p>Thank You very much!</p>  <p>Kind Regards, Johannes</p>