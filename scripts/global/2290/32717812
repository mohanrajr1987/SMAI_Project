<p>I have two entities <code>product</code> and <code>document</code> which are related via a <code>many-to-many</code> relationship with a <code>JOIN</code> table. My product entity looks like below, my document entity currently has no reference back to the product.</p>  <pre><code>/**  * @ORM\Entity  * @ORM\Table(name="product")  * @ORM\Entity(repositoryClass="\MyApp\CmsBundle\Repository\ProductRepository")  */ class Product {     // ...      /**      * @ManyToMany(targetEntity="Document")      * @JoinTable(name="products_documents",      *      joinColumns={@JoinColumn(name="product_id", referencedColumnName="id")},      *      inverseJoinColumns={@JoinColumn(name="document_id", referencedColumnName="id")}      *      )      **/      protected $documents;       // ...       public function __construct()      {          $this-&gt;documents = new ArrayCollection();      }      public function addDocument(Document $document)     {         $this-&gt;documents[] = $document;          return $this;     }      public function removeDocument(Document $document)     {         $this-&gt;documents-&gt;removeElement($document);     }      public function getDocuments()     {         return $this-&gt;documents;     } </code></pre>  <p>When I present the product on the front-end of the site I also list it's documents. However I need to be able to filter them out based on their attributes <code>status</code> and <code>privacy</code>.</p>  <p>So I've been trying to create an entity repository to handle this logic but everything I've tried so far has failed. What I need to achieve is a query similar to this, but in a Symfony/Doctrine format:</p>  <pre><code>SELECT d.* FROM documents d, products_documents pd, WHERE pd.product_id = :product_id   AND pd.document_id = d.id,   AND d.status = 'PUBLISHED',   AND d.privacy = 'PUBLIC'; </code></pre>  <p>Ideally I would like to be able to do something as simple as this from my controller:</p>  <pre><code>// get documents to display on front-end $documents = $em-&gt;getRepository('MyAppCmsBundle:Product')-&gt;getDocumentsForProduct($product); </code></pre>  <p>I've got the call to the function working, I'm just not clued up on how to retrieve the data I want.</p>  <p><strong>UPDATE</strong></p>  <p>This is what I've got so far, whilst maintaining working code, but instead of returning documents it returns all products. I'm not sure how to add the condition to specify it to the product I pass in, or to return the documents and not the product.</p>  <p><em>ProductRepository.php</em></p>  <pre><code>public function getDocumentsForProduct(Product $product, $authenticated = false) {     $query = $this-&gt;createQueryBuilder('p')     -&gt;join('MyApp\CmsBundle\Entity\Document', 'd')     -&gt;where('d.status = :status')     -&gt;andWhere('d.privacy = :privacy')     -&gt;setParameters(array(         'status' =&gt; 'PUBLISHED',         'privacy' =&gt; 'PUBLIC',     ))     -&gt;getQuery();      return $query-&gt;getResult(); } </code></pre>