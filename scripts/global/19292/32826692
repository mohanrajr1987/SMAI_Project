<p>My goal is to create an event handling infrastructure that will allow for registration of callback functions and calls to such functions based on time. Further, I plan to make the callback handler multithreaded as there are no restrictions on the type of callbacks, so a sequential architecture could cause unwanted blocking.</p>  <p>From my research I found that if a thread experiences undefined behavior and is terminated (.i.e. with SIGSEGV) then the entire process exits - which is obviously undesirable. </p>  <p>The question, then, is what options are there for ensuring thread independence? I do not think <code>fork</code>ing is a viable  option in this case since the callbacks are not fully fledged programs, but rather simple routines to do various time-based tasks.</p>