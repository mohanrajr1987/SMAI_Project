<p>I am very very new to C programming. Recently I am writing a homework assignment about sorting a linked list. Suppose there is a file called <code>file1.txt</code>, and it looks like:</p>  <pre><code>i 10 i 12 d 10 i 5 </code></pre>  <p>So the program first determines whether the letter is <code>i</code>; if it is, then insert the number on the same line into the linked list and sort; if it is not, the number must be deleted from the linked list. So the output for <code>file1.txt</code> should be: </p>  <pre><code>5 12 </code></pre>  <p>I finished all the steps of this program, but it always give me a "segmentation fault(core dumped)"; and I have no idea which part I am wrong. </p>  <pre><code>#include&lt;stdio.h&gt; #include&lt;stdlib.h&gt; #include&lt;string.h&gt;   struct node  { // create the node structure      int data;     struct node *next; };  int insert(struct node **root, int n); int delete(struct node **root, int n); void print(struct node **root);  int main(int argc, char argv[100]){ //start with empty linked list      struct node *root = NULL; // if the input is more than one, error     if(argc!=1)     {         printf("error\n");         return -1;     }  // argv[1] will contain the file name input.      scanf("%s",argv);     FILE *file = fopen(argv, "r");  //check if the file exit      if (file == NULL)     {         printf("error\n");         return -1;     }  // if the file is empty, print an empty line.     fseek(file,0,SEEK_END);     int size = ftell(file);     if (size == 0){         printf("\n");         return 0;     }  //read the file     int k;     for(k=0;k&lt;size;k++)     {         printf("hi");         char *letter;         int *number;         int n;         fscanf(file,"%c %d", letter, number);          if(*letter == 'i')         {   //convert the pointer to its location           number=&amp;n;           insert(&amp;root,n);       }        else       {           number=&amp;n;           delete(&amp;root,n);       }   }     print(&amp;root);   fclose(file);  }   //insertion at front  int insert(struct node **root, int n) { //node should be inserted      struct node *newnode = (struct node *)malloc(sizeof(struct node));       if(*root==NULL) { //if the list is empty   *root=newnode;  } else{     newnode-&gt;data=n;     newnode-&gt;next=*root;     *root=newnode; } };      int delete(struct node **root, int n) {     if(*root==NULL)       return 0;   struct node *temp = *root;   if(temp-&gt;data == n)   {     if(temp-&gt;next)     {         *root = temp-&gt;next;     }     free(temp);  } while(temp-&gt;next) {     struct node *delete = temp-&gt;next;     if((temp-&gt;next-&gt;next) &amp;&amp; temp-&gt;next-&gt;data == n)     {         //delete next                     temp-&gt;next = temp-&gt;next-&gt;next;         free(delete);      }     else if(temp-&gt;next-&gt;data == n)     {         //the last node         temp-&gt;next = NULL;         free(delete);      }     temp = temp-&gt;next;             }  }  void print(struct node **root) { //first count current node in the list     struct node *p = *root;     int c=0;     while(p!=NULL)     {       p=p-&gt;next;       c++;   }  //use c get above to do a selection sort   int i,j,temp;   struct node *prev, *curr, *t;   prev=*root;    for(i=0;i&lt;c-1;i++)   {       curr=prev-&gt;next;       for(j=i+1;j&lt;c;j++)       {           if(prev-&gt;data &gt; curr-&gt;data)           {               temp=prev-&gt;data;               prev-&gt;data=curr-&gt;data;               curr-&gt;data=temp;           }           curr=curr-&gt;next;       }       prev=prev-&gt;next;   }  //print the linked list   t=*root;   while(t!=NULL)   {       printf("%d",t-&gt;data);       t=t-&gt;next;       printf("\t");   } } </code></pre>