<p>I have an issue with a segfault that I can not figure out. It's from an <code>EntityManager</code> for a small game engine I'm working on. I can add the <code>Ship Entity</code>, and the Ship can add 1 <code>Bullet Entity</code>, but it segfaults if I try to add more than 1 <code>Bullet</code>. I've been trying to figgure this out for the past day now. Below is a small excerpt from the actual code.</p>  <pre><code>#include &lt;vector&gt; #include &lt;memory&gt;  struct EntityManager; struct Entity {     Entity(EntityManager* manager) : manager(manager) { }     virtual ~Entity() { }     virtual void update() = 0;      EntityManager* manager; }; struct EntityManager {     void update() {         for (auto&amp; entity : entities) {             entity-&gt;update();         }     }     void add(Entity* e) {         entities.emplace_back(e);     }     std::vector&lt;std::unique_ptr&lt;Entity&gt;&gt; entities; }; struct Bullet : public Entity {     Bullet(EntityManager* manager) : Entity(manager) { printf("Bullet ctor\n"); }      virtual void update() override { } }; struct Ship : public Entity {     Ship(EntityManager* manager) : Entity(manager) { }      virtual void update() override {         printf("Adding Bullet\n");         manager-&gt;add(new Bullet(manager));     } }; int main() {     EntityManager manager;     manager.add(new Ship(&amp;manager));      int loops{0};     while (loops &lt; 100) {         manager.update();         loops++;         printf("Completed Loop #%d\n", loops);     }     return 0; } </code></pre>  <p>In the actual code, everything is in their own .h/.cpp files, and classes instead of structs, but the issue is the same.  The output is `Adding Bullet // Bullet ctor // Completed Loop #1 // Adding Bullet // Bullet ctor // Signal: SIGSEGV (Segmentation fault)</p>  <p>The segfault happens in the <code>EntityManager::update()</code> on the <code>entity-&gt;update();</code> line.</p>