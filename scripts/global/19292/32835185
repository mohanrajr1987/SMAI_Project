<p>I have a independant (means have not be associated with YACC yet) LEX program. And it is ok to be compiled. But when I run it, I got error message like below:</p>  <p>Segmentation fault: 11</p>  <p>This error message happened when several link has been successfully read. </p>  <p>Could you please help me with the problem?</p>  <p>Thank you!</p>  <p>Code:</p>  <pre><code>  %{   #include &lt;strings.h&gt;   typedef int YYSTYPE;   extern YYSTYPE yylval;   int check;    int dummy;   int val1;   int val2;   char *net_name;    int fanouts;   int fanins;   char *net_name;   char *GATE_ASCI;   char *GATE_TYPE;   char *from;   int fan_net;   %}    %start A B C D E F   NET_NAME  [0-9]   ASCI_GATE [0-9a-zA-Z]+   SOURCE_GATE_TYPE  [a-zA-Z]+   NUM_FANOUTS [0-9]   NUM_FANINS [0-9]   INPUT_LIST_1 [0-9]   INPUT_LIST_2 [0-9]   SPACE  [ \t\n]+   FAN_NET [0-9a-zA-Z]+   DIGITS [0-9]   character [a-zA-Z]+     %%    "*".*\n               {                            BEGIN A;                            //yylval.string = strdup(yytext);                            /*printf("I am here in comments \n");*/                            //return(COMMENT);                         }    &lt;A&gt;{NET_NAME}            {                              BEGIN B;                              net_name = strdup(yytext);                                   /*  yylval.number = atoi(yytext);*/                              printf("%s",net_name);                            }     &lt;B&gt;{ASCI_GATE}             {                                 BEGIN C;                                   GATE_ASCI = strdup(yytext);                                printf("%s", GATE_ASCI);                               }     &lt;C&gt;{SOURCE_GATE_TYPE}       {                                 check = find_gate_type(yytext);                                 if (check != 0) {                                   BEGIN D;                                     GATE_TYPE = strdup(yytext);                                   printf("%s", GATE_TYPE);                               }                                 else {                                      /* printf("I am here in From \n"); */                                     BEGIN E;                                       from  = strdup(yytext);                                     printf("%s", from);                               }                           }     &lt;D&gt;{NUM_FANOUTS}{SPACE}{NUM_FANINS}       {                                             /* printf("NUM_FANOUTS NUM_FANINS\t");*/                                                fanouts =   atoi(&amp;yytext[0]);                                               fanins =   atoi(&amp;yytext[2]);                                                printf("%d %d",fanouts, fanins);                                               /*BEGIN F;*/                                             /*yylval.number = atoi(yytext);*/                                            /* printf("I am here in Fanout \n");*/                                               BEGIN A;                                             }    &lt;E&gt;{FAN_NET}                             {                                             BEGIN A;                                              fan_net  = strdup(yytext);                                             printf("%s", fan_net);                                            }    &lt;F&gt;{DIGITS}                         {                                           BEGIN A;                                             val1 =   atoi(&amp;yytext[0]);                                            val2 =   atoi(&amp;yytext[1]);                                            printf("%d %d",val1, val2);                                           }    "&gt;sa"[0-1]                            {                                         printf("%s", yytext);                                          }    %%    find_gate_type(char *string_pass){     char *string_cmp = "from";      if(strcmp(string_pass, string_cmp) == 0) {      /* printf("I am here  in FROM FUNCTION \n"); */      return 0;     }      else{       return 1;      }   }    int main(int argc, char *argv[]){   //int argc;   //char **argv;             if (argc &gt; 1) {                   FILE *file;                   file = fopen(argv[1], "r");                   if (!file) {                           fprintf(stderr,"could not open %s\n",argv[1]);                   } else {                     printf("reading\n");                    yyin = file;                   }          yylex();         return 0;                     /*  fclose(file);*/         }     }     int yywrap(void)   {     return 1;   } </code></pre>