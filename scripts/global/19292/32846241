<p>So - I have a shared_ptr which shall get a new content. But while trying that, I get a segfault.</p>  <p>The class will be used by the shared_ptr later:</p>  <pre><code>class MatrixClass { public:   MatrixClass(const MatrixClass &amp;other)     : matrix(       std::make_shared&lt;std::vector&lt;std::vector&lt;MyListType&gt; &gt; &gt;(         (*other.matrix).begin(),         (*other.matrix).end()       )     )   {   }    MatrixClass(std::initializer_list&lt;std::initializer_list&lt;MyListType&gt; &gt; &amp;matrixIn)     : matrix(       std::make_shared&lt;std::vector&lt;std::vector&lt;MyListType&gt; &gt; &gt;(         matrixIn.begin(),         matrixIn.end()       )     )   {   }    virtual ~MatrixClass() = default;  private:   std::shared_ptr&lt;std::vector&lt;std::vector&lt;MyListType&gt; &gt; &gt; matrix; }; </code></pre>  <p>The class that generates the segfault:</p>  <pre><code>class SomeClass { public:   SomeClass()   {     this-&gt;contents = {       {         {MyListType::EMPTY, MyListType::EMPTY, MyListType::EMPTY},         {MyListType::EMPTY, MyListType::EMPTY, MyListType::EMPTY},         {MyListType::EMPTY, MyListType::EMPTY, MyListType::EMPTY}       },       {         {MyListType::EMPTY, MyListType::EMPTY, MyListType::EMPTY},         {MyListType::EMPTY, MyListType::EMPTY, MyListType::EMPTY},         {MyListType::EMPTY, MyListType::EMPTY, MyListType::EMPTY}       }     };      this-&gt;Regenerate();   }    // calling this once is okay,   // but twice results in Segmentation violation signal   void Regenerate()   {     int possibleContents = this-&gt;contents.size();     int contentNumber = myrand(0, possibleContents - 1);     auto matrix = this-&gt;contents[contentNumber];      // !! if the following line is removed, there is no more segfault:     this-&gt;myMatrix = std::make_shared&lt;MatrixClass&gt;(       matrix     );   }    std::shared_ptr&lt;MatrixClass&gt; GetMatrix() const   {     return this-&gt;myMatrix;   }  private:   std::shared_ptr&lt;MatrixClass&gt; myMatrix;    std::vector&lt;std::initializer_list&lt;std::initializer_list&lt;MyListType&gt; &gt; &gt; contents; }; </code></pre>  <p>And some code to run it:</p>  <pre><code>int main() {   auto someClass = std::make_shared&lt;SomeClass&gt;();    auto firstMatrix = someClass-&gt;GetMatrix();    someClass-&gt;Regenerate(); // throws segfault    auto secondMatrix = someClass-&gt;GetMatrix();    // here would be some code to check that   // firstMatrix does not equal secondMatrix     return 0; } </code></pre>  <p>So what is going wrong here?</p>