<p>I've been fighting for several hours to understand why <code>begin()</code> of vector within a map doesn't return the same address if I point to the <code>vector.begin()</code> itself or the <code>second.begin()</code> member of the map.</p>  <p>Let me explain:</p>  <p>I have a class containing a map which key is an <code>int</code> and its content a vector of <code>int</code>. I have to go through the map and keep in memory the position where I was 'just before', so I also have another map of iterators (of the first map).</p>  <p>So, I would like to get something like:</p>  <ul> <li>map1 : &lt;2,&lt;3,8,1,3,7,1>></li> <li>map2 : &lt;8,&lt;6,9,1,3>></li> <li>map3 : &lt;1,&lt;3,1>></li> <li>etc.</li> </ul>  <p><em>To make it simpler, in my code, the <code>T_IPC_CommandId</code> is just an enum of <code>int</code>.</em></p>  <p>I have a method called <code>Add(int TopCommand, int Command)</code> which fills/creates the map of vectors of commands. For example, to create <code>map3</code>, I will code:</p>  <pre><code>Add(1,3), Add(1,1) </code></pre>  <p>I have a method called <code>GetNext(int Command)</code> which returns the next <code>int</code>, in the map pointed by <code>Command</code>. For example in <code>map2</code>, calling <code>Get(8)</code> will return <code>6</code>, and the next call will return <code>9</code>, then <code>1</code>, <code>3</code> and <code>0</code> for the next calls.</p>  <p>In order to know which <code>int</code> I will return, I need to keep track, for each map, what is the next <code>int</code> to return. So, I use a <code>IPC_CommandId_Pointer</code> which is a map which key is the command itself and holds the iterator where I am in the map. And here is the problem:</p>  <p>At each <code>Add()</code> call, I initialise this <code>IPC_CommandId_Pointer</code> to the beginning of main map. Like this:</p>  <pre><code>        void T_ListOfCommand::Add(T_IPC_CommandId   Top_CommandId, T_IPC_CommandId IPC_CommandId)     {         T_IPC_CommandId_Vec_Iter Vec_Iter;         T_IPC_CommandId_Vec      Vec;          if ((IPC_CommandId_Map.find(Top_CommandId)) == IPC_CommandId_Map.end())         {              IPC_CommandId_Map[Top_CommandId].clear();         }         IPC_CommandId_Map[Top_CommandId].push_back(IPC_CommandId);          // Repeated at each add, but don't care ...         Vec_Iter = IPC_CommandId_Map[Top_CommandId].begin();         IPC_CommandId_Pointer[Top_CommandId] = Vec_Iter;     } </code></pre>  <p>The problem I have is that, at each <code>IPC_CommandId_Map[Top_CommandId].push_back(IPC_CommandId)</code>, the <code>IPC_CommandId_Map[Top_CommandId].begin()</code> doesn't return the same address.</p>  <p>Now, when replacing the:</p>  <pre><code>Vec_Iter = IPC_CommandId_Map[Top_CommandId].begin(); IPC_CommandId_Pointer[Top_CommandId] = Vec_Iter; </code></pre>  <p>With:</p>  <pre><code>Vec = IPC_CommandId_Map[Top_CommandId]; IPC_CommandId_Pointer[Top_CommandId] = Vec.begin(); </code></pre>  <p>This works fine.</p>  <p>I'm supposing to point to the same location when using the <code>begin()</code> in the map, or when dereferencing the vector, isn't it? Well, it seems not.</p>  <p>If someone could explain me the difference, that would be great.</p>