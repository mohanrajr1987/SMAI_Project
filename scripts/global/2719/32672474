<p>tl;dr: I'm looking for a C++ replacement of Python's <a href="https://docs.python.org/3/library/heapq.html#heapq.heapreplace" rel="nofollow"><code>heapq.heapreplace</code></a>.</p>  <p>I have to process a max-heap (used as a priority queue) in such a way that I pop the top element, subtract an unspecified number and then push that modified element again. I could do this using just <a href="http://en.cppreference.com/w/cpp/algorithm/pop_heap" rel="nofollow"><code>pop_heap</code></a> and <a href="http://en.cppreference.com/w/cpp/algorithm/push_heap" rel="nofollow"><code>push_heap</code></a> but this does unnecessary work because it has to modify the heap twice, each time re-establishing the heap invariant:</p>  <pre><code>std::vector&lt;unsigned&gt; heap; // ... std::pop_heap(heap.begin(), heap.end()); // Re-establishes heap invariant. decrease(heap.back()); std::push_heap(heap.begin(), heap.end()); // Re-establishes heap invariant again. </code></pre>  <p>An efficient interface could look something like this:</p>  <pre><code>decrease(heap.front()); // Modify in-place. replace_heap(heap.begin(), heap.end()); </code></pre>  <p>Is there some trickery with which I get the STL to do what I want or do I have to write <code>replace_heap</code> myself?</p>