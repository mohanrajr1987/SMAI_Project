<p>I want to move one vector to another without a copy. I found this <a href="http://stackoverflow.com/questions/12613428/stl-vector-moving-all-elements-of-a-vector">STL vector: Moving all elements of a vector</a>. I wanted to test it out so I coded up a simple example below.</p>  <p>C++ compiler version:</p>  <pre><code>g++ 5.1.0 on (Ubuntu 5.1.0-0ubuntu11~14.04.1) </code></pre>  <p>I am compiling using the following command:</p>  <pre><code>g++ -std=c++14 test2.cpp -o test2 </code></pre>  <p>Here is the code, I have written:</p>  <pre><code>#include &lt;iostream&gt; #include &lt;memory&gt; #include &lt;string&gt; #include &lt;vector&gt;  using namespace std;  int main(int argc, char* argv[]) {   vector&lt;uint8_t&gt; v0 = { 'h', 'e', 'l', 'l', 'o' };   vector&lt;uint8_t&gt; v1 = {};    // pointer to the data   // portion of the vector   uint8_t* p0 = v0.data();   uint8_t* p1 = v1.data();    // for stdout   string s0(v0.begin(), v0.end());   string s1(v1.begin(), v1.end());    cout &lt;&lt; "s0='" &lt;&lt; s0 &lt;&lt; "' addr=" &lt;&lt; &amp;p0 &lt;&lt; endl;   cout &lt;&lt; "s1='" &lt;&lt; s1 &lt;&lt; "' addr=" &lt;&lt; &amp;p1 &lt;&lt;endl;    /// here i would think the pointer to the data in v1   /// would point to v0 and the pointer to the data in v0   /// would be something else.   v1 = move(v0);    p0 = v0.data();   p1 = v1.data();    s0.assign(v0.begin(), v0.end());   s1.assign(v1.begin(), v1.end());    cout &lt;&lt; "s0='" &lt;&lt; s0 &lt;&lt; "' addr=" &lt;&lt; &amp;p0 &lt;&lt; endl;   cout &lt;&lt; "s1='" &lt;&lt; s1 &lt;&lt; "' addr=" &lt;&lt; &amp;p1 &lt;&lt; endl;   } </code></pre>  <p>and here is the output:</p>  <pre><code>s0='hello' addr=0x7fff33f1e8d0 s1='' addr=0x7fff33f1e8d8 s0='' addr=0x7fff33f1e8d0 s1='hello' addr=0x7fff33f1e8d8 </code></pre>  <p>If you see the output the addresses have not changed at all. I would think the address for <code>p1</code> would have the address for <code>p0</code> and <code>p0</code> would point to something else. Does anyone know why the addresses have not changed? I guess, I'm wondering if the compiler actually implemented this with a copy as a short cut.</p>