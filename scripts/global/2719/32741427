<p>Let's say I have this:</p>  <pre><code>struct HoldStuff {   std::vector&lt;StuffItem&gt; items;   std::set&lt;StuffItem, StuffItemComparator&gt; sorted_items; } </code></pre>  <p>Now, during a refactor, I may have stuff in <code>items</code> or I may have it in <code>sorted_items</code>, but regardless I want to do the same thing with each item. I want to do something like this:</p>  <pre><code>HoldStuff holder;  // assume it was filled earlier auto iter = holder.items.empty() ? holder.sorted_items.begin() :                                    holder.items.begin(); auto iter_end = holder.items.empty() ? holder.sorted_items.end() :                                        holder.items.end(); for (; iter != iter_end; ++iter) {     auto&amp; item = *iter;     // Do stuff } </code></pre>  <p>When I go to compile this, I get errors complaining about incompatible operand types. Surely this is possible, no?</p>