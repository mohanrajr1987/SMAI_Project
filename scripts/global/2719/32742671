<p>I am trying to implement <code>std::vector</code> as a programming exercise.</p>  <p>Consider the following code snippet:</p>  <pre><code>template &lt;class T, class Allocator = std::allocator&lt;T&gt;&gt; class vector { public:     using size_type = size_t;     using allocator_type = Allocator;     ... private:     T* m_data;     allocator_type m_alloc;     size_type m_capacity;     ... };  </code></pre>  <p><code>m_data</code> has type <code>T*</code>.  I need to allocate memory using <code>std::allocator_traits&lt;allocator_type&gt;::allocate(m_alloc, m_capacity)</code> which returns <code>std::allocator_traits&lt;allocator_type&gt;::pointer</code>.</p>  <p>Can I assume that <code>pointer</code> can be implicitly cast to <code>T*</code> and assign the value returned from <code>allocate</code> to <code>m_data</code>?</p>  <p>If not, how to correctly allocate memory in <code>vector</code>?</p>