<p>I am given two sets (std::set from <code>&lt;set&gt;</code>) of which I'd like to know the <em>size</em> of the intersection. I could use std::set_intersection from <code>&lt;algorithm&gt;</code>, but I have to provide it an output iterator to copy the intersection into some other container.</p>  <p>A straightforward way would be</p>  <pre><code>  set&lt;int&gt; s1{1,2,3,4,5};   set&lt;int&gt; s2{4,5,6,7,8,9,0,1};    vector&lt;int&gt; v;    set_intersection(       s1.begin(), s1.end(), s2.begin(), s2.end(),       inserter(v, v.begin())); </code></pre>  <p>after which v.size() gives the size of the intersection. However, the intersection will have to be stored as well, even though we don't do anything with it.</p>  <p>To avoid that, I tried to implement a dummy output iterator class, which only counts, but it doesn't assign:</p>  <pre><code>template&lt;typename T&gt; class CountingOutputIterator {  private:   int* counter_;   T dummy_;  public:   explicit CountingOutputIterator(int* counter) :counter_(counter) {}   T&amp; operator*() {return dummy_;}   CountingOutputIterator&amp; operator++() { // ++t     (*counter_)++;     return *this;   }   CountingOutputIterator operator++(int) { // t++     CountingOutputIterator ret(*this);     (*counter_)++;     return ret;   }   bool operator==(const CountingOutputIterator&amp; c) {     return counter_ == c.counter_; // same pointer   }   bool operator!=(const CountingOutputIterator&amp; c) {     return !operator==(c);   } }; </code></pre>  <p>using which we could do</p>  <pre><code>  set&lt;int&gt; s1{1,2,3,4,5};   set&lt;int&gt; s2{4,5,6,7,8,9,0,1};    int counter = 0;   CountingOutputIterator&lt;int&gt; counter_it(&amp;counter);   set_intersection(       s1.begin(), s1.end(), s2.begin(), s2.end(), counter_it); </code></pre>  <p>after which counter holds the size of the intersection.</p>  <p>This is much more code however. My questions are:</p>  <p>1) Is there a standard (library) way or a standard trick to obtain the size of the intersection without storing the whole intersection? 2) Independent of whether or not there is, is the approach with the custom dummy iterator a good one?</p>