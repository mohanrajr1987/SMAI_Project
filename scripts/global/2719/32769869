<p>My background is primarily C and Java (with a smattering of other things), and have started working on a project in C++.  My exact task is generating a set of objects from a configuration file (that is, read the file, determine what sort of object to create, add it to a list, repeat).  The problematic part is equivalent to the following:</p>  <p>(I'm using C <code>char*</code> syntax because I can easily write it for the example here -- presume I don't actually know how many I need as well, which is why I would like to use <code>vector</code>)</p>  <pre><code>class General {     public:         virtual int f()=0; }; class SpecificA : public General {     public:         virtual int f(); }; class SpecificB : public General {     public:         virtual int f(); }; std::vector&lt;General&gt; build(char** things, int number) {     std::vector&lt;General&gt; result;     for(int i=0;i&lt;number;i++) {         if(strcmp(things[i],"A")) {             result.push_back(SpecificA());         } else if(strcmp(things[i],"B")) {             result.push_back(SpecificB());         }     }     return result; } </code></pre>  <p>This won't work, because I can't have a <code>vector</code> of <code>General</code>, because you can never actually have an instance of <code>General</code>.  From various places I have read,</p>  <ul> <li>I should use pointers so that the polymorphism works correctly</li> <li>C++ pointers should almost never actually be needed because they're not necessary, automatic pointers are almost always better when you do need them, and usually you can use references instead</li> <li>Large <code>struct</code>s (such as classes) should be passed by reference rather than copied around and returned from functions</li> <li>It's totally fine to return full objects in C++</li> </ul>  <p>It's beginning to feel a little like C++ wants me to use the memory practices of Java using the tools of C, and it's really not working.  At this point I'm getting quite tempted to throw any kind of best practices involving automatic memory allocation out the window and litter my code with <code>*</code>'s, but I'd like to hear if there's a "right" way of doing this first.</p>