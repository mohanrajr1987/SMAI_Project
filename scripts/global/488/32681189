<p>I have a Python script which is usually called from the Windows PowerShell, with some command line arguments. I want to distribute this script in a .exe format, and I want to keep the same "user interface", based on the console, for its usage.</p>  <ol> <li>The user opens the Windows Powershell.</li> <li><p>The user calls the myscript.exe program from the shell:</p>  <pre><code>myscript.exe argument1 argument2 argument3 </code></pre></li> <li><p>The program executes in <em>the same console</em> and writes its output in <em>the same console</em>.</p></li> </ol>  <p>Actually I have a myscript.exe program, which of course gets the arguments from the PowerShell, but, unfortunately, executes the program in another console which is spawned at the call.</p>  <p>How can I avoid this behaviour and keep everything in the same console?</p>  <p><strong>EDIT:</strong> I have followed the tutorial on <a href="http://www.py2exe.org/index.cgi/Tutorial" rel="nofollow">http://www.py2exe.org/index.cgi/Tutorial</a>. </p>  <p>For my setup.py build file I used:</p>  <ul> <li>The <code>console</code> keyword (providing myscript.py as the only element in the list)</li> <li>The <code>zipfile</code> keyword (Set to True)</li> <li>The <code>options</code> keyword with <code>optimize: 2</code>,  <code>bundle_files: 1</code>, and <code>compressed: True</code>.</li> </ul>  <p>The compilation works ok, and the program does what it is supposed to do. The only undesirable thing is the opening of a dedicated console instead of executing in the same console. </p>  <p><strong>EDIT2:</strong> Here is exactly my setup.py code.</p>  <pre><code>from distutils.core import setup import py2exe, sys, os  sys.argv.append('py2exe')  setup(     options = {'py2exe': {'bundle_files': 1, 'compressed': True, 'optimize': 2}},     console = [{'script': "myscript.py"}],     zipfile = None, ) </code></pre>  <p>I simply call the script typing: </p>  <pre><code>python setup.py  </code></pre>  <p>in Windows Powershell</p>  <p><strong>EDIT3:</strong> This has been done on Windows 8.1 with:</p>  <ul> <li>Python 3.4.2</li> <li>py2exe 0.9.2.2</li> <li>Powershell 4.0</li> </ul>  <p>The final executable has also been tested on a Windows 10 system without any Python installation; it worked but showed the same console-spawning behaviour.</p>