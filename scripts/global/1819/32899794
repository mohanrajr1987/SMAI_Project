<p>I am attempting to implement an input element for geocoding without a button. i.e. the user begins to type in an address and then selects the wanted address from a list of Google suggested ones</p>  <p>In my Javsacript code, I load the following to enable the geocoding for my input element:</p>  <pre><code>var geocoder = new google.maps.Geocoder; var input = document.getElementById('pac-input'); var autocomplete = new google.maps.places.Autocomplete(input); </code></pre>  <p>This provides a set of dropdowns from the input field of potential addresses. When an address is selected by down arrow and then Enter is pressed, I use the following to capture the Enter key and perform the geocode (rather than using a button).</p>  <pre><code>// capture enter on address input selection   $("#pac-input").keyup(function(e) {     if (e.keyCode == 13) {       geocode();     }   }); </code></pre>  <p>However, I would also like to capture the click of the mouse on one of the potential dropdown fields. I am using the following to capture all mouse clicks</p>  <pre><code>// capture event for mouse click or ipad input   $(document).on('click', function(e) {     console.log($(this));     var target = $(e.target);     console.log(target[0]);   }); </code></pre>  <p>This function definitely works as I see console activity on mouse clicks, such as:</p>  <pre><code>[document, context: document] &lt;input id=​"pac-input" class=​"form-control" type=​"text" placeholder=​"Enter a location" autocomplete=​"off"&gt;​ </code></pre>  <p>However, on clicking one of the dropdown fields provided by the Google JS, I see <strong>no console log</strong>. What is happening here?</p>  <p>Edit: I do now see console output. But using</p>  <pre><code>$(document).on('click', function(e) {     console.log($(this));     var target = e.target;     console.log(target); }); </code></pre>  <p>I see <code>&lt;body role="document"&gt;..&lt;/body&gt;</code>. Not much of an identifier..</p>