<p>I have a problem with C# and Unity3D. I would like to read in a series of some to many JSON files from a single directory, and deserialise the data into one specific class for each file.  I'm wondering if there's a fast way of looping that process so I don't need a large <code>if/switch</code> block or anything.  Deserialisation is fine, but I'm having trouble actually assigning the data from each file to a list containing objects of the correct <code>Type</code>.</p>  <p>Note: The class name is the same as the filename. For example, if the filename is <em>Cars.json</em>, I want to find a <code>Component</code> called <code>CarManager</code> and use it to store the deserialised data in a <code>List&lt;Car&gt;</code> at <code>CarManager.cars</code>.</p>  <p>I'm inexperienced, and I don't really know how to work with <code>Type</code> references yet.  If someone could explain how can I write the <code>ProcessFile()</code> method to successfully differentiate between <code>Object</code> types, so I can store the data for each file in Unity, I'd really appreciate it.</p>  <p>Cheers.</p>  <pre><code>namespace Flight {  public class DatasetManager : MonoBehaviour {  private JsonSerializer serialiser; private StreamReader streamReader; private string path; private string fileName; private string extension;  public void Start() {     // Define Path     path = Application.dataPath + "/Data/";     extension = "json";      // Construct Serialiser          serialiser = new JsonSerializer();     serialiser.Converters.Add(new StringEnumConverter());            serialiser.NullValueHandling = NullValueHandling.Ignore;      // Import Data     Import(); }  private void Import() {     string[] files = Directory.GetFiles(path, "*." + extension);     if(files.Length == 0) return;      for(int i = 0; i &lt; files.Length; i++) ProcessFile(files[i]); }  private void ProcessFile(string xFile) {      streamReader = File.OpenText(xFile);      // Read Filename     string plural = Path.GetFileNameWithoutExtension(xFile);         string entity = plural.EndsWith("ies") ? plural.Substring(0,plural.Length-3) + "y" : plural.Substring(0,plural.Length-1);      string manager = entity + "Manager";      // Determine Entity &amp; Manager Types     System.Type entityType = System.Type.GetType("Flight." + entity);     System.Type managerType = System.Type.GetType("Flight." + manager);     if(entityType == null || managerType == null) return;      // Determine List Type     System.Type listType = null;     listType = typeof(List&lt;&gt;).MakeGenericType(entityType);     if(listType == null) return;          // Acquire Data     List&lt;dynamic&gt; data = System.Activator.CreateInstance(listType) as List&lt;dynamic&gt;;             data = serialiser.Deserialize(streamReader, typeof(List&lt;dynamic&gt;)) as List&lt;dynamic&gt;;     if(data == null) return;      // Store Data in Game     GameObject theGame = GameObject.FindGameObjectWithTag("Game");     Component theComponent = theGame.GetComponent(manager);      FieldInfo field = managerType.GetField(plural.ToLower());       /*** How can I proceed from here? ***/       List&lt;dynamic&gt; theList = field.GetValue(theComponent) as List&lt;dynamic&gt;;     field.SetValue(theComponent, data); } }     } </code></pre>  <p>The above code produces an <code>ArgumentException</code>:</p>  <p>System.Collections.Generic.List1[System.Object] cannot be converted to target type: System.Collections.Generic.List1[Flight.Car]</p>