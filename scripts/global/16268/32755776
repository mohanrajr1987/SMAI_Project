<p>Following is the XML string which we are trying to convert in to JSON string.</p>  <pre><code>  &lt;?xml version="1.0" encoding="utf-16" ?&gt;    &lt;MyClass&gt;   &lt;Id&gt;1&lt;/Id&gt;    &lt;Names&gt;   &lt;string&gt;Surya&lt;/string&gt;    &lt;string&gt;Kiran&lt;/string&gt;    &lt;/Names&gt;   &lt;ClassTypes&gt;   &lt;Types&gt;   &lt;TypeId&gt;1&lt;/TypeId&gt;    &lt;TypeName&gt;First Name&lt;/TypeName&gt;    &lt;/Types&gt;   &lt;Types&gt;   &lt;TypeId&gt;2&lt;/TypeId&gt;    &lt;TypeName&gt;Last Name&lt;/TypeName&gt;    &lt;/Types&gt;   &lt;/ClassTypes&gt;   &lt;Status&gt;1&lt;/Status&gt;    &lt;/MyClass&gt; </code></pre>  <p>using the following code, I am getting the result as below</p>  <pre><code>xmlString = "&lt;?xml version=\"1.0\" encoding=\"utf-16\"?&gt;&lt;MyClass&gt;&lt;Id&gt;1&lt;/Id&gt;&lt;Names&gt;&lt;string&gt;Surya&lt;/string&gt;&lt;string&gt;Kiran&lt;/string&gt;&lt;/Names&gt;&lt;ClassTypes&gt;&lt;Types&gt;&lt;TypeId&gt;1&lt;/TypeId&gt;&lt;TypeName&gt;First Name&lt;/TypeName&gt;&lt;/Types&gt;&lt;Types&gt;&lt;TypeId&gt;2&lt;/TypeId&gt;&lt;TypeName&gt;Last Name&lt;/TypeName&gt;&lt;/Types&gt;&lt;/ClassTypes&gt;&lt;Status&gt;1&lt;/Status&gt;&lt;/MyClass&gt;"; XmlDocument doc = new XmlDocument(); doc.LoadXml(xmlString); doc.ChildNodes.OfType&lt;XmlNode&gt;().Where(x =&gt; x.NodeType == XmlNodeType.XmlDeclaration).ToList().ForEach(x =&gt; doc.RemoveChild(x)); jsonString = JsonConvert.SerializeXmlNode(doc, Newtonsoft.Json.Formatting.None, true); </code></pre>  <p>Actual Result</p>  <blockquote>   <p>{"Id":"1","Names":{"string":["Surya","Kiran"]},"ClassTypes":{"Types":[{"TypeId":"1","TypeName":"First   Name"},{"TypeId":"2","TypeName":"Last Name"}]},"Status":"1"}</p> </blockquote>  <p>Expected Result</p>  <blockquote>   <p>{"Id":1,"Names":["Surya","Kiran"],"ClassTypes":[{"TypeId":1,"TypeName":"First   Name"},{"TypeId":2,"TypeName":"Last Name"}],"Status":0}</p> </blockquote>  <p>We would require this result for deserialization to the below class</p>  <pre><code>public class MyClass {     public int Id { get; set; }     public IList&lt;string&gt; Names { get; protected set; }     public IList&lt;Types&gt; ClassTypes { get; protected set; }     public StatusType Status { get; set; }      public MyClass()     {         Names = new List&lt;string&gt;();         ClassTypes = new List&lt;Types&gt;();         Status = StatusType.Active;     } } public class Types {     public int TypeId { get; set; }     public string TypeName { get; set; } }  public enum StatusType {     Active = 0,     InActive = 1 } </code></pre>