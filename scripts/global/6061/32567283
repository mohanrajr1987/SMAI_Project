<p>I get error nullpointerexception in sessionFactory.getCurrentSession(); </p>  <ul> <li>Spring Framework 4.0 </li> <li>Glassfish 4.1 </li> <li>hibernate 4.3.6.Final</li> </ul>  <p>When I call Session session = sessionFactory.getCurrentSession(); i get error in glassfish server log, but setSessionFactory is set by Spring. What is wrong in my code. Please Help! :)</p>  <p>It's Spring @Component</p>  <pre><code>package service;  import javax.faces.bean.ManagedBean; import javax.faces.bean.ApplicationScoped;  import org.hibernate.Session; import org.hibernate.SessionFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Component; import org.springframework.transaction.annotation.Transactional; import org.springframework.stereotype.Repository;  import model.Payments;  @Component @ManagedBean(name = "paymentsService") @ApplicationScoped @Repository public class PaymentsService {       private SessionFactory sessionFactory ;      public PaymentsService()     {      }       public PaymentsService(SessionFactory sessionFactory) {         this.sessionFactory = sessionFactory;     }      public SessionFactory getSessionFactory() {         return sessionFactory;     }      @Autowired     public void setSessionFactory( SessionFactory sessionFactory) {         this.sessionFactory = sessionFactory;     }     // @Transactional     public void register(){          Session session = sessionFactory.getCurrentSession();      } } </code></pre>  <p>It's primefaces @ManagedBean</p>  <pre><code>package backbean;  import java.io.Serializable;  import javax.faces.application.FacesMessage; import javax.faces.bean.ApplicationScoped; import javax.faces.bean.ManagedBean; import javax.faces.bean.ManagedProperty; import javax.faces.context.FacesContext; import javax.faces.bean.SessionScoped;  import model.Payments; import service.PaymentsService;   @ManagedBean @ApplicationScoped public class Paymentsbeen implements Serializable {     /**      *       */     private static final long serialVersionUID = 7719279452314113041L;       public String register() {          paymentsService.register();       }  } </code></pre>  <p>It's Spring config file</p>  <pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;beans xmlns="http://www.springframework.org/schema/beans"     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"     xmlns:mvc="http://www.springframework.org/schema/mvc"     xmlns:context="http://www.springframework.org/schema/context"     xmlns:tx="http://www.springframework.org/schema/tx"     xmlns:jdbc="http://www.springframework.org/schema/jdbc"     xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd         http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd         http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"&gt;      &lt;!-- Enable Spring Annotation Configuration --&gt;     &lt;context:annotation-config /&gt;     &lt;!-- Scan for all of Spring components such as Spring Service --&gt;     &lt;context:component-scan base-package="service.PaymentsService"&gt;&lt;/context:component-scan&gt;      &lt;!-- Create Data Source bean --&gt;     &lt;!--&lt;bean id="dbDataSource" class="org.springframework.jndi.JndiObjectFactoryBean"&gt;         &lt;property name="jndiName" value="java:jdbc/__TestPool"/&gt;     &lt;/bean&gt;--&gt;     &lt;bean id="DataSource" class="org.apache.commons.dbcp.BasicDataSource"&gt;         &lt;property name="driverClassName" value="org.postgresql.Driver" /&gt;         &lt;property name="url" value="jdbc:postgresql://localhost:5432/ihomefinance" /&gt;         &lt;property name="username" value="postgres" /&gt;         &lt;property name="password" value="1" /&gt;     &lt;/bean&gt;      &lt;!-- Define SessionFactory bean --&gt;     &lt;bean id="hibernate3AnnotatedSessionFactory"         class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"&gt;          &lt;property name="dataSource" ref="DataSource" /&gt;         &lt;property name="annotatedClasses"&gt;             &lt;list&gt;                 &lt;value&gt;model.Payments&lt;/value&gt;                             &lt;/list&gt;         &lt;/property&gt;         &lt;property name="hibernateProperties"&gt;             &lt;props&gt;                 &lt;prop key="hibernate.dialect"&gt;org.hibernate.dialect.PostgreSQLDialect&lt;/prop&gt;                 &lt;prop key="hibernate.current_session_context_class"&gt;thread&lt;/prop&gt;                 &lt;prop key="hibernate.show_sql"&gt;false&lt;/prop&gt;             &lt;/props&gt;         &lt;/property&gt;             &lt;/bean&gt;     &lt;!-- Transaction Manager      &lt;bean id="transactionManager"         class="org.springframework.orm.hibernate4.HibernateTransactionManager"&gt;         &lt;property name="sessionFactory" ref="hibernate3AnnotatedSessionFactory" /&gt;     &lt;/bean&gt;--&gt;      &lt;bean id="PaymentsServiceID" class="service.PaymentsService"&gt;         &lt;property name="sessionFactory" ref="hibernate3AnnotatedSessionFactory" /&gt;     &lt;/bean&gt;      &lt;!-- Detect @Transactional Annotation      &lt;tx:annotation-driven transaction-manager="transactionManager" /&gt;--&gt;  &lt;/beans&gt; </code></pre>