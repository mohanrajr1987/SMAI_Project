<p>Environment used</p>  <p>Netbeans 8.0+</p>  <p>glassfish 4+</p>  <p>jdk 1.8</p>  <p>Note this example works well if you use no interface view .It does not works well if we use local or remote interface</p>  <p><strong>Remote interface</strong> </p>  <pre><code>package packt; import javax.ejb.Remote; @Remote public interface SphereBeanRemote {      public double computeVolume(double radius); } </code></pre>  <p><strong>implementation of above interface</strong></p>  <pre><code>package packt; import javax.ejb.Stateless; @Stateless public class SphereBean implements SphereBeanRemote {     @Override     public double computeVolume(double radius) {          return (4.0/3.0)*Math.PI*(radius*radius*radius);     } </code></pre>  <p>}</p>  <p><strong>client(servlet) which access it</strong></p>  <pre><code>import java.io.*; import javax.ejb.EJB; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.*; import packt.SphereBean;  @WebServlet(urlPatterns = {"/SphereServlet"}) public class SphereServlet extends HttpServlet {     @EJB     SphereBean sphere;     protected void processRequest(HttpServletRequest request, HttpServletResponse response)             throws ServletException, IOException {         response.setContentType("text/html;charset=UTF-8");         try (PrintWriter out = response.getWriter()) {              out.println("&lt;!DOCTYPE html&gt;");             out.println("&lt;html&gt;");             out.println("&lt;head&gt;");             out.println("&lt;title&gt;Servlet SphereServlet&lt;/title&gt;");                         out.println("&lt;/head&gt;");             out.println("&lt;body&gt;");             out.println("&lt;h1&gt;Servlet SphereServlet at " + request.getContextPath() + "&lt;/h1&gt;");             out.println("&lt;h1&gt;" + sphere.computeVolume(18)  + "&lt;/h1&gt;");             out.println("&lt;/body&gt;");             out.println("&lt;/html&gt;");         }     }        @Override     protected void doGet(HttpServletRequest request, HttpServletResponse response)             throws ServletException, IOException {         processRequest(request, response);     }       @Override     protected void doPost(HttpServletRequest request, HttpServletResponse response)             throws ServletException, IOException {         processRequest(request, response);     }      @Override     public String getServletInfo() {         return "Short description";     }  } </code></pre>  <p><strong>Error</strong> HTTP Status 500 - Internal Server Error</p>  <p>type Exception report</p>  <p>messageInternal Server Error</p>  <p>descriptionThe server encountered an internal error that prevented it from fulfilling this request.</p>  <p>exception</p>  <p>javax.servlet.ServletException: Error instantiating servlet class SphereServlet</p>  <p>root cause</p>  <p>com.sun.enterprise.container.common.spi.util.InjectionException: Error creating managed object for class: class SphereServlet</p>  <p>root cause</p>  <p>com.sun.enterprise.container.common.spi.util.InjectionException: Exception attempting to inject Remote ejb-ref name=SphereServlet/sphere,Remote 3.x interface =packt.SphereBean,ejb-link=null,lookup=,mappedName=,jndi-name=packt.SphereBean,refType=Session into class SphereServlet: Lookup failed for 'java:comp/env/SphereServlet/sphere' in SerialContext[myEnv={java.naming.factory.initial=com.sun.enterprise.naming.impl.SerialInitContextFactory, java.naming.factory.state=com.sun.corba.ee.impl.presentation.rmi.JNDIStateFactoryImpl, java.naming.factory.url.pkgs=com.sun.enterprise.naming}</p>  <p>root cause</p>  <p>javax.naming.NamingException: Lookup failed for 'java:comp/env/SphereServlet/sphere' in SerialContext[myEnv={java.naming.factory.initial=com.sun.enterprise.naming.impl.SerialInitContextFactory, java.naming.factory.state=com.sun.corba.ee.impl.presentation.rmi.JNDIStateFactoryImpl, java.naming.factory.url.pkgs=com.sun.enterprise.naming} [Root exception is javax.naming.NamingException: Exception resolving Ejb for 'Remote ejb-ref name=SphereServlet/sphere,Remote 3.x interface =packt.SphereBean,ejb-link=null,lookup=,mappedName=,jndi-name=packt.SphereBean,refType=Session' .  Actual (possibly internal) Remote JNDI name used for lookup is 'packt.SphereBean#packt.SphereBean' [Root exception is javax.naming.NamingException: Lookup failed for 'packt.SphereBean#packt.SphereBean' in SerialContext[myEnv={java.naming.factory.initial=com.sun.enterprise.naming.impl.SerialInitContextFactory, java.naming.factory.state=com.sun.corba.ee.impl.presentation.rmi.JNDIStateFactoryImpl, java.naming.factory.url.pkgs=com.sun.enterprise.naming} [Root exception is javax.naming.NameNotFoundException: packt.SphereBean#packt.SphereBean not found]]]</p>  <p>root cause</p>  <p>javax.naming.NamingException: Exception resolving Ejb for 'Remote ejb-ref name=SphereServlet/sphere,Remote 3.x interface =packt.SphereBean,ejb-link=null,lookup=,mappedName=,jndi-name=packt.SphereBean,refType=Session' .  Actual (possibly internal) Remote JNDI name used for lookup is 'packt.SphereBean#packt.SphereBean' [Root exception is javax.naming.NamingException: Lookup failed for 'packt.SphereBean#packt.SphereBean' in SerialContext[myEnv={java.naming.factory.initial=com.sun.enterprise.naming.impl.SerialInitContextFactory, java.naming.factory.state=com.sun.corba.ee.impl.presentation.rmi.JNDIStateFactoryImpl, java.naming.factory.url.pkgs=com.sun.enterprise.naming} [Root exception is javax.naming.NameNotFoundException: packt.SphereBean#packt.SphereBean not found]]</p>  <p>root cause</p>  <p>javax.naming.NamingException: Lookup failed for 'packt.SphereBean#packt.SphereBean' in SerialContext[myEnv={java.naming.factory.initial=com.sun.enterprise.naming.impl.SerialInitContextFactory, java.naming.factory.state=com.sun.corba.ee.impl.presentation.rmi.JNDIStateFactoryImpl, java.naming.factory.url.pkgs=com.sun.enterprise.naming} [Root exception is javax.naming.NameNotFoundException: packt.SphereBean#packt.SphereBean not found]</p>  <p>root cause</p>  <p>javax.naming.NameNotFoundException: packt.SphereBean#packt.SphereBean not found</p>  <p>note The full stack traces of the exception and its root causes are available in the GlassFish Server Open Source Edition 4.1 logs. GlassFish Server Open Source Edition 4.1 </p>