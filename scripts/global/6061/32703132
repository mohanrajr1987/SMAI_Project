<p>Hi i have deployed an ActiveMq Broker in my Glassfishserver. I want the Broker to communicate via Mqtt. In want to use the paho mqtt client. My ressource adapter for ActiveMq has the following settings: ServerUrl:vm://0.0.0.0:61616 BrokerXMLConfig:broker:(tcp://0.0.0.0:1883) Broker-config.xml:</p>  <pre><code>&lt;transportConnectors&gt;    &lt;transportConnector name="openwire" uri="tcp://localhost:61616"/&gt;    &lt;transportConnector name="mqtt" uri="mqtt+nio://0.0.0.0:1883"/&gt;  &lt;/transportConnectors&gt; </code></pre>  <p>The ra.xml:</p>  <pre><code>  &lt;config-property&gt;         &lt;description&gt;           The URL to the ActiveMQ server that you want this connection to connect to.  If using           an embedded broker, this value should be 'vm://localhost'.         &lt;/description&gt;         &lt;config-property-name&gt;ServerUrl&lt;/config-property-name&gt;         &lt;config-property-type&gt;java.lang.String&lt;/config-property-type&gt;         &lt;!--&lt;config-property-value&gt;tcp://localhost:61616&lt;/config-property-value&gt;--&gt;         &lt;config-property-value&gt;vm://localhost&lt;/config-property-value&gt;     &lt;/config-property&gt;     &lt;config-property&gt;       &lt;description&gt;           Sets the XML configuration file used to configure the embedded ActiveMQ broker via           Spring if using embedded mode.            BrokerXmlConfig is the filename which is assumed to be on the classpath unless           a URL is specified. So a value of foo/bar.xml would be assumed to be on the           classpath whereas file:dir/file.xml would use the file system.           Any valid URL string is supported.                      &lt;/description&gt;     &lt;config-property-name&gt;BrokerXmlConfig&lt;/config-property-name&gt;     &lt;config-property-type&gt;java.lang.String&lt;/config-property-type&gt;     &lt;config-property-value&gt;&lt;/config-property-value&gt;     &lt;!--      To use the broker-config.xml from the root for the RAR--&gt;        &lt;!--&lt;config-property-value&gt;xbean:broker-config.xml&lt;/config-property-value&gt;--&gt;      &lt;!--To use an external file or url location        &lt;config-property-value&gt;xbean:file:///amq/config/jee/broker-config.xml&lt;/config-property-value&gt;     --&gt; &lt;/config-property&gt; </code></pre>  <p>I would use xbean:broker-config.xml but if i change this the broker doesnt work properly. Can somebody help me with the settings? Ich want to use the port 1883 for mqtt. Some code for my test client:</p>  <pre><code>public static void main(String[] args) {     String topic = "MQTT Examples";     String content = "Message from MqttPublishSample";     int qos = 2;     String broker = "tcp://localhost:1883";     String clientId = "JavaSample";     MemoryPersistence persistence = new MemoryPersistence();      try      {         MqttClient sampleClient = new MqttClient(broker, clientId, persistence);         sampleClient.setTimeToWait(5000);         MqttConnectOptions connOpts = new MqttConnectOptions();         connOpts.setCleanSession(true);         System.out.println("Connecting to broker: " + broker);         sampleClient.connect(connOpts);         System.out.println("Connected");         System.out.println("Publishing message: " + content);         MqttMessage message = new MqttMessage(content.getBytes());         message.setQos(qos);         sampleClient.publish(topic, message);         System.out.println("Message published");         sampleClient.disconnect();         System.out.println("Disconnected");         System.exit(0);     } catch (      MqttException me)      {         System.out.println("reason " + me.getReasonCode());         System.out.println("msg " + me.getMessage());         System.out.println("loc " + me.getLocalizedMessage());         System.out.println("cause " + me.getCause());         System.out.println("excep " + me);         me.printStackTrace();     } } </code></pre>