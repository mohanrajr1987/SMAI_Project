<p>I have researched my predicament, here and across the web, integrating and modifying things in my project to the point where I feel things are correct from a configuration and build standpoint, but the issue remains.</p>  <p>My development environment is NetBeans 8.0.2 and 8.1Beta, using Glassfish 4.0 as my app server, and using Maven as the build manager.  I have developed and built a library of EJBs which are installed on the server with no problems. I have built and deployed a NetBeans RCP application which accesses and uses the EJBs.  I then needed to build a stand-alone, command line application (executable jar) to access these EJBs to provide a report.  The application runs fine within the NetBeans IDE.  The standalone jar file fails, and here is where it gets interesting. My pom file uses the maven-jar-plugin and the maven-assembly-plugin to build the jar file, including dependencies.  Since this is a remote application, I have a library where the remote interfaces to the EJBs are defined.  This is the pom:</p>  <pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;     &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;     &lt;groupId&gt;com.lamtec&lt;/groupId&gt;     &lt;artifactId&gt;ArclinReport&lt;/artifactId&gt;     &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;     &lt;packaging&gt;jar&lt;/packaging&gt;     &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;             &lt;artifactId&gt;MaterialsEJB&lt;/artifactId&gt;             &lt;version&gt;${project.version}&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.slf4j&lt;/groupId&gt;             &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;             &lt;version&gt;1.7.12&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.glassfish.appclient&lt;/groupId&gt;             &lt;artifactId&gt;gf-client&lt;/artifactId&gt;             &lt;version&gt;3.1.1&lt;/version&gt;             &lt;exclusions&gt;             &lt;exclusion&gt;                 &lt;groupId&gt;org.slf4j&lt;/groupId&gt;                 &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;             &lt;/exclusion&gt;             &lt;/exclusions&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.eclipse.persistence&lt;/groupId&gt;             &lt;artifactId&gt;org.eclipse.persistence.core&lt;/artifactId&gt;             &lt;version&gt;2.6.0&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.eclipse.persistence&lt;/groupId&gt;             &lt;artifactId&gt;javax.persistence&lt;/artifactId&gt;             &lt;version&gt;2.1.0&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.eclipse.persistence&lt;/groupId&gt;             &lt;artifactId&gt;org.eclipse.persistence.jpa&lt;/artifactId&gt;             &lt;version&gt;2.6.0&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.eclipse.persistence&lt;/groupId&gt;             &lt;artifactId&gt;org.eclipse.persistence.antlr&lt;/artifactId&gt;            &lt;version&gt;2.6.0&lt;/version&gt;         &lt;/dependency&gt;        &lt;dependency&gt;             &lt;groupId&gt;org.eclipse.persistence&lt;/groupId&gt;            &lt;artifactId&gt;org.eclipse.persistence.jpa.modelgen&lt;/artifactId&gt;             &lt;version&gt;2.4.2&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.eclipse.persistence&lt;/groupId&gt;             &lt;artifactId&gt;org.eclipse.persistence.oracle&lt;/artifactId&gt;             &lt;version&gt;2.6.0&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.jxls&lt;/groupId&gt;             &lt;artifactId&gt;jxls&lt;/artifactId&gt;             &lt;version&gt;2.2.5&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.jxls&lt;/groupId&gt;             &lt;artifactId&gt;jxls-poi&lt;/artifactId&gt;             &lt;version&gt;1.0.5&lt;/version&gt;         &lt;/dependency&gt;         &lt;/dependencies&gt;     &lt;build&gt;         &lt;plugins&gt;             &lt;plugin&gt;                 &lt;!--                 Build an executable JAR --&gt;                 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;                 &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;                 &lt;version&gt;2.6&lt;/version&gt;                 &lt;configuration&gt;                     &lt;archive&gt;                         &lt;manifest&gt;                             &lt;addClasspath&gt;true&lt;/addClasspath&gt;                             &lt;classpathPrefix&gt;lib/&lt;/classpathPrefix&gt;                                 &lt;mainClass&gt;com.lamtec.arclinreport.data.ArclinReportGenerator&lt;/mainClass&gt;                         &lt;/manifest&gt;                     &lt;/archive&gt;                 &lt;/configuration&gt;             &lt;/plugin&gt; &lt;!--            &lt;plugin&gt;                 &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;                 &lt;version&gt;2.10&lt;/version&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;id&gt;unpack-dependencies&lt;/id&gt;                         &lt;phase&gt;install&lt;/phase&gt;                         &lt;goals&gt;                             &lt;goal&gt;unpack-dependencies&lt;/goal&gt;                         &lt;/goals&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;             &lt;/plugin&gt; --&gt;             &lt;plugin&gt;                 &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;                 &lt;version&gt;2.5.5&lt;/version&gt;                 &lt;configuration&gt;                     &lt;archive&gt;                         &lt;manifest&gt;                                 &lt;mainClass&gt;com.lamtec.arclinreport.data.ArclinReportGenerator&lt;/mainClass&gt;                         &lt;/manifest&gt;                     &lt;/archive&gt;                     &lt;descriptorRefs&gt;                         &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;                     &lt;/descriptorRefs&gt;                 &lt;/configuration&gt;                 &lt;executions&gt;                     &lt;execution&gt;                         &lt;phase&gt;package&lt;/phase&gt;                         &lt;goals&gt;                             &lt;goal&gt;single&lt;/goal&gt;                         &lt;/goals&gt;                     &lt;/execution&gt;                 &lt;/executions&gt;             &lt;/plugin&gt;         &lt;/plugins&gt;     &lt;/build&gt;     &lt;properties&gt;         &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;         &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;         &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;     &lt;/properties&gt; &lt;/project&gt; </code></pre>  <p>This pom will build a jar file which includes all of the dependencies.  Since the jndi lookup I perform is non-standard, I have a jndi.properties file located in the src/main/resources directory (the standard for these types of things in the netbeans ide) is this:</p>  <pre><code>java.naming.factory.initial = com.sun.enterprise.naming.SerialInitContextFactory java.naming.factory.url.pkgs = com.sun.enterprise.naming java.naming.factory.state = com.sun.corba.ee.impl.presentation.rmi.JNDIStateFactoryImpl #optional.  Defaults to localhost.  Only needed if web server is    running #on a different host than the appserver org.omg.CORBA.ORBInitialHost = 10.20.10.52 #optional.  Defaults to 3700.  Only needed if target orb port is not 3700. org.omg.CORBA.ORBInitialPort = 40198 </code></pre>  <p>The first oddity concerns the jndi.properties file that I find in the final jar file after I do a build.  It appears to be a default jndi.properties file, the source of which I cannot find, and I have searched high and low. The second oddity is that MY jndi.properties file doesn't make it into the final jar.  Here is the jndi.properties file that IS in the final jar:</p>  <pre><code># # DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER. # # Copyright (c) 1997-2010 Oracle and/or its affiliates. All rights reserved. # # The contents of this file are subject to the terms of either the GNU # General Public License Version 2 only ("GPL") or the Common Development # and Distribution License("CDDL") (collectively, the "License").  You # may not use this file except in compliance with the License.  You can # obtain a copy of the License at # https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html # or packager/legal/LICENSE.txt.  See the License for the specific # language governing permissions and limitations under the License. # # When distributing the software, include this License Header Notice in each # file and include the License file at packager/legal/LICENSE.txt. # # GPL Classpath Exception: # Oracle designates this particular file as subject to the "Classpath" # exception as provided by Oracle in the GPL Version 2 section of the License # file that accompanied this code. # # Modifications: # If applicable, add the following below the License Header, with the fields # enclosed by brackets [] replaced by your own identifying information: # "Portions Copyright [year] [name of copyright owner]" # # Contributor(s): # If you wish your version of this file to be governed by only the CDDL or # only the GPL Version 2, indicate your decision by adding "[Contributor] # elects to include this software in this distribution under the [CDDL or GPL # Version 2] license."  If you don't indicate a single choice of license, a # recipient has the option to distribute your version of this file under # either the CDDL, the GPL Version 2 or to extend the choice of license to # its licensees as provided above.  However, if you add GPL Version 2 code # and therefore, elected the GPL Version 2 license, then the option applies # only if the new code is made subject to such option by the copyright # holder. #  java.naming.factory.initial=com.sun.enterprise.naming.impl.SerialInitContextFactory java.naming.factory.url.pkgs=com.sun.enterprise.naming # Required to add a javax.naming.spi.StateFactory for CosNaming that # supports dynamic RMI-IIOP. java.naming.factory.state=com.sun.corba.ee.impl.presentation.rmi.JNDIStateFactoryImpl </code></pre>  <p>So, first question, to the Maven gurus, is why doesn't my pom make the build process include my jndi.properties?  The default should include it, no?  Oh, and BTW, the jar file that is also built, which doesn't include the dependencies (therefore not making it a "true" standalone app) DOES include the correct jndi.properties file.  So my assumption is that the maven-assembly-plugin doesn't seem to follow the standard packaging scenario.</p>  <p>Now, on to my final question:  When I attempt to run the jar file with java -jar ArclinReport-1.0-SNAPSHOT-jar-with-dependencies.jar, I get an error:</p>  <pre><code>Exception in thread "main" java.lang.NullPointerException at com.sun.enterprise.naming.impl.SerialContext.&lt;init&gt;(SerialContext.java:276) at com.sun.enterprise.naming.impl.SerialContext.&lt;init&gt;(SerialContext.java:335) at com.sun.enterprise.naming.impl.SerialInitContextFactory.createInitialContext(SerialInitContextFactory.java:358) at com.sun.enterprise.naming.impl.SerialInitContextFactory.getInitialContext(SerialInitContextFactory.java:353) at javax.naming.spi.NamingManager.getInitialContext(NamingManager.java:684) at javax.naming.InitialContext.getDefaultInitCtx(InitialContext.java:313) at javax.naming.InitialContext.init(InitialContext.java:244) at javax.naming.InitialContext.&lt;init&gt;(InitialContext.java:192) at com.lamtec.arclinreport.data.EjbLookUp.init(EjbLookUp.java:45) at com.lamtec.arclinreport.data.ArclinReportGenerator.main(ArclinReportGenerator.java:27) </code></pre>  <p>The error at line 45 in the EjbLookUp.java file is where the InitialContext is created and used to lookup the EJB.  I have tried separating out the new InitialContext(); call and when I do, that is the line where the error is reported. The java code:</p>  <pre><code>package com.lamtec.arclinreport.data;  import com.lamtec.materialsejb.ejb.MmrawrolFacadeRemote; import java.util.Properties; import javax.naming.Context; import javax.naming.InitialContext; import javax.naming.NamingException; import org.slf4j.Logger; import org.slf4j.LoggerFactory;  /**  *  * @author kpenrose  */ public class EjbLookUp {     private static final Logger logger = LoggerFactory.getLogger(EjbLookUp.class.getName());      private MmrawrolFacadeRemote mmrawrolFacade;      public EjbLookUp() {     }  //    @PostConstruct     public void init() {         Properties props = new Properties();         props.setProperty(Context.INITIAL_CONTEXT_FACTORY, "com.sun.enterprise.naming.SerialInitContextFactory"); //        props.setProperty(Context.PROVIDER_URL, "iiop://10.20.10.52:40198");         props.setProperty("java.naming.factory.url.pkgs", "com.sun.enterprise.naming");         props.setProperty("java.naming.factory.state", "com.sun.corba.ee.impl.presentation.rmi.JNDIStateFactoryImpl");         props.setProperty("org.omg.CORBA.ORBInitialHost", "10.20.10.52");         props.setProperty("org.omg.CORBA.ORBInitialPort", "40198");         System.out.println("props" + props.toString()); //        try { //            props.load(new FileInputStream(new File("src/main/resources/jndi.properties"))); //        } catch (IOException ie) { //            System.out.println("Error reading file"); //        }         try { //            InitialContext ctx = new InitialContext();             mmrawrolFacade = (MmrawrolFacadeRemote) new InitialContext().lookup("java:global/MaterialsEJB-1.0-SNAPSHOT/MmrawrolFacade");         } catch (NamingException ex) {             logger.info("Error with jndi lookup: {}", ex.getMessage());         }     }      public MmrawrolFacadeRemote getMmrawrolFacade() {         return mmrawrolFacade;     }      public void setMmrawrolFacade(MmrawrolFacadeRemote mmrawrolFacade) {         this.mmrawrolFacade = mmrawrolFacade;     }  } </code></pre>  <p>So, thinking that the incorrect jndi.properties file needs to be replaced, I update the jar file with the correct jndi.properties file, but that doesn't fix the problem. The issue is the same whether I use the 8.0.2 or the 8.1Beta of NetBeans.  I have tried the maven-dependency-plugin to build the jar file, but then I get issues with signed jars, etc. To reiterate, things work as expected from a NetBeans RCP application and within the NetBeans IDE.  There seems to be something I'm missing when it comes to getting an InitialContext from a standalone application.  Oh, and to be clear, I have a dependency on the gf-client library that is required for clients of glassfish apps. Anyone?  Thanks.</p>