<p>In a nutshell , given such a problem:</p>  <p>We load the number of players,</p>  <p>money each player,</p>  <p>and we load a string consisting of L i W</p>  <p>For example:</p>  <p>4 -> player's</p>  <p>2, 3, 2, 1</p>  <p>2 is a money a first player, 3 a second etc.</p>  <p>and we load cycle</p>  <p>for example:</p>  <p>WLL -> W == win = cash + 1, L == lost = cash -1;</p>  <p>If to one of the players runs out of money, interrupts the game giving the number of games all players.</p>  <p>So:</p>  <p>The cycle repeats itself, so, we have WLLWLL ... WLL</p>  <p>2, 3, 2, 1</p>  <p>[WLL - first cycle] [WLL - next cycle]</p>  <p>so, we have:</p>  <p>3,2,1,2</p>  <p>next:</p>  <p>2,1,2,1</p>  <p>And in the end:</p>  <p>1,2,1,0</p>  <p>And we count the number of games - 12</p>  <p>It is also the case when the players never lose , you then write -1</p>  <p>So,</p>  <p>my question is: How do I write a program that would calculate it as efficiently and if the game would never end wrote -1?</p>  <p>I have something like that:</p>  <pre><code>enter code here  #include&lt;vector&gt; #include&lt;iostream&gt; using namespace std;   int main() { int n, m, ile_gier; bool nieskonczonosc = true; cin &gt;&gt; n; int tab[n]; for(int i = 0; i &lt; n; i++) {     cin &gt;&gt; tab[i]; } cin &gt;&gt; m; char znak[m]; cin &gt;&gt; znak; int przesuniecie = n%m; for(int i = 0; i &lt; n; i++) {     if(znak[i+przesuniecie] == 'W') nieskonczonosc = true;  } if(nieskonczonosc == true) cout &lt;&lt; "-1" &lt;&lt; endl; </code></pre>