<p>I need to write a python wrapper for an existing C++ Module. First I tested the procedere with this basic example (which now actually works fine):  <a href="http://stackoverflow.com/questions/31835398/c-python-binding-with-ctypes-return-multiple-values-in-function">C++ - Python Binding with ctypes - Return multiple values in function</a></p>  <p>Now I tried to change the setting: I want to use the existing lib instead of my single cpp file. I tried it with this:</p>  <pre><code>g++ -c -I. -fPIC projectionWrapper.cpp -o projectionWrapper.o g++ -shared -Wl,-soname,libproj.so      -L./build/liborig_interface.a,./build/liborig_base.a      -o libproj.so  projectionWrapper.o  </code></pre>  <p>I wanted to link against both .a files from the given library with the -L command. I don't get any errors on that, but when I try to import the module via ipython, I get this:</p>  <pre><code>import myprojection    # I load libproj.so in this python file OSError: ./libproj.so: undefined symbol: _Z29calibration_loadPKcjbP14camera_typetS2_ </code></pre>  <p>There is a function "calibration_load", as well a "camera_type" in the original framework. But I have no clue where the cryptic things in between come from. </p>  <p>Sorry for my vague explanation, I tried to explain it as good as possible, but a C++ Wrapper is not one of my topics where I feel "at home".</p>