<p>Simplest program ever has g++ link errors. Searched everywhere.</p>  <pre><code>$ /usr/bin/g++ --version      g++ (GCC) 4.1.2 20080704 (Red Hat 4.1.2-55)      Copyright (C) 2006 Free Software Foundation, Inc.  $ cat /etc/redhat-release      CentOS release 5.11 (Final) </code></pre>  <p>----- a.cpp -----</p>  <pre><code>int main() { } </code></pre>  <hr>  <p>Note: I know that I don't have to specify a -o option as it will default to a.out, so what the heck is going on here. I have done this dozens of times on other machines.</p>  <pre><code>$ /usr/bin/g++ a.cpp /usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../lib64/crti.o: In function `_init':  (.init+0x0): multiple definition of `_init'  /usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../lib64/crt1.o:(.init+0x0): first defined here  /usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../lib64/crti.o: In function `_fini':  (.fini+0x0): multiple definition of `_fini'  /usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../lib64/crt1.o:(.fini+0x0): first defined here  /usr/lib/gcc/x86_64-redhat-linux/4.1.2/crtbegin.o:(.rodata+0x0): multiple definition of `__dso_handle'  /usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../lib64/crt1.o:(.rodata+0x0): first defined here  /tmp/ccYgVWiH.o: In function `main':  a.cpp:(.text+0x0): multiple definition of `main'  /usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../lib64/crt1.o:(.text+0xa8): first defined here  /usr/bin/ld: Warning: size of symbol `main' changed from 18 in /usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../lib64/crt1.o to 11 in /tmp/ccYgVWiH.o  /usr/lib/gcc/x86_64-redhat-linux/4.1.2/crtend.o:(.dtors+0x0): multiple definition of `__DTOR_END__'  /usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../lib64/crt1.o:(.dtors+0x8): first defined here  /usr/bin/ld: warning: cannot find entry symbol _start; defaulting to 0000000000400430 </code></pre>  <hr>  <p>Note: This works under OS: Red Hat Enterprise Linux Server release 5.1 (Tikanga) But not in my: CentOS release 5.11 (Final)</p>  <p>Note: This works just fine but I need it w/o the -m32</p>  <pre><code>/usr/bin/g++ -m32 a.cpp </code></pre>