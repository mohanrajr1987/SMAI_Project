<p>Suppose I have a class setup like the following:</p>  <pre><code>class A {   public:     virtual void foo() { printf("default implementation\n"); } };  class B : public A {   public:     void foo() override { printf("B implementation\n"); } };  class  C : public B {   public:     inline void foo() final { A::foo(); } };  int main(int argc, char **argv) {   auto c = new C();   c-&gt;foo(); } </code></pre>  <p>In general, can the call to <code>c-&gt;foo()</code> be devirtualized and inlined down to the <code>printf("default implementation")</code> call? Is this guaranteed, for example in gcc? My intuition is that <code>A::foo()</code> is non-virtual because the class is specified explicitly, and so the <code>printf</code> will always be inlined.</p>