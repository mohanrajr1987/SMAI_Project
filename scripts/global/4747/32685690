<p>I'm having the same error as occurs <a href="http://ideone.com/oPu2e7" rel="nofollow">here</a>. See 'compilation info' at the bottom for the long error message. Basically if I #include &lt;boost/spirit/include/qi.hpp> I can't compile. Totally stumped by this one... I am compiling with g++ 4.9.3 on Debian using C++11. For reference the first part of the error message is:</p>  <pre><code>In file included from /usr/include/boost/spirit/home/qi/nonterminal/rule.hpp:35:0,              from /usr/include/boost/spirit/home/qi/nonterminal.hpp:14,              from /usr/include/boost/spirit/home/qi.hpp:20,              from /usr/include/boost/spirit/include/qi.hpp:16,              from prog.cpp:9: /usr/include/boost/spirit/home/qi/reference.hpp: In instantiation of 'bool boost::spirit::qi::reference&lt;Subject&gt;::parse(Iterator&amp;, const Iterator&amp;, Context&amp;, const Skipper&amp;, Attribute&amp;) const [with Iterator = __gnu_cxx::__normal_iterator&lt;char*, std::basic_string&lt;char&gt; &gt;; Context = boost::spirit::context&lt;boost::fusion::cons&lt;std::basic_string&lt;char&gt;&amp;, boost::fusion::nil_&gt;, boost::spirit::locals&lt;&gt; &gt;; Skipper = boost::spirit::qi::char_class&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::ascii&gt; &gt;; Attribute = std::basic_string&lt;char&gt;; Subject = const boost::spirit::qi::rule&lt;__gnu_cxx::__normal_iterator&lt;const char*, std::basic_string&lt;char&gt; &gt;, std::basic_string&lt;char&gt;(), boost::proto::exprns_::expr&lt;boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term&lt;boost::spirit::tag::char_code&lt;boost::spirit::tag::space, boost::spirit::char_encoding::ascii&gt; &gt;, 0l&gt;, boost::spirit::unused_type, boost::spirit::unused_type&gt;]': </code></pre>  <p>My code is actually a little bit different to the above example:</p>  <pre><code>My::Dictionary Parser::parse( const char * s ) {   std::string input(s);     // input to parse   qi_my_protocol grammar;   // create instance of parser   My::Dictionary msg;      // map to receive results   bool result = qi::phrase_parse(     input.begin(),     input.end(),     grammar,     qi::space,     msg   ); // returns true if successful   return msg; } </code></pre>