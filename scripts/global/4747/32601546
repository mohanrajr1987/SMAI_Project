<p>I'm trying to compile caffe on ubuntu 14.04 LTS with Anaconda, in CPU-only mode and with OpenBLAS. Unfortunately, I get an ld error.</p>  <p>I followed the instructions, added the dependencies that didn't come with Anaconda and adjusted the Makefile.config accordingly, especially included the Anaconda path. When I do <code>make all</code> I get the error you see below (I also included the Makefile.config), even though the two files that were not found are in the anaconda/lib folder and in their respective pkgs folders as shared libraries.</p>  <p>Thank you very much for your help!</p>  <p>Terminal:</p>  <pre><code>CXX/LD -o .build_release/tools/extract_features.bin /usr/bin/ld: warning: libpng15.so.15, needed by /home/mclab/anaconda/lib/libopencv_highgui.so, not found (try using -rpath or -rpath-link) /usr/bin/ld: warning: libgfortran.so.1, needed by /home/mclab/anaconda/lib/libopenblas.so, not found (try using -rpath or -rpath-link) /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_set_strip_alpha@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_get_io_ptr@PNG15_0' /home/mclab/anaconda/lib/libopenblas.so: undefined reference to `_gfortran_pow_i4_i4' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_set_palette_to_rgb@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_set_swap@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_write_end@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_set_compression_level@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_write_image@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_destroy_read_struct@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_write_info@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_set_gray_to_rgb@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_destroy_write_struct@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_get_IHDR@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_read_update_info@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_set_compression_strategy@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_create_read_struct@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_read_info@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_set_longjmp_fn@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_read_image@PNG15_0' /home/mclab/anaconda/lib/libopenblas.so: undefined reference to `_gfortran_compare_string' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_create_write_struct@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_set_bgr@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_create_info_struct@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_set_write_fn@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_init_io@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_set_packing@PNG15_0' /home/mclab/anaconda/lib/libopenblas.so: undefined reference to `_gfortran_pow_r8_i4' /home/mclab/anaconda/lib/libopenblas.so: undefined reference to `_gfortran_concat_string' /home/mclab/anaconda/lib/libopenblas.so: undefined reference to `_gfortran_pow_r4_i4' /home/mclab/anaconda/lib/libopenblas.so: undefined reference to `_gfortran_etime' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_error@PNG15_0' /home/mclab/anaconda/lib/libopenblas.so: undefined reference to `_gfortran_copy_string' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_set_strip_16@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_read_end@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_set_IHDR@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_set_read_fn@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_set_expand_gray_1_2_4_to_8@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_set_rgb_to_gray@PNG15_0' /home/mclab/anaconda/lib/libopencv_highgui.so: undefined reference to `png_set_filter@PNG15_0' collect2: error: ld returned 1 exit status make: *** [.build_release/tools/extract_features.bin] Error 1 </code></pre>  <p>Makefile.config:</p>  <pre><code>## Refer to http://caffe.berkeleyvision.org/installation.html # Contributions simplifying and improving our build system are welcome!  # cuDNN acceleration switch (uncomment to build with cuDNN). # USE_CUDNN := 1  # CPU-only switch (uncomment to build without GPU support).  CPU_ONLY := 1  # To customize your choice of compiler, uncomment and set the following. # N.B. the default for Linux is g++ and the default for OSX is clang++  CUSTOM_CXX := g++  # CUDA directory contains bin/ and lib/ directories that we need. CUDA_DIR := /usr/local/cuda # On Ubuntu 14.04, if cuda tools are installed via # "sudo apt-get install nvidia-cuda-toolkit" then use this instead: # CUDA_DIR := /usr  # CUDA architecture setting: going with all of them. # For CUDA &lt; 6.0, comment the *_50 lines for compatibility. CUDA_ARCH := -gencode arch=compute_20,code=sm_20 \         -gencode arch=compute_20,code=sm_21 \         -gencode arch=compute_30,code=sm_30 \         -gencode arch=compute_35,code=sm_35 \         -gencode arch=compute_50,code=sm_50 \         -gencode arch=compute_50,code=compute_50  # BLAS choice: # atlas for ATLAS (default) # mkl for MKL # open for OpenBlas BLAS := open # Custom (MKL/ATLAS/OpenBLAS) include and lib directories. # Leave commented to accept the defaults for your choice of BLAS # (which should work)!  BLAS_INCLUDE := /home/mclab/anaconda/pkgs/openblas-0.2.14-1/include  BLAS_LIB := /home/mclab/anaconda/pkgs/openblas-0.2.14-1/lib  # Homebrew puts openblas in a directory that is not on the standard search path # BLAS_INCLUDE := $(shell brew --prefix openblas)/include # BLAS_LIB := $(shell brew --prefix openblas)/lib  # This is required only if you will compile the matlab interface. # MATLAB directory should contain the mex binary in /bin. # MATLAB_DIR := /usr/local # MATLAB_DIR := /Applications/MATLAB_R2012b.app  # NOTE: this is required only if you will compile the python interface. # We need to be able to find Python.h and numpy/arrayobject.h. PYTHON_INCLUDE := /home/mclab/anaconda/include/python2.7 \         /home/mclab/anaconda/lib/python2.7/site-packages/numpy/core/include # Anaconda Python distribution is quite popular. Include path: # Verify anaconda location, sometimes it's in root. # ORIGINAL:  ANACONDA_HOME := $(HOME)/anaconda  PYTHON_INCLUDE := $(ANACONDA_HOME)/include \          $(ANACONDA_HOME)/include/python2.7 \          $(ANACONDA_HOME)/lib/python2.7/site-packages/numpy/core/include \ # MODIFIED # ANACONDA_HOME := /home/mclab/anaconda # PYTHON_INCLUDE := /home/mclab/anaconda/include \ #        /home/mclab/anaconda/include/python2.7 \ #        /home/mclab/anaconda/lib/python2.7/site-packages/numpy/core/include \  # We need to be able to find libpythonX.X.so or .dylib. # PYTHON_LIB := /usr/lib  PYTHON_LIB := $(ANACONDA_HOME)/lib  # Homebrew installs numpy in a non standard path (keg only) # PYTHON_INCLUDE += $(dir $(shell python -c 'import numpy.core; print(numpy.core.__file__)'))/include # PYTHON_LIB += $(shell brew --prefix numpy)/lib  # Uncomment to support layers written in Python (will link against Python libs)  WITH_PYTHON_LAYER := 1  # Whatever else you find you need goes here. INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib  # If Homebrew is installed at a non standard location (for example your home directory) and you use it for general dependencies # INCLUDE_DIRS += $(shell brew --prefix)/include # LIBRARY_DIRS += $(shell brew --prefix)/lib  # Uncomment to use `pkg-config` to specify OpenCV library paths. # (Usually not necessary -- OpenCV libraries are normally installed in one of the above $LIBRARY_DIRS.) # USE_PKG_CONFIG := 1  BUILD_DIR := build DISTRIBUTE_DIR := distribute  # Uncomment for debugging. Does not work on OSX due to https://github.com/BVLC/caffe/issues/171 # DEBUG := 1  # The ID of the GPU that 'make runtest' will use to run unit tests. TEST_GPUID := 0  # enable pretty build (comment to see full commands) Q ?= @ </code></pre>