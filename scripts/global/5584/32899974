<p>My application have draw a texture with OpenGL and the background is set with a picture, when I call the screenshot function, it's only capture the texture and ignore the background, how can I capture the texture overlay on the top of the background?</p>  <p>This is my coding: </p>  <pre><code>public class Stage extends GLSurfaceView {  //Stage width and height private float w, h; //Texture position private float xPos, yPos; //Screen width and height private int screenWidth, screenHeight; //Our native vertex buffer private FloatBuffer vertexBuffer; private String img; private boolean SC; private Bitmap screen; private Texture tex; MyRenderer mRenderer;  public Stage(Context context, AttributeSet attrs) {     super(context, attrs);     setEGLConfigChooser(8, 8, 8, 8, 0, 0);     getHolder().setFormat(PixelFormat.TRANSLUCENT);     //here I set the background     setBackgroundResource(R.drawable.background);     setZOrderOnTop(true);     mRenderer = new MyRenderer();     setRenderer(mRenderer);     setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);     float vertices[] = {             -0.5f, -0.5f,  0.0f,  // 0. left-bottom             0.5f, -0.5f,  0.0f,  // 1. right-bottom             -0.5f,  0.5f,  0.0f,  // 2. left-top             0.5f,  0.5f,  0.0f   // 3. right-top     };      ByteBuffer vbb = ByteBuffer.allocateDirect(vertices.length * 4);     vbb.order(ByteOrder.nativeOrder());     vertexBuffer = vbb.asFloatBuffer();     vertexBuffer.put(vertices);     vertexBuffer.position(0);      img = "abc";      tex = new Texture(getResources().getIdentifier(img, "drawable", context.getPackageName())); }  public class MyRenderer implements GLSurfaceView.Renderer {      public void setSC(boolean yn){         SC = yn;         requestRender();     }      public final void onDrawFrame(GL10 gl) {         gl.glClear(GLES10.GL_COLOR_BUFFER_BIT);         tex.prepare(gl, GL10.GL_CLAMP_TO_EDGE);         gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);         //here I draw the texture                 tex.draw(gl, xPos, yPos, tex.getWidth(), tex.getHeight(), 0);          //screenshot         if(SC==true){             int b[]=new int[screenWidth*(0+screenHeight)];             int bt[]=new int[screenWidth*screenHeight];             IntBuffer ib=IntBuffer.wrap(b);             ib.position(0);             gl.glReadPixels(0, 0, screenWidth, 0 + screenHeight, GL10.GL_RGBA, GL10.GL_UNSIGNED_BYTE, ib);             for(int i=0, k=0; i&lt;screenHeight; i++, k++)             {                 for(int j=0; j&lt;screenWidth; j++)                 {                     int pix=b[i*screenWidth+j];                     int pb=(pix&gt;&gt;16)&amp;0xff;                     int pr=(pix&lt;&lt;16)&amp;0x00ff0000;                     int pix1=(pix&amp;0xff00ff00) | pr | pb;                     bt[(screenHeight-k-1)*screenWidth+j]=pix1;                 }             }             //I'm using ARGB8888 which is support alpha channel             screen = Bitmap.createBitmap(bt, screenWidth, screenHeight, Bitmap.Config.ARGB_8888);              //save the screenshot image to storage             String file_path = Environment.getExternalStorageDirectory().getAbsolutePath() + "/OpenGL";             File dir = new File(file_path);             if(!dir.exists()){                 dir.mkdirs();             }             String format = new SimpleDateFormat("yyyyMMddHHmmss", java.util.Locale.getDefault()).format(new Date());             File file = new File(file_path, format + ".png");             FileOutputStream fOut;             try {                 fOut = new FileOutputStream(file);                 screen.compress(Bitmap.CompressFormat.PNG, 85, fOut);                 fOut.flush();                 fOut.close();             } catch (Exception e) {                 e.printStackTrace();             }              SC = false;         }     }      public final void onSurfaceChanged(GL10 gl, int width, int height) {         gl.glClearColor(0, 0, 0, 0);          if(width &gt; height) {             h = 600;             w = width * h / height;         } else {             w = 600;             h = height * w / width;         }         screenWidth = width;         screenHeight = height;          xPos = w/2;         yPos = h/2;                  gl.glViewport(0, 0, screenWidth, screenHeight);         gl.glMatrixMode(GL10.GL_PROJECTION);         gl.glLoadIdentity();         gl.glOrthof(0, w, h, 0, -1, 1);         gl.glMatrixMode(GL10.GL_MODELVIEW);         gl.glLoadIdentity();     }      public final void onSurfaceCreated(GL10 gl, EGLConfig config) {         // Set up alpha blending         gl.glEnable(GL10.GL_ALPHA_TEST);         gl.glEnable(GL10.GL_BLEND);         gl.glBlendFunc(GL10.GL_ONE, GL10.GL_ONE_MINUS_SRC_ALPHA);          // We are in 2D. Why needs depth?         gl.glDisable(GL10.GL_DEPTH_TEST);          // Enable vertex arrays (we'll use them to draw primitives).         gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);          // Enable texture coordination arrays.         gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);          tex.load(getContext());     }  }  } </code></pre>  <p>Reference: <a href="http://stackoverflow.com/questions/4731589/android-opengl-screenshot?lq=1">Android OpenGL Screenshot</a> </p>