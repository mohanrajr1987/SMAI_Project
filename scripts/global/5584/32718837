<p>I have an issue with my OpenGL ES 2 shader code.</p>  <p>When I run my program on my Nexus 5, it all looks great.</p>  <p>When I run my program on my Samsung Galaxy Tab 2, the colours produced by this fragment shader are almost all very dark, except when the lamp is perfectly lined up and then the image is very bright in that spot.</p>  <p>I have other shaders that do not do any lighting, and so I am positive that my textures are loading correctly.</p>  <p>I suspect there is a floating point precision issue somewhere, but I cannot figure it out! Specifically, the diffuseLight calculation.  If I change that fudge factor (0.3) then I can brighten it up in the tablet, but then it gets washed out on my phone!</p>  <pre><code>precision mediump float; struct Material {     lowp vec3 ambientColour;     lowp vec3 specularColour;     mediump float shininess; }; uniform Material uMaterial; uniform mat4 uModelMatrix; uniform vec3 uEyePos; varying vec2 vTextureCoord; uniform sampler2D sTexture; varying vec3 vModelPos; varying vec3 vNormal; varying vec4 vPosition; void main() {     // Position a lamp at x=0, y=0, z=1000     vec3 lamp = vec3(0, 0, 1000);     // Calculate the lamp normal     vec3 L = normalize(lamp - vModelPos);     // Calculate the dot product of the surface normal with the lamp normal     float dot = max(0.0, dot(vNormal, L));     // Calculate the normal vector halfway between the eye position and the lamp.     vec3 halfvec = L + normalize(uEyePos);     halfvec = normalize(halfvec);     float dotHalf = max(0.0, dot(vNormal, halfvec));     // Read the ambient light from the material     vec3 ambientLight = uMaterial.ambientColour;     // Calculate diffuse light     vec3 textureColor = texture2D(sTexture, vTextureCoord).xyz;     vec3 diffuseLight = (dot * 0.3) * textureColor;     // Calculate specular light     vec3 specularLight = vec3(0);     if (dotHalf &gt; 0.0) {         float val = pow(dotHalf, uMaterial.shininess);         specularLight = val * uMaterial.specularColour;     }     vec4 light = vec4(ambientLight + diffuseLight + specularLight, 1);     gl_FragColor = light; } </code></pre>