<p>I have been checking the SO for this question, and even I found a similar question (<a href="http://stackoverflow.com/questions/9967014/opengl-es-2-x-any-way-to-reuse-depth-buffer-for-off-screen-and-on-screen-render">OpenGL ES 2.x: any way to reuse depth buffer for off-screen and on-screen rendering?</a>) saying it can't be done, I found it differs from my intention. </p>  <p>My intention is to relieve the shader fragment opperations by using the depth buffer to discard occluded-gonnabes. </p>  <ol> <li>I set the DEPTH Writing On.</li> <li>I disable the Color Writing (glColorMask(GL_TRUE,GL_TRUE,GL_TRUE,GL_TRUE);) </li> <li>I set the DEPTH function to GL_LESS</li> <li>I choose the simpler Vertex Shader and a void fragment shader (void main(void) {}).</li> <li>I draw my scene</li> <li>I set DEPTH writing off</li> <li>I enable the Color Writing again</li> <li>I draw each object again with his own shaders this time</li> </ol>  <p>But this does not work (I use OpenGL ES 2.0). If I disable Color Writing in first pass, I get no image (and some weird flickering), if I skip pass 2 and 7, i get no fps rate change.</p>  <p><strong>Why? Is there something wrong in my logic?</strong> I dont mess with the FBOs, I just call the drawing of VBOs 2 times. </p>