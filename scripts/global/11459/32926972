<p>I went to a problem that the output of each tasks is not as real as it should be if we look at the console write order.</p>  <pre><code>using System; using System.Threading.Tasks;  namespace randomTaskTest {     class Program     {         public static void foo()         {             Random rnd = new Random((int)DateTime.Now.Ticks); // I know that I should not cast long to int              int target = 3;             int currentNumber = rnd.Next(1, 100);             int tryCounter = 0;              while(currentNumber!=target)             {                 currentNumber = rnd.Next(1, 100);                 tryCounter++;             }              Console.WriteLine(tryCounter);             rnd = null;         }          static void Main(string[] args)         {             for (int i = 0; i &lt; 30; i++)                 Task.Run(() =&gt; { foo(); });              Console.ReadKey();         }     } } </code></pre>  <p>I put there a 30 tasks that stay in loop until the Random class will find the correct number in range of &lt;1;100>. In the perfect world the first output entries in console window <strong>should be sorted ascending</strong>, but it's not.</p>  <p>My way of understanding this code is that when a random number has been found, then it should be written it in console window asap, because the luckiest random instances leaves the loop as first.</p>  <p>The output is something like: 3<BR> 18<BR> 7<BR> 30<BR></p>  <p>instead of<BR> 3<BR> 7<BR> 18<BR> 30<BR></p>  <p>etc.</p>  <p>This is impossible to avoid when the Task creation time is longer than the Task execution time, is it? At least I think that this task takes less time to end than the task time to create it.</p>