<pre><code>    function fillarray(arrname) {        var list1 = document.FORM1.MASTERLIST;        var list2 = document.getElementById(arrname);        var rmax = list2.options.length;        var lmax = list1.options.length;        var partc = "";        if (rmax != 0) {var setname = list2.options[list2.selectedIndex].text;}        for (var loop1 = 0 ; loop1 &lt; lmax ; loop1=loop1+1) {           partc = list1.options[loop1].text;           list2.options[loop1]=new Option( partc , partc );        }        if ((rmax != 0) &amp;&amp; (setname != "")) {           var si = inlist(list2,setname);           list2.options[si-1].selected = true;        }        return;     }â€‹ </code></pre>  <p>My issue seems to be at the line "for (var loop1 = 0...."</p>  <p>Through testing, I've found 2995 is the highest loop1 will work with. Above that I wind up with no elements at all in my SELECT options.</p>  <p>I predefined a Master list of options - and when each of specific drop downs are selected, I copy the master list into that list - so I don't have to define each list with oodles of options when loading.</p>  <p>Everything worked fine, until W7 upgraded to IE11 - older versions of IE work without a problem. I haven't tested it on another OS platform other than W7 so I don't know if it's specific to IE11 on W7</p>  <p>Is there an upper limit or an upper total size limit to how many options[] can be in a list for IE11? or is there a bug that anyone else has noticed this happening.</p>  <p>I just did an additional test, by limiting the size of each option description to 5 characters, and the full amount of options loaded - so it's not a limit on the number - it must be total length.</p>  <p>Rightnow - it's about 4500 entries at about 25 bytes each for both the value and the description so about 225k - I seem to have a problem around 150k of total length.</p>  <p>Thanks</p>