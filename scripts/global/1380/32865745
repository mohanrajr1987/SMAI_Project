<p>How do you unit test a FormType that has a parent of entity? Or is it the case that the class should be ignored by phpUnit?  Code is included below.</p>  <p><code>1) Audit\ReceiptBundle\Tests\Form\Type\ContactTypeTest::testSubmitValidData Symfony\Component\OptionsResolver\Exception\MissingOptionsException: The required option "class" is missing.</code></p>  <pre><code>class ContactType extends AbstractType {      public function __construct()     {     }      public function setDefaultOptions(OptionsResolverInterface $resolver)     {         $resolver-&gt;setDefaults(array(             'empty_value' =&gt; 'Choose a Contact',         ));     }      public function getParent()     {         return 'entity';     }      public function getName()     {         return 'contact';     }  } </code></pre>  <p>The test code:</p>  <pre><code>protected function getExtensions() {     return array(new PreloadedExtension(array(             'entity' =&gt; $this-&gt;mockFieldEntityType(),                 ), array())); }  public function testSubmitValidData() {      $formData = [     ];      $type = new ContactType();     $resolve = new \Symfony\Component\OptionsResolver\OptionsResolver();     $resolve-&gt;setDefaults([         'class' =&gt; 'foo:bar'     ]);     $type-&gt;setDefaultOptions($resolve);     $form = $this-&gt;factory-&gt;create($type);      // submit the data to the form directly     $form-&gt;submit($formData);      $this-&gt;assertTrue($form-&gt;isSynchronized());     $this-&gt;assertEquals($formData, $form-&gt;getData());      $view = $form-&gt;createView();     $children = $view-&gt;children;      foreach (array_keys($formData) as $key) {         $this-&gt;assertArrayHasKey($key, $children);     } } </code></pre>  <p>mockFieldEntityType() is take from the answer provided in <a href="http://stackoverflow.com/questions/26059826/how-to-load-form-types-in-tests">How to load form types in tests</a></p>  <pre><code>protected function mockFieldEntityType() {     $mockEntityManager = $this-&gt;getEntityManager();      $mockRegistry = $this-&gt;getMockBuilder('Doctrine\Bundle\DoctrineBundle\Registry')         -&gt;disableOriginalConstructor()         -&gt;getMock();      $mockRegistry-&gt;expects($this-&gt;any())-&gt;method('getManagerForClass')         -&gt;will($this-&gt;returnValue($mockEntityManager));      $mockEntityManager-&gt;expects($this-&gt;any())-&gt;method('getClassMetadata')         -&gt;withAnyParameters()         -&gt;will($this-&gt;returnValue(new ClassMetadata('entity')));       $entityType = new EntityType($mockRegistry);      return $entityType; } </code></pre>