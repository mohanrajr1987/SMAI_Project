<p>For one of my library ( <a href="https://github.com/phpreboot/stopwatch" rel="nofollow">source</a> ), I've configured PHPunit as follow:</p>  <pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;phpunit bootstrap="vendor/autoload.php" colors="true"&gt;     &lt;testsuites&gt;         &lt;testsuite name="PHPReboot Stopwatch Test Suite"&gt;             &lt;directory&gt;tests/Phpreboot/Stopwatch&lt;/directory&gt;         &lt;/testsuite&gt;     &lt;/testsuites&gt;     &lt;filter&gt;         &lt;whitelist&gt;             &lt;directory suffix=".php"&gt;src/Phpreboot/Stopwatch&lt;/directory&gt;         &lt;/whitelist&gt;     &lt;/filter&gt;     &lt;logging&gt;         &lt;log type="coverage-html" target="./log/codeCoverage" charset="UTF-8"              yui="true" highlight="true"              lowUpperBound="50" highLowerBound="80"/&gt;         &lt;log type="testdox-html" target="./log/testdox.html" /&gt;     &lt;/logging&gt; &lt;/phpunit&gt; </code></pre>  <p>In above <a href="https://github.com/phpreboot/stopwatch" rel="nofollow">source</a>, phpunit.xml.dist is simply copied as phpunit.xml.</p>  <p>My code coverage report is generating but reports shows 0% code coverage. However based on tests (check code in source) I'm sure it must be more than 0%.</p>  <p>Can someone please suggest where my configuration is going wrong?</p>  <p><strong>Edit after first comment</strong></p>  <p>Testcases: <a href="https://github.com/phpreboot/stopwatch/blob/master/tests/Phpreboot/Stopwatch/StopWatchTest.php" rel="nofollow">https://github.com/phpreboot/stopwatch/blob/master/tests/Phpreboot/Stopwatch/StopWatchTest.php</a></p>  <pre><code>&lt;?php  namespace Phpunit\Stopwatch;  use Phpreboot\Stopwatch\StopWatch; use Phpreboot\Stopwatch\Timer;  /**  * Class StopWatchTest  * @package Phpunit\Stopwatch  * @group Phpreboot  * @group Phpreboot_Stopwatch  * @group Phpreboot_Stopwatch_StopWatch  */ class StopWatchTest extends \PHPUnit_Framework_TestCase {     /** @var  StopWatch $stopWatch */     private $stopWatch;      public function setUp()     {         $this-&gt;stopWatch = new StopWatch();     }      public function tearDown()     {         $this-&gt;stopWatch = null;     }      /* ******************/     /* Constructor test */     /* ******************/     /**      * @group Phpreboot_Stopwatch_StopWatch_constructor      */     public function testStopWatchHaveDefaultWatch()     {         /** @var Timer $defaultWatch */         $defaultWatch = $this-&gt;stopWatch-&gt;getWatch();          $this-&gt;assertNotNull($defaultWatch, "No watch available");         $this-&gt;assertInstanceOf('Phpreboot\Stopwatch\Timer', $defaultWatch, "Not an instance of Watch");          $name = $defaultWatch-&gt;getName();          $this-&gt;assertEquals(StopWatch::STOPWATCH_DEFAULT_NAME, $name, "Default name of StopWatch is not set correctly");     }      /* ***************/     /* addWatch Test */     /* ***************/     /**      * @group Phpreboot_Stopwatch_StopWatch_addWatch      */     public function testWatchCanBeAdded()     {         $this-&gt;assertEquals(1, $this-&gt;stopWatch-&gt;getWatchCount(), "Stopwatch doesn't initialized with default watch.");          $this-&gt;stopWatch-&gt;addWatch('testWatch');         $this-&gt;assertEquals(2, $this-&gt;stopWatch-&gt;getWatchCount(), "Stopwatch could not be added");     }      /**      * @group Phpreboot_Stopwatch_StopWatch_addWatch      */     public function testWatchCanNotBeAddedWithDuplicateName()     {         $this-&gt;assertEquals(1, $this-&gt;stopWatch-&gt;getWatchCount(), "Stopwatch doesn't initialized with default watch.");         $this-&gt;assertFalse($this-&gt;stopWatch-&gt;addWatch(StopWatch::STOPWATCH_DEFAULT_NAME), "Watch with default name was duplicated.");         $this-&gt;assertEquals(1, $this-&gt;stopWatch-&gt;getWatchCount(), "Watch with default name was duplicated.");          $this-&gt;assertTrue($this-&gt;stopWatch-&gt;addWatch('testWatch'), "New watch couldn't be added.");         $this-&gt;assertEquals(2, $this-&gt;stopWatch-&gt;getWatchCount(), "New watch couldn't be added.");         $this-&gt;assertFalse($this-&gt;stopWatch-&gt;addWatch('testWatch'), "New watch with duplicate name was added.");         $this-&gt;assertEquals(2, $this-&gt;stopWatch-&gt;getWatchCount(), "New watch with duplicate name was added.");     }      /* ********************/     /* getWatchCount Test */     /* ********************/     /**      * @group Phpreboot_Stopwatch_StopWatch_getWatchCount      */     public function testWatchCountIsCorrect()     {         $totalWatch = $this-&gt;stopWatch-&gt;getWatchCount();          $this-&gt;assertEquals(1, $totalWatch, "Watch count is not correct");     }      /* ***************/     /* getWatch Test */     /* ***************/     /**      * @group Phpreboot_Stopwatch_StopWatch_getWatch      */     public function testDefaultWatchCouldBeReturned()     {         $watch = $this-&gt;stopWatch-&gt;getWatch();         $this-&gt;assertInstanceOf('Phpreboot\Stopwatch\Timer', $watch, "Default watch is not an instance of Watch.");         $this-&gt;assertEquals(StopWatch::STOPWATCH_DEFAULT_NAME, $watch-&gt;getName(), "Name of default was was not correctly set.");     }      /**      * @group Phpreboot_Stopwatch_StopWatch_getWatch      */     public function testWatchCouldBeReturned()     {         $this-&gt;stopWatch-&gt;addWatch('newWatch');          $newWatch = $this-&gt;stopWatch-&gt;getWatch("newWatch");         $this-&gt;assertInstanceOf('Phpreboot\Stopwatch\Timer', $newWatch, "New watch is not an instance of Watch.");     } } </code></pre>  <p>Source: <a href="https://github.com/phpreboot/stopwatch/blob/master/src/Phpreboot/Stopwatch/StopWatch.php" rel="nofollow">https://github.com/phpreboot/stopwatch/blob/master/src/Phpreboot/Stopwatch/StopWatch.php</a></p>  <p>  <pre><code>/*  * This file is part of the PHPReboot/Stopwatch package.  *  * (c) Kapil Sharma &lt;kapil@phpreboot.com&gt;  *  * For the full copyright and license information, please view the LICENSE  * file that was distributed with this source code.  */  namespace Phpreboot\Stopwatch;  use Phpreboot\Stopwatch\Timer;  class StopWatch {     const STOPWATCH_DEFAULT_NAME = "default_watch_R@nd0m_n@m3";      private $timers;      /**      * Constructor to create new StopWatch instance with default watch.      */     public function __construct()     {         $this-&gt;timers = array();         $this-&gt;addWatch(self::STOPWATCH_DEFAULT_NAME);     }      public function start($name = self::STOPWATCH_DEFAULT_NAME)     {         if (!$this-&gt;isWatchExist($name)) {             return false;         }          return $this-&gt;getWatch($name)-&gt;start();     }      public function pause($name = self::STOPWATCH_DEFAULT_NAME)     {         if (!$this-&gt;isWatchExist($name)) {             return false;         }          return $this-&gt;getWatch($name)-&gt;pause();     }      public function stop($name = self::STOPWATCH_DEFAULT_NAME)     {         if (!$this-&gt;isWatchExist($name)) {             return false;         }          return $this-&gt;getWatch($name)-&gt;stop();     }      public function getTime($name = self::STOPWATCH_DEFAULT_NAME)     {         if (!$this-&gt;isWatchExist($name)) {             return -1;         }          return $this-&gt;getWatch($name)-&gt;getTime();     }      public function isWatchExist($name)     {         return array_key_exists($name, $this-&gt;timers);     }      /**      * Add a new watch to the StopWatch.      *      * @param string $name Name of watch to be added.      * @return bool True if watch added successfully, false otherwise.      */     public function addWatch($name)     {         if (array_key_exists($name, $this-&gt;timers)) {             return false;         }          $watch = new Timer($name);         $this-&gt;timers[$name] = $watch;          return true;     }      public function addWatches(array $watches)     {         $isWatchAdded = false;          if (empty($watches)) {             return $isWatchAdded;         }          foreach ($watches as $watch) {             $this-&gt;addWatch($watch);             $isWatchAdded = true;         }          return $isWatchAdded;     }      /**      * Get a watch by name of watch.      *      * @param string $name Name of watch      * @throws \InvalidArgumentException In case watch with name '$name' does not exist.      * @return Timer A watch instance with name '$name'.      */     public function getWatch($name = self::STOPWATCH_DEFAULT_NAME)     {         if (!array_key_exists($name, $this-&gt;timers)) {             throw new \InvalidArgumentException('Watch ' . $name . ' does not exist.');         }          return $this-&gt;timers[$name];     }      public function getWatchCount()     {         return count($this-&gt;timers);     } } </code></pre>  <p><strong>Edit 2: XDebug settings</strong></p>  <pre><code>php --info | grep xdebug /etc/php5/cli/conf.d/20-xdebug.ini, xdebug xdebug support =&gt; enabled xdebug.auto_trace =&gt; Off =&gt; Off xdebug.cli_color =&gt; 0 =&gt; 0 xdebug.collect_assignments =&gt; Off =&gt; Off xdebug.collect_includes =&gt; On =&gt; On xdebug.collect_params =&gt; 0 =&gt; 0 xdebug.collect_return =&gt; Off =&gt; Off xdebug.collect_vars =&gt; Off =&gt; Off xdebug.coverage_enable =&gt; On =&gt; On xdebug.default_enable =&gt; On =&gt; On xdebug.dump.COOKIE =&gt; no value =&gt; no value xdebug.dump.ENV =&gt; no value =&gt; no value xdebug.dump.FILES =&gt; no value =&gt; no value xdebug.dump.GET =&gt; no value =&gt; no value xdebug.dump.POST =&gt; no value =&gt; no value xdebug.dump.REQUEST =&gt; no value =&gt; no value xdebug.dump.SERVER =&gt; no value =&gt; no value xdebug.dump.SESSION =&gt; no value =&gt; no value xdebug.dump_globals =&gt; On =&gt; On xdebug.dump_once =&gt; On =&gt; On xdebug.dump_undefined =&gt; Off =&gt; Off xdebug.extended_info =&gt; On =&gt; On xdebug.file_link_format =&gt; no value =&gt; no value xdebug.idekey =&gt; no value =&gt; no value xdebug.max_nesting_level =&gt; 250 =&gt; 250 xdebug.overload_var_dump =&gt; On =&gt; On xdebug.profiler_aggregate =&gt; Off =&gt; Off xdebug.profiler_append =&gt; Off =&gt; Off xdebug.profiler_enable =&gt; Off =&gt; Off xdebug.profiler_enable_trigger =&gt; Off =&gt; Off xdebug.profiler_output_dir =&gt; /tmp =&gt; /tmp xdebug.profiler_output_name =&gt; cachegrind.out.%p =&gt; cachegrind.out.%p xdebug.remote_autostart =&gt; Off =&gt; Off xdebug.remote_connect_back =&gt; On =&gt; On xdebug.remote_cookie_expire_time =&gt; 3600 =&gt; 3600 xdebug.remote_enable =&gt; On =&gt; On xdebug.remote_handler =&gt; dbgp =&gt; dbgp xdebug.remote_host =&gt; localhost =&gt; localhost xdebug.remote_log =&gt; no value =&gt; no value xdebug.remote_mode =&gt; req =&gt; req xdebug.remote_port =&gt; 9000 =&gt; 9000 xdebug.scream =&gt; Off =&gt; Off xdebug.show_exception_trace =&gt; Off =&gt; Off xdebug.show_local_vars =&gt; Off =&gt; Off xdebug.show_mem_delta =&gt; Off =&gt; Off xdebug.trace_enable_trigger =&gt; Off =&gt; Off xdebug.trace_format =&gt; 0 =&gt; 0 xdebug.trace_options =&gt; 0 =&gt; 0 xdebug.trace_output_dir =&gt; /tmp =&gt; /tmp xdebug.trace_output_name =&gt; trace.%c =&gt; trace.%c xdebug.var_display_max_children =&gt; 128 =&gt; 128 xdebug.var_display_max_data =&gt; 512 =&gt; 512 xdebug.var_display_max_depth =&gt; 3 =&gt; 3 </code></pre>