<p>I'm trying to unit test a class where one public method (method 1) uses another public method (method 2) of the same class within it. E.g.</p>  <pre><code>class MyClass {     public function method1()     {         $var = $this-&gt;method2();         // Do stuff with var to get $answer         return $answer;     }      public function method2()     {         // Do complex workings out to get $var         return $var;     } } </code></pre>  <p>Now, <code>method2</code> is already unit tested and I don't want to build up an argument for it to actually call it whilst testing <code>method1</code>. I just want to mock up <code>method2</code> and define in my test what would be returned. This is what I have:</p>  <pre><code>function test_method1() {     $myClass = new MyClass();      $mockedMyClass = Mockery::mock('MyClass');     $mockedMyClass-&gt;shouldReceive('method2')-&gt;once()-&gt;andReturn([1,2,3,4]); // mocked $var returned to be used in the rest of method1      $answer = $myClass-&gt;method1();     // Assertions } </code></pre>  <p>Clearly this doesn't work as the method being tested is in the same class as contains the method being mocked, so there's no way to pass in the mocked class as a dependency. What's the best way to mock just method2?</p>