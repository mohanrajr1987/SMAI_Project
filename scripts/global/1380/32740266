<p>I use two ways to test my forms:</p>  <h2>By using <code>$form = …-&gt;form();</code></h2>  <p>Then setting the values of the <code>$form</code> array (more precisely this is a <code>\Symfony\Component\DomCrawler\Form</code> object):</p>  <p>Full example from the <a href="http://symfony.com/doc/current/book/testing.html#functional-tests" rel="nofollow">documentation</a>:</p>  <pre><code>$form = $crawler-&gt;selectButton('submit')-&gt;form();  // set some values $form['name'] = 'Lucas'; $form['form_name[subject]'] = 'Hey there!';  // submit the form $crawler = $client-&gt;submit($form); </code></pre>  <h2>By sending the <code>POST</code> data directly:</h2>  <p>The previous code doesn't work with <a href="http://symfony.com/doc/current/cookbook/form/form_collections.html" rel="nofollow">forms which manage collections</a> (relying on fields created by Javascript) because it throws an error if the field doesn't exist. That's why I also use this other way.</p>  <p>Full example from the <a href="http://symfony.com/doc/current/book/testing.html#working-with-the-test-client" rel="nofollow">documentation</a>:</p>  <pre><code>// Directly submit a form (but using the Crawler is easier!) $client-&gt;request('POST', '/submit', array('name' =&gt; 'Fabien')); </code></pre>  <p>This solution is the only way I know to test forms which manage collections with fields added by Javascript (see link to documentation above). But this second solution is harder to use because:</p>  <ul> <li>it doesn't check which fields exist, this is impractical when I have to submit a form with existing fields <code>and</code> a collection which relies on fields created dynamically  with Javascript</li> <li>it requires to add the form <code>_token</code> manually</li> </ul>  <h2>My question</h2>  <p>Is it possible to use the syntax from the first way to define the existing fields then add new dynamically created fields with the second syntax?</p>  <p>In other words, I would like to have something like this:</p>  <pre><code>$form = $crawler-&gt;selectButton('submit')-&gt;form();  // set some values for the existing fields $form['name'] = 'Lucas'; $form['form_name[subject]'] = 'Hey there!';  // submit the form with additional data $crawler = $client-&gt;submit($form, array('name' =&gt; 'Fabien')); </code></pre>  <p>But I get this error:</p>  <blockquote>   <p>Unreachable field "name"</p> </blockquote>  <p>And <code>$form-&gt;get('name')-&gt;setData('Fabien');</code> triggers the same error.</p>  <p>This example is not perfect because the form has no collection, but it's enough to show you my problem.</p>  <p>I'm looking for a way to avoid this validation when I add some fields to the existing form.</p>  <h2>Update</h2>  <p>As suggested by NandaKumar I added a testable example: <a href="https://github.com/alexislefebvre/TestCollection/" rel="nofollow">https://github.com/alexislefebvre/TestCollection/</a></p>  <h3><a href="https://github.com/alexislefebvre/TestCollection/blob/master/src/AppBundle/Controller/DefaultController.php" rel="nofollow">Controller</a> (creates a dummy form)</h3>  <pre><code>/**  * @Route("/form", name="form")  */ public function formAction(Request $request) {     $object = new \ArrayObject();     $object-&gt;name = '';      $form = $this-&gt;createFormBuilder($object)         -&gt;add('name', 'text')         -&gt;add('submit', 'submit')         -&gt;getForm();      $form-&gt;handleRequest($request);      if ($form-&gt;isValid()) {         return new Response(             'Data submitted: '.$object-&gt;name         );     }      return $this-&gt;render('default/form.html.twig', array(         'form' =&gt; $form-&gt;createView(),     )); } </code></pre>  <h1><a href="https://github.com/alexislefebvre/TestCollection/blob/master/app/Resources/views/default/form.html.twig" rel="nofollow">Twig template file (<kbd>default/form.html</kbd>)</a></h1>  <pre><code>{% extends 'base.html.twig' %}  {% block body %}     {{ form(form) }} {% endblock %} </code></pre>  <h1><a href="https://github.com/alexislefebvre/TestCollection/blob/master/src/AppBundle/Tests/Controller/DefaultControllerTest.php" rel="nofollow">Test file</a> (here is only the failing test)</h1>  <pre><code>&lt;?php  namespace AppBundle\Tests\Controller;  use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;  class DefaultControllerTest extends WebTestCase {         public function testFormSetAndPost()     {         […]          ///// Get the form and set values         $form = $crawler-&gt;selectButton('Submit')-&gt;form();          // set some values         $form['form[name]'] = 'Lucas';          // submit the form         $crawler = $client-&gt;submit(             $form,             // This fails here because the field is missing             array('missing_field' =&gt; 1)         );          $this-&gt;assertContains(             'Lucas',             $crawler-&gt;filter('p')-&gt;text()         );     } } </code></pre>  <p>Output is:</p>  <blockquote>   <p>There was 1 error:   1) AppBundle\Tests\Controller\DefaultControllerTest::testFormSetAndPost   InvalidArgumentException: Unreachable field "missing_field"</p> </blockquote>  <p>Please note that my problem is not that <code>missing_field</code> is missing, it's: How to send data for a collection while avoiding the validation from the <code>DomCrawler</code>.</p>