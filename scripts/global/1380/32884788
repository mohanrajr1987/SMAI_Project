<p>I want to test code to show that it produces an <code>E_USER_WARNING</code> in certain circumstances.</p>  <p>I found <a href="http://www.sitepoint.com/testing-error-conditions-with-phpunit/" rel="nofollow">this article</a> which addresses the problem, so as I see it I have these options:</p>  <ol> <li>Copying that code into every TestSuite which needs to test for warnings</li> <li>Making a subclass of <code>PHPUnit's</code> TestCase that has that code, and have my tests inherit from that</li> <li>Use composition, i.e. make a helper class that achieves the same.</li> </ol>  <p>I don't like 1, for obvious reasons - I can't imagine the author had that option in mind. </p>  <p>I don't like 2, because there are some tests that I might use a third party TestCase that already extends <code>PHPUnit's</code> TestCase, so it would get complicated or messy if I wanted to add that functionality for that subclass as well by subclassing that subclass.</p>  <p>Option 3 sounds the best. But...</p>  <p><strong>This all seems to be reinventing the wheel. Aren't there any off-the-shelf solutions for PHPUnit to assert a warning has been generated as expected? If not, is there a good pattern for this that anyone could share?</strong> </p>  <p>For better or worse, I very strongly want to stick with <code>PHPUnit</code> for reasons such as: </p>  <ul> <li>I want to keep my tests consistent, and not have to re-write all my current tests</li> <li>It is the most supported <code>PHP</code> test framework for <code>IDEs</code> etc</li> <li>I don't want to have to learn another framework</li> </ul>