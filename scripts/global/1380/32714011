<p>I would like to implement PHPUnit tests for my factory, which calls a service. Here is my factory : </p>  <pre><code>class FMaiAffaireServiceFactory implements FactoryInterface {     public function createService(ServiceLocatorInterface $serviceLocator)     {         $dbAdapter = $serviceLocator-&gt;get('Zend\Db\Adapter\Adapter');          $resultSetPrototype = new ResultSet();         $tableGateway = new TableGateway(             'f_affaire',             $dbAdapter,             null,             $resultSetPrototype         );         $adapter = $tableGateway-&gt;getAdapter();         $sql = new Sql($adapter);          $maiAffaireTable = new FMaiAffaireTable(             $tableGateway,             $adapter,             $sql         );          $typeaffaireService = $serviceLocator-&gt;get(             'Intranet\Service\Model\PTypeaffaireService'         );          $etatAffaireService = $serviceLocator-&gt;get(             'Intranet\Service\Model\PEtataffaireService'         );          $maiPrestationService = $serviceLocator-&gt;get(             'Maintenance\Service\Model\PMaiPrestationService'         );          $maiAffaireService = new FMaiAffaireService(             $maiAffaireTable,             $typeaffaireService,             $etatAffaireService,             $maiPrestationService         );          return $maiAffaireService;     } </code></pre>  <p>Ad there is my test but it doesn't work :</p>  <pre><code>class FMaiAffaireServiceFactoryTest extends \PHPUnit_Framework_TestCase {     public function testCreateService()     {         $sm = new ServiceManager();         $factory = new FMaiAffaireServiceFactory();         $runner = $factory-&gt;createService($sm);     } } </code></pre>  <p><strong>Edit : My New test script :</strong></p>  <pre><code>public function testCreateService()     {         $this-&gt;mockDriver = $this-&gt;getMock('Zend\Db\Adapter\Driver\DriverInterface');         $this-&gt;mockConnection = $this-&gt;getMock('Zend\Db\Adapter\Driver\ConnectionInterface');         $this-&gt;mockDriver-&gt;expects($this-&gt;any())-&gt;method('checkEnvironment')-&gt;will($this-&gt;returnValue(true));         $this-&gt;mockDriver-&gt;expects($this-&gt;any())-&gt;method('getConnection')-&gt;will($this-&gt;returnValue($this-&gt;mockConnection));         $this-&gt;mockPlatform = $this-&gt;getMock('Zend\Db\Adapter\Platform\PlatformInterface');         $this-&gt;mockStatement = $this-&gt;getMock('Zend\Db\Adapter\Driver\StatementInterface');         $this-&gt;mockDriver-&gt;expects($this-&gt;any())-&gt;method('createStatement')-&gt;will($this-&gt;returnValue($this-&gt;mockStatement));         $this-&gt;adapter = new Adapter($this-&gt;mockDriver, $this-&gt;mockPlatform);         $this-&gt;sql = new Sql($this-&gt;adapter);           $mockTableGateway = $this-&gt;getMock('Zend\Db\TableGateway\TableGateway', array(), array(), '', false);           $smMock = $this-&gt;getMockBuilder('Zend\ServiceManager\ServiceManager')                        -&gt;getMock();          $maiPrestationTable = $this-&gt;getMockBuilder('Maintenance\Model\BDD\PMaiPrestationTable')              -&gt;setMethods(array())              -&gt;setConstructorArgs(array($mockTableGateway, $this-&gt;adapter, $this-&gt;sql))              -&gt;getMock();          $smMock-&gt;expects($this-&gt;any())             -&gt;method('get')             -&gt;with('Maintenance\Service\Model\PMaiPrestationService')             -&gt;will($this-&gt;returnValue(new PMaiPrestationService($maiPrestationTable)));          $etatAffaireTable = $this-&gt;getMockBuilder('Intranet\Model\BDD\PEtataffaireTable')             -&gt;setMethods(array())             -&gt;setConstructorArgs(array($mockTableGateway))             -&gt;getMock();          $smMock-&gt;expects($this-&gt;any())             -&gt;method('get')             -&gt;with('Intranet\Service\Model\PEtataffaireService')             -&gt;will($this-&gt;returnValue(new PEtataffaireService($etatAffaireTable)));          $typeaffaireTable = $this-&gt;getMockBuilder('Intranet\Model\BDD\PTypeaffaireTable')             -&gt;setMethods(array())             -&gt;setConstructorArgs(array($mockTableGateway))             -&gt;getMock();          $smMock-&gt;expects($this-&gt;any())             -&gt;method('get')             -&gt;with('Intranet\Service\Model\PTypeaffaireService')             -&gt;will($this-&gt;returnValue(new PTypeaffaireService($typeaffaireTable)));          $smMock-&gt;expects($this-&gt;any())             -&gt;method('get')             -&gt;with('Zend\Db\Adapter\Adapter')             -&gt;will($this-&gt;returnValue($this-&gt;adapter));          $factory = new FMaiAffaireServiceFactory();         $runner = $factory-&gt;createService($smMock);         // assertions here     } </code></pre>  <p>This tells me : get was unable to fetch or create an instance for Zend\Db\Adapter\Adapter</p>  <p><strong>Edit : Here is the service :</strong></p>  <pre><code>public function createService(ServiceLocatorInterface $serviceLocator)         {             $dbAdapter = $serviceLocator-&gt;get('Zend\Db\Adapter\Adapter');              $resultSetPrototype = new ResultSet();             $tableGateway = new TableGateway(                 'f_affaire',                 $dbAdapter,                 null,                 $resultSetPrototype             );             $adapter = $tableGateway-&gt;getAdapter();             $sql = new Sql($adapter);              $maiAffaireTable = new FMaiAffaireTable(                 $tableGateway,                 $adapter,                 $sql             );              $typeaffaireService = $serviceLocator-&gt;get(                 'Intranet\Service\Model\PTypeaffaireService'             );              $etatAffaireService = $serviceLocator-&gt;get(                 'Intranet\Service\Model\PEtataffaireService'             );              $maiPrestationService = $serviceLocator-&gt;get(                 'Maintenance\Service\Model\PMaiPrestationService'             );              $maiAffaireService = new FMaiAffaireService(                 $maiAffaireTable,                 $typeaffaireService,                 $etatAffaireService,                 $maiPrestationService             );              return $maiAffaireService;         } </code></pre>  <p>How can I make it work ?</p>  <p>Thanks.</p>