<p>I have the following setup: I'm mocking non-abstract class with PHPUnit, but not all of it's methods. Therefore, non-mocked methods still exist as a call to real methods in the mock. </p>  <p>And the question is: how to hint that those methods are available (of course, with the proper signature) ?</p>  <p>I'll elaborate a bit. The sample of class:</p>  <pre><code>class RealClass {     public function callApi(Api $api) {}      public function doStuff(Foo $foo, Bar $bar) {} } </code></pre>  <p>Now I do in the test:</p>  <pre><code>/** @var  \PHPUnit_Framework_MockObject_MockObject $mock */ $mock = $this-&gt;getMock('\RealClass', ['callApi']); </code></pre>  <p>This will create mock for <code>callApi()</code> only, but then if in the test I do:</p>  <pre><code>$mock-&gt;doStuff($foo, $bar); </code></pre>  <p>My PHPStorm can not find the method obviously and assumes this to be an error. How can I point that the <code>doStuff()</code> method exists and requires proper arguments?</p>  <p><code>@method</code> seems to be working only within class definition. I tried to play a bit with <code>@see</code> but was unable to resolve the matter. Also, the ideal solution would be the one that allows to specify hinting also within return statements as I may want to return mocks from test helpers methods.</p>  <p>"Cheap cheat" is to hint with the original class, but that I do not want to do since then I will lose the point - which is mock and which is not. This especially is important since I'm using helpers to build complex entities where mocks are injected.</p>