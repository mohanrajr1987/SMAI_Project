<p>How would I go about implementing a driver pattern in Lumen? Right now I have a helper <code>ResponseHandler.php</code> in <code>/app/Helpers</code> which defines an <code>abstract class ResponseHandler</code>.</p>  <pre><code>// app/Helpers/ResponseHandler.php  namespace App\Helpers;  use \Symfony\Component\HttpFoundation\Response as HTTPResponse;  abstract class ResponseHandler extends HTTPResponse {         abstract public function success();     abstract public function fail();     [...] } </code></pre>  <p>I have drivers defined that <code>extend ResponseHandler</code> in the subdirectory <code>/app/Helpers/Response</code>. A driver is defined as follows:</p>  <pre><code>// app/Helpers/Response/JSON.php  namespace App\Helpers\ResponseHandler;  class JSON extends ResponseHandler {     public function fail() {         // logic     }      public function success() {         // logic     }      [...] } </code></pre>  <p>The problem I'm running into is that when I try to use the driver inside a function in my controller, Lumen throws the following error: <code>Class 'App\Helpers\ResponseHandler\JSON' not found</code>. This is the controller I've written (irrelevant parts removed):</p>  <pre><code>// app/Http/Controllers/ResponseController.php  namespace App\Http\Controllers;  use App\Helpers\ResponseHandler\JSON as Response;  class ResponseController extends Controller {     public function returnSomething($content) {         [...]         return Response::success($_ProcessedContent);     }      [...] } </code></pre>  <p>I've tried changing namespaces around which just ends up causing more errors and doesn't end up solving this one. I suspect that I'm just not familiar enough with namespaces and how Lumen uses them...but I've been working on this problem for a few hours now and can't seem to figure it out.</p>  <p>Could someone with more experience with Lumen/Laravel shed some light onto this issue for me?</p>  <p><strong>* [SOLUTION] *</strong> The design pattern was correct, but I needed to run:</p>  <p><code>composer dump-autoload</code></p>  <p>after everything was written.</p>