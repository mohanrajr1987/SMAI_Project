<p>I have a folder structure like this:</p>  <pre><code>app/   models/     bar/       foo.rb       connection.rb     foo.rb </code></pre>  <p><code>connection.rb</code> is an "abstract class" for connecting to another database, so:</p>  <pre><code>class Bar::Connection &lt; ActiveRecord::Base   self.abstract_class = true   establish_connection "outsidedb_#{Rails.env}" end </code></pre>  <p><code>bar/foo.rb</code> is for accessing the <code>foos</code> table from <code>outsidedb</code>, so:</p>  <pre><code>class Bar::Foo &lt; Bar::Connection end </code></pre>  <p>And <code>foo.rb</code> is for accessing the <code>foos</code> table from the app's db, so:</p>  <pre><code>class Foo &lt; ActiveRecord::Base end </code></pre>  <p>From the rails console if I do <code>Foo.first</code> or <code>Bar::Foo.first</code> things behave as a I would expect in that I get the first entry from the <code>foos</code> table of the app db and the external db, respectively.</p>  <p>However, if I try to access <code>Foo</code> from within <code>bar/foo.rb</code> I get the following:</p>  <pre><code>class Bar::Foo &lt; Bar::Connection   def self.test       Bar::Foo.first #=&gt; works       Foo.first      #=&gt; NameError: uninitialized constant Bar::Foo::Foo   end    def self.other_test     Foo.parent                    #=&gt; Object     Foo.superclass                #=&gt; ActiveRecord::Base     Object::Foo.first             #=&gt; works     ActiveRecord::Base::Foo.first #=&gt; works, but with "warning: toplevel constant                                    #   Foo referenced by ActiveRecord::Base::Foo   end end </code></pre>  <p>I can obviously get things working, but I'm looking for a sounder understanding of what's going on. I'm assuming I'm missing something between Ruby's constant/class evaluation and Rail's builtin auto-loading...</p>  <ol> <li>What is <code>.parent</code> returning (not the 'parent' class)?</li> <li>Why do I get the error in <code>.test</code>, but I don't get it in the rails console?</li> <li>Why does <code>Object::Foo</code> seem to work? Is it the right thing to do?</li> <li>Why does <code>ActiveRecord::Base::Foo</code> work, but with a warning?</li> <li>There a more rails way to do what I've done without just renaming one of my <code>foo.rb</code> classes?</li> </ol>  <p>I'm on <code>Rails '3.2.13'</code> and <code>Ruby 1.9.3-p194</code>, just so you know!</p>