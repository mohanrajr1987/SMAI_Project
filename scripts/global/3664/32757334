<p>I started getting lookup errors recently with a non-trivially sized C++ project (compiled with Clang). I assumed unclosed namespace, #if or class definition, but found none. I've managed to break it down to the following code:</p>  <pre><code>namespace A {   class foo {}; }  namespace B {   class bar : public A::foo {}; } </code></pre>  <p>The definition of bar fails to find A::foo, but does suggest ::A::foo. Now the really strange thing is, if I set the name of namespace B to something specific and exists elsewhere ("Testing", in this case), it fails. Anything else, and it compiles fine. So my question is how can a namespace name affect lookup in another namespace in such a way?</p>  <p>Thanks</p>  <p>Edit: Seems to be some confusion over the question so I'll clarify. This example is all that is needed to exhibit the error, however the problem is a bunch of code is compiled before this which is causing some sort of side effects. The question is, what code compiled beforehand could cause the example above to fail? What could be done inside a namespace such that future uses of that namespace have difficultly being found? I'm personally not aware of any code that could cause such a side effect in future uses of a namespace.</p>  <p>Note: I am unable to find the code that is causing the prior side effect. If I could I probably wouldn't be asking here for deeper internal knowledge of C++ compilation and namespaces.</p>