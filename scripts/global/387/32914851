<p>I've written an OCR wrapper batch &amp; service script for tesseract and abbyyocr11 found here: <a href="https://github.com/deajan/pmOCR" rel="nofollow">https://github.com/deajan/pmOCR</a></p>  <p>The main function is a find command that passes it's arguments to xargs with -print0 in order to deal with special filenmames. The find command became more and more complex and ended up as a VERY long one liner that becomes difficult to maintain:</p>  <pre><code>find "$DIRECTORY_TO_PROCESS" -type f -iregex ".*\.$FILES_TO_PROCES" ! -name "$find_excludes" -print0 | xargs -0 -I {} bash -c 'export file="{}"; function proceed { eval "\"'"$OCR_ENGINE_EXEC"'\" '"$OCR_ENGINE_INPUT_ARG"' \"$file\" '"$OCR_ENGINE_ARGS"' '"$OCR_ENGINE_OUTPUT_ARG"' \"${file%.*}'"$FILENAME_ADDITION""$FILENAME_SUFFIX$FILE_EXTENSION"'\" &amp;&amp; if [ '"$_BATCH_RUN"' -eq 1 ] &amp;&amp; [ '"$_SILENT"' -ne 1 ];then echo \"Processed $file\"; fi &amp;&amp; echo -e \"$(date) - Processed $file\" &gt;&gt; '"$LOG_FILE"' &amp;&amp; if [ '"$DELETE_ORIGINAL"' == \"yes\" ]; then rm -f \"$file\"; fi"; }; if [ "'$CHECK_PDF'" == "yes" ]; then if ! pdffonts "$file" 2&gt;&amp;1 | grep "yes" &gt; /dev/null; then proceed; else echo "$(date) - Skipping file $file already containing text." &gt;&gt; '"$LOG_FILE"'; fi; else proceed; fi' </code></pre>  <p>Is there a nicer way to pass the find results to a human readable function (without impacting too much speed) ?</p>  <p>Thanks.</p>