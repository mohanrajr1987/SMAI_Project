<p>In the Python 3.5 code below, I want to use a less than operator (&lt;) to compare two generic values. How can I declare a constraint on T to support <code>__lt__</code>? </p>  <pre><code>from typing import * import operator   T = TypeVar('T')  class MyList(Generic[T]):     class Node:         def __init__(self, k:T) -&gt; None:             self.key = k              self.next = None  # type: Optional[MyList.Node]      def __init__(self) -&gt; None:         self.root = None # type: Optional[MyList.Node]      def this_works(self, val:T) -&gt; bool:         return self.root.key == val       def not_works(self, val:T) -&gt; bool:         return operator.lt(self.root.key, val) </code></pre>  <p>I'm using mypy to type check and it's failing on <code>not_works</code> with the message: </p>  <pre><code>$ mypy test.py test.py: note: In member "not_works" of class "MyList": test.py:20: error: Unsupported left operand type for &lt; ("T") </code></pre>  <p>Other languages support constraints on T.</p>  <p>In C#: <code>class MyList&lt;T&gt; where T:IComparable&lt;T&gt;</code></p>  <p>In Java: <code>class MyList&lt;T extends Comparable&lt;? super T&gt;&gt;</code></p>