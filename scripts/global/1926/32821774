<p>So far I have this:</p>  <pre><code>if (o.GetType().IsGenericType &amp;&amp; o is System.Collections.IEnumerable)         {             var typefield = typeof(List&lt;object&gt;).GetFields().Where(f =&gt; f.Name == "T").ToArray();             Type T = (Type)(typefield[0].GetValue(o));             addButton.Enabled = true;             if (((System.Collections.IList)o).Count &gt; 0)             {                 removeButton.Enabled = true;             }             comboBox1.Enabled = true;             comboBox1.Items.Clear();              foreach (var item in Assembly.GetAssembly(T).GetTypes().Where(x =&gt; T.IsAssignableFrom(x) &amp;&amp; !x.IsAbstract))             {                 comboBox1.Items.Add(item);             }             comboBox1.DisplayMember = "Name";            } </code></pre>  <p>but it crashes on the line "Type T = (Type)(typefield[0].GetValue(o));" because the array is empty, which means that the previous line did not work.</p>  <p><strong>Question:</strong> Assuming that everything that passes the first line is a List, how should I determine the type of objects in the list. (note that checking the type of the members is not good enough. The members are likely to be derived from the Type that is specified in the list definition.)</p>  <p><strong>P.S.</strong> I read here that my first line is the best way to determine something as a list: <a href="http://stackoverflow.com/questions/248903/if-object-is-generic-list">If object is Generic List</a> Do you have a more accurate way?</p>