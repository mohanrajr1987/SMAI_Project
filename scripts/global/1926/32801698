<p>I'm new to Scala and new to higher kinded types.  I want to write something like this;</p>  <pre><code>trait Actor[E[Dependency] &lt;: Event[Dependency]] {   def execute(dependency: Dependency): Unit } </code></pre>  <p>However I can't refer to the type parameter Dependency in the execute method - the compiler doesn't know it.</p>  <p>I'm aware I can solve it in the following way without HKTs, but this isn't what this question is about;</p>  <pre><code>trait Actor[T &lt;: Event[Dependency], Dependency] {    def execute(dependency: Dependency): Unit } </code></pre>  <p>I'd like to understand why it doesn't work with the higher kinded type syntax that I've tried?  Is it possible at all to express this with HKTs?  Is this a valid use-case for a HKT?</p>  <hr>  <p><strong><em>EDIT</em></strong></p>  <p>A bit more information, Event looks like this;</p>  <pre><code>trait Event[Data] {    val payload: Data } </code></pre>  <p>...and I'm looking to define an event and an actor like this;</p>  <pre><code>case class FooEvent(payload: Foo) extends Event[Foo]  class FooActor extends Actor[FooEvent] {    def execute(dependency: Foo) = {} } </code></pre>