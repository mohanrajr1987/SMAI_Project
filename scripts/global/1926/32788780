<p>(NOTE: split from <a href="http://stackoverflow.com/questions/32778746">Shapeless: Trying to restrict HList elements by their type</a> and <a href="http://stackoverflow.com/questions/32786247">Shapeless: own HList constraint using Coproduct</a> )</p>  <p><strong>Question 3 - restrict case classes by parameter types</strong></p>  <p>A very nice additional gain would be, if I could use HList constraints to constrain case class only to be built from AnyVals, Strings, and a specific MyBaseTrait, that recursively fulfill the same constraint. The constraint being defined on the base trait and not to have to touch any derived case  class would be great. Something like:</p>  <pre><code>trait MyBaseTrait type MyCP = Boolean :+: Long :+: ... :+: String :+: MyBaseTrait case class ValidSimple(b: Boolean, s: String) extends MyBaseTrait case class ValidNested(s: String, vs: ValidSimple) extends MyBaseTrait case class NotOfBaseTrait(l: Long)  case class InvalidNested(s: String, vs: NotOfBaseTrait) extends MyBaseTrait // =&gt; compile error </code></pre>  <p>This would allow to fail a lot earlier. Is this possible? via Generic#Repr or DeepHList?</p>