<p>I want to add support for generics to a language, but before I do I need to understand more clearly what generics are inside.</p>  <p>My current understanding is that instantiating the class:</p>  <pre><code>class ArrayList&lt;T&gt; {     public int add(T object)     {         // ...     } } </code></pre>  <p>Creates an instance where the argument type of <code>T</code> on <code>add</code> must be the same as the type argument on <code>new ArrayList&lt;T&gt;()</code> where <code>T</code> is a real type.</p>  <p>Implementing this seems pretty simple, but only for this use-case.  It becomes a more complicated concept when it needs to support introspection.  For example, I <strong>wouldn't</strong> say that:</p>  <pre><code>true === (new ArrayList&lt;Date&gt;() instanceof ArrayList) </code></pre>  <p>but I would say that:</p>  <pre><code>true === (new ArrayList&lt;Date&gt;() instanceof ArrayList&lt;Date&gt;) </code></pre>  <p>My question is, when using <code>ArrayList&lt;Date&gt;</code> as a type reference, is it a type derived of <code>ArrayList&lt;T&gt;</code>, or is it a class in its own right, for example is:</p>  <pre><code>$list = new ArrayList&lt;Date&gt;(); </code></pre>  <p>an instance of:</p>  <pre><code>class ArrayList {     public int add(Date $object)     {         // ...     } } </code></pre>  <p>Or is it an instance of <code>ArrayList&lt;T&gt;</code> where <code>T</code> is <code>Date</code>?</p>