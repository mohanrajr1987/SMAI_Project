<p>i have to check if the content of some variable are of some specific type (it is a sanity check i want to implement). If each one of these is not of the specified type then the program has to abort.</p>  <p>I'm not experienced in python, i've a glance to the official guide on the web where it is stated that it is possible to define own exceptions by class implementation. I don't know if that would be hard or not, but since i don't have to do something particularly complicated is it possible to do that in a simple way?</p>  <p>Update</p>  <p>I've implemented the exception int exception in the following way:</p>  <pre><code>class TypeCheckingException(Exception):     def __init__(self,type_in,type_exp):         self.type_in = type_in         self.type_exp = type_exp </code></pre>  <p>The specific line of the implementation its use are:</p>  <pre><code>try:         if isinstance(var1,str) == 0:             raise TypeCheckingException(type(var1),str)         if isinstance(var2,str) == 0:             raise TypeCheckingException(type(var2),str)         if isinstance(var3,int) == 0:             raise TypeCheckingException(type(var3),int)         if isinstance(var4,int) == 0:             raise TypeCheckingException(type(var4),int)         if isinstance(var5,str) == 0:             raise TypeCheckingException(type(var5),str)         if isinstance(var6,float) == 0:             raise TypeCheckingException(type(var6),float)     except TypeCheckingException, tce:         print "Type expected input " + str(tce.type_in) + " while type expected is " + str(tce.type_exp) +  "." </code></pre>  <p>In this case works, but the error output is quite verbose... i'd like to make it shorter...</p>  <p>Any clue?</p>