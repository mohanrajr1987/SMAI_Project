<p>I was wondering if it is possible in julia to assign a custom or existing type to a variable without calling it's constructor. </p>  <p>Something similar to a forward declaration of a class in c++.</p>  <p>Here is an example of what I intend to achieve:</p>  <pre><code>type foo     a end  #custom type a = foo b = foo  #julia type, force c to be of type Int c = Int       a.a = 5.5 b.a = 4.5  c = 6 </code></pre>  <p><strong>Edit</strong> To clarify my question:</p>  <p>In C++ or Fortran it is common coding practice to declare a variable at some point for later usage.</p>  <p>I don't recall the correct Fortran syntax but in C++ you would write something like:</p>  <pre><code>class foo; class bar; int a;  class foo{ private:     bar myBar;  public:     foo(int a){ myBar( a ); }   }      class bar{  public:      bar(int a){          std::cout &lt;&lt; a &lt;&lt; std::endl;     }  }  a = 3; foo( a ); </code></pre>  <p>The advantage of this code structure is that it allows you to define objects / types / variables before you use them.  </p>