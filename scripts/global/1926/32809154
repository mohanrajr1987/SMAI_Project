<p>How to provide a parameter for a method in abstract class so that the parameter can be extended later on? I will illustrate a simple scenario below.</p>  <pre><code>abstract class Car {   def drive(x: Driver) }  abstract class Driver case class DriverA(name: String) extends Driver case class DriverB(name: String, age: Int) extends Driver  class Audi extends Car {   // each child class should have a more specific type for param "x"   def drive(x: DriverA) = { ... } }  class BMW extends Car {   // each child class should have a more specific type for param "x"   def drive(x: DriverB) = { ... } } </code></pre>  <p>But this doesn't work in Scala: "Error: [..] method parameter types must match exactly"</p>  <p>I also tried specifying upper bound type like this def drive[T &lt;: Driver](x: T): Int, but still without any luck. It seems that I am missing something simple and obvious. </p>  <p>Is there something wrong with design like this?</p>