<p>I'm working on a configuration utility for my employees to create various users and groups, so I am using the Queue class with a custom class containing a command and command type.  In my engine routine, I am dequeueing and using a switch to process each command type.  I have several try/catch blocks in place, but when it hits the routine in my 'engine' to add a user, before it breaks into the method the exception and is thrown back to the Main() routine.  I'm baffled on why it thinks I'm using an anonymous type.  Any advise would be appreciated.</p>  <p>In my Form during the validation and queueing process I call:</p>  <pre><code>Qm.QueueCommands.Enqueue(new ScriptCommands() { Command = "UserName|" + txtUserName.Text, ScriptTypes = ScriptTypes.AddUser }); </code></pre>  <p>I have the queue in a static class:</p>  <pre><code>public static class Qm {           public static Queue&lt;ScriptCommands&gt; QueueCommands = new Queue&lt;ScriptCommands&gt;(); } </code></pre>  <p>And the engine processes like this:</p>  <pre><code>    var command = Qm.QueueCommands.Dequeue();     switch (command.ScriptTypes)     {     case ScriptTypes.AddUser:          var uAdd = command.Command.Split('|');          var response = Users.AddUser(uAdd[0], uAdd[1]);  // this is where exception occurs          break;     } </code></pre>  <p>Users.AddUsers is formed like this:</p>  <pre><code>public static bool AddUser(string userName, string userPass) {    try    {        start process to add user which it never gets to        return true; // if no errors caught    }    catch (Exception)    {       return false;    } }  public class ScriptCommands {     public ScriptTypes ScriptTypes { get; set; }     public string Command { get; set; } } </code></pre>  <p>ScriptTypes is just a list of Enums.</p>