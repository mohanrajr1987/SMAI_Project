<p>in my project I'm been using Rest web service in my controller and html pages. So I have to improve my exception managmet using in all my environments (js, controller and services). Now I using this approach: Controller</p>  <pre><code>@Override     @RequestMapping(value="/singleFileOpen", method=RequestMethod.POST )     public String singleFileOpen(@RequestParam("file") MultipartFile file, Model model ) {         Response&lt;ExcelField[][]&gt; response;         try {             response = fileServices.singleFileOpen(file);             model.addAttribute("fileName",file.getOriginalFilename());             model.addAttribute("rowSize",response.getBody().length-1);             model.addAttribute("colSize",response.getBody()[0].length-1);             model.addAttribute("excelSheet",response.getBody());             model.addAttribute("opened", "true");             return "singleFileOpen";             //          if (response.getStatus()==HttpStatus.OK.value())         } catch (FileUploadException|FileEmptyException e) {             model.addAttribute("opened", "false");             model.addAttribute("errorMessage",e.getMessage());             return "singleFileOpen";         } catch (Exception e){             model.addAttribute("opened", "false");             model.addAttribute("errorMessage",e.getMessage());             return "singleFileOpen";         }     }      @Override     @RequestMapping(value="/singleFileUpload", method=RequestMethod.POST )     public @ResponseBody Response&lt;String&gt; singleFileUpload(Model model ) {         Response&lt;String&gt; response=null;         try {             //TEST DB              //databaseServices.archiveAcquisition();              //FINE TEST             response = fileServices.singleFileUpload();             model.addAttribute("result",response.getBody());             return response;         } catch (FileUploadException|FileEmptyException e) {             return response;         } //Managing all other exception            catch (Exception e){             return response;         }     } </code></pre>  <p>Services</p>  <pre><code>@Override     public Response&lt;ExcelField[][]&gt; singleFileOpen(MultipartFile file) throws FileUploadException, FileEmptyException{         if (!file.isEmpty()) {             try {                 openedFile=file;                 //Retrieve the fields values                 ExcelField[][] valuesMatrix=getExcelField(openedFile);                 //return the Response with status ad excel fields                 return new Response&lt;ExcelField[][]&gt;(HttpStatus.OK.value(),valuesMatrix);             } catch (Exception e) {                 throw new FileUploadException("You failed to upload " + openedFile.getOriginalFilename());             }         } else {             throw new FileEmptyException("You failed to upload" );         }     } </code></pre>  <p>And I have my exception controller</p>  <pre><code>@ControllerAdvice  public class ErrorController {     /**      *        * @param e: exception thrown      * @param request      * @return ErroreResponse      */      @ExceptionHandler(Exception.class)      public @ResponseBody ErrorResponse errorHandler(Exception e, HttpServletRequest request) {          request.setAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE, Collections.singleton(MediaType.APPLICATION_JSON));          return ErrorResponseBuilder.buildErrorResponse(e);      } } </code></pre>  <p>errorResponse</p>  <pre><code>public static ErrorResponse buildErrorResponse(Exception e){     StringWriter errors = new StringWriter();     e.printStackTrace(new PrintWriter(errors));     return new ErrorResponse(HttpStatusManager.getHttpCode(e),e.getClass().getName(),e.getMessage(),errors.toString()); } </code></pre>  <p>So if I call by postman or browser I receive the response or errorResponse correctly, but I hav to use this also in my controller to return status cose to jsp pages that call this web services.For example</p>  <pre><code>$(function() {      $("#uploadButton").click(function() {         $.ajax({             type : "POST",             url : "singleFileUpload",             contentType : 'application/json',             success : function(data) {                 if (data.status==200){                     //il risultato sta in data.result                     $('#uploadAccountInfo').text(data.body);                     $('#modalUploadResult').modal("show");                 } else {                     $('#uploadAccountInfo').text("Sorry, but there has been a problem, please retry. Thanks");                     $('#modalUploadResult').modal("show");                 }             },             error : function(data) {                 window.location.href = "/500"; //Redirect to page 500             }         });     }); }) </code></pre>  <p>I thought to use only response and put into body the errorReponse build, but in several case my services don't return Response where string is the body. Can I obtain the errorReponse object thrown by services?Or other way? Thanks</p>