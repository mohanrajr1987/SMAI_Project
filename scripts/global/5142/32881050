<p>[Problem fixed, see edit at bottom]</p>  <p>This method, which I've used previously, is now throwing an exception for the reason of not following it's general contract.</p>  <pre><code>private Face[] sortByDistance(Face[] faces, final Point3D p) {     final Comparator&lt;Face&gt; faceComparator = new Comparator&lt;Face&gt;() {         @Override         public int compare(Face o1, Face o2) {             return MathUtils.distance(o2.getAveragePoint(), p) - MathUtils.distance(o1.getAveragePoint(), p);         }     };     Arrays.sort(faces, faceComparator); // Exception occurs here.     return faces; } </code></pre>  <p>I know for certain the Point3D from the arguments is what's causing it to sometimes throw this exception. Only certain points cause this though, and some work fine. Why?</p>  <p>Here are some sample points that did cause an exception:</p>  <pre><code>(2.9081598E-6,-38.519745,18.787334) (-15.432643,38.19713,11.813029) (-20.884119,28.744518,-23.96541) (5.961947,16.380322,-39.151947) (3.7570944,3.6281846,-42.537693) (-20.747366,9.237327,-36.34492) (-17.694483,20.355177,-33.30626) (-5.3533697,30.360487,-29.771076) (14.785507,34.832466,-20.12021) </code></pre>  <p>If it helps, I've only just noticed this after putting it inside an object that extends Thread and runs itself, and constantly loops through a series of methods, one of which calls the above method with the exception. It hasn't done this until now, so if there might be some concurrent reason, I would expect it.</p>  <p>[Edit] The problem was that Point3D "p" in the arguments is a mutable object, and an object on a different thread was making changes to it.</p>