<p>Running the below code in python 2.7.1 on my mac works fine:</p>  <pre><code>    from sympy.solvers import solve     from sympy import Symbol      def to_wavelength(steps):         x = Symbol('x', real=True)         eqn = (0.003851 * x**3) - (11.75 * x**2) + (1.257e4 * x)  - (2.309e6) - steps         wavelength_list = solve(eqn, x)         print wavelength_list         wavelength = wavelength_list[0]         return round(wavelength, 2)      print to_wavelength(0.0) </code></pre>  <p>The real=True bit removes all the complex roots as it should, and I get 229.05. However, when running the exact same file on a Raspberry Pi 2 running Raspbian (with everything updated as far as I can tell), it fails to remove the complex roots, yielding this hideous mess:</p>  <pre><code>[1411.05178151959 - 791.588092573129*I, 1411.05178151959 + 791.588092573129*I, 229.051980975356] Traceback (most recent call last):   File "&lt;stdin&gt;", line 1, in &lt;module&gt;   File "Fixing_stuff.py", line 24, in &lt;module&gt; output_wavelength = to_wavelength(0.0)   File "Fixing_stuff.py", line 16, in to_wavelength return round(wavelength, 2)   File "/usr/lib/python2.7/dist-packages/sympy/core/expr.py", line 129, in __float__ raise ValueError("Symbolic value, can't compute") ValueError: Symbolic value, can't compute </code></pre>  <p>Please help!</p>