<p>In my Reducer code, I am using this code snippet to sum the values: </p>  <pre><code>for(IntWritable val : values) {     sum += val.get();            } </code></pre>  <p>As the above mentioned gives me expected output, I tried changing the code to:</p>  <pre><code>for(IntWritable val : values) {     sum += 1; } </code></pre>  <p>Can anyone please explain what is the difference it makes when I use <code>sum += 1</code> in the reducer rather than <code>sum += val.get()</code>? Why does it give me the same output? Does it have anything to do with Combiner, because when I used this same reducer code as Combiner, class the output was incorrect with all words showing a count of 1.</p>  <p>Mapper Code :</p>  <pre><code>public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {          String line = value.toString();         StringTokenizer token = new StringTokenizer(line);          while(token.hasMoreTokens()) {             word.set(token.nextToken());             context.write(word, new IntWritable(1));         }     } </code></pre>  <p>Reducer Code :</p>  <pre><code>public void reduce(Text key, Iterable&lt;IntWritable&gt; values, Context context) throws IOException, InterruptedException {          int sum = 0;          for(IntWritable val : values) {             //sum += val.get();             sum += 1;         }         context.write(key, new IntWritable(sum));     } </code></pre>  <p>Driver Code:</p>  <pre><code>job.setJarByClass(WordCountWithCombiner.class);         //job.setJobName("WordCount");          job.setMapperClass(WordCountMapper.class);         job.setCombinerClass(WordCountReducer.class);         job.setReducerClass(WordCountReducer.class);          FileInputFormat.addInputPath(job, new Path(args[0]));         FileOutputFormat.setOutputPath(job, new Path(args[1]));          job.setMapOutputKeyClass(Text.class);         job.setMapOutputValueClass(IntWritable.class);          job.setOutputKeyClass(Text.class);         job.setOutputValueClass(IntWritable.class); </code></pre>  <p>Input - "to be or not to be"</p>  <p>Expected Output - (be,2) , (to,2) , (or,1) , (not,1)</p>  <p>But Output i am getting is - (be,1) , (to,1) , (or,1) , (not,1)</p>