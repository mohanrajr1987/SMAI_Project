<p>Given the following list:</p>  <pre><code>[(0, [135, 2]), (0, [2409, 1]), (0, [12846, 2]), (1, [13840, 2]), ...] </code></pre>  <p>I need to output a list of first elements of the list-value (i.e., <code>135, 2409, 12846</code> for key <code>0</code> and <code>13840</code> for key <code>1</code>) for each key if the second element of the list-value (i.e., <code>2, 1, 2</code> for <code>0</code> and <code>2</code> for <code>1</code>) is greater than or equal to a certain value (let's say 2). For instance, in this particular case the output should be:</p>  <pre><code>[(0, [135, 12846]), (1, [13840]), ...] </code></pre>  <p>The tuple <code>(0, [2409, 1])</code> is discarded because <code>1 &lt; 2</code>.</p>  <p>I've achieved that by applying a <code>groupByKey()</code>, a <code>mapValues(list)</code> and a final <code>map</code> function, but clearly <code>groupByKey()</code> is less efficient than reduce functions.</p>  <p>Is this possible achieving that task by just using a <code>reduceByKey()</code> or <code>combineByKey()</code> function?</p>