<p>I am working on a custom view called <code>CanvasView</code>. This is a view that allows me to draw stuff on it outside of the <code>onDraw</code> method. It is something like this:</p>  <pre><code>public class CanvasView extends View {     private ArrayList&lt;Shape&gt; shapes;     private Paint paint;      public CanvasView (Context c) {         super(c);         init ();     }      public CanvasView(Context context, AttributeSet attrs) {         super (context, attrs);         init ();     }      public CanvasView(Context context, AttributeSet attrs, int defStyleAttr) {         super (context, attrs, defStyleAttr);         init ();     }     private void init () {         shapes = new ArrayList&lt;&gt; ();         paint = new Paint ();         paint.setStrokeWidth (5);         paint.setColor (Color.BLACK);     }      //focus on this method, I think the others are irrelevant     @Override     public void setOnTouchListener (final OnTouchListener listener) {         final OnTouchListener baseListener = new OnTouchListener () {             @Override             public boolean onTouch(View v, MotionEvent event) {                 float x = event.getX ();                 float y = event.getY ();                 if (x &lt; 18 || x &gt; getWidth () - 18 || y &lt; 18 ||                         y &gt; getHeight () - 18)                     return false;                  return true;             }         };          super.setOnTouchListener (new OnTouchListener () {             @Override             public boolean onTouch(View v, MotionEvent event) {                 if (baseListener.onTouch (v, event)) {                     if (listener != null) {                         return listener.onTouch (v, event);                     } else {                         return true;                     }                 }                 return false;             }         });     }      @Override     protected void onDraw (Canvas c) {         super.onDraw (c);         for (Shape s : shapes) {             s.draw (c);         }         //draw the border. irrelevant         c.drawLine (3, 3, getWidth () - 3, 3, paint);         c.drawLine (3, getHeight () - 3, getWidth () - 3, getHeight () - 3, paint);         c.drawLine (3, 3, 3, getHeight () - 3, paint);         c.drawLine (getWidth () - 3, 3, getWidth () - 3, getHeight () - 3, paint);          //draw the inner border         c.drawLine (18, 18, getWidth () - 18, 18, paint);         c.drawLine (18, getHeight () - 18, getWidth () - 18, getHeight () - 18, paint);         c.drawLine (18, 18, 18, getHeight () - 18, paint);         c.drawLine (getWidth () - 18, 18, getWidth () - 18, getHeight () - 18, paint);     }      public void addShape (Shape s) {         shapes.add (s);     }      public void clear () {         shapes.clear ();     } } </code></pre>  <p>Explanation:</p>  <p><code>Shape</code> is an interface with a method:</p>  <pre><code>public void draw (Canvas c); </code></pre>  <p>Focus on the <code>setOnTouchListener</code> override. I overrode this method because I want to limit the user not to touch the borders of the <code>CanvasView</code>. As you can see, I first invoke the <code>baseListener</code> to check whether the touch is in bounds. And then I invoke the listener passed in the constructor. Is this a good practice?</p>  <p>Anyway, I set the <code>OnTouchListener</code> of a <code>CanvasView</code> in the <code>onCreate</code> method:</p>  <pre><code>canvas.setOnTouchListener (new View.OnTouchListener () {         @Override         public boolean onTouch(View v, final MotionEvent event) {             if (point1 != null &amp;&amp; point2 != null) {                 throw new IllegalStateException ("Both point1 and point2 are not null");             }              if (point1 == null) {                 point1 = new PointF (event.getX (), event.getY ());             } else { //point2 is null                 point2 = new PointF (event.getX (), event.getY ());                 canvas.addShape (new Shape () {                     @Override                     public void draw(Canvas c) {                         c.drawLine (point1.x, point1.y, point2.x, point2.y, paint);                     }                 });                 canvas.setOnTouchListener (null);             }              canvas.addShape (new Shape () {                 @Override                 public void draw(Canvas c) {                     c.drawCircle (event.getX (), event.getY (), 13, paint);                 }             });              return true;         }     }); </code></pre>  <p>Explanation:</p>  <p><code>point1</code> and <code>point2</code> are fields declared in the activity class. When the user touches the screen, one of them will be instantiated and a little circle is drawn at the point. When the user touches the second time, <code>point2</code> is instantiated and a line is drawn between the two points.</p>  <p>When I run my app and touch the screen, nothing is drawn! I think the <code>setOnClickListener</code> override is not written correctly. Can anyone tell me why?</p>