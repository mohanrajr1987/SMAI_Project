<p>I created a custom view called <code>CanvasView</code>. I can use this view to draw stuff on it outside of the <code>onDraw</code> method. Which means I can add lines, circles, whatever I want to the canvas anywhere in my code.</p>  <p>I want to draw a random line on the canvas view in the <code>onCreate</code> method. I want the starting point to be in the left half of the view and the ending point in the right half. However, when I measure the width of the view using <code>getWidth</code>, it returns 0! And then I pass this number into <code>Random.nextInt</code> with some more calculations. And resulting in a negative number. An <code>IllegalArgumentException</code> occurs as expected.</p>  <p>I just want to ask why my view's width is 0? And how can I get the correct width?</p>  <p>Here is the <code>CanvasView</code> class: (methods other than <code>addShape</code> and <code>onDraw</code> are irrelevant, I think)</p>  <pre><code>public class CanvasView extends View {     /**      * Stores all the shapes that the view will draw in its {@code onDraw()}      * method      */     private ArrayList&lt;Shape&gt; shapes;      /**      * Represents a standard {@code Paint} object that should be used when      * drawing on this {@code CanvasView}.      */     private Paint paint;      public CanvasView(Context c) {         super (c);         init ();     }      public CanvasView(Context context, AttributeSet attrs) {         super (context, attrs);         init ();     }      public CanvasView(Context context, AttributeSet attrs, int defStyleAttr) {         super (context, attrs, defStyleAttr);         init ();     }      /**      * Initializes the view, called by the constructor.      */     private void init() {         shapes = new ArrayList&lt;&gt; ();         paint = new Paint ();         paint.setStrokeWidth (5);         paint.setColor (Color.BLACK);     }      @Override     public void setOnTouchListener(final OnTouchListener listener) {         final OnTouchListener baseListener = new OnTouchListener () {             @Override             public boolean onTouch(View v, MotionEvent event) {                 if (event.getAction () == MotionEvent.ACTION_DOWN) {                      float x = event.getX ();                     float y = event.getY ();                      Log.d ("My App", "X: " + x);                     Log.d ("My App", "Y: " + y);                      //check whether the point touched is in bounds                     if (x &lt; 18 || x &gt; getWidth () - 18 || y &lt; 18 ||                             y &gt; getHeight () - 18)                         return false;                     else                         return true;                 }                 return false;             }         };          super.setOnTouchListener (new OnTouchListener () {             @Override             public boolean onTouch(View v, MotionEvent event) {                 if (baseListener.onTouch (v, event)) {                     if (listener != null) {                         return listener.onTouch (v, event);                     } else {                         return true;                     }                 }                 return false;             }         });     }      @Override     protected void onDraw(Canvas c) {         super.onDraw (c);         for (Shape s : shapes) {             s.draw (c);         }         //draw the border.         c.drawLine (3, 3, getWidth () - 3, 3, paint);         c.drawLine (3, getHeight () - 3, getWidth () - 3, getHeight () - 3, paint);         c.drawLine (3, 3, 3, getHeight () - 3, paint);         c.drawLine (getWidth () - 3, 3, getWidth () - 3, getHeight () - 3, paint);          //draw the inner border         c.drawLine (18, 18, getWidth () - 18, 18, paint);         c.drawLine (18, getHeight () - 18, getWidth () - 18, getHeight () - 18, paint);         c.drawLine (18, 18, 18, getHeight () - 18, paint);         c.drawLine (getWidth () - 18, 18, getWidth () - 18, getHeight () - 18, paint);     }      /**      * Adds a shape to the {@code CanvasView} so that it can be drawn      * in its {@code onDraw()} method.      *      * @param s      */     public void addShape(Shape s) {         shapes.add (s);         invalidate ();     }      /**      * Clears all the shapes on the {@code CanvasView}.      */     public void clear() {         shapes.clear ();     } } </code></pre>  <p>There is a <code>Shape</code> interface that I created, which only has this method:</p>  <pre><code>void draw (Canvas c); </code></pre>  <p>Here is how I draw a random line, this snippt is in a method that is called in <code>onCreate</code>:</p>  <pre><code>Random r = new Random (); final int width = canvas.getWidth () - 30; final int height = canvas.getHeight () - 30; final Paint p = paint;  final int startX = r.nextInt ((width - 30) / 2) + 30; final int startY = r.nextInt (height - 30) + 30; final int stopX = r.nextInt ((width - 30) / 2) + width / 2 + 30; final int stopY = r.nextInt (height - 30) + 30;  float adjSide = Math.abs (stopX - startX); float oppSide = Math.abs (stopY - startY); lineAngle = (float)Math.atan (oppSide / adjSide);  canvas.addShape (new Shape () {     @Override     public void draw(Canvas c) {         c.drawLine (startX, startY, stopX, stopY, p);     } }); </code></pre>