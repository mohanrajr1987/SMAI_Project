<hr>  <p>Background: I am a CSE student who is working on a side project program that will be allow the user to load different types of algorithms. One of the planned functions is to build random tests files and display a graph to user. The user can then select which searching algorithm to run and the graph will display the search path. So, maybe it would be use to test different algorithms.</p>  <hr>  <p>Current Status: I am learning how to use the Drawing namespace to draw the graphs. If the drawing methods I built are within the main forum everything works fine (so, far).  But, I want to move the drawing code to a different class. I would like to be able to use this code else where as well. </p>  <p>Here is my code for the drawing class. How can I pass a panel into this class? </p>  <p>I think you should be able to pass it as an object, but how you cast it to a panel or some other object like a picture box or something similar?</p>  <hr>  <p>Canvas is the panel on the main from I'm trying to draw on</p>  <hr>  <pre><code>namespace Test_Drawing_NodesToPoints.Helper_Classes {     class DrawShapes     {         private Bitmap GraphicImage;         private object canvas;         public DrawShapes(int canvas_width, int canvas_height, object canvas)         {         /*          *   - GraphicImage will hold a value for a new image         *   - pnlCanvas will display the GraphicImage         */         GraphicImage = new Bitmap(canvas_width, canvas_height,                                     System.Drawing.Imaging.PixelFormat.Format24bppRgb);         // Set background color of pnlCanvas         Graphics.FromImage(GraphicImage).Clear(Color.FloralWhite);         this.canvas = canvas;     }     /// &lt;summary&gt;     /// Draw a point(node) onto the pnlCanvas object     /// &lt;/summary&gt;     public void DrawPoint(Point point)     {         SolidBrush brush = new SolidBrush(Color.Black);         System.Drawing.Graphics DrawingGraphics = Graphics.FromImage(GraphicImage);         DrawingGraphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;         DrawingGraphics.FillEllipse(brush, point.X, point.Y, 24, 24);         //Draw on pnlCanvas         typeof(canvas).CreateGraphics().DrawImageUnscaled(GraphicImage, new Point(0, 0));     }      public void DrawLine(int start_x, int start_y, int end_x, int end_y)     {         System.Drawing.Graphics DrawingGraphics = Graphics.FromImage(GraphicImage);         Pen draw_pen = new Pen(Color.Black);         Point start_point = new Point(start_x, start_y);         Point end_point = new Point(end_x, end_y);         DrawingGraphics.DrawLine(draw_pen, start_point, end_point);         Canvas.CreateGraphics().DrawImageUnscaled(GraphicImage, new Point(0, 0));     }     /// &lt;summary&gt;     /// Draw text on the pnlCanvas     /// &lt;/summary&gt;     public void DrawString(string string_value, string font_style, int font_size, string font_color, int xcoord, int ycoord)     {         System.Drawing.Graphics DrawingGraphics = Graphics.FromImage(GraphicImage);         System.Drawing.Font draw_font = new System.Drawing.Font(font_style, font_size);         System.Drawing.SolidBrush brush = new System.Drawing.SolidBrush(System.Drawing.Color.White);          DrawingGraphics.DrawString(string_value, draw_font, brush, xcoord + 6, ycoord + 4);         Canvas.CreateGraphics().DrawImageUnscaled(GraphicImage, new Point(0, 0));     } } } </code></pre>  <hr>  <p>Or if anyone has better ideas I am open to ideas.</p>