<p>I created a view which can scroll horizontal(via ViewGroup). On the left side I have image(kind of a title) for row. When I scroll my view to left, my items move under row's title. Because I have transparent background on title, I see items which under this title. I want to remove part of items which under the title.  I tried to draw rects, via Paint with PorterDuff.Mode.CLEAR, inside drawChild method, before drawing title. As result I had  black rects under the title. I found some same questions, but in other context:</p>  <p><a href="https://code.google.com/p/android/issues/detail?id=54105#c1" rel="nofollow">https://code.google.com/p/android/issues/detail?id=54105#c1</a></p>  <p><a href="http://stackoverflow.com/questions/15546342/android-paint-porterduff-mode-clear-drawing-black-color-on-my-view">Android Paint PorterDuff.Mode.CLEAR drawing black color on my view</a></p>  <p>But I didn't find solution for this problem. As I understood some other bitmap has to be drew before using PorterDuff.Mode.CLEAR. In my case I can't do this. Can I erase(in my case make transparent) some rect at my view?</p>  <p><strong>EDIT:</strong></p>  <pre><code>@Override protected boolean drawChild(Canvas canvas, View child, long drawingTime) {     if(isTitle(child)){         Paint paint = new Paint();         paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));          Rect rect=new Rect(child.getLeft(),child.getTop(),child.getRight(),child.getBottom());          canvas.drawRect(rect,paint);     }     return super.drawChild(canvas, child, drawingTime); } </code></pre>  <p>Also I saw somewhere this method, but it didn't change my layout at all:</p>  <pre><code>@Override protected boolean drawChild(Canvas canvas, View child, long drawingTime) {     if(isTitle(child)){         Paint paint = new Paint();         paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));          Bitmap b = Bitmap.createBitmap(child.getWidth(), child.getHeight(), Bitmap.Config.ARGB_8888);          canvas.drawBitmap(b, child.getLeft(),child.getTop(), paint);         b.recycle();     }     return super.drawChild(canvas, child, drawingTime); } </code></pre>  <p><strong>EDIT 2</strong>. Tried saveLayer:</p>  <pre><code>        Paint paint = new Paint();         paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));          RectF rect=new RectF(child.getLeft(),child.getTop(),child.getRight(),child.getBottom());         int a = canvas.saveLayer(rect, paint, Canvas.ALL_SAVE_FLAG);         canvas.drawRect(rect,paint);         canvas.restoreToCount(a); </code></pre>  <p><strong>EDIT 3</strong></p>  <p><a href="http://i.stack.imgur.com/HSiAC.png" rel="nofollow"><img src="http://i.stack.imgur.com/HSiAC.png" alt="enter image description here"></a></p>  <p>I have view which can scroll to left, right, up and down. This view contains 2 type of headers on top and on left side and I have items which can be different sizes. When I add all this items to view I add items first after that I add headers, in this case headers will be always drawn in front of items. And when user scroll left/top, items will be go to left/top side, but header will stay on their position and this item will be under the headers. When I had background for headers, it was ok, because user didn't see items under headers, but now I don't have background and user sees items under the headers. That's why I tried to use drawChild(which calls for every item) to erase part of items which under headers. But if I use</p>  <pre><code>canvas.saveLayer(null, null, Canvas.ALL_SAVE_FLAG);                        draw_whatever_you_want(canvas);  canvas.drawRect(rect, clearPaint);  canvas.restore(); </code></pre>  <p>I have to use it for all items. My code in drawChild</p>  <pre><code>@Override protected boolean drawChild(Canvas canvas, View child, long drawingTime) {     if(!isTitle(child)){         int left   = child.getLeft();         int top    = child.getTop();         int width  = getLeftHeaderWidth();         int height = getTopHeaderHeight();         if(left &lt; width) {             RectF rect = new RectF(0, 0, width, getHeight());             canvas.saveLayer(null, null, Canvas.ALL_SAVE_FLAG);             boolean result = super.drawChild(canvas, child, drawingTime);             canvas.drawRect(rect, mClearPaint);             canvas.restore();             return result;         } else if(top &lt; height) {             RectF rect = new RectF(0, 0, getWidth(), height);             canvas.saveLayer(null, null, Canvas.ALL_SAVE_FLAG);             boolean result = super.drawChild(canvas, child, drawingTime);             canvas.drawRect(rect, mClearPaint);             canvas.restore();             return result;         } else{             return super.drawChild(canvas, child, drawingTime);         }     }else {         return super.drawChild(canvas, child, drawingTime);     } } </code></pre>