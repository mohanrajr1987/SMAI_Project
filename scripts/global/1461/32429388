<p>I need to draw something like a matrix of pixels. I created a lot of cells (500x500) and I fill them (= cellchecked). But I have problem with lag when I have more than 300 cells which are filled. This problem is inside onDraw method. Every time it have to checked cells anew. How can I optimize this fragment of code?</p>  <p><strong>onTouchEvent:</strong></p>  <pre><code>    public boolean onTouchEvent(MotionEvent event) {          int action = event.getAction();          switch (action) {             case MotionEvent.ACTION_DOWN:                  column = (short) (event.getX() / cellWidth);                 row = (short) (event.getY() / cellHeight);                 plot(column, row);                cellChecked[column][row] = true;                  pX = (short) (event.getX() / cellWidth);                 pY = (short) (event.getY() / cellHeight);                  break;             case MotionEvent.ACTION_MOVE:                  column = (short) (event.getX() / cellWidth);                 row = (short) (event.getY() / cellHeight);                 cellChecked[column][row] = true;                 pX = (short) (event.getX() / cellWidth);                 pY = (short) (event.getY() / cellHeight);                  counterxy++;                 mInterface.onActionFinished(pX, pY, counterxy);        // Wyslanie wspolrzednych do MainActivity                 break;             case MotionEvent.ACTION_UP:                  invalidate();                  return true;           }          invalidate();          return true; } </code></pre>  <p><strong>onDraw:</strong></p>  <pre><code>protected void onDraw(Canvas canvas) {         this.canvas = canvas;          canvas.drawColor(Color.WHITE);          if (numColumns == 0 || numRows == 0)             return;          for (int i = 0; i &lt; numColumns; i++)         {             for (int j = 0; j &lt; numRows; j++)             {                 if (cellChecked[i][j])                 {                     canvas.drawRect(i * cellWidth, j * cellHeight, (i + 1) * cellWidth, (j + 1) * cellHeight, blackPaint);                 }             }         }     } </code></pre>