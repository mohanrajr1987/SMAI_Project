<p>I'm learning K&amp;R's classic C programming book 2nd edition, here's an example on page 17:</p>  <pre><code>#include &lt;stdio.h&gt; /* copy input to output*/ main() {     int c;      // char c works as well!!     while ((c = getchar()) != EOF)         putchar(c); } </code></pre>  <p>it's stated in the book that <code>int c</code> is used to hold <code>EOF</code>, which turns out to be <code>-1</code> in my Windows machine with GCC and can't be represented by <code>char</code>. However, when I tried <code>char c</code> it works with no problem. Curiously I tried some more:</p>  <pre><code>int  a = EOF; char b = EOF; char e = -1; printf("%d %d %d %c %c %c \n", a, b, e, a, b, e); </code></pre>  <p>and the output is <code>-1 -1 -1</code> with no character displayed (actually according to ASCII table for <code>%c, c</code> here there should be a <code>nbs(no-break space)</code> displayed but it's invisible). </p>  <p>So how on earth can <code>char</code> be assigned with <code>EOF</code> without any compiler error?</p>  <p>Moreover, given that <code>EOF</code> is <code>-1</code>, are both <code>b</code> and <code>e</code> above assigned <code>FF</code> in memory? It should not be otherwise how can compiler distinguish <code>EOF</code> and <code>nbs</code>...?</p>  <p><strong>Update</strong>: </p>  <p>most likely <code>EOF 0xFFFFFFFF</code> is cast to <code>char 0xFF</code> but in <code>(c = getchar()) != EOF</code> the the LHS <code>0xFF</code> is int promoted to <code>0xFFFFFFFF</code> before comparison so type of <code>c</code> can be either <code>int</code> or <code>char</code>. </p>  <p>In this case <code>EOF</code> happens to be <code>0xFFFFFFFF</code> but theoretically <code>EOF</code> can be any value that requires more than 8 bits to correctly represent with left most bytes not necessarily being <code>FFFFFF</code> so then <code>char c</code> approach will fail.</p>  <p>Reference: K&amp;R The C Programming Language 2e</p>  <p><a href="http://i.stack.imgur.com/hAf76.jpg" rel="nofollow"><img src="http://i.stack.imgur.com/hAf76.jpg" alt="enter image description here"></a></p>