<p>Lets say I have these two entities, and an Account entity has an Address.</p>  <pre><code>public class Address {     public int Id { get; private set; }     public string Address1 { get; private set; }     public string Address2 { get; private set; }     public string Address3 { get; private set; }      public int PostalCodeId { get; private set; }      public virtual PostalCode PostalCode { get; private set; } }  public class PostalCode {     public int Id { get; set; }     public string ZipCode { get; set; }         } </code></pre>  <p>I'm using CQRS and have a command to changes address like so.</p>  <pre><code>public bool ChangeAddress(int addressId, string line1, string line2, string line3, string zipCode) {     //do something here.... } </code></pre>  <p>I'm struggling with how to manage this. Since we have normalized data, the address being changed may be used in say 5 places. There are 3 workflows we could apply here.</p>  <blockquote>   <ol>   <li>Simply change the address, meaning all 5 places would be using the updated address.</li>   <li>Prompt the user, letting them know this address is used in 5 places, and have them specify if they want to change all or just this one (a lot more work).</li>   <li>Change just the address for this specific account, thus meaning we have 2 different addresses persisted in the db store now, the new one, and the old one which is now used in 4 places.</li>   </ol> </blockquote>  <p>What is the preferred workflow (and yes, I know there is no correct answer, I"m wondering what is typically done)? </p>  <p>Once workflow is decided, how would this be implemented. For example, take case 1 from above. To implement the change I have to do the following:    </p>  <blockquote>   <ol>   <li>Instantiate an address object in code using the parameters to the method.    </li>   <li>Look in the DB to see if that address exists.           <blockquote>     <p>a. [If Exists] - get Id of existing, set Account.AddressId = foundId<br>     b. [If doesn't Exist] - use instantiated object and assign, Account.Address = newAddress, then .SaveChanges() and a new address record will be entered into the database. </p>   </blockquote></li>   </ol> </blockquote>  <p>..seems like a lot of work, but maybe it is what it is. </p>  <p>Furthermore, what if the user just changes the zip code on the address they are changing. I need to look to see if the "new" one exists in the DB first, then use its id. If it doesn't exist, instantiate a new object in code. The id will be 0 so EF sets EntityState.Inserted on .SaveChanges() a new record will be placed in the table. THEN... I have to look up the old one and if its not used anywhere anymore, remove it from the DB. </p>  <p>..even more work, but again, maybe it is what it is. </p>  <p>Am I missing something here, seems like things like this should be easier to do using the ORM.</p>