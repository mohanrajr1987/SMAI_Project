<p>I am currently working on an application which was build around EF4 connecting to MSSQL. Now it was decided, that we should also be able to connect to SQLite.</p>  <p>I've upgraded the application to EF6, made sure everything works as intended with MSSQL and am now trying to get the application to connect to an SQLite DB (which is a converted version of our mssql db).</p>  <p>Sadly I've kinda hit a wall here.</p>  <p>If I try to create the SQLite connection the same way we do for MSSQL</p>  <pre><code>            EntityConnectionStringBuilder entityBuilder = new EntityConnectionStringBuilder();             entityBuilder.Provider = "System.Data.SQLite.EF6";             entityBuilder.ProviderConnectionString = "data source=sqlite_master.db";             entityBuilder.Metadata = @"res://*/Model.csdl|res://*/Model.ssdl|res://*/Model.msl";                                             connection = new EntityConnection(entityBuilder.ToString());             connection.Open();              theEntities = new masterEntities(connection); // masterEntities extends System.Data.Entity.DbContext             getDataBaseVersion(); </code></pre>  <p>I get an Exception stating that "System.Data.SQLite.SQLiteConnection" cannot be converted to "System.Data.SqlClient.SqlConnection" in the getDataBaseVersion Method (which is the first one to run a query on the entities).</p>  <p>I've already tried out a few things, but always got either this or an "unintended code first exception".</p>  <p>Btw: I don't really need to create the connection strings for the SQLite version at runtime. If the problem can be fixed by using the config file, I'll gladly do it.</p>  <p>My app.config looks like this:</p>  <pre><code>  &lt;entityFramework&gt;     &lt;providers&gt;       &lt;provider invariantName="System.Data.SQLite" type="System.Data.SQLite.EF6.SQLiteProviderServices, System.Data.SQLite.EF6" /&gt;       &lt;provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" /&gt;     &lt;/providers&gt;   &lt;/entityFramework&gt;   &lt;system.data&gt;     &lt;DbProviderFactories&gt;       &lt;remove invariant="System.Data.SQLite"/&gt;       &lt;add name="SQLite Data Provider" invariant="System.Data.SQLite" description=".Net Framework Data   Provider for SQLite"       type="System.Data.SQLite.SQLiteFactory, System.Data.SQLite" /&gt;     &lt;/DbProviderFactories&gt;   &lt;/system.data&gt; </code></pre>  <p>My guess is that somewhere within the entity data model the data.sqlclient class is set to be used. But I can't create a second Entity Data Model, as then all classes and properties would be definded twice. (I also can't because the sqlite data source won't show up in the assistent for entity data model, but I hope to be able to fix that by reinstalling everything)</p>  <p>Now I wonder: Is it even possible to use two different providers within the same application for the same model?  If yes, I'd be very happy if someone could point me towards a solution to get it working.</p>  <p><strong>Update</strong> I think I've made some progress last night: after adding .EF6 to every System.Data.SQLite in the app.config I now get a different exception.</p>  <p>the app config now looks like this:</p>  <pre><code>  &lt;entityFramework&gt;     &lt;providers&gt;       &lt;provider invariantName="System.Data.SQLite.EF6" type="System.Data.SQLite.EF6.SQLiteProviderServices, System.Data.SQLite.EF6" /&gt;       &lt;provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" /&gt;     &lt;/providers&gt;   &lt;/entityFramework&gt;   &lt;system.data&gt;     &lt;DbProviderFactories&gt;       &lt;remove invariant="System.Data.SQLite.EF6" /&gt;       &lt;add name="SQLite Data Provider (Entity Framework 6)" invariant="System.Data.SQLite.EF6" description=".NET Framework Data Provider for SQLite (Entity Framework 6)" type="System.Data.SQLite.EF6.SQLiteProviderFactory, System.Data.SQLite.EF6" /&gt;     &lt;/DbProviderFactories&gt;   &lt;/system.data&gt; </code></pre>  <p>I now get an exception stating that the provider name for providerfactory "System.Data.SQLite.SQLiteFactory" cannot be found.</p>  <p>I haven't looked into it yet, gonna do so over the course of the day.</p>  <p>-edit- My project currently references (among others)</p>  <pre><code>EntityFramework.dll // from nuget EntityFramework.BulkInsert // from nuget EntityFramework.MappingAPI // from nuget EntityFramework.SqlServer // from nuget System.Data System.Data.DataSetExtensions System.Data.Linq System.Data.SQLite // from the sqlite-netFx451-setup-bundle-x86 System.Data.SQLite.EF6 // from the sqlite-netFx451-setup-bundle-x86 </code></pre>