<p>I have a abstract base object with a property Id (of type int).  Id has the "DatabaseGeneratedOption.Identity" option.  (This can be seen below).</p>  <p>There are two derived entities, Nodes and Tags.  Neither of them have an Id property, as they are assumed to inherit that from the base class.  (Also seen in code below).</p>  <p>When using the same instance of DbContext, I can add as many Nodes, then save changes.  However, as soon as I add a Tag (and only after I have added nodes), the exception is thrown.  The same occurs when I do the reverse.  I can add as many Tags as I want, then save the changes, but as soon as I add some Nodes and attempt to save changes, the exception is thrown.</p>  <p><strong>Exception:</strong></p>  <blockquote>   <p>System.InvalidOperationException: The changes to the database were   committed successfully, but an error occurred while updating the   object context. The ObjectContext might be in an inconsistent state.   Inner exception message: Saving or accepting changes failed because   more than one entity of type 'Entities.Node' have the same primary key   value. Ensure that explicitly set primary key values are unique.   Ensure that database-generated primary keys are configured correctly   in the database and in the Entity Framework model. Use the Entity   Designer for Database First/Model First configuration. Use the   'HasDatabaseGeneratedOption" fluent API or   'DatabaseGeneratedAttribute' for Code First configuration. --->   System.InvalidOperationException: Saving or accepting changes failed   because more than one entity of type 'Entities.Node' have the same   primary key value. Ensure that explicitly set primary key values are   unique. Ensure that database-generated primary keys are configured   correctly in the database and in the Entity Framework model. Use the   Entity Designer for Database First/Model First configuration. Use the   'HasDatabaseGeneratedOption" fluent API or   'DatabaseGeneratedAttribute' for Code First configuration.</p> </blockquote>  <p><strong>DbContext Definition:</strong></p>  <pre><code>// Node Entity modelBuilder.Entity&lt;Node&gt;().HasRequired(t =&gt; t.NodeTypeEntity).     WithMany(t =&gt; t.Nodes).HasForeignKey(t =&gt; t.NodeTypeId); modelBuilder.Entity&lt;Node&gt;().HasOptional(t =&gt; t.Parent).     WithMany(t =&gt; t.Children).HasForeignKey(t =&gt; t.ParentId); modelBuilder.Entity&lt;Node&gt;().HasMany(t =&gt; t.Children).     WithOptional(t =&gt; t.Parent); modelBuilder.Entity&lt;Node&gt;().HasMany(t =&gt; t.Tags).WithMany(t =&gt; t.Nodes); modelBuilder.Entity&lt;Node&gt;().Property(t =&gt; t.Location).IsOptional().HasMaxLength(100); modelBuilder.Entity&lt;Node&gt;().Ignore(t =&gt; t.SourceDefinitions); modelBuilder.Entity&lt;Node&gt;().Ignore(t =&gt; t.NodeType);    // Tags Entity  modelBuilder.Entity&lt;NWatchTag&gt;().Property(t =&gt; t.TagDesc).                 IsOptional().HasMaxLength(500);             modelBuilder.Entity&lt;NWatchTag&gt;().Property(t =&gt; t.IsSystem).IsOptional();             modelBuilder.Entity&lt;NWatchTag&gt;().HasMany(t =&gt; t.Nodes).WithMany(t =&gt; t.Tags);    // Base Entity modelBuilder.Entity&lt;BaseEntityObject&gt;().HasKey(t =&gt; t.Id); modelBuilder.Entity&lt;BaseEntityObject&gt;().Property(t =&gt; t.Id).     HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity); modelBuilder.Entity&lt;BaseEntityObject&gt;().Property(t =&gt; t.NativeId).IsRequired(); modelBuilder.Entity&lt;BaseEntityObject&gt;().Property(t =&gt; t.Name).     IsRequired().HasMaxLength(100); modelBuilder.Entity&lt;BaseEntityObject&gt;().Property(t =&gt; t.DisplayName).     IsOptional().HasMaxLength(100); modelBuilder.Entity&lt;BaseEntityObject&gt;().Property(t =&gt; t.Alias).     IsOptional().HasMaxLength(100); modelBuilder.Entity&lt;BaseEntityObject&gt;().Property(t =&gt; t.SourceId).IsRequired(); modelBuilder.Entity&lt;BaseEntityObject&gt;().Property(t =&gt; t.AccessLevel).IsRequired(); modelBuilder.Entity&lt;BaseEntityObject&gt;().Property(t =&gt; t.CreatedOn).IsRequired(); modelBuilder.Entity&lt;BaseEntityObject&gt;().Property(t =&gt; t.CreatedBy).     IsRequired().HasMaxLength(50); modelBuilder.Entity&lt;BaseEntityObject&gt;().Property(t =&gt; t.ModifiedOn).IsOptional(); modelBuilder.Entity&lt;BaseEntityObject&gt;().Property(t =&gt; t.ModifiedBy).     IsOptional().HasMaxLength(50);   public override int SaveChanges() {     var changeSet = ChangeTracker.Entries&lt;BaseEntityObject&gt;();      foreach (var entity in changeSet)     {         switch (entity.State)         {             case EntityState.Added:                 entity.Entity.CreatedOn = DateTime.UtcNow;                 if (String.IsNullOrEmpty(entity.Entity.CreatedBy))                 {                     entity.Entity.CreatedBy = "System";                 }                 break;             case EntityState.Modified:                 entity.Entity.ModifiedOn = DateTime.UtcNow;                 if (String.IsNullOrEmpty(entity.Entity.ModifiedBy))                 {                     entity.Entity.ModifiedBy = "System";                 }                 break;         }     }      return base.SaveChanges(); } </code></pre>  <p><strong>Program utilizing the DbContext:</strong></p>  <pre><code>var testTag = new Tag("TestTag"); dbContext.Tags.Add(testTag); dbContext.SaveChanges();   dbContext.Nodes.Add(new Node(1, "node1", testType, Source.CasApi)); dbContext.SaveChanges();   &lt;=== EXCEPTION THROWN HERE </code></pre>