<p>I am trying to create a composite key using two fields when using code first to existing fields in a table in a db;</p>  <pre><code>    [Key,Column("driverId", Order=0)]     [JsonProperty(PropertyName="driverid")]     public override int ID { get; set; }      [Key,Column("type", Order=1)]     [JsonProperty(PropertyName="typeid")]     public int Type { get; set; } </code></pre>  <p>Now when I try to run a new migration i get the following error;</p>  <blockquote>   <p>The number of properties in the Dependent and Principal Roles in a relationship constraint must be identical.   DriversToVehicle_Driver_Target_DriversToVehicle_Driver_Source: : The number of properties in the Dependent and Principal Roles in a relationship constraint must be identical.</p> </blockquote>  <p>The DriversToVehicle table is as follows;</p>  <pre><code>public partial class DriversToVehicle {     [Column("id"), Key]     public int ID { get; set; }      [Column("driverid")]     public int DriverID { get; set; }     [ForeignKey("DriverID")]     public Driver Driver { get; set; }      [Column("vehicleid")]     public int VehicleID { get; set; }     [ForeignKey("VehicleID")]     public Vehicle Vehicle { get; set; } } </code></pre>  <p>Extending this question, originally a single key on the ID, i.e.</p>  <pre><code>    [Column("driverId")]     [JsonProperty(PropertyName="driverid")]     public override int ID { get; set; } </code></pre>  <p>Now moving forward, how will this effect the other entities linking to it (by this i mean code first in the classes)? will ef automatically sort this out? or do I now need to have both keys in other entities when linking to this class?</p>  <p>e.g. as before I would have had</p>  <pre><code>public virtual Driver myDriver; </code></pre>  <p>Obviously now instead of linking on the ID alone it needs to be linked with the Type as well.</p>  <p>Thanks in advance.</p>  <p><strong>EDIT FOR ANSWER</strong></p>  <p>Ok, I extracted the Type out to a seperate class. The main issue is now How do i mark the foreign key as also being a composite key?</p>  <p>I have the following classes</p>  <pre><code>    public partial class DriverType      {         [Column("Id")]         [JsonProperty(PropertyName = "drivertypeid")]         public override int ID { get; set; }          [JsonProperty(PropertyName = "drivertype")]         public string Name { get; set; }     } </code></pre>  <p>Then in the Driver I have the following (reduced for brevity);</p>  <pre><code>public partial class Driver : AuditableEntity&lt;int&gt; {     [Key,Column("driverId", Order=0)]     [JsonProperty(PropertyName="driverid")]     public override int ID { get; set; }      [Key,Column("type", Order=1)]     [ForeignKey("DriverType")]     [JsonProperty(PropertyName="drivertypeid")]     public int DriverTypeId { get; set; }     public DriverType DriverType { get; set; } </code></pre>  <p>How do I then add it to the DriverToVehicle class please? So far I have</p>  <p>public partial class DriversToVehicle     {         [Column("id"), Key]         public int ID { get; set; }</p>  <pre><code>    [Column("driverid", Order=0), ForeignKey("Driver")]     public int DriverID { get; set; }     public Driver Driver { get; set; }      [Column("type", Order = 1), ForeignKey("Driver")]      public int DriverTypeId { get; set; }      [ForeignKey("DriverTypeId")]     public DriverType DriverType { get; set; }  } </code></pre>  <p>This doesnt look right to me though?</p>