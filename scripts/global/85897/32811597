<p>In my repository I'm trying to use eager loading to load related entities.  Not sure why but it seems like when I return all instances of a particular entity, related entities are returned, but when I limit the results returned the related entities are not included in the results.</p>  <p>This code in the service layer is returning all orders, including related Customer, OrderItem, and Product entities:</p>  <pre><code>public async Task&lt;IEnumerable&lt;Order&gt;&gt; GetOrdersAsync() {     return await _repository.GetAsync(null, q =&gt; q.OrderByDescending(p =&gt; p.CreatedDate), "Customer", "OrderItems", "OrderItems.Product"); } </code></pre>  <p>In the repository:</p>  <pre><code>public async Task&lt;IEnumerable&lt;Order&gt;&gt; GetAsync(Expression&lt;Func&lt;Order, bool&gt;&gt; where = null, Func&lt;IQueryable&lt;Order&gt;, IOrderedQueryable&lt;Order&gt;&gt; orderBy = null, params string[] navigationProperties) {     IQueryable&lt;Order&gt; query = _context.Set&lt;Order&gt;();      if (where != null)     {         query = query.Where(where);     }      //Apply eager loading     foreach (string navigationProperty in navigationProperties)             query = query.Include(navigationProperty);      if (orderBy != null)     {         return await orderBy(query).ToListAsync();     }     else     {         return await query.ToListAsync();     } } </code></pre>  <p>This code in the service layer is getting an order by id, but for whatever reason is not returning related Customer, OrderItem, and Product entities:</p>  <pre><code>public async Task&lt;Order&gt; GetOrderByIdAsync(long id) {   return await _repository.GetByIdAsync(id, "Customer", "OrderItems", "OrderItems.Product"); } </code></pre>  <p>In the repository:</p>  <pre><code>public async Task&lt;Order&gt; GetByIdAsync(long id, params string[] navigationProperties) {     DbSet&lt;Order&gt; dbSet = _context.Set&lt;Order&gt;();      foreach (string navigationProperty in navigationProperties)         dbSet.Include(navigationProperty);      return await dbSet.FindAsync(id); } </code></pre>  <p>The one difference I see between the two repository methods is one is casting the _context.Set() to IQueryable before including navigation properties, while the other is calling Include directly on the DbSet itself.  Should this matter? </p>