<p>I have a generic <code>Update</code> method for Entity Framework in an abstract <code>DatabaseOperations&lt;T,U&gt;</code> class:</p>  <pre><code>public virtual void Update(T updatedObject, int key) {     if (updatedObject == null)     {         return;     }      using (var databaseContext = new U())     {         databaseContext.Database.Log = Console.Write;           T foundEntity = databaseContext.Set&lt;T&gt;().Find(key);         databaseContext.Entry(foundEntity).CurrentValues.SetValues(updatedObject);         databaseContext.SaveChanges();     } } </code></pre>  <p>However, this does not handle many-to-many relationships. </p>  <p>This many-to-many update problem can be overcome by overriding the <code>Update</code> method in <code>TrussSetDatabaseOperations : DatabaseOperations&lt;TrussSet, TrussManagementDatabaseContext&gt;</code> to read as follows:</p>  <pre><code>public override void Update(TrussSet updatedTrussSet, int key) {     if (updatedTrussSet == null)     {         return;     }      using (var databaseContext = new TrussManagementDatabaseContext())     {         databaseContext.Database.Log = Console.Write;          TrussSet foundTrussSet = databaseContext.TrussSets.Find(key);         databaseContext.Entry(foundTrussSet).CurrentValues.SetValues(updatedTrussSet)                      // Update the many-to-many relationship of TrussSets to Seals         databaseContext.Entry(foundTrussSet).Collection(trussSet =&gt; trussSet.Seals).Load();         databaseContext.Entry(foundTrussSet).Collection(trussSet =&gt; trussSet.Seals).CurrentValue = updatedTrussSet.Seals;          databaseContext.SaveChanges();     } } </code></pre>  <p>However, this overriding would proliferate through all the classes that inherit from <code>DatabaseOperations</code> and have a TrussSet object. Can I somehow inject the added two lines into the generic update method, so that the update method is given the collection properties, loads them, and applies the respective updated collection to that entity? Thanks in advance.</p>