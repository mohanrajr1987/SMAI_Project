<p>Abstract question: How do I manage one file with git that is configured for each branch (including master) that I do not want to merge?</p>  <p>Specific case:</p>  <ul> <li><p>(LaTeX) I have a LaTex document with many chapters. To work on specific chapters or ideas, I create a branch and complete edits there. For each branch, I edit the main document and preamble so that only the sections on which I am working get typeset. This main document needs to be version controlled because it controls the entire document. I do not want the commented/abbreviated version, though, to get merged when I pull back in edits.</p></li> <li><p>(Python) When working on a Python script, I want to be able to run it but only call the functions that are being developed in the current branch. When I merge the feature branch back into master, I don't want the edited main file to be merged.</p></li> </ul>  <p>Git cherry-pick isn't what I want because there are lots of commits that could involved and these would include the edited main file. </p>  <p>Git checkout won't work because there would be too many files (I really just want to ignore one) What is the best way to handle this?</p>  <ul> <li><p>Do I just do a merge and then resolve the conflict in the main file every merge, always accepting the master branch file?</p></li> <li><p>Is there a way to merge all but one file</p></li> <li><p>Can I reverse cherry-pick, i.e. merge all commits but one?</p></li> </ul>  <p>Any suggestions or answers?</p>