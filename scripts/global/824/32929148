<p>I'm trying to understand how string literals in C get translated into assembly.</p>  <p>I have a very simple C program:</p>  <pre><code>int main() {   char* c = "test"; } </code></pre>  <p>Creating the object file (<code>gcc -c test.c</code>) and disassembling it via objdump (<code>gobjdump -SrxD test.o</code>) yields the following:</p>  <pre><code>0000000000000000 &lt;_main&gt;:     0:   55                      push   %rbp     1:   48 89 e5                mov    %rsp,%rbp     4:   31 c0                   xor    %eax,%eax     6:   48 8d 0d 00 00 00 00    lea    0x0(%rip),%rcx        # d &lt;_main+0xd&gt;                          9: DISP32       L_.str     d:   48 89 4d f8             mov    %rcx,-0x8(%rbp)    11:   5d                      pop    %rbp    12:   c3                      retq  0000000000000013 &lt;L_.str&gt;:    13:   74 65                   je     7a &lt;L_.str+0x67&gt;    15:   73 74                   jae    8b &lt;L_.str+0x78&gt; </code></pre>  <p>In the disassembled output it's unclear what <code>9: DISP32       L_.str</code> means. I also noticed that the corresponding machine code is missing. What exactly is this line doing?</p>