<p>I'm writing for Intel X64. RAX holds a value between 0 and 15. I want execution to jump to the corresponding labels, which are illustrated.</p>  <pre><code>  lea           r11, [rip+@@table]   shl           rax, 1     // multiply by 2 for offset   add           r11, rax   jmp           r11        // jmp into the table below then jmp again  @@table:   jmp           @@0   jmp           @@1   jmp           @@2   jmp           @@3   jmp           @@4   jmp           @@5   jmp           @@6   jmp           @@7   jmp           @@8   jmp           @@9   jmp           @@10   jmp           @@11   jmp           @@12   jmp           @@13   jmp           @@14   jmp           @@15  @@0:   mov           eax, 100   jmp @@ret  @@1:   mov           eax, -10   jmp @@ret                                          ... </code></pre>  <p>This works fine if RAX is 0. If the -10 at @@1 is changed to 10, it works there too. This means the compiler is illiminating the entire @@table: jmp sequence.</p>  <p>I've turned off optimizations, but that didn't help. Clearly I'm not doing this the correct way.</p>  <p>How do I stop the compiler from optimizing out the jmp's. Or, alternately, is there another way of doing this?</p>