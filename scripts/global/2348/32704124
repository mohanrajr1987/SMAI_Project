<p>If I have a list of <code>subprocess.Popen</code> objects, is there any way to tell what command was initially used when generating them?</p>  <p>Python 2.7</p>  <p><strong>Context:</strong> I have a list of various commands that fire off tests.  If one of the tests fails, a script cleans up the environment.  I would like to then retry those failed commands only.</p>  <p><strong>Note:</strong> Commands below are for demonstration purposes only; those called in my prod code are more complex, but that is beside the point. If I can this to work, it will work with my prod cmds.</p>  <pre><code>commands = [['nosetests', '-V'],         ['nosetests', '--collect-only'],         ['nosetests', '--with-id']         ]  def cleanup_env():     ...do things...  def run_in_parallel(cmds, retry):     retry_tasks = []      if not cmds:         return      def done(p):         return p.poll() is not None      def success(p):         return p.returncode == 0      def fail(p):         if not retry:             retry_tasks.append(p)             print("{} failed, will need to retry.".format(retry_tasks))         else:             pass # if this is already a retry, we don't care, not going to retry again      MAX_PARALLEL = 4     processes = []      while True:         while cmds and len(processes) &lt; MAX_PARALLEL:             task = cmds.pop() # pop last cmd off the stack             processes.append(subprocess.Popen(task))          for p in processes:             if done(p):                 if success(p):                     processes.remove(p)                 else:                     fail(p)                     processes.remove(p)          if not processes and not cmds:             break          else:             time.sleep(0.05)      return retry_tasks </code></pre>  <p>Calling the above:</p>  <pre><code>retry_list=run_in_parallel(commands, False)  if retry_list:     cleanup_env()     run_in_parallel(retry_list, True) </code></pre>  <p>The first part works, but calling the retry doesn't because I'm passing a list of <code>subprocess.Popen</code> objects, rather than their initial input.</p>  <p>Hence the question, how do I get at the input of a <code>subprocess.Popoen</code> object?</p>