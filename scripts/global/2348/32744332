<p>I've created a script that resembles a traditional text adventure. At the end of each path an image will be displayed and the original script reopened. I've used Tkinter and subprocess module to bind a spesific keypress to close the image and reopen the whole script.</p>  <p>program.py:</p>  <pre><code>from firstScreen import *  class Engine(object):     def play(self, startSit):         sit = startSit          while True:             print "\n--------"             sit = sit.enter()  e = Engine() e.play(firstScreen()) </code></pre>  <p>end_of_random_path.py:</p>  <pre><code>import os, sys import Tkinter from PIL import Image, ImageTk import subprocess  def close_window (event):     subprocess.Popen("program.py 1", shell=True)    # if I use subprocess.call instead of subprocess.Popen, the image opened by Tkinter freezes and the program collapses.       event.widget.quit()  class finalScreenOfPath(object):      def enter(self):             root = Tkinter.Tk()         root.bind("&lt;0&gt;", close_window)         root.geometry('+%d+%d' % (100,100))          imagefile = "image.png"          image1 = Image.open(imagefile)         root.geometry('%dx%d' % (image1.size[0],image1.size[1]))         tkpi = ImageTk.PhotoImage(image1)         label_image = Tkinter.Label(root, image=tkpi)         label_image.place(x=0,y=0,width=image1.size[0],height=image1.size[1])         root.mainloop() </code></pre>  <p>The script works itself and I'm able to use my program, but I get an <strong>"AttributeError: 'NoneType' object has no attribute 'enter'"</strong> whenever the script reopens program.py. </p>  <p>If I use subprocess.call instead of subprocess.Popen in end_of_random_path.py file, the image opened by Tkinter freezes and the terminal window collapses (this method works perfectly without an image opening).</p>