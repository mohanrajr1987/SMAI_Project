<p>EDIT: adding that this problem seems to be strictly related to making these calls from within an RPC process to the title.  I thought I was going to be required to use RPC to do what I was doing but was mistaken.<br> After pulling my code out of that process and running from the server it works as expected.  I have decided to leave the question rather than delete it in case anyone else might find the comments of use.</p>  <p>Just as the title suggests, CalledProcessError is not triggering my except block when a subprocess check_call fails.</p>  <p>My code is fairly straight forward, I have a UNC path that I want to mount to a local directory.  if it does not exist, we create it and mount it.  we then push export_file to a subdirectory on the mounted share (that we create if needed).  If any of these operations fail we want to log it and fail out.  Finally, we unmount the share.</p>  <p>I attempted making one call using '&amp;&amp;' separators but this only seemed to convolute things when things went wrong.  After separating all the operations into their own calls using subprocess.check_call() I am getting the results I want for known good situations, the problem is that I want to re-use this code as a test for mountability by setting export_file=None</p>  <p>The code is as follows:</p>  <pre><code>def export_backup(local_dir, remote_dir, creds, export_file=None):     """     process for testing UNC path mountability and for exporting file to UNC path     :param local_dir: path for local dir to be used as mount point     :param remote_dir: UNC for remote path to mount to local dir     :param creds: dictionary with keys: 'username', 'domain', and 'password' (set value to None if non-existent)     :param export_file: path to file for exporting, set to None to simply test mountability of remote_dir     """     try:         # in case we failed to unmount for whatever reason         if os.path.ismount(local_dir):             # unmount existing mount             subprocess.check_call(['sudo', 'umount', '-l', local_dir])         elif not os.path.isdir(local_dir):             # create new directory             subprocess.check_call(['sudo', 'mkdir', local_dir])         # mount path         cmd = ['sudo', 'mount', '-t', 'cifs']         # build creds         cred_string = ','.join(['{0}={1}'.format(key, value) for (key, value) in creds.items() if value])         if cred_string:             cmd.extend(['-o', cred_string])         cmd.extend([remote_dir, local_dir])         subprocess.check_call(cmd)         if export_file:             export_dir = os.path.join(local_dir, '{0}-appl-export'.format(gethostname()))             new_file_name = os.path.join(export_dir, os.path.basename(export_file))             if not os.path.isdir(export_dir):                 # create subdirectory                 subprocess.check_call(['sudo', 'mkdir', export_dir])             # export file             subprocess.check_call(['sudo', 'cp', export_file, new_file_name])     except Exception as ex:         logger.exception(u'appliance.rpc.export_backup.error', cause=ex)         raise ex     finally:         # unmount         subprocess.check_call(['sudo', 'umount', '-l', local_dir]) </code></pre>  <p>I can make my own checks for if operations have actually succeeded or failed by making calls like:</p>  <pre><code>if not os.path.ismount(local_dir):     raise Exception('Failed to mount') </code></pre>  <p>After running my subprocess commands... and this works, but this seems broken and backwards.</p>  <p>From everything that I have read (and even tested in python shells), check_call should raise a CalledProcessError if something exits with a non-zero return code, but for some reason I cannot understand they are not triggering for me here.</p>  <p>an example of a 'bad call' I have tried would be</p>  <pre><code>subprocess.check_call(['sudo', 'mount', '-t', 'cifs', '-o', 'username=somethingbad,password=somethingwrong,domain=thisisrightforsomereason', '//destination/doesnt/exist', '/mnt/export']) </code></pre>  <p>from the shell this tells me: 'could not resolve address for destination: Unknown error' and then feeds me the CalledProcessError traceback.  But when I feed those same creds into my function it appears to have succeeded.</p>  <p>What am I doing wrong?</p>