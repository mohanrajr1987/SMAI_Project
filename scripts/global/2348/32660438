<p>I have an executable file that I'd like to run from Python. I define a path variable pointing at it:</p>  <pre><code>&gt;&gt;&gt; path = '/root/Cognos/Cognos/linuxi38664h/issetupnx' </code></pre>  <p>I verify that I am in fact pointing at a file and not a directory:</p>  <pre><code>&gt;&gt;&gt; from os.path import isdir, isfile &gt;&gt;&gt; isdir(path) False &gt;&gt;&gt; isfile(path) True </code></pre>  <p>But as soon as I try to run the executable file via <code>subprocess.call</code>...</p>  <pre><code>&gt;&gt;&gt; from subprocess import call &gt;&gt;&gt; call([path]) Traceback (most recent call last):   File "&lt;stdin&gt;", line 1, in &lt;module&gt;   File "/usr/lib64/python2.7/subprocess.py", line 524, in call     return Popen(*popenargs, **kwargs).wait()   File "/usr/lib64/python2.7/subprocess.py", line 711, in __init__     errread, errwrite)   File "/usr/lib64/python2.7/subprocess.py", line 1308, in _execute_child     raise child_exception OSError: [Errno 2] No such file or directory </code></pre>  <p>It tells me the file doesn't exist now.</p>  <p>The only possibility I can think of is that maybe the executable itself is being found and run fine, but the executable is failing saying that something it needs (what?) isn't found. I'm not sure how I would test this theory, though... or even if it's possible.</p>  <p>Another possibility might be some kind of permissions issue? Although I can't think of why I would have proper permissions to see the file but then I suddenly wouldn't be able to see it the moment I try running it.</p>