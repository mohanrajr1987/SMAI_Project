<p>I have this code from <a href="https://pymotw.com/2/subprocess/" rel="nofollow">https://pymotw.com/2/subprocess/</a></p>  <p>I'm not sure how to interpret the code, in the <code>check_output</code> with <code>1&gt;&amp;2</code> output is redirected to stderr, but in the parameter, the stderr is back to stdout <code>stderr=subprocess.STDOUT</code>.</p>  <pre><code>output = subprocess.check_output(     'echo to stdout; echo to stderr 1&gt;&amp;2; exit 1',     shell=True,       stderr=subprocess.STDOUT,      ) print "*****************" print 'Have %d bytes in output' % len(output) print output </code></pre>  <p>Running the code, the print commands are not executed meaning nothing is captured. </p>  <p>What does this code trying to accomplish? </p>  <h2>EDIT</h2>  <p>From the answer and comment, I could run this code to get </p>  <pre><code>try:     output = subprocess.check_output(         'echo to stdout; echo to stderr 1&gt;&amp;2; exit 1',         shell=True,  # No such file or directory error without, maybe 1&gt;&amp;2 requires shell=True         stderr=subprocess.STDOUT,           )  except subprocess.CalledProcessError as e:      print "*****************"     print 'Have %d bytes in output' % len(e.output)     print e.output </code></pre>  <p>this output:</p>  <pre><code>***************** Have 20 bytes in output to stdout to stderr </code></pre>  <p>However, when I commented out the <code>stderr=subprocess.STDOUT</code> line, I got instead</p>  <pre><code>to stderr ***************** Have 10 bytes in output to stdout </code></pre>  <h3>EDIT2</h3>  <p>I tested more with stderr library (<a href="https://github.com/sickill/stderred" rel="nofollow">https://github.com/sickill/stderred</a>) that helps a shell to show characters from stderr in red color. </p>  <p>When I execute this code (comment out the redirection), I can see the <code>to stderr</code> in BLACK color which implies it uses stdout. </p>  <pre><code>output = subprocess.check_output(         'echo to stdout; echo to stderr 1&gt;&amp;2; exit 1',         shell=True,           #stderr=subprocess.STDOUT,          ) </code></pre>  <p>From this, I guess (correct me if I'm wrong) that Python's <code>check_output</code> method prints out the data into the stderr redirect to stdout so that it prints out the error message into stderr.</p>  <p><a href="http://i.stack.imgur.com/c6pdk.png" rel="nofollow"><img src="http://i.stack.imgur.com/c6pdk.png" alt="enter image description here"></a></p>