<p>I've connected to my database in laravel - which was previously working on a mac - and everything works fine after I migrate. However, none of the data in the database seems to be showing. </p>  <p>Here's the migration file: </p>  <pre class="lang-php prettyprint-override"><code> &lt;?php  use Illuminate\Database\Schema\Blueprint; use Illuminate\Database\Migrations\Migration;  class CreatePagesTable extends Migration {      /**      * Run the migrations.      *      * @return void      */     public function up()     {         Schema::create('pages', function (Blueprint $table) {             $table-&gt;engine = 'InnoDB';              $table-&gt;increments('id');              $table-&gt;string('title');             $table-&gt;string('slug')-&gt;index();             $table-&gt;string('uri')-&gt;index();              $table-&gt;integer('parent_id')-&gt;default(0)-&gt;index();             $table-&gt;string('template')-&gt;default('default');              $table-&gt;softDeletes();             $table-&gt;timestamps();         });     }      /**      * Reverse the migrations.      *      * @return void      */     public function down()     {         Schema::drop('pages');     } } </code></pre>    <p>and the database.php file  </p>  <pre><code>&lt;?php  return [      /*     |--------------------------------------------------------------------------     | PDO Fetch Style     |--------------------------------------------------------------------------     |     | By default, database results will be returned as instances of the PHP     | stdClass object; however, you may desire to retrieve records in an     | array format for simplicity. Here you can tweak the fetch style.     |     */      'fetch' =&gt; PDO::FETCH_CLASS,      /*     |--------------------------------------------------------------------------     | Default Database Connection Name     |--------------------------------------------------------------------------     |     | Here you may specify which of the database connections below you wish     | to use as your default connection for all database work. Of course     | you may use many connections at once using the Database library.     |     */      'default' =&gt; env('DB_CONNECTION', 'mysql'),      /*     |--------------------------------------------------------------------------     | Database Connections     |--------------------------------------------------------------------------     |     | Here are each of the database connections setup for your application.     | Of course, examples of configuring each database platform that is     | supported by Laravel is shown below to make development simple.     |     |     | All database work in Laravel is done through the PHP PDO facilities     | so make sure you have the driver for your particular database of     | choice installed on your machine before you begin development.     |     */      'connections' =&gt; [          'sqlite' =&gt; [             'driver'   =&gt; 'sqlite',             'database' =&gt; storage_path('database.sqlite'),             'prefix'   =&gt; '',         ],          'mysql' =&gt; array(             'read' =&gt; array(                 'host' =&gt; '127.0.0.1',             ),             'write' =&gt; array(                 'host' =&gt; '127.0.0.1'             ),              'driver'      =&gt; 'mysql',             'host'        =&gt; env('DB_HOST', 'localhost'),             'database'    =&gt; env('DB_DATABASE', '5thwall'),             'username'    =&gt; env('DB_USERNAME', 'root'),             'password'    =&gt; env('DB_PASSWORD', 'root'),             'port'        =&gt; env('DB_PORT', 3306),             'charset'     =&gt; 'utf8',             'collation'   =&gt; 'utf8_unicode_ci',             'unix_socket' =&gt; env('DB_SOCKET', null),             'prefix'      =&gt; '',             'strict'      =&gt; false,         ),          'pgsql' =&gt; [             'driver'   =&gt; 'pgsql',             'host'     =&gt; env('DB_HOST', 'localhost'),             'database' =&gt; env('DB_DATABASE', 'forge'),             'username' =&gt; env('DB_USERNAME', 'forge'),             'password' =&gt; env('DB_PASSWORD', ''),             'charset'  =&gt; 'utf8',             'prefix'   =&gt; '',             'schema'   =&gt; 'public',         ],          'sqlsrv' =&gt; [             'driver'   =&gt; 'sqlsrv',             'host'     =&gt; env('DB_HOST', 'localhost'),             'database' =&gt; env('DB_DATABASE', 'forge'),             'username' =&gt; env('DB_USERNAME', 'forge'),             'password' =&gt; env('DB_PASSWORD', ''),             'prefix'   =&gt; '',         ],      ],      /*     |--------------------------------------------------------------------------     | Migration Repository Table     |--------------------------------------------------------------------------     |     | This table keeps track of all the migrations that have already run for     | your application. Using this information, we can determine which of     | the migrations on disk haven't actually been run in the database.     |     */      'migrations' =&gt; 'migrations',      /*     |--------------------------------------------------------------------------     | Redis Databases     |--------------------------------------------------------------------------     |     | Redis is an open source, fast, and advanced key-value store that also     | provides a richer set of commands than a typical key-value systems     | such as APC or Memcached. Laravel makes it easy to dig right in.     |     */      'redis' =&gt; [          'cluster' =&gt; false,          'default' =&gt; [             'host'     =&gt; '127.0.0.1',             'port'     =&gt; 3306,             'database' =&gt; 0,         ],      ],  ]; </code></pre>    <p>My .env file is fine, presumably, because it's connecting to the database but not loading any content. If there's anything else I can provide, let me know. Thanks. </p>