<p>I'm trying to better understand what will happen if multiple threads try to execute different sql queries, using the same JDBC connection, concurrently.</p>  <ul> <li><p>Will the outcome be functionally correct?</p></li> <li><p>What are the performance implications? </p></li> <li><p>Will thread <code>A</code> have to wait for thread <code>B</code> to be completely done with its query? </p></li> <li><p>Or will thread <code>A</code> be able to send its query immediately after thread <code>B</code> has sent its query, after which the database will execute both queries in parallel?</p></li> </ul>  <hr>  <p>I see that the Apache DBCP uses synchronization protocols to ensure that connections obtained from the pool are removed from the pool, and made unavailable, until they are closed. This seems more inconvenient than it needs to be. I'm thinking of building my own "pool" simply be creating a static list of open connections, and distributing them in a round-robin manner. I don't mind the occasional performance degradation, and the convenience of not having to close the connection after every use seems very appealing. Is there any downside to me doing this?</p>