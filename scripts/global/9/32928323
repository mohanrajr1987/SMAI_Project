<p>Can anyone point me to a link that would help me translate Autofac code to Structuremap which is the injection tool I am looking at using</p>  <p>The code uses the factory mehod of creating classes and a bootstrapper</p>  <pre><code>builder.RegisterType&lt;PreviewModeFilter&gt;().AsResultFilterFor&lt;PublicControllerBase&gt;(); </code></pre>  <p>or</p>  <pre><code>var pluginDescriptor = _pluginFinder.GetPluginDescriptorByAssembly(type.Assembly);             var groupName = ProviderTypeToKnownGroupName(type);             var systemName = GetSystemName(type, pluginDescriptor);             var friendlyName = GetFriendlyName(type, pluginDescriptor);             var displayOrder = GetDisplayOrder(type, pluginDescriptor);             var dependentWidgets = GetDependentWidgets(type);             var resPattern = (pluginDescriptor != null ? "Plugins" : "Providers") + ".{1}.{0}"; // e.g. Plugins.FriendlyName.MySystemName             var settingPattern = (pluginDescriptor != null ? "Plugins" : "Providers") + ".{0}.{1}"; // e.g. Plugins.MySystemName.DisplayOrder             var isConfigurable = typeof(IConfigurable).IsAssignableFrom(type);             var isEditable = typeof(IUserEditable).IsAssignableFrom(type);              var registration = builder.RegisterType(type).Named&lt;IProvider&gt;(systemName).InstancePerRequest().PropertiesAutowired(PropertyWiringOptions.None);             registration.WithMetadata&lt;ProviderMetadata&gt;(m =&gt;             {                 m.For(em =&gt; em.PluginDescriptor, pluginDescriptor);                 m.For(em =&gt; em.GroupName, groupName);                 m.For(em =&gt; em.SystemName, systemName);                 m.For(em =&gt; em.ResourceKeyPattern, resPattern);                 m.For(em =&gt; em.SettingKeyPattern, settingPattern);                 m.For(em =&gt; em.FriendlyName, friendlyName.Item1);                 m.For(em =&gt; em.Description, friendlyName.Item2);                 m.For(em =&gt; em.DisplayOrder, displayOrder);                 m.For(em =&gt; em.DependentWidgets, dependentWidgets);                 m.For(em =&gt; em.IsConfigurable, isConfigurable);                 m.For(em =&gt; em.IsEditable, isEditable);             }); </code></pre>