<p>I have written a program to synchronise the My Pictures folder with Flickr. It has a thread which is supposed to start at 8pm (when my Internet bandwidth is free), upload stuff until 6 am (or the job is complete), and then wait until 8pm the next day before doing it again.  In order to allow the UI thread to interrupt the waits, I am using WaitOne (if the UI thread signals, the upload thread exits).  This works fine for the initial wait, but waiting until the next day never returns from the wait!  I wonder if the fact that the computer is going to sleep in the interim is somehow messing it up?  The code is on <a href="https://github.com/nikkilocke/MyPicturesSync" rel="nofollow">Github</a> (Uploader.cs)...</p>  <pre><code>    /// &lt;summary&gt;     /// Wait until start time (if specified)     /// &lt;/summary&gt;     /// &lt;param name="next"&gt;Wait until start time tomorrow&lt;/param&gt;     /// &lt;returns&gt;true if stop signal was received&lt;/returns&gt;     bool Wait(bool next) {         DateTime start = DateTime.Now;         // Have they specified to start and stop in the same day, and we have already passed stop time?         if (Settings.Default.Start &lt; Settings.Default.Stop &amp;&amp; start.Hour &gt;= Settings.Default.Stop)             next = true;         if (next || start.Hour &lt; Settings.Default.Start) {             string day = "";             start = new DateTime(start.Year, start.Month, start.Day, Settings.Default.Start, 0, 0);             if (next &amp;&amp; start.Hour &gt;= Settings.Default.Start) {                 start = start.AddDays(1);                 day = " on " + start.ToString("dddd");             }             Form.Log("Waiting until {0:HH:mm}{1}", start, day);             if (signal.WaitOne(start - DateTime.Now)) {                 Form.Status("Interrupted");                 return true;             }         }         // Have they specified a stop time?         stop = Settings.Default.Stop &gt;= 24 ? DateTime.MaxValue : new DateTime(start.Year, start.Month, start.Day, Settings.Default.Stop, 0, 0);         if (stop &lt; start)             stop = stop.AddDays(1);         return false;     }  } </code></pre>