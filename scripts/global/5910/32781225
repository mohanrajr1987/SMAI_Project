<p>I'm spawning a process using ProcessBuilder in Java and trying to read its output:</p>  <pre><code>public static void main(String... args) throws IOException, InterruptedException {      ProcessBuilder builder = new ProcessBuilder("test.exe");     Process process = builder.start();      InputStream stdout = process.getInputStream();     final BufferedReader reader = new BufferedReader(new InputStreamReader(stdout));     final List&lt;String&gt; queue = new ArrayList&lt;String&gt;();      Thread ioThread = new Thread() {         public void run() {             System.out.println("STARTED THREAD");             String line = null;             try {                 while ((line = reader.readLine()) != null) {                     System.out.println("ADD: " + line);                     queue.add(line);                     Thread.yield();                 }             } catch (IOException exception) {                 System.err.println("Fatal Error: " + exception.getMessage());             }         }     };     ioThread.start();      Thread.sleep(10000);     System.out.println("GOT: " + queue); } </code></pre>  <p>This works perfectly fine on my Windows machine, and also on a local Linux installation.</p>  <p>On my Linux VM's (DigitalOcean and Linode), it does not work, however, meaning that the process gets started, but the running thread is unable to add a single line to the queue (after waiting ten seconds in the main program, queue is empty whereas in Windows, the queue contains the read lines).</p>  <p>Thinks I've tried so far:</p>  <ul> <li>redirecting the error stream to the output stream (even although I'm sure the test program is outputting lines on STDOUT</li> <li>using stdbuf with -oL and -eL... doesn't work</li> <li>trying to read byte by byte manually instead of using BufferedReader, same issue</li> <li>converting thread to a FutureTask</li> <li>switching between OpenJDK and Oracle VM</li> </ul>  <p>It definitely works in Windows and on some Linux machines.</p>