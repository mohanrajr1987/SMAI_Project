<p>I am confused about the ending of a process in UNIX. When is a process in UNIX terminated? Should we necessarily write <code>exit(0)</code>  to terminate a process? In my view- no, but I cannot figure out the difference between those two pieces of code.</p>  <pre class="lang-c prettyprint-override"><code>pid_t pid=fork(); if(pid &lt; 0) {              perror("Fork error\n");              return 1;   } else if (pid==0) /* child */ {              //Do some operations here } else {             wait(NULL);             //Do some operations } </code></pre>  <p>and</p>  <pre class="lang-c prettyprint-override"><code>pid_t pid=fork(); if(pid &lt; 0) {                  perror("Fork error\n");                  return 1;    }  else if (pid==0) /* child */  {                  //Do some operations here                  exit(0);  }  else  {                 wait(NULL);                 //Do some operations here  } </code></pre>  <p>Probably we need the <code>exit(0)</code> only for the <code>wait()</code> function. In this case, what would happen if we make <code>wait()</code> without having done <code>exit(0)</code>  before? </p>