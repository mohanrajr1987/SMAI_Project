<p>I wrote the following shell script: </p>  <pre><code>#!/usr/bin/env bash  set -e  trap 'kill $(jobs -p)' EXIT  chromedriver --url-base=/wd/hub --port=$WEBDRIVER_PORT &amp;  runenv=  case $1 in   -c | --client-only ) runenv="DISABLE_SERVER_RENDERING=true"                        ;;   -s | --server-only ) runenv="DISABLE_CLIENT_APP=true"                        ;; esac  find src | entr -r sh -c "npm run build &amp;&amp; $runenv npm start" </code></pre>  <p>This shell script usually runs until either: </p>  <ol> <li><p>I kill it with control-C, or</p></li> <li><p><a href="http://entrproject.org/" rel="nofollow"><code>entr</code></a> can no longer locate a file that was listed by <code>find</code>, and exits with a status value of 1</p></li> </ol>  <p>In case (1), both <code>chromedriver</code> and <code>npm start</code> are killed when the script exits; I am able to verify that because they’ve both released the ports that they bind to when running. In case (2), however, only <code>chromedriver</code> is killed: <code>npm start</code> is still running, and I have to kill it manually to get it to release its port. </p>  <p>I’m pretty sure my confusion is due to not understanding the process model well enough. I would really appreciate it if someone could tell me what the difference is between the two scenarios using the right vocabulary, so that I can find the resources to educate myself. </p>