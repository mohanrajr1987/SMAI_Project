<p>I'm trying to understand how Process class from the multiprocessing package works. For this, I wrote a little example, where an object with certain value is created and then that value is changed in subprocess:</p>  <pre class="lang-py prettyprint-override"><code>from multiprocessing import Process  class Foo:     def __init__(self):         self.value = "foo"      def run(self):         p = Process(target=self.change_value)         p.start()         p.join()      def change_value(self):         self.value = "bar"         print "inside: " + self.value   if __name__ == '__main__':     foo = Foo()     foo.run()     print "outside: " + foo.value </code></pre>  <p>But this code gives me the following result:</p>  <pre><code>&gt;&gt; inside: bar &gt;&gt; outside: foo </code></pre>  <p>Can someone explain me why it prints old property value ("foo") from the outside of a process despite the fact that second print is executed later? And how to get actual value of that property ("bar") from the outside?</p>