<p>I am new to material design aspect of android. So, please bear with me. I tried implementing the FAB for my home activity, and then implemented the snackbar. Naturally, it came above my FAB. I researched on CoordinatorLayout and what's bothering me is which one is a better practice for using a CoordinatorLayout?</p>  <p>For example, here's the xml of my activity.</p>  <pre><code>&lt;RelativeLayout     android:layout_width="match_parent"     android:layout_height="match_parent"     tools:context=".MainActivity"&gt;          &lt;android.support.v7.widget.Toolbar             android:id="@+id/toolbar"             android:layout_width="match_parent"             android:layout_height="wrap_content"             android:background="@color/primary_color"&gt;&lt;/android.support.v7.widget.Toolbar&gt;           &lt;android.support.design.widget.FloatingActionButton             android:id="@+id/searchfab"             android:layout_width="wrap_content"             android:layout_height="wrap_content"             android:layout_alignParentRight="true"             android:layout_alignParentBottom="true"             android:layout_marginBottom="20dp"             android:layout_marginRight="20dp"             android:src="@drawable/ic_add_black_24dp"             app:fabSize="normal"&gt;          &lt;/android.support.design.widget.FloatingActionButton&gt;  &lt;/RelativeLayout&gt; </code></pre>  <p>I watched other people adding CoordinatorLayout like this.</p>  <pre><code>&lt;RelativeLayout     android:layout_width="match_parent"     android:layout_height="match_parent"     tools:context=".MainActivity"&gt;       &lt;android.support.v7.widget.Toolbar         android:id="@+id/toolbar"         android:layout_width="match_parent"         android:layout_height="wrap_content"         android:background="@color/primary_color"&gt;&lt;/android.support.v7.widget.Toolbar&gt;      &lt;android.support.design.widget.CoordinatorLayout         android:layout_width="match_parent"         android:layout_height="match_parent"&gt;          &lt;android.support.design.widget.FloatingActionButton             android:id="@+id/searchfab"             android:layout_width="wrap_content"             android:layout_height="wrap_content"             android:layout_alignParentBottom="true"             android:layout_alignParentRight="true"             android:layout_marginBottom="20dp"             android:layout_marginRight="20dp"             android:src="@drawable/ic_add_black_24dp"             app:fabSize="normal"&gt;          &lt;/android.support.design.widget.FloatingActionButton&gt;      &lt;/android.support.design.widget.CoordinatorLayout&gt; &lt;/RelativeLayout&gt; </code></pre>  <p>My question is, can we use <code>&lt;android.support.design.widget.CoordinatorLayout&gt;</code> as the root of all elements. Completely bypassing or removing the <code>&lt;RelativeLayout&gt;</code>. </p>  <p>So the xml becomes like this.</p>  <pre><code>    &lt;android.support.design.widget.CoordinatorLayout         android:layout_width="match_parent"         android:layout_height="match_parent"         tools:context=".MainActivity"&gt;          &lt;android.support.v7.widget.Toolbar         android:id="@+id/toolbar"         android:layout_width="match_parent"         android:layout_height="wrap_content"         android:background="@color/primary_color"&gt;          &lt;android.support.design.widget.FloatingActionButton             android:id="@+id/searchfab"             android:layout_width="wrap_content"             android:layout_height="wrap_content"             android:layout_alignParentBottom="true"             android:layout_alignParentRight="true"             android:layout_marginBottom="20dp"             android:layout_marginRight="20dp"             android:src="@drawable/ic_add_black_24dp"             app:fabSize="normal"&gt;          &lt;/android.support.design.widget.FloatingActionButton&gt;      &lt;/android.support.design.widget.CoordinatorLayout&gt; </code></pre>  <p>and the <code>&lt;RelativeLayout&gt;</code> is completely removed. So instead of using <code>&lt;/android.support.design.widget.CoordinatorLayout&gt;</code> just for FAB, we use it for the whole activity. As CoordinatorLayout focuses on making child views work coordinated, isn't it better if all elements work in coordination with one another? What are the advantages and disadvantages of doing it either ways?</p>