<p>I'm displaying a set of items in a <code>RecyclerView</code>. The data are downloaded from the server, and one group of items are downloaded for each time. However, sometimes only one group of data cannot fill the screen, so I want to make the <code>RecyclerView</code> capable of detecting this problem, and start loading next group of data until the screen is filled. </p>  <p>For example, if data of page 1 is not enough, load data of page 2. If still not, load data of page 3, and so on.</p>  <p>The detection part is not difficult since I can get the parameters below:</p>  <pre><code>    int visibleItemCount = mLayoutManager.getChildCount();     int totalItemCount = mLayoutManager.getItemCount();     int firstVisibleItem = mLayoutManager.findFirstVisibleItemPosition(); </code></pre>  <p>But the problem comes with <code>notifyDataSetChanged()</code>. For example, below is my code of setting data:</p>  <pre><code>public void setData(List data){     updataData(data);     mAdapter.notifyDataSetChanged();     if(ifScreenNotFilled()){        loadNextGroupData(); // it calls 'setData()' recursively     } } </code></pre>  <p>When the <code>loadNextGroupData()</code> is called, the <code>setData</code> is called recursively. And it turns out that the size of data list keeps on expanding while the <code>visibleItemCount</code> is always zero, and nothing appears on the screen.</p>  <p>If I delete the recursion part of code, the 1st group of data is loaded in to screen. I become very curious of the mechanism of <code>notifyDataSetChanged()</code>.</p>  <p>So is there a solution to get the <code>RecyclerView</code> updated automatically when it does not fill the screen?</p>