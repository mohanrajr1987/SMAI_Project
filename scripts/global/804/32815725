<p>I am facing memory leak issue with the below module in my C++ application when calling java methods using JNI.</p>  <pre><code>while (true) {      jarray strArrayDR = (jarray)jEnv-&gt;CallObjectMethod(JobjHQ,mIDParse,jStrMsgDRQ);         jsize length = jEnv-&gt;GetArrayLength(strArrayDR);         jEnv-&gt;ReleaseStringUTFChars(jStrMsgDRQ,NULL);         jEnv_DRQ-&gt;DeleteLocalRef(jStrMsgDRQ);          jsize index;         for(index=0; index &lt; length; ++index )         {             jstring element = (jstring)jEnv-&gt;GetObjectArrayElement((jobjectArray)strArrayDR,index );             char  const* sznativeString = jEnv-&gt;GetStringUTFChars(element,NULL);             string szMsg(sznativeString);             jEnv-&gt;ReleaseStringUTFChars(element,sznativeString);             jEnv-&gt;DeleteLocalRef(element);             vecDR.push_back(szMsg);         }         jEnv-&gt;ReleaseStringUTFChars(jStrMsgDRQ,NULL);         jEnv-&gt;DeleteLocalRef(jStrMsgDRQ);         jEnv-&gt;DeleteLocalRef(strArrayDR); }  </code></pre>  <p>Corresponding java method is shown below</p>  <pre><code>public String[] parseJson(String strJson) {     ArrayList list = new ArrayList();     try {         if (strJson != null) {             JSONArray objList = new JSONArray(strJson);             for (int i = 0; i &lt; objList.length(); i++) {                 JSONObject objMsg = (JSONObject) objList.get(i);                 if (objMsg != null) {                     String strDR = parseDRJsonString(objMsg);                     if (strDR != null) {                         list.add(strDR);                     }else{                     System.out.println("Json Parsing Failed::::" + objMsg.toString());                     }                 } else {                     System.out.println("Json Obj is null::::");                 }             }         }         return (list.size() &gt; 0) ? ((String[]) list.toArray(new String[1])) : null;     } catch (Exception e) {         e.printStackTrace();     }     return null; } </code></pre>  <p>Please help. Also the elements in <code>vecDR</code> is being erased and cleared in a seperate while loop. </p>