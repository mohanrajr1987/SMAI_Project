<p>I'd like to start by saying please don't ask me to use the javah tool, I've had more luck writing the few jni function prototypes than getting that tool to work properly.</p>  <p>I know that I am loading my jni libraries properly because they work when I leave the class structure the same.</p>  <p>I have some package name: package com.bb.me;</p>  <pre><code>public class test {    test2 iTest = null;    public parent test()   {     iTest = new test();     return iTest;   }    //putting my native methods here work just fine   //public native void init();   //etc  } </code></pre>  <p>The c jni function prototype for that above function looks like this:</p>  <pre><code>JNIEXPORT void JNICALL Java_com_bb_me_test_init(JNIEnv* e, jobject i) {} </code></pre>  <p>if I break that above function signature by renaming it <code>inita</code> and call the function I get an error like this:</p>  <p><strong>No implementation found for native Lcom/bb/me/test;.init:()V</strong></p>  <p>if on the other hand I move the native function to the inner class like this:</p>  <pre><code>class test2 extends parent { //public native void init(); } </code></pre>  <p>and then try to call the same function, jni will complain at me a different way about unimplemented function but this time it looks like this:</p>  <p><strong>No implementation found for native Lcom/bb/me/test$test2;.init:()V</strong></p>  <p>I originally thought if I edited the jni function signature to something like this:</p>  <pre><code>JNIEXPORT void JNICALL Java_com_bb_me_test_test2_init(JNIEnv* e, jobject i) {} </code></pre>  <p>that the function would work but it doesn't seem like that's the case.</p>  <p>What does the "<strong>$</strong>" dollar sign mean in this jni function signature?</p>  <p><strong>No implementation found for native Lcom/bb/me/test$test2;.init:()V</strong></p>  <p>How can I move the location of this native function and update the jni function signatures without using the javah tool?</p>