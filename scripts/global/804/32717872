<p>My problem is that I fail to find some proper documents/guides to follow in order to set up my environment correctly.</p>  <p>Basically I am using Android Studio 1.3.2 (latest stable as of 22nd september 2015) with Gradle Experimental version 2.5.</p>  <p>I followed Google official documentation here : <a href="http://tools.android.com/tech-docs/new-build-system/gradle-experimental" rel="nofollow">http://tools.android.com/tech-docs/new-build-system/gradle-experimental</a> but I find no help when it comes to JNI Libs. I tried many other solutions but they do not work because they seem to be obsolete.</p>  <p>I have a <strong>.so</strong> file of a simple <strong>C++ library</strong> I created to test the NDK support &amp; integration that should be better with this Android Studio 1.3 as announced during Google I/O 2015.</p>  <p>This is how looks my very simple <code>C++ Lib</code>:</p>  <p>Content of TestCPPClass.h</p>  <pre><code>#ifndef TESTCPPCLASS_H #define TESTCPPCLASS_H  class TestCPPClass { public:     double getDouble(); };  #endif TESTCPPCLASS_H </code></pre>  <p>And TestClass.cpp:</p>  <pre><code>#include "TestCPPClass.h"    double TestCPPClass::getDouble() {     return 1; // cannot be dumber ! ^^ } </code></pre>  <p>Using <strong>Cygwin terminal</strong> and <strong>gcc</strong> I compiled this very advanced library using the following line :</p>  <blockquote>   <p>gcc.exe -shared -o TestLib.so TestCPPClass.cpp</p> </blockquote>  <p>Which did correctly produce a <code>TestLib.so</code>.</p>  <p>In my current Android project, I have a <strong>native</strong> method that is implemented in JNI as followed :</p>  <p><code>public static double getDoubleFromJNI();</code></p>  <p>Using <strong>javah.exe</strong> I generated the <strong>.h</strong> file and then implemented the JNI method as follow :</p>  <pre><code>#include "jni.h" #include "my_package_header.h" #include "TestCPPClass.h" // =&gt; MARKED AS RED because not found ?  JNIEXPORT jdouble JNICALL Java_my_package_header_getDoubleFromJNI         (JNIEnv *env, jobject caller) {      // Here I wish to call my TestLib.so that should contain my TestCPPClass and call "TestCPPClass::getDouble()"      // in order to return the result. } </code></pre>  <p>So what about my <strong>build.gradle</strong> ? This is what I have for NDK inside <code>model{}</code></p>  <pre><code>android.ndk {         moduleName = "MyAwesomeJNI"         ldLibs += "TestLib" =&gt; gradle SYNC works, but BUILD fails !     } </code></pre>  <p>This is the error I get :</p>  <blockquote>   <p>Error:Execution failed for task   ':app:linkArm64-v8aDebugMyAwesomeJNISharedLibrary'.</p>      <blockquote>     <p>A build operation failed.           Linker failed while linking libMyAwesomeJNI.so.   See the complete log at:     file:///C:/Users/Me/Documents/MyProject/app/build/tmp/linkArm64-v8aDebugMyAwesomeJNISharedLibrary/output.txt</p>   </blockquote> </blockquote>  <p>I manually created the <strong>jniLibs</strong> folder alongside <strong>jni</strong> using <code>New &gt; directory</code>. I also added a <strong>armeabi</strong> folder and put <strong>TestLib.so</strong> inside. I tried without <code>armeabi</code> but with no luck.</p>  <p>What am I missing here ? I am totally lost! Thanks for the help!</p>