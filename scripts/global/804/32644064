<p>I am trying to refactor some android jni code. It was initially setup to use static variables in JNI and static calls on the android side. I would like to change that to improve compatibility with other code.</p>  <p>current method signatures</p>  <pre><code>static jclass main_activity;  static jmethodID on_init; static jmethodID on_update; static jmethodID on_render; static jmethodID on_exit; static jmethodID on_get_input; </code></pre>  <p>these bindings were setup in the beginning of the code like this:</p>  <pre><code>main_activity = (jclass)((*mEnv)-&gt;NewGlobalRef(mEnv, cls));  on_init = (*mEnv)-&gt;GetStaticMethodID(mEnv, main_activity,                             "on_native_init","()V"); on_update = (*mEnv)-&gt;GetStaticMethodID(mEnv, main_activity,                             "on_native_update","()V"); on_render = (*mEnv)-&gt;GetStaticMethodID(mEnv, main_activity,                             "on_native_render","()V"); on_exit = (*mEnv)-&gt;GetStaticMethodID(mEnv, main_activity,                             "on_native_exit", "()V"); </code></pre>  <p>Then later in the code they would be used like this:</p>  <pre><code>void Android_JNI_SwapEGLwindow(void) {     JNIEnv *a_env = get_android_jni_env();     (*mEnv)-&gt;CallStaticVoidMethod(a_env, main_activity, on_update); } </code></pre>  <p>Since this project is currently setup to store the main activity and the function addresses as a static reference with only the call to <code>get_android_jni_env();</code> allowing me access to get the current android jni environment.</p>  <p>How can I restructure this code to be able to get an instance instead of holding on to a static reference?</p>