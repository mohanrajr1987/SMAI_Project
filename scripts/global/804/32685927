<p>I'm working with SDL and I've almost sorted out all the issues that I am having.</p>  <p>I am making a jni call to init the framework, then creating a global reference from that because that's the best way that I can think of for the moment.</p>  <p>Most of my JNI functions use the instance variables except for one to read files. This is how I am setting up the globalref.</p>  <pre><code>JNIEXPORT void JNICALL SDL_Android_Init(JNIEnv* mEnv, jobject instance) {     Android_JNI_SetupThread();     mInstance = instance;      jclass clazz = (*mEnv)-&gt;GetObjectClass(mEnv, instance);     mActivityClass = (jclass)((*mEnv)-&gt;NewGlobalRef(mEnv, clazz)); ..... } </code></pre>  <p>I only use this mActivityClass global reference twice in this code to read do some functions that can be called at anytime.</p>  <p>The main question, specifically for android JNI. If I hold on to that globalref, since android controls it's application's lifecycle that ref will cause my app to "resume" even though i am attempting to quit.</p>  <p>If I try to clear that globalref with something like <code>DeleteLocalRef</code>, the app still seems to want to resume instead of quitting. Is there a way to stop this behavior?</p>  <p>Another question, is it possible to create a non static JNI function that get's called from the c side of the code world, so that I can get an instance jobject and use that to get a hold of the class instance?</p>  <p>For example typically you write a function in java:</p>  <pre><code>public native void do_c_work(); </code></pre>  <p>on the c side:</p>  <pre><code>void Java_com_test_java_do_c_work(JNIEnv* env, jobject inst) {   ...use the instance do your work }  </code></pre>  <p>What if some functions get called on the c side, that I would like to get an instance from java to do something with.</p>  <p>c function:</p>  <pre><code>public int get_number(); </code></pre>  <p>I am a little stuck here, I don't want to instantiate a new java object at this point, mainly because <a href="http://stackoverflow.com/questions/22326302/call-android-activity-from-jni-directly-from-c-process-without-java-side">i saw this</a> and it seems like overkill. </p>  <p>There must be a way to overcome this obstacle, either by being able to call into java from c without using static or creating a new activity, there's one already there or freeing the globalref but that doesn't seem to be working out so well for me at this moment.</p>