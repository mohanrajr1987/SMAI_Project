<p>I am trying to insert a function into a map but I want to check it first so I would like to overload assignment operation for std::function, is this possible?<br/><br/> I try to overload the assignment operation, so if something other than expected is assigned, the assignment operator function should wrap it in the expected function and return it.</p>  <pre><code>#include &lt;iostream&gt; #include &lt;map&gt; #include &lt;functional&gt;  class MyClass{     public:     std::map&lt;int, std::map&lt;int, std::function&lt;void(int,int)&gt;&gt;&gt; events;     std::function&lt;void(int,int)&gt;&amp; on(int type, int id){ return events[type][id]; };     template&lt;typename T&gt; std::function&lt;void(int,int)&gt;&amp; operator= (T&amp;&amp; fn){         std::wcout &lt;&lt; L"assigning correct function\n";         return [&amp;](int x, int y){             if(typeid(fn)==typeid(std::function&lt;void(int,std::wstring)&gt;)) fn(x, L"two");         };     } };  int main(int argc, char **argv) {     MyClass obj;     obj.on(1,2) = [](int x, int y){ std::wcout &lt;&lt; L"int " &lt;&lt; x &lt;&lt; L" " &lt;&lt; y &lt;&lt; std::endl; };  //this works but it's not calling the overload operator     obj.on(1,2) = [](int x, std::wstring y){ std::wcout &lt;&lt; L"string " &lt;&lt; x &lt;&lt; L" " &lt;&lt; y &lt;&lt; std::endl; }; //I need this to work too     obj.events[1][2](2,3);     return 0; } </code></pre>  <p>Output:</p>  <pre><code>test.cpp:23:14: error: no match for 'operator=' (operand types are 'std::function&lt;void(int, int)&gt;' and 'main(int, char**)::&lt;lambda(int, std::__cxx11::wstring)&gt;') obj.on(1,2) = [](int x, std::wstring y){ std::wcout &lt;&lt; L"string " &lt;&lt; x &lt;&lt; L" " &lt;&lt; y &lt;&lt; std::endl; };          ^ </code></pre>