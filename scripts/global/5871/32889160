<p>I have a class called OnePoint consisting of two double values, my two coordinates, x and y. I have a class Line consisting of two "OnePoint's" - As two points are a line. I also have a class Polygon consisting of 3 "OnePoint's" put into a vector - As a Polygon has 3 or more points. </p>  <p>Here is my function that is supposed to do exactly that. </p>  <pre><code>Polygon operator+(const OnePoint &amp;lhs, const Line &amp;rhs) {     Polygon retvalu;      retvalu.inputvector(lhs);      retvalu.inputvector(rhs.getonevalue); //Line 150     retvalu.inputvector(rhs.gettwovalue); //Line 151     return retvalu; }  </code></pre>  <p>Error code on line 150 and line 151: </p>  <pre><code>non-standard syntax; use '&amp;' to create pointer to member  </code></pre>  <p>All of my code:</p>  <pre><code>#include &lt;iostream&gt; #include &lt;vector&gt; using namespace std;  class OnePoint { private:     double xvalue;     double yvalue;  public:     OnePoint(double x = 0.0, double y = 0.0) {         xvalue = x;         yvalue = y;     }      friend ostream&amp; operator&lt;&lt;(ostream&amp; printh, OnePoint&amp; cPoint) {         printh &lt;&lt; "(" &lt;&lt; cPoint.xvalue &lt;&lt; ',' &lt;&lt; cPoint.yvalue &lt;&lt; ")";         return printh;      }      void Plus(OnePoint a) {         xvalue = xvalue + a.xvalue;         yvalue = yvalue + a.yvalue;     }      void Minus(OnePoint b) {          xvalue = xvalue + b.xvalue;         yvalue = yvalue + b.yvalue;      }      OnePoint Plustwo(OnePoint a) {         return (xvalue + a.xvalue, yvalue - a.yvalue);      }      void Change(double a, double b) {         xvalue += a;         yvalue += b;     }      void Print(OnePoint b) {          cout &lt;&lt; xvalue &lt;&lt; "," &lt;&lt; yvalue &lt;&lt; endl;      }      /*OnePoint operator-(OnePoint a) {         OnePoint temp;         temp.xvalue = xvalue + a.xvalue;         temp.yvalue = yvalue + a.yvalue;          return temp;          }           friend OnePoint operator+(OnePoint a, OnePoint b) {         OnePoint temp;         temp.xvalue = a.xvalue + b.xvalue;         temp.yvalue = a.yvalue + b.yvalue;          return temp;          }*/ };  class Line { private:     OnePoint onevalue;     OnePoint twovalue; public:     Line(OnePoint a = OnePoint(), OnePoint b = OnePoint()) {         onevalue = a;         twovalue = b;      }      OnePoint getonevalue() {         return onevalue;     }      OnePoint gettwovalue() {          return twovalue;     }      friend ostream&amp; operator&lt;&lt;(ostream&amp; print, Line&amp; cLine) {         print &lt;&lt; "{" &lt;&lt; cLine.onevalue &lt;&lt; ',' &lt;&lt; cLine.twovalue &lt;&lt; "}";         return print;     }      /*friend Line operator+(OnePoint a, OnePoint b) {         Line temp(a, b);         return temp;         }*/ };  class Polygon { private:     vector &lt;OnePoint&gt; polly; public:     Polygon(OnePoint a = OnePoint(), OnePoint b = OnePoint(), OnePoint c = OnePoint()) {         polly.push_back(a);         polly.push_back(b);         polly.push_back(c);     }      friend ostream&amp; operator&lt;&lt;(ostream&amp; print, Polygon&amp; pollyclass) {         for(unsigned int i = 0; i &lt; pollyclass.polly.size(); i++) {             print &lt;&lt; pollyclass.polly[i];         }          return print;     }      void outputvector() {          for(unsigned int i = 0; i &lt; polly.size(); i++) {             cout &lt;&lt; polly[i];         }       }      void inputvector(OnePoint a) {         polly.push_back(a);     } };  Line operator+(const OnePoint &amp;lhs, const OnePoint &amp;rhs){     Line retval(lhs, rhs);     return retval; }  Polygon operator+(const OnePoint &amp;lhs, const Line &amp;rhs){     Polygon retvalu;     retvalu.inputvector(lhs);     retvalu.inputvector(rhs.getonevalue); //Line 150     retvalu.inputvector(rhs.gettwovalue); //Line 151      return retvalu; }  /*Polygon operator+(const Line &amp;lhs, const OnePoint &amp;rhs) { Polygon retval(rhs, lhs.getonevalue, lhs.gettwovalue);  return retval; }*/  Polygon operator+(const Polygon &amp;lhs, const Polygon &amp;rhs) { }  int main() {     OnePoint a(3.0, 3.0);     OnePoint b(1.0, 1.0);     OnePoint y(3.0, 4.0);     OnePoint i(4.0, 2.0);     OnePoint p(3.0, 4.0);     OnePoint m(4.0, 2.0);      Line d(a, b);     Polygon j(a, b, y);     Polygon h(i, p, b);     Polygon w;     Line o;     o = a + b;      w = b + o;     cout &lt;&lt; w;     cout &lt;&lt; a &lt;&lt; endl;     cout &lt;&lt; d &lt;&lt; endl;     cout &lt;&lt; o &lt;&lt; endl; } </code></pre>