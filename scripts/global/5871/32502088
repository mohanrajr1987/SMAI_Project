<p>I have a vector of pointers to structs, and want to check for existing items and sort by the value of a struct member. However, it appears that the check for existing items (I'm using QVector::indexOf()) is not working, and that std::sort is applying its sorting to some pointer value rather than the member value. I don't understand why the struct operator overloads aren't getting called (or called properly).</p>  <p>In header file:</p>  <pre><code>struct PlotColumn {     quint32 octagonLength;     QVector&lt;Qt::GlobalColor&gt; columnVector;      bool operator&lt; (const PlotColumn&amp; pc) const     {         return (this-&gt;octagonLength &lt; pc.octagonLength);     }     bool operator==(PlotColumn const&amp; pc)     {         return this-&gt;octagonLength == pc.octagonLength;     }     bool operator&gt; (const PlotColumn&amp; pc) const     {         return (this-&gt;octagonLength &gt; pc.octagonLength);     } }; QVector&lt;PlotColumn*&gt; *plotMap; </code></pre>  <p>In source file:</p>  <pre><code>PlotColumn *pcNew = new PlotColumn(); pcNew-&gt;octagonLength = octagonLength; // check if octagonLength has arrived before: int plotXAxis = plotMap-&gt;indexOf(pcNew); if (plotXAxis == -1) { // unknown, so insert:      ... (some housekeeping)      plotMap-&gt;append(pcNew);      std::sort(plotMap-&gt;begin(), plotMap-&gt;end());      ....      (some more housekeeping) } </code></pre>  <p>Using an external (not in the struct) is possible for sort, but not for indexOf (afaik).</p>  <p>Any thoughts? </p>  <p>PS: yes I know there are tons of already answered questions about sorting vectors of pointers to structs and I've tried to apply the pattern in those solutions but it still doesn't work.</p>