<p>I thought friend functions had access to all members. Even in this question it worked:<br>     <a href="http://stackoverflow.com/questions/15731414/c-friend-function-cant-access-private-members">C++ friend function can&#39;t access private members</a></p>  <p>The answer given in that question seems identical to my code, and his compiled fine while mine just says array_ is pivate. Anyone know why?</p>  <p>.h:</p>  <pre><code>#ifndef matrix_h #define matrix_h  #include &lt;iostream&gt; using namespace std;  template &lt;typename Comparable&gt; class matrix {     private:         size_t num_cols_;         size_t num_rows_;         Comparable **array_;      public:         friend ostream&amp; operator&lt;&lt; (ostream&amp; o, const matrix&lt;Comparable&gt; &amp; rhs);         size_t NumRows();         size_t NumCols(); }; #endif </code></pre>  <p>.cpp:</p>  <pre><code>#include &lt;iostream&gt; #include "matrix.h"  using namespace std;  template &lt;typename Comparable&gt; ostream&amp; operator&lt;&lt; (ostream&amp; o, matrix&lt;Comparable&gt; &amp; rhs){     size_t c = rhs.NumRows();     size_t d = rhs.NumCols();     for (int i = 0; i &lt; c; i++){         for (int j = 0; j &lt; d; j++){             o &lt;&lt; rhs.array_[i][j];         //not allowed         }         o &lt;&lt; endl;     }     return o; }  template &lt;typename Comparable&gt; size_t matrix&lt;Comparable&gt;::NumRows(){     return num_rows_; }  template &lt;typename Comparable&gt; size_t matrix&lt;Comparable&gt;::NumCols(){     return num_cols_; }   int main(){     matrix&lt;int&gt; a;     cout &lt;&lt; a &lt;&lt; endl;  } </code></pre>