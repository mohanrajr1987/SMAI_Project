<p>I have structure "foo" with many members, one of which (double bar) is accessed several times in basic operations. So instead of writing, for example:</p>  <pre><code>double a=foo.bar+3; double b=foo.bar*5; bool c=foo.bar==2; </code></pre>  <p>I wanted to write:</p>  <pre><code>double a=foo+3; double b=foo*5; bool c=foo==2; </code></pre>  <p>One approach would be overloading all desired operators in free functions:</p>  <pre><code>template&lt; class T&gt; double operator@(foo a,T b){     return a.bar@b; } template&lt; class T&gt; double operator@(T b,foo a){     return a.bar@b; } </code></pre>  <p>I would then have to copy and paste this snippet and substitute @ by +, *, == and other operations I wanted. </p>  <p>Is there a better (more readable, less repetitive, shorter and/or safer) way to do it ? For instance, using templates or guiding the compiler to try substituting "foo" by "foo.bar" whenever it does not find a match for a function involving "foo".</p>