<p>In the following code i overload the operator ++(pre increment).</p>  <p>I know that when i return *this pointer, i do return the adress of the current object. I have two questions:  a)If i return a constructor call like the one in my example what happens ? Does it create a new object? If that so why the adress of the object does not change? On the other hand if it just changes the current object value why dont we just use a setter function instead of the constructor? b)If i return a new object created locally in the operator function does this object gets destroyed after the operator call? Since it is defined locally it should go out of scope after the return statement ? </p>  <pre><code>#include&lt;iostream&gt;  class MyClass { private:     int foo;  public:     MyClass(int a = 0) : foo(a) {     };     MyClass operator++() {         foo++;         return MyClass(foo);                   //1         //return *this                           2         //Post increment         //MyClass b(foo);         //foo++         //return b                             //3 b gets out of scope? what happens to foo?     }     void printVal() const {         std::cout &lt;&lt; foo &lt;&lt; std::endl;     } };  int main() {     MyClass a(1);     a.printVal();     std::cout &lt;&lt; &amp;a &lt;&lt; std::endl;     ++a;     a.printVal();     std::cout &lt;&lt; &amp;a &lt;&lt; std::endl;  } </code></pre>