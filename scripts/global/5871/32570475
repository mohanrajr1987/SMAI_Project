<p>I have a difficult (at least for me :-)) question about operator overloading with using traits.</p>  <p>Let's image a situation when you don't have a direct access to the class definition and to any member functions of this class. But there is some helper class with all necessary helper functions for working with it. I use it as a realization of some unified interface for working with similar objects but with different (and in some cases by using external libs unknown for me) internal behavior.</p>  <p>In particular for my case I talk about matrices. When for example I want to have some matrix class in my program I'm just writing an interface for this class and it works fine.</p>  <p>The problems start when I tried to generalize all my interfaces for different matrix class by adding some general interface.</p>  <p>Let's look on example:</p>  <pre><code>template&lt;typename Traits&gt; class MatrixAlgebra: public Traits::matrix_policy_t, //describe how to create matrix from pointer public Traits::matrix_algebra_t //describe operations with references to matrices { private:   typedef typename Traits::matrix_t matrix_t;   typedef typename Traits::matrix_ref_t matrix_ref_t;   typedef typename Traits::matrix_ptr_t matrix_ptr_t;   typedef typename Traits::matrix_policy_t matrix_policy_t;   typedef typename Traits::matrix_algebra_t matrix_algebra_t; public:   explicit MatrixAlgebra(const matrix_policy_t&amp; mp):   matrix_policy_t(mp){} //this is necessary because every matrix type has its own policy class    friend matrix_t operator+(const matrix_ref_t m1, const matrix_ref_t m2){     matrix_ptr_t res=0; //doesn't work!     matrix_policy_t::matrix_create(res); //doesn't work!     *res=matrix_algebra::matrix_add(m1,m2); //doesn't work!      return *res;   } }; </code></pre>  <p>As you see there are a lot of problems with operator overloading. This is because an operator overloading is a friend function. When I declare it as usual function (not operator and not a friend) it works fine.</p>  <p>So question is how to avoid operator definition as friend function (BUT once again I haven't a direct access to matrix type) or how to do it in other way?</p>  <p>Sorry for this a really long description.</p>  <p>And thank you a lot in advance for your help!</p>