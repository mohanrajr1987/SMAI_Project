<p>As an exercise for myself, I'm trying to write a class in Python that works similarly to events in C#.</p>  <p>Here are the two main functions in the class (__subs is a list):</p>  <pre><code>class Event (object):     def __iadd__ (self, other):         if not callable(other):             raise ValueError("%s must be callable" % other)         self.__subs.append(other)         return self      def __add__ (self, other):         if not callable(other):             raise ValueError("%s must be callable" % other)         new = Event()         new.__subs = [f for f in self.__subs]         new.__subs.append(other)         return new      def __call__ (self, *args, **kwargs):         for func in self.__subs:             func(*args, **kwargs) </code></pre>  <p>this allows the following syntaxes:</p>  <pre><code>e1 = Event() e1 += afunction e2 += another e1 (arg1, arg = val) # afunction and another will be called with arg1 and val  e2 = Event() + afunction + another e2 (arg1, arg = val)  (Event() + afunction + another) (arg1, arg = val) </code></pre>  <p>However, I would like to simplify the last two to just be something like this</p>  <pre><code>e = afunction + another e (arg1, arg = val)  (afunction + another) (arg1, arg = val) </code></pre>  <p>I tried doing this, but I get the error "TypeError: 'function' is not an acceptable base type"</p>  <pre><code>class function (FunctionType):     def __add__ (self, other):         return Event() + self + other </code></pre>  <p>Is what I'm trying to do possible?</p>