<p>Here is a code I found in website from which I am learning C++. I don't know how to debug a program, so I can't figure out what's the problem with.</p>  <pre><code>#include &lt;iostream&gt;  using namespace std; class Complex { int real; int img; public: Complex() {     real = 0;     img = 0; }  Complex(int r, int i) {     real = r;     img = i; }  Complex&amp; operator++(); Complex operator++(int);  friend Complex operator+(Complex &amp;a, Complex &amp;b); friend ostream&amp; operator&lt;&lt;(ostream &amp;out, Complex &amp;a); friend istream&amp; operator&gt;&gt;(istream &amp;in, Complex &amp;a);  void display() {     using namespace std;     cout &lt;&lt; real &lt;&lt; " + " &lt;&lt; img &lt;&lt; endl; }  };  Complex&amp; Complex::operator++() {     ++real;     ++img;     return *this; }  Complex Complex::operator++(int) {     Complex temp(*this);     ++(*this);     return temp; }  Complex operator+(Complex &amp;a, Complex &amp;b) {     int x = a.real + b.real;     int y = a.img + b.img;     return Complex(x, y); } ostream&amp; operator&lt;&lt;(ostream &amp;out, Complex &amp;a) {     using namespace std;     out &lt;&lt; a.real &lt;&lt; " + " &lt;&lt; a.img &lt;&lt; endl;     return out; }  istream&amp; operator&gt;&gt;(istream &amp;in, Complex &amp;a) {     using namespace std;     cout &lt;&lt; "Enter the real part" &lt;&lt; endl;     in &gt;&gt; a.real;     cout &lt;&lt; "Enter the imaginary part" &lt;&lt; endl;     in &gt;&gt; a.img;     return in; }  int main() {     Complex a;     cin &gt;&gt; a;     Complex b(11,8);     cout &lt;&lt; "a is :" &lt;&lt; a &lt;&lt; endl;     cout &lt;&lt; "b is :" &lt;&lt; b &lt;&lt; endl;     Complex c = Complex(a + b);     cout &lt;&lt; "c is :" &lt;&lt; c &lt;&lt; endl;     cout &lt;&lt; c;     cout &lt;&lt; c++;     cout &lt;&lt; c;     cout &lt;&lt; ++c;     cout &lt;&lt; c; } </code></pre>  <p>The compiler gives error from the line where I attempt to increment an instance of Complex inside main(). As far as I can see, everything is quite right, but Code::Blocks gives these errors:</p>  <ol> <li><p><code>error: cannot bind 'std::ostream {aka std::basic_ostream&lt;char&gt;}' lvalue to 'std::basic_ostream&lt;char&gt;&amp;&amp;'|</code></p></li> <li><p><code>error:   initializing argument 1 of 'std::basic_ostream&lt;_CharT, _Traits&gt;&amp; std::operator&lt;&lt;(std::basic_ostream&lt;_CharT, _Traits&gt;&amp;&amp;, const _Tp&amp;) [with _CharT = char; _Traits = std::char_traits&lt;char&gt;; _Tp = Complex]|</code></p></li> </ol>  <p>Now this made me believing that (overloaded) I/O operators has some special rules that should be followed in order to use with (overloaded) increment/decrement operators. </p>  <h2>Questions:</h2>  <ol> <li><p>Is that true, or something is wrong in the code that I am not catching? I am a beginner to this field.</p></li> <li><p>Does overloading output/input operator and increment(post,pre)/decrement operators have some extra rules to use them together?</p></li> </ol>  <p>P.S.: Forgive me for my bad English...Thanks</p>