<p>I have created a simple formatter for boost.log like shown in <a href="http://www.boost.org/doc/libs/1_59_0/libs/log/doc/html/log/extension/settings.html" rel="nofollow">this</a> example for <code>std::exception</code>. Now if i want to use the overloaded operator, which is defined in my own namespace, log is unable to find the overload.</p>  <p>Some code:</p>  <pre><code>namespace my_space { template&lt; typename CharT, typename TraitsT &gt; std::basic_ostream&lt; CharT, TraitsT &gt;&amp; operator&lt;&lt; (std::basic_ostream&lt; CharT, TraitsT &gt;&amp; strm, std::exception const&amp; e) {     // some printout stuff here     strm &lt;&lt; e.what();     return strm; } } // namespace my_space </code></pre>  <p>But if i move (Stroustrup please don't shot me, it was only for testing) the overload into std namespace it will be found by the formatter.</p>  <p>The error message is in formatting_ostream.hpp (boost 1.59.0 line 782)</p>  <pre><code>template&lt; typename StreamT, typename T &gt; inline typename boost::log::aux::enable_if_formatting_ostream&lt; StreamT, StreamT&amp; &gt;::type operator&lt;&lt; (StreamT&amp; strm, T const&amp; value) {...} </code></pre>  <p>With Visual Studio 2013 the message say's:</p>  <pre><code>Error   818 error C2679: binary '&lt;&lt;' : no operator found which takes a right-hand operand of type 'const std::exception' (or there is no acceptable conversion) d:\prg\boost\1.59.0\include\boost\log\utility\formatting_ostream.hpp </code></pre>  <p>My intention is, i have an own exception class (defined in namespace my_space) which inherits from std::exception, so i can throw my own but catch a std::exception.</p>  <pre><code>using namespace my_space; try {     // throw(std::runtime_error("something happend."));     throw(my_exception(0x1, "something happend.")); } catch (std::exception&amp; e) {     std::cerr &lt;&lt; e &lt;&lt; std::endl;  // works just fine     MY_LOG_ERROR(slg) &lt;&lt; log::add_value("Exception", e); // compile error } </code></pre>  <p>How to achieve this without polluting the std namespace with my own functions/overloads or creating double catch-blocks?</p>