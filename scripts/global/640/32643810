<p>Scala has an amazing way of converting a collection into another collection using maps construct.</p>  <pre><code>val l = List(1, 2, 3, 4) l.map(_*_) </code></pre>  <p>will return the squares of the elements in list <code>l</code></p>  <p>I come across various instances where multiple maps are chained together say,</p>  <pre><code>val l = List(1, 2, 3, 4) val res = l.map(_ * _).map(_ + 1).filter(_ &lt; 3) </code></pre>  <p>What i believe happens underneath is equivalent to something below.</p>  <pre><code>val l = List(1, 2, 3, 4) val l1 = l.map(_*_) val l2 = l1.map(_ + 1) val res = l2.filter(_ &lt; 3) </code></pre>  <p>creating <code>l1</code> and <code>l2</code> might cause memory issues if the collection is too big. To tackle this problem, does Scala compiler have any optimizations? </p>  <pre><code>val l = List(1, 2, 3, 4) val res = l1.map( _*_ + 1).filter(_ &lt; 3) </code></pre>  <p>in general if <code>f</code>, <code>g</code>, <code>h</code> are functions</p>  <pre><code>val l = List(/*something*/) val res = l.map(f(_)).map(g(_)).map(h(_)) </code></pre>  <p>can be converted into</p>  <pre><code>val res = l.map(f _ andThen g _ andThen h _) </code></pre>