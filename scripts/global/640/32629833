<p>I need to create an application which will track the location of multiple users.</p>  <p>It's almost like a gps enabled taxi and gather which taxi is nearest to your location.</p>  <p>I am able to track down the lat, long coordinates but i am looking to show the top nearest users available.</p>  <p>On the click of the first button i will be showing the users current location, and by the click of another button it should depict the nearest three people let say 'Nearest 3 taxi cab', also as i will be capturing the lat/long it needs to be converted into the actual location of that lat/long.</p>  <pre><code>package com.locationtracker;  import com.example.project.R;  import android.app.Activity; import android.os.Bundle; import android.view.View; import android.view.View.OnClickListener; import android.widget.Button; import android.widget.Toast;  public class MainAct extends Activity {      Button btnShowLocation;     Tracker gps;      @Override     protected void onCreate(Bundle savedInstanceState) {         // TODO Auto-generated method stub         super.onCreate(savedInstanceState);         setContentView(R.layout.activity_tracker);          btnShowLocation = (Button) findViewById(R.id.show_Location);          btnShowLocation.setOnClickListener(new OnClickListener() {              @Override             public void onClick(View v) {                 // TODO Auto-generated method stub                 gps = new Tracker(MainAct.this);                  if (gps.canGetLocation()) {                     double latitude = gps.getLatitude();                     double longitude = gps.getLongitude();                      Toast.makeText(                             getApplicationContext(),                             "Your Location is -\nlat: " + latitude + "\nLong: "                                     + longitude, Toast.LENGTH_LONG).show();                 }else{                     gps.showSettingsAlert();                 }              }         });     }  } ` </code></pre>  <p>and the method i wrote for tracking the location is :</p>  <p><strong>this is the method created to track the location</strong></p>  <pre><code>package com.locationtracker;  import android.app.AlertDialog; import android.app.Service; import android.content.Context; import android.content.DialogInterface; import android.content.DialogInterface.OnClickListener; import android.content.Intent; import android.location.Location; import android.location.LocationListener; import android.location.LocationManager; import android.os.Bundle; import android.os.IBinder; import android.provider.Settings;  public class Tracker extends Service implements LocationListener {      Location location;      private final Context context;      boolean isGPSenabled = false;     boolean isNetworkEnabled = false;     boolean canGetLocation = false;      double latitude;     double longitude;      private static final long MIN_DISTANCE_CHANGE_FOR_UPDATES = 10;     private static final long MIN_TIME_BW_UPDATES = 1000 * 60 * 1;      protected LocationManager locationManager;      public Tracker(Context context) {         this.context = context;         getLocation();     }      public Location getLocation() {         try {             locationManager = (LocationManager) context                     .getSystemService(LOCATION_SERVICE);              isGPSenabled = locationManager                     .isProviderEnabled(LocationManager.GPS_PROVIDER);              isNetworkEnabled = locationManager                     .isProviderEnabled(LocationManager.NETWORK_PROVIDER);              if (isGPSenabled &amp;&amp; !isNetworkEnabled) {              } else {                 this.canGetLocation = true;                  if (isNetworkEnabled) {                     locationManager.requestLocationUpdates(                             LocationManager.NETWORK_PROVIDER,                             MIN_TIME_BW_UPDATES,                             MIN_DISTANCE_CHANGE_FOR_UPDATES, this);                 }                 if (locationManager != null) {                     location = locationManager                             .getLastKnownLocation(LocationManager.NETWORK_PROVIDER);                      if (location != null) {                         latitude = location.getLatitude();                         longitude = location.getLongitude();                     }                 }             }             if (isGPSenabled) {                 if (location == null) {                     locationManager.requestLocationUpdates(                             LocationManager.GPS_PROVIDER, MIN_TIME_BW_UPDATES,                             MIN_DISTANCE_CHANGE_FOR_UPDATES, this);                      if (locationManager != null) {                         location = locationManager                                 .getLastKnownLocation(LocationManager.GPS_PROVIDER);                          if (location != null) {                             latitude = location.getLatitude();                             longitude = location.getLongitude();                          }                      }                 }             }          } catch (Exception e) {             e.printStackTrace();         }         return location;      }      public void stopUsingGPS() {         if (locationManager != null) {             locationManager.removeUpdates(Tracker.this);         }      }      public double getLatitude() {            if (location != null) {             latitude = location.getLatitude();          }         return latitude;     }      public double getLongitude() {         if (location != null) {             longitude = location.getLongitude();          }          return longitude;     }      public boolean canGetLocation() {         return this.canGetLocation;      }      public void showSettingsAlert() {         AlertDialog.Builder alertDialog = new AlertDialog.Builder(context);          alertDialog.setTitle("GPS settings");          alertDialog.setMessage("GPS is not enabled.Do you want to enable Gps?");          alertDialog.setPositiveButton("Settings", new OnClickListener() {              @Override             public void onClick(DialogInterface dialog, int which) {                 Intent i = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);                 context.startActivity(i);              }         });         alertDialog.setNegativeButton("Cancel",                 new DialogInterface.OnClickListener() {                      @Override                     public void onClick(DialogInterface dialog, int which) {                         dialog.cancel();                      }                 });         alertDialog.show();     }      @Override     public void onLocationChanged(Location location) {         // TODO Auto-generated method stub      }      @Override     public void onStatusChanged(String provider, int status, Bundle extras) {         // TODO Auto-generated method stub      }      @Override     public void onProviderEnabled(String provider) {         // TODO Auto-generated method stub      }      @Override     public void onProviderDisabled(String provider) {         // TODO Auto-generated method stub      }      @Override     public IBinder onBind(Intent intent) {         // TODO Auto-generated method stub         return null;     }      public static long getMinDistanceChangeForUpdates() {         return MIN_DISTANCE_CHANGE_FOR_UPDATES;     }      public static long getMinTimeBwUpdates() {         return MIN_TIME_BW_UPDATES;     }  } </code></pre>  <p>What i need to show is the the location of the user and the nearest available top 3 people</p>  <p>Please correct if my approach is not in the right direction, also to make my self more clear i am adding this image of what i am looking for.</p>