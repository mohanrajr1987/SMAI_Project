<p>I have one web server and one app server running on ports 7272 and 8181 respectively. The web server is scaffolded with yeoman-angular-generator(0.7.1). I had configured a proxy to serve up my APIs to facilitate development earlier and it was working fine. Later we decided to enable html5mode for angular and I enabled the connect-modrewrite to serve index.html when static files are not found. Strangely the proxies are not working now. I make the call to <a href="http://localhost:7272/api/v0.1/" rel="nofollow">http://localhost:7272/api/v0.1/</a>/17 and it does not return the response for <a href="http://localhost:8181/api/v0.1/" rel="nofollow">http://localhost:8181/api/v0.1/</a>/17... Any help?  Would really appreciate it guys. </p>  <p>Here is my GruntFile: </p>  <pre><code>   // Generated on 2015-07-17 using generator-angular 0.7.1 'use strict';  // # Globbing // for performance reasons we're only matching one level down: // 'test/spec/{,*/}*.js' // use this if you want to recursively match all subfolders: // 'test/spec/**/*.js'  module.exports = function (grunt) {    // Load grunt tasks automatically   require('load-grunt-tasks')(grunt);    // Time how long tasks take. Can help when optimizing build times   require('time-grunt')(grunt);   grunt.loadNpmTasks('grunt-connect-proxy');    // Define the configuration for all the tasks   grunt.initConfig({      // Project settings     yeoman: {       // configurable paths       app: require('./bower.json').appPath || 'app',       dist: 'dist'     },      // Watches files for changes and runs tasks based on the changed files     watch: {       js: {         files: ['&lt;%= yeoman.app %&gt;/scripts/{,*/}*.js'],         tasks: ['newer:jshint:all'],         options: {           livereload: true         }       },       jsTest: {         files: ['test/spec/{,*/}*.js'],         tasks: ['newer:jshint:test', 'karma']       },       compass: {         files: ['&lt;%= yeoman.app %&gt;/styles/{,*/}*.{scss,sass}'],         tasks: ['compass:server', 'autoprefixer']       },       gruntfile: {         files: ['Gruntfile.js']       },       livereload: {         options: {           livereload: '&lt;%= connect.options.livereload %&gt;'         },         files: [           '&lt;%= yeoman.app %&gt;/{,*/}*.html',           '.tmp/styles/{,*/}*.css',           '&lt;%= yeoman.app %&gt;/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}'         ]       }     },      // The actual grunt server settings     connect: {       options: {         port: 7272,         // Change this to '0.0.0.0' to access the server from outside.         hostname: 'localhost'         //livereload: 35729       },       proxies: [           {               context: '/api/v0.1',               host: 'localhost',                     port: 8181,               https:'false'            }       ],       livereload: {         options: {           open: {appName:"Firefox"},           base: [             '.tmp',             '&lt;%= yeoman.app %&gt;'           ],           middleware: function (connect, options) {             var middlewares = [];             var modRewrite = require('connect-modrewrite');             middlewares.push(modRewrite(['!\\.\\w+($|\\?) /index.html [L]']))             middlewares.push(modRewrite(['!\\.html|\\.js|\\.svg|\\.css|\\.png|\\.jpg|\\.gif$|\\.woff|\\.ttf|\\eot|\\.woff2 /index.html [L]']))              if (!Array.isArray(options.base)) {               options.base = [options.base];             }              // Serve static files             options.base.forEach(function(base) {               middlewares.push(connect.static(base));             });             // Setup the proxy             middlewares.push(require('grunt-connect-proxy/lib/utils').proxyRequest);             return middlewares;           }         }       },       test: {         options: {           port: 9001,           base: [             '.tmp',             'test',             '&lt;%= yeoman.app %&gt;'           ]         }       },       dist: {         options: {           base: '&lt;%= yeoman.dist %&gt;'         }       }     },      // Make sure code styles are up to par and there are no obvious mistakes     jshint: {       options: {         jshintrc: '.jshintrc',         reporter: require('jshint-stylish')       },       all: [         'Gruntfile.js',         '&lt;%= yeoman.app %&gt;/scripts/{,*/}*.js'       ],       test: {         options: {           jshintrc: 'test/.jshintrc'         },         src: ['test/spec/{,*/}*.js']       }     },      // Empties folders to start fresh     clean: {       dist: {         files: [{           dot: true,           src: [             '.tmp',             '&lt;%= yeoman.dist %&gt;/*',             '!&lt;%= yeoman.dist %&gt;/.git*'           ]         }]       },       server: '.tmp'     },      // Add vendor prefixed styles     autoprefixer: {       options: {         browsers: ['last 1 version']       },       dist: {         files: [{           expand: true,           cwd: '.tmp/styles/',           src: '{,*/}*.css',           dest: '.tmp/styles/'         }]       }     },      // Automatically inject Bower components into the app     'bower-install': {       app: {         html: '&lt;%= yeoman.app %&gt;/index.html',         ignorePath: '&lt;%= yeoman.app %&gt;/'       }     },         // Compiles Sass to CSS and generates necessary files if requested     compass: {       options: {         sassDir: '&lt;%= yeoman.app %&gt;/styles',         cssDir: '.tmp/styles',         generatedImagesDir: '.tmp/images/generated',         imagesDir: '&lt;%= yeoman.app %&gt;/images',         javascriptsDir: '&lt;%= yeoman.app %&gt;/scripts',         fontsDir: '&lt;%= yeoman.app %&gt;/styles/fonts',         importPath: '&lt;%= yeoman.app %&gt;/bower_components',         httpImagesPath: '/images',         httpGeneratedImagesPath: '/images/generated',         httpFontsPath: '/styles/fonts',         relativeAssets: false,         assetCacheBuster: false,         raw: 'Sass::Script::Number.precision = 10\n'       },       dist: {         options: {           generatedImagesDir: '&lt;%= yeoman.dist %&gt;/images/generated'         }       },       server: {         options: {           debugInfo: true         }       }     },      // Renames files for browser caching purposes     rev: {       dist: {         files: {           src: [             '&lt;%= yeoman.dist %&gt;/scripts/{,*/}*.js',             '&lt;%= yeoman.dist %&gt;/styles/{,*/}*.css',             '&lt;%= yeoman.dist %&gt;/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}',             '&lt;%= yeoman.dist %&gt;/styles/fonts/*',             '!&lt;%= yeoman.dist %&gt;/images/ignore/**'           ]         }       }     },      // Reads HTML for usemin blocks to enable smart builds that automatically     // concat, minify and revision files. Creates configurations in memory so     // additional tasks can operate on them     useminPrepare: {       html: '&lt;%= yeoman.app %&gt;/index.html',       options: {         dest: '&lt;%= yeoman.dist %&gt;'       }     },      // Performs rewrites based on rev and the useminPrepare configuration     usemin: {       html: ['&lt;%= yeoman.dist %&gt;/{,*/}*.html'],       css: ['&lt;%= yeoman.dist %&gt;/styles/{,*/}*.css'],       options: {         assetsDirs: ['&lt;%= yeoman.dist %&gt;']       }     },      // The following *-min tasks produce minified files in the dist folder     imagemin: {       dist: {         files: [{           expand: true,           cwd: '&lt;%= yeoman.app %&gt;/images',           src: '{,*/}*.{png,jpg,jpeg,gif}',           dest: '&lt;%= yeoman.dist %&gt;/images'         }]       }     },     svgmin: {       dist: {         files: [{           expand: true,           cwd: '&lt;%= yeoman.app %&gt;/images',           src: '{,*/}*.svg',           dest: '&lt;%= yeoman.dist %&gt;/images'         }]       }     },     htmlmin: {       dist: {         options: {           collapseWhitespace: true,           collapseBooleanAttributes: true,           removeCommentsFromCDATA: true,           removeOptionalTags: true         },         files: [{           expand: true,           cwd: '&lt;%= yeoman.dist %&gt;',           src: ['*.html', 'views/{,*/}*.html'],           dest: '&lt;%= yeoman.dist %&gt;'         }]       }     },      // Allow the use of non-minsafe AngularJS files. Automatically makes it     // minsafe compatible so Uglify does not destroy the ng references     ngmin: {       dist: {         files: [{           expand: true,           cwd: '.tmp/concat/scripts',           src: '*.js',           dest: '.tmp/concat/scripts'         }]       }     },      // Replace Google CDN references     cdnify: {       dist: {         html: ['&lt;%= yeoman.dist %&gt;/*.html']       }     },      // Copies remaining files to places other tasks can use     copy: {       dist: {         files: [{           expand: true,           dot: true,           cwd: '&lt;%= yeoman.app %&gt;',           dest: '&lt;%= yeoman.dist %&gt;',           src: [             '*.{ico,png,txt}',             '.htaccess',             '*.html',             'views/{,*/}*.html',             'bower_components/**/*',             'images/{,*/}*.{webp,svg,ico}',             'images/ignore/{,*/}*.{svg}',             'fonts/{,*/}*.{eot,svg,ttf,woff,woff2}'           ]         }, {           expand: true,           cwd: '.tmp/images',           dest: '&lt;%= yeoman.dist %&gt;/images',           src: ['generated/*']         }]       },       styles: {         expand: true,         cwd: '&lt;%= yeoman.app %&gt;/styles',         dest: '.tmp/styles/',         src: '{,*/}*.css'       }     },      // Run some tasks in parallel to speed up the build process     concurrent: {       server: [         'compass:server'       ],       test: [         'compass'       ],       dist: [         'compass:dist',         'imagemin'         //'svgmin'       ]     },     uglify: {       options: {         mangle: false       }     },      // By default, your `index.html`'s &lt;!-- Usemin block --&gt; will take care of     // minification. These next options are pre-configured if you do not wish     // to use the Usemin blocks.     // cssmin: {     //   dist: {     //     files: {     //       '&lt;%= yeoman.dist %&gt;/styles/main.css': [     //         '.tmp/styles/{,*/}*.css',     //         '&lt;%= yeoman.app %&gt;/styles/{,*/}*.css'     //       ]     //     }     //   }     // },     // uglify: {     //   dist: {     //     files: {     //       '&lt;%= yeoman.dist %&gt;/scripts/scripts.js': [     //         '&lt;%= yeoman.dist %&gt;/scripts/scripts.js'     //       ]     //     }     //   }     // },     // concat: {     //   dist: {}     // },      // Test settings     karma: {       unit: {         configFile: 'karma.conf.js',         singleRun: true       }     }   });     grunt.registerTask('serve', function (target) {     if (target === 'dist') {       return grunt.task.run(['build', 'connect:dist:keepalive']);     }      grunt.task.run([       'clean:server',       'bower-install',       'concurrent:server',       'autoprefixer',       'configureProxies:server',       'connect:livereload',       'watch'     ]);   });    grunt.registerTask('server', function () {     grunt.log.warn('The `server` task has been deprecated. Use `grunt serve` to start a server.');     grunt.task.run(['serve']);   });    grunt.registerTask('test', [     'clean:server',     'concurrent:test',     'autoprefixer',     'connect:test',     'karma'   ]);    grunt.registerTask('build', [     'clean:dist',     'bower-install',     'useminPrepare',     'concurrent:dist',     'autoprefixer',     'concat',     'ngmin',     'copy:dist',     'cdnify',     'cssmin',     'uglify',     'rev',     'usemin',     'htmlmin'   ]);    grunt.registerTask('default', [     'newer:jshint',     'test',     'build'   ]); }; </code></pre>