<p>I'm trying to use <a href="https://github.com/yeoman/generator-backbone" rel="nofollow">Generator-Backbone</a> generator for Yeoman with RequireJS.</p>  <p>I don't need the lazy-loading of RequireJS, I just am using it for dependency management and organization. It's fine if it's used during development, but when I run <code>grunt:build</code> I'd love for it to concat all my modules into a single file to minimize HTTP requests.</p>  <p>Currently when I build I am getting this error:</p>  <pre><code>Running "requirejs:dist" (requirejs) task &gt;&gt; Error: Error: ENOENT, no such file or directory '/Users/Tom/Code/myApp/.tmp/scripts/templates.js' &gt;&gt; In module tree: &gt;&gt;     main &gt;&gt;       app &gt;&gt; &gt;&gt;     at Error (native) </code></pre>  <p>If I watch the directory, it seems the templates.js file is created in the right place by the JST task, however it's later overwritten by another task before the requirejs task can complete.</p>  <p>Below is my directory structure, as well as my Gruntfile:</p>  <p>Directory:</p>  <pre><code>├── Gruntfile.js ├── app │   ├── bower_components │   ├── index.html │   ├── scripts │   │   ├── main.js │   │   ├── modules │   │   │   └── admanager.js │   │   ├── templates │   │   │   ├── ads.ejs │   │   │   ├── app.ejs │   │   │   ├── content.ejs │   │   │   └── navigation.ejs │   │   └── views │   │       ├── ads.js │   │       ├── app.js │   │       ├── content.js │   │       └── navigation.js │   └── styles │       └── main.css ├── bower.json ├── dist ├── node_modules ├── package.json └── test     ├── index.html     └── spec         └── test.js </code></pre>  <p>Gruntfile:</p>  <pre><code>'use strict'; var LIVERELOAD_PORT = 35729; var SERVER_PORT = 9000; var lrSnippet = require('connect-livereload')({port: LIVERELOAD_PORT}); var mountFolder = function (connect, dir) {     return connect.static(require('path').resolve(dir)); };   module.exports = function (grunt) {      require('time-grunt')(grunt);     require('load-grunt-tasks')(grunt);      // configurable paths     var yeomanConfig = {         app: 'app',         dist: 'dist'     };      grunt.initConfig({         yeoman: yeomanConfig,         watch: {             options: {                 nospawn: true,                 livereload: LIVERELOAD_PORT             },             livereload: {                 options: {                     livereload: grunt.option('livereloadport') || LIVERELOAD_PORT                 },                 files: [                     '&lt;%= yeoman.app %&gt;/*.html',                     '{.tmp,&lt;%= yeoman.app %&gt;}/styles/{,*/}*.css',                     '{.tmp,&lt;%= yeoman.app %&gt;}/scripts/{,*/}*.js',                     '&lt;%= yeoman.app %&gt;/images/{,*/}*.{png,jpg,jpeg,gif,webp}',                     '&lt;%= yeoman.app %&gt;/scripts/templates/*.{ejs,mustache,hbs}',                     'test/spec/**/*.js'                 ]             },             jst: {                 files: [                     '&lt;%= yeoman.app %&gt;/scripts/templates/*.ejs'                 ],                 tasks: ['jst']             },             test: {                 files: ['&lt;%= yeoman.app %&gt;/scripts/{,*/}*.js', 'test/spec/**/*.js'],                 tasks: ['test:true']             }         },         connect: {             options: {                 port: grunt.option('port') || SERVER_PORT,                 // change this to '0.0.0.0' to access the server from outside                 hostname: 'localhost',                 livereload: 35729             },             livereload: {                 options: {                     base: [                         '.tmp',                         '&lt;%= yeoman.app %&gt;'                     ],                     middleware: function (connect) {                         return [                             lrSnippet,                             mountFolder(connect, '.tmp'),                             mountFolder(connect, yeomanConfig.app)                         ];                     },                 }             },             test: {                 options: {                     port: 9001,                     middleware: function (connect) {                         return [                             mountFolder(connect, 'test'),                             lrSnippet,                             mountFolder(connect, '.tmp'),                             mountFolder(connect, yeomanConfig.app)                         ];                     }                 }             },             dist: {                 options: {                     middleware: function (connect) {                         return [                             mountFolder(connect, yeomanConfig.dist)                         ];                     }                 }             }         },         open: {             server: {                 path: 'http://localhost:9000'             },             test: {                 path: 'http://localhost:&lt;%= connect.test.options.port %&gt;'             }         },         clean: {             dist: ['.tmp', '&lt;%= yeoman.dist %&gt;/*'],             server: '.tmp'         },         jshint: {             options: {                 jshintrc: '.jshintrc',                 reporter: require('jshint-stylish')             },             all: [                 'Gruntfile.js',                 '&lt;%= yeoman.app %&gt;/scripts/{,*/}*.js',                 '!&lt;%= yeoman.app %&gt;/scripts/vendor/*',                 'test/spec/{,*/}*.js'             ]         },         mocha: {             all: {                 options: {                     run: true,                     urls: ['http://localhost:&lt;%= connect.test.options.port %&gt;/index.html']                 }             }         },         requirejs: {             dist: {                 // Options: https://github.com/jrburke/r.js/blob/master/build/example.build.js                 options: {                     /*added:*/                     wrap: true,                     almond: true,                     replaceRequireScript: [{                         files: ['&lt;%= yeoman.dist %&gt;/index.html'],                         module: 'main'                     }],                     modules: [{name: 'main'}],                     baseUrl: '&lt;%= yeoman.app %&gt;/scripts',                     mainConfigFile: '&lt;%= yeoman.app %&gt;/scripts/main.js',                     dir: '.tmp/scripts',                     optimize: 'none',                     useStrict: true,                     paths: {                         'templates': '../../&lt;%= yeoman.app %&gt;/scripts/templates',                         'jquery': '../../&lt;%= yeoman.app %&gt;/bower_components/jquery/jquery',                         'underscore': '../../&lt;%= yeoman.app %&gt;/bower_components/lodash/dist/lodash',                         'backbone': '../../&lt;%= yeoman.app %&gt;/bower_components/backbone/backbone'                     }                     /*end added*/                      /*                     baseUrl: '&lt;%= yeoman.app %&gt;/scripts',                     optimize: 'none',                     paths: {                         'templates': '../../.tmp/scripts/templates',                         'jquery': '../../&lt;%= yeoman.app %&gt;/bower_components/jquery/dist/jquery',                         'underscore': '../../&lt;%= yeoman.app %&gt;/bower_components/lodash/dist/lodash',                         'backbone': '../../&lt;%= yeoman.app %&gt;/bower_components/backbone/backbone'                     },                     preserveLicenseComments: false,                     useStrict: true,                     wrap: true                     */                 }             }         },         /*added:*/         uglify: {             dist: {                 files: {                     '&lt;%= yeoman.dist %&gt;/scripts/main.js': [                         '.tmp/scripts/main.js'                     ]                 }             }         },/*end added*/          useminPrepare: {             html: '&lt;%= yeoman.app %&gt;/index.html',             options: {                 dest: '&lt;%= yeoman.dist %&gt;'             }         },         usemin: {             html: ['&lt;%= yeoman.dist %&gt;/{,*/}*.html'],             css: ['&lt;%= yeoman.dist %&gt;/styles/{,*/}*.css'],             options: {                 dirs: ['&lt;%= yeoman.dist %&gt;']             }         },         imagemin: {             dist: {                 files: [{                     expand: true,                     cwd: '&lt;%= yeoman.app %&gt;/images',                     src: '{,*/}*.{png,jpg,jpeg}',                     dest: '&lt;%= yeoman.dist %&gt;/images'                 }]             }         },         cssmin: {             dist: {                 files: {                     '&lt;%= yeoman.dist %&gt;/styles/main.css': [                         '.tmp/styles/{,*/}*.css',                         '&lt;%= yeoman.app %&gt;/styles/{,*/}*.css'                     ]                 }             }         },         htmlmin: {             dist: {                 options: {                     /*removeCommentsFromCDATA: true,                     // https://github.com/yeoman/grunt-usemin/issues/44                     //collapseWhitespace: true,                     collapseBooleanAttributes: true,                     removeAttributeQuotes: true,                     removeRedundantAttributes: true,                     useShortDoctype: true,                     removeEmptyAttributes: true,                     removeOptionalTags: true*/                 },                 files: [{                     expand: true,                     cwd: '&lt;%= yeoman.app %&gt;',                     src: '*.html',                     dest: '&lt;%= yeoman.dist %&gt;'                 }]             }         },         copy: {             dist: {                 files: [{                     expand: true,                     dot: true,                     cwd: '&lt;%= yeoman.app %&gt;',                     dest: '&lt;%= yeoman.dist %&gt;',                     src: [                         '*.{ico,txt}',                         'images/{,*/}*.{webp,gif}',                         'styles/fonts/{,*/}*.*',                     ]                 }, {                     src: 'node_modules/apache-server-configs/dist/.htaccess',                     dest: '&lt;%= yeoman.dist %&gt;/.htaccess'                 }]             }         },         bower: {             all: {                 rjsConfig: '&lt;%= yeoman.app %&gt;/scripts/main.js'             }         },         jst: {             options: {                 amd: true             },             compile: {                 files: {                     // '.tmp/scripts/templates.js': ['&lt;%= yeoman.app %&gt;/scripts/templates/*.ejs']                     '.tmp/scripts/templates.js': ['&lt;%= yeoman.app %&gt;/scripts/templates/*.ejs']                 }             }         },         rev: {             dist: {                 files: {                     src: [                         '&lt;%= yeoman.dist %&gt;/scripts/{,*/}*.js',                         '&lt;%= yeoman.dist %&gt;/styles/{,*/}*.css',                         '&lt;%= yeoman.dist %&gt;/images/{,*/}*.{png,jpg,jpeg,gif,webp}',                         '/styles/fonts/{,*/}*.*',                     ]                 }             }         }     });      grunt.registerTask('createDefaultTemplate', function () {         grunt.file.write('.tmp/scripts/templates.js', 'this.JST = this.JST || {};');     });      grunt.registerTask('server', function (target) {         grunt.log.warn('The `server` task has been deprecated. Use `grunt serve` to start a server.');         grunt.task.run(['serve' + (target ? ':' + target : '')]);     });      grunt.registerTask('serve', function (target) {         if (target === 'dist') {             return grunt.task.run(['build', 'open:server', 'connect:dist:keepalive']);         }          if (target === 'test') {             return grunt.task.run([                 'clean:server',                 'createDefaultTemplate',                 'jst',                 'connect:test',                 'open:test',                 'watch'             ]);         }          grunt.task.run([             'clean:server',             'createDefaultTemplate',             'jst',             'connect:livereload',             'open:server',             'watch'         ]);     });      grunt.registerTask('test', function (isConnected) {         isConnected = Boolean(isConnected);         var testTasks = [                 'clean:server',                 'createDefaultTemplate',                 'jst',                 'connect:test',                 'mocha',             ];          if(!isConnected) {             return grunt.task.run(testTasks);         } else {             // already connected so not going to connect again, remove the connect:test task             testTasks.splice(testTasks.indexOf('connect:test'), 1);             return grunt.task.run(testTasks);         }     });      grunt.registerTask('build', [         'clean:dist',         'createDefaultTemplate',         'jst',         'useminPrepare',         'imagemin',         'htmlmin',         'concat',         'cssmin',         'uglify:generated',         'copy',         'requirejs',         'uglify:dist',         'rev',         'usemin'     ]);      grunt.registerTask('default', [         'jshint',         'test',         'build'     ]); }; </code></pre>  <p>Main.js:</p>  <pre><code>/*global require*/ 'use strict';  require.config({     shim: {     },     paths: {         // LIBS         jquery: '../bower_components/jquery/jquery',         backbone: '../bower_components/backbone/backbone',         underscore: '../bower_components/lodash/dist/lodash',         cookies: '../bower_components/js-cookie/src/js.cookie',         // CUSTOM MODULES         admanager: './modules/admanager',         // APP-SPECIFIC         app: '../scripts/views/app',         content: '../scripts/views/content',         ads: '../scripts/views/ads',         navigation: '../scripts/views/navigation'     } });  require([     'backbone',     'app', ], function (Backbone, App) {     Backbone.history.start();     window.myApp = new App(); }); </code></pre>