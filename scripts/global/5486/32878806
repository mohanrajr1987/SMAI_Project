<pre><code>using System; using System.IO; namespace Assignment1 {     class Program // reused test 3 - V1 solution     {         static string GetString(string prompt, string error)         {             string data = "";             while (data == "")             {                 Console.Write(prompt);                 data = Console.ReadLine();                 if (data == "") Console.WriteLine(error);             }             return data;         }         static int GetUsage(string prompt, string error, int n1, int n2, int n3, int n4, int n5, int n6)         {             int data = -1;             while (data == -1)             {                 Console.Write(prompt);                 if (int.TryParse(Console.ReadLine(), out data) == false) data = -1;                 else if (data != n1 &amp;&amp; data != n2 &amp;&amp; data != n3 &amp;&amp; data != n4 &amp;&amp; data != 5 &amp;&amp; data != n6) data = -1;                 if (data == -1) Console.WriteLine(error);             }             return data;         }         static decimal GetPlan(string Plan)         {             const decimal PRICES = 55, PRICEM = 70, PRICEL = 95, PRICEXL = 135;             decimal Fee = 0;             if (Plan.ToLower() == "s") Fee = PRICES;             else if (Plan.ToLower() == "m") Fee = PRICEM;             else if (Plan.ToLower() == "l") Fee = PRICEL;             else Fee = PRICEXL;             return Fee;         }         static void DisplayCustomer(string FullName, string Address, string Reference, string Plan)         {             Console.WriteLine("\nTo: {0} - Reference No: {1}\nAddress: {2}\n\n{3,-40}$ {4,8:f}\n", FullName, Reference, Address,                 "Monthly Payment for \"" + Plan.ToUpper() + "\":", GetPlan(Plan));         }          static float GetPlan(string Plan, float DataBlock)         {             DataBlock = 0;             const float DATAS = 1, DATAM = 2.5F, DATAL = 6, DATAXL = 10;             switch (Plan)             {                 case "S":                 case "s": DataBlock = DATAS; break;                 case "M":                 case "m": DataBlock = DATAM; break;                 case "L":                 case "l": DataBlock = DATAL; break;                 case "XL":                 case "xl": DataBlock = DATAXL; break;             }             return DataBlock;         }          static void AddCustomer(string[] CustomerName, string[] CustomerAddress, string[] CustomerReference, string[] CustomerPlan, ref int current, ref int last)         {             string FullName, Address, Reference, Plan;             // Clear the previous customer details             FullName = Address = Reference = Plan = ""; //set to empty status to enforce go thru the loop             int TempBlock;             while (FullName == "")             {                 FullName = GetString("\nFull Name: ", "Full Name can't be EMPTY");                 for (int i = 0; i &lt; FullName.Length; i++)                 {                     if (Char.IsDigit(FullName[i]))                     {                         Console.WriteLine("Full Name can't have digit");                         FullName = ""; // set to go back get new Name input                         i = FullName.Length; // stop the loop                     }                 }             }             while (Address == "")             {                 Address = GetString("Address: ", "Full Name can't be blank ");                 if (!Char.IsDigit(Address, 0))                 {                     Console.WriteLine("Full Name should be have home number is numeric characters only\n");                     Address = "";                 }             }             while (Reference == "")             {                 Reference = GetString("Reference Number: ", "Reference can't be blank");                 if (int.TryParse(Reference, out TempBlock) == false)                 {                     Console.WriteLine("Reference should be numeric characters only\n");                     Reference = "";                 }             }             while (Plan == "")             {                 Plan = GetString("Current Plan (S, M, L or XL): ", "Plan can't be Blank").ToUpper();                 if (Plan != "S" &amp;&amp; Plan != "M" &amp;&amp; Plan != "L" &amp;&amp; Plan != "XL") Plan = "";             }             // store input to array at last position             CustomerName[last] = FullName;             CustomerAddress[last] = Address;             CustomerReference[last] = Reference;             CustomerPlan[last] = Plan;             current = last; // current is the entered record             last++; // increase the last count by 1         }          static void FindCustomer(string[] CustomerName, string[] CustomerAddress, string[] CustomerReference, string[] CustomerPlan, ref int current, int last)         {             string sname = GetString("Enter the search name: ", "Search Name can't be blank");             int i;             for (i = 0; i &lt; last; i++)             {                 if (CustomerName[i].ToLower().Contains(sname.ToLower()))                 {                     DisplayCustomer(CustomerName[i], CustomerAddress[i], CustomerReference[i], CustomerPlan[i]);                     string confirm = GetString("Is that record you search for (y/n)? ", "please enter confirmation");                     if (confirm.ToUpper() == "Y")                     {                         current = i;                         break;                     }                 }             }             if (i == last) Console.WriteLine("{0} is not on the Customer list", sname);         }          static void CalculateDisplayPay(string[] CustomerName, string[] CustomerAddress, string[] CustomerReference, string[] CustomerPlan, int current, ref int email)         {             // declare constants for prompt             const string Heading = "\nData Calculate\n\nIn a typical per Day, how often do you do these activities\nwhile you're not connected to Wi-Fi?\n\n";             const string EWUnit = "\n0\t5\t25\t50\t100\t250+\n";             const string TimeUnit = "\n0\t5min\t15min\t30min\t45min\t1hr+";             const string EmailPrompt = "Emails:" + EWUnit + "How many emails (without attachment) do you send/receive? ";             const string WebPrompt = "\nWeb Browsing:" + EWUnit + "How many pages do you visit (including Facebook)? ";             const string VideoPrompt = "\nVideo / movie streaming:" + TimeUnit + "\nHow much time do you spend watching videos? ";             const string MoviePrompt = "\nHD movies:\n0\t1\t2\t3\t5\t15\nHow many HD movies do you download? ";             const string MusicPrompt = "\nMusic:" + TimeUnit + "\nHow much music do you stream or download? ";             const string AppPrompt = "\nApps / games:\n0\t1\t2\t3\t6\t10+\nHow many apps or games do you download? ";              // constant average             const float EMAIL = 0.02731f, WEB = 0.38912f, VIDEO = 3.00373f, MOVIE = 68.26667f, MUSIC = 1.00124f, APP = 34.98667f, ROUND = 0.009f;             const int DAYS = 30, GB = 1024, PERCENT = 100;              const decimal EXTRA = 10;             decimal Fee = 0, ExtraPay = 0, Payment = 0;             int TempBlock = 0;             float DataBlock = 0;              Console.Write(Heading);             int web, video, movie, music, app;             email = web = video = movie = music = app = -1; // set to invalid status to enforce go thru validation             email = GetUsage(EmailPrompt, "Invalid Emails data - Try again...\n", 0, 5, 25, 50, 100, 250);             web = GetUsage(WebPrompt, "Invalid Web Page data - Try again...\n", 0, 5, 25, 50, 100, 250);             video = GetUsage(VideoPrompt, "Invalid Video data - Try again...\n", 0, 5, 15, 30, 45, 1);             movie = GetUsage(MoviePrompt, "Invalid Movie data - Try again...\n", 0, 1, 2, 3, 5, 15);             music = GetUsage(MusicPrompt, "Invalid Music data - Try again...\n", 0, 5, 15, 30, 45, 1);             app = GetUsage(AppPrompt, "Invalid Apps / Games data - Try again...\n", 0, 1, 2, 3, 6, 10);             if (video == 1) video = 60;             if (music == 1) music = 60;              // Calculate total             float TotalEmail = email * EMAIL * DAYS / GB;             float TotalWeb = web * WEB * DAYS / GB;             float TotalVideo = video * VIDEO * DAYS / GB;             float TotalMovie = movie * MOVIE * DAYS / GB;             float TotalMusic = music * MUSIC * DAYS / GB;             float TotalApp = app * APP * DAYS / GB;              float Total = TotalEmail + TotalWeb + TotalVideo + TotalMovie + TotalMusic + TotalApp;             Fee = GetPlan(CustomerPlan[current]);             DataBlock = GetPlan(CustomerPlan[current], DataBlock);             // set default no extra block //Test 2 calculate - (4 * 3 marks + 2 marks = 10 marks)             double extra = Total - DataBlock; // find the different             if (extra &lt; 0) TempBlock = 0;             else if (extra - (int)extra &gt; 0) TempBlock = (int)extra + 1; // any extra point will round to next GB             else TempBlock = (int)extra; // if whole value do not need to round - but change to int type to store             ExtraPay = TempBlock * EXTRA;             Payment = Fee + ExtraPay;              // Display Output              // Test 2 output 6 * 2 marks = 12 marks             Console.WriteLine("\n\n\nTo: {0} - Reference No: {1}\nAddress: {2}", CustomerName[current], CustomerReference[current], CustomerAddress[current]);             Console.WriteLine("\nBased on your answers, your estimated data usage per month is: {0:f}GB per month\n", Total + ROUND);             Console.WriteLine("{0,-40}$ {1,8:f}\nData Plan: {2} GB - Extra Block(s): {3} GB @ $ {4:f}\n{5,-40}$ {6,8:f}\n{7,-40}$ {8,8:f}\n",                                  "Monthly Payment for \"" + CustomerPlan[current].ToUpper() + "\":", Fee, DataBlock, TempBlock, EXTRA, "Extra Data Usage: ", ExtraPay, "Payment Due: ", Payment);             // output results             Console.WriteLine("\n{0,-25}({1,5:f}%)\n{2,-25}({3,5:f}%)\n{4,-25}({5,5:f}%)\n{6,-25}({7,5:f}%)\n{8,-25}({9,5:f}%)\n{10,-25}({11,5:f}%)\n\n"                                  , "Emails", Math.Round(TotalEmail / Total * PERCENT)                                  , "General browsing", Math.Round(TotalWeb / Total * PERCENT)                                  , "Video / Movie streaming", Math.Round(TotalVideo / Total * PERCENT)                                  , "HD Movie", Math.Round(TotalMovie / Total * PERCENT)                                  , "Streaming music", Math.Round(TotalMusic / Total * PERCENT)                                  , "Downloading apps", Math.Round(TotalApp / Total * PERCENT));          }          static void RemoveCustomer(string[] CustomerName, string[] CustomerAddress, string[] CustomerReference, string[] CustomerPlan, ref int current, ref int last)         {             DisplayCustomer(CustomerName[current], CustomerAddress[current], CustomerReference[current], CustomerPlan[current]);             string confirm = GetString("Is that record you search for (y/n)? ", "please enter confirmation");             if (confirm.ToUpper() == "Y")             {                 for (int i = current; i &lt; last - 1; i++)                 {                     CustomerName[i] = CustomerName[i + 1];                     CustomerAddress[i] = CustomerAddress[i + 1];                     CustomerReference[i] = CustomerReference[i + 1];                     CustomerPlan[i] = CustomerPlan[i + 1];                 }                 last--;             }         }         static void WriteToFile(string[] CustomerName, string[] CustomerAddress, string[] CustomerReference, string[] CustomerPlan, ref int current, ref int howmany)         {             try             {                 FileStream fs =new FileStream("product.txt",FileMode.Create,FileAccess.Write);                 StreamWriter sw =new StreamWriter(fs);                 int i;                 for( i = 0; i &lt; howmany-1; i++) sw.WriteLine("{0},{1},{2},{3},{4}", CustomerName[i],CustomerAddress[i],CustomerReference[i],CustomerPlan[i]);                 sw.Write("{0},{1},{2},{3},{4}", CustomerName[i], CustomerAddress[i], CustomerReference[i], CustomerPlan[i]);                 sw.Close();             }             catch (Exception error)             {                 Console.WriteLine("Error! cant' create product Text file - {0}", error.Message);             }         }         static void GetFileData(string[] CustomerName, string[] CustomerAddress, string[] CustomerReference, string[] CustomerPlan, ref int current, ref int howmany)         {             try             {                 if(howmany!=0)                 {                     Console.WriteLine("Warning.... All current data will be overrided by new file data");                     string response = GetString("Do you want to load new data set (y/n)? ","Invalid-input is y or n ONLY");                     if (response.ToLower() == "n") return;                 }                 FileStream fs = new FileStream("product.txt", FileMode.Open, FileAccess.Read);                 StreamReader sr = new StreamReader(fs);                 string line = sr.ReadLine();                 while(line!= null)                 {                     string[] record= line.Split(',');                     Console.Write("{0},{1},{2},{3},{4}", CustomerName[0], CustomerAddress[0], CustomerReference[0], CustomerPlan[0]);                 }                 sr.Close();             }             catch (Exception error)             {                 Console.WriteLine("Error! cant' open product Text file - {0}", error.Message);             }         }          static void Main()         {             // Test 1 input data             int email = -1;              // Assignment 1             const int size = 3;             string[] CustomerName = new string[size];             string[] CustomerAddress = new string[size];             string[] CustomerReference = new string[size];             string[] CustomerPlan = new string[size];             int current = 0, last = 0;              string Option = "a"; // set default to first one             while (Option != "x")             {                 // display menu                 Console.WriteLine("\nMenu Option\nAdd a customer (a)\nDisplay current customer (d)\nFind a customer (f)\nCalculate and display payment for current customer (c)\nRemove current customer (r)\nExit (x)\n");                 // get selection Option                 Option = GetString("Enter your Option(a, d, f, c, r or x)? ", "Please selection one of the correct option");                 // perform Option Input                 switch (Option)                 {                     case "a":                     case "A":                         if (last == size) Console.WriteLine("Array is full");                         else                         {                             if (email != -1) email = -1; // also clear previous customer bill to avoid display the wrong bill in d option                             AddCustomer(CustomerName, CustomerAddress, CustomerReference, CustomerPlan, ref current, ref last);                         }                         break;                      case "d":                     case "D":                         if (last == 0) Console.WriteLine("No record to display");                         else DisplayCustomer(CustomerName[current], CustomerAddress[current], CustomerReference[current], CustomerPlan[current]);                         break;                      case "f":                     case "F":                         if (last == 0) Console.WriteLine("No record to search for");                         else FindCustomer(CustomerName, CustomerAddress, CustomerReference, CustomerPlan, ref current, last);                         break;                      case "c":                     case "C":                         if (last == 0) Console.WriteLine("No record to Calculate usage");                         else CalculateDisplayPay(CustomerName, CustomerAddress, CustomerReference, CustomerPlan, current, ref email);                         break;                      case "r":                     case "R":                         if (last == 0) Console.WriteLine("No record to delete");                         else RemoveCustomer(CustomerName, CustomerAddress, CustomerReference, CustomerPlan, ref current, ref last);                         break;                     case "s":                     case "S":                         if (current == 0) Console.WriteLine("No record to write to file");                         else WriteToFile(CustomerName, CustomerAddress, CustomerReference, CustomerPlan,current,);                         break;                     case "i":                     case "I":                         GetFileData(CustomerName, CustomerAddress, CustomerReference, CustomerPlan, ref current, ref howmany);                         break;                     case "x":                     case "X": Console.WriteLine("End of the program\n");                         Option = Option.ToLower(); // enforce to stop the loop condition                         break;                     default: Console.WriteLine("Unknown option - Try again\n"); break;                 } // end of Option performance             }  // end of while loop for menu            }     } } </code></pre>  <p>There is an error in writing and reading the file ( error in the code which is hard for me to correct) can any one help me out</p>