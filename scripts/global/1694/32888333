<p>I'm trying to create a before insert trigger in MySql, where I want several statements to be executed. Basically what I'm trying to accomplish is this:</p>  <p>I have several (10-15) inputs being fed into the Db on a set time interval (Let's call these R_VALUE1 to R_VALUE4). Before they are inserted, the average from the last 60 entries are calculated and put in AVG_VALUE1 to AVG_VALUE4. This works fine when being put in a trigger by itself.</p>  <p>I'm also looking to remove any entries where the values are zero, by means of moving them to a secondary table and removing it from the main table. This is done by a insert into followed by a delete.</p>  <p>The thing is, these two (well, three) operations work fine by themselves when put in triggers, but not when put together. What happens is that the Db is refusing to accept any inputs, and once I remove the trigger the data resumes coming in. </p>  <p>I've also tried separating them by:</p>  <blockquote>   <ul>   <li>Average calculation before, move and delete in an after insert trigger. </li>   <li>Average calculation and move before, delete operation in an before insert trigger on the secondary table.</li>   <li>Putting the move and delete part into a procedure, and calling it after the average calculation.</li>   <li>Putting the average calculation in an before insert trigger on main_table, the move from main_table to main_table_dump in an after insert trigger on main_table, and the delete in an after insert trigger on main_table_dump. Data kept coming in with these three active, but once I added a zero value  the data flow stopped.</li>   </ul> </blockquote>  <p>Same results on all these.</p>  <p>Any ideas? See below for the trigger code.</p>  <pre><code>DELIMITER $$  CREATE TRIGGER `before_insert` BEFORE INSERT ON `main_table` FOR EACH ROW  BEGIN  SET new.AVG_VALUE1 = (SELECT avg(R_VALUE1) FROM ( SELECT R_VALUE1 from main_table ORDER BY Date_Time DESC LIMIT 60) as VALUE1_A), new.AVG_VALUE2 = (SELECT avg(R_VALUE2) FROM ( SELECT R_VALUE2 from main_table ORDER BY Date_Time DESC LIMIT 60) as VALUE2_A), new.AVG_VALUE3 = (SELECT avg(R_VALUE3) FROM ( SELECT R_VALUE3 from main_table ORDER BY Date_Time DESC LIMIT 60) as VALUE3_A), new.AVG_VALUE4 = (SELECT avg(R_VALUE4) FROM ( SELECT R_VALUE4 from main_table ORDER BY Date_Time DESC LIMIT 60) as VALUE4_A);  INSERT INTO main_table_dump SELECT * FROM main_table WHERE R_VALUE1 = '0' OR R_VALUE2 = '0' OR R_VALUE3 = '0' OR R_VALUE4 = '0';  DELETE FROM main_table WHERE R_VALUE1 = '0' OR R_VALUE2 = '0' OR R_VALUE3 = '0' OR R_VALUE4 = '0';  END$$  DELIMITER ; </code></pre>  <p>Edit: I put the select and delete in a procedure, and then called this procedure using a scheduled event that fires of in an interval that corresponds with the interval of the data input, and this works. Still curious as to why the trigger is failing.</p>