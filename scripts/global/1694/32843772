<p>My objective is to create an <code>INSTEAD OF</code> <code>trigger</code> on a table that fires <strong>only</strong> if a Boolean predicate is satisfied. The MSDN SQL TRIGGER webpage does not provide and example and thus suggests, to me, that it is not possible. </p>  <p>An alternative:</p>  <ol> <li>Use an <code>AFTER</code> <code>trigger</code>.</li> <li><code>SELECT</code> for certain values.</li> <li><code>IF</code> x <code>ROLLBACK</code></li> </ol>  <p>This seems wasteful. Does this reduce the time an <code>UPDATE LOCK</code> is required?</p>  <p><strong>EDIT: Extension of question in response to Dan Guzman's comment:</strong></p>  <pre><code>CREATE TRIGGER HumanResources.trg_deptUpdate  ON HumanResources.Department INSTEAD OF UPDATE AS      PRINT N'Department details are to be amended only be authorized staff.'; GO  --2 Test trigger. UPDATE HumanResources.Department SET Name = 'Funny Team' WHERE Name = 'Sales'; </code></pre>  <p><strong>EDIT2: Amendments made to code as advised by Ben in <em>ANSWER1</em>:</strong></p>  <pre><code>--!1 Simple TRIGGER that prevents UPDATES of the form X the the Department table. --!X=[name]='Funny Team' CREATE TRIGGER HumanResources.trg_deptUpdate ON HumanResources.Department WITH ENCRYPTION AFTER UPDATE AS      IF (SELECT COUNT(Name)     FROM HumanResources.Department     WHERE Name = 'Funny Team') &gt; 0         ROLLBACK;         RAISERROR('This is message HRu1: You cannot insert silly values'                 ,6      -- Severity 6; business rule level message.                 ,1);    -- State 1; not sure of the implication (State !=0) = operation failure? GO </code></pre>