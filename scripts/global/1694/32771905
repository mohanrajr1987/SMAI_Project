<p>I have following table structure. Added two triggers, but as the triggers work with string values and they search for string the database performance might degrade in future when every table will get huge. I have no strong experience with indexes, and don't know which fields to index to make trigger's search operation fast even with millions of rows. </p>  <p>What do you suggest?     </p>  <pre><code>   CREATE TABLE `ofRoster` (       `rosterID` bigint(20) NOT NULL,       `username` varchar(64) NOT NULL,       `jid` varchar(1024) NOT NULL,       `sub` tinyint(4) NOT NULL,       `ask` tinyint(4) NOT NULL,       `recv` tinyint(4) NOT NULL,       `nick` varchar(255) DEFAULT NULL,       PRIMARY KEY (`rosterID`),       KEY `ofRoster_unameid_idx` (`username`),       KEY `ofRoster_jid_idx` (`jid`(255))     ) ENGINE=InnoDB DEFAULT CHARSET=utf8;       CREATE TABLE `ofUser` (       `username` varchar(64) NOT NULL,       `plainPassword` varchar(32) DEFAULT NULL,       `encryptedPassword` varchar(255) DEFAULT NULL,       `name` varchar(100) DEFAULT NULL,       `email` varchar(100) DEFAULT NULL,       `creationDate` char(15) NOT NULL,       `modificationDate` char(15) NOT NULL,       PRIMARY KEY (`username`),       KEY `ofUser_cDate_idx` (`creationDate`)     ) ENGINE=InnoDB DEFAULT CHARSET=utf8;       delimiter ;;     CREATE TRIGGER `UpdateNickOnInsert` BEFORE INSERT ON `ofRoster` FOR EACH ROW BEGIN     SET NEW.nick=(SELECT name FROM ofUser where username=NEW.username);     END      ;;     delimiter ;      delimiter ;;     CREATE TRIGGER `UpdateRosterNicksOnUpdate` AFTER UPDATE ON `ofUser` FOR EACH ROW BEGIN     IF NEW.name &lt;&gt; OLD.name      THEN         UPDATE ofRoster r SET r.nick=NEW.name WHERE r.username=OLD.username;     END IF;     END      ;;     delimiter ; </code></pre>