<p>I am trying to create a simple menu, the string that is selected changes colur as it is instructed to do, I just can't seem to space out each item in the string list on the Y axis, currently they are all positioned in the middle but at the top of the screen overlapping each other.  I know this is probably a very simple fix but I am a novice at XNA. Any help would be very appreciated. Thanks in advance. </p>  <p><strong>MenuManagement Class</strong></p>  <pre><code>using Microsoft.Xna.Framework; using Microsoft.Xna.Framework.Content; using Microsoft.Xna.Framework.Graphics; using Microsoft.Xna.Framework.Input; using System; using System.Collections.Generic; using System.Linq; using System.Text;  namespace Game2 {     class MenuManagement      {         KeyboardState keyboard;         KeyboardState prevKey;          MouseState mouse;          Vector2 position;          List&lt;String&gt; buttonList = new List&lt;string&gt;();         SpriteFont spriteFont;         int selected = 0;           public MenuManagement ()         {              buttonList.Add("Play");             buttonList.Add("Options");             buttonList.Add("instructions");             buttonList.Add("Exit");          }        private void MeasureMenu()     {         height = 0;         width = 0;           foreach (string item in buttonList)          {              Vector2 size = spriteFont.MeasureString(item);              height += spriteFont.LineSpacing + 5;          }     }          public void LoadContent (ContentManager Content )         {             spriteFont = Content.Load&lt;SpriteFont&gt;("spriteFont");                    }          public void Update (GameTime theGameTime)         {              keyboard = Keyboard.GetState();              if (checkKeyBoard(Keys.Up))             {                 if (selected &gt; 0)                 {                     selected--;                 }             }              if (checkKeyBoard(Keys.Down))             {                 if (selected &lt; buttonList.Count - 1)                 {                     selected++;                 }             }              prevKey = keyboard;          }          public bool checkKeyBoard (Keys key)         {             return (keyboard.IsKeyDown(key) &amp;&amp; prevKey.IsKeyDown(key));          }          public void Draw (SpriteBatch theSpriteBatch)         {             theSpriteBatch.Begin();             Color color;               for (int i = 0; i &lt; buttonList.Count; i++)             {                 Vector2 location = position;                 if (i == selected)                 {                     color = Color.Yellow;                 }                 else                 {                     color = Color.Blue;                 }           location.Y += spriteFont.LineSpacing + 5;     }            theSpriteBatch.DrawString(spriteFont, buttonList[0], new Vector2 (300, 100), color);     theSpriteBatch.DrawString(spriteFont, buttonList[1], new Vector2(300, 150), color);     theSpriteBatch.DrawString(spriteFont, buttonList[2], new Vector2(300, 200), color);     theSpriteBatch.DrawString(spriteFont, buttonList[3], new Vector2(300, 250), color);     theSpriteBatch.End();          }      }   } </code></pre>  <p><strong>Game1</strong></p>  <pre><code>using Microsoft.Xna.Framework; using Microsoft.Xna.Framework.Graphics; using Microsoft.Xna.Framework.Input;  namespace Game2 {     /// &lt;summary&gt;     /// This is the main type for your game.     /// &lt;/summary&gt;     public class Game1 : Game     {         GraphicsDeviceManager graphics;         SpriteBatch theSpriteBatch;         public static Rectangle screen;         public static string GameState = "Menu";         MenuManagement menuManagement;           public Game1()         {             graphics = new GraphicsDeviceManager(this);             Content.RootDirectory = "Content";         }           protected override void Initialize()         {             // TODO: Add your initialization logic here             menuManagement = new MenuManagement();             screen = new Rectangle(0, 0, graphics.PreferredBackBufferWidth, graphics.PreferredBackBufferHeight);             base.Initialize();         }           protected override void LoadContent()         {              theSpriteBatch = new SpriteBatch(GraphicsDevice);             menuManagement.LoadContent(Content);              // TODO: use this.Content to load your game content here         }              protected override void UnloadContent()             {                 // TODO: Unload any non ContentManager content here             }   // &lt;param name="gameTime"&gt;Provides a snapshot of timing values.&lt;/param&gt;         protected override void Update(GameTime gameTime)         {             if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))                 Exit();     switch (GameState)         {             case "Menu":                 menuManagement.Update(gameTime);                 break;         }         base.Update(gameTime);     }      /// &lt;param name="gameTime"&gt;Provides a snapshot of timing values.&lt;/param&gt;     protected override void Draw(GameTime gameTime)     {          switch (GameState)         {             case "Menu":                 menuManagement.Draw(theSpriteBatch);                 break;         }         base.Draw(gameTime);      } } } </code></pre>