<p>I did this tutorial:</p>  <p><a href="http://www.raywenderlich.com/78568/create-slide-out-navigation-panel-swift" rel="nofollow">http://www.raywenderlich.com/78568/create-slide-out-navigation-panel-swift</a></p>  <p>I'm trying to implement this for have a slide-out menu to replace the center view controller:</p>  <p><a href="http://www.raywenderlich.com/forums/viewtopic.php?f=20&amp;t=19064&amp;start=40#p85001" rel="nofollow">http://www.raywenderlich.com/forums/viewtopic.php?f=20&amp;t=19064&amp;start=40#p85001</a></p>  <p>Here my code of the modificated files, I've taked the finally project to be sure:</p>  <p>CenterViewController:</p>  <pre><code>@objc protocol CenterViewControllerDelegate {   optional func toggleLeftPanel()   optional func toggleRightPanel()   optional func collapseSidePanels() }  class CenterViewController: UIViewController {     @IBOutlet weak private var imageView: UIImageView!     @IBOutlet weak private var titleLabel: UILabel!     @IBOutlet weak private var creatorLabel: UILabel!      var delegate: CenterViewControllerDelegate?      // MARK: Button actions      @IBAction func kittiesTapped(sender: AnyObject) {         delegate?.toggleLeftPanel?()     }      @IBAction func puppiesTapped(sender: AnyObject) {         delegate?.toggleRightPanel?()     } } </code></pre>  <p>ContainerViewController:</p>  <pre><code>import UIKit import QuartzCore  enum SlideOutState {   case BothCollapsed   case LeftPanelExpanded   case RightPanelExpanded }      class ContainerViewController: UIViewController, CenterViewControllerDelegate, SidePanelViewControllerDelegate, UIGestureRecognizerDelegate {     var centerNavigationController: UINavigationController!   var centerViewController: CenterViewController!    var currentState: SlideOutState = .BothCollapsed {     didSet {       let shouldShowShadow = currentState != .BothCollapsed       showShadowForCenterViewController(shouldShowShadow)     }   }    var leftViewController: SidePanelViewController?   var rightViewController: SidePanelViewController?    let centerPanelExpandedOffset: CGFloat = 60    override func viewDidLoad() {     super.viewDidLoad()      centerViewController = UIStoryboard.centerViewController()     centerViewController.delegate = self      // wrap the centerViewController in a navigation controller, so we can push views to it     // and display bar button items in the navigation bar     centerNavigationController = UINavigationController(rootViewController: centerViewController)     view.addSubview(centerNavigationController.view)     addChildViewController(centerNavigationController)      centerNavigationController.didMoveToParentViewController(self)      let panGestureRecognizer = UIPanGestureRecognizer(target: self, action: "handlePanGesture:")     centerNavigationController.view.addGestureRecognizer(panGestureRecognizer)   }  }  // MARK: CenterViewController delegate     extension ContainerViewController: SidePanelViewControllerDelegate {     func itemSelected(item: MenuItem) {         let vc = item.viewController()         vc.navigationItem.leftBarButtonItem = UIBarButtonItem(title: "Menu", style: .Plain, target: self, action: "toggleLeftPanel")         self.centerNavigationController.viewControllers = [vc]         self.collapseSidePanels()     } }  extension ContainerViewController: CenterViewControllerDelegate {    func toggleLeftPanel() {     let notAlreadyExpanded = (currentState != .LeftPanelExpanded)      if notAlreadyExpanded {       addLeftPanelViewController()     }      animateLeftPanel(shouldExpand: notAlreadyExpanded)   }    func toggleRightPanel() {     let notAlreadyExpanded = (currentState != .RightPanelExpanded)      if notAlreadyExpanded {       addRightPanelViewController()     }      animateRightPanel(shouldExpand: notAlreadyExpanded)   }    func collapseSidePanels() {     switch (currentState) {     case .RightPanelExpanded:       toggleRightPanel()     case .LeftPanelExpanded:       toggleLeftPanel()     default:       break     }   }    func addLeftPanelViewController() {     if (leftViewController == nil) {       leftViewController = UIStoryboard.leftViewController()       leftViewController!.animals = Animal.allCats()        addChildSidePanelController(leftViewController!)     }   }        func addChildSidePanelController(sidePanelController: SidePanelViewController) {         sidePanelController.delegate = self     }    func addRightPanelViewController() {     if (rightViewController == nil) {       rightViewController = UIStoryboard.rightViewController()       rightViewController!.animals = Animal.allDogs()        addChildSidePanelController(rightViewController!)     }   }    func animateLeftPanel(#shouldExpand: Bool) {     if (shouldExpand) {       currentState = .LeftPanelExpanded        animateCenterPanelXPosition(targetPosition: CGRectGetWidth(centerNavigationController.view.frame) - centerPanelExpandedOffset)     } else {       animateCenterPanelXPosition(targetPosition: 0) { finished in         self.currentState = .BothCollapsed          self.leftViewController!.view.removeFromSuperview()         self.leftViewController = nil;       }     }   }    func animateCenterPanelXPosition(#targetPosition: CGFloat, completion: ((Bool) -&gt; Void)! = nil) {     UIView.animateWithDuration(0.5, delay: 0, usingSpringWithDamping: 0.8, initialSpringVelocity: 0, options: .CurveEaseInOut, animations: {       self.centerNavigationController.view.frame.origin.x = targetPosition       }, completion: completion)   }    func animateRightPanel(#shouldExpand: Bool) {     if (shouldExpand) {       currentState = .RightPanelExpanded        animateCenterPanelXPosition(targetPosition: -CGRectGetWidth(centerNavigationController.view.frame) + centerPanelExpandedOffset)     } else {       animateCenterPanelXPosition(targetPosition: 0) { _ in         self.currentState = .BothCollapsed          self.rightViewController!.view.removeFromSuperview()         self.rightViewController = nil;       }     }   }    func showShadowForCenterViewController(shouldShowShadow: Bool) {     if (shouldShowShadow) {       centerNavigationController.view.layer.shadowOpacity = 0.8     } else {       centerNavigationController.view.layer.shadowOpacity = 0.0     }   }  }  extension ContainerViewController: UIGestureRecognizerDelegate {   // MARK: Gesture recognizer    func handlePanGesture(recognizer: UIPanGestureRecognizer) {     let gestureIsDraggingFromLeftToRight = (recognizer.velocityInView(view).x &gt; 0)      switch(recognizer.state) {     case .Began:       if (currentState == .BothCollapsed) {         if (gestureIsDraggingFromLeftToRight) {           addLeftPanelViewController()         } else {           addRightPanelViewController()         }          showShadowForCenterViewController(true)       }     case .Changed:       recognizer.view!.center.x = recognizer.view!.center.x + recognizer.translationInView(view).x       recognizer.setTranslation(CGPointZero, inView: view)     case .Ended:       if (leftViewController != nil) {         // animate the side panel open or closed based on whether the view has moved more or less than halfway         let hasMovedGreaterThanHalfway = recognizer.view!.center.x &gt; view.bounds.size.width         animateLeftPanel(shouldExpand: hasMovedGreaterThanHalfway)       } else if (rightViewController != nil) {         let hasMovedGreaterThanHalfway = recognizer.view!.center.x &lt; 0         animateRightPanel(shouldExpand: hasMovedGreaterThanHalfway)       }     default:       break     }   } }  private extension UIStoryboard {   class func mainStoryboard() -&gt; UIStoryboard { return UIStoryboard(name: "Main", bundle: NSBundle.mainBundle()) }    class func leftViewController() -&gt; SidePanelViewController? {     return mainStoryboard().instantiateViewControllerWithIdentifier("LeftViewController") as? SidePanelViewController   }    class func rightViewController() -&gt; SidePanelViewController? {     return mainStoryboard().instantiateViewControllerWithIdentifier("RightViewController") as? SidePanelViewController   }    class func centerViewController() -&gt; CenterViewController? {     return mainStoryboard().instantiateViewControllerWithIdentifier("CenterViewController") as? CenterViewController   }  } </code></pre>  <p>SidePanelViewController:</p>  <pre><code>import UIKit  protocol SidePanelViewControllerDelegate {     func itemSelected(item: MenuItem) }  class SidePanelViewController: UIViewController {    @IBOutlet weak var tableView: UITableView!   var delegate: SidePanelViewControllerDelegate?    var animals: Array&lt;Animal&gt;!    struct TableView {     struct CellIdentifiers {       static let AnimalCell = "AnimalCell"     }   }    override func viewDidLoad() {     super.viewDidLoad()      tableView.reloadData()   }  }  // MARK: Table View Data Source  extension SidePanelViewController: UITableViewDataSource {    func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int {     return 1   }      func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {         return 3     }    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell {     let cell = tableView.dequeueReusableCellWithIdentifier(TableView.CellIdentifiers.AnimalCell, forIndexPath: indexPath) as! AnimalCell     cell.configureForAnimal(animals[indexPath.row])     return cell   }  }  // Mark: Table View Delegate  extension SidePanelViewController: UITableViewDelegate {     func tableView(tableView: UITableView!, didSelectRowAtIndexPath indexPath: NSIndexPath!) {         let selectedAnimal = animals[indexPath.row]         delegate?.itemSelected(MenuItem(rawValue: indexPath.row)!)     } }  enum MenuItem: Int {     case Home     case Animals     case Settings      func viewController() -&gt; UIViewController {         switch (self) {         case Home: return {             let vc = UIViewController();             vc.view.backgroundColor = UIColor.greenColor();             return vc             }()         case Animals: return UIStoryboard.centerViewController()!         case Settings: return {             let vc = UIViewController();             vc.view.backgroundColor = UIColor.orangeColor();             return vc             }()         }     } }  class AnimalCell: UITableViewCell {    @IBOutlet weak var animalImageView: UIImageView!   @IBOutlet weak var imageNameLabel: UILabel!   @IBOutlet weak var imageCreatorLabel: UILabel!    func configureForAnimal(animal: Animal) {     animalImageView.image = animal.image     imageNameLabel.text = animal.title     imageCreatorLabel.text = animal.creator   }  }   private extension UIStoryboard {     class func mainStoryboard() -&gt; UIStoryboard { return UIStoryboard(name: "Main", bundle: NSBundle.mainBundle()) }      class func leftViewController() -&gt; SidePanelViewController? {         return mainStoryboard().instantiateViewControllerWithIdentifier("LeftViewController") as? SidePanelViewController     }      class func rightViewController() -&gt; SidePanelViewController? {         return mainStoryboard().instantiateViewControllerWithIdentifier("RightViewController") as? SidePanelViewController     }      class func centerViewController() -&gt; CenterViewController? {         return mainStoryboard().instantiateViewControllerWithIdentifier("CenterViewController") as? CenterViewController     }  } </code></pre>  <p>When I run and I slide the left or right menu, it's slinding a black window instead of the menu.</p>