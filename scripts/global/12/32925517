<p>My Travis CI builds are failing when it tries to run RSpec. Here is my <code>.travis.yml</code>:</p>  <pre><code>language: ruby script: - export RAILS_ENV=test - bundle exec rake db:create db:schema:load db:test:prepare - bundle exec rake cucumber - bundle exec rspec </code></pre>  <p>The first three script steps complete successfully and I get <code>Done. Your build exited with 0.</code> (<a href="https://travis-ci.org/deeprog/goalify/builds/83443599" rel="nofollow">here</a>)</p>  <p>But when I add the fourth step (<code>bundle exec rspec</code>) I get <code>Done. Your build exited with 1.</code> (<a href="https://travis-ci.org/deeprog/goalify/builds/83444088" rel="nofollow">here</a>)</p>  <p>The error in the build (<code>uninitialized constant CommentsController (NameError)</code>) comes from the first line in th first file in the "spec/" folder (<code>comments_controller_spec.rb</code>). Here are the error details from Travis:</p>  <pre><code>$ bundle exec rspec /home/travis/build/deeprog/goalify/spec/controllers/comments_controller_spec.rb:1:in `&lt;top (required)&gt;': uninitialized constant CommentsController (NameError) from /home/travis/build/deeprog/goalify/vendor/bundle/ruby/2.2.0/gems/rspec-core-3.3.2/lib/rspec/core/configuration.rb:1327:in `load' from /home/travis/build/deeprog/goalify/vendor/bundle/ruby/2.2.0/gems/rspec-core-3.3.2/lib/rspec/core/configuration.rb:1327:in `block in load_spec_files' from /home/travis/build/deeprog/goalify/vendor/bundle/ruby/2.2.0/gems/rspec-core-3.3.2/lib/rspec/core/configuration.rb:1325:in `each' from /home/travis/build/deeprog/goalify/vendor/bundle/ruby/2.2.0/gems/rspec-core-3.3.2/lib/rspec/core/configuration.rb:1325:in `load_spec_files' from /home/travis/build/deeprog/goalify/vendor/bundle/ruby/2.2.0/gems/rspec-core-3.3.2/lib/rspec/core/runner.rb:102:in `setup' from /home/travis/build/deeprog/goalify/vendor/bundle/ruby/2.2.0/gems/rspec-core-3.3.2/lib/rspec/core/runner.rb:88:in `run' from /home/travis/build/deeprog/goalify/vendor/bundle/ruby/2.2.0/gems/rspec-core-3.3.2/lib/rspec/core/runner.rb:73:in `run' from /home/travis/build/deeprog/goalify/vendor/bundle/ruby/2.2.0/gems/rspec-core-3.3.2/lib/rspec/core/runner.rb:41:in `invoke' from /home/travis/build/deeprog/goalify/vendor/bundle/ruby/2.2.0/gems/rspec-core-3.3.2/exe/rspec:4:in `&lt;top (required)&gt;' from /home/travis/build/deeprog/goalify/vendor/bundle/ruby/2.2.0/bin/rspec:23:in `load' from /home/travis/build/deeprog/goalify/vendor/bundle/ruby/2.2.0/bin/rspec:23:in `&lt;main&gt;' The command "bundle exec rspec" exited with 1. </code></pre>  <p>I am stumped about this error. I have tried adding <code>require 'rails-helper'</code>/<code>require 'spec_helper'</code> to the top of the spec, but that didn't help. I've also tried running <code>rake</code> instead of <code>bundle exec rspec</code>, but that gives the same error.</p>  <p>The app currently lives at a relative root (<code>'/goalify'</code>), so to get the tests to run locally I had to set <code>config.relative_url_root = nil</code> in <code>test.rb</code>. But removing that line doesn't fix it on Travis, either. I've also added any required environment variables to Travis.</p>  <p>Here is some more info:</p>  <p><strong>Gemfile:</strong></p>  <pre><code>group :development, :test do   gem 'byebug'   gem 'cucumber-rails', require: false   gem 'database_cleaner'   gem 'factory_girl_rails'   gem 'rspec-rails'   gem 'simplecov', require: false   gem 'spring'   gem 'spring-commands-rspec'   gem 'travis' end </code></pre>  <p><strong>.rspec</strong></p>  <pre><code>--color --format documentation --require spec_helper --require rails_helper </code></pre>  <p>And here is the <a href="https://github.com/deeprog/goalify" rel="nofollow">source on GitHub</a>.</p>  <p><strong>EDIT:</strong></p>  <p>Thanks to @sam-d for pointing out the answer!</p>  <p>I added <code>require 'rails_helper'</code> to <code>comments_controller_spec.rb</code> and it started working. Which I thought was weird because I didn't need that extra <code>require</code> locally. Then I realized my <code>.rspec</code> file (where I send my <code>require</code>s to RSpec) is in my <code>.gitignore</code> file - so Travis wasn't seeing the includes. I added all the switches to the fourth step in the scripts section so my new <code>travis.yml</code> is:</p>  <pre><code>script: - export RAILS_ENV=test - bundle exec rake db:create db:schema:load db:test:prepare - bundle exec rake cucumber - bundle exec rspec --color --format documentation --require spec_helper --require rails_helper </code></pre>  <p>And now I get <code>The command "bundle exec rspec --color --format documentation --require spec_helper --require rails_helper" exited with 0.</code> from Travis.</p>