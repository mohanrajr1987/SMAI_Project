<p>I'm creating an application to check what files have been edited in each commit to SVN.</p>  <p>I'm wanting to show only the part of the file path that has change. If the file path has common part i want to substring then to only show the different parts of the file path the have changed.</p>  <p>Example:</p>  <p>Path 1:</p>  <p>/GEM4/trunk/src/Tools/TaxMarkerUpdateTool/Tax Marker Ripper v1/Tax Marker Ripper v1.csproj</p>  <p>Path 2:</p>  <p>/GEM4/trunk/src/Tools/TaxMarkerUpdateTool/Tax Marker Ripper v1/DataModifier.cs</p>  <p>So the similar bit of /GEM4/trunk/src/Tools/TaxMarkerUpdateTool/Tax Marker Ripper v1/ i want to substring and show:</p>  <p>Tax Marker Ripper v1.csproj</p>  <p>DataModifier.cs</p>  <p>My code looks like this:</p>  <pre><code>private Dictionary&lt;string, int&gt; CreateDictionary(log logInstance)     {         Dictionary&lt;string, int&gt; dictionary = new Dictionary&lt;string, int&gt;();         int commonStringNumber = FindCommonString(logInstance);         for (int entryIdex = 0; entryIdex &lt; logInstance.logentry.Count(); entryIdex++)         {             logLogentry entry = logInstance.logentry[entryIdex];              for (int pathIdex = 0; pathIdex &lt; entry.paths.Count(); pathIdex++)             {                 logLogentryPath path = entry.paths[pathIdex];                 string filePath = path.Value;                   if (filePath.Length &gt; 63)                 {                     string cutPath = filePath.Substring(+);                     if (dictionary.ContainsKey(cutPath))                     {                         dictionary[cutPath]++;                     }                     else                     {                         dictionary.Add(cutPath, 1);                     }                 }             }         }         return dictionary;     }      private static int FindCommonString(log logInstance)     {         string fCompare = logInstance.logentry[0].paths[0].Value;         for (int entryIdex = 0; entryIdex &lt; logInstance.logentry.Count(); entryIdex++)         {             logLogentry entry = logInstance.logentry[entryIdex];              for (int pathIdex = 0; pathIdex &lt; entry.paths.Count(); pathIdex++)             {                 logLogentryPath path = entry.paths[pathIdex];                 string fcheck = path.Value;                 return similarString(fCompare, fcheck);              }         }         return;     }      private static int similarString(string fCompare, string fcheck)     {         string common = String.Empty;         for (int i = 0; i &lt; length; i++)         {              if (fCompare[i] == fcheck[i])             {                 common += fCompare[i];             }             else             {                 break;             }         }          return common;     } </code></pre>  <p>I'm lost as to where I now go. I know I want to have the part that is the same in fCompare with the path that is being check in fCheck. I also know that I need to replace fCompare is it gets smaller but i'm sure what to write for that.</p>