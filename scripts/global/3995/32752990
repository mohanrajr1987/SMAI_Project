<p>Some context: I'm using Bigcommerce (which doesn't support PHP) to design a store-front and want to allow users to add a product inside of the checkout page <em>without</em> redirecting them to the cart page.  I know this is possible because on the front page, there are some pre-programmed buttons which are simply <code>&lt;a href="http://somestore.com/cart.php?action=add&amp;product_id=9001"&gt;</code> tags with some button-like styling.  These pull up a modal, and most importantly <em>add the product to the cart</em> - both without redirect.</p>  <p>So at first this struck me as a simple problem - just <code>$.ajax</code> to the page and be done with it, but then I ran into the old <code>Access-Control-Allow-Origin</code> error, which is strange, since I'm writing my Javascript on the same domain that I'm trying to hit, only the sub-domain is different (/cart vs /checkout).  I decided to look deeper at the request made by this magical button.  The only Request Header which is not present on my own dysfunctional version of this request is <code>X-Requested-With</code> which I of course tried to add to my <code>XMLHttpRequest</code> unsuccessfully.</p>  <p>The second thing I noticed was an extra URL paramter which wasn't originally listed in the source, <code>fastcart=1</code> so I tried adding that, and was taken to a PHP page I obviously wasn't meant to see.  It's easily roughly 200 lines of spaghetti, and I'm not sure I can post it here.  It's obvious that a script somewhere was taking this <code>href</code> and using it to make a GET request, but how?  I've tried both <code>XMLHttpRequest</code>, and <code>ajax</code>, but both give me the <code>Access-Control-Allow-Origin</code> response.</p>  <p>I've seen the use of a technique where you disallow the redirect of the page on an <code>&lt;a href&gt;</code> by adding an <code>.click(function(e)</code> to it, and calling either <code>return false</code> or <code>e.preventDefault();</code> but these simply don't allow my <code>&lt;a href&gt;</code> to accomplish anything at all, let alone some ninja <code>GET</code> request.  My question is ultimately about why my own attempts at a <code>GET</code> request to this page have failed, when a simple <code>&lt;a href&gt;</code> has been able to bypass SOP and make the request almost in secret.</p>  <p>Obviously I'll have to spend some more time looking at the PHP script I was taken to by the extra parameter.  Nevertheless, this has turned out to be a much bigger mystery than I had originally thought it would be, teaching me a lot along the way.  Unfortunately, I haven't solved it yet, and I really need to get this functionality working.  If it's helpful for me of the source on these requests, I'll be happy to, but for now I've run out of time and have to get some rest. If some one with more web development experience can help, I would be extremely grateful!  </p>