<p>I have a large number of commands and would rather not change all of them. So I want to turn command objects into codeblock objects and add their parameters to an invoke so I can later on execute them on another computer. </p>  <p>The end result is the following code: string server=cpu1.com</p>  <pre><code>    public void ExecuteRemote(Command basis) {          RunspaceInvoke invoke = new RunspaceInvoke();         Runspace runspace = RunspaceFactory.CreateRunspace();         runspace.Open();         Pipeline pipeLine = runspace.CreatePipeline();         ScriptBlock s=basis.CommandText);//&lt;&lt;&lt;&lt;this does not work, how can I fix this?          Command invokeScript = new Command("Invoke-Command");          invokeScript.Parameters.Add("ComputerName", server);         invokeScript.Parameters.Add("scriptBlock", s);         invokeScript.Parameters.Join(basis.Parameters); // and this does not work either?          pipeLine.Commands.Add(invokeScript);         Collection&lt;PSObject&gt; commandResults = pipeLine.Invoke();  } </code></pre>  <p>So anybody know how to do this? </p>  <p>The two lines that I marked are not working (don't compile) and I would like to know how I could fix them. </p>  <pre><code>    ScriptBlock s=basis.CommandText);//&lt;&lt;&lt;&lt;this does not work, how can I fix this? </code></pre>  <p>should load the command from basis into the scriptblock so it can later be used for executing the code and </p>  <pre><code>    invokeScript.Parameters.Join(basis.Parameters); // and this does not work either? </code></pre>  <p>Is an attempt to move the parameters from basis into the invokescript.</p>  <p>I have based my answer on <a href="https://stackoverflow.com/questions/18277308/invoke-remote-powershell-command-from-c-sharp">Invoke remote powershell command from C#</a> however as I cannot change the parameters for each function (there are a lot of commands to work trough) I would like to just take the command and execute that. </p>  <p>Edit after looking at @Keith hill's answer </p>  <p>Console.WriteLine("creating invoke");             RunspaceInvoke invoke = new RunspaceInvoke();</p>  <pre><code>        Runspace runspace = RunspaceFactory.CreateRunspace();         runspace.Open();         Console.WriteLine("creating pipeline");          Pipeline pipeLine = runspace.CreatePipeline();         Console.WriteLine("creating scriptblock");         ScriptBlock s = ScriptBlock.Create(basis.CommandText);         Command invokeScript = new Command("Invoke-Command");         Console.WriteLine("adding parameter1");         invokeScript.Parameters.Add("ComputerName", "test1.com");          invokeScript.Parameters.Add("scriptBlock", s);          foreach (var p in basis.Parameters)            {              invokeScript.Parameters.Add(p.Name, p.Value);         }          pipeLine.Commands.Add(invokeScript); Console.WriteLine("res");         Collection&lt;PSObject&gt; commandResults = pipeLine.Invoke(); </code></pre>  <p>I get the error that no parameter could be found by the name "Name" when asked to add the followign command:              Command MaakActiveDirectoryOU = new Command("New-ADOrganizationalUnit");</p>  <pre><code>        MaakActiveDirectoryOU.Parameters.Add("Name", KlantNaam);         MaakActiveDirectoryOU.Parameters.Add("Path", WebConfigurationManager.AppSettings["SharedOU"].ToString());         ExecuteRemote2(MaakActiveDirectoryOU); </code></pre>  <p>This command works fine when executed locally anybody got a clue? </p>