<p>Let's assume I have the next pseudo code to implement Command based change in terms of CQRS (actually, Event Sourcing is questionable as well) in my WebApi project:</p>  <pre><code>public IHttpActionResult ChangeVendor(ChangeVendorModel changeModel) {     /* 1 */ // user input validation     /* 2 */ var changeCommand = changeModel.MapTo&lt;ChangeVendorCommand&gt;();        /* 3 */ bus.Send(changeCommand); // start the change processing     /* 4 */ return Ok();  } </code></pre>  <p><strong>The explanation:</strong></p>  <ol> <li>We perform a basic user input validation (as string length or only     positive numbers) but not a business validation (as this Vendor is     in the black list).</li> <li>We convert the input model to a command for a bus.</li> <li>We send the prepared change command through the bus to be processed.</li> <li>By this we mean the change was applied and a domain model is available for the further manipulations.</li> </ol>  <p><strong>The questions:</strong></p>  <p>a. The bus processing is asynchronous. How can I be sure (after step 4)     that my changes were applied and the app is ready to render success     view displaying a changed record from a database designed for     querying purposes?</p>  <p>b. Let's say the record version conflict happened (data violation) or a model was not passed through the business rules (domain violation). How can I instantly notify a user about this from the bus? <em>In a bad designed system, a user could see a successful result because we successfully scheduled the change on the bus and later on they could see the notification with an error when the attempt to apply the actual change was made.</em></p>