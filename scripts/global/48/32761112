<p>I am working on building a Restful Web Service in Java and it came to light yesterday that they want to have <code>"pluggable"/optional components/api's</code> that may be mixed and matched to make a webservice that offers different options to different people(different installs).  </p>  <p>I am using <code>Java/Netbeans/Tomee</code>.  We are quite far along now and pulling it apart is going to be a bit painful but I thought I might ask here how I may have designed it had I known this in the beginning. </p>  <p>So, basically if I have facades X,Y,Z they want to potentially be able to install only X and Z and not have any of the functionality of Y present in the install.  They do not just want Y disabled which would be too simple. Problem is since this was not a requirement in the beginning Y is not easily removable because it is tied into Factory Pattern code for DAO. </p>  <p>Any suggestions on possible design decisions in the beginning that would have made this simple?</p>