<p>By reading at several articles posted here, I get mismatched information about how to properly configure a project. </p>  <p><strong>I am looking for advise about how the pros do it at the enterprise level.</strong></p>  <p>I see different schools of though about this, some people design in a truly N-Tier fashion, others prefer to use EF Code First directly in the MVC application and have FAT models and sort of have one big MVC app with logical separation of concerns, etc.</p>  <p>So for a mid-size project this is my set up and I want to ask for your opinions about it.</p>  <p><strong>MVC application</strong></p>  <p>Models -- Here my models have just what the view needs, validation logic, etc. These models are designed to pass data between the controller and views only.</p>  <p>Controllers -- Call the service layer where business logic lives and gets domain models back if needed. Converts domain models into view models and vice-versa.</p>  <p><strong>Service layer</strong></p>  <p>This is were the business (domain) logic lives. The service layer is also in charge of communicating with the data layer to perform CRUD operations.  The service layer returns domain models to the controller in the MVC application and also expects domain models when invoked.</p>  <p><strong>Data Repository layer</strong></p>  <p>The data layer is a thin wrapper around EF and performs CRUD operations. usually I will have a Code First approach where entity models are created for me by EF. I convert the EF code first models to domain models and return these to the service layer. The data layer also expect domain models from the service layer that in turn I convert to EF code first models and persist to the DB.</p>  <p><strong>Domain Model layer</strong></p>  <p>These are the domain models that are used and shared thorough the applications layers.</p>  <p>What's best design? What's expected at the enterprise level?</p>