<p>I have an application which currently has the following setup:</p>  <ul> <li>Replicated MySQL DB</li> <li>Distributed Work Queue</li> <li>Several Work Queue Consumers/Workers</li> <li>Single producer which adds jobs to the queue (server in red below)</li> </ul>  <p>The setup looks something like this:</p>  <p><img src="http://i.stack.imgur.com/CEKJg.png" width="400"></p>  <p>The <strong>job producer</strong> queries the database for new items which need to be added to its list of recurring jobs that need to be added to the work queue every N minutes.  This job producer is the only node in my whole architecture which if failed, would cause the entire process to fail.  I can have a DB server, a queue server, or several worker servers fail and the process would continue to operate.</p>  <p>How can I modify the job producer so that it isn't a single point of failure?  I don't know how to distribute the work it does, which is querying the database every N minutes and enqueuing new jobs to be processed.  It is a singular task.</p>  <p>I considered having multiple producers, and each producer would use modulus to only process 1/P jobs where P is the number of producers.  </p>  <p>Something like:</p>  <pre><code>itemsToBeProcess = db.FetchItems() for (item in itemsToBeProcessed) {     if item.id % producerNumber == 0) // Queue job } </code></pre>  <p>This would divide the work of the producers to multiple servers.  However, this still isn't ideal, because if a single producer goes down than 1/P worth of jobs will stop being processed.  So, it would still be a partial failure.</p>  <p>Can anyone give any guidance on how I can make this job producer not be a single point of failure in my application?</p>