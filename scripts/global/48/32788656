<p>I want to store large number (millions) of user avatars in the file system. But the files must be uniformly distributed in the file system so that it scales well as more files added.</p>  <p><strong>The avatars are 5-10KB in size images. The application is ASP.NET MVC (C#)</strong></p>  <p>Storing:</p>  <p>Consider these following unique user ids: bob, mike, robert, johnson The avatar names will be bob.jog, mike.jpg, robert.jpg, johnson.jpg</p>  <p>HTML elements to render avatar:</p>  <pre><code>&lt;img class="avatar" src="www.xyz.com/getAvatar?user=bob" /&gt; &lt;img class="avatar" src="www.xyz.com/getAvatar?user=mike" /&gt; </code></pre>  <p>This will go to the getAvatar controller action which will get the avatar from physical location and write to response buffer</p>  <p><strong>Current Architecture:</strong></p>  <pre><code>[HttpPost]         public ActionResult SaveAvatar(HttpPostedFile avatarImage, string user) {    //get MD5 hash of user (bob=9F9D51BC70EF21CA5C14F307980A29D8)    //split MD5 hash string to get the folders (\9F\9D\51\BC\)    //save avatar at path &lt;file_server&gt;\images\9F\9D\51\BC\bob.jpg }  [HttpGet]         public ActionResult GetAvatar(string user) {    //get MD5 hash of user (bob=9F9D51BC70EF21CA5C14F307980A29D8)    //find the file location from MD5 hash (9F\9D\51\BC\)    //return &lt;file_server&gt;\images\9F\9D\51\BC\bob.jpg } </code></pre>  <p>Am I way off on this?  If yes, how would you architect this?</p>  <p>I could use the userid (auto generated as new UUID) of the user from database but in that case I have to store userid in all my tables where I have username</p>  <p>Thanks for reading</p>