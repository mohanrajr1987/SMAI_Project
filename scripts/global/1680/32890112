<p>I've put together the following class (with the help of others in <a href="http://stackoverflow.com/questions/32886884/swift-variable-comparison-where-type-is-not-known/">Swift variable comparison where type is not known</a>).</p>  <p>What I'm trying to achieve is to pass in a closure to SearchOption and when calling <code>getSelectedItemAsString</code> it will run the closure passing in the <code>searchOption</code> as a parameter and return the result.</p>  <p>But because <code>selectedOption</code> is a generic type it's complaining <code>Cannot convert value of type '[T]' to expected argument type '[CustomStringConvertible]'</code> in <code>getSelectedItemAsString()</code></p>  <pre><code>public func getSelectedItemAsString() -&gt; String {     if self.searchOptionToString != nil &amp;&amp; self.selectedOption != nil {         return self.searchOptionToString!(selectedOption!)     }     return "" } </code></pre>  <p>I'm not sure what to do here. The implementation of converting the searchOption to a string will be different for each SearchOption which is why I need the closure.</p>  <p><strong>The full class</strong></p>  <pre><code>public typealias searchOptionToCloudSearchQuery = ([CustomStringConvertible]) -&gt; String  public class SearchOption&lt;T: Equatable&gt; {      private var title: String     private var allowAny: Bool     private var allowMultiple: Bool     private var dependencies: [SearchOption]?      private var selectedOption: [T]?      private var searchOptionToString: searchOptionToCloudSearchQuery?      init(title: String, allowAny: Bool, allowMultiple: Bool, dependencies: [SearchOption]?) {         self.title = title         self.allowAny = allowAny         self.allowMultiple = allowMultiple         self.dependencies = dependencies     }      public func setSelectedItem(selectedOption: T) -&gt; Void {         if self.selectedOption == nil || !self.allowMultiple{             self.selectedOption = [T]()         }         self.selectedOption?.append(selectedOption)     }      public func getSelectedItem() -&gt; [T]? {         return self.selectedOption     }      public func setSearchOptionToCloudSearchQueryClosure(closure: searchOptionToCloudSearchQuery) -&gt; Void {         self.searchOptionToString = closure     }      public func getSelectedItemAsString() -&gt; String {         if self.searchOptionToString != nil &amp;&amp; self.selectedOption != nil {             return self.searchOptionToString!(selectedOption!)         }         return ""     }  } </code></pre>  <p><strong>The implementation</strong></p>  <pre><code>var make: SearchOption = SearchOption&lt;String&gt;(title: "Make", allowAny: true, allowMultiple: true, dependencies: nil)  make.setSelectedItem("Vauxhall")  var closure: searchOptionToCloudSearchQuery = {(selectedOptions) in      var stringBuilder = ""     for item in selectedOptions {         if item is String {             stringBuilder += item as! String         }     }     return stringBuilder  }  make.setSearchOptionToCloudSearchQueryClosure(closure) make.getSelectedItemAsString() </code></pre>  <p><strong>The Error</strong></p>  <pre><code>Playground execution failed: /var/folders/b5/3jvkp2jd5q5fmps2hrw91781cmf7f_/T/./lldb/570/playground442.swift:38:61: error: cannot convert value of type '[T]' to expected argument type '[CustomStringConvertible]'             return self.searchOptionToString!(selectedOption!)                                               ~~~~~~~~~~~~~~^ </code></pre>