<p><strong>This is a browser.</strong> Js-code sample is really simple. </p>  <p><strong>Case 1:</strong></p>  <p><div class="snippet" data-lang="js" data-hide="false"> <div class="snippet-code"> <pre class="snippet-code-js lang-js prettyprint-override"><code>var settingsImportantPrefix = {      primitiveProperty: 1 };  var Model = function() {      var self = this;      self.getA = function() {           return settings.primitiveProperty;      } };  var factory = function(settings) {      return (function(settings) {           return new Model();      }(settings)); }  var test = factory(settingsImportantPrefix ); test.getA();</code></pre> </div> </div> </p>  <p>And it doesn't work for me. Closure settings in this example are NOT visible in the new instance of the model returned!</p>  <p>But on the other hand.</p>  <p><strong>Case 2:</strong></p>  <p><div class="snippet" data-lang="js" data-hide="false"> <div class="snippet-code"> <pre class="snippet-code-js lang-js prettyprint-override"><code>var settingsImportantPrefix = {   primitiveProperty: 1 };  var factory = function(settings) {   return (function(settings) {     var Model = function() {       var self = this;       self.getA = function() {         return settings.primitiveProperty;       }     };     return new Model();   }(settings)); };  var test = factory(settingsImportantPrefix); test.getA() //1</code></pre> </div> </div> </p>  <p>Works as it is supoosed to. Settings are visible inside of the new instance.</p>  <p><strong><em>It seems to me a bit strange that a closure doesn't create its own scope to store values. Is it a "closure definition" requirement to keep Model function  body inside of closure body?</em></strong></p>  <p><strong><em>Is there way to make Model and Factory independent?</em></strong></p>  <p>My aim is to separate Factory and Model. I pass settings object (wrapped into Model) as a parameter, so I need to check if it is an instance of Model (that is why Model has to be independent). </p>  <p>P.S.: I don't like the idea to return Model in the following way Factory.Model.</p>