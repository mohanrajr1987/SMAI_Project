<p>I'm wondering what is the memory footprint of a JavaScript closure?<br> What does this amount depend on?</p>  <p>The first obvious factor for memory consumption by a closure is the number of variables it captures and theirs sizes.<br> Ok, let's assume that we have a simple closure:</p>  <pre><code>var counter = (function () {     var num = 0;      return function () {         return ++num;      } }()); </code></pre>  <p>How much memory it will take?<br> If it tough to say the exact numbers, I'd like to know at least the magnitude of those. Is it 10, 100 bytes or even more?<br> Does it significantly different between JavaScript implementations?</p>  <p>I hope answers to those questions, especially with some numbers, will help me and other readers clarify:<br> Is it a good practice to use closures as much as you need?<br> Or you should use it with care and avoid it when possible because the overhead from using a closure can probably outweigh benefits it gives.</p>  <p>In other words, I hope I'll be able to better understand which situations are worth using a closure and which aren't.</p>  <p><strong>EDIT 1</strong>:<br> To address the @MaximillianLaumeister's comment that the questions is too broad, let's rephrase it a bit:<br> <strong>Which parts in memory such a closure consist of? How big they are relative to each other and maybe in absolute numbers? Are they the same across JavaScript engines?</strong><br> From the comments below, the parts should be:</p>  <ol> <li>an object with the same number of properties as captured variables (@Dan)</li> <li>the by far largest part of the closure is its (compiled) code (@Bergi)</li> </ol>