<p>I always implement my application with JavaScript prototype. Like below.</p>  <pre><code>        //Shape - Base Class         function Shape() {              this.x = 0;             this.y = 0;         };          Shape.prototype.move = function(x, y) {             this.x += x;             this.y += y;             console.log("Shape moved.");         };          // Rectangle - subclass         function Rectangle() {             Shape.call(this); //call super constructor.         };          Rectangle.prototype = Object.create(Shape.prototype);          var rect = new Rectangle();          rect.move(6,2);          alert(rect.x);         alert(rect.y); </code></pre>  <p>IMO It is clear and without trouble to understand. But when you look at Closure. </p>  <pre><code>var name = "The Window"; 　　var object = { 　　　　name : "My Object", 　　　　getNameFunc : function(){ 　　　　　　return function(){ 　　　　　　　　return this.name; 　　　　　　}; 　　　　} 　　}; 　　alert(object.getNameFunc()()); </code></pre>  <p>When I first met the <code>Closure</code>. I almost can not figure out the <code>This</code> and other variable. But I saw in many library like JQuery Closure is used very often. So I have some questions. Why we have to use the Closure to implement the library. It is hard to understand. and sometimes It lost the traditional OOP design. and Honestly I have to say it hard to be understand .</p>  <p>Could someone please tell in what case we should consider <code>Closure</code> not <code>Prototype</code>? and What is the benefit of <code>Closure</code> against <code>Prototype</code>. Thanks.</p>  <p><strong>Updated</strong></p>  <p>What I can figure out the good side of Closure is</p>  <ol> <li><p>Avoid to use the global variable. (Because Closure care with its own private variable which is invisible from outside.) But I think prototype also can make it . Right ?</p></li> <li><p>other ?</p></li> </ol>