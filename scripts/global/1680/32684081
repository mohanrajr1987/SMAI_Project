<p>I'm having a hard time understanding the scope of variables in python-decorators. I read somewhere that non-local variables are stored as read-only. But somehow dictionaries seem to be an exception.</p>  <pre><code>def outer(f):     def inner():         print val         return f()     val =1     return inner  def outer2(f):     def inner2():         val+=1         print val         return f()     val =1     return inner2  def outer3(f):     def inner3():         d[0]+=1         print d         return f()     d ={0:0}     return inner3  import doctest  class Test: """ &gt;&gt;&gt; function = lambda : 'Function called'  &gt;&gt;&gt; f1=outer(function) &gt;&gt;&gt; f1() 1 'Function called'  &gt;&gt;&gt; f2=outer2(function) &gt;&gt;&gt; f2() Traceback (most recent call last):   File "&lt;stdin&gt;", line 1, in &lt;module&gt;   File "&lt;stdin&gt;", line 3, in inner2 UnboundLocalError: local variable 'val' referenced before assignment  &gt;&gt;&gt; f3=outer3(function) &gt;&gt;&gt; f3() {0: 1} 'Function called' """  print (doctest.testmod()) </code></pre>  <p>Why isn't val in the scope of f2?<br> Why doesn't a dictionary have the same problem as an integer?  </p>  <p>Thanks in advance!</p>