<p>Testing some Python code today I tried the following code: </p>  <p>(The following runs on Python 3.2+, although previous versions will raise a <code>SyntaxError</code> when <code>del</code> is used and a variable is referenced in an enclosing scope)</p>  <pre><code>def x():     N = 200     def y():             print(N)     del N     y() x()  NameError: free variable 'N' referenced before assignment in enclosing scope  </code></pre>  <p>As you can see, Python does not raises <code>NameError: global name 'N' is not defined</code>, and that made me wondering about one thing which is: </p>  <p>when <code>del</code> statement used withing the enclosing scope of a function to delete a free variable that's used inside a nested function like <code>y</code> function here and thereafter if that free variable in our case <code>N</code> was deleted through <code>del</code> statement in the enclosing scope, what <code>del</code> actually does is to delete the name's (<code>N</code>) value and keeps it bound to the enclosing scope ? </p>  <blockquote>   <p><strong>A)</strong> Is that why it raises: <code>NameError: free variable 'N' referenced before assignment...</code> rather than <code>NameError: global name 'N' is not defined</code>? </p>      <p><strong>B)</strong> How does <code>del</code> actually delete a name? Does it unbind its value and keep it in a scope ?</p> </blockquote>  <p>I found a similar case <a href="https://stackoverflow.com/questions/24707379/how-can-nameerror-free-variable-var-referenced-before-assignment-in-enclosin">here</a></p>