<p>I'm trying to parse some data that I cached using <strong>Haneke Swift</strong>. I've cached the data and have written the parser to accomplish this. This parser is in a separate class called <code>AssembleCalendar()</code>.</p>  <p>Using Haneke's <a href="https://github.com/Haneke/HanekeSwift" rel="nofollow">example code</a> for fetching, I've tried with complete and utter failure to actually return a value from the closure. </p>  <p><strong>My attempt</strong></p>  <pre><code>func getScheduledItems() -&gt; [ScheduledItem] {      var scheduledItem = [ScheduledItem]() // initialize array      let cache = Shared.dataCache     cache.fetch(key: "CalendarData").onSuccess { data in          scheduledItem = AssembleCalendar().assimilate(data) // update array         print(scheduledItem) // array returns expected value      }      print(scheduledItem) // array returns nil     return scheduledItem // returns nil } </code></pre>  <p><strong>What I know</strong></p>  <p>I understand that this is an asynchronous issue. My code isn't waiting for my <code>AssembleCalendar()</code> parser to finish. It's just running each line and returns nil long before my scheduledItem receives a value. I've tried <em>many, many solutions</em> and read quite a few examples online but I cannot figure out how to retrieve a value from this closure in this scenario.</p>  <h1>My question</h1>  <p>How can I get .fetch() to return a value before my function hits nil?</p>  <hr>  <p><strong>update:</strong></p>  <p>Here's my code in context:</p>  <pre><code>class Schedule {      var items : [ScheduledItem]      init() {         items = getScheduledItems() // Schedule.getScheduledItems()     }      func getScheduledItems(completion: (items: [ScheduledItem]) -&gt; ()) {          var scheduledItem = [ScheduledItem]() // initialize array          let cache = Shared.dataCache         cache.fetch(key: "CalendarData").onSuccess { data in              scheduledItem = AssembleCalendar().assimilate(data) // update array             print(scheduledItem) // array returns expected value             completion(items: scheduledItem)          }     } } </code></pre>