<p>I am having hard time figuring out how to make sure when to use [weak self]/[unowned self] in the closure body. In the two scenarios shown below, according to me, it depends upon if the class B owns the passed closure or not. </p>  <p><strong>Now If the implementation of class B is hidden</strong> I am not really sure how to decide on using [weak self]/[unowned self]. </p>  <p>Can someone please help me understand how you will decide ?</p>  <pre><code>/******** Scenario 1 **********/  class A {     var b:B?     let p = "Some Property of A"      init() {         print("Init of A")          self.b = B(closure: { (number) -&gt; Void in             print(self.p)       // capturing self but still no need to write [weak/unowned self]             print(number)         })     }      deinit {         print("Deinit of A")     } }  // Suppose this is a library class whose implementation is hidden class B {     init(closure:(Int-&gt;Void)) {         print("Init of B")         // ... do some work here         closure(20)     }     deinit {         print("Deinit of B")     } }  var a:A? = A() a = nil </code></pre>  <p>Output: </p>  <pre><code>//    Init of A //    Init of B //    Some Property of A //    20 //    Deinit of A //    Deinit of B </code></pre>  <p>Now the second scenario which will cause the reference cycle.</p>  <pre><code>/******** Scenario 2 **********/  class A {     var b:B?     let p = "Some Property of A"     init() {         print("Init of A")          self.b = B(closure: { (number) -&gt; Void in             print(self.p)       // capturing self but NEED to write [weak/unowned self]             print(number)         })     }      deinit {         print("Deinit of A")     } }  // Suppose this is a library class whose implementation is hidden class B {     let closure:(Int-&gt;Void)      init(closure:(Int-&gt;Void)) {         print("Init of B")         self.closure = closure     //class B owns the closure here         f()     }      func f() {         self.closure(20)     }     deinit {         print("Deinit of B")     } }  var a:A? = A() a = nil  </code></pre>