<p>Just for fun.</p>  <p>For example I have different actions on user which I want to separate intentionally in different functions.</p>  <ol> <li>request friendship</li> <li>block friendship</li> <li>cancel friend request</li> <li>...</li> </ol>  <p>And all this functions (because I want to make them distinct) receive the same parameters</p>  <ol> <li>nickname</li> <li>a completionBlock</li> </ol>  <p>so in general I would have a lot of this functions:</p>  <ol> <li><code>class func requestFriend(nickName : String, withCompletitionHandler completitionHandler : (status : Bool) -&gt; Void)</code></li> <li><code>class func acceptFriend(nickName : String, withCompletitionHandler completitionHandler : (status : Bool) -&gt; Void)</code></li> <li>...</li> </ol>  <p>Now what would be really nice to be able to do, would be something like:</p>  <pre><code>typealias UserActionTupleParameter = (nickName : String, completitionHandler : (status : Bool) -&gt; Void) </code></pre>  <p>Define the function maybe as :</p>  <pre><code>class func acceptFriend =&gt; UserActionTupleParameter { } </code></pre>  <p>And use as:</p>  <pre><code>acceptFriend(myTupleVariable) </code></pre>  <p>Instead of having the function def:</p>  <pre><code>class func acceptFriend(parametersTuple : UserActionTupleParameter) </code></pre>  <p>that will only result in calling the function as:</p>  <pre><code>class func acceptFriend((myString, myBlock)) </code></pre>  <p>Maybe I'm missing something, or I messed with parameters naming which does not let me pass the parameters without the tuple "()", but I cannot make the Xcode 7 Swift 2 accepting my intention.</p>  <p>I specifically intend to enforce using the tuple typealias definition as a func parameter in the func definition.</p>  <p>Because I know I can define the func like:</p>  <pre><code>func test (string : String, block : Block) </code></pre>  <p>and then create the tuple as:</p>  <pre><code>let tuple = (myString, myBlock) </code></pre>  <p>and call the function as:</p>  <pre><code>test(tuple) </code></pre>  <p>Some ideas? </p>