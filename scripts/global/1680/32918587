<p>I am learning about closures. This example is given as a common mistake made when making a closure:</p>  <pre><code>function assignTorpedo(name, passengerArray) {     var torpedoAssignment;     for (var i = 0; i&lt;passengerArray.length; i++) {         if (passengerArray[i] == name) {             torpedoAssignment = function() {                 alert("Ahoy, " + name + "!\n" +                 "Man your post at Torpedo #" + (i+1) + "!");             };         }     }     return torpedoAssignment; } </code></pre>  <p>Since the for loop completes before the closure is returned, the i value will not match with the name. So, I understand that the loop continues on before the return happens.</p>  <p>My question comes from this, an example of the correct way to do things:</p>  <pre><code>function makeTorpedoAssigner(passengerArray) {     return function (name) {         for (var i = 0; i&lt;passengerArray.length; i++) {             if (passengerArray[i] == name) {                 alert("Ahoy, " + name + "!\n" +                 "Man your post at Torpedo #" + (i+1) + "!");             }         }     }; } </code></pre>  <p>I don't understand why in the above example the for loop wouldn't also continue past the first time it finds a match, which would result in another mismatched i. I understand that return stops a function, but I don't understand the connection between the return and that first match since they don't happen together (visually). I understand how the code knew to stop if that return was within the if function or the for loop.</p>