<p>I have a category for <code>UIView</code> which contains this method to remove all of its <code>subviews</code>:</p>  <pre><code>- (void)empty {      for (UIView *subview in self.subviews) {         [subview removeFromSuperview];     } } </code></pre>  <p>and upon profiling my project I see multiple <em>memory leaks</em> all pointing to this code:</p>  <pre><code>[wrapperView empty]; </code></pre>  <p>which in turn calls the first method.</p>  <p>I searched on Google and found out a cleaner and better solution using:</p>  <pre><code>[self.subviews makeObjectsPerformSelector:@selector(removeFromSuperview)]; </code></pre>  <p>which doesn't create <em>memory leaks</em>.</p>  <p>My question is, why is the old solution creating memory leaks? Aren't the <code>UIView *subview</code>s released at the end of the <code>for</code> loop?</p>