<pre><code>// //  main.c //  ssshhh // //  Created by JoshSu on 15-10-2. //  Copyright (c) 2015年 JoshSu. All rights reserved. //   #include &lt;stdio.h&gt; #include &lt;string.h&gt; #include &lt;stdlib.h&gt;  struct node_ {     int value;     struct node_ *next;    }; typedef struct node_ node;     node* createnode(int num){     node *Node  =malloc(sizeof(node));     Node-&gt;value=num;     Node-&gt;next=NULL;     return Node;   }  node ** insert(node *Node, int key,int num,node **table){      if (table[key]==NULL) {         table[key]=Node ;         table[key]-&gt;next=NULL;         printf("inserted\n");         return table;      }     else if(table[key]!=NULL){         node *temp=table[key];         while (temp-&gt;next!=NULL) {             if (temp-&gt;value==num) {                 printf("duplicate\n");                 return table;             }             temp=temp-&gt;next;         }         if (temp-&gt;value==num) {             printf("duplicate\n");             return table;         }         if (temp-&gt;next==NULL) {             temp-&gt;next=Node;             printf("inserted\n");             return table;           }          }      return table; }   void search(node**table, int key, int num){      if (table[key]==NULL) {         printf("absent\n");     }     if (table[key]!=NULL) {         node *temp=table[key];          do {             if(temp-&gt;value==num){                 printf("present\n");                 return;             }             temp=temp-&gt;next;         } while (temp!=NULL);         printf("absent\n");         return;     }  }     int main(int argc, char ** argv) {     node **table=(node **)malloc(sizeof(node *) * 10000);     char *filename =argv[1];     FILE *fpointer=fopen(filename,"r");     if (fpointer==NULL) {         printf("error\n");         for (int i=0; i&lt;10000; i++) {             //printf("进行到这里%d\n",i);             node *temp2=table[i];             if (table[i]==NULL) {                 //  printf("这里NULL\n");                 free(temp2);             }             while (temp2!=NULL) {                  node *temp1=temp2;                  temp2=temp2-&gt;next;                 free(temp1);                 //  printf("free 了一次\n");             }             //free(table[i]);         }            fclose(fpointer);         return 0;      }      char alp;     int num;     while (fscanf(fpointer,"%c\t%d\n",&amp;alp,&amp;num)==2) {      //   printf("the num nd alpa is %c%d",alp,num);         if (alp-'i'==0) {              int key=abs(num)%10000;             node *Node=createnode(num);           //  printf("进行到这里\n");             table=insert(Node,key,num,table);           }          if (alp-'s'==0) {             int key=abs(num)%10000;             search(table,key,num);          } if ((alp-'i'!=0)&amp;&amp;(alp-'s'!=0)) {             fclose(fpointer);              printf("error");             fclose(fpointer);             return 0;         }                       }     for (int i=0; i&lt;10000; i++) {              node *temp2=table[i];         if (temp2==NULL) {             free(temp2);             continue;         }         while (temp2!=NULL) {              node *temp1=temp2;               temp2=temp2-&gt;next;             free(temp1);          }         //free(table[i]);     }      fclose(fpointer);      return 0; } </code></pre>  <p>//hhbhbh hbhbhh hh hbh h hbh hbbububuj h h hbhbhjbuobbjbou h h hibihbvrcxecv    </p>  <p>//njnun  b ihb i  h ihhibihb mbjkbuubihbib //jknbunjhbunjbiuh //bjnoobobnoubububububu njbhbh  bhbh  h hbhbh h hbh h hbhbh hbh h hbh hbhb //h h hbhbh h h h h h hbhbh</p>