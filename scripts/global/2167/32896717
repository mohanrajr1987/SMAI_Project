<p>I'm working on a chat with different rooms. Now I was wondering if the following code is full of memory leaks or if it's a good setup. The main problem is in the circular references and in the onSockjsServerConnection where I instantiate a new User object. Is this usable code or not. I've struggling with this for a long time and can't make a good decision on what pattern to use.</p>  <pre><code>// Modules var http = require('http'); var sockjs = require('sockjs');  // RoomServer var RoomServer = function() {      this.node = process.argv[2] || 3000;     this.host = process.argv[3] || '127.0.0.1';      this.rooms = [];      this.sockjsServer = sockjs.createServer();     this.httpServer = http.createServer();      this.sockjsServer.on('connection',this.onSockjsServerConnection(this));  }  RoomServer.prototype.onSockjsServerConnection = function(roomServer) {     return function(socket) {         var user = new User(roomServer,socket);     } }  RoomServer.prototype.addRoom = function(room) {     // add room to this.rooms }  RoomServer.prototype.deleteRoom = function(room) {     // delete room from this.rooms }  // User var User = function(roomServer,socket) {     this.roomServer = roomServer;     this.socket = socket;      this.room = new Room();      this.room.addUser(this);     this.roomServer.addRoom(this.room);      this.socket.on('data',this.onData);     this.socket.on('close',this.onClose);  }  User.prototype.onData = function(jsonData) {     console.log(jsonData);    }  User.prototype.onClose = function() {      this.roomSever.deleteRoom(this.room);     this.room.deleteUser(this);      this.roomServer = null;     this.socket = null;     this.room = null;  }  // Room var Room = function() {     this.users = []; }   Room.prototype.addUser = function(user) {     // add user to this.users }  Room.prototype.deleteUser = function(user) {     // delete user from this.users } </code></pre>