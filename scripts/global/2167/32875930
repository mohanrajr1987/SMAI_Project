<p>Consider following code:</p>  <pre><code>int main() {   int *intArPtr = new int[100];   int *intArPtr1 = intArPtr + 1;    delete [] intArPtr; //ok   //delete intArPtr; //valgrind warning, but no leaks!   //delete intArPtr1; //invalid pointer error    return 0; } </code></pre>  <p>I know that <code>delete [] intArPtr</code> is the only valid way to delete this array, but I'm just curious about following:</p>  <ol> <li>Why <code>delete intArPtr</code> doesn't yield any memory leaks? Is it undefined behavior and I'm just lucky not to have any?</li> <li>Why <code>delete intArPtr1</code> gives an error on run-time? Why doesn't it delete all elements but first from the array?</li> <li>How does C++'s runtime knows size of the allocated array (for delete [])? Is it stored somewhere?</li> </ol>