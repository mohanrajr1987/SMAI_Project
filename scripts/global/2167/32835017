<p>I have a simple program that grab data from the database and stored it in a DataSet through DataAdapter.Fill().</p>  <p>The problem I am facing is that the program's memory size keep increasing. Using process explorer, I monitor the virtual size of the program. The processes are run in a standalne build(not in unity editor).</p>  <p>2mins after the process is launch, the program sits at 824,444K virtual size, but leaving the program running for 30 mins, the program's virtual size increased to 1,722,340K.</p>  <p>(can't upload screenshot) <a href="https://drive.google.com/open?id=0B0DwzunTEqfKcDhHcXRmV2twUEE" rel="nofollow">https://drive.google.com/open?id=0B0DwzunTEqfKcDhHcXRmV2twUEE</a></p>  <p>The program only consist of 2 simple script: A helper class SQLController which manage the loading from database to dataset and a monobehavior script DataProducer that poll the database at regular interval for "update" using SQLController object.</p>  <p><strong>SQLController:</strong></p>  <pre><code> using UnityEngine;  using System.Collections;  using System.Data;  using System.Data.Sql;  using System.Data.SqlClient;  using UnityEngine.UI;  using System.Threading;   public class SQLController {       string connectionString;      string dataSource, catalog, uid, pwd;       DataSet dat_set;       public SQLController(string dataSource, string catalog, string uid, string pwd)      {          this.dataSource = dataSource;          this.catalog = catalog;          this.uid = uid;          this.pwd = pwd;      }       /// &lt;summary&gt;      /// Open a connectio to the database and query it for data with the statement input      /// &lt;/summary&gt;      /// &lt;param name="statement"&gt; The query statement to be used to query the server&lt;/param&gt;      /// &lt;returns&gt;&lt;/returns&gt;      public DataSet Load(string statement, string name)      {          connectionString = string.Format("data source={0};initial catalog={1};uid={2};pwd={3}", dataSource, catalog, uid, pwd);           using (SqlConnection dbcon = new SqlConnection(connectionString))          using (SqlDataAdapter dataAdapter = new SqlDataAdapter(statement, dbcon))          {              dat_set = new System.Data.DataSet();               dbcon.Open();              dataAdapter.Fill(dat_set, name);            }           return dat_set;      }  } </code></pre>  <p>DataProducer</p>  <pre><code> using UnityEngine;  using System.Collections;  using System.Threading;  using System.Data;  using UnityEngine.UI;  using SimpleJSON;   public class DataProducer : MonoBehaviour {        public GameObject textObj;       private string[] _configData;      private string _outputText;      private SQLController _sqlController;       private bool _toggle = true;      private bool _updating = false;       private DataSet _dataSetCache;      private Thread _dataGrabThread;       // Use this for initialization      void Start () {          _configData = new string[5];           if (LoadFromConfigFile())          {              StartCoroutine(LoadFromDB());           }      }       // Update is called once per frame      void Update () {          textObj.GetComponent&lt;Text&gt;().text = _outputText;          }       public void OnDisable()      {          // stop any running thread          if (null != _dataGrabThread &amp;&amp; _dataGrabThread.IsAlive)          {              _dataGrabThread.Abort();          }      }         IEnumerator LoadFromDB()      {          while (true)          {              if (_updating)              {                  Debug.Log("Data System Poll DataBase ignored");              }              else              {                  _updating = true;                   _dataGrabThread = new Thread(Load);                   _dataGrabThread.IsBackground = true;                  _dataGrabThread.Start();              }               yield return new WaitForSeconds(10f);          }       }       void Load()      {          string statement;          if (_toggle)          {              _toggle = !_toggle;              statement = "SELECT TOP 100000 [AIIDX],[LASTATTACKDATE],[LASTRECEIVEDDATE],[DEVICEID],[INSTANCES],[ATTACKTYPE],[SEVERITY],[STATUS] FROM AI (NOLOCK)";          }          else          {              _toggle = !_toggle;              statement = "SELECT TOP 100000 [AIIDX],[LASTATTACKDATE],[LASTRECEIVEDDATE],[DEVICEID],[SEVERITY],[STATUS] FROM AI (NOLOCK)";          }           _sqlController = new SQLController(_configData[0], _configData[1], _configData[2], _configData[3]);           _outputText = "Loading";          _dataSetCache = _sqlController.Load(statement, "TestObject");          PrintDataSet();          _updating = false;      }       /// &lt;summary&gt;      /// Convert datatable into string and print it out through a text object      /// &lt;/summary&gt;      void PrintDataSet()      {          if (null == _dataSetCache)          {              return;          }           DataTable dt = _dataSetCache.Tables["TestObject"];           if (null == dt)          {              return;          }            System.Text.StringBuilder builder = new System.Text.StringBuilder();           for (int i = 0; i &lt; 20; ++i)          {              builder.AppendFormat("{0,-5}", (i + 1) + ".");              //comp.text += string.Format("{0,-5}", (i + 1) + ".");              DataRow dr = dt.Rows[i];              for (int j = 0; j &lt; dt.Columns.Count; ++j)              {                  builder.AppendFormat("{0, -30}", dr[dt.Columns[j]].ToString());              }              builder.Append("\n");          }           _outputText = builder.ToString();           builder = null;       }       bool LoadFromConfigFile()      {          string line;          using (System.IO.StreamReader file = new System.IO.StreamReader("./config.txt"))          {              if (file == null)              {                  return false;              }               int index = 0;              while ((line = file.ReadLine()) != null)              {                  if (index &gt; _configData.Length)                  {                      Debug.LogError("Invalid Config file");                      return false;                  }                   _configData[index++] = line;              }               //if the config file does not consist of 5 data              if (index &lt; _configData.Length)              {                  Debug.LogError("Invalid Config file");                  return false;              }               return true;          }      }      } </code></pre>  <p>I am not very sure what exactly causes the memory leak but when I changed the loading from threaded</p>  <pre><code> _dataGrabThread = new Thread(Load); </code></pre>  <p>to running in the main thread,</p>  <pre><code> Load() </code></pre>  <p>the process virtual size, though still increment, but at a slower rate. From 828,312K at 2 min to 1,083,908K at 40mins.</p>