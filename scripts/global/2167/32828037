<p>Whenever I use LDAP in a web application it causes a classloader leak, and the strange thing is profilers don’t find any GC roots.</p>  <p>I’ve created a simple web application that demonstrates the leak, it only includes this class:</p>  <pre><code>@WebListener public class LDAPLeakDemo implements ServletContextListener {     public void contextInitialized(ServletContextEvent sce) {          useLDAP();     }      public void contextDestroyed(ServletContextEvent sce) {}      private void useLDAP() {         Hashtable&lt;String, Object&gt; env = new Hashtable&lt;String, Object&gt;();         env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");         env.put(Context.PROVIDER_URL, "ldap://ldap.forumsys.com:389");         env.put(Context.SECURITY_AUTHENTICATION, "simple");         env.put(Context.SECURITY_PRINCIPAL, "cn=read-only-admin,dc=example,dc=com");         env.put(Context.SECURITY_CREDENTIALS, "password");         try {             DirContext ctx = null;             try {                 ctx = new InitialDirContext(env);                 System.out.println("Created the initial context");             } finally {                 if (ctx != null) {                     ctx.close();                      System.out.println("Closed the context");                 }             }         } catch (NamingException e) {             e.printStackTrace();         }     } } </code></pre>  <p>The source code is available <a href="https://github.com/JohnA2/ldap-leak-demo" rel="nofollow">here</a>. I’m using <a href="http://www.forumsys.com/tutorials/integration-how-to/ldap/online-ldap-test-server/" rel="nofollow">a public LDAP test server</a> for this example, so it should work for everyone if you want to try it. I tried it with the latest JDK 7 and 8 and Tomcat 7 and 8 with the same result – when I click on Reload in Tomcat Web Application Manager and then on Find leaks, Tomcat reports that there’s a leak and profilers confirm it. </p>  <p>The leak is barely noticeable in this example, but it causes OutOfMemory in a big web application. I didn’t find any open JDK bugs about it.</p>  <p><strong>UPDATE 1</strong></p>  <p>I've tried to use Jetty 9.2 instead of Tomcat and I still see the leak, so it's not Tomcat's fault. Either it's a JDK bug or I'm doing something wrong.</p>  <p><strong>UPDATE 2</strong></p>  <p>Even though my example demonstrates the leak, it doesn’t demonstrate the out of memory error, because it has very small PermGen footprint. I’ve created <a href="https://github.com/JohnA2/ldap-leak-demo/tree/outofmemory-demo" rel="nofollow">another branch</a> that should be able to reproduce OutOfMemoryError. I just added Spring, Hibernate and Logback dependencies to the project to increase PermGen consumption. These dependencies have nothing to do with the leak and I could have used any others instead. The only purpose of those is to make PermGen consumption big enough to be able to get OutOfMemoryError.</p>  <p>Steps to reproduce OutOfMemoryError:</p>  <ol> <li><p>Download or clone the <a href="https://github.com/JohnA2/ldap-leak-demo/tree/outofmemory-demo" rel="nofollow">outofmemory-demo branch</a>.</p></li> <li><p>Make sure you have JDK 7 and any version of Tomcat and Maven (I used the latest versions - JDK 1.7.0_79 and Tomcat 8.0.26).</p></li> <li><p>Decrease PermGen size to be able to see the error after the first reload. Create setenv.bat (Windows) or setenv.sh (Linux) in Tomcat’s bin directory and add <code>set "JAVA_OPTS=-XX:PermSize=24m -XX:MaxPermSize=24m"</code> (Windows) or <code>export "JAVA_OPTS=-XX:PermSize=24m -XX:MaxPermSize=24m"</code> (Linux).</p></li> <li><p>Go to Tomcat’s conf directory, open tomcat-users.xml and add <code>&lt;role rolename="manager-gui"/&gt;&lt;user username="admin" password="1" roles="manager-gui"/&gt;</code> inside <code>&lt;tomcat-users&gt;&lt;/ tomcat-users&gt;</code> to be able to use Tomcat Web Application Manager.</p></li> <li><p>Go to project’s directory and use <code>mvn package</code> to build a .war.</p></li> <li><p>Go to Tomcat’s webapps directory, delete everything except the manager directory and copy the .war here.</p></li> <li><p>Run Tomcat’s start script (bin\startup.bat or bin/startup.sh) and open <a href="http://localhost:8080/manager/" rel="nofollow">http://localhost:8080/manager/</a>, use username admin and password 1.</p></li> <li><p>Click on Reload and you should see java.lang.OutOfMemoryError: PermGen space in Tomcat's console.</p></li> <li><p>Stop Tomcat, open project’s source file <code>src\main\java\org\example\LDAPLeakDemo.java</code>, remove the <code>useLDAP();</code> call and save it.</p></li> <li><p>Repeat steps 5-8, only this time there’s no OutOfMemoryError, because the LDAP code is never called.</p></li> </ol>