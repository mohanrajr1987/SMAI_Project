<p>Given the model:</p>  <pre class="lang-py prettyprint-override"><code>class Alarm(models.Model):     time = models.TimeField()     time_zone = models.CharField(         choices=[(tz, tz) for tz in pytz.common_timezones]     ) </code></pre>  <p>I can do things like this:</p>  <h3>Version 1</h3>  <pre class="lang-py prettyprint-override"><code># Get the current datetime (which is in UTC) dt = timezone.now()  # e.g., 2015-09-29 12:00:00+00:00  # Get the time from the datetime time = dt.time()  # e.g., 12:00:00  # Query for Alarms whose time has passed for alarm in Alarm.objects.filter(time__lte=time):     alarm.sound() </code></pre>  <h3>Problem 1</h3>  <p>The problem with the above scenario is that an <code>Alarm</code> configured to go off at <code>11:00:00</code> in the <code>America/New_York</code> time zone is going to be returned by the example query, since the current time I'm using for the query is <code>12:00:00</code>, even though <code>12:00:00</code> UTC is only <code>8:00:00</code> in NYC.</p>  <p>The immediate solution that comes to mind is:</p>  <h3>Version 2</h3>  <pre class="lang-py prettyprint-override"><code># Get the current datetime (which is in UTC) dt = timezone.now()  # e.g., 2015-09-29 12:00:00+00:00  # Convert the datetime to Eastern dt = timezone.localtime(dt, pytz.timezone('US/Eastern'))  # Get the time from the datetime time = now.time()  # Query for Alarms whose time has passed AND whose time zone is US/Eastern for alarm in Alarm.objects.filter(time__lte=time, time_zone='US/Eastern'):     alarm.sound() </code></pre>  <p>Since I support many time zones, I'm left with something like this:</p>  <h3>Version 2.5</h3>  <pre><code># Create a Q for OR querying query = models.Q()  # Iterate a list of time zone names for tz in pytz.common_timezones:     # Get the time in the time zone     time = timezone.localtime(dt, pytz.timezone(tz)).time()      # Add an "OR (time &lt;= {time} AND time_zone = {tz})" clause to the query     query |= models.Q(time__lte=time, time_zone=tz)  # Use the query to filter Alarms for alarm in Alarm.objects.filter(query):     alarm.sound() </code></pre>  <h3>Plea for help</h3>  <p>I'm trying to make a queryset of <code>Alarm</code>s that are set to go off in each's respective <code>time_zone</code>.</p>  <p>There has to be a better way. Right?</p>