<p>I am trying to understand how to store an <a href="https://en.m.wikipedia.org/wiki/Unix_time" rel="nofollow">Unix timestamp</a> (that is, a number of seconds since 1970 expressed in the <a href="https://en.wikipedia.org/wiki/Coordinated_Universal_Time" rel="nofollow">UTC</a>/GMT timezone) inside an <a href="https://en.m.wikipedia.org/wiki/HSQLDB" rel="nofollow">HSQLDB</a> embedded file database. However, I have yet to understand how TZ handling works with HSQL. </p>  <p>My program will be used from different zones, so using UTC is a must. Moreover, I cannot change the default time zone (as with <code>java.util.TimeZone.setDefault</code>) as it will be embedded in other programs and therefore should not change the environment.</p>  <p><strong>My attempt</strong> - the doc states:</p>  <blockquote>   <p>When datetime values are sent to the database using the PreparedStatement or CallableStatement interfaces, the Java object is converted to the type of the prepared or callable statement parameter. This type may be DATE, TIME, or TIMESTAMP (with or without time zone). The time zone displacement is the time zone of the JDBC session.</p> </blockquote>  <p>So I use a TIMESTAMP column inside the database (without time zone - the default), and issue <code>SET TIME ZONE INTERVAL '0:00' HOUR TO MINUTE</code> (to put the session in UTC TZ) and then <code>INSERT INTO TEST VALUES(?)</code> with ? being a Java Timestamp object containing the correct Unix value (GMT related, tested  OK).</p>  <p>Sadly, in this case, the SQL log of the database shows the timestamp has been reverted back to my local time zone (+2). For a timestamp of 1442132237635 (8H17 in UTC, 10H17 in +2), we get <code>TIMESTAMP'2015-09-13 10:17:17.602000'</code> in the log. Wrong result... it seems changing the session time zone has absolutely no impact whatsoever (I've tried +14, -14... no changes). The SET order is however correctly executed - it appears in the SQL log, and the value of TIMEZONE() changes afterwards.</p>  <p><strong>Other attempts</strong></p>  <p>I've also tried to use a TIMESTAMP WITH TIME ZONE column, without setting the session TZ. In that case, the database stores 'local time +2', and I can extract the correct timestamp from it. This is borderline ridiculous - it means the HSQLDB driver takes the Java timestamp (UTC), interprets it correctly as UTC, casts it to the JVM default TZ then sends that to the DB. I don't want the TZ info in the DB - don't need it. (of note: changing the session TZ has no impact - the SQL order issued is always with my local TZ... makes you wonder what is the point of the SET TZ order)</p>  <p>And changing the default JVM TZ to UTC works but as stated above I cannot do that.</p>  <p>Also of note: <a href="http://stackoverflow.com/q/15712832/252642">this question</a> seems related but the provided answer is basically to hack every SQL order which i would like to avoid...</p>  <p><strong>My question</strong></p>  <p>How can I simply store my UTC Java timestamp inside HSQLDB? And what is the purpose of the SET TIME ZONE order?</p>  <p>Thanks for reading.</p>