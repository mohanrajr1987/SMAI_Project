<p>I am developing a library to store complex data in an Object. One of the field in this object is a date. When I set the date using setter method, it is assumed that the date object is in GMT timezone. Internally, the Date is stored as a long with the number of milliseconds from epoch. In my <code>get()</code> method, I am doing the following :</p>  <pre><code>return new Date(storedDateinMilliseconds); </code></pre>  <p>The problem is that if anyone is calling <code>toString()</code> on the returned object, it uses the default timezone to return the date. Therefore, the returned date does not always match with the date provided in GMT. Is there a way to fix this? so that the user of this implementation will always get the GMT date when they invoke <code>toString()</code>?  I tried the following :</p>  <pre><code>TimeZone.setDefault(TimeZone.getTimeZone("UTC")); </code></pre>  <p>But this would modify the default timezone of the application using it. </p>