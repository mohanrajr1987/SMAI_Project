<p>I normally need to create a nested maps in groovy. For that I have to usually check if the desired key is already present or not and then create if required. Also I need to merge maps.</p>  <p>Somehow I feel this:</p>  <pre><code>def map1 = [:] map1 &lt;&lt; ["key1" : ["atr1" : "val1"]]           //after some code  map1 &lt;&lt; ["key1" : ["atr2" : "val2"]]           //after some code  map1 &lt;&lt; ["key1" : ["atr1" : "val3"]] println map1 </code></pre>  <p>should print this:</p>  <pre><code>[key1:[atr1:val3, atr2:val2]] </code></pre>  <p>But it prints just:</p>  <pre><code>[key1:[atr1:val3]] </code></pre>  <p>For that I need to do:</p>  <pre><code>def map1 = [:] if(!map1["key1"])     map1["key1"] = [:] map1["key1"] &lt;&lt; ["atr1" : "val1"]      //after some code  if(!map1["key1"])     map1["key1"] = [:] map1["key1"] &lt;&lt; ["atr2" : "val2"]      //after some code  if(!map1["key1"])     map1["key1"] = [:] map1["key1"] &lt;&lt; ["atr1" : "val3"] </code></pre>  <p>Is there any way to eliminate:</p>  <pre><code>if(!map1["key1"])    map1["key1"] = [:] </code></pre>  <p>may be using safe navigation operator-like stuff, implicitly check for null and instantiate</p>