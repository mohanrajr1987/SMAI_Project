<p>I have SAP Crystal Reports for Microsoft Visual Studio version 13.0.14.1720.  I am trying to display a report in a C# Windows Forms application.  The report is failing now with an ArgumentOutOfRangeException.  The stack trace is below:</p>  <pre><code>System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.  Parameter name: index at System.Collections.ArrayList.get_Item(Int32 index)  at CrystalDecisions.Shared.PageRender.draw_FieldObjectInstance(FieldObjectInstance fieldObject, Graphics g)  at CrystalDecisions.Shared.PageRender.draw_ReportObjectInstance(ReportObjectInstance instance, Graphics g, Rectangle clipRect)  at CrystalDecisions.Shared.PageRender.draw_SectionInstance(SectionInstance section, Graphics g, Rectangle clipRect)  at CrystalDecisions.Shared.PageRender.Render(PageObject page, Graphics g, Graphics device_g)  at CrystalDecisions.Windows.Forms.PageControl.OnPaint(PaintEventArgs e)  at System.Windows.Forms.Control.PaintWithErrorHandling(PaintEventArgs e, Int16 layer)  at System.Windows.Forms.Control.WmPaint(Message&amp; m)  at System.Windows.Forms.Control.WndProc(Message&amp; m)  at System.Windows.Forms.ScrollableControl.WndProc(Message&amp; m)  at System.Windows.Forms.ContainerControl.WndProc(Message&amp; m)  at System.Windows.Forms.UserControl.WndProc(Message&amp; m)  at CrystalDecisions.Windows.Forms.PageControl.WndProc(Message&amp; m)  at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message&amp; m)  at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message&amp; m)  at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam) </code></pre>  <p>I ran this in Visual Studio 2015 and stopped execution on the error.  The error is happening on this field:</p>  <pre><code>Field name: #SiteError2  ObjectName: SiteError11  Size: 120x221  OffsetInSection: 5528x0  SectionKind: GroupFooter Section: GroupFooterSection2 </code></pre>  <p>Looking at the report definition, this field is on a group footer.  This field is grabbing the maximum value of a running total of errors.  The running total evaluates every record and resets on change of the group.</p>  <p>If there is at least 1 error, the field is supposed to display an asterisk.  Otherwise, it is blank.  Therefore the Display String has the following formula:</p>  <pre><code>iif(CurrentFieldValue &gt; 0, "*", "") </code></pre>  <p>If I change the definition of the Display String formula to use anything other than "" when the value is &lt;= 0, then there is no error.  For example, the following Display String, the error does not occur:</p>  <pre><code>iif(CurrentFieldValue &gt; 0, "*", "N") </code></pre>  <p>The display string is the same as other columns in the same group footer that perform a running total on other columns.  In fact, there are several fields on the group footer that are identical to this one.</p>  <p>I tried removing and recreating the field from scratch.  The same error occurs.</p>  <p>I tried changing the report options for "Convert Database NULL Values to Default" and "Convert Other NULL Values to Default", but the error still occurs.</p>  <p>I also tried upgrading the report format from an older version to the newest one.</p>  <p>The report column definition is below.  The fields on the group header are calculating the maximum of the _Error columns below.  These columns are defined as integers.</p>  <pre><code>&lt;xs:element name="DRSiteAnalystSummary_Column_1_Error" type="xs:int" minOccurs="0" /&gt; &lt;xs:element name="DRSiteAnalystSummary_Column_2_Error" type="xs:int" minOccurs="0" /&gt; &lt;xs:element name="DRSiteAnalystSummary_Column_3_Error" type="xs:int" minOccurs="0" /&gt; </code></pre>  <p>I ran JetBrains dotPeek on the CrystalDecisions.Shared.dll in the GAC.  Decompiling the PageRender.draw_FieldObjectInstance method, I see a few array index references.  This one stands out to me:</p>  <pre><code>private void draw_FieldObjectInstance(FieldObjectInstance fieldObject, Graphics g) {   ...   if (fieldObject.IsFieldNumeric)   {     fieldObjectInstance = (NumericFieldObjectInstance) fieldObject;     num7 = (int) g.MeasureString(fieldObjectInstance.PrefixReserve, font, this.m_layout, stringFormat).Width;     SizeF sizeF2 = g.MeasureString(fieldObjectInstance.SuffixReserve, font, this.m_layout, stringFormat);     num8 = (int) sizeF2.Width;     sizeF2 = g.MeasureString(fieldObjectInstance.FixedLeftReserve, font, this.m_layout, stringFormat);     num9 = (int) sizeF2.Width;     sizeF1 = g.MeasureString(fieldObjectInstance.FixedRightReserve, font, this.m_layout, stringFormat);     num10 = (int) sizeF1.Width;     if (!fieldObjectInstance.AllowClipping)     {       sizeF1 = g.MeasureString((string) fieldObject.TextLines[0], font, this.m_layout, stringFormat);       if ((int) sizeF1.Width + num7 + num8 + num9 + num10 &gt; width)       {         flag2 = true;         alignment = Alignment.LeftAlign;         int num11 = width;         sizeF1 = g.MeasureString('#'.ToString(), font, this.m_layout, stringFormat);         int num12 = (int) sizeF1.Width;         int count = num11 / num12;       **fieldObject.TextLines[0] = (object) new string('#', count);**       }     }   } </code></pre>  <p>The code above appears to be assuming there is a text line.  At the point the error occurs, the TextLines property has a length of 0.  IsFieldNumeric is true and fieldObjectInstance.AllowClipping is false, so it looks like this code will be run and fail.</p>