<p>The fragments within FragmentPagerAdapter are losing their context (MainActivity) on screen rotation. I have avoided this issue for some time by preventing screen rotation but now I am trying to tackle this issue. I have tried most solutions and the only one that worked was:</p>  <pre><code> android:configChanges="orientation|keyboardHidden|screenSize" </code></pre>  <p>This is not the solution I am looking for because it doesn't adjust the views for landscape mode.</p>  <p>I know it is losing context because I am notifying the fragment the button is clicked from the MainActivity. Pre screen rotation, the shows the toast; after screen rotation, it does now show the toast, so it is losing its parent context. But the activity is not losing the Fragment because it is still calling the fragment correctly. Implementation:</p>  <p><strong>MainActivity</strong></p>  <pre><code>@Override public void onClick(View v) {     if (v == fab) {         switch (pager.getCurrentItem()) {             case FRAGMENT_SEARCH_PICKUP:                 mainPickupLocationsFragment.searchPickup();                 break;             case FRAGMENT_SEARCH_SEND:                 mainSendingLocationsFragment.searchSending();                 break;             default:                 break;         }     } } </code></pre>  <p><strong>Fragment</strong></p>  <pre><code>public void searchPickup() {     if (mainActivity != null)         Toast.makeText(mainActivity, "Pressed", Toast.LENGTH_LONG).show(); } </code></pre>  <p>If you could have a look at my code and if you see any issues please let me know. </p>  <p><strong>NOTE</strong></p>  <p>I am adding the fragments to a list so users can remove any fragments they like in settings. </p>  <p><strong>MainActivity</strong></p>  <pre><code>public class MainActivity extends AppCompatActivity implements         View.OnClickListener,         NavigationView.OnNavigationItemSelectedListener,         MainPickupLocationsFragment.FragmentCallbacks {      private DrawerLayout drawer;     private Toolbar toolbar;     private ViewPager pager;     private FloatingActionButton fab;     private int white_transparent, white;      private List&lt;MainPagerItems&gt; pagerItemsList;      private MainTrackerSearchFragment mainTrackerSearchFragment;     private MainPickupLocationsFragment mainPickupLocationsFragment;     private MainSendingLocationsFragment mainSendingLocationsFragment;      private static final int FRAGMENT_SEARCH_PICKUP = 1;     private static final int FRAGMENT_SEARCH_SEND = 2;      @Override     protected void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         setContentView(R.layout.activity_main);         toolbar = (Toolbar) findViewById(R.id.toolbar);         fab = (FloatingActionButton) findViewById(R.id.fab);         setSupportActionBar(toolbar);         setupToolbarNav();         setupTabs();         fab.setOnClickListener(this);     }      private void setupToolbarNav() {         drawer = (DrawerLayout) findViewById(R.id.drawer_layout);         ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);         drawer.setDrawerListener(toggle);         toggle.syncState();         NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);         navigationView.setNavigationItemSelectedListener(this);     }      private void setupTabs() {         white_transparent = ColorHelper.getColor(this, R.color.white_transparent);         white = ColorHelper.getColor(this, R.color.white);          mainTrackerSearchFragment = new MainTrackerSearchFragment();         mainPickupLocationsFragment = new MainPickupLocationsFragment();         mainSendingLocationsFragment = new MainSendingLocationsFragment();          @SuppressLint("InflateParams") ImageView tabTracker = (ImageView) LayoutInflater.from(this).inflate(R.layout.tab_image_view, null);         @SuppressLint("InflateParams") ImageView tabPickup = (ImageView) LayoutInflater.from(this).inflate(R.layout.tab_image_view, null);         @SuppressLint("InflateParams") ImageView tabSend = (ImageView) LayoutInflater.from(this).inflate(R.layout.tab_image_view, null);          pagerItemsList = new ArrayList&lt;&gt;();          // Tracker Fragment         MainPagerItems pagerItems = new MainPagerItems();         pagerItems.setFragment(mainTrackerSearchFragment);         pagerItems.setTitle(getString(R.string.transaction_tracler));         pagerItems.setImageView(tabTracker);         pagerItems.setDrawable(R.drawable.ic_track_transaction);         pagerItemsList.add(pagerItems);          // Search Pickup         pagerItems = new MainPagerItems();         pagerItems.setFragment(mainPickupLocationsFragment);         pagerItems.setTitle(getString(R.string.search_pickup_locations));         pagerItems.setImageView(tabPickup);         pagerItems.setDrawable(R.drawable.ic_cash_pickup_locations);         pagerItemsList.add(pagerItems);          // Search Send         pagerItems = new MainPagerItems();         pagerItems.setFragment(mainSendingLocationsFragment);         pagerItems.setTitle(getString(R.string.search_sending_locations));         pagerItems.setImageView(tabSend);         pagerItems.setDrawable(R.drawable.ic_cash_send_locations);         pagerItemsList.add(pagerItems);          TabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);         pager = (ViewPager) findViewById(R.id.pager);         MainPagerAdapter mainPagerAdapter = new MainPagerAdapter(getSupportFragmentManager(), pagerItemsList);         pager.setAdapter(mainPagerAdapter);         tabLayout.setupWithViewPager(pager);          for (int i = 0; i &lt; pagerItemsList.size(); i++) {             ImageView tabImageView = pagerItemsList.get(i).getImageView();             tabImageView.setImageResource(pagerItemsList.get(i).getDrawable());             if (i &gt; 0) {                 tabImageView.setColorFilter(white_transparent, PorterDuff.Mode.MULTIPLY);             }             //noinspection ConstantConditions             tabLayout.getTabAt(i).setCustomView(tabImageView);         }          if (getSupportActionBar() != null) {             getSupportActionBar().setTitle(pagerItemsList.get(0).getTitle());         }         pager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {             @Override             public void onPageSelected(int position) {                 toolbar.setTitle(pagerItemsList.get(position).getTitle());                 for (int i = 0; i &lt; pagerItemsList.size(); i++) {                     if (i == position) {                         pagerItemsList.get(i).getImageView().setColorFilter(white, PorterDuff.Mode.MULTIPLY);                     } else {                         pagerItemsList.get(i).getImageView().setColorFilter(white_transparent, PorterDuff.Mode.MULTIPLY);                     }                 }                 if (position &gt; 0) {                     fab.show();                 } else {                     fab.hide();                 }             }              @Override             public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {             }              @Override             public void onPageScrollStateChanged(int state) {             }         });         pager.setOffscreenPageLimit(3);     }      @Override     public void onBackPressed() {         if (drawer.isDrawerOpen(GravityCompat.START)) {             drawer.closeDrawer(GravityCompat.START);         } else {             super.onBackPressed();         }     }      @Override     public boolean onCreateOptionsMenu(Menu menu) {         //  getMenuInflater().inflate(R.menu.main, menu);         return true;     }      @SuppressWarnings("StatementWithEmptyBody")     @Override     public boolean onOptionsItemSelected(MenuItem item) {         int id = item.getItemId();         if (id == R.id.action_settings) {             return true;         }         return super.onOptionsItemSelected(item);     }      @SuppressWarnings("StatementWithEmptyBody")     @Override     public boolean onNavigationItemSelected(MenuItem item) {         switch (item.getItemId()) {             case R.id.nav_about:                  break;             case R.id.nav_faq:                  break;             case R.id.nav_contact:                  break;             default:                 break;         }         drawer.closeDrawer(GravityCompat.START);         return true;     }      @Override     public void onClick(View v) {         if (v == fab) {             switch (pager.getCurrentItem()) {                 case FRAGMENT_SEARCH_PICKUP:                     if (mainPickupLocationsFragment != null) {                         mainPickupLocationsFragment.searchPickup();                     }                     break;                 case FRAGMENT_SEARCH_SEND:                     mainSendingLocationsFragment.searchSending();                     break;                 default:                     break;             }         }     }      @Override     public void menuClick() {      } } </code></pre>  <p><strong>PagerAdapter</strong></p>  <pre><code>public class MainPagerAdapter extends FragmentPagerAdapter {     List&lt;MainPagerItems&gt; mainPagerItems;      public MainPagerAdapter(FragmentManager fragmentManager, List&lt;MainPagerItems&gt; mainPagerItemsList) {         super(fragmentManager);         this.mainPagerItems = mainPagerItemsList;     }      @Override     public int getCount() {         return mainPagerItems.size();     }      @Override     public Fragment getItem(int position) {         return mainPagerItems.get(position).getFragment();     } } </code></pre>  <p><strong>Fragment</strong></p>  <pre><code>public class MainPickupLocationsFragment extends Fragment {     private View v;     private Context mainActivity;      public MainPickupLocationsFragment() {         setRetainInstance(true);     }      @Override     public void onActivityCreated(Bundle savedInstanceState) {         super.onActivityCreated(savedInstanceState);     }      @Override     public void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);     }      @Override     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {         v = inflater.inflate(R.layout.cash_pickup_fragment, container, false);         return v;     }      public void searchPickup() {         if (mainActivity != null)             Toast.makeText(mainActivity, "Pressed", Toast.LENGTH_LONG).show();     }      /**      * Listeners      */     private FragmentCallbacks mCallbacks;      public interface FragmentCallbacks {         void menuClick();     }      @Override     public void onAttach(Context activity) {         super.onAttach(activity);         mainActivity = activity;         Log.e("CONNECTED", "ATTACHED"); // is being called on screen rotation         try {             mCallbacks = (FragmentCallbacks) activity;         } catch (ClassCastException e) {             throw new ClassCastException("Activity must implement HomeParentFragment.");         }     }      @Override     public void onDetach() {         super.onDetach();         Log.e("CONNECTED", "DETACHED");         mCallbacks = null;     } } </code></pre>  <p><strong>Model</strong></p>  <pre><code>public class MainPagerItems implements Serializable {     private Fragment mFragment;     private String mTitle;     private ImageView mImageView;     private int mDrawable;      public MainPagerItems() {     }      public Fragment getFragment() {         return mFragment;     }      public void setFragment(Fragment mFragment) {         this.mFragment = mFragment;     }      public String getTitle() {         return mTitle;     }      public void setTitle(String mTitle) {         this.mTitle = mTitle;     }      public ImageView getImageView() {         return mImageView;     }      public void setImageView(ImageView mImageView) {         this.mImageView = mImageView;     }      public int getDrawable() {         return mDrawable;     }      public void setDrawable(int mDrawable) {         this.mDrawable = mDrawable;     } } </code></pre>