<p>Having gone through dozens of tutorials &amp; programming guides, an answer has not become obvious, hence the post. Please be kind.<br> The matter at hand is the practical manipulation of double-d arrays of char.: {"aaaaa", "bbbbb", "ccccc",.... M}<br> The first problem is the declaration an initialisation of such beasts, with view to changing data in the strings "aaaaa", "bbbbb" etc.<br> The declarations and initialization go as:</p>  <pre><code>    char *chararray[M][N + 1] //M &amp; N are set as constant values, the extra 1 for the null terminator.     memset (chararray, '\0', sizeof(chararray)); //Assuming array bounds remain constant, in the hope that dynamic allocation is not required </code></pre>  <p>Assume there is also a string literal defined:</p>  <pre><code>    char *copyme; //Has been given a string value well within the bounds of N </code></pre>  <p>The problem arises when attempting to use this in strcat or strcat_s (strcpy or strcpy_s similar):</p>  <pre><code>    strcat_s (chararray [i][0], N + 1, (char *) copyme);  //i ranges from 0 to M </code></pre>  <p>Having not come across any code that handles arrays this way, I did note from this <a href="http://pdosnew.csail.mit.edu/6.828/2014/readings/pointers.pdf" rel="nofollow">tutorial</a> that memcpy is the only way. Correct?</p>  <p>Also, how does one implement John Bode's <a href="http://stackoverflow.com/questions/1527806/multi-dimensional-char-array">General Procedure</a> when calling the function from Main? (For the sake of brevity, this may have to be submitted as a separate question,)</p>