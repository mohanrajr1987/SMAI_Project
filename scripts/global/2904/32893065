<p>I need to compare hundreds of points to find path on 2D grid and I am really looking for performance.  I overridden <code>equals()</code> in my <code>Point</code>'s class:</p>  <pre><code>@Override public boolean equals(Object o) {     if (o instanceof Point)     {         Point that = (Point) o;         return that.i == this.i &amp;&amp; that.j == this.j;     }     return false; } </code></pre>  <p>That's pretty good, because it's possible to compare my <code>Point</code> to objects (which is used in <code>ArrayList.contains()</code>), but I often need to compare <code>Point</code>s among themselves. So I overloaded <code>equals()</code>:</p>  <pre><code>public final boolean equals(Point other) {     return (i == other.i) &amp;&amp; (j == other.j); } </code></pre>  <p>The question is: is there any benefit from the second method? Is this faster to compare two <code>Point</code> instances in cases when they are compared directly, and instanceof and cast are not required:</p>  <pre><code>boolean result = onePoint.equals(otherPoint); </code></pre>  <p>About platform: the code is compiled using android SDK(19) on android, and it is AOT-compiled using <a href="http://oss.readytalk.com/avian/" rel="nofollow">avian</a> on iOS.</p>  <p>Thanks a lot.</p>