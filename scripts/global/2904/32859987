<p>I am in a lost. I have been trying to implement this code at:<a href="http://www.blackpawn.com/texts/pointinpoly/default.html" rel="nofollow">http://www.blackpawn.com/texts/pointinpoly/default.html</a></p>  <p>However, I don't know how is it possible that the cross-product present there between two 2D vectors can result also in a 2D vector. It does not make sense to me. That is also present in some examples of intersection between polygons and lines, in the fine book "Realtime Collision Detection" - where even scalar triples between 2D vectors appear in the codes (see page 189, for instance).</p>  <p>The issue is that, as far as I can think of it, the pseudo cross-product of two 2D vectors can only result in a scalar (v1.x<em>v2.y-v1.y</em>v2.x) or at most in a 3D vector if one adds two zeros, since that scalar represents the Z dimension. But how can it result in a 2D vector?</p>  <p>I am not the first one to ask this and, coincidently, when trying to use the same code example: <a href="http://stackoverflow.com/questions/2333292/cross-product-of-2-2d-vectors">Cross product of 2 2D vectors</a> However, as can be easily seen, the answer, the original question when updated and the comments in that thread ended up being quite a mess, if I dare say so.</p>  <p>Does anyone know how should I get these 2D vectors from the cross-product of two 2D vectors? If code is to be provided, I can handle C#, JavaScript and some C++.</p>  <p>EDIT - here is a piece of the code in the book as I mentioned above:</p>  <pre><code>int IntersectLineQuad(Point p, Point q, Point a, Point b, Point c, Point d,     Point &amp;r) { Vector pq = q - p; Vector pa = a - p; Vector pb = b - p; Vector pc = c - p; // Determine which triangle to test against by testing against diagonal     first Vector m = Cross(pc, pq); float v = Dot(pa, m); // ScalarTriple(pq, pa, pc); if (v &gt;= 0.0f) {    // Test intersection against triangle abc    float u = -Dot(pb, m); // ScalarTriple(pq, pc, pb);    if (u &lt; 0.0f) return 0;    float w = ScalarTriple(pq, pb, pa); .... </code></pre>