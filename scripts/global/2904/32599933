<p>Here's a snippet of my code: </p>  <pre><code>void initialize_matrices(int* a, int* b, int* c);  void fill_matrix(int* matrix);  void add_matrices(int* a, int* b, int* c);  void print_sum_matrix(int* c);   int main() {  int a[3][3]; int b[3][3]; int c[3][3];  //Q2: define pointers (5) //Define pointers ap, bp, and cp to the matrices that are defined above  int (*ap)[3][3] = &amp;a; //giving the pointers a location to point to. int (*bp)[3][3] = &amp;b; int (*cp)[3][3] = &amp;c;  initialize_matrices(ap, bp, cp);  printf("Matrix a:\n"); fill_matrix(ap);  printf("Matrix b:\n"); fill_matrix(bp);  add_matrices(ap, bp, cp);  print_sum_matrix(cp);  return 0;     }  //Q3: initialize (10) //loop through the matrices and set each integer value to 0 using pointers    void initialize_matrices(int* a, int* b, int* c)  {  for (int i = 0; i &lt; 3; i++) //rows {      for (int j = 0; j &lt; 3; j++) //columns     {         *a[i][j] = 0;   //accessing &amp; changing the address that the pointer is pointing to?         *b[i][j] = 0;         *c[i][j] = 0;     }  }  } </code></pre>  <p>I asked a friend for advice, and they told me to change *a[i][j] = 0 to a[i * 3 + j] = 0. Is that true? If so, why do I have to do that? To my understanding, the value that a pointer is "pointing to" or at least the value of the address that the pointer is pointing to can be modified with the code that i've written above. </p>