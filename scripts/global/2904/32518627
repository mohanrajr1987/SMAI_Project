<p>Suppose I have a vector of vectors:</p>  <pre><code>vector&lt;vector&lt;T&gt; &gt; matrix; </code></pre>  <p>I want to implement <code>begin()</code> and <code>end()</code> methods so that the iterator returns the elements of <code>matrix</code> in a logical order ((0,0), (0,1)... (1,0) ...).</p>  <pre><code>typedef typename vector&lt;vector&lt;T&gt; &gt;::const_iterator const_iterator; const_iterator begin() const {  } const_iterator end() const {  } </code></pre>  <p>Usually when working with a 1D vector I just returned <code>vector.begin()</code>, but since this one is a 2D (and I never thought about how the <code>vector.begin()</code> method actually works) I'm not sure how to do it. Any examples/explanations about implementing custom iterators appreciated.</p>