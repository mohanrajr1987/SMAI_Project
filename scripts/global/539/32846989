<p>I am using several XML files each with their own handler class.  Each class has loadXML and exportXML functions that are identical but one line.  I would like to determine a method where I don't have to copy and paste each time I create a new handler class for a new XML.</p>  <p>For each file, I am only changing:</p>  <p>if(soap_read__gt__Library(&amp;soap, &amp;library) != SOAP_OK)</p>  <p>and</p>  <p>if(soap_write__gt__Library(&amp;soap, &amp;library) != SOAP_OK) </p>  <p>where gt is the namespace and Library is the root node.  Each new XML file will have a different namespace and root node.  These are now before compiling, is there anyway to automatically replace each class load/exportXML functions with their respected namespaces and root nodes?</p>  <p>e.g. I create a new xml with namespace test and rootnode devConfig.  I would like a method that replaces the load/exportXML with soap_read__test__devConfig and soap_write_test__devConfig.</p>  <pre><code>void LoadXML(struct soap&amp; soap, _gt__Library&amp; library, const string&amp; strXMLPath) {  ifstream fstreamIN(strXMLPath);  soap.is = &amp;fstreamIN;      // calls soap_begin_recv, soap_get__gt__Library and soap_end_recv  if(soap_read__gt__Library(&amp;soap, &amp;library) != SOAP_OK)  {   std::cout &lt;&lt; "soap_read__gt__Library() failed" &lt;&lt; std::endl;   throw 1;  }   // patch    if(_setmode(_fileno(stdin), _O_TEXT) == -1)  {   std::cout &lt;&lt; "_setmode() failed" &lt;&lt; std::endl;   throw 1;  }  // ~patch   }  void exportXML(struct soap&amp; soap, _gt__Library&amp; library, const string&amp; strXMLPath) {  soap_set_omode(&amp;soap, SOAP_XML_INDENT);    ofstream fstreamOUT(strXMLPath);  soap.os = &amp;fstreamOUT;   // calls soap_begin_send, soap_serialize, soap_put and soap_end_send  if(soap_write__gt__Library(&amp;soap, &amp;library) != SOAP_OK)   {   std::cout &lt;&lt; "soap_write__gt__Library() failed" &lt;&lt; std::endl;         throw 1;  }   } </code></pre>