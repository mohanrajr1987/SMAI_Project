<p>I'm new to Go and I'm learning how to work with goroutines.</p>  <p>I have a function that downloads images:</p>  <pre><code>func imageDownloader(uri string, filename string) {     fmt.Println("starting download for ", uri)      outFile, err := os.Create(filename)     defer outFile.Close()     if err != nil {         os.Exit(1)     }      client := &amp;http.Client{}      req, err := http.NewRequest("GET", uri, nil)      resp, err := client.Do(req)     defer resp.Body.Close()      if err != nil {         panic(err)     }      header := resp.ContentLength     bar := pb.New(int(header))     rd := bar.NewProxyReader(resp.Body)     // and copy from reader     io.Copy(outFile, rd) } </code></pre>  <p>When I call by itself as part of another function, it downloads images completely and there is no truncated data.</p>  <p>However, when I try to modify it to make it a goroutine, images are often truncated or zero length files.</p>  <pre><code>func imageDownloader(uri string, filename string, wg *sync.WaitGroup) {     ...     io.Copy(outFile, rd)     wg.Done() }  func main() { var wg sync.WaitGroup wg.Add(1) go imageDownloader(url, file, &amp;wg) wg.Wait() } </code></pre>  <p>Am I using WaitGroups incorrectly? What could cause this and how can I fix it?</p>  <p>Update:</p>  <p>Solved it. I had placed the <code>wg.add()</code> function outside of a loop. :(</p>