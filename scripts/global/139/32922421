<p>I'm writing tests for a class implementing signal concept, using Catch framerwork. I want to test if slots are called in the correct order, if parameters are passed correctly, etc. I used strings (<code>std::stringstream</code>, to be precise) in order to verify that.</p>  <pre><code>#include "catch.hpp"  #include &lt;nete/Signal.h&gt;  #include &lt;sstream&gt;  std::stringstream ss;  void global_function1(int a, int b) {     ss &lt;&lt; "global_function1 " &lt;&lt; a &lt;&lt; " " &lt;&lt; b &lt;&lt; " "; }  void global_function2(int a, int b) {     ss &lt;&lt; "global_function2 " &lt;&lt; a &lt;&lt; " " &lt;&lt; b &lt;&lt; " "; }  TEST_CASE("Signal connect", "[signal]") {     SECTION("global")     {         ss.clear(), ss.str("");          nete::Signal&lt;void(int, int)&gt; s;          s.connect&lt;global_function1&gt;();         s.connect&lt;global_function2&gt;();          s(123, 456);         s(234, 567);          std::string expected =         "global_function1 123 456 "         "global_function2 123 456 "         "global_function1 234 567 "         "global_function2 234 567 ";          REQUIRE(ss.str() == expected);     } } </code></pre>  <p>On the one hand, the solution works as expected, on the other - it feels a bit hacky. Are there any caveats that I'm not aware of? Or maybe there are some other standard ways to veryfiy that the function/method actually got called with the correct arguments?</p>