<p>I want to consume 2 services and want to have different timeouts. So, I have overridden Spring's <code>SimpleClientHttpRequestFactory</code> and using it from my <code>HttpDaoImpl</code>.</p>  <p>Now everything works in one environment but exact same EAR doesn't work in other environment, and only difference in both the environments is that the service URL I am connecting is load balanced URL in one and non-LB in other. Issue is in load balanced service URL.</p>  <p>Problem is that everytime <code>httpReadTimeout</code> is taking effect or being used but not <code>XYZHttpReadTimeout</code>, even though I am conditionally setting the time out. </p>  <p>It is extremely strange issue because everything is working in one env. and not in other. My guess for probable root cause till now is the load balanced URL but still I am not able to see any technical reason on why load balanced URL could be issue because my machine will open a socket and close it after read timeout.</p>  <p>I have placed loggers in <code>CustomClientHttpRequestFactory</code> and verified that correct values are being used but in the end somehow read timeout is not working as expected.</p>  <p><strong>CustomClientHttpRequestFactory.java</strong>:</p>  <pre><code>public class CustomClientHttpRequestFactory extends SimpleClientHttpRequestFactory{      private Log logger = LogFactory.getLog(CustomClientHttpRequestFactory.class);      @Value("${httpRequest.readTimeoutInMilliseconds}")     private Integer httpRequestTimeout;      @Value("${httpRequest.connectionTimeoutInMilliseconds}")     private Integer httpReadTimeout;      @Value("${XYZ.httpRequest.readTimeoutInMilliseconds}")     private Integer XYZHttpRequestTimeout;      @Value("${XYZ.httpRequest.connectionTimeoutInMilliseconds}")     private Integer XYZHttpReadTimeout;      @Value("${sgw.XYZHttp.service.url}")     private String XYZSystemUrl;       /**      * Overriding the default and setting a separate read timeout and HTTP connection timeout values for XYZ transactions.      *       * @param uri      */     public void setTimeoutProperties(URI uri){         boolean isXYZTransaction = isXYZTransaction(uri);         Integer connectionTimeout = isXYZTransaction ? XYZHttpRequestTimeout : httpRequestTimeout;         Integer readTimeout = isXYZTransaction ? XYZHttpReadTimeout : httpReadTimeout;         logger.info("Setting " + connectionTimeout + " : " + readTimeout);         this.setReadTimeout(readTimeout);         this.setConnectTimeout(connectionTimeout);     }      private boolean isXYZTransaction(URI uri){         try {             URI XYZUrl = new URI(XYZSystemUrl);             logger.info("################################### XYZ Debug");             logger.info("XYZHttpRequestTimeout = " + XYZHttpRequestTimeout);             logger.info("XYZHttpReadTimeout = " + XYZHttpReadTimeout);             return XYZUrl.equals(uri);         } catch (Exception e) {             // TODO Auto-generated catch block             e.printStackTrace();         }         return false;     } } </code></pre>  <p><strong>HttpDaoImpl</strong>:</p>  <pre><code>    CustomClientHttpRequestFactory httpRequestFactory = (CustomClientHttpRequestFactory) myAppUtils.getApplicationContext().getBean("httpRequestFactory");     httpRequestFactory.setTimeoutProperties(lUri);     restTemplate.setRequestFactory(httpRequestFactory);     responseString = restTemplate.postForObject(lUri, requestString, String.class); </code></pre>  <p><strong>XML config</strong>:</p>  <pre><code>&lt;bean id="httpRequestFactory" class="com.abc.xyz.customComponents.CustomClientHttpRequestFactory" scope="prototype"/&gt;  &lt;bean id="restTemplate" class="org.springframework.web.client.RestTemplate"&gt;     &lt;property name="messageConverters"&gt;         &lt;list&gt;             &lt;bean class="org.springframework.http.converter.StringHttpMessageConverter"&gt;                 &lt;property name = "supportedMediaTypes"&gt;                     &lt;list&gt;                         &lt;value&gt;text/xml;charset=UTF-8&lt;/value&gt;                     &lt;/list&gt;                 &lt;/property&gt;             &lt;/bean&gt;         &lt;/list&gt;     &lt;/property&gt; &lt;/bean&gt; </code></pre>