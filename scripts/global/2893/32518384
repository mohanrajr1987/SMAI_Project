<p>I have a webapplication on weblogic server that gets JMS messages (in many threads) from foreign JMS server and updates X entity (update X set Y = 1 where id = Z). There a distributed transaction for this use case, as my webapp, foreign server are different weblogic servers and has their own databases. </p>  <p>At the same time user cannot login to application because during login the same -> update X set Y = 1 where id = Z &lt;- must be made. </p>  <p>Strange thing is that we dont lock the X table from code (we dont have select for update), the X table is not locked in database (our db guys says so), so I guess there is only optimistic locking, as we use hibernate.  Somehow the distributed transaction keeps lock on the row in X table but I cant find any information about this, the below Exception is all I have.</p>  <p>I dont like that someone programmed the same update inside JMS listener (in distribited transaction) and during logging (synchronous). In JMS listener could it be a a message sent to another JMS queue ? </p>  <p>How to solve this?</p>  <pre><code>  could not execute update query; SQL [update X set Y = 1 where id =  Z]; nested exception is org.hibernate .exception.SQLGrammarException:  could not execute update query Caused by:  org.springframework.dao.InvalidDataAccessResourceUsageException: could  not execute update query; SQL [update X set Y = 1 where id = Z];  nested exception is org.hibernate.exception.SQLGrammarException: could  not execute update query java.sql.SQLSyntaxErrorException: ORA-02049:  timeout: distributed transaction waiting for lock </code></pre>