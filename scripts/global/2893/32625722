<p>I´m currently migrating a web app from JBoss( Wildfly-8.1.0.Final)  to Weblogic 12.1.3</p>  <p>The following class is part of a war that gets deployed in JBoss without any problem, but when I try it on Weblogic it complains.</p>  <pre><code>@WebService( name = "MyClassWS", targetNamespace = WSConstants.DEFAULT_TARGET_NS ) @WebServlet( name = "MyClassWS", urlPatterns = { "/MyClassWSURL" } ) public class MyClass { .... } </code></pre>  <blockquote>   <p>Error encountered during prepare phase of deploying WebService module 'my-web.war' Two port in the MyClassService(WebserviceDescriptionBean)    has the same name {<a href="http://default.target.ns" rel="nofollow">http://default.target.ns</a>}    at weblogic.wsee.deploy.WSEEModule.prepare(WSEEModule.java:158)           at weblogic.wsee.deploy.AppDeploymentExtensionFactory.prepare(AppDeploymentExtensionFactory.java:82)           at weblogic.wsee.deploy.AppDeploymentExtensionFactory.access$100(AppDeploymentExtensionFactory.java:18)           at weblogic.wsee.deploy.AppDeploymentExtensionFactory$1.prepare(AppDeploymentExtensionFactory.java:222)           at weblogic.application.internal.flow.AppDeploymentExtensionFlow.prepare(AppDeploymentExtensionFlow.java:23)           at weblogic.application.internal.BaseDeployment$1.next(BaseDeployment.java:706)           at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:42)           at weblogic.application.internal.BaseDeployment.prepare(BaseDeployment.java:237)           at weblogic.application.internal.EarDeployment.prepare(EarDeployment.java:61)           at weblogic.application.internal.DeploymentStateChecker.prepare(DeploymentStateChecker.java:158)           at weblogic.deploy.internal.targetserver.AppContainerInvoker.prepare(AppContainerInvoker.java:61)           at weblogic.deploy.internal.targetserver.operations.ActivateOperation.createAndPrepareContainer(ActivateOperation.java:208)           at weblogic.deploy.internal.targetserver.operations.ActivateOperation.doPrepare(ActivateOperation.java:98)           at weblogic.deploy.internal.targetserver.operations.AbstractOperation.prepare(AbstractOperation.java:233)           at weblogic.deploy.internal.targetserver.DeploymentManager.handleDeploymentPrepare(DeploymentManager.java:749)           at weblogic.deploy.internal.targetserver.DeploymentManager.prepareDeploymentList(DeploymentManager.java:1238)           at weblogic.deploy.internal.targetserver.DeploymentManager.handlePrepare(DeploymentManager.java:252)           at weblogic.deploy.internal.targetserver.DeploymentServiceDispatcher.prepare(DeploymentServiceDispatcher.java:172)           at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer.doPrepareCallback(DeploymentReceiverCallbackDeliverer.java:171)           at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer.access$000(DeploymentReceiverCallbackDeliverer.java:13)           at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer$1.run(DeploymentReceiverCallbackDeliverer.java:46)           at weblogic.work.SelfTuningWorkManagerImpl$WorkAdapterImpl.run(SelfTuningWorkManagerImpl.java:548)           at weblogic.work.ExecuteThread.execute(ExecuteThread.java:311)           at weblogic.work.ExecuteThread.run(ExecuteThread.java:263)</p> </blockquote>  <p>I´m using Java 1.8.0_51 for both Wildfly and Weblogic. Is there anything wrong with this approach ? Any workaround for Weblogic ?</p>  <p>Thanks in advance</p>