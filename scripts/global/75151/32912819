<p>I encounter the following problem using Lumen and Eloquent.</p>  <p>I have the 4 followings tables :</p>  <ul> <li>persons (one of the columns is a flag 'activated')</li> <li>medias (one of the columns is a FK person_id)</li> <li>tags</li> <li>media_tag (two of the columns are a FK media_id and a FK tag_id)</li> </ul>  <p>I would like to retrieve a list of tags that has at least X (X>=0) media belonging to a person activated.</p>  <p>I tried to do it using Eloquent's methods but I couldn't. So I used a raw query and it's working fine but I'd like to understand what's happening with the relationships.</p>  <p>I declared the relationships this way :</p>  <p><strong>Person :</strong></p>  <pre><code>class Person extends Eloquent {     public function medias()     {         return $this-&gt;hasMany('Media', 'person_id');     } } </code></pre>  <p><strong>Media :</strong></p>  <pre><code>class Media extends Eloquent {     public function person()     {         return $this-&gt;belongsTo('Person', 'person_id')-&gt;where('activated', '1');     }      public function tags()     {         return $this-&gt;belongsToMany('Tag', 'media_tag', 'media_id', 'tag_id');     } } </code></pre>  <p><strong>Tag :</strong></p>  <pre><code>class Tag extends Eloquent {     public function medias()     {         return $this-&gt;belongsToMany('Media', 'media_tag', 'tag_id', 'media_id')                     -&gt;join('person', function ($join) {                         $join-&gt;on('persons.id', '=', 'medias.person_id')                         -&gt;where('persons.activated', '=', 1);         })         -&gt;orderBy('medias.id', 'asc');     } } </code></pre>  <p>And the function in <strong>TagControler</strong> :</p>  <pre><code>public function tagNames(Request $request) {     $minMedias = $request-&gt;has('minMedias') ? $request-&gt;input('minMedias') : 0;      return Tag::has('medias', '&gt;', $minMedias)-&gt;lists('name'); } </code></pre>  <p>An the request generated (example with $minMedias=5):</p>  <pre><code>array:4 [â–¼   0 =&gt; "select `name` from `tags` where (select count(*) from `medias` inner join `media_tag` on `medias`.`id` = `media_tag`.`media_id` where `media_tag`.`tag_id` = `tags`.`id`) &gt; 5"   1 =&gt; []   ... ] </code></pre>  <p>So it's ignoring the following part : $join->on('persons.id', '=', 'medias.person_id') of the relationship medias() in the Tag model and I have no idea what's happening.</p>