<p>I have a ViewModel that wraps two lists of different objects: <code>List&lt;Review&gt; Reviews</code> and <code>DayCommentary DayCommentary</code> into <code>ReviewViewModel</code>. In my view, I group <code>Reviews</code> by <code>Review.Country</code>:</p>  <pre><code>var groupedReviews = Model.Reviews.GroupBy(item =&gt; item.Country) </code></pre>  <p>In the view, I loop through <code>groupedReviews</code> and build an HTML table for each <code>group</code>. My goal is to output each <code>Review</code> in <code>group</code> while still binding to the model for posting back to the controller. This is important because in the view I have a textarea field that needs to be pass entered text back to the controller during POST actions. I understand that this requires a for-loop rather than a foreach to maintain the binding. </p>  <p>I've thus tried the following, which displays correctly in the view but does not bind to the model during <code>FormMethod.Post</code>, for example during a Add/Edit/Delete controller action:</p>  <pre><code>@using (Html.BeginForm("Save", "Review", FormMethod.Post)) {     foreach (var group in groupedReviews)     {         &lt;h6&gt;@Html.Raw(group.Key)&lt;/h6&gt;         &lt;table&gt;             &lt;tr&gt;                 &lt;th style="text-align: center"&gt;                     @Html.DisplayNameFor(model =&gt; model.Reviews[0].Ticker)                 &lt;/th&gt;             &lt;/tr&gt;             @for (var i = 0; i &lt; group.Count(); i++)             {                 &lt;tr&gt;                     &lt;td style="text-align: center"&gt;                         @Html.TextAreaFor(model =&gt; group.ElementAt(i).Commentary)                         @Html.HiddenFor(model =&gt; group.ElementAt(i).Commentary)                     &lt;/td&gt;                 &lt;/tr&gt;             }         &lt;/table&gt;     } } </code></pre>  <p>I'm pretty sure the problem here is with <code>ElementAt(i)</code>, but what can I use instead when iterating through this type of grouped collection?</p>  <p>I've tried assigning <code>name</code> and <code>id</code> attributes to the TextArea field as suggested in answers to some similar questions to no avail.</p>  <p>I've been going in circles trying to use different types of loops and iterating over different collections but nothing achieves my desired goal.</p>