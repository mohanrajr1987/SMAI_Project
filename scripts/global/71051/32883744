<p>I have a MVC project with 2 areas: Admin and Client. I also have a login page in the main controller. What I want to do is to Authenticate a user based on its roles. If the user is for client they can't login to admin and the other way around.  For example if you try Localhost/admin, the code checks if the user is authorised. If not it redirects you to Localhost/admin/AccountLogin. The same for Localhost/client to Localhost/client/account/login. I want to use a customAuthorize rather than [Authorize(Roles="Admin")]. </p>  <p>everything works fine if I don't use roles, but the problem is if you login as client you can simply change the url and go to admin. So I tried to use roles.</p>  <p>In admin area: An account Controller:     public class AccountController : MainProject.Controllers.AccountController     { }</p>  <p>A home controller:</p>  <pre><code>[CustomAuthorize("Admin")] public class HomeController : Controller {      public ActionResult HomePage()     {         return View();     } } </code></pre>  <p>The custom Authorise:</p>  <pre><code>public class CustomAuthorizeAttribute : AuthorizeAttribute     {         private string _loginPage { get; set; }         private string _customRole { get; set; }          public CustomAuthorizeAttribute(string userProfilesRequired)         {             _customRole = userProfilesRequired;             _loginPage = "/" + _customRole + "/Account/Login";         }           public override void OnAuthorization(AuthorizationContext filterContext)         {             var formsIdentity = filterContext.HttpContext.User.Identity as System.Web.Security.FormsIdentity;  // I want to check if the role of current user is the same as the controller If not redirect to the /account/login page.              var validRole = this.Roles == _customRole;//filterContext.HttpContext.User.IsInRole(_customRole);               if (filterContext.HttpContext.User.Identity.IsAuthenticated)             {                if (!validRole)                {                    filterContext.HttpContext.Response.Redirect(_loginPage);                }             }             else             {                 filterContext.HttpContext.Response.Redirect(_loginPage);             }              base.OnAuthorization(filterContext);           }     } </code></pre>  <p>The Account Controller in Main Controller:</p>  <pre><code>public class AccountController : Controller {     [AllowAnonymous]     public ActionResult Login()     {         return View();     }      //     // POST: /Account/Login      [HttpPost]     [AllowAnonymous]     [ValidateAntiForgeryToken]     public ActionResult Login(LoginModel model, string ReturnUrl)     {         try         {             if (ModelState.IsValid)             {                 if (model.UserName == "Arash" &amp;&amp; model.Password == "123")                 {                     FormsAuthentication.SetAuthCookie(model.UserName, false);                     //I need to set the roles here but not sure how                     return RedirectToAction("homePage", "Home", new { area = GetArea() });                  }             }              ModelState.AddModelError("", "The user name or password provided is incorrect.");             return View(model);         }         catch (Exception ex)         {             ModelState.AddModelError("", "Error: " + ex.Message);             return View(model);         }     } </code></pre>  <p>}</p>  <p>and it the web config:</p>  <p></p>  <pre><code>  &lt;forms loginUrl="~/Account/Login"  timeout="200"  /&gt; &lt;/authentication&gt;  &lt;authorization&gt;   &lt;allow roles="Admin,Client" /&gt; &lt;/authorization&gt; </code></pre>  <p>I searched a lot in the web but couldn't find a proper answer. I appreciate if you Could help me out to correctly implement this authorisation in MVC.</p>  <p>I just want to know how can I set a role to a user when login. At the moment if I set a user in login, it can't remember when it gets to CustomAuthorize class.</p>  <p>Any help? Cheers,</p>