<p>Right now I am trying to create a circular list, where when I use hasNext() from an Iterator it should always return true. However right now it is returning that it is not a circular list, and I am also having problems printing out the values (in this example Strings) of the ArrayList. Here is the CircularList class I created, which has a inner Node class for the objects that are put into the list:</p>  <pre><code>public class CircularList&lt;E&gt; implements Iterable{ private Node&lt;E&gt; first = null; private Node&lt;E&gt; last = null; private Node&lt;E&gt; temp; private int size = 0;  //inner node class private static class Node&lt;E&gt;{ //In this case I am using String nodes     private E data; //matching the example in the book, this is the data of the node     private Node&lt;E&gt; next = null; //next value     //Node constructors, also since in this case this is a circular linked list there should be no null values for previous and next         private Node(E data){         this.data = data;     } } //end of inner node class public void addValue(E item){     Node&lt;E&gt; n = new Node&lt;E&gt;(item);     if(emptyList() == true){ //if the list is empty         //only one value in the list         first = n;         last = n;     }     else{ //if the list has at least one value already         //store the old first value         temp = first;         //the new first is the input value         first = n;         //next value after first is the old first value         first.next = temp;         //if after this there will be only two values in the list once it is done         if(size == 1){             last = temp;         }         //if the list is greater than one than the last value does not change, since any other values will be put before last in this case, and not replace it         //creating the circular part of the list         last.next = first;     }     size++; }  public boolean emptyList(){     boolean result = false;     if(first == null &amp;&amp; last == null){ //if there is no values at all         result = true;     }     return result; }  @Override public Iterator&lt;E&gt; iterator() {     // TODO Auto-generated method stub     return new CircularIterator&lt;E&gt;(); //each time this method is called it will be creating a new instance of my Iterator } } </code></pre>  <p>Here is the Iterator class I am making:</p>  <pre><code>public class CircularIterator&lt;E&gt; implements Iterator&lt;E&gt; {  @Override public boolean hasNext() {     return false; }  @Override public E next() {     // TODO Auto-generated method stub     return null; }  @Override public void remove() {     // TODO Auto-generated method stub  }  } </code></pre>  <p>and finally the Test class:</p>  <pre><code>public class Test { static CircularList&lt;String&gt; c = new CircularList&lt;String&gt;(); //in this case it is a string list static Iterator it = c.iterator();  public static void main(String[]args){     c.addValue("Bob");     c.addValue("Joe");     c.addValue("Jaina");     c.addValue("Hannah");     c.addValue("Kelly");     Iterate();      for(String val : c){         System.out.println(val);     } }  private static boolean Iterate(){     boolean result = false;     if(!it.hasNext()){         System.out.println("Not a circular list!");     }     else{         result = true;     }     return result; } } </code></pre>  <p>Again I am trying to get it to always return true, I think the problem lies with my <code>hasNext()</code> method, but I am not completely sure.</p>