<p>Here's something I've always wondered about.  I'll pose the question for Python, but I would also welcome answers which address the standard libraries in Java and C++.</p>  <p>Let's say you have a Python list called "my_list", and you would like to iterate over its <strong>unique</strong> elements.  There are two natural approaches:</p>  <pre><code>#iterate over set for x in set(my_list):     do_something(x) </code></pre>  <p>or</p>  <pre><code>#list to set to list for x in list(set(my_list)):     do_something(x) </code></pre>  <p>The tension is that iterating over a list is faster than iterating over a set, but it takes time to convert a set to a list.  My guess is that the answer to this question will depend on a number of factors, such as:</p>  <ul> <li>How many times will we need to iterate?</li> <li>How big is the original list?</li> <li>How many repetitions in the original list should we expect?</li> </ul>  <p>So I guess I'm looking for a rule of thumb of the form "If the list has x many elements with each element repeated no more than y times and you only need to iterate z times then you should iterate over the set; otherwise you should convert it to a list."</p>