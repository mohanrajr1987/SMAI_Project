<p>While reading Eric Niebler's <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4382.pdf">range proposal</a>,<br> I've come across the term sentinel as replacement for the end iterator.<br> I'm having a difficult time understanding the benefits of sentinel over an end iterator.<br> Could some provide a clear example of what sentintel brings to the table that can not be done with standard iterator pairs?</p>  <blockquote>   <p>"A <strong>sentinel</strong> is an abstraction of a past-the-end iterator. Sentinels are   Regular types that can be used to denote the end of a range. A   sentinel and an iterator denoting a range shall be EqualityComparable.   A sentinel denotes an element when an iterator i compares equal to the   sentinel, and i points to that element." -- N4382  </p> </blockquote>  <p>I think sentinels work as functions in determining the end of a range, instead of just the position?</p>