<p>I have an iterator (<code>userEnvironments</code>) that contains a lot of user environment objects which I want for creating a dictionary containing <code>environment.name</code> as the key and a new <code>EnvironmentStore</code> object that would use <code>environment</code>.</p>  <pre><code>for environment in userEnvironments:        set_cache(user,environment)  def set_cache(user, environment):        _environments_cache[environment.name] = EnvironmentStore(user, environment) </code></pre>  <p>The memory efficiency is not important here but creating all of these objects will take approximately 4 seconds.</p>  <p>So the question is, what would be a good approach in python that could create the objects only on-demand (as in, creates the objects when another method wants to call the class) similar to a generator?</p>