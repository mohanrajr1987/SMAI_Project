<p>I am writing a <code>doubly linked list</code> with an iterator. I managed to implement the <code>next()</code> and the <code>hasNext()</code>methods. It works fine, and I am getting the expected result after a forward traversing. But I am stuck in how to implement <code>previous()</code> and <code>hasPrevious()</code>. Here what I did:</p>  <pre><code>private class ListIterator&lt;E&gt; implements java.util.ListIterator&lt;E&gt; {          private Node&lt;E&gt; current = (Node&lt;E&gt;) head;         private Node&lt;E&gt; last = (Node&lt;E&gt;) tail;          public ListIterator() {          }          public ListIterator(int index) {             if (index &lt; 0 || index &gt; size)                   throw new IndexOutOfBoundsException();                 for (int i = 0; i &lt; index; i++)                   current = current.next;         }          @Override         public boolean hasNext() {             return (current != null);         }          @Override         public boolean hasPrevious() {             return  last != null;         }          @Override         public E next() {               E e = current.element;             current = current.next;             return e;         }          @Override         public E previous() {             E e = (E) last.element;             last = last.previous;             return e;         } </code></pre>  <p>I am getting just the last element in my <code>List</code> when I want a backwards traversing:</p>  <pre><code>[11, 10, 9, 8, 7, 6, 5] //list  11 10 9 8 7 6 5 //Forward traversing   5   //Backwards traversing </code></pre>  <p>What I am doing wrong? Why can't I traverse backwards through the whole <code>List</code>? </p>