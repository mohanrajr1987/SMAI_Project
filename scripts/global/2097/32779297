<p>I have a game I am developing a game and before the game starts there is an option to add or remove player profiles from the game. The idea is that the app owner can add or remove player profiles to the game so they can play solo or with friends on the sames device.</p>  <p>This is the main screen for this activity:</p>  <p><a href="http://i.stack.imgur.com/lpsyN.png" rel="nofollow"><img src="http://i.stack.imgur.com/lpsyN.png" alt="enter image description here"></a></p>  <p>As you can see its quite self explainatry, all saved users are loaded and before the game starts at least one player must be selected to play the game using the add or remove buttons.</p>  <p>As mentioned earlier this functionality works fine if there is only one profile saved to the device.</p>  <p><a href="http://i.stack.imgur.com/M7TkP.png" rel="nofollow"><img src="http://i.stack.imgur.com/M7TkP.png" alt="enter image description here"></a></p>  <p>After the user touches the add button that player then moves to the users player section and the details are stored in the active players array.</p>  <p>The problem I am having is when you have more than one player saved in the database. When you try the same function again only the second player is added. Like so:</p>  <p><a href="http://i.stack.imgur.com/Ko8W3.png" rel="nofollow"><img src="http://i.stack.imgur.com/Ko8W3.png" alt="enter image description here"></a></p>  <p>No matter which user is added only the last user seems to be moved across. This is probably something really simple that I've missed but I have been stuck here for a while.</p>  <p>Display Users Function:</p>  <pre><code>final HashMap&lt;String,String&gt; users = db.getUsers();         if(users.size() &gt; 0){             noSavedPlayers.setVisibility(View.GONE);         }         Iterator it = users.entrySet().iterator();         int userCount = 0;         while(it.hasNext()){             Map.Entry pair = (Map.Entry) it.next();             final String id = pair.getKey().toString();             final String username = pair.getValue().toString();             //add this view to settings             usersClass.addToGameList(PlayerSelect.this, allUsers, username, id, new AddUserCallback() {                 @Override                 public void addUser(Boolean add, View thisPlayer) {                     AddRemoveUser(username,id,add,thisPlayer);                 }             });             userCount++;             it.remove();         }  private void AddRemoveUser(final String username, final String id, Boolean add, View thisPlayer){         Log.d("USERNAME",username + " is");         Boolean isAdded;         if(activePlayers.size() == 0){             isAdded = false;         } else {             isAdded = activePlayers.contains(username);         }         if(add){             //check if player is allready add to the game             if(!isAdded){                 //add this user to the game                 //remove form all players list                 activePlayers.add(username);                 activeIDs.add(id);                 allUsers.removeView(thisPlayer);                 usersClass.addToGameList(PlayerSelect.this, activeLayout, username, id, new AddUserCallback() {                     @Override                     public void addUser(Boolean add, View thisPlayer) {                         if(add){                             AddRemoveUser(username,id,true,thisPlayer);                         } else {                             AddRemoveUser(username,id,false,thisPlayer);                         }                     }                 });             }         } else {             if(isAdded){                 //remove this user to the game                 //add back to all players list                 int current = activePlayers.indexOf(username);                 activePlayers.remove(current);                 activeIDs.remove(current);                 activeLayout.removeView(thisPlayer);                 usersClass.addToGameList(PlayerSelect.this, allUsers, username, id, new AddUserCallback() {                     @Override                     public void addUser(Boolean add, View thisPlayer) {                         if(add){                             AddRemoveUser(username,id,true,thisPlayer);                         } else {                             AddRemoveUser(username,id,false,thisPlayer);                         }                     }                 });             }         }         Log.d("VIEW",activePlayers.size() + "");         noActivePlayers.setVisibility((activePlayers.size() &gt; 0)? View.GONE : View.VISIBLE);         noSavedPlayers.setVisibility((allUsers.getChildCount() &gt; 0) ? View.GONE : View.VISIBLE);     } </code></pre>  <p>usersClass.addToGameList function:</p>  <pre><code>public void addToGameList(final Context context, final LinearLayout view, final String UserName, final String id, AddUserCallback callback){         delegate = callback;         LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);         final View user = inflater.inflate(R.layout.user_add, null);          //set data         final TextView username = (TextView) user.findViewById(R.id.username);         username.setText(UserName);         Button save = (Button) user.findViewById(R.id.saveChanges);         final Button delete = (Button) user.findViewById(R.id.deleteUserBtn);          delete.setOnClickListener(new View.OnClickListener() {             @Override             public void onClick(View v) {                 Log.d("GAME","User is to be removed from this game.");                 delegate.addUser(false, user);             }         });         save.setOnClickListener(new View.OnClickListener() {             @Override             public void onClick(View v) {                 Log.d("GAME","User to be added to the game");                 delegate.addUser(true, user);             }         });         view.addView(user);      } </code></pre>  <p>Full Activity:</p>  <pre><code>package r1d.org.uk.oiaskatedice;  import android.app.Activity; import android.os.Bundle; import android.util.Log; import android.view.View; import android.widget.LinearLayout; import android.widget.TextView;  import java.util.ArrayList; import java.util.HashMap; import java.util.Iterator; import java.util.Map;  import LocalDatabase.DatabaseHandler;  /**  * Created by paul on 21/09/2015.  */ public class PlayerSelect extends Activity {     private ProFeatures PF;     private DatabaseHandler db;     private int maxPlayers = 3;     private LinearLayout activeLayout;     private LinearLayout allUsers;     private TextView noActivePlayers;     private TextView noSavedPlayers;     private ArrayList&lt;String&gt; activeIDs;     private ArrayList&lt;String&gt; activePlayers;     private Users usersClass;     @Override     protected void onCreate(Bundle savedInstanceState) {          super.onCreate(savedInstanceState);         setContentView(R.layout.player_select);         db = new DatabaseHandler(this);         PF = new ProFeatures(this);         activeIDs = new ArrayList&lt;String&gt;();         activePlayers = new ArrayList&lt;&gt;();         activeLayout = (LinearLayout) findViewById(R.id.activePlayers);         allUsers = (LinearLayout) findViewById(R.id.allPlayers);          noActivePlayers = (TextView) findViewById(R.id.noActivePlayers);         noSavedPlayers = (TextView) findViewById(R.id.noSavedPlayers);          PF.checkForPro(new IsPro() {             @Override             public void isPro(Boolean isPro) {                 if(!isPro){                     new AdManager(PlayerSelect.this);                 } else {                     maxPlayers = 20;                 }             }         });         //get tricks         Bundle extras = getIntent().getExtras();         if(extras.getString("Tricks")instanceof String){             final String usedTricks = extras.getString("Tricks");         } else {             final String[] usedTricks = extras.getStringArray("Tricks");         }         //show active players         //show all players         usersClass = new Users();         final HashMap&lt;String,String&gt; users = db.getUsers();         if(users.size() &gt; 0){             noSavedPlayers.setVisibility(View.GONE);         }         Iterator it = users.entrySet().iterator();         int userCount = 0;         while(it.hasNext()){             Map.Entry pair = (Map.Entry) it.next();             final String id = pair.getKey().toString();             final String username = pair.getValue().toString();             //add this view to settings             usersClass.addToGameList(PlayerSelect.this, allUsers, username, id, new AddUserCallback() {                 @Override                 public void addUser(Boolean add, View thisPlayer) {                     AddRemoveUser(username,id,add,thisPlayer);                 }             });             userCount++;             it.remove();         }         //add more players         //check for upgrade         //gibe option to upgrage if needed         //save all players to an array         //save changes to saved player names         //start game when all players are added      }     private void AddRemoveUser(final String username, final String id, Boolean add, View thisPlayer){         Log.d("USERNAME",username + " is");         Boolean isAdded;         if(activePlayers.size() == 0){             isAdded = false;         } else {             isAdded = activePlayers.contains(username);         }         if(add){             //check if player is allready add to the game             if(!isAdded){                 //add this user to the game                 //remove form all players list                 activePlayers.add(username);                 activeIDs.add(id);                 allUsers.removeView(thisPlayer);                 usersClass.addToGameList(PlayerSelect.this, activeLayout, username, id, new AddUserCallback() {                     @Override                     public void addUser(Boolean add, View thisPlayer) {                         if(add){                             AddRemoveUser(username,id,true,thisPlayer);                         } else {                             AddRemoveUser(username,id,false,thisPlayer);                         }                     }                 });             }         } else {             if(isAdded){                 //remove this user to the game                 //add back to all players list                 int current = activePlayers.indexOf(username);                 activePlayers.remove(current);                 activeIDs.remove(current);                 activeLayout.removeView(thisPlayer);                 usersClass.addToGameList(PlayerSelect.this, allUsers, username, id, new AddUserCallback() {                     @Override                     public void addUser(Boolean add, View thisPlayer) {                         if(add){                             AddRemoveUser(username,id,true,thisPlayer);                         } else {                             AddRemoveUser(username,id,false,thisPlayer);                         }                     }                 });             }         }         Log.d("VIEW",activePlayers.size() + "");         noActivePlayers.setVisibility((activePlayers.size() &gt; 0)? View.GONE : View.VISIBLE);         noSavedPlayers.setVisibility((allUsers.getChildCount() &gt; 0) ? View.GONE : View.VISIBLE);     } } </code></pre>  <p>Any help on this problem would be great, I also applogise for the question title as I don't really know where this problem would come under.</p>