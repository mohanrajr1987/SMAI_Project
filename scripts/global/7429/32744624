<p>In Sitecore, I Have 2 classes representing 2 possible nodes that can live as children of another node.  My model contains a Children property which is an IEnumerable&lt;INode&gt; (INode being implemented by both classes). At runtime, I get the underlying type of each child to identify them and do some stuff. Everything works like a charm in my tests. But the actual implementation doesn't.</p>  <p>Basically in a razor view (inheriting from GlassView, I cycle through the collection of INode children and call .GetType() to identify the underlying class. But instead of getting the correct type, I get IColumnProxy type, which is the dynamic proxy glass mapper uses to create the view model.</p>  <p>Is there a way to get the actual type instead of the dynamic proxy? Thanks</p>  <p><strong>EDIT: here is code example:</strong></p>  <pre><code>public interface INode {}  [SitecoreType(TemplateId = "AAAAAAAAA", AutoMap = true)] public Class NodeType1 : INode {    public string PropertyA { get; set; } }  [SitecoreType(TemplateId = "BBBBBBB", AutoMap = true)] public Class NodeType2 : INode {    public string PropertyB { get; set; } }  [SitecoreType(TemplateId = "CCCCCCC", AutoMap = true)] public class SitecoreItem  {    [SitecoreChildren(InferType=true)]    public virtual IEnumerable&lt;INode&gt; Nodes { get; set; } } </code></pre>  <p>And in the razor view:</p>  <pre><code>@foreach(var node in item.Nodes) {   var type = node.GetType(); //INodeProxy   var isNode1 = node is NodeType1; //False   var isNode2 = node is NodeType2; //False   var baseType = node.GetType().BaseType; //DynamicProxy } </code></pre>  <p>References in projects are Glass.Mapper and Glass.Mapper.Sc</p>  <p><strong>EDIT: Update 1</strong></p>  <p>Well, after digging a bit into it, it seems GlassMapper does it the way I am supposed to, but for some reason it doesn't work in my specific case. What Am I missing? References?</p>