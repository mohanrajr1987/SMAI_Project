<p>I'm seeking an advise on best practice that has worked for creating a asp.net MVC visual studio solution that supports multisite (multi tenant). One thing we would like to do is minimize the regression defects so that developer don't modify the wrong website code base etc.</p>  <p>in my mind there are 2 approaches.</p>  <p>Approach 1:</p>  <pre><code>-Services (Project)     |- Site A         |-Service.cs     |- Site B         |-Serviceb.cs |-Repository(Project)     |- Site A         |- Repository.cs     |- Site B         |- Repositorya.cs |-MVC (Project)     |-Areas         |-Site A             |- Controller             |- View         |-Site B             |- Controller             |- View     |-Content         |-Site A             |- CSS             |- JS         |-Site A             |- CSS             |- JS </code></pre>  <p>Approach 2</p>  <pre><code>-Services.SiteA (Project)         |-Service.cs -Services.SiteB (Project)         |-Serviceb.cs -Repository.SiteA(Project)         |- Repository.cs -Repository.Site B(Project)         |- Repositorya.cs -MVC.SiteA (Project)         |- Controller         |- View         |Content             |- CSS             |- JS  -MVC.Site B         |- Controller         |- View         |Content             |- CSS             |- JS </code></pre>  <p>Could someone please help me with which option may be better? Not that the solution needs to support more than 8 web sites.</p>