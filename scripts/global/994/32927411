<p>I'm writing a <em>Swift</em> command line tool that uses <code>NSTask</code> to interact with <code>git</code>. In the simplest scenario I want to run three commands: <code>init</code>, <code>add .</code>, and <code>commit -m Initial Commit</code>. I intend to use a separate <code>NSTask</code> for each command, and want to house each command in its own function - returning <code>true</code> if the task succeeded or <code>false</code> if it didn't. This set-up would allow my <code>main</code> function to look like this:</p>  <pre><code>func main() {      if runInit() {         if runStage() {             if runCommit() {                  NSLog("success!")             }         }     } } </code></pre>  <p>To accomplish this each of the three functions must do the following before returning (i) launch the task (ii) wait for it to complete, (iii) obtain whatever is in <code>stdout</code>, and (iv) set the return value (<code>true</code> or <code>false</code>). Here's what I've got for the commit stage:</p>  <pre><code>func runCommit() -&gt; Bool {      var retval = false      var commitTask = NSTask()     commitTask.standardOutput = NSPipe()     commitTask.launchPath = gitPath     commitTask.arguments = ["commit", "-m", "Initial Commit"]     commitTask.currentDirectoryPath = demoProjectURL.path!      commitTask.standardOutput.fileHandleForReading.readToEndOfFileInBackgroundAndNotify()      nc.addObserverForName(NSFileHandleReadToEndOfFileCompletionNotification,         object: commitTask.standardOutput.fileHandleForReading,         queue: nil) { (note) -&gt; Void in             // get the output, log it, then...             if commitTask.terminationStatus == EXIT_SUCCESS {                 retval = true             }      }      commitTask.launch()     commitTask.waitUntilExit()      return retval  } </code></pre>  <p>My question is essentially about how <code>waitUntilExit</code> works, particularly in conjunction with the notification I sign up for to enable me to get the output. Apple's docs say: </p>  <blockquote>   <p>This method first checks to see if the receiver is still running using isRunning. Then it polls the current run loop using NSDefaultRunLoopMode until the task completes.</p> </blockquote>  <p>I'm a bit out of my depth when it comes to run loop mechanics, and was wondering what this means in this context - can I safely assume that my notification block will <strong>always</strong> be executed before the enclosing function returns?</p>