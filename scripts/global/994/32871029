<p>I'm currently developing an app where I need a progress indicator for the processing of a few thousand files. </p>  <p>While I already figured out that one should do the updating of the progress indicator on the main thread while doing the progressing on a background thread, i would like to know if there are best practices in handling the backgroundthread&lt;->progressindicator interaction.</p>  <p>Below is the way i do it right know:</p>  <pre><code>[self.loadingBarViewController performSelectorOnMainThread:@selector(startProgressBarWithMaxValue:) withObject:max waitUntilDone:NO];   int i = 0; for (NSURL *fileURL in files) {      // Here I process the file      [self.loadingBarViewController performSelectorOnMainThread:@selector(setProgressValue:) withObject:@(i) waitUntilDone:NO];     i++;  }   [self.loadingBarViewController performSelectorOnMainThread:@selector(stopProgressBar) withObject:nil waitUntilDone:NO]; </code></pre>  <p>I have a few things in mind about it:</p>  <ol> <li>Should I update the progress indicator only every ten files or something, so that I don't clog up the main thread too much (each file takes only a few milliseconds to process)?</li> <li>Should I wait for the MainThread to be done with the selector? I could imagine, that all those selector calls stack up on the main thread so that for example I already processed file 5024 during the thread still updates the progress indicator to 3089?</li> <li>Should I use more threads to process the files, or does that bring any problems in updating the indicator?</li> </ol>  <p>Any other best practices for dealing with that backgroundthread&lt;->progressindicator interaction?</p>  <p>Thanks a bunch =)</p>