<p>I'm learning Java as well as studying books on code design. </p>  <p>I am wondering, is it possible in Java to have an <code>if</code> statement encapsulated in a method call that allows one to somehow exit the parent method if the <code>boolean</code> is false? </p>  <p>What I'm wondering is that if if I can further distill the following code</p>  <pre><code>public void addStock (String stock) {  boolean stockNameIsValid = testStringForValidStockName(stock);     if (stockNameIsValid == false){         JOptionPane.showMessageDialog(getParent(), "Invalid text entered. Stock ticker names may only include upper-case alphabetical letters.", "Invalid Text Entry Error", JOptionPane.ERROR_MESSAGE);         return;     }  boolean stockAlreadyExistsInPanel = testForStockExistenceInListingPanel(stock);      if(stockAlreadyExistsInPanel == true){         JOptionPane.showMessageDialog(getParent(), "The same stock cannot be entered twice into the list of stocks being watched.", "Redundant Stock Error", JOptionPane.ERROR_MESSAGE);         return;     }      controller.addStockToDb(stock);  } </code></pre>  <p>into something like </p>  <pre><code>public void addStock(String stock){     giveErrorAndReturnIfStockNameInvalid(stock);     giveErrorAndReturnIfStockCannotBeFound(stock);     controller.addStockToDb(stock); } </code></pre>  <p>I'm wondering if doing this is possible because my IDE can't extract the code above any further, and having my code shaped in the second way above I think would communicate intent better and have a higher level of abstraction than the initial example. </p>  <p>I have this idea because I'm currently reading Uncle Bob's "Clean Code" book, and inside it says that methods ultimately should be as short as you can make them. If I encapsulate lower-level logic within method calls then it leaves the code reflecting higher-level logic. This makes the code easier to understand because it requires less of the developer's mental resources to get a general concept of what each part of the code does.</p>  <p>My goal here is to eliminate the reader from actually having to analyze the implementations details of the code here unless it's absolutely necessary. So instead of having to read through an entire method to comprehend it, the reader can instead get a more abstract representation of the logic of my code. </p>