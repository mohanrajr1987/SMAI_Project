<p>What considered to be the best &amp; common practice if I want to make sure that after setter is called the object cannot be modified from outside? In the code there is detailed simple self explained example, With 2 options dilemma.</p>  <pre><code>//caller scope CustomObject original = new CustomObject(params...);  //original state 1 MyClass mMyClass = new MyClass(original); original.modifyMe(params...);  //original state 2 mMyClass.setCustomObject(original); original.modifyMe(params...); //original state 3   /*!!!REQUIREMENT: mMyClass.CustomObject should be in state 2!!!*/   class MyClass {      private CustomObject mObject;      public MyClass() {         this.mObject = new CustomObject();     }      public MyClass(CustomObject obj) {         this.mObject = obj.Clone();     }      //mObject is private, modified only through setter     public getCustomObject() {         return this.mObject;     }      public setCustomObject(CustomObject obj) {         //Option 1 in the caller           //mMyClass.setCustomObject(new CustomObject(params...));         this.mObject = obj;          //Option 2 in the caller         //mMyClass.setCustomObject(callerCustomObject);         this.mObject = obj.Clone();     }  } </code></pre>