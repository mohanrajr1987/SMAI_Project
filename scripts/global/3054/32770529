<p>In Python it appears that <code>import</code>s are truly lexically scoped.  Is this true?</p>  <p><strong>For example if you do this:</strong></p>  <pre><code>def some_function:     import sys  print sys.argv[0] </code></pre>  <p><strong>You will get an error:</strong></p>  <pre><code>Traceback (most recent call last):   File "example.py", line 4, in &lt;module&gt;     print sys.argv[0] NameError: name 'sys' is not defined </code></pre>  <hr>  <blockquote>   <p>In Perl, <code>use</code> statements are not lexically scoped, but Perl does not give you a syntax error if you attempt to define them lexically (i.e. within a subroutine).  Doing this causes confusion and is considered <strong>very bad practice</strong>.  </p> </blockquote>  <p>In Python this doesn't appear to be how things work.  I believe I've read somewhere that it is considered good practice to always put your <code>import</code> statements at the top of your code, but if they are truly lexically scoped as the example seems to show (meaning they can't be accessed outside of the scope in which they are defined), I don't see why it would be considered bad practice to just put them where you use them.</p>  <p><strong><em>Is there any reason lexically scoping <code>import</code>s would be bad practice in Python? If so, please explain why?</em></strong></p>