<p>I have a TIFF image file from a confocal microscope which I can open in ImageJ, but which I would like to get into Python.</p>  <p>The format of the TIFF is as follows: There are 30 stacks in the Z dimension. Each Z layer has three channels from different fluorescent markers. Each channel has a depth of 8 bits. The image dimensions are 1024x1024.</p>  <p>I can, in principle, read the file with skimage (which I plan to use to further analyse the data) using the tifffile plugin. However, what I get is not quite what I expect.</p>  <pre><code>merged = io.imread("merge.tif", plugin="tifffile") merged.shape # (30, 3, 3, 1024, 1024) # (zslice, RGB?, channel?, height, width) merged.dtype # dtype('uint16') </code></pre>  <p>What confused me initially was the fact that I get two axes of length 3. I <em>think</em> that this is because tifffile treats each channel as separate RGB images, but I can work around this by subsetting or using <code>skimage.color.rgb2grey</code> on the individual channels. What concerns me more is that the file is imported as a 16 bit image. I can convert it back using <code>skimage.img_as_ubyte</code>, <em>but</em> afterwards, the histogram does no longer match the one I see in ImageJ.</p>  <p>I am not fixated on using skimage to import the file, but I would like to get the image into a numpy array eventually to use skimage's functionality on it. </p>