<pre><code>import java.io.IOException;  import javax.swing.text.BadLocationException;  import org.apache.pdfbox.cos.COSArray; import org.apache.pdfbox.cos.COSDictionary; import org.apache.pdfbox.cos.COSFloat; import org.apache.pdfbox.cos.COSName; import org.apache.pdfbox.cos.COSString; import org.apache.pdfbox.exceptions.COSVisitorException; import org.apache.pdfbox.pdmodel.PDDocument; import org.apache.pdfbox.pdmodel.PDPage; import org.apache.pdfbox.pdmodel.interactive.action.PDAnnotationAdditionalActions; import org.apache.pdfbox.pdmodel.interactive.action.type.PDActionJavaScript; import org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm; import org.apache.pdfbox.pdmodel.interactive.form.PDTextbox; import org.junit.Test;  public class TestPDTextbox {     @Test     public void Sample1 () throws IOException, COSVisitorException, BadLocationException {           PDDocument doc = new PDDocument();         PDPage page = new PDPage();         doc.addPage(page);             COSDictionary acroFormDict = new COSDictionary();  //        acroFormDict.setBoolean(COSName.getPDFName("NeedAppearances"), true);         acroFormDict.setItem(COSName.getPDFName("Fields"), new COSArray());          PDAcroForm acroForm = new PDAcroForm(doc, acroFormDict);         doc.getDocumentCatalog().setAcroForm(acroForm);          COSDictionary cosDict1 = new COSDictionary();         COSArray rect1 = new COSArray();         rect1.add(new COSFloat(100));         rect1.add(new COSFloat(700));         rect1.add(new COSFloat(200));         rect1.add(new COSFloat(750));          cosDict1.setItem(COSName.RECT, rect1);         cosDict1.setItem(COSName.FT, COSName.getPDFName("Tx")); // Field Type         cosDict1.setItem(COSName.TYPE, COSName.ANNOT);         cosDict1.setItem(COSName.SUBTYPE, COSName.getPDFName("Widget"));         cosDict1.setItem(COSName.T, new COSString("tx1"));         cosDict1.setItem(COSName.DA, new COSString("/Helv 7 Tf 0 g"));         cosDict1.setItem(COSName.V, new COSString("Test Value1"));          PDTextbox textbox = new PDTextbox(doc.getDocumentCatalog().getAcroForm(), cosDict1);  //      textbox.setValue("Test Value");          page.getAnnotations().add(textbox.getWidget());         acroForm.getFields().add(textbox);           doc.save("C:\\PDF\\SampleTextbox.pdf");          doc.close();     } } </code></pre>  <p><strong><em>Issue#1</em></strong> I have created one text field as shown in above code and tried to set value using textbox.setValue("Test Value"); method but it is giving error as shown below : </p>  <pre><code>java.io.IOException: Error: Don't know how to calculate the position for non-simple fonts     at org.apache.pdfbox.pdmodel.interactive.form.PDAppearance.getTextPosition(PDAppearance.java:1037)     at org.apache.pdfbox.pdmodel.interactive.form.PDAppearance.insertGeneratedAppearance(PDAppearance.java:558)     at org.apache.pdfbox.pdmodel.interactive.form.PDAppearance.setAppearanceValue(PDAppearance.java:338)     at org.apache.pdfbox.pdmodel.interactive.form.PDVariableText.setValue(PDVariableText.java:131)     at sample.pdfbox.example.TestPDTextbox.Sample1(TestPDTextbox.java:54)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) </code></pre>  <p><strong><em>Issue#2</em></strong></p>  <p>In order to fix issue#1, If I set value of textBox using cosDictionary property  i.e. cosDict1.setItem(COSName.V, new COSString("Test Value1"));</p>  <p>Then in Adobe Reader, value of textBox is not populated properly. I have to click on textbox and then only value appears, and once I move out from the field, value again gets invisible. </p>  <p><strong><em>Issue#3</em></strong></p>  <p>In order to fix issue#2, I need to set needAppearances flag to true as shown below, and after that field value is displayed properly in PDF. But after this solution, I`m not able to extract/parse PDF field back once user changes field value and we again parse this PDF.</p>  <p><strong><em>Note:-</em></strong> This issue exists in Adobe Reader, here while opening PDF it gives some message too like <em>fixing form fields up</em>. And once I save PDF and tried to parse acroform fields, all fields are found to be reset or null. None of the field name or field values can be extracted.</p>  <p>So using acroFormDict.setBoolean(COSName.getPDFName("NeedAppearances"), true); in code seems risky and it creates other issue in PDF parsing so it cannot be used.</p>  <pre><code>COSDictionary acroFormDict = new COSDictionary();          acroFormDict.setBoolean(COSName.getPDFName("NeedAppearances"), true);         acroFormDict.setItem(COSName.getPDFName("Fields"), new COSArray());          PDAcroForm acroForm = new PDAcroForm(doc, acroFormDict);         doc.getDocumentCatalog().setAcroForm(acroForm); </code></pre>  <p>I think, I need to set PDAppearanceDictionary for text fields but I don`t know to do that and whether I need to set for each field or at acroform level.</p>  <p>Please help me with this issue how should I resolve. I`m using PDFBOX version 1.8.10.</p>