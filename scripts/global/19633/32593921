<p>I am trying to test a Sinatra application that is using oauth that has the following code being run before every route for the callback:</p>  <pre><code>before do   unless session.has_key?(:oauth_token) || request.path == '/auth/callback'     access_url = oauth_client.auth_code.authorize_url(redirect_uri: ENV['CALLBACK'])     puts "Redirecting to #{access_url}"     redirect "#{access_url}"   end end </code></pre>  <p>For my tests, I simply just want to set the <code>session[:oauth_token]</code> to <em>anything</em> so that I get past this block and move onto the test. However, after hours of searches and experimentation, I haven't been able to figure it out. </p>  <p>I've tried <code>Rack::Test</code> to try and set it this way: </p>  <pre><code>describe "Visit home page", js: true do     before { get '/', {}, { 'rack.session' =&gt; { oauth_token: 'blahblahblah' } } }     it "has a list of products" do       get "/"       expect(page).to have_link("Clear &amp; Mild Foam Handwash Refill, Fragrance-Free, 1250mL Refill, 3/Carton")       expect(page).to have_link("Coffee Portion Packs, 1.5oz Packs, Hazelnut Cr√®me, 24/Carton")     end   end end </code></pre>  <p>and my <code>spec_helper.rb</code> looks like this:</p>  <pre><code>require File.expand_path '../../server.rb', __FILE__ require 'rspec' require 'capybara/rspec' require 'rack/test' require 'capybara-screenshot/rspec' require 'capybara/poltergeist' Capybara.javascript_driver = :poltergeist  set :environment, :test  Capybara.app = Sinatra::Application  ENV['RACK_ENV'] = 'test'  module RSpecMixin   include Rack::Test::Methods   def app() Sinatra::Application end    def setup_session(session = {})     Rack::Session::Abstract::SessionHash.stub(:new).and_return(session)   end end  RSpec.configure do |c|   c.include RSpecMixin end </code></pre>  <p>What is the best way to go about actually setting a session before every route? </p>