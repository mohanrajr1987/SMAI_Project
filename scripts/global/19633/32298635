<p>Working on a web service that sometimes needs to return large files, and want it to send something to the client quickly so the client doesn't time out waiting for the start of the data.  <code>stream</code> seemed perfect for this, but I ran into a problem.</p>  <p>Dumb example:</p>  <pre><code>get '/path' do   status 200   headers 'Content-Type' =&gt; 'text/plain'   stream do |out|     sleep 1     out &lt;&lt; "Hello,\n"     sleep 1     out &lt;&lt; "World!\n"   end end </code></pre>  <p>This works fine:</p>  <pre><code>$  curl http://localhost:4567/path    Hello,    World! </code></pre>  <p>But I have a side log that the service writes to, and trying to mix File I/O with the streaming API doesn't work at all:</p>  <pre><code>get '/path' do   status 200   headers 'Content-Type' =&gt; 'text/plain'   File.open '/tmp/side-log', 'a' do |lf|     stream do |out|       lf.puts "Woo!"       sleep 1       out &lt;&lt; "Hello,\n"       sleep 1       out &lt;&lt; "World!\n"     end   end end </code></pre>  <p>Now I get this:</p>  <pre><code>$ curl http://localhost:4567/path curl: (18) transfer closed with outstanding read data remaining </code></pre>  <p>Puma doesn't indicate any problems on the server side, but Thin exits entirely:</p>  <pre><code>hello2.rb:13:in `write': closed stream (IOError)         from hello2.rb:13:in `puts'         from hello2.rb:13:in `block (3 levels) in &lt;main&gt;'         from vendor/bundle/gems/sinatra-1.4.6/lib/sinatra/base.rb:437:in `block (2 levels) in stream'         from vendor/bundle/gems/sinatra-1.4.6/lib/sinatra/base.rb:628:in `with_params'         from vendor/bundle/gems/sinatra-1.4.6/lib/sinatra/base.rb:437:in `block in stream'         from vendor/bundle/gems/sinatra-1.4.6/lib/sinatra/base.rb:403:in `call'         from vendor/bundle/gems/sinatra-1.4.6/lib/sinatra/base.rb:403:in `block in each'         from vendor/bundle/gems/eventmachine-1.0.8/lib/eventmachine.rb:1062:in `call'         from vendor/bundle/gems/eventmachine-1.0.8/lib/eventmachine.rb:1062:in `block in spawn_threadpool' [1]+  Exit 1                  ruby hello2.rb </code></pre>  <p>So what should I do if I want to write something out to someplace other than the output stream from inside the stream block? </p>