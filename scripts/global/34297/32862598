<p>I am trying this code but after adding certificate to given document it shows me invalid document into Ms Office when i try to open in ms office.Kindly Attach the Code if possible.  I am trying this code but after adding certificate to given document it shows me invalid document into Ms Office when i try to open in ms office.Kindly  Attach the Code if possible.</p>  <pre><code>import java.awt.List; import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.IOException; import java.security.Key; import java.security.KeyStore; import java.security.KeyStoreException; import java.security.NoSuchAlgorithmException; import java.security.PrivateKey; import java.security.Security; import java.security.UnrecoverableKeyException; import java.security.cert.Certificate; import java.security.cert.CertificateException; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections;  import javax.security.cert.X509Certificate; import javax.xml.crypto.MarshalException; import javax.xml.crypto.dsig.XMLSignatureException;  import org.apache.poi.openxml4j.exceptions.InvalidFormatException; import org.apache.poi.openxml4j.opc.OPCPackage; import org.apache.poi.openxml4j.opc.PackageAccess; import org.apache.poi.poifs.crypt.dsig.SignatureConfig; import org.apache.poi.poifs.crypt.dsig.SignatureInfo; import org.bouncycastle.jce.provider.BouncyCastleProvider;  public class SignDocument {  public static void main(String[] args) { try {     KeyStore ks = null;     PrivateKey key = null;     ks = KeyStore.getInstance("PKCS12");     System.out.println("" + ks.getProvider().getName());     ks.load(new FileInputStream(         "C:\\Users\\rrajpura\\Desktop\\admin.pfx"), "admin"         .toCharArray());     String alias = (String) ks.aliases().nextElement();     key = (PrivateKey) ks.getKey(alias, "admin".toCharArray());     java.security.cert.X509Certificate x509 = (java.security.cert.X509Certificate) ks         .getCertificate(alias);     SignatureConfig signatureConfig = new SignatureConfig();     signatureConfig.setKey(key);     signatureConfig.setSigningCertificateChain(Collections         .singletonList(x509));     OPCPackage pkg = OPCPackage.open(new File(         "C:\\Users\\rrajpura\\Desktop\\TEST.docx"),         PackageAccess.READ_WRITE);     signatureConfig.setOpcPackage(pkg);      // adding the signature document to the package     SignatureInfo si = new SignatureInfo();     si.setSignatureConfig(signatureConfig);     si.confirmSignature();     // optionally verify the generated signature     boolean b = si.verifySignature();     assert (b);     // write the changes back to disc     pkg.close();     } catch (UnrecoverableKeyException e) {         // TODO Auto-generated catch block         e.printStackTrace();     } catch (KeyStoreException e) {         // TODO Auto-generated catch block         e.printStackTrace();     } catch (NoSuchAlgorithmException e) {         // TODO Auto-generated catch block         e.printStackTrace();     } catch (CertificateException e) {         // TODO Auto-generated catch block         e.printStackTrace();     } catch (FileNotFoundException e) {         // TODO Auto-generated catch block         e.printStackTrace();     } catch (InvalidFormatException e) {         // TODO Auto-generated catch block         e.printStackTrace();     } catch (IOException e) {         // TODO Auto-generated catch block         e.printStackTrace();     } catch (XMLSignatureException e) {         // TODO Auto-generated catch block         e.printStackTrace();     } catch (MarshalException e) {         // TODO Auto-generated catch block         e.printStackTrace();     } catch (Exception e) {         // TODO: handle exception         e.printStackTrace();     }     } } </code></pre>