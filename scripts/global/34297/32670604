<p>I have a small application written in Java which uses Apache POI to read/modify values in an Excel document. I'm referencing cells using sheet name, like for cell A1 in sheet "Sheet1", I use "Sheet1!A1". </p>  <p>The application runs from the command line with three arguments: the document name, the cells with values I want to replace, the cells from where I want to get the output.</p>  <p>Example: ReadExcel test.xls Sheet1!B2=10;Sheet1!B3=20 Sheet1!B7</p>  <p>The above example works fine.</p>  <p>The problem is when I want to modifiy cells or get the output from another sheet. </p>  <p>Example: ReadExcel test.xls Sheet1!B2=10;Sheet1!B3=20 Sheet2!B2</p>  <p>My code is bellow:</p>  <pre><code>package poitest;  import java.util.List; import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.IOException; import java.util.ArrayList; import java.util.HashMap; import java.util.Iterator; import java.util.Map; import java.util.Map.Entry;  import org.apache.poi.hssf.usermodel.HSSFCell; import org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator; import org.apache.poi.hssf.usermodel.HSSFRow; import org.apache.poi.hssf.usermodel.HSSFSheet; import org.apache.poi.hssf.usermodel.HSSFWorkbook; import org.apache.poi.hssf.util.CellReference; import org.apache.poi.ss.usermodel.*;  public class ReadExcel {     public static void main(String[] args) throws FileNotFoundException, IOException {         // Will contain cell name / value pair for input cells                   Map&lt;String, String&gt; inputCellsMap = new HashMap&lt;String, String&gt;();          // Will contain cell name for output cells         List&lt;String&gt; outputCells = new ArrayList&lt;String&gt;();          // Open the Excel file         FileInputStream file = new FileInputStream(new File(args[0]));          // Get the current workbook         HSSFWorkbook workbook = new HSSFWorkbook(file);          // Get the first sheet of the workbook         HSSFSheet sheet = workbook.getSheetAt(0);          // Get the input cells that need to be modified and         // store their name and value in the inputCellsMap         for (String element : args[1].split(";")) {             inputCellsMap.put(element.split("=")[0], element.split("=")[1]);         }          // Get the output cells that will be accessed for resulting values         for (String element : args[2].split(";")) {             outputCells.add(element);                    }          // Loop through the cells that need to be modified and          // set the new value in the Excel document         Iterator&lt;Entry&lt;String,String&gt;&gt; inputIterator = inputCellsMap.entrySet().iterator();         while (inputIterator.hasNext()) {             Map.Entry&lt;String,String&gt; inputEntry = (Map.Entry&lt;String,String&gt;) inputIterator.next();              CellReference cellReferenceInput = new CellReference(inputEntry.getKey());             int cellReferenceInputRow = cellReferenceInput.getRow();             int cellReferenceInputColumn = cellReferenceInput.getCol();              Row rowInput = sheet.getRow(cellReferenceInputRow);             if (rowInput == null)                 rowInput = sheet.createRow(cellReferenceInputRow);             Cell cellInput = rowInput.getCell(cellReferenceInputColumn, Row.CREATE_NULL_AS_BLANK);                           cellInput.setCellValue(Integer.parseInt(inputEntry.getValue()));                 }          // Apply all formulas after altering cell values         HSSFFormulaEvaluator.evaluateAllFormulaCells(workbook);          // Get the results from the output cells         for (int i = 0; i &lt; outputCells.size(); i++) {             CellReference cellReferenceOutput = new CellReference(outputCells.get(i));             int cellReferenceOutputRow = cellReferenceOutput.getRow();             int cellReferenceOutputColumn = cellReferenceOutput.getCol();              Row rowOutput = sheet.getRow(cellReferenceOutputRow);             Cell cellOutput = rowOutput.getCell(cellReferenceOutputColumn, Row.CREATE_NULL_AS_BLANK);              // Display results             System.out.println(cellOutput.getNumericCellValue());                                }                     workbook.close();            } } </code></pre>