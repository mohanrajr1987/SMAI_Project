<p>I have a TableView which I populate with <code>MappingItem</code> objects. The goal is to create a mapping between an Excel source fields to database fields.</p>  <p>In the TableView I have two columns. One is of <code>&lt;MappingItem, String&gt;</code> and represents an Excel header. The other is of <code>&lt;MappingItem, GoldplusField&gt;</code> and represents a database field. The second column's cells are <code>ComboBoxTableCell</code> which has a list of fields from my DB.</p>  <p>The problem is that after I change the selection in the second column combobox, the <code>MappingItem</code> does not get updated by my selection. I tried to get the selected Cell and extract the item but I always get Null references.</p>  <p>This is the UI: <a href="http://i.stack.imgur.com/nv99b.jpg" rel="nofollow"><img src="http://i.stack.imgur.com/nv99b.jpg" alt="enter image description here"></a></p>  <p>This is a sample code:</p>  <pre><code>package tableviewexample;  import javafx.application.Application; import javafx.beans.property.ReadOnlyObjectWrapper; import javafx.beans.value.ObservableValue; import javafx.collections.*; import javafx.event.*; import javafx.scene.Scene; import javafx.scene.control.*; import javafx.scene.control.cell.ComboBoxTableCell; import javafx.scene.layout.StackPane; import javafx.stage.Stage; import javafx.util.Callback; import javafx.util.StringConverter;  public class TableViewExample extends Application {      @Override     public void start(Stage primaryStage) {         TableView&lt;MappingItem&gt; table = new TableView&lt;&gt;();          // FIRST COLUMN         TableColumn&lt;MappingItem, String&gt; colA = new TableColumn&lt;&gt;("Excel Column");                  colA.setCellValueFactory(new Callback&lt;TableColumn.CellDataFeatures&lt;MappingItem, String&gt;, ObservableValue&lt;String&gt;&gt; () {             @Override             public ObservableValue&lt;String&gt; call(TableColumn.CellDataFeatures&lt;MappingItem, String&gt; param) {                 return new ReadOnlyObjectWrapper(param.getValue().getExcelColumnName());             }                     });             //SECOND COLUMN         TableColumn&lt;MappingItem, GoldplusField&gt; colB = new TableColumn&lt;&gt;("Database Field Column");         colB.setCellValueFactory(new Callback&lt;TableColumn.CellDataFeatures&lt;MappingItem, GoldplusField&gt;, ObservableValue&lt;GoldplusField&gt;&gt; () {             @Override             public ObservableValue&lt;GoldplusField&gt; call(TableColumn.CellDataFeatures&lt;MappingItem, GoldplusField&gt; param) {                 return new ReadOnlyObjectWrapper(param.getValue().getGpField());             }                     });          GoldplusField gp1 = new GoldplusField("T1", "fName", "First Name");         GoldplusField gp2 = new GoldplusField("T1", "phn", "Phone");          ObservableList&lt;GoldplusField&gt; fieldsList = FXCollections.observableArrayList(gp1, gp2);         colB.setCellFactory(ComboBoxTableCell.forTableColumn(new FieldToStringConvertor(), fieldsList));                   colB.setOnEditCommit(new EventHandler&lt;TableColumn.CellEditEvent&lt;MappingItem, GoldplusField&gt;&gt;() {              public void handle(TableColumn.CellEditEvent&lt;MappingItem, GoldplusField&gt; e) {                  GoldplusField gpf = colB.getCellData(table.getFocusModel().getFocusedItem());                 System.out.println(gpf.getGpName());                  MappingItem item = table.getSelectionModel().getSelectedItem();                  System.out.println(item.getGpField().getGpName());              }         });          table.setEditable(true);         table.getColumns().addAll(colA, colB);          MappingItem mi1 = new MappingItem("name");         MappingItem mi2 = new MappingItem("phone");         ObservableList&lt;MappingItem&gt; miList = FXCollections.observableArrayList(mi1, mi2);          table.setItems(miList);          StackPane root = new StackPane();         root.getChildren().add(table);          Scene scene = new Scene(root, 300, 250);          primaryStage.setTitle("Hello World!");         primaryStage.setScene(scene);         primaryStage.show();     }      /**      * @param args the command line arguments      */     public static void main(String[] args) {         launch(args);     }      class FieldToStringConvertor extends StringConverter&lt;GoldplusField&gt; {          @Override         public String toString(GoldplusField object) {              if (object != null)                 return object.getGpName();             else                 return "";         }          @Override         public GoldplusField fromString(String string) {             throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.         }             }      class MappingItem {         private String excelColumnName;         private GoldplusField gpField;          public String getExcelColumnName() { return excelColumnName; }          public void setExcelColumnName(String excelColumnName) { this.excelColumnName = excelColumnName; }              public GoldplusField getGpField() { return gpField; }          public void setGpField(GoldplusField gpField) { this.gpField = gpField; }          public MappingItem(String columnName) {             this.excelColumnName= columnName;         }             public MappingItem(GoldplusField gpField) {             this.gpField = gpField;         }           public MappingItem(String columnName, GoldplusField gpField) {             this.excelColumnName = columnName;             this.gpField = gpField;         }            }          class GoldplusField {         private String table;         private String dbName;         private String gpName;          public String getDbName() { return dbName; }          public String getGpName() { return gpName; }          public String getTable() { return table; }          public void setDbName(String dbName) { this.dbName = dbName; }          public void setGpName(String gpName) { this.gpName = gpName; }          public void setTable(String table) { this.table = table; }          public GoldplusField(String table, String dbName, String gpName) {             this.dbName = dbName;             this.gpName = gpName;             this.table = table;         }     }   } </code></pre>