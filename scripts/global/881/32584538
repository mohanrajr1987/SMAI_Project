<p>I am regularly generating a zip of folders on a server and pushing these archives to a storage server.  To comply with data privacy regulations, we need to have these folder encrypted using a client's supplied public key.</p>  <p>I am using gnupg, and have imported the public key to the server.</p>  <pre><code>stream = open('/home/user/myfile.zip','rb') gpg.encrypt(stream,fingerprint,output='/home/user/myfile.zip.gpg') </code></pre>  <p>However when using the private key to decrypt the file, the resulting zip file is a different size than the source zip, and is unreadable.  For example, the source zip file is 66KB, the decrypted file is 104KB.</p>  <p>I have had similar problems with other compressed test files: .jpg, .png, etc.</p>  <p>The only files I have successfully decrypted and opened are uncompressed text files - .txt and .css, so I know that the key pair is working.</p>  <p>When trying to open a decrypted zip file, the error I get is: "There was a problem reading the contents of "myfile.zip".  The archive file is incomplete".</p>  <p>EDIT: If I run the gpg command from Ubuntu it works correctly: gpg --homedir /home/user/.pgphome --output /home/user/myfile.zip.gpg --encrypt /home/user/myfile.zip, so this problem is isolated to Python.</p>