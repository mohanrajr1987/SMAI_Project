<p>I have a class named <code>Matrix</code> that contains one field that is stored dynamic. And a method named <code>Multiply()</code> that has to return the result of multiplying 2 Matrix. Problem is that I defined a destructor and when I return, variable which stores the resultant Matrix get some random values, I guess it happens because new variable have the same address as temporary Matrix. How can I return it correctly?</p>  <pre><code>class Matrix{     double **val;     int rows,cols,errorCode; public:     Matrix();     Matrix(int);     Matrix(int, int);     ~Matrix();     void Print();     void Read();     void Realoc(int, int );     void Assign(int,int,double);     Matrix Multiply(Matrix&amp;);     void Multiply(double); };  Matrix Matrix::Multiply(Matrix &amp;a){     if(cols != a.rows){         Matrix b;         b.errorCode=112; //That means matrices are not compatible;         cout&lt;&lt;"WARNING! Error "&lt;&lt;errorCode&lt;&lt;" has occurred. "&lt;&lt;endl;         return b;     }     else{             //Making a new matrix where we save computed values;         Matrix b;         b.Realoc(rows,a.cols);               //Computing values;         double  p;         for(int i=0;i&lt;rows;i++){             for(int j=0;j&lt;a.cols;j++){                 p=0;                 for(int k=0;k&lt;cols;k++){p += val[i][k]*a.val[k][j];}                 b.Assign(i+1,j+1,p);             }         }         return b;     } }  int main(){    Matrix a,b(2,2); b.Assign(1,1,0); b.Assign(1,2,3); b.Assign(2,1,5); b.Assign(2,2,5); b.Print();  a.Read(); cout&lt;&lt;endl; cout&lt;&lt;"'a' multiplied by 'b' is: "&lt;&lt;endl; Matrix m; m = a.Multiply(b); m.Print(); cout&lt;&lt;endl; return 0; } </code></pre>  <p>Some ideas?</p>  <p>P.S. I made copy constructor but it do not do any good result.</p>  <p>Here is a copy constructor I made.</p>  <pre><code>Matrix::Matrix(Matrix &amp;a){     rows = a.rows;     cols = a.cols;     errorCode = 0;     val = new double*[rows];     for(int i = 0;i&lt;rows;i++){         val[i] = new double[cols];     }     for(int i=0;i&lt;rows;i++){         for(int j=0;j&lt;cols;j++){             val[i][j] = a.val[i][j];         }     } } </code></pre>  <p>And destructor:</p>  <pre><code>Matrix::~Matrix(){     for(int i=0;i&lt;rows;i++){         delete[] val[i];     }     delete[] val; } </code></pre>