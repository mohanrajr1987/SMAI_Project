<p>So this is an assignment I'm having trouble getting started with. We've been going over Linked Lists, and while I feel I have an okay understanding of it, I'm having trouble translating it to a program. </p>  <p>Essentially the program has to read in two spare matrices from files, print both matrices, compute and print the transpose of both matrices, and compute and print the matrix product of the two matrices.</p>  <p>Reading in the matrices, and printing both matrices I'm fine with.</p>  <p>The issues I'm mainly having are with the later part of the assignment, computing, transposing, and the product.</p>  <p>Appreciate any help the StackOverflow community can give. </p>  <p>An aside for Design aspect:</p>  <p>For this assignment, we will represent only the non-zero entries in the sparse matrix using linked lists. Each non-zero element will be represented by a node. Each node will not only need to keep track of its value, but also its row number and column number. As each node is in exactly one row and one column it will appear in exactly two linked lists; one linked list for the row and one linked list for the column. These row and column linked lists will be circularly linked (not doubly linked). A head node will be needed for each column list and row list. The head nodes are similarly circularly linked lists; one for the row head nodes and one for the column head nodes. A single head node will serve as the head node for both of these lists.</p>  <p>Another aside for Implementation and Testing:</p>  <p>The strategy will involve implementing the following classes:</p>  <pre><code>class Node { Node nextInRow; Node nextInColumn; }  class HeadNode : Node { HeadNode getNext(); ValueNode getFirst(); void insert(int position, ValueNode value); ValueNode get(int position); }  class ValueNode : Node { int row; int column; int value; }  class SparseMatrix : Node { void insert(int row, int column, int value); SparseMatrix transpose(); SparseMatrix product(SparseMatrix sparseMatrix); void print(); HeadNode getRow(int position); HeadNode getColumn(int position); int get(int row, int col); } </code></pre>