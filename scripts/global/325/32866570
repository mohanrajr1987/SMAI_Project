<p>Foreword</p>  <p>My rails app cares about the hostname. So for example when the request comes from <code>domain-a.dev</code> it behaves differently than when the request comes from <code>domain-b.dev</code>. I want to test this behaviour and therefore have routed the complete <code>*.dev</code> TLD to <code>127.0.0.1</code> on my local machine, so I can set the domain of the server in my tests to what I want but it always uses my local machine tests server.</p>  <p>This is necessary because my tests use <code>selenium</code>, which launches an external browser and browses to <code>domain-a.dev</code> or <code>domain-b.dev</code>. So I cannot simply overwrite <code>request.hostname</code> (or so) in my tests, because this has no effect on the external browser.</p>  <p>Now I want to use a docker image for my tests, so I do not have to configure the test environment on multiple servers but simply start the docker image. Everything works so far but the <code>*.dev</code> resolving.</p>  <hr>  <p>AFAIK Docker uses the hosts nameserver or google nameserver by default (<a href="https://docs.docker.com/articles/networking/#dns" rel="nofollow">https://docs.docker.com/articles/networking/#dns</a>), but that would mean to change the host's dns to accomplish my goal which I don't want.</p>  <p>I want to build a docker image, where a special TLD, for example <code>dev</code>, always routes to <code>127.0.0.1</code>, <strong>without touching the docker host</strong>.</p>  <p>This means that for everybody running this docker image, for example <code>domain.dev</code> will be resolved to <code>127.0.0.1</code> inside the container. (Not only <code>domain.dev</code>, but every <code>*.dev</code> domain.). Other TLDs should work as usual.</p>  <p>An idea I have is to start <code>dnsmasq</code> inside the container, configured to resolve <code>*.dev</code> to <code>127.0.0.1</code> and forward the rest to the usual nameserver. But I am new to docker and have no idea if this is too complicated or how this could be accomplished.</p>  <p>Another idea might be to overwrite <code>/etc/hosts</code> in the container with fixed entries for special domains. But this would mean I have to update the docker container in case I want to resolve new domains to <code>127.0.0.1</code>, which is a drawback if the domains change often.</p>  <p>What do the docker experts say?</p>