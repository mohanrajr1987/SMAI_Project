<p>I'm using KendoUI and I have a datagrid in which I am trying to update data in a row inline. When I click the edit button, the UPDATE and CANCEL buttons are presented. When I click the UPDATE button nothing occurs. I have debugged this issue using Chrome developer tools and I put a break point where I thought an error(s) would appear. However, there are no errors that show up in relation to the UPDATE functionality of the KendoUI Grid datasource. Here is a snippet of my code:</p>  <pre><code>endorsementsTabGridDataSource = new kendo.data.DataSource({     type: "json",     transport: {         read: { url:function (obj){           return  "/${applicationScope.contextName}/admin/endorsements/api?templateVersionSysId=" + 201442 + "&amp;formCode=" + '7610810' + "&amp;state=" + "FL"            // url: "/${applicationScope.contextName}/admin/endorsements/api?templateVersionSysId=" +  $("#templateVersionSysId").val() + "&amp;formCode=" + formCode + "&amp;state=" + stateCode         }     }},      update: {         url: function (obj) {             return "/${applicationScope.contextName}/admin/endorsements/api"         },         type: "POST",         dataType: "json",         contentType: "application/json",         data: function(data){             return kendo.stringify(data)         }     },      parameterMap: function (options, operation) {         /* if ((operation === "create" || operation === "update" ) &amp;&amp; options) {             options.state = states.value();             options.templateVersionSysId = $("#templateVersionSysId").val();             options.formCode = formCode;         }          if (operation !== "read" &amp;&amp; options) {             return  kendo.stringify(options);         }*/          return JSON.stringify(options)     },      batch: false,     error: function (xhr, status, error) {         notification.show('Error occured in Endorsements Tab: ' + xhr.responseText, "error");     },     schema: {         model: {             id: "customEndorSysId",             fields: {                 fieldKey: {editable: false, nullable: false},                 name: { editable: true, nullable: false},                 description: {editable: true},                 state: {editable: false, nullable: true},                 templateFldSysId: {editable: false, nullable: false}             }         }     }  }); </code></pre>  <p>In addition to the jquery mentioned above, the rest call makes a call to a Spring MVC Controller. The Controller class is preceded with </p>  <pre><code>@RequestMapping("/admin/endorsements") </code></pre>  <p>The method that is called is the following java code:</p>  <pre><code>  @ResponseBody @RequestMapping(value = {"/api"}, method = {RequestMethod.PUT, RequestMethod.POST}, produces = {"application/xml", "application/json"}, headers = {"application/json"}) public ResponseEntity updateEndorsement(@RequestBody String customEndorsementDescription) {      try {        // hibernateDao.initAuditFields(customEndorsementDescription, principal);       //  hibernateDao.saveOrUpdate(customEndorsementDescription);      } catch (Exception e) {         e.printStackTrace();     } finally {      }     return new ResponseEntity(customEndorsementDescription, HttpStatus.OK); } </code></pre>