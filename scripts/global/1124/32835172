<p>I have various <code>Buffer</code>s I need to send between the client and the server. The server currently is <code>node</code> with <code>express</code> and <a href="https://www.npmjs.com/package/multiparty" rel="nofollow">multiparty</a> and the client is <a href="https://www.npmjs.com/package/request" rel="nofollow">request</a>.</p>  <pre><code>var formData = {   my_buffer: new Buffer([0x00, 0x01, 0xfe, 0xff]) } request.post({     // encoding: null, // with this, it seams to work but the round-trip use of encoding null, hex and implicit UTF8 seams so so wrong.     url: baseUrl,     formData: formData   }, function(error, response, body) {   expect(new Buffer(body).toString('hex')).toBe('0001feff') // Buffer(body) uses encoding utf8 by default, right?   // Expected '0001efbfbdefbfbd' to be '0001feff'. Low bits ok. High bits not so. But these get lost when sending to the server already ...   done() }) </code></pre>  <p>The server is:</p>  <pre><code>app.post('/', function(req, res) {     var form = new multiparty.Form({         // encoding: 'hex', // with this, it seams to work but the round-trip use of encoding null, hex and implicit UTF8 seams so so wrong.         maxFieldSize: 100,         maxFields: 3,         autoFiles: false     })     form.on('part', function(part) {         console.log('here')         // doesn't get here     })     form.on('field', function(name, value) {         console.log(name, value, new Buffer(value))         // my_buffer �� &lt;Buffer 00 01 ef bf bd ef bf bd&gt;         // 00 01 looks familiar but what happened to the rest?         res.send(value)         // res.send(new Buffer(value, 'hex')) // with this, it seams to work but the round-trip use of encoding null, hex and implicit UTF8 seams so so wrong.     })     form.on('close', function(){         res.end()     })     form.parse(req) }) </code></pre>  <p>The multiparty doc clearly uses Buffers but I barely find any examples of Buffers being used for anything but text all over the internet. But then again, it sends <code>jpeg</code>s using <code>formData</code>. ???</p>