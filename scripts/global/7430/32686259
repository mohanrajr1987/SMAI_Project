<p>I want to put a city data in a map. The cities are A,B,C,D and its distances are <code>A-B(10) A-C(11) A-D(12) B-C(13) B-D(14)</code> For this I am creating a HashMap like this:</p>  <pre><code>Map &lt;City, Map&lt;City,Integer&gt;&gt; cityGraph = new HashMap&lt;City, Map&lt;City, Integer&gt;&gt;(); </code></pre>  <p>where the key would be the city(say A) and the value would be the neighbors of the city along with distance(B-10,C-11, D-12).</p>  <p>The dataset is huge, so I have written a function to add/put data in cityGraph:</p>  <pre><code> // creating road         public void road(String city, String neigh, int dist){             City keyCity; // If the graph is empty then simply add a city and neighbor             if(cityGraph.size()==0){                 keyCity = new City(findCity(city));                 Map&lt;City, Integer&gt; map = new HashMap&lt;City, Integer&gt;();                 map.put(new City(findCity(neigh)), dist);                 cityGraph.put(keyCity, map);             } // Otherwise find the already existing key             Iterator entries = cityGraph.entrySet().iterator();             while (entries.hasNext()) {                   Entry thisEntry = (Entry) entries.next();                   City key = (City)thisEntry.getKey();                   if(key.getName().equals(city)){                       keyCity = new City(findCity(city));                       System.out.println(keyCity.getName());                       Map&lt;City, Integer&gt; existingMap = cityGraph.get(keyCity); // the existing map is null                       System.out.println(existingMap);                       existingMap.put(findCity(neigh), dist);                       break;                   } //otherwise add another entry in the cityGraph                  else{                     keyCity = new City(findCity(city));                     Map&lt;City, Integer&gt; map = new HashMap&lt;City, Integer&gt;();                     map.put(new City(findCity(neigh)), dist);                     cityGraph.put(keyCity, map);                 }             }          } </code></pre>  <p>this function checks whether there is an existing key/city or not and if there is one then it will find its associated neighbor map and put another neighbor in it. Calling the <code>road</code> function like :</p>  <pre><code>// creating roads     road("A", "B", 10);     road("A", "C", 11);     road("A", "D", 12);     road("B", "C", 13);     road("B", "D", 14); </code></pre>  <p>The problem is, the existing map is returning null!!</p>  <p>Here is the complete code:</p>  <pre><code>import java.util.ArrayList; import java.util.HashMap; import java.util.Iterator; import java.util.Map; import java.util.Map.Entry;  public class TestMap {      public static void main(String [] args){         Graph graph = new Graph(); //      for (Iterator iterator = graph.allCities.iterator(); iterator.hasNext();) { //          City type = (City) iterator.next(); //          System.out.println(type.toString()); //      }         System.out.println(graph.cityGraph.size());      } }  class City{     String name;      public City(String name) {         this.name = name;     }      public String getName() {         return name;     }      // toString     @Override     public String toString() {         return this.name ;     }       // Copy Constructor      public City(City c) {             this.name = c.name;         }  }  class Graph{       ArrayList&lt;City&gt; allCities = new ArrayList&lt;&gt;();      Map &lt;City, Map&lt;City,Integer&gt;&gt; cityGraph = new HashMap&lt;City, Map&lt;City, Integer&gt;&gt;();      // getter of cityGraph      public Map&lt;City, Map&lt;City, Integer&gt;&gt; getCityGraph() {         return cityGraph;     }      public ArrayList&lt;City&gt; getAllCities() {         return allCities;     }      // creating road     public void road(String city, String neigh, int dist){         City keyCity;         System.out.println(findCity(city).toString());         System.out.println(cityGraph.keySet());         if(cityGraph.size()==0){             keyCity = new City(findCity(city));             Map&lt;City, Integer&gt; map = new HashMap&lt;City, Integer&gt;();             map.put(new City(findCity(neigh)), dist);             cityGraph.put(keyCity, map);         }         Iterator entries = cityGraph.entrySet().iterator();         while (entries.hasNext()) {               Entry thisEntry = (Entry) entries.next();               City key = (City)thisEntry.getKey();         System.out.println(key.toString());               if(key.getName().equals(city)){                   System.out.println("here --1");                   keyCity = new City(findCity(city));                   System.out.println(keyCity.getName());                   Map&lt;City, Integer&gt; existingMap = cityGraph.get(keyCity);                   System.out.println(existingMap);                   existingMap.put(findCity(neigh), dist);                   break;               }             else{                 System.out.println("here --2");                  keyCity = new City(findCity(city));                 Map&lt;City, Integer&gt; map = new HashMap&lt;City, Integer&gt;();                 map.put(new City(findCity(neigh)), dist);                 cityGraph.put(keyCity, map);             }         }      }      // Make cities     void make_city(String name)     {       City c = new City(name);       allCities.add(c);     }      // Find City     public City findCity(String name){         for (Iterator&lt;City&gt; iterator = allCities.iterator(); iterator.hasNext();) {             City type = (City) iterator.next();             if(name.equals(type.getName())){                 return type;             }         }         return null;      }      // constructor     public Graph(){              make_city("A");             make_city("B");             make_city("C");             make_city("D");               // creating roads                road("A", "B", 10);             road("A", "C", 11);             road("A", "D", 12);             road("B", "C", 13);             road("B", "D", 14);       }  } </code></pre>