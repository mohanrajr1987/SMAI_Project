<p>I read following about HashCode</p>  <p>Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application</p>  <p>Does this mean following> hashmap.put(myObject, objectValue); When the map is passed over the network or is serialized and de-serialized at the other end and we do hashmap.get(myObject), then we might/mightnot get objectValue in return?</p>  <p>I have seen in applications where a webservice request is sent over a network to another server and request contains hashmap with some key value pairs and when the get operation is done on hashmap at the receiving server, it returns the same  object everytime. But the key in those cases is String. Will I not get the same object , had my key object is not String? Is it that when I override the hashCode() in my customized object (being used as key and considering a good implementation of hashcode), then I will get the same results over networks or even after serializing and deserializing. What is the best way to make sure I get the consistent results on hashmap everytime?</p>