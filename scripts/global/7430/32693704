<p>Looking into <code>HashMap.clear()</code> implementation I noticed a strange thing. This is how it looked in <a href="http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7u40-b43/java/util/HashMap.java#737">OpenJDK 7u40</a>:</p>  <pre><code>public void clear() {     modCount++;     Arrays.fill(table, null);     size = 0; } </code></pre>  <p>And this is how it looks in <a href="http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8u40-b25/java/util/HashMap.java#857">OpenJDK 8u40</a>:</p>  <pre><code>public void clear() {     Node&lt;K,V&gt;[] tab;     modCount++;     if ((tab = table) != null &amp;&amp; size &gt; 0) {         size = 0;         for (int i = 0; i &lt; tab.length; ++i)             tab[i] = null;     } } </code></pre>  <p>I understand that now the <code>table</code> can be null for empty map, thus additional check and caching in local variable is required. But why <code>Arrays.fill</code> was replaced with for-loop?</p>  <p>Seems that the change was introduced in <a href="http://hg.openjdk.java.net/jdk8/jdk8/jdk/diff/d62c911aebbb/src/share/classes/java/util/HashMap.java#l1.2459">this commit</a>. Unfortunately I found no explanation why plain for loop might be better than <code>Arrays.fill</code>. Is it faster? Or safer?</p>