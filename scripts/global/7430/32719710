<p>I have a problem which is about creating a map with 2 different keys. The keys would possibly be of the same type though. The question is similar to this,</p>  <p><a href="http://stackoverflow.com/questions/7921863/how-to-create-a-map-with-2-key-value">How to create a map with 2 key value</a></p>  <p>But it does also differ since the keys does not need to be set at the same time. So more concretely, the properties should be that,</p>  <p>1) One of the keys are sufficient to get a value from the map.</p>  <p>2) In case one of the keys are set, the other key can be set given the first key.</p>  <p>3) The user should not need to bother what key it uses (the first or the second)</p>  <p>The theory is to implement this using 2 maps as this,</p>  <pre><code>public MultiKeyMap&lt;K1, K2, V&gt; {  private HashMap&lt;K1 , V&gt; map1; private HashMap&lt;K2, V&gt; map2;  public MultiKeyMap(){     map1 = new HashMap&lt;K1, V&gt;();     map2 = new HashMap&lt;K2, V&gt;(); }  public void put(K1 k1, V v){         ? }  public void get(K1 k1, V v){         ? }  public void put(K1 k1, K2 k2, V v){     map1.put(k1, v);     map2.put(k2, v); } </code></pre>  <p>However, when I get to the part with one value I get confused, The keys may both be of the same type (eg. String), so how would I make a difference between the values. One alternative would be, that in case the second value is of the same type as the first, then I just add it to the first map using duplicate values. Would this be a good option? My point is, this would affect the syntax since the user would still just call <code>myMap.get(myKey)</code>, further, I would also guess this would be an optimization since I only need one map. I would just need a flag like <code>boolean secondKeyAvail = false</code>. I should be able to handle (2) by myself. This is more to give context and motivate why this question is not the same as the linked one.</p>  <p><strong>EDIT:</strong></p>  <p>Due to some of the comments I will try to clarify a bit. This is the scenario. Before I need to read the map I will encounter one of keys (always the same one). However, this key object may sometimes not be accessible at the time I need to read the map. I will then have a default value which is not added to the map. However, in this case I will have the second key, and if this happen I would have been able to set the second key using the first key. However, if the key is of the same type I will not know if I have the K1 key or the K2 key with the call (myMap.get(myKey)).</p>