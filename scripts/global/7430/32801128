<p>I'm having a hard time wrapping my head around unordered_maps and unordered_multimaps because my test code isn't producing what I've been told to expect.</p>  <pre><code>std::unordered_map&lt;string, int&gt; names;  names.insert(std::make_pair("Peter", 4));  names.insert(std::make_pair("George", 4));  names.insert(std::make_pair("George", 4)); </code></pre>  <p>When I iterate through this list, I get one instance of George first, then Peter.</p>  <p>1) It's my understanding unordered_maps do not allow multiple keys to map to one value, and that multimaps due. Is this true?</p>  <p>2) Why can Peter and George coexist at a value of 4? What is happening to the second George? And for that matter, why is George appearing first when I iterate from begin() to end() if this is unordered?</p>  <p>3) What is the underlying representation of an unordered map vs. unordered multimap?</p>  <p>4) Is there a way to insert keys into either map without providing a value? E.g. have the compiler create its own hash function that I don't need to worry about when I retrieve keys and look for collisions?  </p>