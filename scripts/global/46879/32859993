<p>I'm using Jsoup on my Android application, to read xml file get by a webservice restful.</p>  <p>The Jsoup library works perfectly until the xml file contains few number of records.</p>  <p>But when I get a xml with 50k or 60k of records, I observed that the Jsoup allocate memory until 230MB 240MB. This is a problem because with </p>  <pre><code>android:largeHeap="true" </code></pre>  <p>I have 256MB of memory allocable.</p>  <p>This is a saple code, try it yourself</p>  <pre><code>public class MainActivity extends ActionBarActivity {  private static Handler mHandler = new Handler(); private static Context context; static TextView textView;  @Override protected void onCreate(Bundle savedInstanceState) {     super.onCreate(savedInstanceState);     setContentView(R.layout.activity_main);      textView = (TextView) findViewById(R.id.textView);       textView.setText("5 seconds to start task");      context = this.getApplicationContext();      mHandler.postDelayed(new Runnable() {         public void run() {             new syncDataWS(context).execute();         }     }, 5000);  }  @Override public boolean onCreateOptionsMenu(Menu menu) {     getMenuInflater().inflate(R.menu.menu_main, menu);     return true; }  @Override public boolean onOptionsItemSelected(MenuItem item) {     int id = item.getItemId();      if (id == R.id.action_settings) {         return true;     }      return super.onOptionsItemSelected(item); }  private static class syncDataWS extends AsyncTask&lt;Void, String, Void&gt; {      Context mContext;      public syncDataWS(Context context) {         this.mContext = context;     }      @Override     public void onPreExecute() {         super.onPreExecute();         textView.append("\nStart task");     }      @Override     protected Void doInBackground(Void... params) {          try {             publishProgress("Start call XML page");             Document WS_Document = Jsoup.connect("XML_EXAMPLE").maxBodySize(0).timeout(10 * 100000).get();             publishProgress("End call XML page");              publishProgress("Get rows of document");             Elements XML_RESULT_WS = WS_Document.select("row");             publishProgress("Record number : " + Integer.toString(XML_RESULT_WS.size()));          } catch (IOException e) {             e.printStackTrace();         }          return null;     }      @Override     protected void onProgressUpdate(String... values) {         super.onProgressUpdate(values);         if (values != null &amp;&amp; values.length &gt; 0) {             textView.append("\n" + values[0]);         }     }      @Override     protected void onPostExecute(Void result) {         textView.append("\nEnd task");     } } </code></pre>  <p>}</p>  <p>and this is a example of xml</p>  <pre><code>&lt;XMLDataResponse xmlns="www.example.net"&gt;&lt;XMLDataResult&gt;&lt;root xmlns=""&gt;&lt;row ID="1" ID2="2" ID3="3" ID4="4" F1="0.000000000000000e+000" F2="0.000000000000000e+000" F3="0.000000000000000e+000" F4="" F5="0.000000000000000e+000" F6="0.000000000000000e+000"/&gt;&lt;/root&gt;&lt;/XMLDataResult&gt;&lt;/XMLDataResponse&gt; </code></pre>  <p>Take the row tag and copy + paste it until you have 60 thousand records in your XML EXAMPLE. Put it wherever you want, provided it can be achievable with via http call (URL). Copy the url in the code </p>  <pre><code>Jsoup.connect("COPY URL OF XML HERE") </code></pre>  <p>And you can see what I mean.</p>  <p>I need a solution to solve this allocation issue, because sometimes, not always, the allocation arrives at 256MB and my app crashes.</p>