<p><strong>Context</strong></p>  <p>We are working on a C# wrapper class for accessing documents and folders in a SharePoint 2010 document library using the client object model.</p>  <p>Our class exposes methods like <code>CreateFolder</code>, <code>DeleteFolder</code>, <code>IsFolderEmpty</code>.</p>  <p><strong>Our problem</strong></p>  <p>In some scenarios we receive an unexpected File Not Found error from the server:</p>  <pre><code>string url = "http://sharepoint/"; string userName = "username"; string password = "password"; var libraryName = "IntegrationTests";  var folderName = "Crashing";  SharepointWrapper wrapper = new SharepointWrapper(url, userName, password, libraryName);  wrapper.CreateFolder(folderName); wrapper.IsFolderEmpty(folderName); wrapper.DeleteFolder(folderName);  wrapper.CreateFolder(folderName); // This results in File Not Found received from the server wrapper.IsFolderEmpty(folderName); </code></pre>  <p>If we recreate the <code>ClientContext</code> before the last <code>IsFolderEmpty</code> call, the error goes away.</p>  <p>The <code>SharepointWrapper</code> class:</p>  <pre><code>class SharepointWrapper {     private ClientContext clientContext;     private string libraryName;      public SharepointWrapper(string url, string userName, string password, string libraryName)     {         clientContext = new ClientContext(url)         {             Credentials = new NetworkCredential(userName, password)         };         this.libraryName = libraryName;     }      public void CreateFolder(string folderName)     {         var rootFolder = clientContext.Web.GetFolderByServerRelativeUrl(libraryName);         rootFolder.Folders.Add(folderName);         clientContext.ExecuteQuery();     }      public void DeleteFolder(string folderName)     {         Folder folder = clientContext.Web.GetFolderByServerRelativeUrl(libraryName + "/" + folderName);         folder.DeleteObject();         clientContext.ExecuteQuery();     }      public bool IsFolderEmpty(string folderName)     {         var folder = clientContext.Web.GetFolderByServerRelativeUrl(libraryName + "/" + folderName);         clientContext.Load(folder, f =&gt; f.ItemCount);         clientContext.ExecuteQuery();         return folder.ItemCount == 0;     } } </code></pre>  <p>The full HTTP response received on the failing call (captured with Fiddler):</p>  <pre><code>HTTP/1.1 200 OK Cache-Control: private Content-Type: application/json Server: Microsoft-IIS/7.5 X-SharePointHealthScore: 4 X-Content-Type-Options: nosniff X-AspNet-Version: 2.0.50727 X-Powered-By: ASP.NET MicrosoftSharePointTeamServices: 14.0.0.4762 Date: Tue, 15 Sep 2015 09:53:32 GMT Content-Length: 209  [{ "SchemaVersion":"14.0.0.0", "LibraryVersion":"14.0.4762.1000", "ErrorInfo":{     "ErrorMessage":"File Not Found.",     "ErrorValue":null,     "ErrorCode":-2147024894,     "ErrorTypeName":"System.IO.FileNotFoundException"     } }] </code></pre>  <p><strong>Things we tried</strong></p>  <ul> <li><p>calling <code>Update()</code> after folder creation:</p>  <pre><code>public void CreateFolder(string folderName) {     var rootFolder = clientContext.Web.GetFolderByServerRelativeUrl(libraryName);     rootFolder.Folders.Add(folderName);     // This does not help     rootFolder.Update();     clientContext.ExecuteQuery(); } </code></pre></li> <li><p>using <code>RootFolder</code> instead of <code>GetFolderByServerRelativeUrl</code> in <code>CreateFolder</code>:</p>  <pre><code>// in the SharepointWrapper constructor: rootFolder = clientContext.Web.Lists.GetByTitle(libraryName).RootFolder;  public void CreateFolder(string folderName) {     rootFolder.Folders.Add(folderName);     clientContext.ExecuteQuery(); } </code></pre></li> </ul>  <p><strong>Help needed</strong></p>  <p>Currently we recreate the <code>ClientContext</code> when needed, but this sound hackish.</p>  <p>Did anyone came across this behavior? Any recommendations on a workaround?</p>