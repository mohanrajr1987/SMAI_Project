<p>I am creating some simple user controlled simulations with JavaScript and the <code>canvas</code> element.</p>  <p>Currently I have a separate update loop (using <code>setTimeout</code>) and render loop (using <code>requestAnimationFrame</code>).</p>  <p>Updates are scaled using a time delta, so consistency is not critical in that sense. The reason is rather that I don't want any hick-ups in the render loop to swallow user input or otherwise make the simulation less responsive.</p>  <p>The update loop will likely run at a lower (but hopefully fixed) frame rate. </p>  <p>Is this a good practice in JavaScript, or are there any obvious pitfalls? My hope is that the <code>update</code> loop will receive priority, but my understanding of the event loop might be a bit simplistic. (In worst case, the behaviour differs between VM implementations.)</p>  <p><strong>Example code:</strong></p>  <pre><code>function update() {   // Update simulation and process input   setTimeout(update, 1000 / UPDATE_RATE); }  function render() {   // Render simulation onto canvas   requestAnimationFrame(render); }  function init() {   update();   render(); } </code></pre>