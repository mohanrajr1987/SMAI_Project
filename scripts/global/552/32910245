<p>I use Process.Start to call a child process.<br> Not every time, but sometimes WaitForExit doesn’t return to the parent even though<br> the child outputs “Child OK” which indicates the child process runs to the end.<br> It happens twice in the last 6 months.</p>  <p>My development environment is:<br> OS:RHEL 5 Update 5<br> Kernel:2.6.18-194 EL5<br> Mono:2.6.7<br></p>  <p>Here is the parent process’s code.</p>  <pre><code>Static void Main(string[] args) {     Process p = new Process();     p.StartInfo.FileName = "mono";     p.StartInfo.Arguments = "Test.exe config.xml";     Logger.Trace.Info("Parent Start");     p.Start();     p.WaitForExit();     Logger.Trace.Debug("Parent End"); } </code></pre>  <p>And the following is the child’s.</p>  <pre><code>Static void Main(string[] args) {     classMain foo = new ClassMain();     setting = new Setting();     if (args.Length == 2 &amp;&amp; setting.Initialize(args[0]))     {         Logger.Initialize(setting.LoggerIniDir);         if (foo.Do(args[1]))         {             Logger.Trace.Info("Child OK");         }         else         {             Logger.Trace.Info("Child NG");         }     } } </code></pre>  <p>In foo.Do in the child process, it sends some data via Socket, writes the data to file and outputs logs using log4net. The steps are about 2000.</p>  <p>When the problem occurred, the last log of the parent process was “Parent Start”. And the one of the child process was “Child OK”. I checked the status of processes with ps aux command, it showed like this.</p>  <p>USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND<br> root      5955  0.0  0.4 187068 16820 ?        Sl   Jun17 133:28<br> &nbsp;&nbsp;&nbsp;&nbsp;  /opt/novell/mono/bin/mono.bin /mnt/Test.exe /mnt/config.xml<br> root     12784  0.0  0.3 177520 13200 ?        Sl   01:01   0:00<br> &nbsp;&nbsp;&nbsp;&nbsp;  /opt/novell/mono/bin/mono.bin /mnt/Child.exe</p>  <p>Why doesn’t WaitForExit return?</p>