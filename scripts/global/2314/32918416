<p>Looking into the package <a href="https://hackage.haskell.org/package/loops-0.2.0.2" rel="nofollow"><code>loops</code></a>, I found it very interesting and could be useful. However, there's one part about the package that I don't understand: how am I supposed to use <a href="https://hackage.haskell.org/package/loops-0.2.0.2/docs/Control-Monad-Loop.html#v:break_" rel="nofollow"><code>break_</code></a>?</p>  <p>Let's say I have a function <code>get' :: IO (Maybe Int)</code>, with which each call will return a number read from a file, and returns <code>Nothing</code> if the EOF is reached. I'm trying to construct a simple loop where I print each number and break upon EOF.</p>  <p>Now, I know to loop indefinitely I can use <code>forever</code>:</p>  <pre><code>import Control.Monad.Loop as ML import Control.Monad as M  main = do     M.sequence . loop $ do         ML.forever         return $ do             mx &lt;- get'             case mx of                 Nothing -&gt; ???                 Just x  -&gt; print x </code></pre>  <p>But where do I put my <code>break_</code>? It is a <code>LoopT IO Int</code>, so I can only put it in <code>LoopT</code> monad, but isn't it supposed to be called mid interation, instead of when defining loops? This really confuses me.</p>