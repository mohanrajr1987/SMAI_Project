<p>I want to be able to map each value of an <code>Enum</code> to a different <code>class</code> (and the reverse), but keep the relationships stored in a single place so they can be altered/added to without making changes in multiple location.</p>  <p><strong>What pattern would allow me map Enum values to Classes?</strong></p>  <p>My specific usage is roughly as follows:</p>  <p>I have a <code>Person</code> class that holds general information about the person. To this class can be added components (stored in a <s><code>List</code></s> <code>Dictionary</code>) that hold information specific to a particular type of person, eg. <code>componentCustomer</code>, <code>componentEndUser</code>, <code>componentSupplier</code>. These component-classes implement an <code>IPersonComponent</code> interface. Importantly, <em>a person can be more than one type and can therefore hold more than one component</em>.</p>  <p>I also have an Enum <code>ePersonType</code> with values eg. Customer, End User, Supplier. Each value has a one-to-one relationship with a component.</p>  <p>When a person's record is retrieved, a <code>List&lt;int&gt;</code> is populated with the appropriate 'ePersonType' values. This list is then used to determine what components need to be allocated to the <code>Person</code> and loaded with data.</p>  <p>Clearly, it is straightforward to <code>switch</code> on the person's types and add components appropriately. However, what if I later want to check what components the person instance holds and what <code>ePersonType</code>s they are? I could <code>switch</code> back on <code>component.GetType()</code>, but then I am storing the relationship in two places.</p>  <p>Alternatively, I could store the appropriate <code>ePersonType</code> inside each component and use Linq to check whether an person instance has a particular component, but then it seems like the original allocation would be more complex, possibly requiring reflection?</p>  <p>I feel sure that I'm missing something really obvious here.</p>