<p>Prior to Swift 2, I would often use enums with associated values and add functions to extract specific values, like so:</p>  <pre><code>public enum Maybe &lt;T&gt; {   case Unknown   case Known(T)    public var value: T? {     switch self {     case .Unknown: return nil     case .Known(let value): return value     }   } } </code></pre>  <p>This would allow me to do something like this:</p>  <pre><code>let maybe = .Known("Value") let val = maybe.value ?? "Another Value" </code></pre>  <p>I would like to get rid of these convenience functions and rely on Swift 2's new syntax.  This is possible doing something like:</p>  <pre><code>let val: String if case .Known(let value) = maybe {   val = value } else {   val = "Another Value" } </code></pre>  <p>But I can't figure out how to condense this back into a single line using the <code>??</code> operator or even ternary operator.</p>  <p>Is this even possible or am I stuck with defining "extraction" optionals on the enum?</p>  <h2>Update (clarification)</h2>  <p>The <code>Maybe</code> enum is just an example, but the solution would need to work on Enums that have multiple associated values... like an <code>Either</code>:</p>  <pre><code>public enum Either&lt;L, R&gt; {   case Left(Box&lt;L&gt;)   case Right(Box&lt;R&gt;)    public func left() -&gt; L?{     switch self {     case let Left(value):       return value.value     default:       return nil     }   }    public func right() -&gt; R?{     switch self {     case let Right(value):       return value.value     default:       return nil     }   } }   </code></pre>  <p>The syntax I'm looking for would be something like:</p>  <pre><code>let val = (case .Known(let value) = maybe) ?? "AnotherValue" </code></pre>  <p>What I want to do is easily extract an associated value for a specific case, else provide a default.  </p>  <p>For <code>Either</code> it might be something like:</p>  <pre><code>let val = (case .Left(let value) = either) ?? "AnotherValue" </code></pre>  <p>Make sense?</p>