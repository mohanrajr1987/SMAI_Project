<p><strong>Related questions</strong></p>  <p><a href="http://stackoverflow.com/questions/10649356/spring-responsebody-jackson-jsonserializer-with-jodatime">Spring @ResponseBody Jackson JsonSerializer with JodaTime</a> </p>  <p><a href="http://stackoverflow.com/questions/6988746/usage-of-jsonserialize-and-jsonserializer">Usage of @JsonSerialize and JsonSerializer</a></p>  <p><strong>Problem</strong></p>  <p>I have this enum:</p>  <pre><code>@JsonSerialize(using = JSONI18NSerializer.class) public enum Status implements EnumOption {      SOMETHING("translate.key,something"),     ELSE("translate.key.else");      private String status;      private Status(final String status) {         this.status = status;     }       @Override     public String getDescription() {          ReloadableResourceBundleMessageSource bundle =             (ReloadableResourceBundleMessageSource) ContextLoader.getCurrentWebApplicationContext()             .getBean("messageSource");          Locale locale = LocaleContextHolder.getLocale();          return bundle.getMessage(this.status, null, locale).toString();     } } </code></pre>  <p>That implements a simple interface:</p>  <pre><code>public interface EnumOption {     public String getDescription(); } </code></pre>  <p>And I wrote this custom JsonSerializer:</p>  <pre><code>public class JSONI18NSerializer extends JsonSerializer&lt;EnumOption&gt; {     @Override     public void serialize(             EnumOption object,              JsonGenerator generator,              SerializerProvider provider)      throws IOException, JsonProcessingException {            generator.writeStartObject();           generator.writeFieldName("key");           generator.writeString(object.toString());           generator.writeFieldName("status");           generator.writeString(object.getDescription());           generator.writeEndObject();      } } </code></pre>  <p><strong>Question</strong></p>  <p>What am I missing? By using @ResponseBody on my controller, I'm getting a JSON with a simple <code>{status:"translation of something"}</code> but I need <code>{status : {key:"something" , status : "description of something"}}</code>.</p>  <p>Do I have to declare the custom serializer somewhere else? Is there maybe a better way to achieve what I need?</p>  <p>I'm using Spring 4.1.7 and Jackson 2.5.1 and ask 1.9.13</p>  <p>Thank you for your help!!</p>  <p><strong>Edit</strong> This is the controller method:</p>  <pre><code> @RequestMapping(value = "/search", method = RequestMethod.GET)  @ResponseBody     public List&lt;Config&gt; getAll(final ModelMap model) {     return this.configService.searchConfig();  } </code></pre>  <p>The status enum is an attribute of the Config class which is:</p>  <pre><code> @Document  public class Config {      private Status status;      public Status getStatus() {         return this.status;     }     public void setStatus(final Status status) {         this.status = status;     } } </code></pre>