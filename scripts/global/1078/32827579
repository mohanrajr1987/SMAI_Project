<p>I have made a custom "wedge" layer in Swift. IIUC, to have a property of a <code>CALayer</code> be animatable I need to:</p>  <ol> <li>Mark the variable <code>dynamic</code></li> <li>Register said properties as animatable via something like</li> </ol>  <p>:</p>  <pre><code>override class func needsDisplayForKey(key: String) -&gt; Bool {     return key == "myVar" || super.needsDisplayForKey(key) } </code></pre>  <p>This worked fine when I typed my <code>dynamic var</code> as a <code>CGFloat</code>.</p>  <p>But when I tried to refactor it to be a swift enum type, it complained</p>  <pre><code>Property cannot be marked dynamic because its type cannot be represented in Objective-C </code></pre>  <p>Is there a work around for this? Is there even a reason for this?</p>  <p>The workaround I tried was to wrap a computed var of MyEnum type around the core value, something like</p>  <pre><code>dynamic var _myVar:CGFloat = 0.0 var myVar:MyEnum {     get { return MyEnum(self._myVar) }     set { self._myVar = newValue.rawValue } } </code></pre>  <p>Animation seems to not work right anymore. Which property do I register in the <code>needsDisplayForKey()</code> method in that case? Both? The inner, the outer? I would really like to keep the _myVar internal and be able at call sites to use the higher level enum based API.</p>