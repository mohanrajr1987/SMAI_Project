<p>I know there are already other threads about this.  I've been reading them.  Here's what I've got:</p>  <pre><code>namespace Books.Entities {     public enum Genre     {         [Display(Name = "Non Fiction")]         NonFiction,         Romance,         Action,         [Display(Name = "Science Fiction")]         ScienceFiction     } } </code></pre>  <p>Model:  </p>  <pre><code>namespace Books.Entities {     public class Book     {         public int ID { get; set; }          [Required]         [StringLength(255)]         public string Title  { get; set; }          public Genre Category { get; set; }     } } </code></pre>  <p>Then, in a view:</p>  <pre><code>@foreach (var item in Model) { &lt;tr&gt;     &lt;td&gt;         @Html.DisplayFor(modelItem =&gt; item.Title)     &lt;/td&gt;     &lt;td&gt;         @Html.DisplayFor(modelItem =&gt; item.Category)     &lt;/td&gt; &lt;/tr&gt; </code></pre>  <p>I would think the framework would use the DisplayName property automatically.  Seems weird that it doesn't. But, whatever.  Trying to overcome that with an extension (found this in another thread on the same question)...</p>  <pre><code>using System; using System.ComponentModel.DataAnnotations; using System.Linq; using System.Reflection;  public static class EnumExtensions {     public static string GetDisplayName(this Enum enumValue)     {         return enumValue.GetType()                     .GetMember(enumValue.ToString())                     .First()                     .GetCustomAttribute&lt;DisplayAttribute&gt;()                     .GetName();     } } </code></pre>  <p>Looks like it should work, but when I try and use it:</p>  <pre><code> @Html.DisplayFor(modelItem =&gt; item.Category.GetDispayName()) </code></pre>  <p>I get this error:  </p>  <pre><code>{"Templates can be used only with field access, property access, single-dimension array index, or single-parameter custom indexer expressions."}   </code></pre>