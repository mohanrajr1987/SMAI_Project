<p>From <a href="https://www.python.org/dev/peps/pep-0435/#restricted-subclassing-of-enumerations" rel="nofollow">PEP 435</a> on subclassing enums the following is allowed:</p>  <pre><code>&gt;&gt;&gt; class Foo(Enum): ...   def some_behavior(self): ...     pass ... &gt;&gt;&gt; class Bar(Foo): ...   happy = 1 ...   sad = 2 ... </code></pre>  <p>Say I want to define <code>some_behavior</code> in a different manner for the <code>happy</code> and <code>sad</code> enums.</p>  <p>Is there a better way to do that than something like:</p>  <pre><code>&gt;&gt;&gt; class Bar(Foo): ...   happy = 1 ...   sad = 2 ...   def some_behavior(self): ...       if self is Bar.happy: ...           # happy behavior ...       elif self is Bar.sad: ...           # sad behavior </code></pre>  <p>That looks clunky to me. </p>