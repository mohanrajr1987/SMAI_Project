<p>I have a collection of Checkboxes in a Listbox binding to an Enum which uses a converter. Code shown below:</p>  <pre><code>&lt;ListBox HorizontalAlignment="Left" Height="183" Margin="159,30,0,0" VerticalAlignment="Top" Width="144"&gt;   &lt;ListBox.Resources&gt;     &lt;local:FlagsEnumValueConverter x:Key="FlagsConverter" /&gt;   &lt;/ListBox.Resources&gt;   &lt;CheckBox Content="Checkbox1" IsChecked="{     Binding Path=TestModel.TestEnum,      Converter={StaticResource FlagsConverter},      ConverterParameter={x:Static tc:TestEnum.Test1}}"/&gt;   &lt;CheckBox Content="Checkbox2" IsChecked="{     Binding Path=TestModel.TestEnum,      Converter={StaticResource FlagsConverter},      ConverterParameter={x:Static tc:TestEnum.Test2}}"/&gt;   &lt;CheckBox Content="Checkbox3" IsChecked="{     Binding Path=TestModel.TestEnum,      Converter={StaticResource FlagsConverter},      ConverterParameter={x:Static tc:TestEnum.Test3}}"/&gt; &lt;/ListBox&gt; </code></pre>  <p>Converter Code:</p>  <pre><code>class FlagsEnumValueConverter : IValueConverter {     private int mTargetValue;      public object Convert(object value, Type targetType, object parameter, CultureInfo culture)     {         var mask = (int)parameter;         mTargetValue = (int)value;         return ((mask &amp; mTargetValue) != 0);     }      public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)     {         mTargetValue ^= (int)parameter;         return Enum.Parse(targetType, mTargetValue.ToString());     } } </code></pre>  <p>I'd rather use an ItemTemplate to keep things clean and simple however I'm not sure what to do with the 'ConverterParameter' since it requires the specific Enum value. I've been Googling for a solution but haven't found one. I honestly don't even know where to start. Is this even possible?</p>