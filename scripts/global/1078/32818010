<p>I have the following database table:</p>  <pre><code>widget_types ------------ widget_type_id widget_type_name widget_type_alias widget_type_description </code></pre>  <p>This corresponds to the following Groovy entity class:</p>  <pre><code>class WidgetType extends BaseLookupEntity {     Long id     String name     String alias     String description } </code></pre>  <p>In reality, <code>WidgetType</code>/<code>widget_types</code> really ought to be <code>enums</code>, because they are reference/lookup types with a small number of valid values:</p>  <ul> <li><code>RedWidget</code></li> <li><code>SillyWidget</code></li> <li><code>HappyWidget</code></li> <li><code>BerserkingWidget</code></li> <li><code>SausageWidget</code></li> </ul>  <p>For reasons outside the scope of this question, it is not really possible for me to OR/map the <code>widget_types</code> table to an <code>enum</code>. And so I have created a "helper enum":</p>  <pre><code>enum WidgetTypeLookup {     Red,     Silly,     Happy,     Berserking,     Sausage      static WidgetTypeLookup toWidgetTypeLookup(WidgetType type) {         // TODO: ???         null     } } </code></pre>  <p>The idea here is that the JPA/OR layer will create <code>WidgetType</code> instances, but to be able to get real use out of them (type safety, etc.), I'd like to be able to convert them to <code>WidgetTypeLookups</code>:</p>  <pre><code>// Inside some method... WidgetType widgetType = getSomehowButStillNotSureWhichTypeItIs() WidgetTypeLookup wtLookup = WidgetTypeLookup.toWidgetTypeLookup(widgetType) switch(wtLookup) { case Happy:     // etc... } </code></pre>  <p>So I'm struggling to find an efficient "Groovy way" of converting between the POGO type and the enum. Basically implementing the helper method. Any ideas?</p>