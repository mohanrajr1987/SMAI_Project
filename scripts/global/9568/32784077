<p>So I'm creating an application which uses CORS to communicate with a .NET MVC Sidecar project. Everything works great except for in IE9, where POST requests fail. I have a <a href="https://github.com/MoonScript/jQuery-ajaxTransport-XDomainRequest" rel="nofollow">library</a> which allows the GETs to work, but the POST requests are still having issues. It seems that IE9 strips out the <code>contentType</code> header. The server ends up interpreting this as <code>appplication/octet-stream</code>, as opposed to <code>text/plain</code> which is what I understand it's actually getting set by.</p>  <p>Inside of my WebAPIConfig.cs, I have the following function (called by <code>Register</code>):</p>  <pre><code>private static void RegisterFormatters(HttpConfiguration config)     {         // enable browser viewing + jsonp         config.Formatters.Add(new BrowserJsonFormatter());         config.Formatters.Add(new JsonpMediaTypeFormatter(new BrowserJsonFormatter()));          // prettify json: indented + camel case         var json = config.Formatters.JsonFormatter;         json.SerializerSettings.Formatting = Formatting.Indented;         json.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();          // Tell the formatter to accept text/plain         config.Formatters.JsonFormatter.SupportedMediaTypes.Add(new MediaTypeHeaderValue("text/plain"));         // When we use CORS on IE9, it strips off the content type. The server assigns it application/octet-stream         config.Formatters.JsonFormatter.SupportedMediaTypes.Add(new MediaTypeHeaderValue("application/octet-stream"));     } </code></pre>  <p>However, Fiddler is still telling me that the requests don't have a contentType, and that the server can't handle a contentType of <code>application/octet-stream</code>.</p>  <p>Has anyone gotten this working?</p>