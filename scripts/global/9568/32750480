<p>I am translating this c# code to java.</p>  <pre><code>public ScannerProcess CreateProcess(string url)     {         this.Token.Validate();          using (HttpClient client = new HttpClient())         {             client.SetCopyleaksClient(ContentType.Json, this.Token);              CreateCommandRequest req = new CreateCommandRequest() { URL = url };              HttpResponseMessage msg;             if (File.Exists(url))             {                 FileInfo localFile = new FileInfo(url);                 // Local file. Need to upload it to the server.                  using (var content = new MultipartFormDataContent("Upload----" + DateTime.UtcNow.ToString(CultureInfo.InvariantCulture)))                 {                     using (FileStream stream = File.OpenRead(url))                     {                         content.Add(new StreamContent(stream, (int)stream.Length), "document", Path.GetFileName(url));                         msg = client.PostAsync(Resources.ServiceVersion + "/detector/create-by-file", content).Result;                     }                 }             }             else             {                 // Internet path. Just submit it to the server.                 HttpContent content = new StringContent(                     JsonConvert.SerializeObject(req),                     Encoding.UTF8,                     ContentType.Json);                 msg = client.PostAsync(Resources.ServiceVersion + "/detector/create-by-url", content).Result;             }              if (!msg.IsSuccessStatusCode)             {                 var errorJson = msg.Content.ReadAsStringAsync().Result;                 var errorObj = JsonConvert.DeserializeObject&lt;BadResponse&gt;(errorJson);                 if (errorObj == null)                     throw new CommandFailedException(msg.StatusCode);                 else                     throw new CommandFailedException(errorObj.Message, msg.StatusCode);             }              string json = msg.Content.ReadAsStringAsync().Result;              CreateResourceResponse response = JsonConvert.DeserializeObject&lt;CreateResourceResponse&gt;(json);             return new ScannerProcess(this.Token, response.ProcessId);         }     } </code></pre>  <p>This is my java code:</p>  <pre><code>public ScannerProcess CreateProcess(String url)         throws Exception {     this.Token.Validate();     HttpClient client = HttpClientBuilder.create().build();     Gson gson = new GsonBuilder().create();     File file = new File(url);     HttpPost request;     if (file.exists() &amp;&amp; !file.isDirectory()) {         MultipartEntityBuilder builder = MultipartEntityBuilder.create();         request = new HttpPost(Resources.ServiceEntryPoint + Resources.ServiceVersion + "/detector/create-by-file");         builder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);         FileBody fileBody = new FileBody(new File(url)); //image should be a String         builder.addPart(fileBody.getFilename(), fileBody);         request.addHeader("Accept", ContentType.Json);         HttpEntity entity = builder.build();         request.setEntity(entity);     }      else {         // Internet path. Just submit it to the server.         CreateCommandRequest model = new CreateCommandRequest();         model.setURL(url);         request = new HttpPost(Resources.ServiceEntryPoint + Resources.ServiceVersion + "/detector/create-by-url");         request.setHeader("Content-Type", ContentType.Json);         request.setHeader("Accept", ContentType.Json);         request.setEntity(new StringEntity(gson.toJson(model)));     }     request.setHeader("User-Agent", Resources.USER_AGENT);     request.addHeader("Authorization", String.format("%1$s %2$s", "Bearer", this.Token.getToken()));     HttpResponse msg = client.execute(request);     if (msg.getStatusLine().getStatusCode() != 200) {         HttpEntity entity = msg.getEntity();         String json_error = EntityUtils.toString(entity, "UTF-8");         BadResponse error = gson.fromJson(json_error, BadResponse.class);         if (json_error == null)             throw new CommandFailedException(msg);         else             throw new CommandFailedException(error.Message, msg);     }      HttpEntity entity = msg.getEntity();     String json = EntityUtils.toString(entity, "UTF-8");     CreateResourceResponse response = gson.fromJson(json, CreateResourceResponse.class);     return new ScannerProcess(this.Token, response.ProcessId); } </code></pre>  <p>I have a problem when i pass a file path to this method. The return message is: 400 Bad file name. When i pass url the method works fine. I belive that the problem is that i don't define the file name properly, but i don't how i can do that.</p>