<p>I have a function that makes a post request to our client's API that requires .p12 certificate authorization in order to proceed with the request. I am new to the X509Certificates and I used the following code to do the request. The problem is that I include all the flags so the request would pass.How can I optimize my code so that I can store the keyset on the server and not to fetch it from there ?</p>  <p>This is my function that makes the post request: </p>  <pre><code>public static T PostRequestWithCertificateAndJsonResponse&lt;T&gt;(string url, string body, string contentType, string certificatePath, string certificatePassword)             {                 HttpWebRequest webRequestObject = WebRequest.Create(url) as HttpWebRequest;                 ASCIIEncoding encoding = new ASCIIEncoding();                 Byte[] data = encoding.GetBytes(body);                 webRequestObject.Method = "POST";                 var certificate = new X509Certificate2(                     certificatePath,                     certificatePassword,                     **X509KeyStorageFlags.MachineKeySet     |                         X509KeyStorageFlags.PersistKeySet |                         X509KeyStorageFlags.Exportable**                 );                 webRequestObject.ClientCertificates.Add(certificate);                                     webRequestObject.ContentType = contentType;                 using (Stream stream = webRequestObject.GetRequestStream())                 {                     stream.Write(data, 0, data.Length);                 }                  try                 {                     WebResponse response = webRequestObject.GetResponse();                     T model = ParseResponse&lt;T&gt;(response);                     return model;                 }                 catch (WebException ex)                 {                     // log error                  }             } </code></pre>  <p>I have tried to use only MachineKeySet, but on the different environments I get some errors related with the certificate private key. Is there any other way to deal with this issue ?</p>