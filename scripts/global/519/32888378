<p>I have created an app which loads up and has a Login / Signup page etc using swift. Currently I have an image as a background but would like to add code so there is a gif / mov playing in the background like in apps like vine or instagram. </p>  <p>How can I integrate the video in with my current code? I am also very new to this so have been following tutorials. Also if anyone knows how I can remove the parse logo, that would also be helpful.</p>  <p>Below is my code that I currently have for my Sign In view controller.</p>  <pre><code>import Foundation  class LoginViewController : PFLogInViewController {  var backgroundImage : UIImageView!;  var viewsToAnimate: [UIView!]!;  var viewsFinalYPosition : [CGFloat]!;  override func viewDidLoad() {     super.viewDidLoad()      let imageName = "Logo And Slogan.png"     let image = UIImage(named: imageName)     let imageView = UIImageView(image: image!)     imageView.frame = CGRect(x: 55, y: 40, width: 275, height: 120)     view.addSubview(imageView)      // set our custom background image     backgroundImage = UIImageView(image: UIImage(named: "welcome_bg"))     backgroundImage.contentMode = UIViewContentMode.ScaleAspectFill     logInView!.insertSubview(backgroundImage, atIndex: 0)       // remove the parse Logo     let logo = UILabel()     logo.text = ""     logo.textColor = UIColor.whiteColor()     logo.font = UIFont(name: "Pacifico", size: 70)     logo.shadowColor = UIColor.lightGrayColor()     logo.shadowOffset = CGSizeMake(2, 2)     logInView?.logo = logo      // set forgotten password button to white     logInView?.passwordForgottenButton?.setTitleColor(UIColor.whiteColor(), forState: .Normal)      // make the background of the login button pop more     logInView?.logInButton?.setBackgroundImage(nil, forState: .Normal)     logInView?.logInButton?.backgroundColor = UIColor(red: 52/255, green: 191/255, blue: 73/255, alpha: 1)      // make the buttons classier     customizeButton(logInView?.facebookButton!)     customizeButton(logInView?.twitterButton!)     customizeButton(logInView?.signUpButton!)      // create an array of all the views we want to animate in when we launch     // the screen     viewsToAnimate = [self.logInView?.usernameField, self.logInView?.passwordField, self.logInView?.logInButton, self.logInView?.passwordForgottenButton, self.logInView?.facebookButton, self.logInView?.twitterButton, self.logInView?.signUpButton, self.logInView?.logo]      // use our custom SignUpViewController     self.signUpController = SignUpViewController() }  func customizeButton(button: UIButton!) {     button.setBackgroundImage(nil, forState: .Normal)     button.backgroundColor = UIColor.clearColor()     button.layer.cornerRadius = 5     button.layer.borderWidth = 1     button.layer.borderColor = UIColor.whiteColor().CGColor }  override func viewDidLayoutSubviews() {     super.viewDidLayoutSubviews()      // stretch background image to fill screen     backgroundImage.frame = CGRectMake( 0,  0,  logInView!.frame.width,  logInView!.frame.height)      // position logo at top with larger frame     logInView!.logo!.sizeToFit()     let logoFrame = logInView!.logo!.frame     logInView!.logo!.frame = CGRectMake(logoFrame.origin.x, logInView!.usernameField!.frame.origin.y - logoFrame.height - 16, logInView!.frame.width,  logoFrame.height)      // We to position all the views off the bottom of the screen     // and then make them rise back to where they should be     // so we track their final position in an array     // but change their frame so they are shifted downwards off the screen     viewsFinalYPosition = [CGFloat]();     for viewToAnimate in viewsToAnimate {         let currentFrame = viewToAnimate.frame         viewsFinalYPosition.append(currentFrame.origin.y)         viewToAnimate.frame = CGRectMake(currentFrame.origin.x, self.view.frame.height + currentFrame.origin.y, currentFrame.width, currentFrame.height)     } }  override func viewDidAppear(animated: Bool) {     super.viewDidAppear(animated)      // Now we'll animate all our views back into view     // so they are no longer transparent (alpha = 1)     // and, using the final position we stored, we'll     // reset them to where they should be     if viewsFinalYPosition.count == self.viewsToAnimate.count {         UIView.animateWithDuration(1, delay: 0.0, options: .CurveEaseInOut,  animations: { () -&gt; Void in             for viewToAnimate in self.viewsToAnimate {                 //viewToAnimate.alpha = 1                 let currentFrame = viewToAnimate.frame                 viewToAnimate.frame = CGRectMake(currentFrame.origin.x, self.viewsFinalYPosition.removeAtIndex(0), currentFrame.width, currentFrame.height)             }             }, completion: nil)     } }  } </code></pre>  <p>This shows you how it looks and the image that should be behind....</p>  <p><a href="http://i.stack.imgur.com/FqtNd.png" rel="nofollow"><img src="http://i.stack.imgur.com/FqtNd.png" alt="How it looks"></a></p>  <p>[![The image that should be behind][2]][2]</p>