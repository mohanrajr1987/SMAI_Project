<p>I have <code>UIViewController Manager</code></p>  <pre><code>@interface Manager : UIViewController  @property   NSString *currentNameID;   @end  @interface Manager ()&lt;UITextFieldDelegate&gt;{     sqlite3 *RECORDS;     sqlite3_stmt *statement;     NSString *databasePath;     NSString *docsDir;     NSArray *dirPaths;   } </code></pre>  <p>In the Manager <code>UIViewController</code>, I'd like to create a Popup Window. It is created as</p>  <pre><code>-(void)createPopUpWindow {     //Component specs     int gap = 20;//to update     int bigButtonWidth = 70;//to update     int componentverHeight = 40;//to update      int numcomponentsvertically = 4;     int numcomponentshorizontally = 3;     int textViewW = bigButtonWidth*2;     int smallButtonWidth = 20;     int uiviewWidth = gap * 4 + bigButtonWidth * numcomponentshorizontally;     int uiviewHeight = gap * 5 + componentverHeight * numcomponentsvertically;     // create view popup     int centerx = (int)(self.view.bounds.size.width / 2);     int centery = (int)(self.view.bounds.size.height / 2);      //Popup window     int x = centerx - (int)(uiviewWidth/2);     int y = centery - (int)(uiviewHeight/2);     self.viewPopup = [[UIView alloc] initWithFrame:CGRectMake(x, y, uiviewWidth, uiviewHeight)];     self.viewPopup.backgroundColor = [UIColor grayColor];     [self.view addSubview:self.viewPopup];     UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc]                                    initWithTarget:self                                    action:@selector(dismissKeyboard)];      [self.viewPopup addGestureRecognizer:tap];        self.idTextView = [[UITextView alloc] initWithFrame:CGRectMake(gap, gap, textViewW, componentverHeight)];     [self.idTextView setReturnKeyType:UIReturnKeyDone];     self.idTextView.restorationIdentifier = @"idview";     self.idTextView.delegate = self.viewPopup;     [self.viewPopup addSubview: self.idTextView];  }  -(void)dismissKeyboard {     if([self.currTextfield isEqualToString:@"idview"]){         [self.idTextView resignFirstResponder];     } } </code></pre>  <p>Then I also need UITextView's callback function to get some information regarding the UITextView such as</p>  <pre><code>    - (BOOL) textFieldShouldBeginEditing: (UITextField *) textField     {         textField.text = @"";         self.currTextfield = textField.restorationIdentifier;     } </code></pre>  <p>Now the callback function is not working in the Popup Window. I put <code>&lt;UITextFieldDelegate&gt;</code> at Manager as shown above. But it doesn't work.</p>  <p>How can I make it work so the UITextView's callback is called? Then in this line, who should be assigned to delegate <code>self.idTextView.delegate = self.viewPopup;</code> Thanks</p>