<p>This is what I'm trying to do...</p>  <p>I have one view controller that needs to dynamically display different subviews based on the presence of some data.</p>  <p>Here is a simple mockup. <strong>Each colored block represents a unique subview</strong>.</p>  <p><a href="http://i.stack.imgur.com/JnxnD.png" rel="nofollow"><img src="http://i.stack.imgur.com/JnxnD.png" alt="Simple mockup"></a></p>  <p>Sometimes the green block needs to be at the top, sometimes the green block won't display at all, sometimes the light blue block will be something different, etc.</p>  <p>Each subview has interactive elements, so I've been creating and adding them like so:</p>  <ol> <li>Defining a new view controller</li> <li>Defining its view</li> <li>Calling <code>addChildViewController</code> and <code>didMoveToParentViewController</code></li> <li>Calling <code>addSubview</code> on <code>myNewViewController.view</code></li> <li>Using SnapKit to make auto layout constraints to position the view</li> </ol>  <p>I want to transition to <code>UIStackView</code> because it seems a good support system for this view because all I need to do is stack its subviews. I'm seeing many conflicting constraint errors and unexpected view frames when trying to add subviews with their own inner auto layout constraints.</p>  <p><strong>Question</strong></p>  <p>Am I setting myself up for failure here by embedding the views of 4-6 view controllers in the view of one view controller?</p>  <p>Also, how do I give the added views properties like minimum heights or content sizes without seeing many breaking constraints with <code>UIStackView</code>? (So they can stack, but one of them is say, 400 tall, and the other is 200 tall)</p>