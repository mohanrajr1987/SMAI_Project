<p>I am creating a client using GuzzleHttp 5.3. I want use the same <code>Config</code> object to configure the <em>Guzzle Client</em>. So, the creation of <em>Guzzle Client</em> depends of the object <code>Config</code>.</p>  <p>For example:</p>  <pre><code>$config = new Config([     'user' =&gt; 'github',     'password' =&gt; '1234',     'base_url' =&gt; 'http://test_or_production_url.com' ]);  new GithubClient($config, new \GuzzleHttp\Client()); </code></pre>  <p>And the constructor: </p>  <pre><code>public function __construct(Config $config) {     $this-&gt;authData = [         'uname'     =&gt; $config-&gt;getUser(),         'upassword' =&gt; $config-&gt;getPassword(),     ];      $this-&gt;config       = $config;     $this-&gt;httpClient   = new \GuzzleHttp\Client(['base_url' =&gt; $config-&gt;getBaseUrl());     // I have to setup default headers, too. } </code></pre>  <p>But, I have to inject the <em>Guzzle Client</em> because I have to do <em>unit tests</em>.</p>  <p>One option is to inject a <em>Guzzle Client</em> configured as my client requires it. But the build process is a little cumbersome (set base_url, default header). The user must to know using <em>Guzzle</em>, I do not like this.</p>  <p>Other option is to create a new object (<code>GithubClientFactory</code> for example) to create my client.</p>  <pre><code>$client = GithubClientFactory::make($config); </code></pre>  <p>So, I hide the Guzzle dependency and the setup process. But the user always have to use the client factory.</p>  <p>Then, Is there a better (pattern) design to this problem?</p>