<p>I am working on a wordpress site with the visual composer plugin. I have made a custom container that can contain one element only. All works well up until the point I am rendering the container's content.</p>  <p>I am trying to render the child manually inside the container as I need to:</p>  <ul> <li><p>Render the odd numbered tags more than once.</p></li> <li><p>Render the tags exactly where I need them. </p></li> </ul>  <p><strong>Questions</strong></p>  <p>Can I separate the tags and render each tag individually?</p>  <p>Can I do this in the render function of the parent to have the result available for placing in a var for reusability?</p>  <p><strong>CODE</strong></p>  <p>Obviously won't run but it's a conceptual in the question to eliminate silly comments on unrelated topics. <div class="snippet" data-lang="js" data-hide="false"> <div class="snippet-code"> <pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;?php   function child_func ($attr, $content) {     //get shortcode data and render     return $html; //or I can return array:vars   }    add_shortcode( 'child', 'child_func ');    function recursive_child_func( $content ) {     return do_shortcode( $content );   }   add_filter( 'child_func_filter', 'recursive_child_func', 9999 );      // linked to visual composer -&gt; works great! ?&gt;</code></pre> </div> </div> </p>  <p><div class="snippet" data-lang="js" data-hide="false"> <div class="snippet-code"> <pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;?php // here is my issue /*  in the vc_template file I am trying to dynamically render  each child tag into a var or at least where I want them */ function get_individual_tag() {   // really return tag   return [child test="lorem ipsum"]lorem testum[/child] }  $content = get_individual_tag();  do_shortcode($content);  ?&gt;</code></pre> </div> </div> </p>  <p><strong>ERROR!!</strong></p>  <p>Notice: do_shortcode_tag was called incorrectly. Attempting to parse a shortcode without a valid callback: child Please see Debugging in WordPress for more information. (This message was added in version 4.3.0.) in /%project-path%/wp-includes/functions.php on line 3612</p>