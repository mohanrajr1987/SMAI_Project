<p>I wanted the ability to put a custom login button on any view controller in my app and not have to write an IBAction for the button on every view controller that it appears. I figured it to be redundant to rewrite the code considering it will always present the login view controller. </p>  <p>So my solution was to create a subclass of UIButton and when a user clicks the button it then finds the topmost view controller and tells it to present the login view controller. </p>  <p>Below is my code.... Is this the best approach? Everything appears to work fine.</p>  <pre><code>LoginButton.h ------------- #import &lt;UIKit/UIKit.h&gt;  @interface LoginButton : UIButton  @end    LoginButton.m ------------- #import "LoginButton.h"  @implementation LoginButton  - (id) initWithFrame:(CGRect)frame{     self = [super initWithFrame:frame];     if (self) {         [self setupView];     }     return self; }  - (id) initWithCoder:(NSCoder *)aDecoder{     self = [super initWithCoder:aDecoder];     if  (self){         [self setupView];     }     return self; }  - (void)setupView{     APIManager  *apiManager = [APIManager sharedManager];     if ([apiManager currentSID]) {         [self setTitle:@"Log Out" forState:UIControlStateNormal];     } else {         [self setTitle:@"Log On" forState:UIControlStateNormal];     }      [self addTarget:self action:@selector(touchUpInside) forControlEvents:UIControlEventTouchUpInside]; }  - (void)touchUpInside{     UIViewController *vc = [self topViewController];     // Create Login VC     UIStoryboard *mainStoryboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];     LoginViewController *logInVC = [mainStoryboard instantiateViewControllerWithIdentifier:LoginNavigationControllerStoryboardID];     [vc presentViewController:logInVC animated:YES completion:nil]; }  - (UIViewController*)topViewController {     return [self topViewControllerWithRootViewController:[UIApplication sharedApplication].keyWindow.rootViewController]; }  - (UIViewController*)topViewControllerWithRootViewController:(UIViewController*)rootViewController {     if ([rootViewController isKindOfClass:[UITabBarController class]]) {         UITabBarController* tabBarController = (UITabBarController*)rootViewController;         return [self topViewControllerWithRootViewController:tabBarController.selectedViewController];     } else if ([rootViewController isKindOfClass:[UINavigationController class]]) {         UINavigationController* navigationController = (UINavigationController*)rootViewController;         return [self topViewControllerWithRootViewController:navigationController.visibleViewController];     } else if (rootViewController.presentedViewController) {         UIViewController* presentedViewController = rootViewController.presentedViewController;         return [self topViewControllerWithRootViewController:presentedViewController];     } else {         return rootViewController;     } } </code></pre>