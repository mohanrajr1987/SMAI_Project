<p>I am trying to create - HeaderView which is subclass of UIView, it contains a close button and a title label. </p>  <pre><code>class HeaderView: UIView {     private var titleLabel: UILabel!     private var closeButton: UIButton! } </code></pre>  <p>I don't want to add self as target of closeButton action but want to set myViewController as its target, moreover I want HeaderView class to be reusable.</p>  <p>So I declared a protocol:</p>  <pre><code>protocol CloseViewProtocol {     func closeViewAction(sender: UIButton!) } </code></pre>  <p>And declared a variable like this:</p>  <pre><code>class HeaderView: UIView {     private var titleLabel: UILabel!     private var closeButton: UIButton!      var closeButtonTarget: CloseViewProtocol? } </code></pre>  <p>to enforce (at compile time) that closeButtonTarget implements closeViewAction: method.</p>  <p>Now I can't do this:</p>  <pre><code>closeButton.addTarget(closeButtonTarget, action: "closeViewAction:", forControlEvents: .TouchUpInside) </code></pre>  <p>doing which compiler complains - </p>  <pre><code>Cannot convert value of type 'CloseViewProtocol?' to expected argument type 'AnyObject?' </code></pre>  <p>To resolve this I can do this:</p>  <pre><code>let buttonTarget = closeButtonTarget as! UIViewController closeButton.addTarget(buttonTarget, action: "closeViewAction:", forControlEvents: .TouchUpInside) </code></pre>  <p>Is there any better way to achieve expected behavior?</p>