<p>I have a UICollectionView with approximately 100 cells with a <strong>rounded button</strong> inside each cell. 5 cells per row, so I have to scroll down and up to select the buttons.</p>  <p>When the buttons are selected, the background image changes. I've done this in several ways which I expose below. Maybe it is not a very demanding view, but I was wondering what is the less expensive approach in terms of performance.</p>  <p>One solution I found is using an extension of <code>UIImage</code>  and setting the <code>button.layer.cornerRadius</code> like this:</p>  <pre><code>extension UIImage {   class func imageWithColor(color: UIColor?) -&gt; UIImage! {     let rect = CGRectMake(0.0, 0.0, 1.0, 1.0)      UIGraphicsBeginImageContextWithOptions(rect.size, false, 0)     let context = UIGraphicsGetCurrentContext();      if let color = color {         color.setFill()     }     else {         UIColor.whiteColor().setFill()     }      CGContextFillRect(context, rect);      let image = UIGraphicsGetImageFromCurrentImageContext();     UIGraphicsEndImageContext();      return image } </code></pre>  <p>and then, setting the button image background with:</p>  <pre><code>button.layer.cornerRadius = (cell.bounds.width - 8) / 2 button.clipsToBounds = true button.setBackgroundImage(UIImage.imageWithColor(UIColor.greenColor()), forState: UIControlState.Selected) </code></pre>  <p>I've heard that setting the <code>layer.cornerRadius</code> is pretty expensive.</p>  <p>Another approach would be just designing an squared image, in Photoshop or similar, with a circle in the middle and letting the rest transparent and setting it as button background.</p>  <p>Or another option, that I still haven't tried, I think it could be making an 1 x 1 pixels image with a color and setting the filling of the background as tile(I still haven checked the code for this one). But I think this is pretty similar to the first way.</p>  <p>Would you solve this questions measuring the performance with any software or just knowing more deeply the Swift language?</p>