<p>Yes, I will concur that at first glance, this looks exactly like a duplicate of the following:</p>  <ul> <li><a href="http://stackoverflow.com/questions/11652883/how-to-get-webpage-title-without-downloading-all-the-page-source" title="How to get webpage title without downloading all the page source">How to get webpage title without downloading all the page source</a></li> <li><a href="http://stackoverflow.com/questions/329307/how-to-get-website-title-from-c-sharp">How to get website title from c#</a></li> </ul>  <p>Truth be told... this question is extremely related to those two. However, I noticed that there was a flaw with the code from just about all links I have found so far while researching this particular topic.</p>  <p>Here are some other links that are similar to the above links in content:</p>  <ul> <li><a href="https://frejnorling.wordpress.com/2010/07/22/getting-scraping-the-title-of-a-web-page-using-c/" rel="nofollow">Getting (Scraping) the title of a web page using C#</a></li> <li><a href="http://blogs.msdn.com/b/noahc/archive/2007/02/19/get-a-web-page-s-title-from-a-url-c.aspx" rel="nofollow">Get a Web Page's Title from a URL (C#)</a></li> </ul>  <p>If it has to be known, I am getting the URL of the page using this particular method, as outlined in this link, but I presumed that it wouldn't matter:</p>  <ul> <li><a href="http://jamespreston.co.uk/Articles/UrlDragAndDropNotes.html" rel="nofollow">Dragging URLs to Windows Forms controls in C#</a></li> </ul>  <p>The code from the first link works pretty well, albeit with one big issue:</p>  <p>If, for example, I take the URL from this site: <a href="http://www.dotnetperls.com/imagelist" rel="nofollow">http://www.dotnetperls.com/imagelist</a></p>  <p>And pass it to the code, which I have a modified version of below:</p>  <pre><code>private static string GetWebPageTitle(string url) {     HttpWebRequest request = (HttpWebRequest.Create(url) as HttpWebRequest);     HttpWebResponse response = (request.GetResponse() as HttpWebResponse);     using (Stream stream = response.GetResponseStream())     {         // compiled regex to check for &lt;title&gt;&lt;/title&gt; block         Regex titleCheck = new Regex(@"&lt;title&gt;\s*(.+?)\s*&lt;/title&gt;", RegexOptions.Compiled | RegexOptions.IgnoreCase);         int bytesToRead = 8092;         byte[] buffer = new byte[bytesToRead];         string contents = "";         int length = 0;         while ((length = stream.Read(buffer, 0, bytesToRead)) &gt; 0)         {             // convert the byte-array to a string and add it to the rest of the             // contents that have been downloaded so far             contents += Encoding.UTF8.GetString(buffer, 0, length);              Match m = titleCheck.Match(contents);             if (m.Success)             {                 // we found a &lt;title&gt;&lt;/title&gt; match =]                 return m.Groups[1].Value.ToString();                 break;             }             else if (contents.Contains("&lt;/head&gt;"))             {                 // reached end of head-block; no title found =[                 return null;                 break;             }         }         return null;     } } </code></pre>  <p>It returns me a blank result, or null. However, when observing the HTML code of the page, the title tag is most definitely there.</p>  <p>Thus, my question is: How can the code be modified or corrected, from either the modified code I have, or from any of the other four links presented, to also obtain the web page title from all web pages that have the title tag present, one example being the last link in this question, the one from DotNetPerls.</p>  <p>I am merely guessing, but I wonder if the website displays differently from other typical sites, like maybe it doesn't display any code when you load it the first time perhaps, but the browser actually reloads the site after loading it the first time transparently...</p>  <p>I would prefer an answer with some working example code, if possible.</p>