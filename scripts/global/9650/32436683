<p>I just recently encountered this issue myself, and searching for this issue has turned up no fruits yet...</p>  <p>So let's say I have four checkboxes, as an example, and I want to do certain things based on which of them are checked at any time...</p>  <pre><code>if (CB1.Checked) {     //Do things here if only checkbox 1 is checked. } else if (CB2.Checked) {     //Do things here if only checkbox 2 is checked. } else if (CB3.Checked) {     //Do things here if only checkbox 3 is checked. } else //if (CB4.Checked) {     //Do things here if only checkbox 4 is checked. } </code></pre>  <p>I'm sure most people will tend to use something like the example code snippet above, or a variation of it. It looks simple, right? But what if... you aren't just checking for only one checkbox alone?</p>  <pre><code>if (CB1.Checked &amp;&amp; CB2.Checked) {     //Do things here if only checkbox 1 &amp; 2 is checked. } else if (CB2.Checked &amp;&amp; CB3.Checked) {     //Do things here if only checkbox 2 &amp; 3 is checked. } else if (CB3.Checked &amp;&amp; CB1.Checked) {     //Do things here if only checkbox 3 &amp; 1 is checked. } else if (CB4.Checked &amp;&amp; CB1.Checked) {     //Do things here if only checkbox 4 &amp; 1 is checked. } else if (CB4.Checked &amp;&amp; CB2.Checked) {     //Do things here if only checkbox 4 &amp; 2 is checked. } else //if (CB4.Checked &amp;&amp; CB3.Checked) {     //Do things here if only checkbox 4 &amp; 3 is checked. } </code></pre>  <p>As can be seen... the number of if-else statements have increased... And it will, if you wanted to compare perhaps even more checkboxes than 4, or for more checkboxes out of 4... And that could complicate things, with (likely) most programmers being unable to avoid it.</p>  <p>I should also mention that I know how many checkboxes are checked at a given time, thanks to this code:</p>  <pre><code>private int GetNumberOfCheckboxesChecked() {     int NumberofCheckBoxesChecked = 0;     foreach (Control c in groupBox1.Controls)     {         if ((c is CheckBox) &amp;&amp; ((CheckBox)c).Checked)             NumberofCheckBoxesChecked++;     }      return NumberofCheckBoxesChecked; } </code></pre>  <p>They will also need to check one of the checkboxes at all times, as each checkbox's checkchanged event calls this code:</p>  <pre><code>private void OneAtLeast(object originalSender) {     CheckBox tempCB = (CheckBox)originalSender;     if (!CB1.Checked &amp;&amp; !CB2.Checked &amp;&amp; !CB3.Checked &amp;&amp; !CB4.Checked)     {         tempCB.Checked = true;         MessageBox.Show("You must select at least one option!", "Invalid Operation", MessageBoxButtons.OK, MessageBoxIcon.Error);     } } </code></pre>  <p>So, <strong>my question is...</strong> is there a better (or more efficient, or can reduce the lines of code) way to do things according to which checkbox/checkboxes is/are checked? Or are we really stuck to this method (or variations of this method)?</p>  <p><strong>Do note that for this example, whatever you would be doing according to which checkboxes are checked... can't simply be "added on" or "appended".</strong></p>  <p>It should also be noted that the switch-case method will be more or less the same as this method... so it would most likely not make a difference. It has also been <a href="http://codereview.stackexchange.com/questions/44959/how-can-i-make-three-if-else-statements-more-efficient">concluded elsewhere that if-statements are more efficient that switch-case.</a></p>