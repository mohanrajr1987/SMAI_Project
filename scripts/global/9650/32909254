<p>I have a simple coordination system graphic, black background with + to mark the quadrants. This is an XAML Image on a Canvas, with a static PNG image as source. Another Image goes on top, transparent except for some dots that should make some points on my coordination system, older values gets tossed (Queue with a given size) when a certain number of points are drawn.</p>  <p>This works fine in my test project. The overlay is working as intended and the performance is pretty good. In my main project though, I cant get the overlay to work. The difference is, instead of binding the Image from code behind, </p>  <pre><code> ImageT.Source = wb; </code></pre>  <p>the image is saved in a Property (I tried ImageSource and WriteableBitmap) and bound via XAML. The binding doesnt seem the problem either, the only strange thing so far that the actual width and height of my Image is 0 - according to the WPF inspector. The actual size stated in VS2010 is the size I inspected.</p>  <p>Any idea what and where the problem could be ? I attached some images below the code.</p>  <pre><code>    private void draw()     {          // Add this image to the canvas         width = (int) x_canvas.ActualWidth;         height = (int) x_canvas.ActualHeight;          // Create the bitmap, and set         WriteableBitmap wb = new WriteableBitmap(             width,             height,             96, 96, //DPI             PixelFormats.Bgra32,             null);         lineSize = width*4;         wb.Lock();         IntPtr buff = wb.BackBuffer;           unsafe         {             byte* pbuff = (byte*) buff.ToPointer();             System.Drawing.Point[] p = pointQueue.ToArray();             for (int i = 0; i &lt; pointQueue.Count; i++)             {                 DrawDot(pbuff, p[i].X, p[i].Y);             }         }          wb.AddDirtyRect(new Int32Rect(0, 0, width, height));         wb.Unlock();          // ImageT declared in XAML         ImageT.Source = wb;     }       private unsafe void DrawDot(byte* buff, int x, int y)     {         int pixelLocation = lineSize*y + x*4;         buff[pixelLocation] = 0xff;         buff[pixelLocation + 1] = 0xff;         buff[pixelLocation + 2] = 0xff;         buff[pixelLocation + 3] = 0xff;     } </code></pre>  <p><a href="http://i.stack.imgur.com/j5D3p.png" rel="nofollow"><img src="http://i.stack.imgur.com/j5D3p.png" alt="wpf inspector"></a></p>