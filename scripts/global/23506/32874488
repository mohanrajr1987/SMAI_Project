<p>I just want to build a cascade structure like <code>Category-Subject-Post</code> in my project.  Here is my code:</p>  <blockquote>   <p>models.py:</p> </blockquote>  <pre><code>class Category(models.Model):     category_name = models.CharField(max_length=60, unique=True)     slug_category = models.SlugField(unique=True)      def get_absolute_url(self):     return reverse("skill:subjects", kwargs={"slug_category": self.slug_category})  class Subject(models.Model):     category = models.ForeignKey(Category)     subject_name = models.CharField(max_length=100, unique=True)     slug_subject = models.SlugField(unique=True)       def get_absolute_url(self):     return reverse("skill:subject", kwargs={         "slug_category": self.category.slug_category,         "slug_subject": self.slug_subject     })   class Post(models.Model):     subject = models.ForeignKey(Subject)     ... </code></pre>  <blockquote>   <p>views.py:</p> </blockquote>  <pre><code>def index(request):     context = {         'category_it': Category.objects.filter(class_name='IT'),         'category_ps': Category.objects.filter(class_name='PS'),         'category_ac': Category.objects.filter(class_name='AC'),         'category_tc': Category.objects.filter(class_name='TC'),         'category_sc': Category.objects.filter(class_name='SC'),         'category_ss': Category.objects.filter(class_name='SS'),     }     return render(request, 'skill/index.html', context)  class SubjectsView(generic.ListView):     model = Subject     queryset = Subject.objects.all()     template_name = "skill/subjects.html"   class SubjectView(generic.ListView):     model = Post     queryset = Post.objects.all()     template_name = 'skill/subject.html' </code></pre>  <blockquote>   <p>urls.py:</p> </blockquote>  <pre><code>url(r'^$', views.index, name='index'),     # /programming     url(r'^(?P&lt;slug_category&gt;[\w-]+)/$', views.SubjectsView.as_view(), name='subjects'),     # /programming/git     url(r'^(?P&lt;slug_category&gt;[\w-]+)/(?P&lt;slug_subject&gt;[\w-]+)/$', views.SubjectView.as_view(), name='subject'),     # /programming/git/43121     url(r'^(?P&lt;slug_category&gt;[\w-]+)/(?P&lt;slug_subject&gt;[\w-]+)/(?P&lt;pk&gt;[0-9]+)/$', views.post, name='post'), ] </code></pre>  <p>templates:</p>  <blockquote>   <p>index.html:</p> </blockquote>  <pre><code>{% for category in category_it %}     &lt;a href="{% url 'skill:subjects' category.slug_category %}" class="item"&gt;{{ category }}&lt;/a&gt; {% endfor %} </code></pre>  <blockquote>   <p>subjects.html:</p> </blockquote>  <pre><code>{% for object in object_list %}     &lt;a href="{{ object.get_absolute_url }}" class="item"&gt;&lt;h4&gt;{{ object }}&lt;/h4&gt;&lt;/a&gt; {% endfor %} </code></pre>  <p>I don't know what query I need for that and where(views or template), I tried and hardcoded it (index in views.py and template but 6times larger) but can't afford it on the next step because of the scope.</p>  <p>I need <em>categories</em> in <strong>index.html</strong>, <em>list of subjects</em> belonging to particular category in <strong>subjects.html</strong> and <em>posts belonging to their subject</em> in <strong>subject.html</strong>. Can you please help me with finding the working solution</p>