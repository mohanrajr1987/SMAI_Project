<p>I had been happily using django-tables2 but I decided I wanted to transpose the table so the header row was the first column and then the rows were columns. This is pretty well described all over the place, but not so much how. My approach so far is to use django-pandas to convert the data from queryset to dataframe and then to use pandas to transpose the data. The content of the model doesn't seem to be relevant to so I'll make that simple.</p>  <pre><code>class Product(models.model):     manufacturer = models.CharField()     model = models.CharField()     feature1 = models.BooleanField()  objects = DataFrameManager() </code></pre>  <p>That's over simpilfied, but you get the point. That last line is important, its from django-pandas.</p>  <p>Then I can get a queryset, convert it to data frame and transpose it.</p>  <pre><code>qs = Products.objects.all() df = qs.to_dataframe() flipped = df.transpose() </code></pre>  <p>When I play with that in the django shell, and just dump the object I can see I'm getting the desired result. I can also use <code>htmltable = flipped.to_html()</code> and then pass <code>htmltable</code> to a view and get an HTML table in my view. </p>  <p><strong><em>BUT</em></strong>, what do I need to do with that dataframe object I get <code>flipped</code> in order to get it back to a queryset or a "Table" so I can continue to use django-tables2 to display the data? I had TemplateColumns and Meta class settings as well so I'd like to see how that all fits together if possible, so I'd prefer a path that still allows that.</p>  <p>Thanks so much, I hope my question was clear enough.</p>