<p>I'm new to TDD. I want some tips on how to unit tests an application formed by a data layer that implements actual database access statements, and an application layer whose job is limited to calling the data layer methods. For example : </p>  <p>In my data layer class, called CassandraDataLayer, I have a retrieveMessage method :</p>  <pre><code>class CassandraDataLayer:      def retrieveMessage(self,message_id):         #database access statements to retrieve the message         #returns a Message class instance </code></pre>  <p>On the other hand, in my application layer class, called ApplicationLayer, I have the following retrieveMessage method :</p>  <pre><code>class ApplicationLayer:      def retrieveMessage(self,message_id):         return self.dataLayer.retrieveMessage(message_id) </code></pre>  <p>Do I have to do unit tests for both of the two methods ? </p>  <p>To test my CassandraDataLayer retrieveMessage method, I've proceeded as the following : </p>  <ol> <li>I instantiate a test database.</li> <li>I manually insert a message into it</li> <li>Then, I call the retrieveMessage to attempt to retrieve the message</li> <li>Finally, assert that the inserted message and the retrieved one are equal.</li> </ol>  <p>But, then, how can I test the application layer class retrieveMessage method ? Do I have to use the same logic again ? Isn't it redudant ?</p>