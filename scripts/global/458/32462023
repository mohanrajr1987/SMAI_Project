<h2>Background:</h2>  <p>I'm writing a lot of go code, using the <code>go test</code> tool and the provided <code>"testing"</code> package for, well, testing. Most of the testing that I do is unit testing, within the TDD discipline. These "units" under test are never permitted to depend on stateful externalities like persistent storage, a network hop, etc., but receive fake, in-memory implementations of those externalities usually in "constructor/builder" functions (yes, I know they aren't constructors in the traditional sense).</p>  <h2>The Problem:</h2>  <p>It has long bothered me that the <code>go test</code> tool always runs test functions in the same deterministic order. This has, in a few cases, allowed race conditions to hide in the code. One way to find these bugs is by setting the <code>-race</code> flag. Another might be to always run unit tests in parallel...</p>  <h2>The Question:</h2>  <p>Is there <em>ever</em> a situation in which <em>isolated</em> unit tests could not or should not <em>always</em> be run in parallel (using the <code>-parallel</code> flag)?</p>