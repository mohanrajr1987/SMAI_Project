<p>I am attempting to use electron for an exercise in prototyping an app and I am attempting to use test driven development in my learning.</p>  <p>I have a personal preference to use Jasmine. There exists a solid scaffolding repo for electron apps here [ ] which also employs Jasmine, this was part of the motivation.  I took the specs included in the master branch of electron as my basis <a href="https://github.com/atom/electron/tree/master/spec" rel="nofollow">https://github.com/atom/electron/tree/master/spec</a></p>  <p>To establish a baseline of tests which pass and fail I converted the coffeescript to javascript using npm package coffee, and command <code>coffee -c *.coffee</code> I tested each test against the native npm test afforded by the scaffolding framework (which wraps a lot of things up in runners, but is basically using the same files as standalone jasmine)</p>  <p>there are 121 failures and 70 tests which have assertions with no expectations, so there is no way to know if they are passing. </p>  <p>The full code of those experiments is here (<a href="https://github.com/theodi/edward-csvhands/commit/f9063980621fa85bc7fd2a2108c15c1145d33035" rel="nofollow">https://github.com/theodi/edward-csvhands/commit/f9063980621fa85bc7fd2a2108c15c1145d33035</a>) but I'm including one of the 70 tests (as an indicative example) which has a no assertion warning, and I am wondering if the structure of the test requires rewriting:</p>  <pre><code>describe('dom-ready event', function() {   return it('emits when document is loaded', function(done) {     var server;     server = http.createServer(function(req) {});     return server.listen(0, '127.0.0.1', function() {       var port;       port = server.address().port;       webview.addEventListener('dom-ready', function() {         return done();       });       webview.src = "file://" + fixtures + "/pages/dom-ready.html?port=" + port;       return document.body.appendChild(webview);     });   }); }); </code></pre>