<p>I'm trying to get a 100% code coverage on this simple http handler file. </p>  <p>The file writes the default response headers if successful and then returns 200 with "Pong" which I've tested below. However, there is also a possibility that writing the default headers will generate an error in which case a 500 response with Internal Error body is expected. </p>  <p>I'm struggling to figure out how to trigger the 500 response case in a test. The case would fail if for some reason the writeDefaultHeaders function call's 2nd parameter was changed to "html" for example as html is not a supported response content type in my service. </p>  <p>What is the idiomatic way to mock this call / hit this error branch in the code?</p>  <p>Thanks.</p>  <p><strong>ping_handler_test.go</strong></p>  <pre><code>package main  import (     "net/http"     "net/http/httptest"     "testing" )  func Test200PingHandler(t *testing.T) {     req, _ := http.NewRequest("GET", "/ping", nil)     w := httptest.NewRecorder()      PingHandler(w, req)      if w.Code != http.StatusOK {         t.Errorf("Ping Handler Status Code is NOT 200; got %v", w.Code)     }      if w.Body.String() != "Pong" {         t.Errorf("Ping Handler Response Body is NOT Pong; got %v", w.Body.String())     } }  // This fails as it is the same setup as the passing success case func Test500PingHandler(t *testing.T) {     req, _ := http.NewRequest("GET", "/ping", nil)     w := httptest.NewRecorder()      PingHandler(w, req)      if w.Code != http.StatusInternalServerError {         t.Errorf("Ping Handler Status Code is NOT 500; got %v", w.Code)     }      if w.Body.String() != "Internal Server Error" {         t.Errorf("Ping Handler Response Body is NOT Internal Server Error; got %v", w.Body.String())     } }  func BenchmarkPingHandler(b *testing.B) {     for i := 0; i &lt; b.N; i++ {         req, _ := http.NewRequest("GET", "/ping", nil)         w := httptest.NewRecorder()          PingHandler(w, req)     } } </code></pre>  <p><strong>ping_handler.go</strong></p>  <pre><code>package main  import (     "fmt"     "net/http" )  func PingHandler(w http.ResponseWriter, r *http.Request) {     err := writeDefaultHeaders(w, "text")     if err != nil {         handleException(w, err)         return     }      fmt.Fprintf(w, "Pong") }  func writeDefaultHeaders(w http.ResponseWriter, contentType string) error {     w.Header().Set("X-Frame-Options", "DENY")     w.Header().Set("X-Content-Type-Options", "nosniff")     w.Header().Set("X-XSS-Protection", "1;mode=block")      switch contentType {     case "text":         w.Header().Set("Content-Type", "text/plain; charset=utf-8")         return nil     case "json":         w.Header().Set("Content-Type", "application/json; charset=UTF-8")         return nil     default:         return errors.New("Attempting to render an unknown content type")     } } </code></pre>  <p><strong>Edit</strong> Another Example:</p>  <pre><code>json_response, err := json.Marshal(response) if err != nil {     handleException(w, err)     return } </code></pre>  <p>In this case, how do I test json.Marshal returning an error?</p>