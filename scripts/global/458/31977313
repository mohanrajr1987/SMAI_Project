<p>I'm trying to use TDD with AngularJS using Protractor (and then Karma for unit test). But simple end-to-end tests just don't work as expected. Here's one case, stripped down to the bare minimum. I want to write a test for the expected repeater, and since it's TDD, the repeater does not yet exist.</p>  <p>I expected/would like to get a "No element found for locator: ..." error, but nothing happened until the test failed with a "Failed: undefined is not a function" error, which is not much help.</p>  <p>How do I put in some reasonable tests and have Protractor give me meaningful responses to guide me through the TDD process? And as a side note, why does Protractor not provide an option to resolve all promises automatically -- that would make testing much more straight-forward, IMO.</p>  <p><strong>index.html</strong></p>  <pre><code>&lt;html lang="en"&gt; &lt;head &gt;   &lt;meta http-equiv="content-type" content="text/html; charset=utf-8" /&gt;   &lt;script src="bower_components/angular/angular.js"&gt;&lt;/script&gt;   &lt;script src="bower_components/angular-mocks/angular-mocks.js"&gt;&lt;/script&gt;    &lt;script src="bower_components/angular-route/angular-route.js"&gt;&lt;/script&gt;   &lt;script src="app/search.js"&gt;&lt;/script&gt;   &lt;script src="app/searchCtrl.js"&gt;&lt;/script&gt;   &lt;title&gt;Testing TDD &amp; AngularJS&lt;/title&gt;  &lt;/head&gt; &lt;body ng-app="search"&gt;   &lt;div ng-controller='searchCtrl'&gt;     &lt;input type="text" ng-model="searchQuery"/&gt;     &lt;button ng-click="search(searchQuery)" type="submit"&gt;search&lt;/button&gt;   &lt;/div&gt;   &lt;div ng-view&gt;     &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; </code></pre>  <p><strong>test.js</strong></p>  <pre><code>describe('basic search test', function(){    var searchResults= null;    beforeEach( function(){      browser.get("/index.html");     searchResults = element.all(by.repeater('result in results'));               //    ^-- Expected to get "No element found using locator: xxx"     searchResults.then(function(results) {       expect(results.count().toBe(0)}));               //     ^-- Failed: undefined is not a function     var searchQueryInput = $('input');     searchQueryInput.sendKeys('any value');     var searchButton = element(by.buttonText('search'));     searchButton.click();   });     it('has a result', function(){      expect(searchResults.count()).toBe(1);     ^-- Expected 0 to be 1.   });  }); </code></pre>