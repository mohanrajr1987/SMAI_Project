<p>I was in an interview and this question was asked, whats the best way to answer this? </p>  <p>I know the lifecycle of TDD is as follows</p>  <pre><code>1- Write the test 2- Run the test (there is no implementation code, test does not pass) 3- Write just enough implementation code to make the test pass 4- Run all tests (tests pass) 5- Refactor 6- Repeat </code></pre>  <p>Lets say I would like to create a software and follow TDD. Where should I design the software? For example, I would like to design a software to enable user registration, enabling them to access their profile and search for the products.</p>  <p>Based on the steps I should write a test lets say for registration, then write a code for it to pass it then try to refactor it, how about design of software? I am a bit confused.</p>  <p>TDD is about making new changes to the software and testing it, how about design?</p>  <h2>UPDATE</h2>  <p>Lets say I am developing an application which has following features, registration, member profile, access to search feature (only to members) to search for products, second search feature that is accessible by public and members, about us page, contact us page, product payment for both searches.</p>  <p>Should I start thinking about design, after reaching a complete design start writing tests and then implementation code for lets say registration part, then members profile, members search feature, about us, contact us, public search feature and at the end product payment respectively?</p>