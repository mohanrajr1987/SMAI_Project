<p>I understand that TDD has many advantages (some of them are below). How ever I  am not sure how it drives the design? </p>  <ol> <li>Serves as documentation</li> <li>writing tests before actual code helps maximum test coverage</li> <li>Help determine input value boundaries</li> </ol>  <p>Usually when we start implement new piece of functionality, we will have rough idea of the design. And we start with TDD implementation of a class, which is used by other classes as per design. This understanding of mine seems to be in conflict with statement "TDD drives the design"</p>  <p>Please help me understand this by an example.</p>