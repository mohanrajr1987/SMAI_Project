<p>I have the following statements.</p>  <pre><code>val a: Any = Array("1", "2", "3") a match {   case p: Array[Int] =&gt; println("int")   case l: Array[String] =&gt; println("string") }  val b: Any = List(1, 2, 3) b match {   case l: List[String] =&gt; println("string")   case p: List[Int] =&gt; println("int") } </code></pre>  <p>The first block about Array compiles without warnings and outputs "string", while the second one about List compiles with warnings related to type erasure and outputs "string" as well.</p>  <p>I know something about type erasure in JVM. At runtime, JVM cannot really know the generic type of a container(such as List). But why does Array can avoid type erasure at runtime and get the right type matched?</p>  <p>I tried to find the answer from scala source code. The only thing I found is that Array uses ClassTag but List does not.</p>  <p>I'd like to how ClassTag works. Is ClassTag a workaround of type erasure? And why containers like List haven't been implemented with ClassTag to avoid type erasure.</p>