<p>I have the following piece of code</p>  <pre class="lang-kotlin prettyprint-override"><code>fun changeSelection(item: FileOrFolder, selected: Boolean) {     selection = when(item) {         is Folder -&gt; {             when(selected) {                 true -&gt; selection + item                 false -&gt; selection - item             }         }         is File -&gt; {             when(selected) {                 true -&gt; selection + item                 false -&gt; selection - item             }         }         else -&gt; throw Exception("unreachable")     } } </code></pre>  <p>which looks kinda cluttered for me as I got used to this in scala</p>  <pre class="lang-scala prettyprint-override"><code>def changeSelection(item: FileOrFolder, selected: Boolean) {     (item, selected) match {         case (item: Folder, true) =&gt; selection + item         case (item: Folder, false) =&gt; selection - item         case (item: File, true) =&gt; selection + item         case (item: File, false) =&gt; selection - item     } } </code></pre>  <p>Is there a way to achieve something similar in Kotlin?</p>