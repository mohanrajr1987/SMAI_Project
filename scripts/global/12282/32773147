<p>Some days ago I ask for some function that retrieve the repetitive motif from some string (<a href="http://stackoverflow.com/questions/29955135/a-more-complex-version-of-how-can-i-tell-if-a-string-repeats-itself-in-python">Here the link to the ask</a>). The user @Kasramvd posted a nice function based on regex:</p>  <pre><code>import re def finder(st,past_ind=0,l=[]):     m=re.search(r'(.+)\1+',st)     if m:         i,j=m.span()         sub=st[i:j]         ind = (sub+sub).find(sub, 1)         sub=sub[:ind]         if len(sub)&gt;1:             l.append([sub,(i+past_ind+1,j+past_ind+1)])         past_ind+=j         return finder(st[j:],past_ind)     else:         return l </code></pre>  <p>This function, in fact, catch the repetitive motifs and also show the from/until where it take place:</p>  <pre><code>&gt;&gt;&gt; finder('123.123.123.') [['123.', (1, 13)]] #the 123. motif take place from position 1 to position 13 </code></pre>  <p>However, looks like this function has memory. When I used it again with other string, it show also the previous result:</p>  <pre><code>&gt;&gt;&gt; finder('abc.abc.abc.') [['123.', (1, 13)], ['abc.', (1, 13)]] </code></pre>  <p>So, someone know how to avoid this? How to reset the function?</p>  <p>Thanks in advance guys. =)</p>