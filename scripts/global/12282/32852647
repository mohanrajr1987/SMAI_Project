<p>I want to match a complex pattern with clips: It involves the detection of simple facts and, in a second step, the detection of more complex instances whose creation requires processing the simple facts. Currently, I approach this with three rules:</p>  <ol> <li><code>Rule1</code> checks for a large number of simple facts and, if present, creates a complex class instance <code>i_complex</code> based on the matched simple facts.</li> <li><code>Rule2</code> also looks for the simple facts and <code>i_complex</code> and, if present, uses them to create an even more complex instance <code>i_really_complex</code>.</li> <li><code>Rule3</code> also looks for the simple facts, <code>i_complex</code>, and <code>i_really_complex</code> and, if all present, prints something to the screen.</li> </ol>  <p>My current approach is to copy paste the large number of simple facts from the LHS of <code>Rule1</code> to the LHS of <code>Rule2</code> and <code>Rule3</code>. This is obviously not perfect.</p>  <p>I have considered the following alternative:</p>  <ul> <li><p>Putting everything in one rule. This is in fact my favored solution. The problem is that one cannot add facts/instances on the LHS of a rule. This means, for example, that I cannot check if the requirements for <code>i_complex</code> are met, and if yes, create and assert it. Yet this is necessary to correctly match <code>i_really_complex</code>.</p>  <p>I have thought of a self-modifying rule which is called/matched twice: The first time it creates <code>i_complex</code> on the RHS. The second time it can match <code>i_complex</code> on the LHS and create <code>i_really_complex</code> and so on. </p></li> </ul>  <p>What is the preferred approach to match a pattern like this?</p>