<p>I can use <code>SomeSing</code> with great effect to be able to dynamically generate Singletons and then pattern-match on them to be able to do fun stuff</p>  <pre><code>&gt; let x = SomeSing SFalse :: SomeSing ('KProxy :: KProxy Bool) -- pretend x is dynamically generated using IO or something &gt; case x of SomeSing SFalse -&gt; blah blah             SomeSing STrue -&gt; blah blah </code></pre>  <p>However, I'm not really sure how to do this with <code>SNat</code>, which is the data family instance for <code>Sing Nat</code>.  One issue I have is that I'm not able to ever get the <code>SNat</code> data constructor in scope even when importing all of the relevant modules (<code>Data.Singletons</code>, <code>Data.Singletons.TypeLits</code>, <code>Data.Singletons.Prelude</code>, etc.) and enabling the extensions (even though <code>SNat</code> the constructor shows up when I use <code>:browse</code> and <code>:i Sing</code>) </p>  <p>...another issue I have is that ... there aren't any separate constructors to match on like for <code>SFalse</code> and <code>STrue</code>...there's just one constructor! :O  How am I supposed to use this in the same way?</p>