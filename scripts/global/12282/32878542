<p>I tried using LuaXml library. But its functionality is limited as this returns only the first subtable of a particular attribute and does not go further than that. Then I tried string pattern matching which worked but I reached a dead end and it couldnt completely achieve the task. LuaExpat library is present in my lib folder of lua, and a file called lom.lua is also there. But often it doesnt work or gives me the error that "module not found"</p>  <p>My XML file looks like this :</p>  <pre><code>&lt;Service&gt; &lt;NewInstance ref="5A"&gt; &lt;Std&gt;DiscoveredElement&lt;/Std&gt; &lt;Key&gt;5A&lt;/Key&gt; &lt;Attributes&gt; &lt;Attribute name="TARGET_TYPE" value="weblogic_cluster" /&gt; &lt;Attribute name="DISCOVERED_NAME" value="/Farm_soa4_sys20_soa4_domain/soa4_domain/WSM4_Cluster" /&gt; &lt;Attribute name="BROKEN_REASON" value="0" /&gt; &lt;Attribute name="TARGET_NAME" value="/Farm_soa4_sys20_soa4_domain/soa4_domain/WSM4_Cluster" /&gt; &lt;Attribute name="EMD_URL" value="https://uxsys460.schneider.com:3872/emd/main/" /&gt; &lt;/Attributes&gt; &lt;/NewInstance&gt;  &lt;NewInstance ref="6C"&gt; &lt;Std&gt;DiscoveredElement&lt;/Std&gt; &lt;Key&gt;6C&lt;/Key&gt; &lt;Attributes&gt; &lt;Attribute name="TARGET_TYPE" value="oracle_weblogic_nodemanager" /&gt; &lt;Attribute name="SERVICE_TYPE" value=" " /&gt; &lt;Attribute name="ORG_ID" value="0" /&gt; &lt;Attribute name="TARGET_NAME" value="Oracle WebLogic NodeManager-uxlab090" /&gt; &lt;/Attributes&gt; &lt;/NewInstance&gt;  &lt;NewInstance ref="98"&gt; &lt;Std&gt;DiscoveredElement&lt;/Std&gt; &lt;Key&gt;98&lt;/Key&gt; &lt;Attributes&gt; &lt;Attribute name="TARGET_TYPE" value="composite" /&gt; &lt;Attribute name="SERVICE_TYPE" value=" " /&gt; &lt;Attribute name="TARGET_NAME" value="SYS-IMG-Grp" /&gt; &lt;Attribute name="EMD_URL" value="" /&gt; &lt;/Attributes&gt; &lt;/NewInstance&gt;  &lt;NewRelationship&gt; &lt;Parent&gt; &lt;Instance ref="98" /&gt; &lt;/Parent&gt; &lt;GenericRelations&gt; &lt;Relations type="contains"&gt; &lt;Instance ref="5A" /&gt; &lt;/Relations&gt; &lt;/GenericRelations&gt; &lt;/NewRelationship&gt;  &lt;NewRelationship&gt; &lt;Parent&gt; &lt;Instance ref="5A" /&gt; &lt;/Parent&gt; &lt;GenericRelations&gt; &lt;Relations type="contains"&gt; &lt;Instance ref="6C" /&gt; &lt;/Relations&gt; &lt;/GenericRelations&gt; &lt;/NewRelationship&gt; &lt;NewRelationship&gt; &lt;Parent&gt; &lt;Instance ref="5A" /&gt; &lt;/Parent&gt; &lt;GenericRelations&gt; &lt;Relations type="contains"&gt; &lt;Instance ref="98" /&gt; &lt;/Relations&gt; &lt;/GenericRelations&gt; &lt;/NewRelationship&gt; &lt;/Service&gt; </code></pre>  <p>My agenda is to display a NewInstance ID and its corresponding target type and target name and also its relation type with and the ID of instance ref its related to, along with its target type and target name  for eg:</p>  <pre><code>NewInstance ID - 5A Target Type - weblogic_cluster  Target Name - /Farm_soa4_sys20_soa4_domain/soa4_domain/WSM4_Cluster Relation Type - contains Instance ref - 6C Target Type - oracle_weblogic_nodemanager Target Name - Oracle WebLogic NodeManager-uxlab090 Instance ref - 98 Target Type - composite Target Name - SYS-IMG-Grp </code></pre>  <p>Now LuaXml cannot be used to achieve this. String pattern matching's code I'll list below and it helps me accomplish the task till relation type but not accurately</p>  <p>The code is :</p>  <pre><code>a={} b={} c={} d={} p=0 i=0 q=0  local file = io.open("oem_topology_output.xml", "rb")   -- Open file   for    reading (binary data)   for instance in file:read("*a"):gmatch("&lt;NewInstance ref=\"(.-)\"&gt;") do      a[i] = instance      i = i+1   end file:close() local files = io.open("oem_topology_output.xml", "rb")   -- Open file for  reading (binary data)   for instances in files:read("*a"):gmatch("&lt;NewInstance ref=\".-\"&gt;(.-)&lt;/NewInstance&gt;") do      TARGET_TYPE = instances:match('TARGET_TYPE.-value="(.-)"')      TARGET_NAME = instances:match('TARGET_NAME.-value="(.-)"')      b[p] = TARGET_TYPE      c[p] = TARGET_NAME      p =p+1   end local file = io.open("oem_topology_output.xml", "rb")   -- Open file   for   reading (binary data)   for type in file:read("*a"):gmatch("&lt;Relations type=\"(.-)\"&gt;") do     d[q] = type     q = q+1   end files:close() for j=0,i-1 do print("INSTANCE ID : ", a[j]) print("TARGET TYPE : ", b[j]) print("TARGET NAME : ", c[j]) print("RELATION TYPE : ",d[j]) end </code></pre>  <p>Please suggest what approach I should follow to be able to parse the XMl file in the required way. Which in-built library will provide the apt functions. In case you suggest, LuaExpat let me know the possible reasons why it does not work for me.</p>