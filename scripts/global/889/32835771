<p>I have a window with two scrollbars, the scrollbars are repositioned when the window is resized. Inside the <code>WM_PAINT</code> handler, I draw a filled white rectangle just before the scrollbars:</p>  <p><a href="http://i.stack.imgur.com/rkA8K.jpg" rel="nofollow"><img src="http://i.stack.imgur.com/rkA8K.jpg" alt="enter image description here"></a></p>  <p>Now, what I assumed will happen when I resize the window is the following:</p>  <ul> <li>First, a <code>WM_SIZE</code> message is sent. Inside its handler I reposition the scrollbars.</li> <li>Second, a <code>WM_PAINT</code> message is sent. Inside its handler I redraw the filled white rectangle.</li> </ul>  <p>But when I resize the window vertically, this is what happens:</p>  <p><a href="http://i.stack.imgur.com/sulUC.jpg" rel="nofollow"><img src="http://i.stack.imgur.com/sulUC.jpg" alt="enter image description here"></a></p>  <p>And when I resize the window horizontally, this is what happens:</p>  <p><a href="http://i.stack.imgur.com/FaFxU.jpg" rel="nofollow"><img src="http://i.stack.imgur.com/FaFxU.jpg" alt="enter image description here"></a></p>  <p>This is my code:</p>  <pre><code>#include &lt;Windows.h&gt;  HWND hHorizontalScrollbar; HWND hVerticalScrollbar;  LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) {     switch(message)     {     case WM_PAINT:         {             PAINTSTRUCT ps;             HDC hdc = BeginPaint(hWnd, &amp;ps);              // Get width and height of client area for hWnd             RECT rect;             GetClientRect(hWnd, &amp;rect);              // Draw a filled white rectangle just before the scrollbars             Rectangle(hdc, rect.left, rect.top, rect.right - 17, rect.bottom - 17);              EndPaint(hWnd, &amp;ps);         }         break;     case WM_SIZE:         {             // Get width and height of client area for hWnd             RECT rect;             GetClientRect(hWnd, &amp;rect);              // Change y and width of horizontal scrollbar             MoveWindow(hHorizontalScrollbar, 0, rect.bottom - 17, rect.right - 220, 17, TRUE);              // Change x and height of vertical scrollbar             MoveWindow(hVerticalScrollbar, rect.right - 17, 0, 17, rect.bottom - 220, TRUE);         }         break;     case WM_CLOSE:         DestroyWindow(hWnd);         break;     case WM_DESTROY:         PostQuitMessage(0);         break;     default:         return DefWindowProc(hWnd, message, wParam, lParam);     }     return 0; }  int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,     LPSTR lpCmdLine, int nCmdShow) {     WNDCLASSEX wc;     wc.cbSize = sizeof(WNDCLASSEX);     wc.style = 0;     wc.lpfnWndProc = WndProc;     wc.cbClsExtra = 0;     wc.cbWndExtra = 0;     wc.hInstance = hInstance;     wc.hIcon = LoadIcon(NULL, IDI_APPLICATION);     wc.hCursor = LoadCursor(NULL, IDC_ARROW);     wc.hbrBackground = (HBRUSH)(COLOR_BTNFACE+1);     wc.lpszMenuName = NULL;     wc.lpszClassName = "WinClass";     wc.hIconSm = LoadIcon(NULL, IDI_APPLICATION);     RegisterClassEx(&amp;wc);      HWND hWnd = CreateWindowEx(0, "WinClass", "", WS_OVERLAPPEDWINDOW, 600, 300, 400, 400, NULL, NULL, hInstance, NULL);      // Create horizontal Scrollbar     hHorizontalScrollbar = CreateWindowEx(0, "SCROLLBAR", NULL, WS_CHILD | WS_VISIBLE| SBS_HORZ, 0, 333, 300, 17, hWnd, NULL, hInstance, NULL);      // Create vertical Scrollbar     hVerticalScrollbar = CreateWindowEx(0, "SCROLLBAR", NULL, WS_CHILD | WS_VISIBLE| SBS_VERT, 333, 0, 17, 300, hWnd, NULL, hInstance, NULL);      ShowWindow(hWnd, nCmdShow);     UpdateWindow(hWnd);      MSG msg;     while(GetMessage(&amp;msg, NULL, 0, 0) &gt; 0)     {         TranslateMessage(&amp;msg);         DispatchMessage(&amp;msg);     }     return msg.wParam; } </code></pre>