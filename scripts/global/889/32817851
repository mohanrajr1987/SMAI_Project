<p>I have to use 3rd party native API that takes pointer to <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd183376(v=vs.85).aspx" rel="nofollow">BITMAPINFOHEADER</a> structure and pointer to bitmap data as parameters.</p>  <blockquote>   <p><code>static Image load ( IntPtr bi, IntPtr img, string name )</code></p>      <p>constructs a image representation from the specified bitmap image in   memory. The bi pointer points to a BITMAPINFOHEARER followed by an   optional color table. The existence of a colortable depends on the   image type. The Byte pointer has to point to bitmap data as described   by the bitmap information.</p> </blockquote>  <p><strong>How do I get pointer to the structure representing uncompressed 24bit RGB bitmap with specified size in C#?</strong></p>  <p>I have downloaded the BITMAPINFOHEADER stucture C# decalaration from here: <a href="http://www.pinvoke.net/default.aspx/Structures/BITMAPINFOHEADER.html" rel="nofollow">http://www.pinvoke.net/default.aspx/Structures/BITMAPINFOHEADER.html</a></p>  <p>I'm actually working with EmguCV image class and I tried to get the BITMAPINFOHEARER describing the image from <a href="http://www.emgu.com/wiki/files/2.0.0.0/html/a8929aab-99c5-79cf-385c-dcec7769fea1.htm" rel="nofollow"><code>Image&lt;Rgb, byte&gt;</code></a>.</p>  <pre><code>var image = new Image&lt;Rgb, byte&gt;(@"myImage.bmp");  //1. create BITMAPINFOHEADER instance var bitmapInfoHeader = new BITMAPINFOHEADER {     biSize = (uint)Marshal.SizeOf(typeof(BITMAPINFOHEADER)), //40     biWidth = image.Width, //4096     biHeight = image.Height, //4096     biPlanes = 1,     biBitCount =24,     biCompression = BitmapCompressionMode.BI_RGB,     biSizeImage = (uint)image.Bytes.Length, };  //2. get pointer to the data IntPtr ptrData; fixed (byte* pData = image.Data)     ptrData = (IntPtr)pData;  //3. get pointer to the BitmapInfoHeader: int iSizeOfBih = Marshal.SizeOf(typeof(BITMAPINFOHEADER)); IntPtr ptrBih = Marshal.AllocHGlobal(iSizeOfBih); Marshal.StructureToPtr(bih, ptrBih, false);  fixed (byte* pData = image.Bytes) {    var frImage = Bmp.load(pBitmapInfoHeader, (IntPtr)pData, "Frame");    var faces = faceTracker.processFrame(frImage); } </code></pre>  <p>Although this compiles and runs without exception, it does not load the image correctly (i'm not able to process is later using facetracker.When I used another method to load image from file the facetracker worked)</p>  <p>What am I doing wrong?</p>