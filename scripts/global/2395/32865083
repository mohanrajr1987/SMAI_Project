<p>I <a href="http://saurzcode.in/2015/01/hive-sort-vs-order-vs-distribute-vs-cluster/" rel="nofollow">read a little</a> about the difference between order by and cluster by operations in Hive. As I understand it, "order by" gives you global ordering at the cost of running all the data through one reducer, which can cause the cluster to choke if there is too much data (and I didn't find a good explanation to what is too much) to pass through that reducer.</p>  <p>"Cluster by" on the other hand partition the data to different reducers and sort it in the reducer level, so you end up with N sorted partitions (files) but there is no guarantee for global ordering if you simply stitch the files together. The issue of global ordering is not clear as the difference of opinions was not settle in <a href="http://stackoverflow.com/questions/13715044/hive-cluster-by-vs-order-by-vs-sort-by">this answer</a>.</p>  <p>I have a job in which I need to load 180M rows, group them in groups of 24 by a certain columns combination, operate a certain function on that group and store it back to hadoop.</p>  <p>Since the applied function on the group is not a trivial one, I do the calculation I need in code. So I use ORDER BY to get the rows in the order I need, then Im batch fetching the query results (Hive client in java, batches of 10000 rows), apply my function and store the result back in a DB. This process is very heavy on the cluster and I need to redesign it.</p>  <p>First option is to write a udf and use group by instead of order by etc. Second and more preferred option is to use cluster by instead of order by. The uncertainty I have here is about the mechanism of batch fetching of the hive client and also the final write of the query result back to hadoop. </p>  <p>If I need to guess, I would guess that after the cluster by ended up with sorted partitions in multiple reducers, the result is somehow (randomly? first to finish first to write? another layer of sorting on top of the sorted partitions?) written to a temporary table and the hive client if fetching blocks from there. My concern is whether the entire write ends before the client start batch fetching, or whether it is greedy and start fetching the moment some data of any reducer is ready. because if the latter is true, then I might fetch a block from one reducer and the next fetch will be from a different reducer which will ruin my "between two fetches" state.</p>  <p>Can someone clear up the missing spots?       </p>