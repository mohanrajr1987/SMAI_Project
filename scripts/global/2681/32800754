<p>I'm running an App Engine app written in Go locally with the development server and hitting the API with requests 1/s with roughly 100k-1MB JSON data.</p>  <p>From time to time the server prints an error trace but still continues to serve requests:</p>  <pre><code>socket.error 41 Traceback (most recent call last):   File "/Users/foo/go_appengine/lib/cherrypy/cherrypy/wsgiserver/wsgiserver2.py", line 1302, in communicate     req.respond()   File "/Users/foo/go_appengine/lib/cherrypy/cherrypy/wsgiserver/wsgiserver2.py", line 831, in respond     self.server.gateway(self).respond()   File "/Users/foo/go_appengine/lib/cherrypy/cherrypy/wsgiserver/wsgiserver2.py", line 2127, in respond     self.write(chunk)   File "/Users/foo/go_appengine/lib/cherrypy/cherrypy/wsgiserver/wsgiserver2.py", line 2188, in write     self.req.write(chunk)   File "/Users/foo/go_appengine/lib/cherrypy/cherrypy/wsgiserver/wsgiserver2.py", line 879, in write     self.conn.wfile.sendall(chunk)   File "/Users/foo/go_appengine/lib/cherrypy/cherrypy/wsgiserver/wsgiserver2.py", line 970, in sendall     bytes_sent = self.send(data)   File "/Users/foo/go_appengine/lib/cherrypy/cherrypy/wsgiserver/wsgiserver2.py", line 977, in send     bytes_sent = self._sock.send(data) error: [Errno 41] Protocol wrong type for socket </code></pre>  <p>The client is in a loop doing:</p>  <pre><code>func call(url string, data []byte) error {     r, err := http.Post(url, "application/json", bytes.NewReader(data))     if err != nil {         return err     }     defer r.Body.Close()     if r.StatusCode != http.StatusCreated {         return fmt.Errorf("unexpected status code %d", r.StatusCode)     }     return nil } </code></pre>  <p>Golang App Engine SDK is now 1.9.26 and I had 1.9.25 before with the same issue.</p>  <p>I have unsuccessfully found anything online that would help me understand the issue.</p>  <p>Does anyone have an idea what this might be caused by? </p>