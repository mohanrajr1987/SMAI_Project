<p>Since im new in java i still have a difficulty to understand the codes. Can someone help me to checking a port scanner with specific range of IP addresses using command line. How can i make sure that the port scan with that IP range. </p>  <p>args[0] and args[1] for IP Address range, while args[2] and args[3] for a port scanner.</p>  <p>Example > java Test 136.186.1.1 5 1 10 The program will check IPâ€™s 136.186.1.1 to 136.186.1.5 on ports 10-20.</p>  <p>Here my code:</p>  <pre><code>import java.util.concurrent.*; import java.util.*; import java.net.*;  public class Test  {   //source http://stackoverflow.com/questions/11547082/fastest-way-to-scan-ports-with-java  public static void usage(String msg)  {     System.out.println("*** " + msg);     System.out.println("Enter a valid IP address 0.0.0.0 thru 255.255.255.255");     System.exit(1); }  public static void checkIp(int a, int b, int c, int d)  {     String ipAddr = String.format("%1$d.%2$d.%3$d.%4$d", a, b, c, d);     System.out.println("Checking " + ipAddr); }  public static void main(String [] args) throws Exception {     final ExecutorService es = Executors.newFixedThreadPool(20);     int bRange = 0; //Declare String called bRange with initial value of 0.     int eRange = 0; //Declare String called eRange with initial value of 0.     final int timeout = 200;      String ipAddr = args[0];      int count = 0, a = 0, b = 0, c = 0, d = 0;      //IP Address range Validation     //------------------------------------------------------------------------------------------     if (args.length != 4)       usage("Wrong number of arguments");      String[] comp = args[0].split("\\.");     if (comp.length != 4)       usage("'" + args[0] + "' does not have four components");      try {       a = Integer.parseInt(comp[0]);     } catch (NumberFormatException e) {       usage("First component of '" + args[0] + "' is not numeric");     }     if (a &lt; 0 || a &gt; 255)       usage("First component of '" + args[0] + "' is out of range");      try {       b = Integer.parseInt(comp[1]);     } catch (NumberFormatException e) {       usage("Second component of '" + args[0] + "' is not numeric");     }     if (b &lt; 0 || b &gt; 255)       usage("First component of '" + args[0] + "' is out of range");      try {       c = Integer.parseInt(comp[2]);     } catch (NumberFormatException e) {       usage("Third component of '" + args[0] + "' is not numeric");     }     if (c &lt; 0 || c &gt; 255)       usage("First component of '" + args[0] + "' is out of range");      try {       d = Integer.parseInt(comp[3]);     } catch (NumberFormatException e) {       usage("Fourth component of '" + args[0] + "' is not numeric");     }     if (b &lt; 0 || d &gt; 255)       usage("First component of '" + args[0] + "' is out of range");      try {       count = Integer.parseInt(args[1]);     } catch (NumberFormatException e) {       usage("Count of '" + args[1] + "' is not numeric");     }      while (count-- &gt; 0)      {       checkIp(a, b, c, d);       if (++d == 256) {         d = 0;         if (++c == 256) {           c = 0;           if (++b == 256) {             b = 0;             if (++a == 256) {               a = 0;             }           }         }       }     }      //-------------------------------------------------------------------------------------------------      try     {                bRange = Integer.parseInt(args[2]); //Assign value of second argument to bRange.         eRange = Integer.parseInt(args[3]); //Assign value of third argument to eRange.     }     catch(NumberFormatException E) //If user enter invalid data.     {         System.out.println("You did not enter a valid number for arguments 2 and 3. Please try again with valid Integers.");         System.exit(0);     }      boolean fcheck = true; //DEBUG ONLY CAN DELETE     final List&lt;Future&lt;Boolean&gt;&gt; futures = new ArrayList&lt;&gt;();       ArrayList&lt;Integer&gt; portRange = new ArrayList&lt;Integer&gt;((eRange - bRange)); //Declare an ArrayList of Integer values called portRange and set its initial size.      //For loop to randomize scans.     for(int port = bRange; port &lt;= eRange; port++)      {         portRange.add(port);          //Use ArrayList of portRange and shuffle to go through each port number once.         Collections.shuffle(portRange); //Shuffle portRange.          int size = portRange.size(); //Declare Integer called size and assign value of portRange ArrayList size value.         int randPort = portRange.get(size-1); //Assign the last index of portRange ArrayList to Integer variable randPort.          System.out.println(randPort); //Show all the ports          //int randTimeout = randInt(30, 2000); //Assign random value to randTimeout by running method randInt(). PartD          futures.add(portIsOpen(es, ipAddr, randPort, timeout));         //System.out.println("Timeout: " + randTimeout + "ms"); //DEBUG ONLY. BEST TO KEEP IT TO SHOW TUTOR          portRange.remove(size - 1); //Remove last element in portRange ArrayList.     }      es.shutdown(); //Tell the executor service that it can't accept new tasks, but the already submitted tasks continue to run.     int openPorts = 0; //Declare Integer called openPorts and assign value of 0.       for(final Future&lt;Boolean&gt; f : futures)     {         if(f.get())          {             openPorts++;         }     }     System.out.println("There are " + openPorts + " open ports on host " + ipAddr + " to " + ipAddr + " probed with a timeout of " + timeout + "ms");     //Print statement show how many ports open based on the particular IP Address and the timeout. }   /** * @param es ExecutorService * @param ip IP address. * @param port Port number. * @param timeout Timeout value in ms. * @return int Returns the random number chosen. */  public static Future&lt;Boolean&gt; portIsOpen(final ExecutorService es, final String ipAddr, final int port, final int timeout) {     return es.submit(new Callable&lt;Boolean&gt;()      {         @Override public Boolean call()         {             try //Try block, each time the For loop increments the Try block gets invoked.             {                 Socket socket = new Socket(); //The Try block creates an instance of the Socket Class.                 socket.connect(new InetSocketAddress(ipAddr, port), timeout); //Create a stream socket and connects it to specified port number at the specified IP Address.                 socket.close(); //Close the socket connection.                 System.out.println("open port found " + port); //Result show how many ports are open.                 return true;             }             catch (Exception ex)              {                 return false;             }         }     }); } } </code></pre>