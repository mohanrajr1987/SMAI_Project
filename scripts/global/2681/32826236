<p>I've tried all kinds of methods to handle network connectability issues in our android app to no avail. There are still many occasions when the app crashes due to loss of network. The current method I'm using is as follows (code snippets below the desc). Does anyone have any ideas?</p>  <p><strong>Service Class</strong> - I'm using a <code>Service</code> to perform all API calls from the app. Before each API call I check for network availability. If non is available then I broadcast and return.</p>  <p><strong>BaseActivity class</strong> - All the Activities in the app extend this <code>Activity</code>. Here I catch the broadcast of connection issue and display a <code>Dialog</code>.</p>  <p><strong>3rd party code accessing the network</strong> - The app uses a few 3rd party programs such as parse, mixed panel and crashlytics. Before using any of these I also check for network availability and send a broadcast in the same way.</p>  <p><strong>Service Class</strong></p>  <pre><code>// Check if network is available private boolean haveNetworkConnection(Intent intent) {     boolean haveConnectedWifi = false;     boolean haveConnectedMobile = false;      ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);     NetworkInfo[] netInfo = cm.getAllNetworkInfo();     for (NetworkInfo ni : netInfo) {         if (ni.getTypeName().equalsIgnoreCase("WIFI"))             if (ni.isConnected())                 haveConnectedWifi = true;         if (ni.getTypeName().equalsIgnoreCase("MOBILE"))             if (ni.isConnected())                 haveConnectedMobile = true;     }     if(!haveConnectedMobile &amp;&amp; !haveConnectedWifi )     {         Intent connectionIssueIntent = new Intent();         connectionIssueIntent.setAction(ACTION_CONNECTION_ISSUE);         connectionIssueIntent.putExtra(KEY_INTENT_OBJECT, intent);         mLocalBroadcastManager.sendBroadcast(connectionIssueIntent);          Log.d(TAG,"no Internet Connection-failed action="+intent.getAction());     }      return haveConnectedWifi || haveConnectedMobile; } // Example for a an API service call. before the call I check for network availability using the method above private void handleActionCreatePlayer(Intent intent) {     if(!haveNetworkConnection(intent)) {         return;     }     else {         Player playerToCreate = (Player) intent.getSerializableExtra(KEY_PLAYER_OBJECT);          Player newPlayer = mService.createPlayer(playerToCreate);         Log.d(TAG, "player tournamentId =" + newPlayer.id + " name=" + newPlayer.name);         intent.putExtra(KEY_PLAYER_OBJECT, newPlayer);         mLocalBroadcastManager.sendBroadcast(intent);     } } </code></pre>  <p><strong>BaseActivity Class</strong></p>  <pre><code>// Receives the broadcast of the network issue public class GenericReceiver extends BroadcastReceiver{     // TODO: make it a weak reference     private BaseActivity mActivity;      public GenericReceiver(BaseActivity activity){         mActivity = activity;     }      @Override     public void onReceive(Context context, Intent intent) {         Log.d(TAG, "in on receive, action="+ intent.getAction());         switch (intent.getAction()) {  case TriviaService.ACTION_CONNECTION_ISSUE:                 Intent recIntent = (Intent) intent.getParcelableExtra(TriviaService.KEY_INTENT_OBJECT);                 Log.d(TAG, "in connection issue, action is=" + recIntent.getAction());                 if(noConnectionDialogShowing==false) {                     handleNetworkNotAvailable(BaseActivity.this);                 }                 break;         }         mActivity.onServiceReceived(intent, intent.getExtras(), intent.getAction());     }      public void destroy(){         mActivity = null;     } } //Handles the display of an alert dialog in case network is not available. public  void handleNetworkNotAvailable(final Activity callerActivity) {     noConnectionDialogShowing=true;      new Handler(Looper.getMainLooper()).post(new Runnable() {         @Override         public void run() {             Log.d("UI thread", "I am the UI thread");             mDialogBuilder = new AlertDialog.Builder(BaseActivity.this)                     .setTitle("????? ???????? ???? ???? ???")                     .setMessage("??? ????? ?? ???? ????? ???? ???????? ???? ????")                     .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {                         public void onClick(DialogInterface dialog, int which) {                             noConnectionDialogShowing=false;                             startActivity(getIntent());                             dialog.dismiss();                             finish();                         }                     })                     .setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {                         public void onClick(DialogInterface dialog, int which) {                             noConnectionDialogShowing=false;                             dialog.dismiss();                             finish();                         }                     })                     .setIcon(android.R.drawable.ic_dialog_alert)                     .show();         }     }); } </code></pre>