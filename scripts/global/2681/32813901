<p>gcc compilers allows to declare some as:</p>  <pre><code>struct Msg : public BaseMsg // BaseMsg could contain the message code and common stuff to all the diferent messages frames {   // some class state stuff whose layout must be contiguous    size_t len;     // length of variable data   char buffer[0]; // here one could put data of variable size }; </code></pre>  <p>In the past, I have used this style in order to manage messages frames. For example, I could do:</p>  <pre><code>Msg * msg = (Msg*) malloc(sizeof(Msg) + additional_length); memcpy(msg-&gt;buffer, /* some src addr for additional data */, additional_length); </code></pre>  <p>In this way, I could put the constant message state and some additional data contiguous to the whole message, whose size often is variable, in a object of type <code>Msg</code>. Then I perform sending/receive once. </p>  <p>It is not a trivial technique, but in my modest experience is more concise, clear and efficient way than other alternatives (sending two separated messages and or to do more casting tricks).</p>  <p>Well, my interest is then to ask whether there are more efficient techniques or even if there is already a design pattern or library that simplifies the solution of such problems.</p>  <p>Thanks in advance for your attention</p>