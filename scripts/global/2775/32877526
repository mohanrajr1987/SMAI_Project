<p>I have an injectable provider that may or may return null.  I am getting an exception when it is null.  I registered the provider as a Singleton, can I possibly register it as a type of SingletonContext that I customize to return true for supportsNullCreation()?  I think if I can do that then even if findOrCreate() returns null, my code will still run which is what I want.</p>  <pre><code>@ApplicationPath("rest") public class MyApplication extends ResourceConfig  {     public MyApplication()     {         ...     // Provider of DB     this.register( new AbstractBinder()     {        @Override        public void configure()        {  bindFactory(DbManager.class).to(EntityManagerFactory.class).in(Singleton.class);        }     }); } </code></pre>  <p>Then it is used like this:</p>  <pre><code>@Singleton @Path("myservice") public class WebServiceClass {    // NOTE: Right now I have to comment this to run without a DB    @Inject    private EntityManagerFactory entityManagerFactory = null;    ... </code></pre>  <p>The exception I get is this...</p>  <pre><code>java.lang.IllegalStateException: Context   org.jvnet.hk2.internal.SingletonContext@6cae5847 findOrCreate returned a null for  descriptor SystemDescriptor(     implementation=com.db.DbManager     contracts={javax.persistence.EntityManagerFactory}     scope=javax.inject.Singleton     qualifiers={}     descriptorType=PROVIDE_METHOD     descriptorVisibility=NORMAL     metadata=     rank=0     loader=org.glassfish.hk2.utilities.binding.AbstractBinder$2@7050f2b1     proxiable=null     proxyForSameScope=null     analysisName=null     id=145     locatorId=0     identityHashCode=863132354     reified=true)     at org.jvnet.hk2.internal.Utilities.createService(Utilities.java:2075) ... </code></pre>