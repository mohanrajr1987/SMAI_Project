<p>Depending on whether the app runs on an iPhone or iPad, I'd like to inject a different UIViewController, both of which implement a certain protocol. I use multiple storyboards, so I have created this factory definition for Typhoon:</p>  <pre><code>- (id &lt;DrawerProtocol&gt;)drawerProtocol {   return [TyphoonDefinition     withFactory:self.storyboardAssembly.mainStoryboard     selector:@selector(instantiateViewControllerWithIdentifier:)     parameters:^(TyphoonMethod *factoryMethod) {       if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {         [factoryMethod injectParameterWith:StoryboardIdentifierDrawerIPhone];       }       else {         [factoryMethod injectParameterWith:StoryboardIdentifierDrawerIPad];       }     }     configuration:^(TyphoonFactoryDefinition *definition) {       definition.classOrProtocolForAutoInjection = object_getClass(@protocol(DrawerProtocol));       // Also tried:       // definition.classOrProtocolForAutoInjection = @protocol(DrawerProtocol);     }]; } </code></pre>  <p>StoryboardAssembly provides references to all of my storyboards like shown in <a href="http://stackoverflow.com/a/24227246/5375652" title="this answer">this answer</a>.</p>  <p>When using auto-injection for UIViewControllers, I found that I have to set <code>definition.classOrProtocolForAutoInjection</code> in order for Typhoon to find the correct factory. However, I cannot figure out how to set this variable when injecting a protocol.</p>  <p>Assigning <code>object_getClass(@protocol(DrawerProtocol))</code> produces the following exception: <code>'NSInvalidArgumentException', reason: 'No components defined which satisify type: 'id&lt;DrawerProtocol&gt;''</code>. When assigning <code>@protocol(DrawerProtocol)</code>, this happens: <code>'NSInvalidArgumentException', reason: '-[Protocol isSubclassOfClass:]: unrecognized selector sent to instance</code>.</p>  <p>How can I auto-inject a protocol instantiated using a factory?</p>