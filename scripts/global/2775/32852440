<p>I am learning dependency injection and using autofac for the first time. I built the container as mentioned in several autofac examples (see below) and called from my application_start</p>  <pre><code>public class ContainerConfig {     public static void RegisterContainer()         {            //Create a new ContainerBuilder            var builder = new ContainerBuilder();             // Register all the controllers using the assembly object            builder.RegisterControllers(Assembly.GetExecutingAssembly());             //Registering default convention -- IExample and Example            builder.RegisterAssemblyTypes(Assembly.GetExecutingAssembly())                   .Where(t =&gt; t.Name.Single(i =&gt; i.Name == "I" + t.Name))                   .AsImplementedInterfaces();             //Build the container            var container = builder.Build();             //Set the default resolver to use Autofac            DependencyResolver.SetResolver(new AutofacDependencyResolver(container));         } } </code></pre>  <p>I created UserService in my Core project with IUserService. This has methods to make dbcall to get user information from tables. In my UI project, i have a class called UserProvider to which i am tying to inject UserService. </p>  <pre><code>public class UserProvider {     private readonly IUserService _userService;      public UserProvider(IUserService userService)      {         _userService = userService;     }      public void LoadCurrentUser()     {         Users FoundUser = _userService.ImportOrGetUser();          if (FoundUser != null)         {             //add it to session             CurrentUser = FoundUser;         }     } } </code></pre>  <p>This UserProvider, i am using in my session_start</p>  <pre><code>void Session_OnStart() {      UserProvider OUsrPrv = new UserProvider(new UserService());      OUsrPrv.LoadCurrentUser(); } </code></pre>  <p>In the above code, if i am passing 'new UserService()', my understanding is i am injecting UserService manually. I dont see how autofac is helping here. All the examples in google are talking about Dependency injection in MVCController or WebApiController, not in a individual class (UserProvider) like i am doing.</p>  <p>Can somebody please throw some light? Am I doing it all wrong?</p>