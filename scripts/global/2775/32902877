<p>Not sure the title is clear but what I actually have is :</p>  <p>module : </p>  <pre><code>@Module public class TestUserModule {      User user;      public TestUserModule(User user) {         this.user = user;     }      @Provides     @Singleton     public User providesUser() {         return user;     } } </code></pre>  <p>Component :</p>  <pre><code>@Singleton @Component(modules = {TestUserModule.class}) public interface UserComponent {      void inject(MyActivity activity);     void inject(MyActivity2 activity); } </code></pre>  <p>in my App I create the component like this : </p>  <pre><code>userComponent = DaggerUserComponent.builder().testUserModule(new TestUserModule(user)).build(); </code></pre>  <p>So, in my activity everything is ok, I can use <code>@Inject User user;</code> it works fine.</p>  <p>Now in my Activity, if I create an Object Foo, which look like this : </p>  <pre><code>public class Foo {  @Inject User user;  MyActivity activity;  public Foo(MyActivity activity){ this.activity = activity; } }  </code></pre>  <p>By instantiating Foo in my activity with <code>new Foo()</code>, I know my user will not be injected.</p>  <p>So my question is, what I have to update in my code to be able to inject Foo object in my activity (I think this is the way to do if I want to inject User in Foo but tell me if I'm wrong) ?</p>  <p>Also, where is a good place to build my component ? Everything in the App ??</p>  <p>Thank's </p>