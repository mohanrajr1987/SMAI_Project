<p>Im interested what is the proper manner to construct object with dependencies which themselves have @Assisted params. An example will better illustrate:</p>  <p>Ordinarilly with dependencies that do not have <code>@Assisted</code> params you can simply have a complex heirarchy of objects which all have their dependencies and these get injected no problem, I can just get an instance of an object and all its dependencies will be generated and injected without me having to do anything.</p>  <p>But if I wanted to change it so some of the dependencies in the object hierarchy have <code>@Assisted</code> params then I have to create those instances myself using a factory ie:</p>  <pre><code>public SomeConcreteService(@Assisted String string) {     this.string = string; }  MyFactory myFactory = injector.getInstance(MyFactory .class); SomeService myService = factory.getMyService("some string"); </code></pre>  <p>This would cause problems for the clean instantiation of the objects because I would have to manually create those instances. and pass them into the required object, which essentially renders the DI for that object redundant I think???? ie I would then need to use the <code>new</code> keyword and pass in all dependencies manually...</p>  <pre><code>new MyComplexObject(myService, myOtherService) </code></pre>  <p>How do I make it so that I don't have to manually build the object graph if one or more of the dependencies uses <code>@Assisted</code> parameters?</p>