<p>I am using Unity (DI) to inject my registration service into my controller. </p>  <p><strong>Controller</strong></p>  <pre><code>public class RenewalController : Controller {     private readonly IRegistrationService _registrationService;     private readonly IRenewalTypedFactory _renewalFactory;      public RenewalController(IRegistrationService registrationService, IRenewalTypedFactory renewalFactory)     {         _renewalFactory = renewalFactory;         _registrationService = registrationService;     }      // GET: Renewal     public ActionResult Renew()     {         return View();     } </code></pre>  <p><strong>Unity Config</strong></p>  <pre><code>container.RegisterType&lt;IRegistrationService, RegistrationService&gt;(new PerRequestLifetimeManager()); </code></pre>  <p>There was already a Registration service however I have now had to create a Renewal service class which is overriding a method.</p>  <pre><code>public class RenewalService : RegistrationService, IRegistrationService {    ... } </code></pre>  <p><strong>How do I tell my Unity config to inject in my Renewal Service for my <code>IRegistrationService</code>, only when my controller is asking for it?</strong></p>  <p>I know in Ninject you would do something like:</p>  <pre><code>.WhenInjectedInTo(typeof(RenewalController)); </code></pre>  <p>And I have read this question, but cannot get my head around it, or apply it to my example:</p>  <p><a href="http://stackoverflow.com/questions/5004306/how-to-conditionaly-bind-a-instance-depending-on-the-injected-type-using-unity">How to conditionaly bind a instance depending on the injected type using unity?</a></p>