<p>I have the following Classes implementing LogWriter Interface(</p>  <blockquote>   <p>all are custom classes with these names not the standard java package   classes</p> </blockquote>  <p>) inside package com.springprogramming.spring.test.model</p>  <pre><code>@Component public class ConsoleWriter implements LogWriter{      public void write(String st){     System.out.println("in Console writer "+st); } }  @Component("fileWriter") public class FileWriter implements LogWriter{     public void write(String st){     System.out.println("in Console writer "+st); } }  public interface LogWriter {  public  void write(String st); }  @Component </code></pre>  <p>public class Logger {</p>  <pre><code>private ConsoleWriter consoleWriter;  private LogWriter fileWriter;   @Inject public void setConsoleWriter(ConsoleWriter consoleWriter) {     this.consoleWriter = consoleWriter; }  @Inject @Named(value="fileWriter") public void setFileWriter(LogWriter fileWriter) {     this.fileWriter = fileWriter; }  public void writeFile(String text){     fileWriter.write(text); }   public void writeConsole(String text){     if(consoleWriter!=null)         consoleWriter.write(text); }  @PostConstruct public void init(){     System.out.println("init"); }  @PreDestroy public void destroy(){     System.out.println("destroy"); } } </code></pre>  <p>I am trying to skip the bean defined in my spring config xml file(app-config.xml), thus using component scan inside my base package:</p>  <pre><code>&lt;context:annotation-config&gt;&lt;/context:annotation-config&gt; &lt;context:component-scan     base-package="com.springprogramming.spring.test.model"&gt; &lt;/context:component-scan&gt; </code></pre>  <p></p>  <p>Now in my main class (App3.java) </p>  <pre><code>    public static void main(String[] args) {     ApplicationContext context = new ClassPathXmlApplicationContext("/com/springprogramming/spring/test/beans/app-config.xml");      Logger logger = (Logger)context.getBean("logger");     logger.writeConsole("HI ");     logger.writeFile("Hello");      ((ClassPathXmlApplicationContext)context).close();  } </code></pre>  <p>When I run this program , i am getting  error (when I use @Named with @Inject over my setFileWriter method ,i get following exception. If I remove @Named annotation , it executes fine</p>  <blockquote>   <p>org.springframework.beans.factory.NoSuchBeanDefinitionException: No   qualifying bean of type   [com.springprogramming.spring.test.model.LogWriter] found for   dependency: expected at least 1 bean which qualifies as autowire   candidate for this dependency.</p> </blockquote>  <p>What's wrong with this program? Thanks in advance.</p>