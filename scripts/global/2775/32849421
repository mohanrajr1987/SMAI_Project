<p>I have a project organized in a way similar to below in Android studio:</p>  <ul> <li><code>:lib_commons</code></li> <li><code>:module_auth</code></li> <li><code>:app_demo</code></li> </ul>  <p><code>lib_commons</code> and <code>module_auth</code> are basically Android library projects.  <code>module_auth</code> is meant to be an independent, pluggable module to be attached to a couple of apps in the project. It contains an activity and a couple of fragments with injectable fields. Since Android would be in charge of managing these activities&amp;fragments, I would have to inject the fields manually, something like <code>daggerComponent.inject(this)</code> in the activity</p>  <p>The application component, as well as other relevant modules currently reside in the various apps in the project (e.g app_demo), all to be instantiated by an Application subclass in the corresponding app. This means I won't have access to the application component from <code>module_auth</code>, as a result, making injection impossible. I have tried moving the dagger component to commons, but that would require it having a knowledge of all possible injection points, which would  be impossible since commons generally has no idea of the existence of any of these apps.</p>  <h3>The question</h3>  <p>What is a possible clean approach to organise the project such that I can access the application component from this module? Keeping in mind that the component would actually be instantiated in the <code>app_demo</code>'s Application object</p>  <p>In dagger 1, I could easily place the object graph in commons, and call <code>graph.inject(this)</code> from any registered class in the project. I would only have to load corresponding dagger modules separately for each app. I could create an abstract Application in commons containing an abstract <code>getModules</code> method which would then be implemented in the apps. However the object graph is still the same one, and injection is pretty straight forward.</p>  <p>How do I acheive this in dagger 2?</p>  <p>Kindly advise. Thanks.</p>