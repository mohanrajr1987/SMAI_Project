<p>Using Simple Injector, I'm trying to register an <code>IEnumerable</code> of non generic <code>ICommandHandler</code>. This will be a collection of objects that decorate all instances of my generic <code>ICommandHandler</code>s. The essential code is provided below. My <code>CommandService</code> is the type that depends on the <code>IEnumerable</code> of <code>ICommandHandler</code>.</p>  <p>How do I register this in my composition root?</p>  <pre><code>public interface ICommandHandler {     Type CommandType { get; }     void Handle(object command); }  public interface ICommandHandler&lt;in TCommand&gt;     where TCommand : ICommand {     void Handle(TCommand command); }  public class WeaklyTypedCommandHandler&lt;TCommand&gt; : ICommandHandler,     ICommandHandler&lt;TCommand&gt;     where TCommand : ICommand {     private readonly ICommandHandler&lt;TCommand&gt; _commandHandler;      public WeaklyTypedCommandHandler(ICommandHandler&lt;TCommand&gt; commandHandler) {         _commandHandler = commandHandler;     }      public Type CommandType { get { return typeof (TCommand); } }      public void Handle(object command) {         _commandHandler.Handle((TCommand)command);     }      public void Handle(TCommand command) {         _commandHandler.Handle(command);     } } </code></pre>  <p>My <code>CommandService</code>:</p>  <pre><code>public class CommandService : ICommandService {     private readonly IEnumerable&lt;ICommandHandler&gt; _commandHandlers;      private readonly ISerializationFormatter _formatter;      public CommandService(IEnumerable&lt;ICommandHandler&gt; commandHandlers,         ISerializationFormatter formatter)     {         _commandHandlers = commandHandlers;         _formatter = formatter;     }      public void Execute(string command)     {         if (command == null)             throw new ArgumentNullException("command");          var request = _formatter.Deserialize&lt;CommandRequest&gt;(command);          var handler = _commandHandlers             .Single(x =&gt; x.CommandType == request.Command.GetType());          handler.Handle(request.Command);     } }  private void ConfigureContainer(Container container) {     container.Register(typeof(ICommandHandler&lt;&gt;),new[] { typeof(BusinessLayer).Assembly });      container.RegisterDecorator(typeof(ICommandHandler&lt;&gt;),         typeof(WeaklyTypedCommandHandler&lt;&gt;));      //container.RegisterCollection&lt;ICommandHandler&gt;???? } </code></pre>