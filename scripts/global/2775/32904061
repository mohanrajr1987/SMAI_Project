<p>I am trying to use Dagger 2 for instantiating a Retrofit interface. The <code>CloudContactDataStore</code> class injects the <code>RestClient</code> and calls its methods.</p>  <p>When I instantiate a <code>CloudContactDataStore</code> object, its <code>RestClient</code> attribute has <code>null</code> value.</p>  <pre><code>public class CloudContactDataStore implements ContactDataStore {      @Inject RestClient restClient;      public CloudContactDataStore() {         this.initializeInjector();     }      private void initializeInjector() {         DaggerApiComponent.builder()                 .apiModule(new ApiModule())                 .build()                 .inject(this);     }      @Override     public Observable&lt;ContactEntity&gt; contactLogin(String contactId) {         return this.restClient.contactLogin(contactId); // Here restClient is null!     } } </code></pre>  <p>Here is how I create the Dagger Module and Component:</p>  <pre><code>@Singleton @Component(modules = ApiModule.class) public interface ApiComponent {     void inject(ContactDataStore contactDataStore); }  @Module public class ApiModule {      @Provides public RestClient provideRestClient(ApiService apiService) {         return new RestClientImpl(apiService);     }      @Provides public ApiService provideApiService(RestAdapter restAdapter) {         return restAdapter.create(ApiService.class);     }      @Provides public RestAdapter provideRestAdapter() {         return RestApiAdapter.getInstance();     } } </code></pre>  <p>Now, the <code>RestClient</code> class and its implementation:</p>  <pre><code>public interface RestClient {     Observable&lt;ContactEntity&gt; contactLogin(String contactId); }  public class RestClientImpl implements RestClient {      ApiService apiService;      @Inject     public RestClientImpl(ApiService apiService) {         this.apiService = apiService;     }      @Override     public Observable&lt;ContactEntity&gt; contactLogin(String contactId) {         return apiService.login(contactId, "xxx-xxx-xxx");     } } </code></pre>  <p>The <code>ApiService</code> interface is the Retrofit interface:</p>  <pre><code>public interface ApiService {      String API_BASE_URL = "http://192.168.1.2";      @POST("/login")     Observable&lt;ContactEntity&gt; login(@Body String id, @Header("Key") String key);  } </code></pre>  <p>And finally, the <code>RestApiAdapter</code>:</p>  <pre><code>public class RestApiAdapter {      private static RestAdapter sharedInstance = null;      public static RestAdapter getInstance() {         if (sharedInstance == null){               sharedInstance = new RestAdapter.Builder()                     .setLogLevel(RestAdapter.LogLevel.FULL)                     .setEndpoint(ApiService.API_BASE_URL)                     .build();         }          return sharedInstance;     } } </code></pre>  <p>Can anyone see what I am doing wrong?</p>  <p>Thanks!</p>