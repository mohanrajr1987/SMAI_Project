<p>First: I'm aware that Angular2 is in alpha and changing frequently.</p>  <p>I'm working with Angular2. There is an injectable service with <em>http</em> dependency that I'd like to test using a mock backend. The service works when the app starts but I'm having no luck writing the test and getting the mock backend to respond. Any insight, is there something obvious in the test setup or implementation that I'm missing?</p>  <p>service/core.ts:</p>  <pre><code>import { Injectable } from 'angular2/angular2'; import { Http } from 'angular2/http';  @Injectable() export class CoreService {      constructor(public http:Http) {}      getStatus() {         return this.http.get('/api/status')             .toRx()             .map(res =&gt; res.json());     } } </code></pre>  <p>service/core_spec.ts:</p>  <pre><code>import {     AsyncTestCompleter,     TestComponentBuilder,     By,     beforeEach,     ddescribe,     describe,     el,     expect,     iit,     inject,     it,     xit } from 'angular2/test'; import { MockBackend, MockConnection, BaseRequestOptions, Http, Response } from 'angular2/http'; import { Injector, bind } from 'angular2/angular2'; import { ObservableWrapper } from 'angular2/src/core/facade/async'  import { CoreService } from 'public/services/core'  export function main() {      describe('public/services/core', () =&gt; {          let backend: MockBackend;         let response: Response;         let coreService: CoreService;         let injector: Injector;          afterEach(() =&gt; backend.verifyNoPendingRequests());          it('should get status', inject([AsyncTestCompleter], (async) =&gt; {              injector = Injector.resolveAndCreate([                 BaseRequestOptions,                 MockBackend,                 bind(Http).toFactory((backend, options) =&gt; {                     return new Http(backend, options)                 }, [MockBackend, BaseRequestOptions]),                 bind(CoreService).toFactory((http) =&gt; {                     return new CoreService(http);                 }, [Http])             ]);              backend = injector.get(MockBackend);             coreService = injector.get(CoreService);             response = new Response('foo');              ObservableWrapper.subscribe&lt;MockConnection&gt;(backend.connections, c =&gt; {                 expect(c.request.url).toBe('/api/status');                 c.mockRespond(response);             });              // attempt #1: fails because res argument is undefined             coreService.getStatus().subscribe(res =&gt; {                 expect(res).toBe('');                 async.done();             });              // attempt #2: fails because emitter.observer is not a function             ObservableWrapper.subscribe(coreService.getStatus(), res =&gt; {                 expect(res).toBe('');                 async.done();             });          }));     });  } </code></pre>  <p>Related: <a href="https://github.com/angular/angular/issues/3502" rel="nofollow">https://github.com/angular/angular/issues/3502</a> <a href="https://github.com/angular/angular/issues/3530" rel="nofollow">https://github.com/angular/angular/issues/3530</a></p>