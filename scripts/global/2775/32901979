<p>I have a few services, one, which has some variables that I need, is injected in two services, and these two are injected into another service, and I need to use a parameter from config.yml which is passed in the bottom one's constructor, into the last service.</p>  <pre><code>vb_logger:     class: BlotBundle\VBLogger\VBLogger     arguments: ["@vb_members_module","@vb_posts_module"] vb_forum_functions:     class: BlotBundle\VBLogger\VBForumFunctions     arguments: [%website%, %username%, %password%] vb_members_module:     class: BlotBundle\VBLogger\modules\Module_members     arguments: [@vb_forum_functions] vb_posts_module:     class: BlotBundle\VBLogger\modules\Module_posts     arguments: [@vb_forum_functions] </code></pre>  <p>Here are my services. As you can see, I'm injecting <strong>%website%, %username%, %password%</strong> in <strong>vb_forum_functions</strong> and I need to access them in <strong>vb_logger</strong>. <strong>vb_forum_functions</strong> is injected in both <strong>vb_members_module</strong> and <strong>vb_posts_module</strong>. Then, I inject these two in <strong>vb_logger</strong></p>  <p>To access my variables in <strong>vb_logger</strong> I need to create methods in <strong>vb_forum_functions</strong> that returns them, and then do something like</p>  <pre><code>public function __construct(Module_members $module_members, Module_posts $module_posts) {     $this-&gt;vbff = $module_members-&gt;getVbff();      $this-&gt;module_members = $module_members;     $this-&gt;module_posts = $module_posts; } </code></pre>  <p>And in <strong>Module_members</strong> create a method that retrieves <strong>vb_forum_functions</strong> to which my variables were injected in.</p>  <pre><code>protected $vbff;  public function __construct(VBForumFunctions $vbff) {     $this-&gt;vbff = $vbff; }  public function getVbff() {     return  $this-&gt;vbff; } </code></pre>  <p>Finally, in <strong>vb_logger</strong> I can get my variables like so:</p>  <pre><code> $this-&gt;password= $module_members-&gt;getVbff()-&gt;getPassword(); </code></pre>  <p>This sounds like a lot of work and bonus methods, but makes a bit more sense than to inject parameters again directly into the service, especially because they are already injected through both the two modules classes, that have <strong>vb_forum_functions</strong> injected into them, which already has the variables.</p>  <p>The alternative is</p>  <pre><code>vb_logger:     class: BlotBundle\VBLogger\VBLogger     arguments: ["@vb_members_module","@vb_posts_module",%website%, %username%, %password%] vb_forum_functions:     class: BlotBundle\VBLogger\VBForumFunctions     arguments: [%website%, %username%, %password%] </code></pre>  <p>But again, the variables are already available two levels below, is it worth injecting them again?</p>  <p>Also, if <strong>vb_logger</strong> doesn't use my modules then, haven't I injected them in an improper manner? Because they also create a <strong>vb_forum_functions</strong> object each themselves, which will also be useless because it isn't used, in the case I use only one module. Even so, I can access this object through one of the modules, so the other doesn't have to inject it in <strong>vb_logger</strong>.</p>  <p>In short:</p>  <ol> <li><p>How to access a service's variables(vb_forum_functions) into a service(vb_logger) into which is injected two other services(the two modules) that each have vb_forum_functions injected into?</p></li> <li><p>How to make it so that only the module used in <strong>vb_logger</strong> is     instantiated, to avoid the other one that also creates a pointless     <strong>vb_forum_functions</strong> object himself.</p></li> </ol>