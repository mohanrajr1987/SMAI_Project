<p><strong>This is my UnityResolver Class to create the instance of IUnityContainer</strong></p>  <pre><code>public sealed class UnityResolver  {     private static IUnityContainer _unityContainer;     private static volatile UnityResolver _unityresolverinstance;     private static object syncRoot = new Object();     public  static IUnityContainer UnityContainerInitiation     {         get         {             if (_unityContainer == null)             {                 if (_unityresolverinstance == null)                 {                     lock (syncRoot)                     {                         if (_unityresolverinstance == null)                             _unityresolverinstance = new UnityResolver();                     }                 }             }             return UnityResolver._unityContainer;         }     }      public UnityResolver()     {         _unityContainer = new UnityContainer();         _unityContainer.RegisterType&lt;MaintainRouteViewModel&gt;();      }  } </code></pre>  <p><strong>Below is my Base View and Its ViewModelCode</strong></p>  <pre><code>   public partial class MaintainRouteView : UserControl     {     public MaintainRouteViewModel maintainRouteViewModel = null;     IUnityContainer container;      public MaintainRouteView()     {         InitializeComponent();         container = UnityResolver.UnityContainerInitiation;         maintainRouteViewModel = container.Resolve&lt;MaintainRouteViewModel&gt;();         this.DataContext = maintainRouteViewModel;     }    ///This button will navigate to the child view.     private void AddRoute_Click(object sender, RoutedEventArgs e)     {         pageAnimationControl.ShowPage(new AddNewRouteView());     } }  </code></pre>  <p>Its ViewModel..</p>  <pre><code>public class MaintainRouteViewModel : viewModelbase {     private string _statusSuccessMessage = null;     private string _statusFailMessage =null;      private ObservableCollection&lt;RouteDetailsModel&gt; _routeDetailsCollection;      public ObservableCollection&lt;RouteDetailsModel&gt; routeDetailsCollection     {         get         {         return this._routeDetailsCollection;         }         set         {         this._routeDetailsCollection =  value;         RaisePropertyChanged("routeDetailsCollection");         }     }     public string StatusSuccessMessage     {         get         {             return _statusSuccessMessage;         }         set         {             _statusSuccessMessage = value;             this.RaisePropertyChanged("StatusSuccessMessage");         }     }     public string StatusFailMessage     {         get { return _statusFailMessage; }         set         {             _statusFailMessage = value;             this.RaisePropertyChanged("StatusFailMessage");         }     }     public MaintainRouteViewModel()     {          ///it will load some data to the Observablecollection          getAllCurrentRouteData();     }  } </code></pre>  <p><strong>Now Below is my Child View and its ViewModel....</strong></p>  <pre><code>  public partial class AddNewRouteView : UserControl {          public AddNewRouteView()     {         InitializeComponent();         IUnityContainer container = UnityResolver.UnityContainerInitiation;         this.DataContext = container.Resolve&lt;AddNewRouteViewModel&gt;();     }  } </code></pre>  <p>Its ViewModel....</p>  <pre><code> public class AddNewRouteViewModel : viewModelbase   {     private MaintainRouteViewModel maintainRouteViewModel;      public ICommand SaveCommand     {         get;         set;    }      [InjectionConstructor]     public AddNewRouteViewModel(MaintainRouteViewModel maintainRouteViewModel)     {        this.maintainRouteViewModel  = maintainRouteViewModel;        SaveCommand = new DelegateCommand&lt;object&gt;((a) =&gt; ValidateNewRoute());      }      private void ValidateNewRoute()     {       bool flag  = saveAndValidate();         if(flag)          {        updateRouteStatus();          }     }      public void updateRouteStatus()           {             maintainRouteViewModel.StatusSuccessMessage = "New Route successfully Added..";            }     } } </code></pre>  <p><strong>Can Anyone Tell me how to use this way to get the same object of MaintainRouteViewModel in my Child VM Constructor So that i will show the Updated Status Message in my Base view MaintainRouteView???</strong></p>  <p><strong>*It will Work Fine</strong> If i replace my <strong><em>MaintainRouteView</em></strong> with below code :</p>  <p>this Is an another approach to use IOC .i previously using this in my project. it Works Fine for me but now i want to implement the same thing using <em>Unity Container</em>. Please Help.</p>  <pre><code>public partial class MaintainRouteView : UserControl {     public MaintainRouteViewModel maintainRouteViewModel = null;      public MaintainRouteView()     {         InitializeComponent();         maintainRouteViewModel = new MaintainRouteViewModel();         this.DataContext = maintainRouteViewModel;     }      private void AddRoute_Click(object sender, RoutedEventArgs e)     {         pageTransitionControl.ShowPage(         new AddNewRouteView         {             DataContext = new AddNewRouteViewModel(maintainRouteViewModel)         });     } } </code></pre>