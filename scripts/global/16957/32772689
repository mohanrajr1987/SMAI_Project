<p>I have the below procedure and I am getting a Object Variable With Block Net Set Debug.  I have reviewed it and just can find how to solve it.  Any suggestions?</p>  <p>It debugs a little over half way down where I put the comment 'The Code Debugs at Do Until rstMaster.EOF.</p>  <p>Your help is much appreciated.</p>  <pre><code>Sub AllocateImmediately() Dim x As Long Dim y As Long Dim z As Long Dim sMonths(1 To 12) As String Dim lAllocation As Long Dim iMonth As Integer Dim iCurrentMonth As Integer Dim sCurrentDLRNumber As String Dim iAlreadyAllocated As Integer Dim j As Integer Dim sDealerID As String Dim iPriorProduction As Integer Dim iAllocation As Integer  'Assign Month names to be used when writing to the master table sMonths(1) = "January" sMonths(2) = "February" sMonths(3) = "March" sMonths(4) = "April" sMonths(5) = "May" sMonths(6) = "June" sMonths(7) = "July" sMonths(8) = "August" sMonths(9) = "September" sMonths(10) = "October" sMonths(11) = "November" sMonths(12) = "December" Dim iTotalProduction As Long Dim iLastMonth As Integer 'Dim iCurrentMonth As Integer 'Dim iLastMonth As Integer  Dim iStartingMonth As Integer Dim rstAllocations As Recordset Dim rstMaster As Recordset  Dim db As DAO.Database Dim tdf As DAO.TableDef Dim Fld As DAO.Field Dim strField As String Dim iProduction As Integer Dim k As Integer Dim o As Integer Dim i As Integer 'Dim iAllocation As Integer Dim sCurrentModel As String Dim sSpec As String Dim sFilter As String Dim sPreviousModel As String Dim sPreviousSpec As String Dim iMonthTry As Integer    If Not IsNull(cboStartingProductionMonth.Value) Then 'check to see starting month was selected.     iStartingMonth = cboStartingProductionMonth.Value      Else     MsgBox "Please use the drop down box and select the starting month.", vbCritical     End End If  Set rstAllocations = CurrentDb.OpenRecordset("select * from Allocations order by [Model Name],[Spec]") 'Loop through allocations table for each model        Do Until rstAllocations.EOF           sCurrentModel = rstAllocations("Model Name")         sSpec = IIf(IsNull(rstAllocations("Spec")) Or rstAllocations("Spec") = "", "", rstAllocations("Spec"))         sFilter = ""          'At the last record         rstAllocations.MoveNext         If rstAllocations.EOF = True Then            rstAllocations.MovePrevious           Else            rstAllocations.MovePrevious         End If           If Not (rstAllocations.EOF) Then            rstAllocations.MoveNext             If rstAllocations.EOF Then                rstAllocations.MovePrevious                'at the last record it is either "CA" or "All" due to sort order.                If sPreviousModel = sCurrentModel And sSpec = "CA" Then sFilter = "CA"                If sFilter &lt;&gt; "" Then GoTo sSQLStatements                GoTo NextTry:            End If              If sCurrentModel = rstAllocations("Model Name") Then sFilter = "AllButCA" 'Going to be a CA model next round            rstAllocations.MovePrevious            If sFilter &lt;&gt; "" Then GoTo sSQLStatements         End If  NextTry:         If Not (rstAllocations.EOF) Then            rstAllocations.MoveNext             If rstAllocations.EOF Then                rstAllocations.MovePrevious                If sPreviousModel &lt;&gt; sCurrentModel And sSpec = "CA" Then sFilter = "CA"                If sFilter &lt;&gt; "" Then GoTo sSQLStatements                GoTo NextTry2:            End If             If sCurrentModel &lt;&gt; rstAllocations("Model Name") And sSpec = "CA" Then sFilter = "CA" 'only a CA model needs to be filtered            rstAllocations.MovePrevious            If sFilter &lt;&gt; "" Then GoTo sSQLStatements         End If  NextTry2:          If Not (rstAllocations.EOF) Then            rstAllocations.MoveNext             If rstAllocations.EOF Then                rstAllocations.MovePrevious                If sPreviousModel &lt;&gt; sCurrentModel And sSpec = "" Then sFilter = "ALL"                If sFilter &lt;&gt; "" Then GoTo sSQLStatements            End If              If sCurrentModel &lt;&gt; rstAllocations("Model Name") And (IsNull(sSpec) Or sSpec = "") Then sFilter = "ALL" 'only a CA model needs to be filtered            rstAllocations.MovePrevious            If sFilter &lt;&gt; "" Then GoTo sSQLStatements         End If  sSQLStatements:         sDealerID = "" 'Reset Dealer         iProduction = 0 'Reset Production         iTotalProduction = 0         k = 0         iMonth = 0            sPreviousModel = sCurrentModel         sPreviousSpec = sSpec        'create recordset based on if the recordset should filter on CA, All states, or All But CA depending on Specs for a particular model.      Select Case UCase(sFilter)        Case "ALL"            Set rstMaster = CurrentDb.OpenRecordset("Select * from tblMaster where [New Model] = " &amp; "'" &amp; rstAllocations("Model Name") &amp; "'" &amp; " AND [Alloc Calculation]&gt;0 order by [Alloc Calculation] desc, [Months Supply Model] ASC")        Case "CA"            Set rstMaster = CurrentDb.OpenRecordset("Select * from tblMaster where [New Model] = " &amp; "'" &amp; rstAllocations("Model Name") &amp; "'" &amp; " AND [Alloc Calculation]&gt;0 and [STATE_NAME] ='CA' order by [Alloc Calculation] desc, [Months Supply Model] ASC")        Case "ALLBUTCA"            Set rstMaster = CurrentDb.OpenRecordset("Select * from tblMaster where [New Model] = " &amp; "'" &amp; rstAllocations("Model Name") &amp; "'" &amp; " AND [Alloc Calculation]&gt;0 and [STATE_NAME] &lt;&gt;'CA' order by [Alloc Calculation] desc, [Months Supply Model] ASC")      End Select           iCurrentMonth = iStartingMonth - 1           'calculate total production in the allocations table for a model for all months.         For o = 1 To 12             iTotalProduction = IIf(IsNull(rstAllocations(sMonths(o))), 0, rstAllocations(sMonths(o))) + iTotalProduction             ''debug.print iTotalProduction, sMonths(o), rstMaster("New Model")         Next o   GetAnotherMonth:         iMonthTry = iMonthTry + 1         '---Handle Months---------------Loops through months         iMonth = iMonth + 1          If iMonth = 13 And rstAllocations.EOF Then           Exit Do          ElseIf iMonth = 13 Then           GoTo kIsOver12:         End If          iCurrentMonth = iCurrentMonth + 1         If iCurrentMonth = 13 Then iCurrentMonth = 1 'Month can be greater than         '---Handle Months---------------          k = iCurrentMonth         'If k &gt; 12 Then GoTo kIsOver12:         iProduction = IIf(IsNull(rstAllocations(sMonths(k))), 0, rstAllocations(sMonths(k))) + iProduction 'add production that can be allocated.          If sDealerID &lt;&gt; "" Then 'move to the previous dealership that recived an allocation and move to the next dealer in line.           rstMaster.MoveFirst           rstMaster.FindFirst "[DLR_NO]= " &amp; "'" &amp; sDealerID &amp; "'"           rstMaster.MoveNext           If rstMaster.EOF Then             rstMaster.MoveFirst '              Else '            rstMaster.MoveNext           End If          End If          'If iProduction = 0 Then GoTo GetAnotherMonth         'The Code Debugs Here         Do Until rstMaster.EOF TryToAllocateAgain:               If iProduction = 0 Then 'production for that month has ran out.                 GoTo GetAnotherMonth:             End If            '--Does Dealer already have his allocated amount?--             iAlreadyAllocated = 0             For j = 1 To 12               iAlreadyAllocated = rstMaster(sMonths(j) &amp; " Allocation") + iAlreadyAllocated              Next j               If iAlreadyAllocated + iNumberPerOrder(i) &gt; rstMaster("Alloc Calculation") Then                ''debug.print iAlreadyAllocated, rstMaster("Alloc Calculation")                GoTo NextRecord 'Only assign upto their alloc calc, don't assign another             End If           '--Does Dealer already have his allocated amount?--               With rstMaster               sDealerID = rstMaster("DLR_No")                For i = 0 To iTotalNumberofModels - 1 'Match Model being assigned with the number per order                  If rstMaster("New Model") = sBaseModel(i) Or rstMaster("New Model") = sLimitedEdition(i) Then                    iAllocation = iNumberPerOrder(i):: Exit For                  End If               Next i                  'remove one from both iProduction and iTotalProduction               iProduction = iProduction - iNumberPerOrder(i)               iTotalProduction = iTotalProduction - iNumberPerOrder(i)                If iProduction &lt; 0 Then 'if that month's production is out, add back to the itotalproduction                  iTotalProduction = iTotalProduction + iNumberPerOrder(i) 'since inumberperorder(i) was subtracted above.                  GoTo GetAnotherMonth               End If                .Edit                rstMaster(sMonths(iCurrentMonth) &amp; " Allocation") = rstMaster(sMonths(iCurrentMonth) &amp; " Allocation") + iNumberPerOrder(i)               .Update  '              If iMonthTry &lt;= 12 And iTotalProduction &gt; 0 Then GoTo GetAnotherMonth 'added to loop through to make sure all months have been allocated '              If iMonthTry &gt;= 12 Then iMonthTry = 0               '.MoveNext             End With  NextRecord:                rstMaster.MoveNext                If iTotalProduction &gt; 0 And rstMaster.EOF And iMonthTry &lt; 12 Then                   sDealerID = ""                   rstMaster.MoveFirst                   GoTo GetAnotherMonth                End If         Loop        'If there are left over models during a month, attempt to allocate them again until the iProduction is equal to production       'meaning no more could be allocated.       If iProduction &gt; 0 And rstMaster.EOF And iPriorProduction &lt;&gt; iProduction Then         iPriorProduction = iProduction         rstMaster.MoveFirst         GoTo TryToAllocateAgain       End If kIsOver12:       ''debug.print rstAllocations("Model Name") &amp; "  " &amp; Trim(Str(iTotalProduction)), iPriorProduction       iPriorProduction = 0       iMonthTry = 0       rstAllocations.MoveNext      Loop   End Sub </code></pre>