<p>So I know two ways to mark variable as unused in C++:</p>  <p><strong>First</strong>( in the function's body )</p>  <pre><code>void func1(int i, int unused) {   (void)unused; //marking 'unused' here    i++; } </code></pre>  <p>and similars</p>  <p><strong>Second</strong> (in the function's arguments list)</p>  <pre><code>void func2(int i, int /* marking 'unused' here */ ) {   i++; } </code></pre>  <p>In my opinion, second one is much better, because it:</p>  <ol> <li>Informs about unused variable on function declaration (no need to see implementation) </li> <li>Makes it impossible to actually use this variable</li> <li>Makes code clearer (that's subjective tho)</li> </ol>  <p>Also, assembly code generated for this two functions is equal (tested with gcc 4.9.2) so it's not about performance trade-offs either.</p>  <p>In view of this, my question is:  why is it so common to use first one?</p>