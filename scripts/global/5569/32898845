<p>I'm new to Scala and have recently just been introduced to how functions work in the language. </p>  <p>I'm trying to calculate phi using a fibonacci function. The two fibonacci functions were easy enough to write (one recursive and one tail-recursive), but I am at a complete loss as to how to proceed.</p>  <p>From my understanding the function golden will use the result of the function fib as a parameter, and then integer n to determine the precision. However despite researching for some time now I'm at a complete loss as to how to accomplish this.</p>  <p>I need to use individual F1 and F2 parameters to calculate phi surely? So should I add more variables to my fib function to do so and calculate during the fibonacci calculation?</p>  <p>That aside, how do I enforce precision to x amount of digits?</p>  <p>Below is the screenshot of what I have so far, I'd greatly appreciate any help you can offer. I'm really struggling to even begin to move forward on this.</p>  <p><a href="http://i.imgur.com/Oms9IhK.png" rel="nofollow">http://i.imgur.com/Oms9IhK.png</a></p>  <pre><code>// Fibonacci Sequence 1  def fib(n: Int): Int = { while(n-1 &gt; 0){ return fib(n - 1) + fib(n - 2) }   return n }  fib(40) assert(fib(40) == 102334155, "Wrong result for fib1(40)!")  // Fibonacci Sequence 2  def fib2(n: Int): Int = {  def tailrec(f1: Int, f2: Int, n: Int): Int = {   if(n != 1) {     tailrec(f2, f2 + f1, n-1)    }      else {        return f2      }   }    return tailrec(0, 1, n)  }   fib2(40)  assert(fib2(40) == 102334155, "Wrong result for fib1(40)!")   // Write a function that returns the Ï† value with at least n digits of precision   def golden(fib: Int =&gt; Int, n: Int): Double = {    return (fib(n) / fib(n+1))  }   golden(fib(_), 40) </code></pre>