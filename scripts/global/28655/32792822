<p>I am using sqlite query to to find a motor with best set of calibration values using a certain formula. In the original query I am ordering the computed column (to select top 1), this I believe slows down my query the most. </p>  <p>I am trying to make this query as fast as possible. Currently execution time is about 0.300 seconds, and I was able to reduce it to 0.150 seconds by restricting table with <code>Volume BETWEEN (0.9*1.7006359100341797) AND (1.1*1.7006359100341797)</code> and by using tempTable to do the sorting of computed table (<code>BestMotor</code>).</p>  <p>What else can I do to improve this more? MotorTable table has ~30,000 rows. Number of distinct MotorVendors is about 55.</p>  <p>Here is my original query: I am trying to find CalX and CalY that are closest to specified volume for each distinct MotorVendor.</p>  <pre><code>SELECT T.MotorVendor, ((1/(CalX)+1/(CalY))) AS BestMotor FROM ( SELECT MotorVendor,        (SELECT CalX         FROM MotorTable AS T2         WHERE MotorType = 'text' and T2.MotorVendor = Tools.MotorVendor         ORDER BY abs(Volume - 1.7006359100341797)         LIMIT 1        ) AS CalX,        (SELECT CalY         FROM MotorTable AS T2         WHERE MotorType = 'text' and T2.MotorVendor = Tools.MotorVendor         ORDER BY abs(Volume - 1.7006359100341797)         LIMIT 1        ) AS CalY FROM (SELECT DISTINCT MotorVendor,       FROM MotorTable) AS Tools) AS T       WHERE T.CalX != '' AND T.CalY != ''       ORDER BY BestMotor DESC       LIMIT 1; </code></pre>  <p>And here is query using tempTable to order the computed column (with index on that computed column in tempTable):</p>  <pre><code>DELETE FROM TempTable; INSERT INTO TempTable SELECT T.MotorVendor, ((1/(CalX)+1/(CalY))) AS BestMotor FROM ( SELECT MotorVendor,        (SELECT CalX         FROM MotorTable AS T2         WHERE MotorType = 'text' and T2.MotorVendor = Tools.MotorVendor AND Volume BETWEEN (0.9*1.7006359100341797) AND (1.1*1.7006359100341797)         ORDER BY abs(Volume - 1.7006359100341797)         LIMIT 1        ) AS CalX,        (SELECT CalX         FROM MotorTable AS T2         WHERE MotorType = 'text' and T2.MotorVendor = Tools.MotorVendor AND Volume BETWEEN (0.9*1.7006359100341797) AND (1.1*1.7006359100341797)         ORDER BY abs(Volume - 1.7006359100341797)         LIMIT 1        ) AS CalX FROM (SELECT DISTINCT MotorVendor,       FROM MotorTable) AS Tools) AS T       WHERE T.CalX != '' AND T.CalY != ''       ORDER BY BestMotor DESC       LIMIT 1; SELECT MotorVendor, BestMotor FROM TempTable ORDER BY BestMotor DESC LIMIT 1; </code></pre>  <p>UPDATE...</p>  <p>I was able to reduce it to 0.05 seconds... I have created a table to store all distinct MotorVendor and change main query to this:</p>  <pre><code>SELECT T.MotorVendor FROM ( SELECT MotorVendor,        (SELECT CalX         FROM MotorTable AS T2         WHERE MotorType = 'text' and T2.MotorVendor = Tools.MotorVendor AND Volume BETWEEN (0.9*1.7006359100341797) AND (1.1*1.7006359100341797)         ORDER BY abs(Volume - 1.7006359100341797)         LIMIT 1        ) AS CalX,        (SELECT CalY         FROM MotorTable AS T3         WHERE MotorType = 'text' and T3.MotorVendor = Tools.MotorVendor AND Volume BETWEEN (0.9*1.7006359100341797) AND (1.1*1.7006359100341797)         ORDER BY abs(Volume - 1.7006359100341797)         LIMIT 1         ) AS CalY        FROM TempMotorVendorTable AS Tools) AS T       ORDER BY ((1/(CalX)+1/(CalY))) DESC LIMIT 1; </code></pre>  <p>Here are schemas of two tables and indexes I have created.</p>  <pre><code>CREATE TABLE MotorTable (     CalY    real,     CalX    real,     Volume  real,     MotorType   text,     MotorVendor text ); CREATE TABLE TempMotorVendorTable (     MotorVendor TEXT ); CREATE INDEX `MotorVendorIndex` ON MotorTable (`MotorVendor` ASC) CREATE INDEX VolumeIndex ON MotorTable (Volume DESC) </code></pre>  <p>Output of EXPLAIN QUERY PLAN</p>  <pre><code>"0" "0" "0" "SCAN TABLE TempMotorVendorTable AS Tools" "0" "1" "1" "SEARCH TABLE MotorTable USING AUTOMATIC COVERING INDEX (MotorVendor=?)" "0" "0" "0" "EXECUTE CORRELATED SCALAR SUBQUERY 1" "1" "0" "0" "SEARCH TABLE MotorTable AS T2 USING INDEX CompToolIndex (MotorVendor=?)" "1" "0" "0" "USE TEMP B-TREE FOR ORDER BY" "0" "0" "0" "EXECUTE CORRELATED SCALAR SUBQUERY 2" "2" "0" "0" "SEARCH TABLE MotorTable AS T3 USING INDEX CompToolIndex (MotorVendor=?)" "2" "0" "0" "USE TEMP B-TREE FOR ORDER BY" "0" "0" "0" "USE TEMP B-TREE FOR ORDER BY" </code></pre>