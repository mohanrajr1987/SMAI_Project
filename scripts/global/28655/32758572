<p>This is a theory question, as I already know the following:</p>  <ol> <li>Hashes are not encryptions</li> <li>Hashes can be broken <a href="https://crackstation.net/" rel="nofollow">https://crackstation.net/</a></li> <li>That my code is not serious enough to be used on an enterprise site</li> </ol>  <p>But my question is just on the theory of it all.</p>  <p>In theory, if I stored a hashed password into a database, how could I check it when a user comes to log in? Is it that simple or is there a standard way to actually store and retrieve passwords in SQLite3? </p>  <p>If you can offer some SQLite3 code or guidance on where to start, that would be appreciated.</p>  <pre><code>import sqlite3  import hashlib  def encrypt_password(password):     encrypted_pass = hashlib.sha1(password.encode('utf-8')).hexdigest()     return encrypted_pass  cemail = input("E: ") cpassword = input("P: ") connection = sqlite3.connect('/Users/Air/Desktop/users.db') connection.create_function('encrypt', 1, encrypt_password) cursor_v = connection.cursor() cursor_v.execute("insert into user (cemail, cpassword) values    (?,encrypt(?))", (cemail, cpassword)) connection.commit() cursor_v.close() </code></pre>