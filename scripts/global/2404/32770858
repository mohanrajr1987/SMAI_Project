<p>I know this topic may have been discussed here regarding making java annotations that have logic functions and do specific actions based on conditions.</p>  <p>One of the famous examples of course  are junit and hibernate.</p>  <p>I have also seen annotations that when you place on an api of a web service controller that it checks the header for authentication token and if the user was not authorized it would return unauthorized and would not even enter this api.</p>  <p>Also i have seen an android library that does most of the normal application logic with annotations: <a href="http://androidannotations.org/" rel="nofollow">http://androidannotations.org/</a>   .</p>  <p>Now all of the tutorials i have seen in the internet regarding this topic don't give clear examples for how to implement it with least code and i find in the end that extra code is written which conflicts with the main purpose of using annotations with logic which is saving time in writing more code.</p>  <p>Take for example in this reference <a href="http://androidannotations.org/" rel="nofollow">http://androidannotations.org/</a></p>  <pre><code>@NoTitle </code></pre>  <p>is equivalent to</p>  <pre><code>requestWindowFeature(Window.FEATURE_NO_TITLE); </code></pre>  <p>in this example they seem just to inject their annotation library , they haven't changed any other thing or added any extra code like for example changing the base class which is activity.</p>  <p>Are things just abstracted too much?</p>  <p>And if so how can i reach this level of abstraction to make something like the android library i mentioned above.</p>  <p>Any design patterns recommended for this?</p>