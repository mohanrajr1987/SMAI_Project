<p>I create a model in package  <code>"my.libs.path"</code>, and the ApplicationMain need to scan <code>"my.libs.path"</code>.  It's working as follows</p>  <p>ApplicationMain.java</p>  <pre><code>package org.example;  @ComponentScan(basePackages = {"org.example","my.libs.path"}) </code></pre>  <p>But ,I don't want to know <code>"my.libs.path"</code> in package <code>"org.example"</code>. so I Try custom @ComponentScan append basePackages values to my annotation for example </p>  <p>ApplicationMain.java</p>  <pre><code>package org.example;  @Myannotation(basePackages = "org.example") </code></pre>  <p>Myannotation.java </p>  <pre><code>&lt;!-- language: java --&gt; package my.libs.path;  @Retention(value = RetentionPolicy.RUNTIME) @Target(value = { ElementType.TYPE }) @Configuration @EnableAutoConfiguration @ComponentScan(basePackages = {"my.libs.path"}) </code></pre>  <p>but this example the <code>basePackages = "org.example"</code> was override <code>"my.libs.path"</code></p>  <p>I try to do some handle like</p>  <pre><code>includeFilters = @ComponentScan.Filter(type=FilterType.ANNOTATION, value = ComponentScan.class) </code></pre>  <p>and in some.class implements TypeFilter to get basePackages , but it's not working.</p>  <p>Are there any better way to do this work.</p>