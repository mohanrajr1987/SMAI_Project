<p>I have some beans that I annotated with JPA to handle persistence mapping.</p>  <p>Here is an example:</p>  <pre><code>import javax.persistence.Id;  public class User{    @Id    private String id;     public String getId(){        return id;    }     public void setId(String id){        this.id = id;    } } </code></pre>  <p>Now I want to use this class in another project where I don't need a dependency on javax.persistence, so I'd rather not include it just for such classes.</p>  <p>So I was thinking of splitting this bean in two classes: one with just fields and accessors and a subclass with JPA annotations on accessors. Like:</p>  <pre><code>public class User{    private String id;     public String getId(){        return id;    }     public void setId(String id){        this.id = id;    } } </code></pre>  <p>and</p>  <pre><code>import javax.persistence.Id;  public class UserEntity extends User{     @Override    @Id    public String getId(){        return super.getId();    } } </code></pre>  <p>Unfortunately it <a href="http://stackoverflow.com/questions/594597/hibernate-annotations-which-is-better-field-or-property-access">seems</a> that putting JPA annotations on accessors is a discouraged practice in most cases and I second that.</p>  <p>Can you suggest any cleaner solutions?</p>