<p>To try to keep our example simple, let's say we have one domain object, Audit, with 4 properties:</p>  <pre><code>public class Audit{     Date date; // just used for MM/dd/yyyy     String event;     String user;     String desc; } </code></pre>  <p>We are planning on creating 3 Cassandra (2.0) tables to represent this audit:</p>  <p>AuditsByDate &lt;-- the MM/dd/yyyy date is the partition key for this table</p>  <p>AuditsByEvent &lt;-- Event name is the partition key here</p>  <p>AuditsByUser &lt;-- User id is the partition key here</p>  <p>This way we can rapidly search our audits 3 different ways.  For every audit written, there will be 1 identical record written to each table.</p>  <p>We are trying to find a way to annotate a single @Entity to tie one .java class to all 3 of these strongly related tables - We are looking for something like this:</p>  <pre><code>@Entity @Table(name="AuditsByDate") @Table(name="AuditsByEvent") @Table(name="AuditsByUser") public class Audit{      @PartitionKey(table="AuditsByDate")     @Column(name="date")     Date date; // just used for MM/dd/yyyy      @PartitionKey(table="AuditsByEvent")     @Column(name="event")      String event;      @PartitionKey(table="AuditsByUser")     @Column(name="user")     String user;      @Column(name="desc")     String desc; } </code></pre>  <p>Is anything like this possible?  The ultimate goal is to have 1 single annotated Java bean that covers those 3 variations on the same table rather than having to write a separate Java class to map to each "Audits" table.  Is that possible?  </p>  <p>Thanks in advance!!,</p>  <p>Jim</p>