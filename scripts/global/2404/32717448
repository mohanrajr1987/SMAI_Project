<p>I am using AspectJ to developing a audit log function, There is a requirement to track before and after change details, what I am doing here is:</p>  <p>1.Intercept the modify Function with an around advice. 2.Fire a DB call to get the before change details for the domain object. 3.Execute the modify function, it will update the DB entity. 4.Fire a DB call again to get the updated DB entity.</p>  <p>I am getting a issue on the step 4, Because I am using annotated transaction management, When I try to get the updated DB entity from DB, Seems I am still getting the old value which is before updated. And I did a debug, Looks like the transaction for step3 is not committed when I start the step 4. Actually I am firing step 4 after I executed the joinPoint.proceed(), Per my understanding, the transaction should commit already. But actually it was not. I tried afterReturning advice also, it was not working either. Are there anybody can give me any guideline on how to get this done?</p>  <pre><code>    @Override @AuditTrailLog(eventName = EventNameType.RULE_MODIFY,  handingRepositoryClass = ViolationRuleRepository.class, dbEntityUniqueKey = "violationRuleId") @Transactional(value = "transactionManager") public String modifyFunction(ViolationRuleItem violationRuleItem) { </code></pre>  <p>Around Advice Logic:</p>  <pre><code>                Object beforeChangeAuditData = auditTrailUtil.deepClone(                     findDBEntityByID(auditTrailLog.handingRepositoryClass(), uniqueKeyValue));                 joinPoint.proceed();                 //entityManager.clear();                 Object afterChangeAuditData = findDBEntityByID(auditTrailLog.handingRepositoryClass(), uniqueKeyValue);      </code></pre>