<p>I've created a lot of common small bean-definition containers (<code>@Configuration</code>) which I use to rapidly develop applications with Spring Boot like:</p>  <pre><code>@Import({    FreemarkerViewResolver.class, // registers freemarker that auto appends &lt;#escape etc.    ConfigurationFromPropertiesFile.class, // loads conf/configuration.properties    UtfContentTypeResponse.class, // sets proper Content-language and Content-type    LocaleResolverWithLanguageSwitchController // Locale resolver + switch controller  );  class MySpringBootApp ... </code></pre>  <p>For example, one of such <code>@Configuration</code>s can set up session storage for locale cookie with web controller to switch to selected language etc.</p>  <p>They are very fun to work with and reuse, but it would be really great to make it <strong>parametrized</strong>, which could allow lot more reusege. I mean something like:</p>  <p><strong>Pseudo code</strong>:</p>  <pre><code>@Imports( imports = {   @FreemarkerViewResolver( escapeHtml = true, autoIncludeSpringMacros = true),   @ConfigurationFromProperties( path = "conf/configuration.properties" ),   @ContentTypeResponse( encoding = "UTF-8" ),   @LocaleResolver( switchLocaleUrl = "/locale/{loc}", defaultLocale = "en" }) </code></pre>  <p>So, I basically mean "configurable <code>@Configurations</code>". <strong>What would be the best way to make the configuration that way?</strong></p>  <p>Maybe something more like this (again, pseudo code):</p>  <pre><code>@Configuration public class MyAppConfiguration {      @Configuration     public FreemarkerConfiguration freemarkerConfiguration() {        return FreemarkerConfigurationBuilder.withEscpeAutoAppend();     }      @Configuration     public ConfigurationFromPropertiesFile conf() {        return ConfigurationFromPropertiesFile.fromPath("...");     }      @Configuration     public LocaleResolverConfigurator loc() {        return LocaleResolverConfigurator.trackedInCookie().withDefaultLocale("en").withSwitchUrl("/switchlocale/{loc}");     } </code></pre>