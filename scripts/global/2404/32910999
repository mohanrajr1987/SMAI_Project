<p>I have the annotation @Foo and the corresponding FooProcessor. There I will need the location of the project root, which I could parse from the location of the class/java file, if I figured out how to get it.</p>  <p>Eg.</p>  <pre><code>  ...    public class FooProcessor extends AbstractProcessor{        ...        void processElement(Element e, Foo foo){            File f = getClassFileOrWhatever(e.getEnclosingElement());            File projectRoot = getProjectRoot(f);            doSomething(projectRoot);        }        File getClassFileOrWhatever(Element e){            ???        }        ...     } </code></pre>  <p>and in a different project which has a jar containing Foo annotation and it's processor:</p>  <p>/this/part/might/change/someproject/src/Foobar.java</p>  <pre><code>public class Foobar{     @Foo public void foobar(){} } </code></pre>  <p>=> I need FooProcessor::getProjectRoot to return "/this/part/might/change/someproject/" which is obviously trivial if I have "/this/part/might/change/someproject/src/Foobar.java" from FooProcessor::getClassFileOrWhatever.</p>  <p>It seems like new File(".") refers to my home dir when I compile the class with annotated method with Eclipse. I could walk the file tree from there and hope that the class file denoted by element.getEnclosingElement() is somewhere out there. This however seems a) very slow and b) error prone due to different compiling environments.</p>