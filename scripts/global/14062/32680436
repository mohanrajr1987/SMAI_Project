<p><strong>In camel, is it correct to say that not all <code>ENDPOINT</code>s support <code>INOUT</code> <code>ExchangePattern</code> ?</strong><br> If yes, then where which part of documentation tells which endpoint support which <code>ExchangePattern</code> or this is a implicit kind knowledge.</p>  <p>Its upto <code>ENDPOINT</code> to give support to <code>INOUT</code>.</p>  <p>Below is code example based on which i came to conclusion.</p>  <hr>  <p>I was playing with camel example-jms-file and i modify it to</p>  <p>queue1 --> queue2 ---> file://test ---> file://test1</p>  <pre><code>context.addRoutes(new RouteBuilder() {         public void configure() {                                       from("test-jms:queue:test.queue1")             .process(sleep(1))             .to("test-jms:queue:test.queue2");              from("test-jms:queue:test.queue2")             .process(sleep(2))             .to("file://test");              from("file://test")             .process(sleep(3))             .to("file://test1");         }          private Processor sleep(final int sleepId) {             return new Processor() {                                     @Override                 public void process(Exchange exchange) throws Exception {                                            System.out.println("Going for sleep sleepid=" + sleepId + ",  thread=" + Thread.currentThread().getName());                     Thread.sleep(5000l);                                             System.out.println("Done sleep sleepid=" + sleepId + ",  thread=" + Thread.currentThread().getName());                 }             };         }     }); </code></pre>  <p>Then i send a msg to queue using below code:</p>  <pre><code>        Exchange exchange = new DefaultExchange(context);         exchange.setPattern(ExchangePattern.InOut);         exchange.getIn().setBody("Test Message: 1");   System.out.println("sending msg to queue1");        Exchange send = template.send("test-jms:queue:test.queue1",exchange);   // If queue and file endpoint support INOUT then below line should get printed at last.   System.out.println("received response");  </code></pre>  <p>Executing above give following response:</p>  <pre><code>sending msg to queue1    Going for sleep sleepid=1,  thread=Camel (camel-1) thread #0 - JmsConsumer[test.queue1]  Done sleep sleepid=1,  thread=Camel (camel-1) thread #0 - JmsConsumer[test.queue1]  Going for sleep sleepid=2,  thread=Camel (camel-1) thread #1 - JmsConsumer[test.queue2]  Done sleep sleepid=2,  thread=Camel (camel-1) thread #1 - JmsConsumer[test.queue2]  received response   ## this getting printed here meaning that the file endpoint do not respect the INOUT exchangepattern.  Going for sleep sleepid=3,  thread=Camel (camel-1) thread #2 - file://test      Done sleep sleepid=3,  thread=Camel (camel-1) thread #2 - file://test </code></pre>  <p>If we observe the execution output we will see that <em>received response</em> gets printed before the completion of route starting with <code>FILE</code> <code>ENDPOINT</code>.</p>  <p>This shows that the file endpoint did not understood that the exchange is a INOUT exchange</p>  <hr>  <p>pictorial representation:(click image to enlarge)</p>  <h2><a href="http://i.stack.imgur.com/Ud4PE.png" rel="nofollow"><img src="http://i.stack.imgur.com/Ud4PE.png" alt="enter image description here"></a></h2>