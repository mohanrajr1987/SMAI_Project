<p><a href="http://camel.apache.org/spring.html" rel="nofollow">apache camel documentation</a> describes how to register a route builder with @Component and SpringRouteBuilder and then jumps to the xml code to do</p>  <pre><code>&lt;camelContext xmlns="http://camel.apache.org/schema/spring"&gt;   &lt;!-- and then let Camel use those @Component scanned route builders --&gt;   &lt;contextScan/&gt; &lt;/camelContext&gt; </code></pre>  <p>How can I do the same with java config? I've got</p>  <pre><code>package x.y.camel; @Component public class MyRouteBuilder extends SpringRouteBuilder {...} </code></pre>  <p>and</p>  <pre><code>@EnableWebMvc @EnableAutoConfiguration @ComponentScan(basePackages = {"x.y"}) public class Application implements WebApplicationInitializer {    @Bean    public SpringCamelContext camelContext(ApplicationContext applicationContext) throws Exception {     SpringCamelContext camelContext = new SpringCamelContext(applicationContext);     return camelContext;    } </code></pre>  <p>The component is picked up by spring and created, that part is fine. I can register the route by <code>camelContext.addRoutes(new MyRouteBuilder());</code>. The only bit is missing is how to tell camel context to pick up the route if it's managed as a spring bean.</p>