<p>I'm new to ESBs in general, however I've been tasked to implement a TCP reader which outputs XML data in JBoss Fuse. I've tried a few methods, with limited success so far.</p>  <p>I started by using the Camel Blueprint ArchType (since that's what most of the Fuse tutorials are based around). I then defined a simple route beginning with a Netty4 input, running through a custom decoder class and logging the result.</p>  <p><strong>blueprint.xml</strong></p>  <pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xsi:schemaLocation="        http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd        http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd"&gt;      &lt;bean id="myMessageDecoder" class="com.mycompany.binaryreceiver.binaryreceiver.MyMessageDecoder" /&gt;    &lt;camelContext allowUseOriginalMessage="false" xmlns="http://camel.apache.org/schema/blueprint"&gt;   &lt;route&gt;     &lt;from uri="netty4:tcp://localhost:9999?decoder=#myMessageDecoder&amp;amp;sync=false"/&gt;     &lt;log message="Message Received: ${body}"/&gt;   &lt;/route&gt; &lt;/camelContext&gt;  &lt;/blueprint&gt; </code></pre>  <p><strong>MyMessageDecoder.java</strong></p>  <pre><code>package com.mycompany.binaryreceiver.binaryreceiver;  import java.util.List; import io.netty.buffer.ByteBuf; import io.netty.channel.ChannelHandlerContext; import io.netty.handler.codec.ByteToMessageDecoder;  public class MyMessageDecoder extends ByteToMessageDecoder {      @Override     protected void decode(ChannelHandlerContext context, ByteBuf buffer, List&lt;Object&gt; out) throws Exception {          if (buffer.readableBytes() &lt; 3) {             return;         }          byte[] bytes = new byte[3];         buffer.readBytes(bytes);          MyMessage myMessage = new MyMessage(bytes);          out.add(myMessage);     } } </code></pre>  <p><strong>MyMessage.java</strong></p>  <pre><code>package com.mycompany.binaryreceiver.binaryreceiver;  public class MyMessage {      protected int data1;     protected int data2;     protected int data3;      public MyMessage(byte[] data) {         data1 = data[0];         data2 = data[1];         data3 = data[2];     }      public String toString() {         return "MyMessage: { " + this.data1 + ", " + this.data2 + ", " + this.data3 + " }";     } } </code></pre>  <p>The decoder simply checks if there are three bytes on the buffer. If there is, then it pushes these bytes into MyMessage, which offers a toString interface which the logger can access.</p>  <p>Obviously this is just an example, and the final message is much more complex, involving variable length content, however this illustrates the basic process.</p>  <p>This all appears to work, if I push a stream of bytes into port 9999, the logger outputs the expected values:</p>  <pre><code>INFO  Message Received: MyMessage: { 1, 13, 58 } INFO  Message Received: MyMessage: { 2, 36, 63 } INFO  Message Received: MyMessage: { 3, 74, 5 } INFO  Message Received: MyMessage: { 4, 12, 92 } INFO  Message Received: MyMessage: { 5, 111, -121 } INFO  Message Received: MyMessage: { 6, 0, 0 } INFO  Message Received: MyMessage: { 7, 80, 64 } INFO  Message Received: MyMessage: { 8, 0, 0 } INFO  Message Received: MyMessage: { 9, 0, -116 } INFO  Message Received: MyMessage: { 10, -108, 111 } INFO  Message Received: MyMessage: { 11, -17, -100 } INFO  Message Received: MyMessage: { 12, -35, -28 } </code></pre>  <p>However, during startup I'm getting the following message:</p>  <pre><code>[Blueprint Extender: 1] NettyConfiguration  WARN   The decoder com.mycompany.binaryreceiver.binaryreceiver.MyMessageDecoder@2413a0f1 is not @Shareable or an ChannelHandlerFactory instance. The decoder cannot safely be used. </code></pre>  <p>After looking up the warning, I found references which seemed to suggest that I'm going around the whole process incorrectly, and that I should be going through the Netty4 ChannelHandlerFactories.</p>  <p>Has anyone got experience of performing a similar binary -> XML process who can comment or assist with the correct/recommended process for performing these tasks?</p>  <p>Is the warning a legitimate problem, or a red herring? Should I be utilising the ChannelHandlerFactories, or a completely different approach?</p>