<p>I'm passing a List of different objects to a camel route. I would like the route to split the body into one object per message and put the class of the body in a header (using a processor).</p>  <pre><code>    from("direct:in")         .split(body())         .process(new JmsTypeHeaderProcessor(body().getClass().getName()))         .to("mock:out"); </code></pre>  <p>I'm trying it like this...</p>  <pre><code>@Produce(uri = "direct:in") private ProducerTemplate template; @EndpointInject(uri = "mock:out") private MockEndpoint endpoint;  @Test public void testRoute() throws Exception {     List&lt;Object&gt; list = new ArrayList&lt;&gt;();     list.add("String");     list.add(Integer.valueOf(1));     list.add(Boolean.FALSE);      template.sendBody(list);      for (Exchange ex : endpoint.getExchanges()) {         System.out.println("JMSType=" + ex.getIn().getHeader("JMSType"));     } } </code></pre>  <p>When I run that I find I actually have the headers</p>  <blockquote>   <p>JMSType=org.apache.camel.builder.ValueBuilder</p>      <p>JMSType=org.apache.camel.builder.ValueBuilder</p>      <p>JMSType=org.apache.camel.builder.ValueBuilder</p> </blockquote>  <p>whereas I expected, and would like</p>  <blockquote>   <p>JMSType=java.lang.String</p>      <p>JMSType=java.lang.Integer</p>      <p>JMSType=java.lang.Boolean</p> </blockquote>  <p>What is needed to get the class of the actual body?</p>  <p>BTW. I can see that <code>log("body.class")</code> returns what I want but I have not been able to follow how it works or adapt it for my needs.</p>