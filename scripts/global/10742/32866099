<p>I'm doing an integration between Django and AWS Redshift for reporting purposes. So far it feels like django isn't doing well with it. One of the problems I encountered is that I have to set an alternative type id for each model, rather than the AutoField type because it's not supported in redshift. so far so good, but I thought If I'm already doing a super class for all the models that I'm going to use I will change the table names on the way, I don't like the default names that django gives for it's models in the db (app_name__model_name). I managed to do it for every sub model (see below). but I would like to declare it dynamically in BaseModel in a way that each sub model will receive it's own table name according to it's class name.</p>  <pre><code>class BaseModel(Model):     id = CharField(primary_key=True, max_length=36)      class Meta:         abstract = True      def __init__(self, *args, **kwargs):         super(RedshiftBaseModel, self).__init__(*args, **kwargs)         self.id = str(uuid4())   class SubModel1(BaseModel):     class Meta(BaseMode.Meta):         db_table = 'SubModel1'      field1 = CharField(max_length=64, primary_key=True)   class SubModel2(BaseModel):     class Meta(BaseMode.Meta):         db_table = 'SubModel2'      field2 = CharField(max_length=64, primary_key=True) </code></pre>  <p>Is such thing even possible? </p>