<p>Edited my question to make it more clear. And I am sorry if what i'm asking is obvious or easy to solve, I am just starting out.</p>  <p>Hello, I am developing a website which has 2 models for the content: Article and Comic. Now I want a system that allows me to tag Articles and Comics with certain keywords. These keywords can then be used to retrieve a list of objects from both the models and display them.</p>  <p>At first, I set up the system as follows:</p>  <pre><code>class Article(models.Model):     ..... class Comic(models.Model):     ..... class Tag(models.Model):     tag = models.CharField(max_length = 25)     article = models.ForeignKey(Article)     comic = models.ForeignKey(Comic) </code></pre>  <p>However, this did not work out.</p>  <p>Then I tried implementing 2 different tag models for the 2 different models: ArticleTag and ComicTag, in the following way:</p>  <pre><code>class Article(models.Model):    ..... class ArticleTag(models.Model):    tag = models.CharField(max_length = 25)    article = models.ForeignKey(Article)  class Comic(models.Model):     ..... class ComicTag(models.Model):     tag = models.CharField(max_length = 25)     comic = models.ForeignKey(Comic) </code></pre>  <p>This also did not work, as I was able to get a list of tags of an article, but <strong>I could not get a list of articles that had the same tag</strong>. And also it was using 2 different tag models so that was also not preferable. </p>  <p>A user suggested a ManyToManyField based on the previous information I had provided. However, how would this exactly work?</p>  <p>Now, what is the best way to create a content tagging system using Django? It should preferably work with just 3 models: Article, Comic and Tag, not 4 like I tried. In conclusion, I want a system that lets me get a list of objects from 2 models using one single tag. So, I would really appreciate help of any kind as I am an amateur programming (pretty obvious) and I am completely stumped by this problem.</p>