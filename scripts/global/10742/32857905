<p>I have to insert multiple objects in a table, there are two ways to do that-</p>  <p><strong>1)</strong> Insert each one using <code>save()</code>. But in this case there will be n sql dB queries for n objects.</p>  <p><strong>2)</strong> Insert all of them together using <code>bulk_create()</code>. In this case there will be <strong>one</strong> sql dB query for n objects.</p>  <p>Clearly, second option is better and hence I am using that. Now the problem with <code>bulk__create</code> is that it does not return <strong>ids</strong> of the inserted objects hence they can not be used further to create objects of other models which have foreign key to the created objects.</p>  <p>To overcome this, we need to fetch the objects created by <code>bulk_create</code>.</p>  <p><strong>Now the question is "assuming as in my situation, there is no way to uniquely identify the created objects, how do we fetch them?"</strong></p>  <p>Currently I am maintaining a time_stamp to fetch them, something like below-</p>  <pre><code>my_objects = []  # Timestamp to be used for fetching created objects time_stamp = datetime.datetime.now()  # Creating list of intantiated objects for obj_data in obj_data_list:     my_objects.append(MyModel(**obj_data))  # Bulk inserting the instantiated objects to dB MyModel.objects.bulk_create(my_objects)  # Using timestamp to fetch the created objects MyModel.objects.filter(created_at__gte=time_stamp) </code></pre>  <p>Now this works good, but will fail in one case.</p>  <ul> <li>If at the time of bulk-creating these objects, some more objects are created from somewhere else, then those objects will also be fetched in my query, which is not desired.</li> </ul>  <p>Can someone come up with a better solution?</p>