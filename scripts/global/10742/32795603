<p>I have a custom user model and have installed python social auth (PSA). I have defined custom pipeline to get images from social websites. The problem is when I log in with any of social sites like google, facebook etc. the user is comes as None in the custom pipeline kwargs. However, when I log in via the custom user model and then while logged in I connect/login to google/facebook I get the user in the custom pipeline kwargs.</p>  <p>Another issue is that when I login via custom user model the pipeline.py does not does not execute even though I have added ModelBackend in AUTH BACKEND. Only if I login with social sites it executes. </p>  <p><strong>custom pipeline.py</strong></p>  <pre><code>from requests import request, HTTPError from django.core.files.base import ContentFile from user_profiles.models import UserProfile   def custom_pipeline(strategy, details, user, response, is_new=False, *args, **kwargs):     print 'user', user     print 'response', response     # print 'backend.name', backend.name     if not is_new and  "facebook" in kwargs['backend'].redirect_uri:         url = 'http://graph.facebook.com/{0}/picture'.format(response['id'])         response = request('GET', url, params={'type': 'large'})         response.raise_for_status()         try:             response = request('GET', url, params={'type': 'large'})             response.raise_for_status()         except:             HTTPError             pass         else:             profile = UserProfile.objects.get(user=user)             profile.my_pic.save('{0}_social.jpg'.format(user.username),                                         ContentFile(response.content))             profile.save()     elif "google" in kwargs['backend'].redirect_uri:         if response['image'].get('url') is not None:             url = response['image'].get('url') </code></pre>  <p><strong>setting.py</strong></p>  <pre><code>AUTHENTICATION_BACKENDS = (     'social.backends.facebook.FacebookOAuth2',     'social.backends.instagram.InstagramOAuth2',     'social.backends.google.GoogleOAuth2',     'social.backends.twitter.TwitterOAuth',     'django.contrib.auth.backends.ModelBackend', )  SOCIAL_AUTH_PIPELINE = (     'accounts.pipeline.custom_pipeline',     'social.pipeline.social_auth.social_details',     'social.pipeline.social_auth.social_uid',     'social.pipeline.social_auth.auth_allowed',     'social.pipeline.social_auth.social_user',     'social.pipeline.social_auth.associate_by_email',     'social.pipeline.social_auth.associate_user',     'social.pipeline.social_auth.load_extra_data',     'social.pipeline.user.user_details' ) </code></pre>  <p><strong>Custom user model</strong></p>  <pre><code>class MyUserManager(BaseUserManager):     def create_user(self, username=None, email=None, password=None):         """         Creates and saves a User with the given username, email and password.         """         if not username:             raise ValueError('Users must have a username')          if not email:             raise ValueError('Users must have an email address')          user = self.model(             username=username,             email=self.normalize_email(email),         )          user.set_password(password)         user.save(using=self._db)         return user      def create_superuser(self, username, email, password):         """         Creates and saves a superuser with the given username, email and password.         """         user = self.create_user(             username=username,             email=email,             password=password,          )         user.is_admin = True         user.save(using=self._db)         return user      # def get_profile(self):   class MyUser(AbstractBaseUser):     username = models.CharField(         verbose_name='username',         max_length=70,         unique=True         )      email = models.EmailField(         verbose_name='email address',         max_length=255,         unique=True,     )      first_name = models.CharField(max_length=70)     last_name = models.CharField(max_length=70)     is_member = models.BooleanField(default=True)     is_active = models.BooleanField(default=True)     is_admin = models.BooleanField(default=False)      objects = MyUserManager()      USERNAME_FIELD = 'username'     REQUIRED_FIELDS = ['email'] </code></pre>