<p>I would like to execute some code when mouse is clicked on the <code>WebBrowser</code> region. It should not block the original click behavior of the webbrowser itself</p>  <pre><code>private void webBrowser1_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e) {     webBrowser1.Document.Body.MouseDown += Body_MouseDown; }  void Body_MouseDown(object sender, HtmlElementEventArgs e) {        switch (e.MouseButtonsPressed)     {         case MouseButtons.Left:             //do something here...                break;     } } </code></pre>  <p>The issue is, now every mouse click is captured and handled by this event, meaning clicking on some button in the web browser will not trigger that click on HTML. My event will steal the click. I would like it to execute my little code as well as execute the HTML click as normal.</p>  <p>Put it in another way, my click now behaves similarly to</p>  <pre><code>public override void ClickHandle() {      //do something... } </code></pre>  <p>and I would like it to do this</p>  <pre><code>public override void ClickHandle() {      //do something...       base.ClickHandle(); //apply clicking in HTML besides my code } </code></pre>  <p>Reference to <a href="http://stackoverflow.com/questions/19254839/webbrowser-control-changing-attributes">here</a> and <a href="http://stackoverflow.com/questions/27136354/image-click-in-c-sharp-winforms-browser-control">here</a> and <a href="http://ryanfarley.com/blog/archive/2004/12/27/1334.aspx" rel="nofollow">here</a>.</p>