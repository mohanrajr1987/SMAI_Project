<p>I'm building a Windows Form right now, and I've got all of the values saving their states so that when you open the form it's the same as when you closed it. The only problem I'm having is retaining the values of the radio buttons. I also have it to where the form becomes the color represented by the buttons, and I need that to retain as well. Here's what I got so far.</p>  <pre><code>using System; using System.Collections.Generic; using System.ComponentModel; using System.Data; using System.Drawing; using System.IO; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows.Forms; using XMLConfig; namespace mercheckadmin {     public partial class MERCHECK_ADMIN : Form     {         //Add the xml settings from XMLConfig.cs         // This allows entire program to use it         private XMLSettings settings;         // Add the string variables needed to assign values          // that are used in the program and saved          public string Percentage1;         public string Percentage2;         public string Percentage3;          public string Marselect1;         public string Marselect2;         public string Marselect3;          // This allows the program to use this data         // Anywhere in the form.         public string Searchstring;         public string Hostip;         public string Configfile;         public string Portno;         public string Comport;          public MERCHECK_ADMIN()         {             InitializeComponent();               this.settings = new XMLSettings();             // name of the file we load             Configfile = "mercapp.xml";             /**             // This takes the file and loads the xml values             // into the form.             **/             this.settings.Load(Configfile);             /**              assign the value to the variable Hostip the data from the               XML file "Hostip" if there is no value assign it "Enter IP address here"             **/              Percentage1 = this.settings.GetValue("Percentage1", "#");              Percentage2 = this.settings.GetValue("Percentage2", "#");              Percentage3 = this.settings.GetValue("Percentage3", "#");              Hostip = this.settings.GetValue("Hostip", "Enter IP address here");               // assign the value to the variable Hostip the data from the              // XML file "Hostip" if there is no value assign it "Enter IP address here"              Searchstring = this.settings.GetValue("Searchstring", "Enter search string here");               Portno = this.settings.GetValue("Portno", "Port #");               Comport = this.settings.GetValue("Comport", "Port #");              strPercentage1.Text = Percentage1;             strPercentage2.Text = Percentage2;             strPercentage3.Text = Percentage3;             strHostip.Text = Hostip;             strSearch.Text = Searchstring;             strPortno.Text = Portno;             strComport.Text = Comport;           }            private void SaveConfiguration()         {             /**              This adds the value from the Hostip value to the settings array             **/              this.settings.SetValue("Percentage1", Percentage1);             this.settings.SetValue("Percentage2", Percentage2);             this.settings.SetValue("Percentage3", Percentage3);             this.settings.SetValue("Hostip", Hostip);             this.settings.SetValue("Searchstring", Searchstring);             this.settings.SetValue("Portno", Portno);             this.settings.SetValue("Comport", Comport);             this.settings.SetValue("Marselect1", Marselect1);             this.settings.SetValue("Marselect2", Marselect2);             this.settings.SetValue("Marselect3", Marselect3);             //Crypotologger example             //logserverPwd = CryptoHelper.Encrypt(logserverPwd, true);                try             {                 settings.Save(Configfile);              }             catch (UnauthorizedAccessException)             {                 MessageBox.Show("Access to the path '" + Configfile + "' is denied. " +                   "The current settings could not be saved.",                   "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);             }             catch (IOException)             {                 MessageBox.Show("The path '" + Configfile + "' is not writeable. " +                   "The current settings could not be saved.",                   "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);             }         }                     private void MERCHECK_ADMIN_Load(object sender, EventArgs e)         {          }          private void button2_Click(object sender, EventArgs e)         {          }          private void button1_Click(object sender, EventArgs e)         {             Percentage1 = strPercentage1.Text;             Percentage2 = strPercentage2.Text;             Percentage3 = strPercentage3.Text;             Hostip = strHostip.Text;             Searchstring = strSearch.Text;             Portno = strPortno.Text;             Comport = strComport.Text;              if (strMarselect1.Checked == true)             {                 strMarselect1 = checked;             }              SaveConfiguration();         }          private void label2_Click(object sender, EventArgs e)         {          }          private void textBox1_TextChanged(object sender, EventArgs e)         {          }          private void strComport_Click(object sender, EventArgs e)         {          }          private void strPortno_KeyPress(object sender, KeyPressEventArgs e)         {             char ch = e.KeyChar;              if (!Char.IsDigit(ch) &amp;&amp; ch != 8)             {                 e.Handled = true;             }         }          private void strComport_TextChanged(object sender, EventArgs e)         {          }          private void strComport_KeyPress(object sender, KeyPressEventArgs e)         {             char ch = e.KeyChar;               if ((!Char.IsDigit(ch)) &amp;&amp; (ch != 8))             {                 e.Handled = true;             }            }          private void strPercentage1_KeyPress(object sender, KeyPressEventArgs e)         {             {                 char ch = e.KeyChar;                   if ((!Char.IsDigit(ch)) &amp;&amp; (ch != 8) &amp;&amp; (ch != '.'))                 {                     e.Handled = true;                 }                }         }          private void strPercentage2_KeyPress(object sender, KeyPressEventArgs e)         {             {                 char ch = e.KeyChar;                   if ((!Char.IsDigit(ch)) &amp;&amp; (ch != 8) &amp;&amp; (ch != '.'))                 {                     e.Handled = true;                 }                }         }          private void strPercentage3_KeyPress(object sender, KeyPressEventArgs e)         {             {                 char ch = e.KeyChar;                   if ((!Char.IsDigit(ch)) &amp;&amp; (ch != 8) &amp;&amp; (ch != '.'))                 {                     e.Handled = true;                 }                }         }          private void button2_MouseClick(object sender, MouseEventArgs e)         {             this.Close();         }           private void strMarselect1_MouseClick(object sender, MouseEventArgs e)         {              this.BackColor = System.Drawing.Color.Red;          }          private void strMarselect2_Click(object sender, EventArgs e)         {              this.BackColor = System.Drawing.Color.Orange;          }          private void strMarselect3_Click(object sender, EventArgs e)         {              this.BackColor = System.Drawing.Color.Yellow;          }          private void strMarselect1_CheckedChanged(object sender, EventArgs e)         {             strMarselect1.Checked = true;         }     } } </code></pre>