<p>Is there a difference between:</p>  <pre><code>IWindowsFormsEditorService.ShowDialog(Form frm) </code></pre>  <p>and</p>  <pre><code>Form.ShowDialog(); </code></pre>  <p>I am creating a custom form control. I have created a custom <code>UITypeEditor</code> to implement the input of data to my custom control via a custom form. However I am running into strange behaviour when I use the former. The strange behaviour is layout based - my custom form is larger, its minimum size is larger, and some of my form controls are initially displayed off-screen (although form resize will call a scale function and partially fix this - controls end up closer together and bunched up however at least fit on the screen). When using the latter I experience none of these issues.</p>  <p>I am aware that I have managed to get the desired effect, however I want to understand why it works. Additionally if there is a better way to display a custom form for a custom control I am open to suggestions.</p>  <p>EDIT: This problem with the custom form only occurs when my custom control is imported to a new project and then accessed via the properties menu. When debugging the control itself the problem is not present...</p>  <p>See code below:</p>  <pre><code>internal class DictionaryEditor : UITypeEditor {     private Form1 _frm;      /// &lt;summary&gt;     ///      /// &lt;/summary&gt;     public DictionaryEditor()         : base()     {         _frm = new Form1();     }      /// &lt;summary&gt;     ///      /// &lt;/summary&gt;     /// &lt;param name="context"&gt;&lt;/param&gt;     /// &lt;param name="provider"&gt;&lt;/param&gt;     /// &lt;param name="value"&gt;&lt;/param&gt;     /// &lt;returns&gt;&lt;/returns&gt;     public override object EditValue(System.ComponentModel.ITypeDescriptorContext context, IServiceProvider provider, object value)     {         IWindowsFormsEditorService editorService;          if (provider != null)         {             editorService = provider.GetService(typeof(IWindowsFormsEditorService)) as IWindowsFormsEditorService;              if (editorService != null)             {                 //editorService.ShowDialog(_frm);                 _frm.ShowDialog();                 value = _frm.DataSource;             }         }          return value;     }      /// &lt;summary&gt;     ///      /// &lt;/summary&gt;     /// &lt;param name="context"&gt;&lt;/param&gt;     /// &lt;returns&gt;&lt;/returns&gt;     public override UITypeEditorEditStyle GetEditStyle(System.ComponentModel.ITypeDescriptorContext context)     {         return UITypeEditorEditStyle.Modal;     } } </code></pre>  <p>On variable:</p>  <pre><code>    [Category("Data")]     [Description("Indicates the dictionary that this control will use to get its items.")]     [Editor(typeof(DictionaryEditor), typeof(UITypeEditor))]     [Browsable(true)]     public Dictionary&lt;object, object&gt; DataSource     {         set { _dicDatasource = value; }         get { return _dicDatasource; }     } </code></pre>  <p>EDIT2: The form displays correctly in three of the four modes ive suggested. In debug mode of the control regardless of which ShowDialog is used the form displays correctly. When the control is imported into a project, the form displays correctly when Form.ShowDialog variant is used. When IWindowsFormsEditorService.ShowDialog variant is used the form does not display correclty. As far as I can tell it is this single line that is proving to effect the display. There is very little on the web about any differences between the two variants of ShowDialog. The information about IWindowsFormsEditorService indicates that it calls the Form.Showdialog variant from its input parameter. I dont see why they should behave differently. The form control is listed below.</p>  <pre><code>public partial class Form1 : Form {     private Dictionary&lt;object, object&gt; _dataSource;     private Size _frmMargins;     private Size _btnOkLocOffset;     private Size _btnCnclLocOffset;     private Size _lblErrMsgLocOffset;      /// &lt;summary&gt;     ///      /// &lt;/summary&gt;     public Form1()     {         InitializeComponent();          _dataSource = new Dictionary&lt;object, object&gt;();          _frmMargins = new System.Drawing.Size();         _frmMargins.Width = this.Width - splitContainer1.Width;         _frmMargins.Height = this.Height - splitContainer1.Height;          _btnOkLocOffset = new System.Drawing.Size();         _btnOkLocOffset.Width = this.Width - btnOk.Location.X;         _btnOkLocOffset.Height = this.Height - btnOk.Location.Y;          _btnCnclLocOffset = new System.Drawing.Size();         _btnCnclLocOffset.Width = this.Width - btnCancel.Location.X;         _btnCnclLocOffset.Height = this.Height - btnCancel.Location.Y;          _lblErrMsgLocOffset = new System.Drawing.Size();         _lblErrMsgLocOffset.Width = this.Width - lblErrorMessage.Location.X;         _lblErrMsgLocOffset.Height = this.Height - lblErrorMessage.Location.Y;     }      /// &lt;summary&gt;     ///      /// &lt;/summary&gt;     /// &lt;param name="sender"&gt;&lt;/param&gt;     /// &lt;param name="e"&gt;&lt;/param&gt;     private void btnOk_Click(object sender, EventArgs e)     {         Dictionary&lt;object, object&gt; tmpDataSource;         object objKey;         object objValue;          tmpDataSource = new Dictionary&lt;object, object&gt;();          lblErrorMessage.Visible = false;         RemoveBlanks();          if (txtMainDropDown.Lines.Count() == txtLinkedDropDown.Lines.Count())         {             for (int line = 0; line &lt; txtMainDropDown.Lines.Count(); line++)             {                 objKey = txtMainDropDown.Lines.GetValue(line);                 objValue = txtLinkedDropDown.Lines.GetValue(line);                  if ((objKey.ToString() != "") &amp;&amp; (objValue.ToString() != ""))                 {                     if (!tmpDataSource.ContainsKey(objKey))                     {                         tmpDataSource.Add(objKey, objValue);                     }                     else                     {                         tmpDataSource.Clear();                         lblErrorMessage.Visible = true;                         lblErrorMessage.Text = "Error: Main drop down value must be unique.";                         break;                     }                 }                 else                 {                     tmpDataSource.Clear();                     lblErrorMessage.Visible = true;                     lblErrorMessage.Text = "Error: Remove blank spaces from the data set(s).";                     break;                 }             }         }         else         {             lblErrorMessage.Visible = true;             lblErrorMessage.Text = "Error: Main &amp;&amp; Linked counts do not match.";         }          if (lblErrorMessage.Visible == false)         {             /* No error reported */             if (tmpDataSource.Count &gt; 0) _dataSource = tmpDataSource;             else _dataSource = null;             this.Close();         }     }      /// &lt;summary&gt;     ///      /// &lt;/summary&gt;     /// &lt;param name="sender"&gt;&lt;/param&gt;     /// &lt;param name="e"&gt;&lt;/param&gt;     private void btnCancel_Click(object sender, EventArgs e)     {         this.Close();     }      /// &lt;summary&gt;     ///      /// &lt;/summary&gt;     /// &lt;param name="sender"&gt;&lt;/param&gt;     /// &lt;param name="e"&gt;&lt;/param&gt;     private void Form1_Shown(object sender, EventArgs e)     {         txtMainDropDown.Clear();         txtLinkedDropDown.Clear();         lblErrorMessage.Visible = false;          if (_dataSource != null)         {             foreach (KeyValuePair&lt;object, object&gt; kvp in _dataSource)             {                 txtMainDropDown.AppendText(kvp.Key.ToString() + "\r\n");                 txtLinkedDropDown.AppendText(kvp.Value.ToString() + "\r\n");             }              RemoveBlanks();         }     }      /// &lt;summary&gt;     ///      /// &lt;/summary&gt;     private void RemoveBlanks()     {         txtMainDropDown.Text = txtMainDropDown.Text.TrimEnd('\r', '\n');         txtLinkedDropDown.Text = txtLinkedDropDown.Text.TrimEnd('\r', '\n');     }      /// &lt;summary&gt;     ///      /// &lt;/summary&gt;     /// &lt;param name="sender"&gt;&lt;/param&gt;     /// &lt;param name="e"&gt;&lt;/param&gt;     private void Form1_SizeChanged(object sender, EventArgs e)     {         splitContainer1.Width = this.Width - _frmMargins.Width;         splitContainer1.Height = this.Height - _frmMargins.Height;          btnOk.Location = new Point(this.Width - _btnOkLocOffset.Width, this.Height - _btnOkLocOffset.Height);         btnCancel.Location = new Point(this.Width - _btnCnclLocOffset.Width, this.Height - _btnCnclLocOffset.Height);         lblErrorMessage.Location = new Point(this.Width - _lblErrMsgLocOffset.Width, this.Height - _lblErrMsgLocOffset.Height);     }      /// &lt;summary&gt;     ///      /// &lt;/summary&gt;     public Dictionary&lt;object, object&gt; DataSource     {         get { return _dataSource; }     } } </code></pre>