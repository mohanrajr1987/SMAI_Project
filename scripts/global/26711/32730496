<p>I) NOW - . In my current app - I'm displaying an overlay of trails over an apple map. I was using MKOverlayView in my current app, which is, if not deprecated, not currently recommended</p>  <pre><code>II) I want to - Use currently recommended technique with MKOverlayRenderer - and ***not use MKOverlayView***        (* I'm referring to apple doc "Location and Maps Programming Guide - Displaying Overlays on a Map" at this url  (Also I think using these ideas will help me be able to pass different overlay names as parameters from a higher level in a more straightforward way)  I’ve been using ideas from, and attempting to understand **this apple doc** </code></pre>  <p>•       <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/LocationAwarenessPG/AnnotatingMaps/AnnotatingMaps.html#//apple_ref/doc/uid/TP40009497-CH6-SW15" rel="nofollow">https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/LocationAwarenessPG/AnnotatingMaps/AnnotatingMaps.html#//apple_ref/doc/uid/TP40009497-CH6-SW15</a></p>  <pre><code>At the bottom of posting are **Other url**s I’ve investigated in connection, both within Stackoverflow and outside*  MY CHALLENGE  - When I follow ideas in the above apple doc, I see what to do if I render a regular overlay object, like a polygon (my example code is based on that), but **my overlay objects are UIImages** They are not regular objects and also I don't draw them on the fly within the app.      I get quite confused when I read about what to do with custom overlays      According to the doc, I'm need to "subclass MKOverlayRenderer and implement … custom drawing code"       My overlay is a *fixed UIImage* it's not created on the fly within the app.       A) It looks like I need to have two things happen in my custom overlay objects       1) A coordinate that defines the center point of the overlay      2) A bounding rectangle that completely encompasses the overlay’s content, specified in map points And I can use Map Kit functions to convert from my coordinate based data to map points       B) Also I have to define a custom overlay renderer   III) I HAVE created a  **sample app "miniOverlay"** which uses ideas in the apple doc to draw a polygon around the apple map region I'm working with in my real world app. Of course in my real app, I'm not interested in rendering regular objects as overlays. I *actually* want to draw overlay(s) which I'm including as fixed UIImages in my app.   I started with the polygon example, so that I can make sure I understand how to render some kind of overlay without using MKOverlayView - which is what I use in my current app, and want to stop using.   I have included code in miniOverlay that isn't yet rendering my trails overlay, working to go in the right direction. Note that the polygon drawing example – which is included there too – does work. It draws a polygon in an area above the map region I define.  // // //  ViewController.m //  miniOverlay //  #import "ViewController.h" #import "MKParkTrail.h" #import "MKTrailsImageRenderer.h"  @interface ViewController ()  @end  @implementation ViewController /* ideas from apple doc  To display an overlay on a map, your app must provide two distinct objects:  ● An overlay object, which is an object that conforms to the MKOverlay protocol and manages the data  points for the overlay.  ● An overlay renderer, which is a class (derived from MKOverlayRenderer) used to draw the visual  representation of the overlay on the map surface.  Annotating Maps  Displaying Overlays on a Map  */  // I don’t include code for ParkMap or ParkMapVC classes here. They are from my real world app. And they do their job in this mini app too – I use them to define the apple map region  - (void)viewDidLoad {   [super viewDidLoad];    _parkMapVC = [[ParkMapVC alloc] init];    _parkMapVC.park = [[ParkMap alloc] initWithFilename:@"EdgewoodVer2"]; //plist used to define apple map region - works      //Define map region around Edgewood Park     mapView.region = [self.parkMapVC.park defineMapRegion:_parkMapVC.park];       //mapView is outlet  on the storyboard    // This Edgewood polygon part I don’t need for real world map, but I used it to be sure I could create an overlay with techniques in apple doc      CLLocationCoordinate2D points[4];         // Edgewood polygon      points[0] = CLLocationCoordinate2DMake(37.463919, -122.298029);     points[1] = CLLocationCoordinate2DMake(37.474597, -122.282402);     points[2] = CLLocationCoordinate2DMake(37.466326, -122.272299);     points[3] = CLLocationCoordinate2DMake(37.451593, -122.279896);      MKPolygon* polyAroundEdgewood = [MKPolygon polygonWithCoordinates:points count:4];      mapView.delegate = self;      [mapView addOverlay:polyAroundEdgewood];            // END OF Edgewood polygon       // SEP 2015 NOW LET'S START WORKING WITH TRAILS OVERLAY  // No overlay is produced by these lines of code, though it runs clean      MKParkTrail *overlayEdgewoodTrailImage = [[MKParkTrail alloc] init];  overlayEdgewoodTrailImage.overlayTrailImageName = @"WEBVUSAMPLE1EDGEoverlay_park_Cropped";      mapView.delegate = self; // added again here because I periodically comment out the polygon drawing code lines      [mapView addOverlay:overlayEdgewoodTrailImage];  }  - (void)didReceiveMemoryWarning {     [super didReceiveMemoryWarning];  }  // This protocol method mapView:viewForOverlay //  gets messaged for any MKMapView type object //    in my case this is 'mapView'    - (MKOverlayRenderer *)mapView:(MKMapView *)mapView viewForOverlay:(id &lt;MKOverlay&gt;)overlay {     if ([overlay isKindOfClass:[MKPolygon class]])     {         MKPolygonRenderer* aRenderer = [[MKPolygonRenderer alloc]                                         initWithPolygon:(MKPolygon*)overlay];         aRenderer.fillColor = [[UIColor cyanColor] colorWithAlphaComponent:0.2];         aRenderer.strokeColor = [[UIColor blueColor] colorWithAlphaComponent:0.7];         aRenderer.lineWidth = 3;         return aRenderer;     }     // using MKParkTrail LIKE MKPolygon     // using MKTrailsImageRenderer LIKE of MKPolygonRenderer  // HERE’S THE CODE I’M INTERESTED IN GETTING TO render my fixed UIImage overlay      if ([overlay isKindOfClass:[MKParkTrail class]])      { MKTrailsImageRenderer * aRenderer =         [[MKTrailsImageRenderer alloc]initWithUIImage:(MKParkTrail *)overlay];         return aRenderer;     }       return nil; }  @end   // Other Classes - I'm not including classes ParkMap and ParkMapVC which I use to define the apple map region //    because that part works, I took that code from my actual app  // //  MKParkTrail.h #import &lt;Foundation/Foundation.h&gt; #import &lt;MapKit/MapKit.h&gt;  @class ParkMap; // copied from ParkMapOverlay.h  //Create a class that conforms to MKOverlay:  @interface MKParkTrail : NSObject &lt;MKOverlay, MKMapViewDelegate&gt; {  } @property NSString * overlayTrailImageName;  // QUESTIONS // 1) Does the UIImage overlay  go here? // 2) Do I need something more? // 3)  Concerns about the implementation file, mentioned in that file @property (strong,nonatomic) UIImage* mapOfTrailsImage; @property  (strong, nonatomic) MKParkTrail* mkParkTrail;  @end   // //  MKParkTrail.m //Questions  // 1) I’m supposed to do something with mid point of map here  // 2) Also something with map points and boundary  // I copied methods for these from another Stack Overflow posting, referenced in the code comments. But I don’t understand the boundary map points and am unsure if I did the right thing with my mid point coordinate  // //  MKParkTrail.m  #import "MKParkTrail.h"  @implementation MKParkTrail  // try removing these synthesize one at a time once working // I think it's 2 and 3 needed  @synthesize mapOfTrailsImage; @synthesize boundingMapRect; @synthesize coordinate;  - (id)initWithCoordinate:(CLLocationCoordinate2D)coordinate {     self = [super init];     if (self != nil) {       }     return self; }   - (CLLocationCoordinate2D)coordinate {     // This is the mid point I took from my plist     CLLocationCoordinate2D coord1 = {         37.465604,-122.281970      };      return coord1; }   // Extracted from http://stackoverflow.com/questions/5283741/how-do-i-create-an-image-overlay-and-add-to-mkmapview  // I don't understand what to do with this method for my case - (MKMapRect)boundingMapRect {      MKMapPoint upperLeft = MKMapPointForCoordinate(self.coordinate);      MKMapRect bounds = MKMapRectMake(upperLeft.x, upperLeft.y, 2000, 2000);     return bounds; }     @end // //  MKTrailsImageRenderer.h //  miniOverlay // QUESTIONs //  1) Does the type-of-class code in ViewController.m : mapView:viewForOverlay, do all the linking up I need //     so that it knows to message this class? //  2) I need to figure out what methods to include in this class to do the rendering // apple doc talks about these two methods, but those seem like they are for drawing,  //    not for rendering fixed images? /* drawMapRect:zoomScale:inContext: to draw your custom content canDrawMapRect:zoomScale: if your drawing code depends on content that might not always be available */    // //MKTrailsImageRenderer.m  //  #import "MKTrailsImageRenderer.h" #import &lt;MapKit/MapKit.h&gt; // (getting a synthesize warning like I got before, need to figure out what protocol props need to be synthesized) // I jumped to definition for the protocols in the .h and picked //   out these properties,  @implementation MKTrailsImageRenderer @synthesize boundingMapRect; @synthesize coordinate;   - (id)initWithUIImage:(MKParkTrail *)aMapOfTrailsImage {     self = [super init];     return self; }  @end </code></pre>  <p>•       In addition to the apple doc programming guide mentioned at the beginning of post, I referred to these postings along the way</p>  <pre><code>1) Uses MKOverlayView –Which my current app does and I don’t want to use http://stackoverflow.com/questions/5283741/how-do-i-create-an-image-overlay-  2) Newer Ray Wenderlich in Swift (which I haven’t yet worked with) and still uses MKOverlayView – very similar to an older tutorial I based work in my current app on http://www.raywenderlich.com/87008/overlay-views-mapkit-swift-tutorial  3) http://stackoverflow.com/questions/5283741/how-do-i-create-an-image-overlay-and-add-to-mkmapview  This example has good stuff, and also uses MKOverlayView  4) This is a question I  asked in Stackoverflow – kindly answered by Stanislaw. I was using MKOverlayView here http://stackoverflow.com/questions/31841631/ios-mkmapview-overlay-wont-render-when-i-move-methods-to-another-class </code></pre>