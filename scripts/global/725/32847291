<p>I want to be able to model the following configuration:</p>  <pre><code>&lt;bundles&gt;     &lt;resource type="script"&gt;          &lt;bundle name="common/services"&gt;              &lt;file path="common/consoleService.js" /&gt;              &lt;file path="common/localStorageService.js" /&gt;              &lt;file path="common/restService.js" /&gt;              &lt;!-- ... More files ... --&gt;          &lt;/bundle&gt;     &lt;/resource&gt; &lt;/bundles&gt; </code></pre>  <p>So I proceeded to create the following <code>ConfigurationSection</code>:</p>  <pre><code>internal class BundlesSection : ConfigurationSection {      internal const string TAG_NAME = "bundles";       [ConfigurationProperty(ResourceCollection.TAG_NAME,                             IsRequired = false,                             IsDefaultCollection = true)]      internal ResourceCollection Resources      {          get { return this[ResourceCollection.TAG_NAME] as ResourceCollection; }      } } </code></pre>  <hr>  <pre><code>[ConfigurationCollection(typeof(ResourceElement),     AddItemName = ResourceElement.TAG_NAME)] internal class ResourceCollection : ConfigurationElementCollection {     internal const string TAG_NAME = "";      protected override ConfigurationElement CreateNewElement()     {         return new ResourceElement();     }      protected override object GetElementKey(ConfigurationElement element)     {         return ((ResourceElement)element).Type;     } } </code></pre>  <hr>  <pre><code>[ConfigurationCollection(typeof(BundleElement),     AddItemName = BundleElement.TAG_NAME)] internal class ResourceElement : ConfigurationElementCollection {      internal const string TAG_NAME = "resource";      private const string ATTR_TYPE = "type";       [ConfigurationProperty(ATTR_TYPE,                            IsRequired = true,                            IsKey = true)]      internal string Type      {          get { return this[ATTR_TYPE] as string; }          set { this[ATTR_TYPE] = value; }      }      protected override ConfigurationElement CreateNewElement()     {         return new BundleElement();     }      protected override object GetElementKey(ConfigurationElement element)     {         return ((BundleElement)element).Name;     } } </code></pre>  <hr>  <pre><code>[ConfigurationCollection(typeof(FileElement),     AddItemName = FileElement.TAG_NAME)] internal class BundleElement : ConfigurationElementCollection {      internal const string TAG_NAME = "bundle";      private const string ATTR_NAME = "name";       [ConfigurationProperty(ATTR_NAME,                            IsRequired = true,                            IsKey = true)]      internal string Name      {          get { return this[ATTR_NAME] as string; }          set { this[ATTR_NAME] = value; }      }      protected override ConfigurationElement CreateNewElement()     {         return new FileElement();     }      protected override object GetElementKey(ConfigurationElement element)     {         return ((FileElement)element).Path;     } } </code></pre>  <hr>  <pre><code>internal class FileElement : ConfigurationElement {     internal const string TAG_NAME = "file";     private const string ATTR_PATH = "path";      [ConfigurationProperty(ATTR_PATH,                            IsRequired = true,                            IsKey = true)]     internal string Path     {          get { return this[ATTR_PATH] as string; }          set { this[ATTR_PATH] = value; }     } } </code></pre>  <hr>  <p>Although everything seems OK, I am getting the following exception when the section is first loaded:</p>  <blockquote>   <p>Unrecognized element 'bundle'</p> </blockquote>  <p>As you can see, <code>BundleElement.TAG_NAME</code> is <code>"bundle"</code>, so I don't know why it isn't being recognized.</p>  <p>I'm loading the configuration section as follows:</p>  <pre><code>private BundlesSection LoadSection() {     return ConfigurationManager.GetSection(String.Format("static/{0}", BundlesSection.TAG_NAME)) as BundlesSection; } </code></pre>  <p>I also have the following in my <code>Web.config</code>:</p>  <pre><code>&lt;configuration&gt;      &lt;configSections&gt;         &lt;sectionGroup name="static"&gt;             &lt;section name="bundles" type="XXX" restartOnExternalChanges="true" /&gt;         &lt;/sectionGroup&gt;     &lt;/configSections&gt;      &lt;static&gt;         &lt;bundles configSource=".\Configuration\Static\Bundles.xml" /&gt;     &lt;/static&gt;  &lt;/configuration&gt; </code></pre>