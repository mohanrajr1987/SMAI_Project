<p>I recently updated Play framework to 2.4 and I've got a problem with my configuration management.</p>  <p>Previously, I was using a primary <code>application.conf</code> file and specific configuration files <code>application.dev.conf</code> and <code>application.prod.conf</code> to override some configuration values.</p>  <p>With the new version, however, it seems that the configuration is not correctly merged. I use the following ApplicationLoader as showed in the <a href="https://www.playframework.com/documentation/2.4.x/ScalaDependencyInjection#Advanced:-Extending-the-GuiceApplicationLoader" rel="nofollow">documentation</a>:</p>  <pre><code>package config  import com.typesafe.config.ConfigFactory import play.api.{Logger, ApplicationLoader, Configuration} import play.api.inject._ import play.api.inject.guice._  class CustomApplicationLoader extends GuiceApplicationLoader {   override def builder(context : ApplicationLoader.Context) = {     val mode = context.environment.mode.toString     val extraConfName = s"application.${mode.toLowerCase}.conf")     val extra = Configuration(ConfigFactory.load(extraConfName))     initialBuilder       .in(context.environment)       .loadConfig(extra ++ context.initialConfiguration)       .overrides(overrides(context): _*)   } } </code></pre>  <p>And I added this class loader in my <code>application.conf</code> file:</p>  <pre><code>play.application.loader = "config.CustomApplicationLoader" </code></pre>  <p>But only the values from <code>application.conf</code> seems to be taken into account in the final configuration. Any idea of where this could come from?</p>