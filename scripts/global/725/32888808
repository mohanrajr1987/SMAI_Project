<p>I was wondering how people are handling security aspects when using Spring Cloud Config. I'm planning to use Spring Cloud Config Server and Client together with Spring Boot. From an implementation point of view this is quite straight, but how do you deal with the risk of disclosing password/access to every developer.  e.g. you run one central configserver containing configurations for all environment. In the <code>bootstrap.yml</code> of the config client app you'll have to configure the <code>username</code>/<code>password</code> to access the configserver. So far so good, but when I know commit the username/password in the respective yml file, then every developer has potential access to all environments by just switching the profile from e.g. <code>development</code> to <code>production</code> (please let's not start a discussion why not every developer needs access to production).</p>  <p>I'm aware that I can encrypt all passwords in the configuration, we do this, but that's not what I'm looking for. Encryption is just a feature to not have the passwords being stored plaintext in the files, but the user does not really need to know the plain password to get access if he has access to the configserver in the first place.</p>  <p>This is also about avoiding mistakes during development... its just to easy to switch the local environment to connect to production or any other environment.</p>  <p>So how are people dealing with this? Do you inject a different <code>bootstrap.yml</code> in development then in other environments? if so how do you administrate/propagate these? </p>  <p>Do you set the password for the configuration user on the comandline? ...?</p>