<p>I'm looking for an efficient way to load settings/configuration from the database with Laravel 5. Settings consist of a <code>key</code> and <code>value</code> column, the model class basically looks like this:</p>  <pre><code>&lt;?php  namespace App;  use Illuminate\Database\Eloquent\Model;  class Setting extends Model {     protected $table = 'settings';     protected $fillable = ['key', 'value'];     protected $primaryKey = 'key'; } </code></pre>  <p>At first I made a simple helper function which does the job. The problem is, this would lead to multiple calls per page request. Which is getting slow.</p>  <pre><code>/**  * Get the value for the given setting from the database.  *  * @param  string  $key  * @return string  */ function setting($key) {     $setting = Setting::whereKey($key)-&gt;firstOrFail();      return $setting-&gt;value; }  // $foo = setting('foo'); returns 'bar' </code></pre>  <p>In an attempt to improve this I creating a custom class called <code>Setting</code> within the <code>App\Classes</code> directory (and also created a Facade for it):</p>  <pre><code>&lt;?php  namespace App\Classes;  use Cache;  class Setting {      /**      * The array of settings      *      * @var array $settings      */     protected $settings = [];      /**      * Instantiate the class.      */     public function __construct()     {         $this-&gt;loadSettings();     }      /**      * Pull the settings from the database and cache them.      *      * @return void;      */     protected function loadSettings()     {         $settings = Cache::remember('settings', 24*60, function() {             return \App\Setting::all()-&gt;toArray();         });          $this-&gt;settings = array_pluck($settings, 'value', 'key');     }      /**      * Get all settings.      *      * @return array;      */     public function all()     {         return $this-&gt;settings;     }      /**      * Get a setting value by it's key.      * An array of keys can be given to retrieve multiple key-value pair's.      *      * @param  string|array  $key;      * @return string|array;      */     public function get($key)     {         if( is_array($key) ) {             $keys = [];              foreach($key as $k) {                 $keys[$k] = $this-&gt;settings[$k];             }              return $keys;         }          return $this-&gt;settings[$key];     }  }  // $foo = Setting::get('foo'); </code></pre>  <p>And now for my question: is this the best way to tackle this problem? I'm now caching all the settings when the class gets constructed. And then retrieve setting values from the cache after that.</p>  <p>I'm beginning to understand the Repository pattern in L5, but I'm not there yet. I thought that would be overkill in this case. I would love to hear if my approach makes any sence.</p>