<p>I am making a math program that allows the user to input an equation and the program will solve it.  I am trying to make it as user friendly as possible. I want the user to be able to easily type an equation in without having to worry about adding the multiplication symbol between every instance of multiplication.  </p>  <p><em>Here is an example:</em></p>  <p>User input: <code>y=xy+yz</code> Program output: <code>y=x*y+y*z</code></p>  <p>I have been able to accomplish this easily using Python's re module as follows:</p>  <pre><code>equation = "y=xy+yz" equation = re.sub(r"([xyzuvet])([xyzuvet])",r"\1*\2", equation)  # x,y,z,u,v,e, and t and variables and constants the user can use in their equation. equation = re.sub(r"([xyzuvet])([xyzuvet])",r"\1*\2", equation)  # Must run twice in the event the equation looks something like y=xyzxyz </code></pre>  <p>However I run into a problem when I introduce a special function such as <code>y=yexp(x)</code>.  When I run the code above, I will get an output of <code>y=y*e*xp(x)</code>.</p>  <p>I later updated my code to account for pi:</p>  <pre><code>equation = re.sub(r"([xyzuve]|pi)([xyzuve]|pi)",r"\1*\2", equation) equation = re.sub(r"([xyzuve]|pi)([xyzuve]|pi)",r"\1*\2", equation) </code></pre>  <p>I was thinking I could use a similar approach from above to match <code>exp</code> and prevent it from adding a <code>*</code> between the 'e' and 'x' as follows:</p>  <pre><code>equation = re.sub(r"([xyzuve]|pi|exp)([xyzuve]|pi|exp)",r"\1*\2", equation) equation = re.sub(r"([xyzuve]|pi|exp)([xyzuve]|pi|exp)",r"\1*\2", equation) </code></pre>  <p>I thougt by adding <code>exp</code> in the same way I did <code>pi</code>, it would work; but unfortunately it doesn't work.  Is there a way to treat <code>exp</code> and other functions that also contain x,y,z,u,v,t, and e as a whole?</p>  <p><em>Here are some examples of what I want an input to look like:</em></p>  <p>In: <code>y=eexp(xyz)</code>  out: <code>y=e*exp(x*y*z)</code></p>  <p>In: <code>y=pifrexp(yt)</code>  out: <code>y=pi*frexp(y*t)</code></p>  <p>In: <code>y=sin(x)exp(y)</code>  out:<code>y=sin(x)*exp(y)</code></p>