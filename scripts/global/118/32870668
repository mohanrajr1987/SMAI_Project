<p>I am using Indy TCPClient/TCPServer to verify registration of a mobile device. The process is fairly straight forward where I read an identifier on the Server Side, validate it against the database control file and send back a response to the client.</p>  <p>Everything appears to work correctly for the most part but periodically I get the EIDConnClosedGracefully Exception on the Server Side. I can't seem to pinpoint exactly where the connection is being closed improperly. In fact, it appears that the Server is executing a readln when it is not supposed to (after the Connection is closed) and I do not know why. Possibly I am not synchronizing properly. I have the Indy Silent Exceptions set to ignore in my Tools/Options/Debugger Options but I would like to know what is throwing the exception. I can execute the registration function 4 or 5 times and then the exception will be thrown but it is very inconsistent.</p>  <p>Any suggestions would be appreciated.</p>  <p>Following is my code:</p>  <p>Server</p>  <pre><code>  try     MIRec.RecType := AContext.Connection.IOHandler.ReadLn;      if (MIRec.RecType = 'I')     or (MIRec.RecType = 'R') then     begin // Verify the connecting device is registered       MIRec.Identifier := AContext.Connection.IOHandler.ReadLn;        qryMobileDevice.Close;       qryMobileDevice.Parameters.ParamByName('IDENTIFIER').Value := MIRec.Identifier;       qryMobileDevice.Open;        AContext.Connection.IOHandler.WriteLn(qryMobileDevice.FindField('ACTIVE').AsString);        MIRec.DeviceName := AContext.Connection.IOHandler.ReadLn;       if (MIRec.RecType = 'I') then          LogEntry := 'A Connection Has Been Established With: ' + MIRec.DeviceName       else       begin // Register the Device in STIKS       if qryMobileDevice.EOF then       begin         LogEntry := 'Registering: ' + MiRec.Text + '; ' + MIRec.Identifier + '; ' + FormatDateTime('ddd. mmmm d/yyyy, h:mm:ss AM/PM', Now);  // If Record Does not exist Add to the Control File;         NextId := GetNextId('NEXT_MOBILE_DEVICE_ID');          qryMobileDevice.Insert;         qryMobileDevice.FieldByName('MOBILE_DEVICE_ID').Value := NextId;         qryMobileDevice.FieldByName('IDENTIFIER').Value := MIRec.Identifier;         qryMobileDevice.FieldByName('DESCRIPTION').Value := MiRec.Text;         qryMobileDevice.FieldByName('ACTIVE').Value := 'T';         qryMobileDevice.FieldByName('OPERATOR_SAVED').Value := 'From App';         qryMobileDevice.FieldByName('DATE_SAVED').Value := Now;         qryMobileDevice.Post;       end       else       begin // Device has been Flagged and registration refused.         if qryMobileDevice.FindField('ACTIVE').AsString = 'T' then            LogEntry := '** Registration Successful: ' + MiRec.Text + '; ' + MIRec.Identifier + '; ' + FormatDateTime('ddd. mmmm d/yyyy, h:mm:ss AM/PM', Now)         else            LogEntry := '** Registration Refused: ' + MiRec.Text + '; ' + MIRec.Identifier + '; ' + FormatDateTime('ddd. mmmm d/yyyy, h:mm:ss AM/PM', Now);       end;        qryMobileDevice.Close;     end;      TThread.Synchronize(nil,       procedure       begin         Memo1.Lines.Add(LogEntry);       end);     end;   except     on e: exception do     begin       Memo1.Lines.Add('** An error occurred Receiving File ' + #13#10 + 'With a message: ' + E.Message);     end;   end; </code></pre>  <p>Client</p>  <pre><code>  if MessageDlg('Register Device With Server?', TMsgDlgType.mtConfirmation, [TMsgDlgBtn.mbNo, TMsgDlgBtn.mbYes], 0) = mrNo then Exit;    try     IdTCPClient1.Connect;     try       MainForm.IdTCPClient1.IOHandler.WriteLn('R'); // Tell Server we are sending a Registration Record        Device := TUIDevice.Wrap(TUIDevice.OCClass.currentDevice);       IdTCPClient1.IOHandler.WriteLn(NSStrToStr(Device.identifierForVendor.UUIDString));       Registered := IdTCPClient1.IOHandler.ReadLn;  // Get response from server       Authenticated := (Registered = 'T');       IdTCPClient1.IOHandler.WriteLn(NSStrToStr(Device.Name));     finally       IdTCPClient1.DisConnect;        if Registered &lt;&gt; 'T' then          MessageDlg('Registration Failed!', TMsgDlgType.mtInformation, [TMsgDlgBtn.mbOK], 0)       else       begin         Authenticated := True;         MessageDlg('Registration Has Completed Successfully!', TMsgDlgType.mtInformation, [TMsgDlgBtn.mbOK], 0);       end;     end;   except     on e: exception do     begin         MessageDlg('** An error occurred Registering Device ' + #13#10 + 'With a message: ' + E.Message, TMsgDlgType.mtInformation, [TMsgDlgBtn.mbOK], 0);     end;   end; </code></pre>  <p>Output from my log.</p>  <pre><code>A Client connected ** Registration Successful: ; 7FFC0274-AFB1-4E35-B8D9-F987B587804D; Wed. September 30/2015, 9:36:54 AM A Client Disconnected A Client connected ** Registration Successful: ; 7FFC0274-AFB1-4E35-B8D9-F987B587804D; Wed. September 30/2015, 9:37:00 AM A Client Disconnected A Client connected ** Registration Successful: ; 7FFC0274-AFB1-4E35-B8D9-F987B587804D; Wed. September 30/2015, 9:37:04 AM ** An error occurred Receiving File  With a message: Connection Closed Gracefully. A Client Disconnected </code></pre>