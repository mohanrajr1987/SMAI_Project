<p>I have a code that puts 2 Forms side by side and works very fine, but I can see that when I'm resizing the Form1, Form2 also is resized, but resized for down.</p>  <p>So, how make for Form2 no resize for down (since that Form1 is greater than Form2) when Form1 be resized?</p>  <p>Following is the code used for put 2 Forms side by side:</p>  <pre><code>unit Unit1;  interface  uses   Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,   Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls;  type   TForm1 = class(TForm)     Button1: TButton;     procedure Button1Click(Sender: TObject);     procedure FormClose(Sender: TObject; var Action: TCloseAction);  // Close on close     procedure FormResize(Sender: TObject);  // Maximized, Minimized etc   private     { Private declarations }   public     { Public declarations }     procedure WMMoveForm(var AMessage: TWMMove); message WM_MOVE;    // Lip form2 to main on form size changed     procedure WMSizeMove(var AMessage: TWMSize); message WM_SIZING;  // Lip form2 to main on form move   end;  var   Form1: TForm1;  implementation  {$R *.dfm}  uses Unit2;      procedure TForm1.Button1Click(Sender: TObject);     begin         Form2.Show();     end;       procedure TForm1.FormClose(Sender: TObject; var Action: TCloseAction);     begin         if Action = caFree then Form2.Close;     end;      procedure TForm1.FormResize(Sender: TObject);     begin         Form2.Visible := Self.WindowState &lt;&gt; wsMaximized;         if Form2.Visible then             Form2.WindowState := Self.WindowState; {        case Self.WindowState of             TWindowState.wsNormal:  PostMessage(Form2.Handle, WM_SYSCOMMAND, SC_MINIMIZE, 0);             TWindowState.wsMinimized: PostMessage(Form2.Handle, WM_SYSCOMMAND, SC_MINIMIZE, 0);             TWindowState.wsMaximized: PostMessage(Form2.Handle, WM_SYSCOMMAND, SC_RESTORE, 0);         end;}     end;      procedure TForm1.WMMoveForm(var AMessage: TWMMove);     begin         if Assigned(Form2) and Form2.Visible then         begin             Form2.Top := Self.Top;             Form2.Left := Self.Left + Self.Width;         end;         inherited;     end;      procedure TForm1.WMSizeMove(var AMessage: TWMSize);     begin         if Form2.Visible then         begin             Form2.Top := Self.Top;             Form2.Left := Self.Left + Self.Width;             Form2.Height := Self.Height;         end;         inherited;     end;  end. </code></pre>