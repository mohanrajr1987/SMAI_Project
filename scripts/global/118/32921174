<p>I have a self defined datatype, and a global variable of said type. I pass this global variable as an argument to several methods, the value of the variable seems to change unintentionally.</p>  <p>I discovered that all objects are passed as reference parameters even when not declared as var parameters (or so I think).</p>  <p>So I tried to fix the problem by introducing a local variable to all the methods that I pass the object into, then assigning the local variable to the parameter, and then declaring the object parameter as a const - yet the value of the global variable still changes, how do I overcome this?</p>  <pre><code>{unit something} interface     uses       SysUtils     type       ByteArr = Array of Byte;       Num = record          sign : byte;          int : ByteArr;          frac : ByteArr;       end;     function StrToNum(input : string):Num;    function NumToStr(input : Num):string;    function Dostuff(const a : Num):Num  implementation      function StrToNum(input : string):Num;     begin        //code to convert a string into 'Num' type     end;      function NumToStr(input : Num):string;     begin        //code to output a string version of a 'Num' input     end;      function Dostuff(const a : Num):Num     var        somevar : num;     begin        somevar := a;        code; //code to change value of 'somevar'        result := somevar;     end;         end.  {console program} uses    something in 'something.pas'; var    globalvar : num;  begin    globalvar := StrToNum('2');    writeln(NumToStr(globalvar)); //shows 2    writeln(NumToStr(Dostuff(globalvar))); //shows correct value    writeln(numtostr(globalvar)); //no longer displays 2 end. </code></pre>