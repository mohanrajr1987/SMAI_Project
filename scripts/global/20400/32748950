<p>Say I've labeled an image with <a href="http://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.measurements.label.html" rel="nofollow">scipy.ndimage.measurements.label</a> like so:</p>  <pre><code>[[0, 1, 0, 0, 0, 0],  [0, 1, 0, 0, 0, 0],  [0, 1, 0, 0, 0, 0],  [0, 0, 0, 0, 3, 0],  [2, 2, 0, 0, 0, 0],  [2, 2, 0, 0, 0, 0]] </code></pre>  <p>What's a fast way to collect the coordinates belonging to each label? I.e. something like:</p>  <pre><code>{ 1: [[0, 1], [1, 1], [2, 1]],   2: [[4, 0], [4, 1], [5, 0], [5, 1]],   3: [[3, 4]] } </code></pre>  <p>I'm working with images that are ~15,000 x 5000 pixels in size, and roughly half of each image's pixels are labeled (i.e. non-zero).</p>  <p>Rather than iterating through the entire image with <code>nditer</code>, would it be faster to do something like <code>np.where(img == label)</code> for each label?</p>  <p>EDIT:</p>  <p>Which algorithm is fastest depends on how big the labeled image is as compared to how many labels it has. Warren Weckesser and Salvador Dali / BHAT IRSHAD's methods (which are based on <code>np.nonzero</code> and <code>np.where</code>) all seem to scale linearly with the number of labels, whereas iterating through each image element with <code>nditer</code> obviously scales linearly with the size of labeled image.</p>  <p>The results of a small test:</p>  <pre><code>size: 1000 x 1000, num_labels: 10 weckesser ... 0.214357852936s  dali ... 0.650229930878s  nditer ... 6.53645992279s    size: 1000 x 1000, num_labels: 100 weckesser ... 0.936990022659s  dali ... 1.33582305908s  nditer ... 6.81486487389s    size: 1000 x 1000, num_labels: 1000 weckesser ... 8.43906402588s  dali ... 9.81333303452s  nditer ... 7.47897100449s    size: 1000 x 1000, num_labels: 10000 weckesser ... 100.405524015s  dali ... 118.17239809s  nditer ... 9.14583897591s </code></pre>  <p>So the question becomes more specific:</p>  <p>For labeled images in which the number of labels is on the order of <code>sqrt(size(image))</code> is there an algorithm to gather label coordinates that is faster than iterating through every image element (i.e. with <code>nditer</code>)?</p>