<p>I am using scipy.correlate to calculate the correlation of a synthetic source time series with a real time series.</p>  <p>As scipy.correlate does not normalize the correlation values automatically, I have done so myself, however some of the values are greater than 1.</p>  <p>The script below loops over different source traces and different real traces to calculate the maximum correlation and it's lag along the trace. </p>  <p>I am unsure why I am getting correlation values greater than 1, if someone could give some advice.</p>  <p>Code &amp; output below.</p>  <pre><code>for f in os.listdir('/home/klg48/oceanography_data/JCR298/XBT/interpolated_plots/synthetic_traces/single_trace_synthetics/ricker_synthetics/'):   #print f   fname=f[:8]   hz=f[9:11]   print fname   # LOAD IN THE DATA    # REAL TRACE   data=np.loadtxt('/home/klg48/oceanography_data/JCR298/XBT/interpolated_plots/synthetic_traces/single_trace_synthetics/real_traces/'+fname+'_trace.xy')   real=data[:,[0]]   independant=data[:,[1]]    # RICKER SOUCE GENERATED SYNTHETIC   data=np.loadtxt('/home/klg48/oceanography_data/JCR298/XBT/interpolated_plots/synthetic_traces/single_trace_synthetics/ricker_synthetics/'+f+'')   synth=data[:,[0]]   synth_independant=data[:,[1]]   #print synth      # CONVERT TO 1D ARRAY   a = real[:,0]   b = synth[:,0]    ## NORMALIZE THE DATA   norm_a = (a - np.mean(a))/(np.std(a))   norm_b = (b - np.mean(b))/(np.std(b))    ## CALCULATE CORRELATION   auto_corr = scipy.correlate(norm_a,norm_a,"full")   ricker_corr = scipy.correlate(norm_b,norm_a,"full")    #print max(auto_corr)/len(norm_a)   #print fname,hz,max(ricker_corr)/len(norm_a)   corr = max(ricker_corr)/len(norm_a)    file1=open(os.path.join('corr_vals'),'a')   file1.write('%s ' % fname)   file1.write('%s ' % hz)   file1.write('%s\n' % corr)   file1.close() </code></pre>  <p>C3_00003 40 1.4086674411 C3_00006 10 0.137644753589 C3_00008 50 0.422963532145 C3_00005 40 1.12291862924 C3_00004 40 1.20266300529 C3_00010 30 0.303087225622 C3_00009 50 1.08669405103 C3_00007 20 0.181285376073 C3_00010 20 0.254593608537 C3_00002 10 0.217106097749 C3_00005 30 1.1913205949 C3_00002 20 0.27241406033 C3_00007 30 0.529459903669 C3_00008 20 0.179618135055 C3_00008 30 0.330517548155 C3_00003 50 1.42193941588 C3_00006 40 0.632807495661 C3_00007 50 0.639226301023 C3_00010 40 0.409307922409 C3_00005 50 0.942140181859 C3_00004 30 0.950523793985 etc ...</p>