<p>Hi I'm trying to implement conjugate gradient in python using nelder mead to calculate the step size. I am testing my code on an example problem of a book with a known solution. In latex the system Ax=b is described by</p>  <pre><code>\begin{align*} A=\begin{bmatrix} 3 &amp; 2 \\ 2 &amp; 6 \end{bmatrix} , b=\begin{bmatrix} 2 \\ -8 \end{bmatrix} \end{align*} </code></pre>  <p>Which makes the function f(x) we are trying to minimize </p>  <pre><code>\begin{align*} f(x)=3/2x^2+2xy+3y^2-2x+8y \end{align*} </code></pre>  <p>I tried to implement conjugate gradient using python like so</p>  <pre><code>import scipy from scipy.optimize import fmin import numpy # initial values x=1.0 y=-0.2 f=(3./2)*x**2 + 2*x*y + 3*y**2 - 2*x+8*y tau = 0.2  # function to minimize w.r.t. variable tau def mintau(x,y,tau):     x0 = x-tau*(3*x+2*y-2)     y0 = y-tau*(2*x+6*y+8)     return (3./2)*x0**2 + 2*x0*y0 + 3*y0**2 - 2*x0+8*y0  x = numpy.array([x]) y = numpy.array([y]) f = numpy.array([f])  for j in range(100):     tau = scipy.optimize.fmin(func=mintau, x0=tau, args=(x[-1],y[-1]) )      x = numpy.append(x, x[j] - tau*(3*x[j]+2*y[j]-2) )     y = numpy.append(y, y[j] - tau*(2*x[j]+6*y[j]+8) )     fjp1 = (3./2)*x[j+1]**2 + 2*x[j+1]*y[j+1] + 3*y[j+1]**2 - 2*x[j+1]+8*y[j+1]     f = numpy.append(f,fjp1)      if abs(f[j+1]-f[j]) &lt; 10**-6:         print "we beat the tolerance"     break </code></pre>  <blockquote>   <p>The problem is the function value diverges and the method does not find the solution x=[2,-2].</p> </blockquote>  <p>The text provides matlab code to solve this problem. I ran the code and indeed it finds the solution using Nelder-Mead for the step size. It is,</p>  <pre><code>x(1)=1; y(1)=-0.2; % initial guess and function value f(1)=(3/2)*x(1)^2+2*x(1)*y(1)+3*y(1)^2-2*x(1)+8*y(1); for j=1:100 % iteration loop      % Nelder Mead Minimization for step size tau     tau=fminsearch(’tausearch’,0.2,[],x(end),y(end)); % optimal tau      x(j+1)=x(j)-tau*(3*x(j)+2*y(j)-2); % update x, y, and f     y(j+1)=y(j)-tau*(2*x(j)+6*y(j)+8);     f(j+1)=(3/2)*x(j+1)^2+2*x(j+1)*y(j+1)+3*y(j+1)^2-2*x(j+1)+8*y(j+1);     if abs(f(j+1)-f(j))&lt;10^(-6) % check convergence         break     end end </code></pre>  <p>Then in a separate file</p>  <pre><code>function mintau=tausearch(tau,x,y) x0=x-tau*(3*x+2*y-2); y0=y-tau*(2*x+6*y+8); mintau= (3/2)*x0^2+2*x0*y0+3*y0^2-2*x0+8*y0; </code></pre>  <blockquote>   <p>I would like assistance to understand why my python code diverges (I suspect I'm using incorrect syntax for scipy.optimize.fmin() ), then rewrite the code so it converges to the correct solution. Assistance would be greatly appreciated.</p> </blockquote>