<p>I'm interested in replicating the sort of functionality that you see with Apple frameworks: where Apps can take advantage of new frameworks on more recent versions of iOS but don't fail when they're missing.</p>  <p>Of course if there's another approach to solving the problem I'd love to see it.</p>  <hr>  <p>The position I'm in is as follows:</p>  <p>Company-A provides an iOS framework (hereafter named FrameA) to third parties that they can link into their Apps.</p>  <p>I am tasked with creating an optional module that can be "bolted on" to FrameA, but isn't actually a part of it (this is due to FrameA often being updated and customized for different customers and other business limitations).</p>  <p>The third parties can choose to use the bolt-on library (or framework, or whatever will work) or not. If it is present FrameA must link it and the code execute it's functionality. If it is not present then FrameA continues as it does now. It must work for third parties that receive new versions of FrameA but not the bolt-on library. I should make as few changes to FrameA as possible since those changes will have to be maintained going forwards by another team.</p>  <p>I also need to do this within Apples submission rules, the solution must support at least iOS6, 7 and 8. So Dynamic linking is not allowed. Company-A provides FrameA directly to the third-parties, so the only part that Apple has to approve is the final App.</p>