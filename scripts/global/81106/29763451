<p>I'm using autolayout to correctly lay out some views inside a UICollectionViewCell. It works fine with iOS 8, but when I try to run it on iOS 7 or iOS 6, the cells appearance varies widely everytime they are laid out (sometimes I see small changes in size and positions - one or two pixels - and sometimes big changes, resulting in some pretty messed up cells).</p>  <p>I swear I tried hard to find anyone with the same problem, but I couldn't. I didn't find any answer that could help me solve or even get close to understanding the problem either.</p>  <p>I would appreciate any inputs on how to solve or even debug this better.</p>  <p><strong>MORE INFO</strong></p>  <p>I'm using Interface Builder to create the view and set up the constraints. The cell's view has a total of 17 subviews, including UIViews and their subviews, and they do have a great number of constraints.</p>  <p>I update a UIColletionView (which includes a table of my custom cells) everytime I press a button.</p>  <p>What I find outrageous here is that when I run the app, everytime I press the button, the cells' subviews change their positions and sizes. I never change any constraint or frame programatically.</p>  <p>Also, the behavior is worst on iOS6. The frames chage a lot more and autolayout runs really slow (it take 3-10 seconds to update the collection view on iPod Touch 5th Generation, even if it has only one cell).</p>  <p>Worst of all, if I keep updating the UICollectionView, sometimes XCode will complain of constraints not being simultaneously satisfied. But most of the time it works just fine.</p>  <p>I'm also running into crashes in some devices when removing some of my autolayout-enabled views from superview. I found this is a strange behavior of Autolayout engine, which could get to some bad calculations due to float errors. I'm wondering maybe this two problems are related.</p>  <p>As I couldn't find any help in the entire web after searching for almost an entire day, I'm starting to think this must be a stupid error with a stupid solution. I do hope so.</p>  <p>Thanks in advance!</p>  <p><strong>SCREENSHOTS</strong></p>  <p>I'm adding some screenshots to help you visualize the problem. To get those screenshots, I run the app on iPod Touch 5th generation with iOS 6. The behavior is different on iPhone 4 with iOS 7 (it behaves much better, but I still get the elements moving around some pixels).</p>  <p>Everytime I press the "Update" button, I remove the view which contains the UICollectionView from its superview (the entire screen) and add it again. I do not destroy this view, it is created only once. I thought that could be the origin of the problem (some autolayout calculation buffer holding values from previous layout), but destroying it didn't solve the problem (altough it did make the displacements less frequent and disturbing, but at the cost of performance).</p>  <p>This is the expected behavior. This is the view I get when the app open:</p>  <p><img src="http://i.stack.imgur.com/ronOo.png" alt="This is the expected behavior. This is the view I get when the app open."> Misplaced views. This is the result of pressing the "Update" button for the first time:</p>  <p><img src="http://i.stack.imgur.com/dj3ek.png" alt="Misplaced views. This is the result of pressing the &quot;Update&quot; button for the first time."> Result after pressing the button a second time:</p>  <p><img src="http://i.stack.imgur.com/jwfE9.png" alt="Result after pressing the button a second time."> Result after pressing the button a third time:</p>  <p><img src="http://i.stack.imgur.com/njPQ0.png" alt="Result after pressing the button a third time."> If I keep pressing the button, I get layouts alternating between screenshots 3 and 4 (or at least they look pretty like the same).</p>  <p><strong>I'M GIVING UP AUTOLAYOUT AND HERE IS WHY</strong></p>  <p>Well, I'm really giving up using auto layout. I've spent almost a week learning to do a lot of thing with it (specially laying out and animating views). I thought it is a wonderful and powerful feature and I learned to love it. But then I needed to support iOS6 and iOS7.</p>  <p>I found it only works great on iOS8 (with any device, old or not). I don't know if I'm doing something really stupid, because I can't find any threads on the internet talking about three killing problems I've been facing.</p>  <p>I'll list them here just in case somebody come across this thread sometime in the future with the same problem or with a solution. They are listed ordered by the priority I gave to them to why I'm giving up autolayout.</p>  <p><strong>1) Performance</strong></p>  <p>Autolayout runs really slow on iOS6 and a little slow on iOS7 (compared to iOS8 - remember I'm developing with XCode 6.2 and iOS8.2 SDK). The same hardware with iOS8 runs the same code just fine.</p>  <p>To get to this conclusion, I ran my app in two iPod Touch 5, one with iOS6 and the other with iOS8. The difference in performance was pretty clear. Loading or dismissing a simple view (11 subviews) in iOS6 could take more than 5 seconds (on iOS 8, never took more than 1). On iPhone 4 with iOS7, the same code performed much better than in iOS6, but slower than in iOS8.</p>  <p>I'm sure it is an autolayout related problem because, using the same code, I disabled autolayout (and size classes) for some specific XIBs and they runned stupendously fast on iOS6, while the other views kept being slow <em>(if you are going to try this, remember to delete the old app, clean the project and build it again, or it will still use autolayout)</em>.</p>  <p><strong>2) Random crashes on specific devices with iOS6 or 7 when dismissing a view controller or removing a view from its superview</strong></p>  <p>The problem is clearly stated <a href="http://stackoverflow.com/questions/17688370/autolayout-removefromsuperview-removeconstraints-throws-exception-and-crashes/27284071#27284071">here</a>. It seems I'm bumping into the float error problem, because I can see some e-08 numbers on the crash log.</p>  <p>This is a serious problem for autolayout adoption. It's a random, unpredictable - but reproducible - crash. The same layout constraint can work in various devices, with different iOS versions. But it can also crash in some of them. Example: I had a view that worked fine on iPhone 4 (iOS7) and that crashed when dismissed on iPad Air (same iOS). The solution? Change the constraint's items relation from</p>  <p><strong>x.width = y.widht*0.8 + 0</strong></p>  <p>to</p>  <p><strong>y.width = x.widht*1.25 + 0</strong></p>  <p>which is equivalent matematically, but avoided the crash.</p>  <p>I searched a lot if anybody had a way to know when this crash could happen or how to tackle it down forever, so I could make my views without having to worry about testing them on every device, with every iOS version, to make sure it wouldn't crash. I couldn't find a away to fix it.</p>  <p>This crash doesn't seem to happen in iOS8.</p>  <p>PS: I tried removing the constraints from all my subviews before removing the view from superview, but then the crash occurred when removing one constraint. I couldn't find any good reason to why it was crashing when removed.</p>  <p><strong>3) The problem I describe in the first part of this question</strong></p>  <p>It's a third priority problem because I could solve this designing the cells without autolayout. This would be a minor problem if the rest of the app do not use cells, which is the case.</p>  <p>But it is still a problem I cannot understand nor solve with autolayout. When I remove autolayout, the cells are displayed just fine. And they do work fine on iOS8 and I double checked if I was using some specific iOS8 feature and I'm not.</p>  <p><strong>BOTTOM LINE</strong></p>  <p>I'm giving up autolayout while I have to support both iOS6 and 7 or until I can find a way to fix at least the first two problems I listed above.</p>  <p>I've tasted the power of Autolayout and I really like it, but I can't develop worrying about unpredictable crashes hidden on some mysterious dismiss in a specific hardware with a specific iOS version. Nor can I accept the poor performance of iOS6 (sometime soon we should drop support to iOS6, though, so this will be a lost problem).</p>