<p>My question is less about production code and more of an issue with official documentation for someone who wants to learn a new script or language.</p>  <p>After installing <strong>express-generator</strong> (0.12.2) and <strong>express</strong> (4.13.1), I am able to run the following successfully create a new project by running the following command:</p>  <pre><code>npm express example </code></pre>  <p>The <strong>example</strong> directory is now on my drive and I then change directories and install all default dependencies from the package.JSON file:</p>  <pre><code>cd example &amp;&amp; npm install </code></pre>  <p>No problems so far.</p>  <p>I open the <strong>app.js</strong> file located in the root of my 'example' directory and the Express 4 version of the <strong>app.js</strong> is as follows:</p>  <pre><code>var express = require('express'); var path = require('path'); var favicon = require('serve-favicon'); var logger = require('morgan'); var cookieParser = require('cookie-parser'); var bodyParser = require('body-parser');  var routes = require('./routes/index'); var users = require('./routes/users');  var app = express();  // view engine setup app.set('views', path.join(__dirname, 'views')); app.set('view engine', 'jade');  // uncomment after placing your favicon in /public //app.use(favicon(path.join(__dirname, 'public', 'favicon.ico'))); app.use(logger('dev')); app.use(bodyParser.json()); app.use(bodyParser.urlencoded({ extended: false })); app.use(cookieParser()); app.use(express.static(path.join(__dirname, 'public')));  app.use('/', routes); app.use('/users', users);  // catch 404 and forward to error handler app.use(function(req, res, next) {   var err = new Error('Not Found');   err.status = 404;   next(err); });  // error handlers  // development error handler // will print stacktrace if (app.get('env') === 'development') {   app.use(function(err, req, res, next) {     res.status(err.status || 500);     res.render('error', {       message: err.message,       error: err     });   }); }  // production error handler // no stacktraces leaked to user app.use(function(err, req, res, next) {   res.status(err.status || 500);   res.render('error', {     message: err.message,     error: {}       }); });  app.listen(3000) module.exports = app; </code></pre>  <p>After adding the <strong>app.listen(3000);</strong> line (second from last line) as learned from a previous thread (<a href="http://stackoverflow.com/questions/32772292/starting-express-js-using-app-js-or-npm-start">Starting Express.js Using app.js or &#39;npm start&#39;?</a>), running the following command allows me to server the <strong>example</strong> directory:</p>  <pre><code>node app.js </code></pre>  <p>All is well. However, after visiting the Express documentation, also for version 4 (<a href="http://expressjs.com/guide/routing.html" rel="nofollow">http://expressjs.com/guide/routing.html</a>), I see the following instructions:</p>  <blockquote>   <p>Route paths Route paths, in combination with a request method, define   the endpoints at which requests can be made to. They can be strings,   string patterns, or regular expressions.   <strong>Examples of route paths based on strings:</strong></p> </blockquote>  <pre><code>// will match request to the root app.get('/', function (req, res) {   res.send('root'); });  // will match requests to /about app.get('/about', function (req, res) {   res.send('about'); });  // will match request to /random.text app.get('/random.text', function (req, res) {   res.send('random.text'); }); </code></pre>  <p>After adding the following line from the Express 4 documentation:</p>  <pre><code>// will match requests to /about app.get('/about', function (req, res) {   res.send('about'); }); </code></pre>  <p>And visiting the following URL:</p>  <pre><code>http://127.0.0.1:3000/about </code></pre>  <p>I receive a <strong>404 not found</strong> error, along with an error at line 30, which is:</p>  <pre><code>28 // application routes 29 app.post('/', function(req, res, next) { 30  res.send(req.body); 31 }); </code></pre>  <p>Any ideas?</p>