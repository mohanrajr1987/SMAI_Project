<p>My site is structured pretty typically, paths like:</p>  <pre><code>/home /home/search /categories /categories/misc </code></pre>  <p>What I need to happen is to have a dynamic set of prefixes put on the path and have it map to the same place, and more importantly, have that prefix kept throughout the site. The prefix won't always be there, but when it's there, it needs to be kept.</p>  <p>For example, I want <code>/client1/program1/home</code> to map to the same controller action/view as <code>/home</code>, and if there's a link on <code>/home</code> that references <code>Url.Content("~")</code> or <code>Url.Action("categories")</code>, the generated URL needs to keep the <code>/client1/program1</code> prefix of the request, for example in the latter case: <code>/client1/program1/categories</code>. I need that prefix to remain on every request to maintain custom functionality for that specific client/program. We typically manage this with sub-domains and DNS, leaving paths alone, but this particular client has compliance problems with running on multiple domains.</p>  <p>The <code>/client1/</code> part is static and can be set in code, as those change infrequently, but the <code>/program1/</code> part is dynamic and I need to support changes there without deploying new code.</p>  <p>I've been trying to get something working with some combination of URL rewriting, routes, or a custom VirtualPathProvider, but can't seem to get it to work. Session and cookies aren't really reliable enough, as they time out and can be cleared. There would be too many places to change to try to get it consistently on the query string. </p>  <p>URL rewriting strips the path info away before the application can see it. It still needs access to read what client and program it should be displaying.</p>  <p>Routes can get the request to the right controller, but subsequent requests from that page then ignore whatever the client/program was.</p>  <p>A custom <code>VirtualPathProvider</code> feels like the most promising direction, but the underlying physical path isn't actually changing. It seems more useful for having a separate application in another directory running in the root of a site. Changing it doesn't just change all the route and path handling, it alters the ability of the engine to find views.</p>  <p>Any suggestions?</p>  <p><strong>Edit</strong>: Routes handle paths that go through that engine, so things like <code>Url.Action()</code> work okay with routes. I have other URLs that are generated from <code>Url.Content()</code>, so that's probably the question I'm really asking: <strong>how can I change what <code>~</code> maps to in <code>Url.Content()</code>?</strong> I think that's why I started looking at <code>VirtualPathProvider</code> which I'm now pretty sure not at all what I need. It is more focused on mapping to local physical file paths.</p>