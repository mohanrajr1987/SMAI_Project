<p>I'm using a custom UITabBar on top of the UITabBar managed by the UITabBarController and I'm experiencing a weird behavior in with iPad running iOS 8.4.x and iOS 9.0.x:</p>  <p>I've subclassed the UITabBarController and I'm adding a custom UITabBar <em>on top</em> of the default UITabBar this way:</p>  <pre><code>    customTabBar = UITabBar(frame: CGRectZero)     ...     customTabBar!.delegate = self     view.addSubview(customTabBar!) </code></pre>  <p>And then using SnapKit making its position the same than the original UITabBar:</p>  <pre><code>    customTabBar!.snp_makeConstraints { (make) -&gt; Void in         make.left.edges.equalTo(view)     } </code></pre>  <p>This results in the following way (see the items): <a href="http://i.stack.imgur.com/mN9n7.png" rel="nofollow"><img src="http://i.stack.imgur.com/mN9n7.png" alt="enter image description here"></a></p>  <p>If I modify the auto layout constraints the way that the height of the custom UITabBar <em>is not</em> 49 (default in iOS 8+), then the items lay out correctly:</p>  <pre><code>    customTabBar!.snp_makeConstraints { (make) -&gt; Void in         make.left.equalTo(view)         make.bottom.equalTo(view)         make.right.equalTo(view)         make.top.equalTo(view.snp_bottom).offset(-50.0)     } </code></pre>  <p><a href="http://i.stack.imgur.com/6mCOn.png" rel="nofollow"><img src="http://i.stack.imgur.com/6mCOn.png" alt="enter image description here"></a></p>  <p>I've ruled out the following possibilities:</p>  <ul> <li>Used autoresizing masks instead of auto layout</li> <li>Used manually created auto layout constraints instead of SnapKit</li> <li>Force-positioned the view in <code>viewWillLayoutSubviews</code> without auto layout constraints</li> </ul>  <p>Any idea what's going on with the 49-height custom UITabBar?</p>  <p>Remark #1: I understand this is not the way the UITabBarController was designed to work, but it seems to work fine with iPhones. I'm just trying to find out what causes the behavior in order to understand the internals of the UITabBarController.</p>  <p>Remark #2: The reason I'm doing this in the first place is that I want to show view (managed by different view controllers) in the UITabBarController that do not show up in the bottom bar, but can be "selected" as a tab bar page still from the UITabBarController.</p>