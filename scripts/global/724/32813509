<p>I am doing a little C++ program that will read binary file into a buffer, XOR it with a key and write to the same file. It is a simple file encryption project. I have working part for the small files, that are smaller than the definied buffer, and it is working without any problem: </p>  <pre><code>void fileXOR(string filepath) {     char xorKey = 0x55;     fstream file(filepath, ios::in | ios::out | ios::binary | ios::ate);      if (file.is_open())     {     streampos size;     char *buffer;     unsigned long long int filepos = 0;     size = file.tellg();     file.seekg(0, ios::beg);          if (size &lt;= BUFFER_SIZE) //FOR FILES SMALLER THAN BUFFER SIZE         {             buffer = new char[size];             file.read(buffer, size);              for (int i = 0; i &lt; size; i++)             {                 buffer[i] = buffer[i] ^ xorKey();             }              file.seekp(0, ios::beg);             file.write(buffer, size);             delete[] buffer;         }      file.close(); </code></pre>  <p>But I can't figure how to do it with bigger files, when it is needed to split them into smaller chunks:</p>  <pre><code>else     {         while (!file.eof())         {             buffer = new char[BUFFER_SIZE];             file.read(buffer, BUFFER_SIZE);             {                 for (int i = 0; i &lt; BUFFER_SIZE; i++)                 {                     buffer[i] = buffer[i] ^ xorKey();                 }             }              file.seekp(filepos);             file.write(buffer, BUFFER_SIZE);             filepos = filepos + BUFFER_SIZE;             file.seekg(filepos);             delete[] buffer;         }     }     file.close(); } </code></pre>