<p>I have written a script you could basically reduce to the following:</p>  <pre><code>def Readhtml(a,b):     read some values from an html file     return a list of values  def ReadSQL(a,b):     Read some values from an SQL Database     return a list of values  def mainfunction(Variable):     result = Variable['Readfunction'](Variable['Parameter1'],Variable['Parameter2']) #Variable['Readfunction'] is the function Readhtml or ReadSQL     return result </code></pre>  <p>where <code>Variable</code> is a dictionary with as set of input parameters. </p>  <p>Some of those input parameters are functions to use to read out values or to do operations on them. I have a large number of different variables (about 1000) each of which has a dictionary associated. As long as I define my input dictionary at the beginning of my script everything works fine. But I would like to be able to reuse those dictionaries and thus to save them to a / multiple human readable and writable input file / input files. The problem is I can't figure out how to save / read the dictionary entry <code>Variable['Readfunction']</code> in such a way python understands it's not just a string but the function defined in my script I want to use.</p>  <p>Thus I have two questions:</p>  <ol> <li>I could just write a dirty workaround, saving the Variable['Readfunction'] as string to a file, reread it as string and write a function matching the function name string to the function. Is there a better way?</li> <li>Is the whole architecture none-sense? Should I have built it in a complete other way to avoid that problem? I'm not that great of a programmer, so how should you do such a thing in a proper way? The program is already to complex to rewrite it completely, so this is more about learning for the next time.</li> </ol>