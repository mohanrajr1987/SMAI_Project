<p>My program currently has this working:</p>  <pre><code>        Bank bank = new Bank();          bank.openAccount(new CheckingAccount(10100, new Customer("First", "Last"),500.00,false));         bank.openAccount(new CheckingAccount(10101, new Customer("First", "Last"),2000.00,true));         bank.openAccount(new SavingsAccount(2010, new Customer("First", "Last"),5000.00,0.02)); </code></pre>  <p>Now I am trying to load this information from a file instead, but I ran into a bit of a wall. I want the new Customer information to include both the first and last name which are stored in separate index positions as separate variables, but while this will work:</p>  <pre><code>        new Customer[FIRST_INDEX],  </code></pre>  <p>I can't seem to get it to accept two index positions without creating a new Customer again. This is turn is causing issue with the method in Accounts where I'd like to keep the same format. How can I go about doing this?</p>  <pre><code>    public CheckingAccount(int accountNumber, Customer owner, double currentBalance, boolean freeChecks)  {     super(accountNumber, owner, currentBalance);     this.freeChecks = freeChecks; } </code></pre>  <p>Another problem I am running into is that the last index position can be one of two variables depending on if I am dealing with a checking account or a savings account:</p>  <pre><code>private final static int FREE_CHECKS_INDEX = 4; // This loads a boolean private final static int INTEREST_INDEX = 4;    // This loads a double </code></pre>  <p>Given this, I'm not entirely sure if my above approach would even work at all. The program is supposed to load either a Checking Account or Savings Account object, but since both types of accounts are stored in the same file I am wondering if I could read the last index position of each line of the text file before creating the object, but I'm not really sure how to go about doing that.</p>  <p>To be clear, I have this problem working perfectly without loading the data from the file, I am just unsure about the best approach for adapting it without having to rewrite all my other classes. Here's the new thing I am trying to do which I know isn't right:</p>  <pre><code>    protected static void loadAccountInformationFromFile() throws Exception      {         try ( Scanner fin = new Scanner(new File(INPUT_CUSTOMER_FILE)) )              {                 String record;                 String[] fields;                   while ( fin.hasNext() )                      {                         record = fin.nextLine();                          fields = record.split(",");                          Bank bank = new Bank();                          bank.openAccount                             (                                 new CheckingAccount(Integer.parseInt(accountNumber[ACCOUNT_NUMBER_INDEX]),                                  new Customer[FIRST_INDEX, LAST_INDEX],                                  currentBalance[BALANCE_INDEX],                                  freeChecks[FREE_CHECKS_INDEX]                                 )                             );                     }             } catch (Exception e)                  {                     throw e;                     } // end try         }  </code></pre>