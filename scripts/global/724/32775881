<p>I know what this code does: copies the content from the memory pointed by &amp;x into the file, for sizeof(double) bytes; reads the file and copies into the memory pointed by &amp;y, for sizeof(double) bytes.</p>  <pre><code>double x,y; std::ofstream out( "abc.dat", std::ios::out | std::ios::binary); out.write( reinterpret_cast&lt;const char*&gt;(&amp;x), sizeof(double)); out.close();  std::ifstream in( "abc.dat", std::ios::in | std::ios::binary); in.read( reinterpret_cast&lt;char*&gt;(&amp;y), sizeof(double)); in.close(); </code></pre>  <p>From what I understand, when doing binary IO, the data flowing between the file and RAM should be in terms of bytes. Then the &amp;x address should be passed as a byte location: something like out.write( reinterpret_cast&lt; const byte*>(&amp;x), sizeof(double)) would make sense. However C++ does not define a type byte, and here the char* can be understood as a byte location, am I right? I note that the size of char is identical as one byte, they are both 8 bits.</p>