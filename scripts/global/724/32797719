<p><code>PrintWriter</code> is used to write data as text into files while <code>FileOutputStream</code> is used to write in binary. </p>  <p>Consider  </p>  <pre><code>import java.io.*;  public class Main {     public static void main(String[] args) throws Exception {         PrintWriter pw = new PrintWriter(new File("data"));         for(int i=1;i&lt;=10;++i)             pw.print(i);         pw.close();     } } </code></pre>  <p>Output : </p>  <pre><code>12345678910 </code></pre>  <p>However, if I use <code>FileOutputStream</code> I get binary data which is not readable in text.</p>  <pre><code>import java.io.*; import java.util.*;  public class Main {     public static void main(String[] args) throws Exception {         FileOutputStream fos = new FileOutputStream(new File("data")) ;          for(int i= 1; i&lt;=10; ++i)             fos.write(i);         fos.close();     } } </code></pre>  <p>gives output:</p>  <p><a href="http://i.stack.imgur.com/8EFRh.jpg" rel="nofollow"><img src="http://i.stack.imgur.com/8EFRh.jpg" alt="enter image description here"></a></p>  <p>Now, if I use <code>PrintWriter</code> with <code>FileOutputStream</code>, then I still get text data as shown below. Why? How does it become text and why?</p>  <pre><code>import java.io.*; import java.util.*;  public class Main {     public static void main(String[] args) throws Exception {         PrintWriter pw = new PrintWriter( new FileOutputStream(new File("data")));         for(int i=1 ;i&lt;=10;++i)             pw.print(i);          pw.close();     } } </code></pre>  <p>Output : </p>  <pre><code>12345678910 </code></pre>  <p>****** Edit :*** </p>  <p>Now consider , The case  </p>  <pre><code>import java.io.*; import java.util.*;  public class Main {      public static void main(String[] args) throws Exception     {         PrintWriter pw = new PrintWriter( new DataOutputStream(new FileOutputStream(new File("data"))));         for(int i=1 ;i&lt;=10;++i)             pw.print(i);          pw.close();       }   } </code></pre>  <p>The output is still :      12345678910</p>  <p>According to JavaDocs : </p>  <blockquote>   <p>A data output stream lets an application write primitive Java data   types to an output stream in a portable way. An application can then   use a data input stream to read the data back in.</p> </blockquote>  <p>So, Now If PrintWriter is sending bytes to DataOutputStream , how does the whole thing works ? </p>