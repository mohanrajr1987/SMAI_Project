<p>I am new to android and I hope that you can help me with something.</p>  <p>My app is radio player that streaming radio from internet. I have two Activities , one for stations list and other for play screen. </p>  <p>Here , a pic <a href="http://i.stack.imgur.com/tPd3C.png" rel="nofollow">http://i.stack.imgur.com/tPd3C.png</a></p>  <p>As you can see my radio is playing in foreground service. My problem is play/stop button. When I am in play screen activity everything works ok, but when I go back the play activity is destroyed and button losses state. </p>  <p>When I am launching playscreen from notification everything work ok because I set a variable and I am sending that value from service to set the button state. But that is service and I know that music is playing so I know that I need to set button to "stop".</p>  <p>I tried sending broadcast receiver from service to playscreen, but   reciever is send only when service is started so that doesn't helped. </p>  <p>Is there a way to sending reciever while service is running, for example</p>  <p>open activity B > press play button>start service > get reciever  go back to activity A open activity B > get reciever</p>  <p>If I put the receiver on onStartCommand() method the broadcast will be send only when  service is started, in  my case I need brodcast while service is running.</p>  <p>Maybe broadcast is not good solution for this,tell me if there is another solution.  I am trying with broadcast bacause I want to compare radio name(in notification) with radio name in playscreen and set the button.</p>  <p>Here is playscreen code for setting view and button </p>  <pre><code> @Override protected void onCreate(Bundle savedInstanceState) {     super.onCreate(savedInstanceState);     setContentView(R.layout.play_screen);      pom = getIntent().getIntExtra("pomosna",1);       url = getIntent().getStringExtra("link");      name = getIntent().getStringExtra("ime");          img = getIntent().getIntExtra("image", R.drawable.musicicon);         icon = getIntent().getIntExtra("icon", R.drawable.musicicon);         play = (Button) findViewById(R.id.playButon);     TextView txt = (TextView) findViewById(R.id.imenaradio);     ImageView slika = (ImageView) findViewById(R.id.imageofradio);         ffmp = null;     txt.setText(name);     slika.setImageResource(img);     if(pom==2){         musicisplaying = true;         play.setBackgroundResource(R.drawable.buttonstop);     }      play.setOnClickListener(new View.OnClickListener() {         @Override         public void onClick(View v) {             buttonPlayStop();           }     });  }  private void buttonPlayStop(){     if(!musicisplaying){         play.setBackgroundResource(R.drawable.buttonstop);          playMusic();          musicisplaying = true;     }     else {         if(musicisplaying){             play.setBackgroundResource(R.drawable.buttondisabled2);             stopMusic();             musicisplaying = false;         }     } }  private void stopMusic() {     stopService(new Intent(PlayScreen.this, MusicService.class)); }  private void playMusic() {     startService(new Intent(PlayScreen.this, MusicService.class).putExtra("link", url).putExtra("ime", name).putExtra("slika", icon).putExtra("image", img));  } </code></pre>  <p>and here is my service code for seting player</p>  <pre><code>@Override public IBinder onBind(Intent intent) {     // TODO: Return the communication channel to the service.     throw new UnsupportedOperationException("Not yet implemented"); }   @Override public void onCreate() {     pom = 1;     stopOnCall();       bufferIntent = new Intent(BROADCAST_BUFFER);  }  @Override public void onDestroy() {     stopForeground(true);     if(mgr != null) {         mgr.listen(phoneStateListener, PhoneStateListener.LISTEN_NONE);     }      ffmp.stop();     ffmp.release();     ; }  @Override public int onStartCommand(Intent intent, int flags, int startId) {     nameOfRadio = intent.getStringExtra("ime");     imageOfRadio = intent.getIntExtra("slika", R.drawable.musicicon);     cover = intent.getIntExtra("image", R.drawable.musicicon);      url = intent.getStringExtra("link");       startForeground(1, setUpAsForeground());      play(url);     //stop music on incoming call       return START_STICKY; }    private void play(String x) {     if(pom==2){          ffmp.reset();     }     ffmp = new FFmpegMediaPlayer();     ffmp.setAudioStreamType(AudioManager.STREAM_MUSIC);      try {         ffmp.setDataSource(x);         //    sendbuffer();          ffmp.prepareAsync();     } catch (IOException e) {         Toast.makeText(this, "Error", Toast.LENGTH_LONG);         e.printStackTrace();      }             Toast.makeText(this,"Bufering",Toast.LENGTH_SHORT).show();             sendBuffering();     ffmp.setOnPreparedListener(new FFmpegMediaPlayer.OnPreparedListener() {         @Override         public void onPrepared(FFmpegMediaPlayer ffmp) {              ffmp.start();              sendBufferingComplete();              pom = 2;          }     });  } </code></pre>  <p>notification code (this is in service class  but I am posting separately to be more clear while reading )</p>  <pre><code>Notification setUpAsForeground() {   NotificationManager manager =           (NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);      Intent intent = new Intent(this, PlayScreen.class);   intent.putExtra("image", cover);   intent.putExtra("link", url);   intent.putExtra("ime", nameOfRadio);   intent.putExtra("pomosna",2);   intent.putExtra("icon",imageOfRadio);   PendingIntent pendingIntent =           PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);    NotificationCompat.Builder builder = new NotificationCompat.Builder(this);   builder.setTicker("Radio is starting");   builder.setSmallIcon(imageOfRadio);    builder.setContentTitle(nameOfRadio);   builder.setContentText("playing");   builder.setContentIntent(pendingIntent);    Notification notification = builder.build();        return notification; </code></pre>  <p>}</p>  <p>Thank you.</p>