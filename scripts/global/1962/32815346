<p>Why do some memory addresses in GDB appear shorter than others?</p>  <p>In one of my classes for school I was given this code, and asked to give it text input in order to perform a buffer overflow exploit on it to make it print "You Won!" when I run it. Here is the code:</p>  <pre><code>#include &lt;stdio.h&gt; #include &lt;string.h&gt; #include &lt;stdlib.h&gt; #include &lt;time.h&gt;  void win() {     printf( "You Won!"); } void lose() {     printf( "You lost!"); } int check(char* name) {     char buffer[16];      strcpy( buffer, name );      printf( "Your name is: %s \n", buffer);     printf( "The buffer address is [%p].\n", &amp;buffer );     // Call the random function     srand(time(NULL));      return rand();  }  int main(int argc, char **argv) {      int randnum;      randnum = check(argv[1]);      if(randnum &lt; 5) {          win();      } else {          lose();      }       // Return everything is OK      return( 0 ); } </code></pre>  <p>I compiled this using gcc -g -m32 -fno-stack-protector Vulnerable.cpp</p>  <p>To find the return address of strcpy I used GDB to view the stack and see the memory fill up until I got this error on the output so I knew that the return address had overwritten the return address:  </p>  <pre><code>Program received signal SIGSEGV, Segmentation fault. 0x42424242 in ?? ()  </code></pre>  <p>To write the exploit to make it run win() I know I need to replace those B's in my input with the memory address associated with win().  To find this address I disassembled main and found where the call to win was and the memory address associated with it: </p>  <pre><code>   0x00001ed7 &lt;+55&gt;:    call   0x1db0 &lt;win()&gt; </code></pre>  <p>Why does the memory address 0x1db0 appear the way it does? shouldn't it be 0x00001db0 ? </p>  <p>Also If anyone can explain how I can write that address at the end of my input in order for it to return to the win function would be awesome.  </p>  <p>I am a little lost on what direction I should go in for this assignment so any help would be appreciated.</p>