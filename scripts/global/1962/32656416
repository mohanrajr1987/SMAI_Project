<p>In a C++11 program (compiled with <a href="https://gcc.gnu.org/gcc-5/" rel="nofollow">GCC 5</a> on Linux/Debian/x86-64, with <code>g++ -Og -g3 -Wall -std=c++11 b.cc -o bprog</code>), when you have a class hierarchy such as in this file <code>b.cc</code>:</p>  <pre><code>  #include &lt;string&gt;   #include &lt;vector&gt;   class A {     int a1i;     double a2d;   public:     A(int x, double y) : a1i(x), a2d(y) {};     ~A() = default;   };    class B : public A {     std::string b1s;     int b2ii[2];     std::vector&lt;long&gt; b3vl;   public:     B (int x, double y, const char*s, int a, int b)       : A(x,y), b1s(s), b2ii{a,b},         b3vl{x,a,b,x+a,a*b} {};     ~B() = default;   };    int main(int argc, char**argv) {     B bobj {1,2.1,"bname",3,4};     return 0;   }       </code></pre>  <p>and using a recent <a href="http://www.gnu.org/software/gdb/" rel="nofollow">GDB</a> (i.e. 7.10) I would like to display all the <em>data</em> fields (perhaps even the <a href="https://en.wikipedia.org/wiki/Virtual_method_table" rel="nofollow">vtable</a> pointer[s], if there is some) of the type. Using the <code>ptype</code> command is not extremely helpful (because inherited fields are not displayed):</p>  <pre><code> (gdb) ptype B   type = class B : public A {     private:       std::__cxx11::string b1s;       int b2ii[2];       std::vector&lt;long, std::allocator&lt;long&gt; &gt; b3vl;      public:       B(int, double, const char *, int, int);       ~B(int);   }       </code></pre>  <p>Most of the motivation is that I am interfacing to <a href="https://gcc.gnu.org/onlinedocs/jit/" rel="nofollow">GCCJIT</a> (or perhaps some other <a href="https://en.wikipedia.org/wiki/Just-in-time_compilation" rel="nofollow">JIT</a> library, but probably GCCJIT), and of course a JITing code need to know implementation details like types and offsets of every data field. If you are interested in more details, see <a href="https://gcc.gnu.org/ml/jit/2013-q4/msg00023.html" rel="nofollow">this thread</a>.</p>  <p>For example, a read access to <code>bobj.b3vl[i]</code> should be inlined by the JIT-er, so I need to understand the machine layout ...</p>  <p>I am aware that the fields inside C++ standard containers and strings are implementation specific (but I do know that they don't vary that much, but a tiny bit, in practice)</p>  <p>Do you have any trick or tips to get all that (field name, type, and perhaps offset) information easily thru GDB (including for inherited fields)?</p>