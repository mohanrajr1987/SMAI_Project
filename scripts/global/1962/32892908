<p>This question is a <a href="https://en.wikipedia.org/wiki/Minimal_Working_Example" rel="nofollow">M(not)WE</a> of this <a href="http://stackoverflow.com/questions/32849257/c-system-fails-to-create-child">question</a>. I wrote a code that reproduces the error:</p>  <pre><code>#include &lt;cstdlib&gt; #include &lt;iostream&gt; #include &lt;vector&gt;  int *watch_errno = __errno_location();  int main(){     std::vector&lt;double&gt; a(7e8,1);  // allocate a big chunk of memory     std::cout&lt;&lt;system(NULL)&lt;&lt;std::endl; } </code></pre>  <p>It has to be compiled with <code>g++ -ggdb -std=c++11</code> (g++ 4.9 on a Debian). Note that the <code>int *watch_errno</code> is useful only to allow gdb to watch <code>errno</code>. </p>  <p>When it is run under <code>gdb</code>, I get this :</p>  <pre><code>(gdb) watch *watch_errno  Hardware watchpoint 1: *watch_errno (gdb) r Starting program: /tmp/bug  Hardware watchpoint 1: *watch_errno  Old value = &lt;unreadable&gt; New value = 0 __static_initialization_and_destruction_0 (__initialize_p=1, __priority=65535) at bug.cpp:10 10      } (gdb) c Continuing. Hardware watchpoint 1: *watch_errno  Old value = 0 New value = 12 0x00007ffff7252421 in do_system (line=line@entry=0x7ffff7372168 "exit 0") at ../sysdeps/posix/system.c:116 116     ../sysdeps/posix/system.c: No such file or directory. (gdb) bt #0  0x00007ffff7252421 in do_system (line=line@entry=0x7ffff7372168 "exit 0") at ../sysdeps/posix/system.c:116 #1  0x00007ffff7252510 in __libc_system (line=&lt;optimized out&gt;) at ../sysdeps/posix/system.c:182 #2  0x0000000000400ad8 in main () at bug.cpp:9 (gdb) l 111     in ../sysdeps/posix/system.c (gdb) c Continuing. 0 [Inferior 1 (process 5210) exited normally] </code></pre>  <p>For some reason <code>errno</code> is set to <code>ENOMEM</code> at line 9 which corresponds to the <code>system()</code> call. Note that if the vector has a smaller size (I guess that it depends on which computer you'll run the code), the code works fine and <code>system(NULL)</code> returns 1 as it should when a shell is available.</p>  <p>Why is the flag <code>ENOMEM</code> raised?  Why isn't the code using the swap memory? Is this a bug?  Is there a workaround?  Would <code>popen</code> or <code>exec*</code> do the same? (I know, I should only ask one question per post, but all these question could be summarized by, "what is going on?")</p>  <p>As requested, here is the result of <code>ulimit -a</code>:</p>  <pre><code>-t: cpu time (seconds)              unlimited -f: file size (blocks)              unlimited -d: data seg size (kbytes)          unlimited -s: stack size (kbytes)             8192 -c: core file size (blocks)         0 -m: resident set size (kbytes)      unlimited -u: processes                       30852 -n: file descriptors                65536 -l: locked-in-memory size (kbytes)  64 -v: address space (kbytes)          unlimited -x: file locks                      unlimited -i: pending signals                 30852 -q: bytes in POSIX msg queues       819200 -e: max nice                        0 -r: max rt priority                 0 -N 15:                              unlimited </code></pre>  <p>and here the relevant part of <code>strace -f myprog</code></p>  <pre><code>mmap(NULL, 5600002048, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7faa98562000 rt_sigaction(SIGINT, {SIG_IGN, [], SA_RESTORER, 0x7fabe622b180}, {SIG_DFL, [], 0}, 8) = 0 rt_sigaction(SIGQUIT, {SIG_IGN, [], SA_RESTORER, 0x7fabe622b180}, {SIG_DFL, [], 0}, 8) = 0 rt_sigprocmask(SIG_BLOCK, [CHLD], [], 8) = 0 clone(child_stack=0, flags=CLONE_PARENT_SETTID|SIGCHLD, parent_tidptr=0x7fff8797635c) = -1 ENOMEM (Cannot allocate memory) rt_sigaction(SIGINT, {SIG_DFL, [], SA_RESTORER, 0x7fabe622b180}, NULL, 8) = 0 rt_sigaction(SIGQUIT, {SIG_DFL, [], SA_RESTORER, 0x7fabe622b180}, NULL, 8) = 0 rt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0 fstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 1), ...}) = 0 mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fabe6fde000 write(1, "0\n", 20 )                      = 2 write(1, "8\n", 28 )                      = 2 munmap(0x7faa98562000, 5600002048)      = 0 </code></pre>  <p>here is the output of free: </p>  <pre><code>           total       used       free     shared    buffers     cached Mem:       7915060    1668928    6246132      49576      34668    1135612 -/+ buffers/cache:     498648    7416412 Swap:      2928636          0    2928636 </code></pre>