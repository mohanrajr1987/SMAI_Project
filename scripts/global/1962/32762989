<p>In a piece of code viewed in gdb such as the following:   </p>  <pre><code>0x8e4e &lt;boot1main+1&gt;:   mov    %esp,%ebp 0x8e50 &lt;boot1main+3&gt;:   push   %esi 0x8e51 &lt;boot1main+4&gt;:   mov    0xc(%ebp),%esi 0x8e54 &lt;boot1main+7&gt;:   push   %ebx 0x8e55 &lt;boot1main+8&gt;:   mov    0x10(%ebp),%ebx 0x8e58 &lt;boot1main+11&gt;:  sub    $0xc,%esp 0x8e5b &lt;boot1main+14&gt;:  push   $0x3 0x8e5d &lt;boot1main+16&gt;:  call   0x8bb6 &lt;roll&gt; 0x8e62 &lt;boot1main+21&gt;:  movl   $0x8f84,(%esp) 0x8e69 &lt;boot1main+28&gt;:  call   0x8b77 &lt;putline&gt; </code></pre>  <p>What is the precise meaning of the addresses on the left? Are these where the assembly instructions are located on the machine? (i.e. 0x8e4e, 0x8e50).</p>  <p>The above piece of code was generated without having set up virtual memory yet. In fact, it represents some boot-loader code I am tracing through.</p>  <p>For a normal C program, are those addresses on the left virtual addresses?</p>