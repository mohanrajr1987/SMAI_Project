<p>I'm trying to get java object from Rabbit but got this</p>  <pre><code>   Caused by: org.springframework.amqp.support.converter.MessageConversionException: failed to convert Message content. Could not resolve __TypeId__ in header </code></pre>  <p>So I can change remote server format how I should update my bean then?</p>  <pre><code>@Bean public MessageConverter jsonMessageConverter() {     return new Jackson2JsonMessageConverter(); } </code></pre>  <p>and how I can send back message? </p>  <p>with DefaultClassMapper</p>  <p>Rise the same error </p>  <pre><code> Caused by: org.springframework.amqp.support.converter.MessageConversionException: failed to convert Message content. Could not resolve __TypeId__ in header  </code></pre>  <p>Code</p>  <pre><code>@Bean public DefaultClassMapper typeMapper() {     DefaultClassMapper typeMapper = new DefaultClassMapper();     typeMapper.setDefaultType(MyType.class);     return typeMapper; }  @Bean public MessageConverter jsonMessageConverter(DefaultClassMapper defaultClassMapper) {     Jackson2JsonMessageConverter jsonMessageConverter = new Jackson2JsonMessageConverter();     jsonMessageConverter.setClassMapper(defaultClassMapper);     return jsonMessageConverter; } </code></pre>  <p>I cant convert Object to JSON.   I have convertor class</p>  <pre><code>   public class MySendTypeSerializer extends JsonSerializer&lt;MySendType&gt; {     @Override    public void serialize(MySendType mySendType, JsonGenerator jsonGenerator, SerializerProvider provider) throws IOException {   //.. impl }} </code></pre>  <p>And class itself</p>  <pre><code>  @JsonSerialize(using = MySendTypeSerializer.class)   public class MySendType {         // Regular POJO   }  </code></pre>  <p>All this stuff never called despite the fact that Deserializer with @JsonDeserialize  works well.  Probably I've missed something in configuration for this queue (sending queue) is different from receiving one. </p>  <p>Right now converter config looks like this </p>  <pre><code>@Bean SimpleMessageListenerContainer persistenceListenerContainer(ConnectionFactory connectionFactory,                                                             @Qualifier("persistenceListenerAdapter") MessageListenerAdapter listenerAdapter,                                                             MessageConverter messageConverter) {     SimpleMessageListenerContainer container = new SimpleMessageListenerContainer();     container.setConnectionFactory(connectionFactory);     container.setQueues(sendQueue());     listenerAdapter.setMessageConverter(new Jackson2JsonMessageConverter());     container.setMessageListener(listenerAdapter);     return container; } </code></pre>  <p>Probably this setting up only for JSON->Object??</p>