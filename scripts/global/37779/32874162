<p>There is a good known case when we unwrap nested object and write its fields into the main object, and I need to make an inverse task.</p>  <p>I have a POJO:</p>  <pre><code>class A {     private String id = "id1";      @JsonWrap("properties")     private String property1 = "...";      @JsonWrap("properties")     private String property2 = "...";      // getters and setters } </code></pre>  <p>Default serializer will produce as expected</p>  <pre><code>{     "id": "id1",     "property1": "...",         "property2": "..."     } </code></pre>  <p>But, my JSON should match some specification, and to do that, I need to wrap <code>property1</code> and <code>property2</code> inside <code>properties</code> wrapper. So the result should looks like:</p>  <pre><code>{     "id": "id1",     "properties":      {         "property1": "...",         "property2": "..."     } } </code></pre>  <p>I don't want to change the structure of the POJO so I see 3 possible ways:</p>  <ol> <li>Write custom serializer. But as it seems to me, to write such serializer will takes more efforts then serialize objects by hands.</li> <li>Create proxy Java object which will reflect the right structure of JSON, and serialize such proxy.</li> <li>Modify JSON after it have been generated. (I'm afraid it would be a great overhead for rereading and rewriting of JSON).</li> </ol>  <p>Does anybody make such Serializer or maybe know another options to generate JSON with the structure I need?</p>  <p>For <code>custom serializer</code> I want to reuse standard BeanSerializer, I dont want to write out all fields manually:</p>  <ol> <li>Hide annotated fields.</li> <li>Write out bean, without annotated fields, but don't close object. (Don't call <code>jgen.writeEndObject();</code>)</li> <li>Write out wrapped fields.</li> <li>Close object.</li> </ol>