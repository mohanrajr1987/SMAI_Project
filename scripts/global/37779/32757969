<p><strong>Problem:</strong> </p>  <p>An easy way to exclude class properties (ex. fields that shouldn't be exposed to public without authorization) while object returned in the <code>@RestController</code> method. </p>  <pre><code>class Article {      String title;      String content;      List&lt;Comments&gt; comments;      int status; } </code></pre>  <p>I would like to be able to easily return <code>Article</code> objects accordingly to the three scenarios I have (that's just a dummy foo bar like example): </p>  <ol> <li>Include all the fields</li> <li>Include title, content, comments</li> <li>Include title and content </li> </ol>  <p><strong>Current ideas</strong></p>  <p>Right know I've had three ideas how to solve this issue. </p>  <p><em>Idea #1</em> </p>  <p>Use <code>@JsonView</code>. It works but it's far from being an easy and straightforward approach (unless I've misunderstood the documentation) </p>  <p>I can annotate all the fields with the <code>@JsonView</code> which seems easy at first but it gets really complicated in the future development. </p>  <pre><code>class Article {      @JsonView({ArticleView.List.class, ArticleView.Detail.class, ArticleView.Admin.class})      String title;      @JsonView({ArticleView.Detail.class, ArticleView.Admin.class})      String content;      @JsonView({ArticleView.Detail.class, ArticleView.Admin.class})      List&lt;Comments&gt; comments;      @JsonView({ArticleView.Admin.class})      int status; } </code></pre>  <p>It does require me to modify a new property with a view each time I do add a new one. I would also need to annotate every single property (I'd like to be as POJO as possible. </p>  <p><em>Idea #2</em> </p>  <p>DTO - I'd like to avoid creating DTOs especially because adding new field might mean adding it in all classes (it seems to be my current choice though) </p>  <p><em>Idea #3</em> </p>  <p><a href="https://github.com/monitorjbl/json-view" rel="nofollow">https://github.com/monitorjbl/json-view</a> </p>  <p>It just doesn't seem to me like a mature enough to use it in the production. Author is active though. </p>  <p>I believe that my problem is rather common and there has to be an easier approach around. </p>