<h2>Background</h2>  <p>Let me give a little background on the problem. I'm creating a custom video player with video controls at the bottom. Set up like so:</p>  <pre><code> _________________ | video container | |  _____________  | | |    video    | | | |             | | | |             | | | |_____________| | | |  controls   | | | |_____________| | |_________________| </code></pre>  <h2>The Platform</h2>  <ul> <li>Adobe AIR 3.2</li> <li>Flash Player 11.2</li> </ul>  <h2>The Problem</h2>  <p>The controls are the typical controls you'd expect: play, pause, volume, etc. The issue I'm having is with dragging a volume slider inside the controls container. The volume control is composed of a track with a child sprite object. When I hook up the event listener for dragging it is completely unresponsive to being dragged. The code:</p>  <pre class="lang-js prettyprint-override"><code>private function make_slider_track():Sprite {   var track:Sprite = graphics_util.make_box_sprite(btn_bg_up, vol_slider_width, 1);    var knob:MovieClip = make_slider_knob();   knob.y = -(vol_knob_height)/2+1;   track.addChild(knob);    var volume_drag:Function = function(e:MouseEvent) {     e.stopPropagation();      // add events     knob.addEventListener(MouseEvent.MOUSE_UP, volume_stop_drag);     knob.startDrag();   };    var volume_stop_drag:Function = function(e:MouseEvent) {     // remove events     knob.removeEventListener(MouseEvent.MOUSE_UP, volume_stop_drag);     knob.stopDrag();   };   knob.addEventListener(MouseEvent.MOUSE_DOWN, volume_drag, true);    return track; } </code></pre>  <p>After the code returns the track I immediately add it as a child of the controls container.</p>  <p>The behavior I'm seeing is that when I click the knob to drag it (I removed the bounding rect I had for testing for any movement whatsoever) is that it will fire the mouse down callback and (I assume) the startDrag call but I'll move the mouse and the knob sprite stays in place.</p>  <p>I'm completely at a loss as to what's happening here so any insight would be helpful.</p>  <h2>UPDATE</h2>  <p>It seems the issue is related to tweening the video container. I'm using caurina.transitions.Tweener. What am I doing wrong here? And how has nobody ever had this issue? Here's how I'm issuing the tween:</p>  <pre><code>player.rotationX = -90; Tweener.addTween(player, { rotationX:0, x:to_x, y:to_y, alpha:1, time:0.5 } ); </code></pre>