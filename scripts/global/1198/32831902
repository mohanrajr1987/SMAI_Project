<p>I am experienced in C# but new to F# and Functional Programming. Now I am trying to implement a class library in F#. Here is one of the functions: It takes a list of integers &lt;=9 and change consecutive 9 like 9,9,9,9 to 9, 10, 11, 12. For example [9;9;9;1;4;0;1;9;9;9;9] will be changed to [9; 10; 11; 1; 4; 0; 1; 9; 10; 11; 12].</p>  <p>C# function is trivial:</p>  <pre class="lang-cs prettyprint-override"><code>void ReleaseCap(List&lt;int&gt; items) {     for (int i = 1; i &lt; items.Count; i++)     {         var current = items[i];         var previous = items[i - 1];         //If curernt value = 9 and previous &gt;=9, then current value should be previous+1         if (current == 9 &amp;&amp; previous &gt;= 9)         {             items[i] = previous + 1;         }     } } </code></pre>  <p>Now is my F# tail recursive one. Instead of loop the List by index, it recursively move item from an initial list to an processed list until everything in the initial list is gone:</p>  <pre><code>let releaseCap items =     let rec loop processed remaining = //tail recursion         match remaining with         | [] -&gt; processed //if nothing left, the job is done.         | current :: rest when current = 9 -&gt; //if current item =9             match processed with             // previous value &gt;= 9, then append previous+1 to the processed list             | previous :: _ when previous &gt;= 9 -&gt; loop (previous+1 :: processed) rest              //if previous &lt; 9, the current one should be just 9             | _ -&gt; loop (current :: processed) rest          //otherwise, just put the current value to the processed list         | current :: rest -&gt; loop (current :: processed) rest      loop [] items |&gt; List.rev </code></pre>  <p>While the C# version is trivial and intuitive, the F# code is verbose and not as intuitive. Is there any part of the F# code can be improved to make it more elegant?</p>