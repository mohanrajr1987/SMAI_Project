<p>I would like to replace my existing event implementation with one that can process events as they come in, concurrently if necessary. Unfortunately I have never implemented any kind of concurrency before, but have to start somewhere eh?</p>  <p>I've been reading up on <a href="http://fsharpforfunandprofit.com/posts/concurrency-reactive/" rel="nofollow">Functional Reactive Programming</a>. Despite the relatively simple looking examples, I am confused as to how I should apply these examples into my application. In fact, I am not even sure whether this is the most suitable way to achieve concurrency here.</p>  <p>I would also somehow be able to leverage Task Parallel Library (TPL), since it offers thread management, then I don't need to worry too much about spawning too many threads. Sadly the examples in the above link do not contain any that use TPL.</p>  <p>My current code is below. I am still a newbie programmer and will need some hand-holding to get through. Apologies for the trouble. :(</p>  <pre><code>open System open System.Threading open Npgsql  // This application is a Windows service. PostgreSQL sends a notice whenever a new row has been added to a table.   // The next function processes new rows, aka tasks. let private processTask () =     EventLog.writeEventLog "Information" "Received new task notification."     // Task processing yet to be implemented.  // A connection to PostgreSQL that stays open while service is running. Receives notifications. let newNotifyConnection (host : string, username : string, password : string, database : string) =      let connectionString = sprintf "Host=%s;Username=%s;Password=%s;Database=%s;ContinuousProcessing=true;Keepalive=120;CommandTimeout=0" host username password database     new NpgsqlConnection(connectionString)  let private notifyConnection = newNotifyConnection Settings.npgsqlConnection let private listen = new NpgsqlCommand("LISTEN newtask", notifyConnection)  // Event for receiving and processing notifications. let private onNotification (sender : obj) (e : NpgsqlNotificationEventArgs) =     processTask()  let private notificationEventHandler = new NotificationEventHandler(onNotification)  // Run this function when service starts. let startWorker () =     notifyConnection.Notification.AddHandler(notificationEventHandler)     notifyConnection.Open()     listen.ExecuteNonQuery() |&gt; ignore  // Run this function when service stops. let stopWorker () =     listen.Dispose()     notifyConnection.Dispose() </code></pre>