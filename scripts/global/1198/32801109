<p>I need to parse input streams from a socket. The data is sent from a Telnet client, and thus I want to process incoming strings by finding the first <code>'\r'</code> character in the stream, then pick the bytes before the return char and finally process any <code>backspace</code> <code>'\b'</code> chars.</p>  <p>What would be the idiomatic way to deal with the <code>'\b'</code> bits in here? I'm currently using a mutable stack and push chars onto it, and if there is a backspace, I pop the last char. Then just turn the result into a string.</p>  <p>But I figure there is probably some nice way to do this with pattern matching and tail recursion. So, how can this be done the F# way?</p>  <pre><code>let receiveInput (inputBuffer:StringBuilder) (received:Tcp.Received)=     let text = Encoding.ASCII.GetString(received.Data.ToArray());     inputBuffer.Append(text) |&gt; ignore      let all = inputBuffer.ToString()     match all.IndexOf('\r') with     | enter when enter &gt;= 0 -&gt;         let textToProcess = all.Substring(0,enter)         inputBuffer.Remove(0,enter+2) |&gt; ignore          //this is the part I'm wondering about         let stack = new Stack&lt;char&gt;()         for c in textToProcess do             if c = '\b' then stack.Pop() |&gt; ignore             else stack.Push c          let input = new System.String(stack |&gt; Seq.rev |&gt; Seq.toArray)          Some(input)     | _ -&gt;         None </code></pre>