<p>Playing with F# and wpf and so far, I like it. Not being a graphics designer, though I am looking for a sneaky way to achieve the following:</p>  <p>I have the outline of a picture (from a png -> svg -> xps -> xaml path). If I were into manual graphics program using, I would now probably spend half a day or more to get the following variations: Outline partially filled with [black, white], partially filled with transparency, then save those images and use them in my code. But...I feel it should be possible to use the xaml path of the outline along with a few lines of code to achieve the same without much clicking...</p>  <p>To clarify the idea, here a sample picture just to show what I have in mind:</p>  <p>Input: </p>  <p><a href="http://i.stack.imgur.com/V8kbY.png" rel="nofollow"><img src="http://i.stack.imgur.com/V8kbY.png" alt="Outline of one of the pictures"></a></p>  <p>Now, the background and some parts of the picture need to be transparent, some others be filled with either white or black, the outline, either white or black, too. As mentioned, I found a way to get a xaml path object from the picture and now I look for a cool way to "transmogrify" the picture into those 4,5 variations. It will pay off as there are a few more similar pictures which need the same treatment.</p>  <p>When I have them all, each will be a <code>Image</code> instance in my code, which will be positioned inside a <code>Canvas</code>. </p>  <p>Cool ideas how to get it done, anyone?</p>  <p>The basic code framework I currently have works like this:</p>  <pre><code>let visual renderer w h =     let dvis = System.Windows.Media.DrawingVisual()     let d = dvis.RenderOpen()     renderer d w h     d.Close()     let bmp = Windows.Media.Imaging.RenderTargetBitmap(int w, int h, 96.0,96.0,Windows.Media.PixelFormats.Pbgra32)     let img = System.Windows.Controls.Image()     bmp.Render(dvis)     img.Source &lt;- bmp     img  let redCircle w h =     visual          (fun d w h -&gt;              let r = (min w h)/2. * 0.9             d.DrawEllipse(System.Windows.Media.Brushes.Red,null,System.Windows.Point(w/2.0,h/2.0),r,r)         ) w h </code></pre>  <p>... and just like in the <code>redCircle</code> function, I would render the path to the image inside a lambda...</p>