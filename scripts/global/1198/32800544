<p>I am trying to implement the following code from <a href="http://algs4.cs.princeton.edu/home/" rel="nofollow">Algorithms 4th Edition</a> </p>  <pre><code>private Node put(Node x, Key key, Value val) {     if (x == null) return new Node(key, val, 1);     int cmp = key.compareTo(x.key);     if (cmp &lt; 0) x.left = put(x.left, key, val);     else if (cmp &gt; 0) x.right = put(x.right, key, val);     else x.val = val;     x.N = size(x.left) + size(x.right) + 1;     return x; } </code></pre>  <p>I have come up with following implementation in F#:</p>  <pre><code>type Node = {                 mutable Left : Node option                 mutable Right : Node option                 mutable Value : int                 mutable Count : int             }  type BST() =     let root : Node option = None      member x.Put (value : int) =         let rec Add (node:Node option) value =             match node with              | None -&gt; Some { Left = None; Right = None; Value = value; Count = 1 }             | Some t -&gt;                  match t with                 | _ when t.Value &lt; value -&gt;  t.Right &lt;- Add t.Right value                 | _ when t.Value &gt; value -&gt; t.Left &lt;- Add t.Left value                 | _ -&gt;                          t.Value &lt;- value                         t.Count &lt;- (x.Size t.Left) + (x.Size t.Right) + 1                         Some t         () </code></pre>  <p>I am getting error : expected to have type Node option but here as unit, in the following lines:</p>  <pre><code>| _ when t.Value &lt; value -&gt;  t.Right &lt;- Add t.Right value | _ when t.Value &gt; value -&gt; t.Left &lt;- Add t.Left value </code></pre>  <p>Is there a better way to implement the above code? Am I making a mistake by copying a procedural style code as it is in functional approach?</p>