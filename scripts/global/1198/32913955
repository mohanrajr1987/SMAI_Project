<p>Consider I have two different <em>library</em> types:</p>  <pre><code>type Foo = { foo : string } type Bar = { bar : int32 } </code></pre>  <p>I want to implement generic function <code>zoo</code> that will work for either <code>Foo</code> or <code>Bar</code> instances. <strong>And I cannot change <code>Foo</code> and <code>Bar</code> because they are part of library code.</strong></p>  <p>Here's my first attempt using type extensions and inline function as explained <a href="http://withouttheloop.com/articles/2014-10-21-fsharp-adhoc-polymorphism/" rel="nofollow">here</a>:</p>  <pre><code>// Library.fs module Library  type Foo = { foo : string } type Bar = { bar : int32 }  // Program.fs type Foo with     static member zoo (f : Foo) = "foo"  type Bar with     static member zoo (b : Bar) = "bar"  let inline zoo (x : ^t) =     (^t : (static member zoo : ^t -&gt; string) x)  let f = zoo { foo = "1" } // error FS0001: The type 'Foo' does not support the operator 'zoo' </code></pre>  <p>Why don't inline function definition relies on type extensions? How could I solve my problem without changing of the initial <code>Foo</code> and <code>Bar</code> type definitions?</p>