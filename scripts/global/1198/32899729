<p>I'm currently playing around with using <a href="https://github.com/picoe/Eto" rel="nofollow">Eto.Forms</a> from F#. One minor annoyance I've run into is that when you define your GUI objects (Forms, Panels, Buttons, etc) in external files (XAML or JSON) and declare event handlers, those event handlers have to have a specific type:</p>  <pre><code>member public this.OnFirstButtonClicked (sender:Object, e:EventArgs) -&gt;     MessageBox.Show(this, "First button was clicked")     |&gt; ignore member public this.OnSecondButtonClicked (sender:Object, e:EventArgs) -&gt;     MessageBox.Show(this, "Second button was clicked")     |&gt; ignore </code></pre>  <p>The repetition of the type signatures is bothering me. (There's actually a lot of repetition in these two functions, like the calls to MessageBox with barely-varying parameters, but this is just a test project. In a real project, I'd be doing something different for both these buttons.) I'd like to not have to repeat the type signature of each of these functions every time. After reading <a href="http://fsharpforfunandprofit.com/posts/type-abbreviations/" rel="nofollow">this page at F Sharp For Fun and Profit</a>, I thought I could do something like this:</p>  <pre><code>type EventHandler = (Object * EventArgs) -&gt; unit  member public this.OnFirstButtonClicked : EventHandler -&gt;     MessageBox.Show(this, "First button was clicked")     |&gt; ignore member public this.OnSecondButtonClicked : EventHandler -&gt;     MessageBox.Show(this, "Second button was clicked")     |&gt; ignore </code></pre>  <p>However, when I tried this I discovered that on member functions, that syntax <em>actually</em> means "This function returns an EventHandler function". I want to say "This member function <em>is</em> an EventHandler function", and I don't know how to do that.</p>  <p><strong>Update:</strong> Since writing the above question, I've learned that I don't actually have to specify the type signatures of the event handler functions' parameters. The following will work:</p>  <pre><code>member public this.OnFirstButtonClicked (sender, e) -&gt;     MessageBox.Show(this, "First button was clicked")     |&gt; ignore member public this.OnSecondButtonClicked (sender, e) -&gt;     MessageBox.Show(this, "Second button was clicked")     |&gt; ignore </code></pre>  <p>However, my real question isn't "how can I make these event handlers work?" My real question is, "I've learned how to specify the type of a function that <em>isn't</em> a member of a class, but how do I do that for a function that <em>is</em> a member of a class?"</p>