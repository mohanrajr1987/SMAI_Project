<p>I have a need to use statically resolved type parameters in a situation similar to the below:</p>  <pre><code>[&lt;Struct&gt;] type Wrapper&lt;'T&gt; =      val raw:'T     new(v:'T) = {raw = v}   type Value =      | Float of float     | Int of int     | String of string      with      member this.ToWrapper() :'T =         match this with         | Float f -&gt; Wrapper&lt;float&gt;(f)      // type is inferred as float         | Int i -&gt; Wrapper&lt;int&gt;(i)          // error          | String s -&gt; Wrapper&lt;string&gt;(s)    // error </code></pre>  <p>How do I define and use a ToWrapper function (or set thereof) that can map a 'Value' type to any type within the Generic Wrapper&lt;'T> where I know 'T will be either float | int | string?</p>  <p>The Wrapper&lt;'T> type needs to be a Struct so interfaces aren't an option - as suggested in some other posts related to this.</p>