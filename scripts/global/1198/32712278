<p>It works with a for loop and mutable variable:</p>  <pre><code>let addLnNum filename =         use outFile = new StreamWriter(@"out.txt")         let mutable count = 1     for line in File.ReadLines(filename) do         let newLine = addPre (count.ToString()) line         outFile.WriteLine newLine         count &lt;- count + 1 </code></pre>  <p>But it is very "non-functional" so I'm curious what is the proper way to do this? I figured how to append the index number to a list of strings:</p>  <pre><code>let rec addIndex (startInd:int) l=     match l with     |x::xs -&gt;  startInd.ToString()+x :: (addIndex (startInd+1) xs)     |[] -&gt; [] </code></pre>  <p>But it won't apply to File.ReadLines:</p>  <pre><code>let addLnNum2 filename =         use outFile = new StreamWriter(@"out.txt")         File.ReadLines(filename)     |&gt; addIndex 1     |&gt; ignore     //Error 1   Type mismatch. Expecting a Collections.Generic.IEnumerable&lt;string&gt; -&gt; 'a         //but given a string list -&gt; string list     </code></pre>  <p>Is reading the whole file into memory as a list the only way to do this? Is there something like seq.count so it can be done similar to the following?</p>  <pre><code>let addLnNum3 filename =         use outFile = new StreamWriter(@"out.txt")         File.ReadLines(filename)     |&gt; Seq.map (fun s -&gt; Seq.count + s) //no such thing as Seq.count     |&gt; Seq.iter outFile.WriteLine      |&gt; ignore </code></pre>