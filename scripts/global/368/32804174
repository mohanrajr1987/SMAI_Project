<p>With unknown reason, boost binary serialization doesn't work occasionally. The parsed data is corrupted sometimes.</p>  <p>Originally I serialized instances of self-defined class manually, with each instance being a line in a text file. However, the speed was slow.(The text file was dealt in a speed of 2 MB/sec, which can be seen in windows task manager.) Recently I changed to use the boost binary serialization. However, strange things happens.</p>  <p>I stored many many instances of class InstanceIdentity, which contains a string member variable and a struc member variable representing the x-y-z integer coordinates.</p>  <p>My Problem: The previous 504 instances can be parsed from the binary file successfully and printed to screen. However the 505th instance is falsely parsed.(The x-y-z coordinates should be no more than 512.) And then the following instances become a mess. And soon an unknown exception is thrown from boost. I tried to catch it and used the .what() method to reveal more information. However, it only says <code>Unknown Exception</code>.</p>  <pre><code>line 503: 029_4_.s_raw.gz (306, 215, 64) line 504: 029_4_.s_raw.gz (224, 154, 86) line 505: 029_4_.s_raw.gz (68109, 36608, 16384) // Then the screen output becomes a mess. I can't even copy the mess here. </code></pre>  <p>My trials to solve it.</p>  <ol> <li><p>I checked this page <a href="http://boost-users.boost.narkive.com/70Yjldp7/boost-serialization-throws-random-exceptions" rel="nofollow">http://boost-users.boost.narkive.com/70Yjldp7/boost-serialization-throws-random-exceptions</a> . And I made sure the ifstream and ofstream is opened as binary:</p>  <p>out_file_stream.open(file_name, ios_base::out | ios_base::binary);</p>  <p>in_file_stream.open(file_name, ios_base::in | ios_base::binary);</p></li> </ol>  <p>But the problem continues.</p>  <ol start="2"> <li>I tried to serialize the same data in text file using boost. (Only the file open mode and boost archive type need to be changed.)</li> </ol>  <p>The data can be serialized and deserialized successfully through text file. Since this probably implies the correctness of the serialize function in my self-defined class InstanceIdentity, the problem of boost binary serialization gets weirder.</p>  <ol start="3"> <li><p>I opened the boost binary file in hex editor (notepad++ plugin) and tried to find something at the 505th instances. The hex of the xyz coordinates of 504th instance is:</p>  <p>// 1st instance x-y-z</p>  <p>169=0xA9 144=0x90 79=0x4F</p>  <p>// And I can find 00 00 00 a9 00 00 00 90 00 00 00 4f in the appropriate location.</p>  <p>// 502th instance x-y-z</p>  <p>137=0x89 268=0x10C 136=0x88</p>  <p>// But I can't find 00 00 00 89 00 00 01 0c 00 00 00 88 in the whole binary file, even if this instance is correctly parsed by boost.</p>  <p>// 503th instance x-y-z</p>  <p>306=0x132 215=0xD7 64=0x40</p>  <p>// But I can't find 00 00 01 32 00 00 00 d7 00 00 00 40 in the whole binary file, even if this instance is correctly parsed by boost.</p>  <p>// 504th instance x-y-z</p>  <p>224=0xE0 154=0x9A 86=0x56</p>  <p>00 00 00 e0 00 00 00 9a 00 00 00 56</p>  <p>// But I can't find 00 00 00 e0 00 00 00 9a 00 00 00 56 in the whole binary file, even if this instance is correctly parsed by boost.</p></li> </ol>  <p>Questions: Does anybody know what's happening inside the boost binary file? What should I do to serialize my instances to binary file and deserialize them from it? I am using the same computer, so I think this problem is not about portability.</p>  <p>Environment: Windows 8 64 bit, visual studio 2013, boost 1_59_0 version.</p>