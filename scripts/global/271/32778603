<p>I am new to writing documentation and wanted to learn how to do it correctly.</p>  <p>I have a node REST API that I wish to document. This API consists of a lot of modules that could look like this:</p>  <pre><code>/** @module  Rewards */ module.exports = function (express, sequelize, router) {     router.route('/action_plan');     var DataTypes = require("sequelize"),         async = require("async");      /**      * Reward definition      */     var reward = sequelize.define('reward', {             id: DataTypes.INTEGER,             name: DataTypes.STRING,             icon: DataTypes.STRING         }, {             freezeTableName: true,             instanceMethods: {                 getList: function (onSuccess, onError) {                     reward.findAll().ok(onSuccess).error(onError);                 }             }         }),          /**          * User has reward definition          */         user_has_reward = sequelize.define('user_has_reward', {                 id: DataTypes.INTEGER,                 reward_id: DataTypes.INTEGER,                 user_id: DataTypes.INTEGER,                 description: DataTypes.STRING,                 timestamp: DataTypes.DATE             }, {                 freezeTableName: true,                 instanceMethods: {                     /**                      * Adds a reward to the user                      * @param onSuccess                      * @param onError                      */                     add: function (onSuccess, onError) {                         user_has_reward.create(this.dataValues).ok(onSuccess).error(onError);                     },                     /**                      * Find reward by user_id                      * @param user_id                      * @param onSuccess                      * @param onError                      */                     findByUser: function (user_id, onSuccess, onError) {                         user_has_reward.findAll({                             include: [{model: reward}],                             where: {user_id: user_id}                         }).ok(onSuccess).error(onError);                     }                 }             }         ),         /**          * Initialize specialist database          */         specialist = sequelize.define('specialist', {             id: DataTypes.INTEGER,             user_id: DataTypes.INTEGER,             competence_id: DataTypes.INTEGER,             description: DataTypes.STRING,             timestamp: DataTypes.DATE         }, {             freezeTableName: true,             instanceMethods: {                 /**                  * Adds a specialist tag to a user                  * @param onSuccess                  * @param onError                  */                 add: function (onSuccess, onError) {                     specialist.create(this.dataValues).ok(onSuccess).error(onError);                 },                 /**                  * Find specialist by user                  * @param user_id                  * @param onSuccess                  * @param onError                  */                 findByUser: function (user_id, onSuccess, onError) {                     specialist.findAll({                         include: [{model: Competence}],                         where: {user_id: user_id}                     }).ok(onSuccess).error(onError);                 }             }         }),         /**          * Initialize Competence          */         Competence = sequelize.define('competence', {             id: DataTypes.INTEGER,             name: DataTypes.STRING,             organization_id: DataTypes.INTEGER,             competence_category_id: DataTypes.INTEGER,             competence_type_id: DataTypes.INTEGER         }, {             freezeTableName: true         });      specialist.belongsTo(Competence, {foreignKey: 'competence_id'});     user_has_reward.belongsTo(reward, {foreignKey: 'reward_id'});      /**      *  Returns a list of rewards and their types      */     router.route('/api/reward')         .get(function (req, res) {             var rew = reward.build();             rew.getList(function (result) {                 res.json(result);             }, function (error) {                 res.status(404).send()             })          });      /**      *  Returns a list of competences that the user is marked as specialist      *  @param {integer} user_id - user.      */     router.route('/api/userReward')         .post(function (req, res) {             var uhr = user_has_reward.build(req.body.user_reward);             uhr.add(function (success) {                 res.status(200).send('ok');             }, function (error) {                 res.status(500).send('Error');             })         });      /**      *  Returns a list of rewards that has been assigned to the user      *  @param {integer} user_id - user.      */     router.route('/api/userRewardByUser/:user_id')         .get(function (req, res) {             var uhr = user_has_reward.build();             uhr.findByUser(req.params.user_id, function (result) {                 res.json(result);             }, function (error) {                 res.status(404).send('not found');             })         });      /**      *  Adds a new competence to a specefic user specialist list      *  @param {integer} user_id - user.      */     router.route('/api/specialist')         .post(function (req, res) {             var spec = specialist.build(req.body.specialist);             spec.add(function (success) {                 res.status(200).send('ok')             }, function (error) {                 res.status(500).send('error');             })         });       /**      *  Returns a list of competences that the user is marked as specialist      *  @param {integer} user_id - user.      */     router.route('/api/specialistByUser/:user_id')         .get(function (req, res) {             var spec = specialist.build();             spec.findByUser(req.params.user_id, function (response) {                 res.json(response);             }, function (error) {                 res.status(404).send('Not found');             });         });       return router; }; </code></pre>  <p>As you can see I've attempted to document each function.  However, when I try to render this to html, I get the following site:</p>  <p><a href="http://i.stack.imgur.com/X2RK4.png" rel="nofollow"><img src="http://i.stack.imgur.com/X2RK4.png" alt="enter image description here"></a></p>  <p>This lacks a lot of documentation. So can anyone point me in the right direction on how I can document my project properly?</p>