<p>I'm currently using <a href="https://www.firebase.com/" rel="nofollow">Firebase</a> as a prototyping tool to showcase a front end design for a <a href="http://corilla.co/" rel="nofollow">documentation tool</a>. In the process we've come to really like the real-time power of Firebase, and are exploring the potential to use it for our production instance of an open source/community version. </p>  <p>The first challenge is <strong>version control</strong>. Our <a href="http://pressgang-ccms.github.io/" rel="nofollow">legacy project</a> used Hibernate/Envers in a Java stack, and we were previously looking at Gitlab as a way to move into a more "familiar" git environment. </p>  <h3>This way?</h3>  <p>Is there a way to timestamp and version control the data being saved? And thoughts on how to best recall this data without redesigning the wheel (e.g. any open source modules?)? </p>  <p>The real-time aspect of something like <a href="https://firepad.io/#1" rel="nofollow">Firepad</a> is great for documentation, but we require the means to commit or otherwise distinctly timestamp the state or save of a document.  </p>  <h3>Or?</h3>  <p>Or is it best to use Firebase only for the realtime functionality, and implement Gitlab to commit the instance to a non-realtime database. In other words abstracting the version control entirely out to a more traditional relationship to a db?</p>  <p>Thoughts?</p>