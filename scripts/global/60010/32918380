<p>Im attempting to display a progress bar while an app is running (walking a music library folder tree but that doesnt matter here). (Disclaimer ... Im learning Tkinter as I go along!) I'm putting it into a separate window for the moment (I dont want to disturb the main window design / implementation just yet).</p>  <p>I've tried this two ways ... my own crudely drawn progress bar using a text widget, and - once I discovered it - ttk.Progressbar.   Im having essentially the same problem with either approach, which is getting the contents of the window to display. </p>  <p>I'll focus on the approach using ttk.Progressbar.</p>  <p>I gather that I use update_idletasks() to force an update of the window.   However that seems to blank the window contents.   Full 'demo' (ie standalone) code is at the end of this.</p>  <p>Basically if I halt the program after the widgets are all created, the window displays the progress bar etc. just fine.<br> If I dont force an error, the window doesnt open until the program ends; then it displays fine.</p>  <p>If I use update_idletasks() to force window update, the window opens, but is blank. If the program ends (normally or by forced error) the window contents are shown properly.</p>  <p>[There was a related behaviour in the kludged version ... the Label field with the text progress bar would update correctly on each update_idletasks but the window background shows white not the correct ivory colour]</p>  <p>What is the correct way to force the window to update (eg in the main program loop)?</p>  <pre><code>import tkinter as Tk import tkinter.font as TkF from tkinter import ttk import time  class StatusBar(Tk.Frame):      def __init__(self, master):         Tk.Frame.__init__(self, master)         self.customFont2 = TkF.Font(family="Calibri", size=12, weight='bold')         self.customFont5 = TkF.Font(family="Cambria", size=16, weight='bold')         self.config(background='ivory2')         self.grid()         self.create_widgets()      def create_widgets(self):          self.msg = Tk.Label(self, text='&gt;', bg='ivory2', fg='blue4', font=self.customFont2)         self.msg.grid(row=0, column=0, sticky=Tk.W)          self.bar = ttk.Progressbar(self, length=300, mode='indeterminate')         self.bar.grid(row=1, column=0, sticky=Tk.W)          self.btn_abort = Tk.Button(self, text=' Abort ', command=self.abort, font=self.customFont2, fg='maroon')         self.btn_abort.grid(row=2,column=0, sticky=Tk.W)         self.rowconfigure(2, pad=3)          print('widgets done')      def Start(self, msg):         self.msg.configure(text=msg)         self.bar.start()     def Stop(self, msg):         self.msg.configure(text=msg)         self.bar.stop()      def abort(self):         # eventually will raise an error to the calling routine to stop the process         self.destroy()   def main():     print('start')     tkroot = Tk.Tk()     tkroot.title("Status Bar")     tkroot.geometry("500x75")     tkroot.configure(bg='ivory2')     Bar = StatusBar(tkroot)     Bar.Start('Demo')     # z=1/0    # to halt to verify the Status Bar window contents Ok, which they are     for k in range(20):         # Bar.set('test', k)   for determinatge version, to be added later         time.sleep(0.3)         Bar.update_idletasks()  # window opens, but blank.     Bar.Stop('Done')     print('end')     # and now the window contents are Ok.   (Bar not moving of course)  if (__name__ == '__main__'):     main() </code></pre>