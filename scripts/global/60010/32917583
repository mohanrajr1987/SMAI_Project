<p>I am trying to make a functional scale/slider on a tkinter canvas. I need the button on the slider to be click/draggable along the slider length and also an increment and decrement button on either side to change the value by +/- 1. The key factor is that, although the slider might be the same size graphically, I want to be able to change the maximum value it can go to with every instance of the class I have created for it. Obviously, I don't want the sliding button to go over the edges of the slider so the graphical range would actually be the maximum x position on canvas - offset - the width of the button. Lastly, I need the left-most position to have a value of 0 and the right-most position to have a value equal to that of the maximum value with roughly equal portions in between. So if the scale went from values 0 to 24, I could drag the button to a point where I can obtain any number from 1-23 aswell.</p>  <p>I worked out that the relationship between the value and the graphical size (which may also be changed in an instance if desired) is: <br>(x position on canvas - offset) / (maximum x position on canvas - offset) = (current value) / (maximum value) <br>i.e. x/xMax = n/nMax <br>Therefore if we know n then x = n * xMax / nMax <br>and if we know x then n = x * nMax / xMax</p>  <p>EDIT (as I've fixed the bugs regarding the increment/decrement buttons): My problem is that the scale button is not representing the values that it should e.g. it can go from 33-168 when it should only go from 0-150.</p>  <p>I would greatly appreciate some help as I think I've been staring at the same code for too long and lost my way. I've played around with it a lot so i think there might be an offset error but it may also has something to do with the graphical representation of pixels wherein a single difference of 1 value might have a difference of 1.7385 (example) pixels, and so the decimals add up or it rounds it to 2 pixels to draw it and then when the position is taken to find the value it finds a different value than that which was initially drawn...</p>  <pre><code>from tkinter import *  class Slider:     def __init__(self, parent, x, y, settingPaneOffset=0, w=140, h=15, default=4, numRange=150):         self.parent = parent         self.settingPaneOffset = settingPaneOffset         self.offsetX = settingPaneOffset + x + 10 # Only going to be used in relation to the scale which has an addition offset of 10px because of the decrement button and spacing         self.offsetY = y         self.w = w         self.h = h # Height of all elements in-line with scale         self.btnW = w/20         self.defaultValue = default         self.xMax = w - 2*self.btnW         self.nMax = numRange          u = x+w # Width of scale + the x offset coordinate         v = y+h # Height + the y offset coordinate         self.decrementBtn = self.parent.create_rectangle(x, y, x+8, v, fill='#a3a3a3', width=1, outline='#606060')         self.scaleBack = self.parent.create_rectangle(x+10, y, u+10, v, fill='#8f8f8f', width=1, outline='#606060')         self.incrementBtn = self.parent.create_rectangle(u+12, y, u+20, v, fill='#a3a3a3', width=1, outline='#606060')          self.scaleBtn = self.parent.create_rectangle(0, 0, 0, 0, fill='#a3a3a3', width=1, outline='#606060')         self.num = self.parent.create_text(0, 0, text='', fill='#333333', font=('Times New Roman', '10'))         self.draw()      def draw(self):         self.resetScale()         bindList = ((self.scaleBack, self.scaleBtnClick, 0),                     (self.scaleBtn, self.scaleBtnClick, 0),                     (self.scaleBtn, self.scaleBtnClick, '&lt;B1-Motion&gt;'),                     (self.incrementBtn, self.incrementBtnClick, 0),                     (self.decrementBtn, self.decrementBtnClick, 0),                     (self.scaleBack, lambda e: self.colourButton(self.scaleBtn, '#a3a3a3'), 1),                     (self.scaleBtn, lambda e: self.colourButton(self.scaleBtn, '#a3a3a3'), 1),                     (self.incrementBtn, lambda e: self.colourButton(self.incrementBtn, '#a3a3a3'), 1),                     (self.decrementBtn, lambda e: self.colourButton(self.decrementBtn, '#a3a3a3'), 1))         self.bindTags(bindList)      def bindTags(self, bindList):         for i in bindList:             e = {0:"&lt;ButtonPress-1&gt;", 1:"&lt;ButtonRelease-1&gt;"}.get(i[2], i[2])             self.parent.tag_bind(i[0], e, i[1])      def colourButton(self, obj, c): self.parent.itemconfig(obj, fill=c)     def getNum(self, x): return x * self.nMax / self.xMax     def getScalePos(self, n): return n * self.xMax / self.nMax     def getScaleBtn(self, centre): return [self.offsetX+centre-self.btnW, self.offsetX+centre+self.btnW]      def showNumberOfSeats(self, x, n):         self.parent.coords(self.num, x+self.btnW, self.offsetY-8)         self.parent.itemconfig(self.num, text=n)      def redrawScale(self, btnCoords, n=None):         self.n = round(self.getNum(btnCoords[0]+self.btnW)) if(n is None) else n         self.parent.coords(self.scaleBtn, btnCoords[0], self.offsetY, btnCoords[1], self.offsetY + self.h)         self.showNumberOfSeats(btnCoords[0], self.n)      def scaleBtnClick(self, event):         self.colourButton(self.scaleBtn, '#c3c3c3')         btnCoordsEvt = self.getScaleBtn(event.x-self.offsetX)         btnCoordsMin = self.getScaleBtn(self.btnW)         btnCoordsMax = self.getScaleBtn(self.xMax + self.btnW)         if(event.x&lt;btnCoordsMin[0]+self.btnW): self.redrawScale(btnCoordsMin)         elif(event.x&gt;btnCoordsMax[1]-self.btnW): self.redrawScale(btnCoordsMax)         else: self.redrawScale(btnCoordsEvt)      def incrementBtnClick(self, event):         self.colourButton(self.incrementBtn, '#c3c3c3')         if(self.n &lt; self.nMax):             self.n += 1             self.redrawScale(self.getScaleBtn(self.getScalePos(self.n) + self.btnW), self.n)      def decrementBtnClick(self, event):         self.colourButton(self.decrementBtn, '#c3c3c3')         if(self.n &gt; 0):             self.n -= 1             self.redrawScale(self.getScaleBtn(self.getScalePos(self.n) + self.btnW), self.n)      def resetScale(self):         self.n = self.defaultValue         btnCoords = self.getScaleBtn(self.getScalePos(self.n))         self.parent.coords(self.scaleBtn, btnCoords[0]-self.settingPaneOffset, self.offsetY, btnCoords[1]-self.settingPaneOffset, self.offsetY+self.h)         self.showNumberOfSeats(btnCoords[0]-self.settingPaneOffset, self.n)   def callback(event):     print("clicked at", event.x, event.y)  if(__name__=="__main__"):     root = Tk()     root.title("Slider on a canvas")     canvas = Canvas(root, bg='#FFFFFF', width=600, height=400, borderwidth=0, highlightthickness=0)     canvas.pack()     s0 = Slider(canvas, 100, 50)     s1 = Slider(canvas, 100, 100, default=5, numRange=10)     s2 = Slider(canvas, 100, 150, default=8, numRange=20)     s3 = Slider(canvas, 100, 200, default=10, numRange=15)     root.bind("&lt;Button-1&gt;", callback)     root.mainloop() </code></pre>