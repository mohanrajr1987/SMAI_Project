<p>I'm currently learning Python from a book by Michael Dawson. Everything was clear and concise except when i got to an exercise called the 'Word Jumble Game'. This is the code that is confusing me.</p>  <pre><code>import random      # create a sequence of words to choose from     WORDS = ("python", "jumble", "easy", "difficult", "answer", "xylophone")      # pick one word randomly from the sequence     word = random.choice(WORDS)      # create a variable to use later to see if the guess is correct     correct = word      # create a jumbled version of the word     jumble =""     while word:         position = random.randrange(len(word))         jumble += word[position]         word = word[:position] + word[(position + 1):] </code></pre>  <p>What i don't understand is how the while:word works. This is the explanation given:</p>  <blockquote>   <p>I set the loop up this way so that it will continue until word is   equal to the empty string. This is perfect, because each time the loop   executes, the computer creates a new version of word with one letter   “extracted” and assigns it back to word. Eventually, word will become   the empty string and the jumbling will be done.</p> </blockquote>  <p>I tried tracing the program (maybe its an obvious oversight on my behalf) but i cannot see how the 'word' eventually breaks out of the loop because as long as it has characters in it surely it would evaluate to True and be an infinite loop.</p>  <p>Any help is hugely appreciated guys as i have looked for answers everywhere and its been fruitless. Thanks in advance.</p>