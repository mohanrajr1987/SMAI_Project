<p>in a reasonable time ...meaning under an hour. </p>  <p>I have over 1 million strings (max 10 alphanumeric characters) and I want to determine if any of these words are a 'fuzzy match' to any of the words I have on a hard coded list I call Preserved_Words. Preserved_Words contains approximately 30,000 distinct words stored as an ordered python list but not in any particular order.</p>  <p>I'm reading everything in from a csv file and writing to a csv file using the csv module. </p>  <p>Here is what I have so far</p>  <p>def KMP_Match(s):     for p in Preserved_Words:</p>  <pre><code>    if KMP(p.lower(),s.lower()):          return p  return s  </code></pre>  <p>where KMP is an implementation of the KMP match algorithm (it returns True if theres a match and False otherwise).</p>  <p>I don't care so much about KMP (Knuth Morris Pratt) but more that this code works under the computational constraints I described, I only have 2 gigs of ram to work with and not an infinite amount of time.</p>  <p>It may be that my KMP code is inefficient or just plain wrong, I got it from a quick google search although I spent a fair bit of time making sure it did look correct to me. Available at the following url:</p>  <p><a href="https://en.wikibooks.org/wiki/Algorithm_Implementation/String_searching/Knuth-Morris-Pratt_pattern_matcher" rel="nofollow">https://en.wikibooks.org/wiki/Algorithm_Implementation/String_searching/Knuth-Morris-Pratt_pattern_matcher</a></p>  <p>I'm not looking for a complete implementation, just some helpful advice, although a complete solution would be fantastic. Thank you.</p>  <p>You can generate any random alphanumeric characters needed to write the code for both lists, an example would be Abdfasj23423 </p>