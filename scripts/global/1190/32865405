<p>In Ruby on Rails, what is the correct way to render an AJAX 'spinner' while waiting for a slow controller action, and then redirect to the correct view when complete?</p>  <p>Considering the attempt below:</p>  <p>Controller</p>  <pre><code># app/assets/controllers/static_pages_controller.rb class StaticPagesController &lt; ApplicationController      def index     end      def slow_action         sleep 3 # Take a nap         respond_to do |format|             format.js {render js: "window.location = '#{slow_action_path}';"}             format.html {}         end     end end </code></pre>  <p>The index page with jQuery to render the spinner div:</p>  <pre><code>&lt;!-- app/views/static_pages/index.html.erb --&gt; &lt;h1&gt;Index Page&lt;/h1&gt;  &lt;li&gt;&lt;%= link_to "A link to the slow action", slow_action_path, :remote =&gt; true %&gt;&lt;/li&gt;  &lt;div id="spinner"&gt;     &lt;p&gt;Loading... please be patient.&lt;/p&gt; &lt;/div&gt;  &lt;script type="text/javascript"&gt;     $("#spinner").hide(); // Hide the spinner initially      $(document).ajaxSend(function(r, s) {         $("#spinner").show();     });       $(document).ajaxStop(function(r, s) {         $("#spinner").fadeOut("fast");     }); &lt;/script&gt; </code></pre>  <p>And, for what it's worth, the slow_action's view:</p>  <pre><code>&lt;!-- app/views/static_pages/slow_action.html.erb --&gt; &lt;h1&gt;This is the slow action&lt;/h1&gt; </code></pre>  <p>The problem (I think) is that <code>window.location</code> call is simply calling the same action again, and the server is sleeping all over again.  What is the correct way to implement this?</p>