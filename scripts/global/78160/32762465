<pre><code>    public INSERT_RESULT INSERT_NEW_RECORD(string FirstName, string LastName, string MiddleIntial )     {         decimal? InsertedUID;         var nResult = new ObjectParameter("nResult", typeof(decimal));         INSERT_RESULT insertResult = new INSERT_RESULT();          try         {             using (var myDBEntities = dbEntities.GetNewEntities())             {                  InsertedUID = myDBEntities.INSERT_LOOKUP(0, LastName, FirstName, MiddleIntial, dbEntities.global_USER_LOGGED_IN,  nResult).FirstOrDefault();               }             insertResult.WasInserted = true;             insertResult.InsertedUID = InsertedUID ?? 0;             insertResult.ExceptionText = "NONE";         }          catch (Exception ex)         {             insertResult.WasInserted = false;             insertResult.InsertedUID = 0;             insertResult.ExceptionText = ex.InnerException.ToString();          }          return insertResult;     }    public List&lt;GET_ITEMS_Result&gt; GET_ITEMS(decimal itemUID)     {         var result = new List&lt;GET_ITEMS_Result&gt;();         using (var myDBEntities = dbEntities.GetNewEntities())         {             result = myDBEntities.GET_ITEMS(itemUID).ToList();         }         return result;     } </code></pre>  <p>Above are examples of just two methods of hundreds that can be called from myDBEntities. Here is my goal. I want to create a class that will allow a person to pass in the name of the method and parameters and get back whatever return type is specified instead of having to write the above type of code over and over. Any suggestions??   </p>