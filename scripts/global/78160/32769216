<p>I would like to apply a single transformation over a large number of columns in Entity Framework 5 without having to explicitly type them all out.  As an example I would like to do the following over 50+ columns (convert PascalCase to UNDERSCORE_CASE).</p>  <pre><code>modelBuilder.Entity&lt;Department&gt;()              .Property(t =&gt; t.DepartmentName)              .HasColumnName("DEPARTMENT_NAME"); </code></pre>  <p>I found the <a href="http://henkmollema.github.io/Dapper-FluentMap/" rel="nofollow">Dapper.FluentMap</a> which can provide this functionality but it doesn't appear to work when creating the query.</p>  <p>Is there a way to loop over the list of properties and specify the column name following a pattern?  For reference the Dapper Transform is listed as </p>  <pre><code>public PropertyTransformConvention() {     Properties()         .Configure(c =&gt; c.Transform(s =&gt; Regex.Replace(input: s, pattern: "([A-Z])([A-Z][a-z])|([a-z0-9])([A-Z])", replacement: "$1$3_$2$4"))); } </code></pre>  <p><strong>EDIT:</strong> This is similar to <a href="http://stackoverflow.com/questions/16563267/entityframework-codefirst-mapping-to-have-camel-case-in-the-database">this question</a> but it does not work for me.  Perhaps this has different requirements for EF5.</p>  <p>Using the answer from @Hopeless I have attempted the following modification but the syntax is not quite right.  I am new to EF so am not familiar with how to convert the older syntax to the newer.</p>  <pre><code>modelBuilder.Entity&lt;Job&gt;()             .Map(m =&gt; {     m.Properties&lt;Job&gt;(e =&gt; e.HasColumnName(name =&gt; RegEx.Replace(name, "(?&lt;=.)(?=[A-Z])", "_").ToUpper())); }); </code></pre>