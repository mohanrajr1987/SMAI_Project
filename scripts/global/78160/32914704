<p>My business requirements are that I need a common list of addresses.  Some of these addresses are corporate addresses and some are personal addresses.  However, there are many individuals who use corporate addresses as personal addresses.  In this case, we'd rather reference the existing address rather than create a new address so that if the corporate address changes, anyone sharing that address is updated as well.</p>  <p>I have the following POCO objects (which I'll abbreviate to make things simpler)</p>  <pre><code>public class Person {    ...    public ICollection&lt;PersonalAddress&gt; Addresses {get; private set;} }  public class PersonalAddress {    public int Id {get; set;}    public Address Address {get; set;}  //not defining foreign key property here    public PersonalAddressType AddressType {get; set;}    public DateTime? StartDate {get; set;}    ... }  public class Address {    public int Id {get; set;}    public string Street1 {get; set;}    public string Street2 {get; set;}    ... }  public class CorporateAddress {   public int Id {get; set;}   public int AddressId {get; set;}  //foreign key to address table   public Address Address {get; set;}   public string Description {get; set;}   ... } </code></pre>  <p>These have the following EF mappings:</p>  <pre><code>modelBuilder.ToTable("persons"); modelBuilder.Entity&lt;Person&gt;()   .HasMany(p =&gt; p.Addresses)  //PersonalAddress   .WithRequired().Map(m =&gt; { m.MapKey("personId"); } );  modelBuilder.Entity&lt;Address&gt;().ToTable("addresses"); modelBuilder.Entity&lt;Address&gt;().HasKey(a =&gt; a.Id);  modelBuilder.Entity&lt;PersonalAddress&gt;().ToTable("PersonalAddresses"); modelBuilder.Entity&lt;PersonalAddress&gt;()    .HasRequired(p =&gt; p.Address)    .WithMany()    .Map(m =&gt; {m.MapKey("addressid");}); //map FK because not defined on object  modelBuilder.Entity&lt;CorporateAddress&gt;().ToTable("corporateAddresses"); modelBuilder.Entity&lt;CorporateAddress&gt;()    .HasRequired(c =&gt; c.Address)    .WithMany()    .HasForeignKey(c =&gt; c.AddressId); </code></pre>  <p>With all of this, I can successfully add and update addresses both on the Corporate side as well as on the personal side.  I can also add a personal address that references an existing corporate address.</p>  <p>If I try to delete a personal address that is <strong>NOT</strong> tied to a corporate address, I can do so with the following:</p>  <pre><code>var _person = _context.Persons     .Include(p =&gt; p.Addresses.Select(a =&gt; a.Address))     .SingleOrDefault(p =&gt; p.Id == personId);  var _address = _person.Addresses.SingleOrDefault(a =&gt; a.Address.Id == addressId);  _person.Addresses.Remove(_address); \\gets rid of the PersonalAddress _context.Set&lt;Address&gt;().Remove(_address.Address); \\gets rid of the Address _context.SaveChanges(); </code></pre>  <p>However, in cases where the address is shared, I don't want to delete the <code>Address</code>, I just want to delete the <code>PersonalAddress</code>.  Trying the above does not work (granted, I don't execute the second line -- removing the address).</p>  <p>I also tried the following:</p>  <pre><code>_address.Address = null; \\Destroy the link to the Address _person.Addresses.Remove(_address); \\gets rid of the PersonalAddress _context.SaveChanges(); </code></pre>  <p>In this case, neither the personal address nor the address get deleted.</p>  <p>How does one accomplish something like this in EF -- or am I just pushing the limits of what EF can do.</p>  <p><strong>I'm using EF 5.0</strong></p>