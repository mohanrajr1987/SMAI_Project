<p>There are lots of posts about poor EF query performance, but haven't found any answers on how to improve the SQL generation for better performance.  I have a relatively simple query:</p>  <pre><code>from e in this.ObjectContext.Charges              join v in this.ObjectContext.Visits on e.VisitID equals v.VisitID              join ic in this.ObjectContext.InsuranceCases on v.InsuranceCaseID equals ic.InsuranceCaseID              where !e.IsDeleted              &amp;&amp; e.IsBillableToInsurance              &amp;&amp; (e.BillingStatus == "BillPri" || e.BillingStatus == "BillSec")              &amp;&amp; ic.IsHoldCharges              orderby v.StartDateTime descending              select e </code></pre>  <p>The SQL that is generated looks like this (disregard the ellipses, I removed the parameters to shorten the pasted text):</p>  <pre><code>SELECT TOP (1500) ... FROM   (SELECT [Extent1].[ChargeID] AS [ChargeID], [Extent1].[VisitID] AS [VisitID1], [Extent1].[ListOrder] AS [ListOrder], [Extent1].[ServiceCodeID] AS [ServiceCodeID], [Extent1].[ProductCodeID] AS [ProductCodeID], [Extent1].[HICF_PlaceOfService] AS [HICF_PlaceOfService], [Extent1].[HICF_Emergency] AS [HICF_Emergency], [Extent1].[Units] AS [Units], [Extent1].[HICF_EPSDT] AS [HICF_EPSDT], [Extent1].[IsChargeEstimated] AS [IsChargeEstimated], [Extent1].[IsBillableToInsurance] AS [IsBillableToInsurance], [Extent1].[IsDisputed] AS [IsDisputed], [Extent1].[Note] AS [Note], [Extent1].[BaseAmount] AS [BaseAmount], [Extent1].[DiscountAmount] AS [DiscountAmount], [Extent1].[TaxRate] AS [TaxRate], [Extent1].[TaxAmount] AS [TaxAmount], [Extent1].[TotalAmount] AS [TotalAmount], [Extent1].[AmountAllowedWriteoff] AS [AmountAllowedWriteoff], [Extent1].[PriPaid] AS [PriPaid], [Extent1].[SecPaid] AS [SecPaid], [Extent1].[TerPaid] AS [TerPaid], [Extent1].[InsuranceWriteoff] AS [InsuranceWriteoff], [Extent1].[InsuranceBalance] AS [InsuranceBalance], [Extent1].[PatientTotal] AS [PatientTotal], [Extent1].[AmountForwarded] AS [AmountForwarded], [Extent1].[IsDeleted] AS [IsDeleted], [Extent1].[PostedBy_AppUserID] AS [PostedBy_AppUserID], [Extent1].[DateTimePosted] AS [DateTimePosted], [Extent1].[UpdatedBy_AppUserID] AS [UpdatedBy_AppUserID], [Extent1].[Guid] AS [Guid], [Extent1].[Timestamp] AS [Timestamp1], [Extent1].[AmountDisputed] AS [AmountDisputed], [Extent1].[DateTimeUpdated] AS [DateTimeUpdated], [Extent1].[DiagnosisPointers] AS [DiagnosisPointers], [Extent1].[Subtotal] AS [Subtotal], [Extent1].[TaxableAmount] AS [TaxableAmount], [Extent1].[InsuranceTotal] AS [InsuranceTotal], [Extent1].[BillingStatus] AS [BillingStatus], [Extent1].[InsuranceClaimType] AS [InsuranceClaimType], [Extent1].[DateInsuranceBilled] AS [DateInsuranceBilled], [Extent1].[IsTaxed] AS [IsTaxed], [Extent1].[IsEstimatingMemberResponsibility] AS [IsEstimatingMemberResponsibility], [Extent1].[ReconciledCount] AS [ReconciledCount], [Extent1].[CachedAmountAllowedPerUnit] AS [CachedAmountAllowedPerUnit], [Extent1].[EstimatedAmountAllowed] AS [EstimatedAmountAllowed], [Extent1].[EstimatedCoinsurance] AS [EstimatedCoinsurance], [Extent1].[EstimatedCopay] AS [EstimatedCopay1], [Extent1].[EstimatedDeductible] AS [EstimatedDeductible], [Extent1].[ActualAmountAllowed] AS [ActualAmountAllowed], [Extent1].[ActualCoinsurance] AS [ActualCoinsurance], [Extent1].[ActualCopay] AS [ActualCopay], [Extent1].[ActualDeductible] AS [ActualDeductible], [Extent1].[IsRefund] AS [IsRefund], [Extent1].[PatientPaid] AS [PatientPaid], [Extent1].[AmountAllowed] AS [AmountAllowed], [Extent1].[Coinsurance] AS [Coinsurance], [Extent1].[Copay] AS [Copay], [Extent1].[Deductible] AS [Deductible], [Extent1].[PatientOwes] AS [PatientOwes], [Extent1].[DeniedAmount] AS [DeniedAmount], [Extent1].[DateInsuranceFirstBilled] AS [DateInsuranceFirstBilled], [Extent2].[InsuranceCaseID] AS [InsuranceCaseID], [Extent2].[StartDateTime] AS [StartDateTime] FROM  [Patients].[Charge] AS [Extent1] INNER JOIN [Patients].[Visit] AS [Extent2] ON [Extent1].[VisitID] = [Extent2].[VisitID] WHERE ([Extent1].[IsDeleted] &lt;&gt; cast(1 as bit)) AND ([Extent1].[IsBillableToInsurance] = 1) AND ([Extent1].[BillingStatus] IN ('BillPri','BillSec')) ) AS [Filter1] INNER JOIN [Patients].[InsuranceCase] AS [Extent3] ON [Filter1].[InsuranceCaseID] = [Extent3].[InsuranceCaseID] WHERE [Extent3].[IsHoldCharges] = 1 ORDER BY [Filter1].[StartDateTime] DESC </code></pre>  <p>Notice that the generated SQL contains a nested SELECT statement.  This query takes a bit over 2 seconds to run on 20,000 records.  If I optimize this SQL statement (by removing the nested SELECT), it takes much less than a second:</p>  <pre><code>SELECT top 1500 [Extent1].[ChargeID], [Extent2].[StartDateTime] FROM  [Patients].[Charge] AS [Extent1] INNER JOIN [Patients].[Visit] AS [Extent2] ON [Extent1].[VisitID] = [Extent2].[VisitID] INNER JOIN [Patients].[InsuranceCase] AS [Extent3] ON [Extent2].[InsuranceCaseID] = [Extent3].[InsuranceCaseID] WHERE ([Extent1].[IsDeleted] &lt;&gt; cast(1 as bit))  AND ([Extent1].[IsBillableToInsurance] = 1)  AND ([Extent1].[BillingStatus] IN ('BillPri','BillSec'))  AND [Extent3].[IsHoldCharges] = 1 ORDER BY [Extent2].[StartDateTime] DESC </code></pre>  <p>The two second difference may not seem like much, but this is a simple query and we have much more complex queries that take an unacceptably long time to run: 30 to 45 seconds.  </p>  <p>My question is why does EF generate the query this way and more importantly is there a way to get EF to generate more efficient queries?</p>