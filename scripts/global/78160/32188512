<p>Here is the link to my project, which I am currently working on:</p>  <p><a href="https://drive.google.com/file/d/0BzQONlWil3VGdFJyRnM3UUEwVG8/view?usp=sharing" rel="nofollow">My Current Project</a></p>  <p>I am following Domain Driven Design of this blog: <a href="http://www.codeproject.com/Articles/90060/WCF-by-Example-Chapter-I-Baseline" rel="nofollow">WCF by Example</a>.</p>  <p>I want to only create a simple table named zone and retrive data from it. I created services, repositories... Everything the article has suggested.</p>  <p>I want to follow Generic Design For CRUD operation using WCF service so I followed the blog. However, Sir Enrique seems to be very busy. So I am not getting the answer I wanted.</p>  <p>The codebase is exact replica from his project blog. When I ran the downloaded from his blog with his entities it runs great. I can see the tables pop up. But after I changed the project according to my needs with my enities, dtos, serviceContract and services the code doesn't work. I had checked every piece. Everything seems good. But everytime I ran the project it throws me exception as:</p>  <pre><code>An exception of type 'System.NullReferenceException' occurred in Kiosk.Domain.dll but was not handled in user code </code></pre>  <p>at below bold line:</p>  <pre><code>[ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall)] [InstanceCreation] public class ZoneService: ServiceBase, IZoneService {     private readonly IBusinessNotifier BusinessNotifier;     public ZoneService()     {                     **BusinessNotifier = Container.RequestContext.Notifier;**     } </code></pre>  <p>Here it says that Container.RequestContext is null.</p>  <p>Sir Enrique,( the blogger), suggested that I didn't properly do the global context initialization. Here is my DbContext class:</p>  <pre><code>public class KioskDbContext : DbContext {     public IModelCreator ModelCreator { get; private set; }      public KioskDbContext(IModelCreator modelCreator): base("kioskv1") // hardcoded db name     {         ModelCreator = modelCreator;     }      protected override void OnModelCreating(DbModelBuilder modelBuilder)     {         base.OnModelCreating(modelBuilder);         ModelCreator.OnModelCreating(modelBuilder);                 } } </code></pre>  <p>I have wasted more than a week on this. I really don't want to go away with the Domain driven pattern. But I think I am left without any alternatives to abandon it.</p>  <p>Can anybody could explain how to initialize a global context for my above code.</p>  <p>Thanks a billions!!</p>  <p>The above code is really awesome for generic pattern for WCF. If this gets solved, it will simplify many developers work.</p>  <p>EDIT: Here is RequestContext class:</p>  <pre><code>public class RequestContext     : IRequestContext {     public IBusinessNotifier Notifier     {         get         {             InstanceContext ic = OperationContext.Current.InstanceContext;             InstanceCreationExtension extension = ic.Extensions.Find&lt;InstanceCreationExtension&gt;();             return extension.Notifier;         }     } } </code></pre>  <p>And Here is IRequestContext:</p>  <pre><code>public interface IRequestContext {     IBusinessNotifier Notifier { get; } } </code></pre>  <p>I guess the Blogger initialized the RequestContext through XML file. Here is the server container and request context initializer code from xml file. , </p>  <pre><code>&lt;!-- SERVER CONTAINER --&gt; &lt;object id="ServerContainerRef" type="Kiosk.Domain.AppServices.Container,Kiosk.Domain" singleton="true"&gt; &lt;property name="RequestContext" ref="RequestContextRef" /&gt; &lt;/object&gt; &lt;!-- Request Context --&gt; &lt;object id="RequestContextRef" type="Kiosk.Domain.AppServices.WcfRequestContext.RequestContext,Kiosk.Domain" /&gt; </code></pre>