<p>I have a project with a unit test that works under Java 7, but not under Java 8. Is there a good way to investigate such things? (I'm sure that the test is correct; this suggests that there's a subtle bug in the implementation.)</p>  <p>Really I suppose what I would like is a quick way to identify where the code paths diverge. But this is hard, because there might be all sorts of differences in the code paths at a very low level through the JDK, and I don't want to get bogged down in irrelevant differences that are down to tiny optimisations.</p>  <p>So the nice thing would maybe be to ask at what <em>top level</em> trace the paths diverge; and then, starting from just before that point, to ask at what <em>second level</em> trace the paths diverge; and so on.</p>  <p>But I've no idea whether there's a way to do this. I fear I could waste a lot of time if I don't have a systematic approach.</p>  <p>The code, by the way, is the <a href="https://github.com/apache/phoenix" rel="nofollow">Apache Phoenix</a> repository, where under Java 8, I get the following failure:</p>  <pre class="lang-none prettyprint-override"><code>Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec &lt;&lt;&lt; FAILURE! - in org.apache.phoenix.schema.PMetaDataImplTest testEviction(org.apache.phoenix.schema.PMetaDataImplTest)  Time elapsed: 0.006 sec  &lt;&lt;&lt; FAILURE! java.lang.AssertionError: expected:&lt;3&gt; but was:&lt;2&gt;     at org.junit.Assert.fail(Assert.java:88)     at org.junit.Assert.failNotEquals(Assert.java:834)     at org.junit.Assert.assertEquals(Assert.java:645)     at org.junit.Assert.assertEquals(Assert.java:631)     at org.apache.phoenix.schema.PMetaDataImplTest.testEviction(PMetaDataImplTest.java:98) </code></pre>