<p>I proceed java 8 learning.</p>  <p>I have found interesting behaviour:</p>  <p>lets see code sample: </p>  <pre><code>// identity value and accumulator and combiner         Integer summaryAge = Person.getPersons().stream()                 //.parallel()  //will return surprising result                 .reduce(1, (intermediateResult, p) -&gt; intermediateResult + p.age,                         (ir1, ir2) -&gt; ir1 + ir2);         System.out.println(summaryAge); </code></pre>  <p>and model class:</p>  <pre><code>public class Person {      String name;      Integer age;     ///...      public static Collection&lt;Person&gt; getPersons() {         List&lt;Person&gt; persons = new ArrayList&lt;&gt;();         persons.add(new Person("Vasya", 12));         persons.add(new Person("Petya", 32));         persons.add(new Person("Serj", 10));         persons.add(new Person("Onotole", 18));         return persons;    } } </code></pre>  <p>12+32+10+18 = 72<br> For sequental stream this code returns 73(72 + 1) always but for parallel it returns 76(72 + 4*1) always. 4 - stream elements count.</p>  <p>When I saw this result I thought that it is strange that parallel stream and sequental streams returns different results. </p>  <p>Am I broke contract somewhere ?</p>  <h2>P.S.</h2>  <p>for me 73 is expected result but 76 - not.</p>