<p>Does the non-interference requirement for using streams of non-concurrent data structure sources mean that we can't change the state of an <em>element</em> of the data structure during the execution of a stream pipeline (in addition to that we can't change the source data structure itself)? (Question 1)</p>  <p>In the section about <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#NonInterference" rel="nofollow">non-interference</a>, in the the stream package description, its said:  "For most data sources, preventing interference means ensuring that the data source is <em>not modified at all</em> during the execution of the stream pipeline."</p>  <p>This passage does not mention modifying the state of elements?</p>  <p>For example, assuming "shapes" is non-thread-safe collection (such as <code>ArrayList</code>), is the code below considered to have an interference? (Question 2)</p>  <pre><code>shapes.stream()        .filter(s -&gt; s.getColor() == BLUE)       .forEach(s -&gt; s.setColor(RED)); </code></pre>  <p>This example is taken from a <a href="http://cr.openjdk.java.net/~briangoetz/lambda/lambda-libraries-final.html" rel="nofollow">reliable source</a> (to say the least), so it should be correct.  But what if I changed <code>stream()</code> to be <code>parallelStream()</code>, will it still be safe and correct? (Question 3)</p>  <p>On the other hand, "Mastering Lambdas" by Naftalin Maurice, another reliable source, makes it clear that changing the state (value) of elements by the pipeline operation is indeed interference. From the section about non-interference (3.2.3):</p>  <p>"But the rules for streams forbid any modification of stream sources—including, for example, changing the value of an element— by any thread, not only pipeline operations."</p>  <p>If what's said in the book is correct, does it mean we can't use the stream API to modify state of elements (using <code>forEach</code>), and have to do that using the regular iterator (or for-each, or <code>Iterable.forEach</code>)? (Question 4)</p>