<p>I am trying <a href="https://tftp4net.codeplex.com/" rel="nofollow">this</a> TFTP client for my application as Client. However, there is a bug somewhere when sometimes my program which is trying to read the stream throwing exception that the stream is already closed. After some digging in source code I found that in <code>TftpTransfer.cs</code> there is Dispose method, which sometimes called and then exception is thrown. </p>  <p>I can't find why sometimes Dispose method is called before I use the stream(after TFTP transfer is done) and how to address it.</p>  <p>Following is the code and exception occurs on setting position to 0.</p>  <pre><code>        private static AutoResetEvent TransferFinishedEvent = new AutoResetEvent(false);         ....         var client = new TftpClient("192.168.0.1");         var transfer = client.Download("00-02.conf");         transfer.OnFinished += new TftpEventHandler(transfer_OnFinshed);         transfer.OnError += new TftpErrorHandler(transfer_OnError);         Stream stream = new MemoryStream();         transfer.Start(stream);         TransferFinishedEvent.WaitOne();         stream.Position = 0;         var sr = new StreamReader(stream);         var myStr = sr.ReadToEnd();         Console.WriteLine(myStr);         ...         static void transfer_OnError(ITftpTransfer transfer, TftpTransferError error)         {             Console.WriteLine("Transfer failed: " + error);             TransferFinishedEvent.Set();         }          static void transfer_OnFinshed(ITftpTransfer transfer)         {             Console.WriteLine("Transfer succeeded.");             TransferFinishedEvent.Set();         } </code></pre>  <p>UPD: Workaround which didn't work yet</p>  <pre><code>        MemoryStream stream = new MemoryStream();         var sr = new StreamReader(new MemoryStream(stream.GetBuffer()));         transfer.Start(stream);         TransferFinishedEvent.WaitOne();          Console.WriteLine(sr.ReadToEnd()); </code></pre>  <p><code>sr</code> is always pointing to end of stream and it's empty.</p>  <p>UPD2: One thing which maybe worth to mention. Exception cannot access a closed Stream happens only on Windows XP box (.NET 3.5 which I have to stick to). I have tried on Windows 7 and even though sometimes I see the stream inside framework disposed, I don't have exception. Again, on Windows XP exception happens randomly. Approximately every 3 calls to my app throwing exception.</p>