<p>This question seems quite similar to what I am looking for, although that question doesn't have an accepted answer, and he seems to be having a different situation:</p>  <p><a href="http://stackoverflow.com/questions/13986392/httpwebrequest-stops-working-suddenly-no-response-received-after-few-requests">HttpWebRequest stops working suddenly, No response received after few requests</a></p>  <p>Here is the offending piece of code that I managed to narrow down in my program:</p>  <pre><code>private static string GetWebPageTitle(string url) {     try     {         HttpWebRequest request = (HttpWebRequest.Create(url) as HttpWebRequest);         request.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;         HttpWebResponse response = (request.GetResponse() as HttpWebResponse);         using(Stream stream = response.GetResponseStream())         {             // compiled regex to check for &lt;title&gt;&lt;/title&gt; block             Regex titleCheck = new Regex(@"&lt;title&gt;\s*(.+?)\s*&lt;/title&gt;", RegexOptions.Compiled | RegexOptions.IgnoreCase);             int bytesToRead = 8092;             byte[] buffer = new byte[bytesToRead];             string contents = "";             int length = 0;             while((length = stream.Read(buffer, 0, bytesToRead)) &gt; 0)             {                 // convert the byte-array to a string and add it to the rest of the                 // contents that have been downloaded so far                 contents += Encoding.UTF8.GetString(buffer, 0, length);                 Match m = titleCheck.Match(contents);                 if(m.Success)                 {                     // we found a &lt;title&gt;&lt;/title&gt; match =]                     return m.Groups[1].Value.ToString();                     break;                 }                 else if(contents.Contains("&lt;/head&gt;"))                 {                     // reached end of head-block; no title found =[                     return null;                     break;                 }             }             return null;         }     }     catch     {         return "error404";     } } </code></pre>  <p>I originally got that code working on Windows 8.1, using NET 4.0 Framework. It works completely fine too still. Then I decided to change it to NET 3.5 Framework (not client profile), so it could run on a clean version of Windows 7 without any updates, and without installing the NET 4.0 Framework on it.</p>  <p>The funny thing is, when I tested it on my development computer, which is Windows 8.1, it works fine. </p>  <p>But... on the Windows 7 test computer, which I do/can not want to install Visual Studio or any NET 4.0 Framework, apparently something goes horribly wrong and triggers the try-catch... thus returning the "error404" value. <em>(I have actually tested this on two different Windows 7 computers, and with one on a standard account and another on an administrator account. The one with the standard account also has some what strict firewall restrictions while the one with the administrator account has none. All to ensure that it wasn't the configuration of the computers themselves messing it up.)</em></p>  <p>There doesn't seem to be any thing wrong with the code, and I know it definitely works still on Windows 8 and 8.1 ... Is there something in the code that is not supported by plain Windows 7 equipped with NET 3.5 Framework? And if so, is there a way to replace the offending parts of the code with one that would work on Windows 7 and up?</p>  <p>(I am assuming that it has something to do with the HttpWebRequest, hence my question title, but I am not too sure.)</p>  <p>None of the computers has, or will have the Net 3.5 Framework disabled either.</p>