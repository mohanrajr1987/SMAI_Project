<p>I encountered a problem with SortedList where 2 methods give 2 diffrent results.</p>  <pre><code>//Item Data is one of this sortedList item var itemPos = Items.IndexOfValue(ItemData); Item item; Items.TryGetValue(itemPos, out item); </code></pre>  <p>The result is not that obvious. I will operate on numbers rather on abstracts letters to better ilustrate what is happening.</p>  <p>itemPos is getting set to 5. Ok! Next we try to get this item again form this index but no. It returns null. Ofcourse this is not happening immediately. This code is called before that happens.</p>  <pre><code>    public void MoveItem(int indexFrom, int indexWhere)     {         Item itemToSawp;         Items.TryGetValue(indexFrom, out itemToSawp);         Items.Remove(indexFrom);         Items.Add(indexWhere, itemToSawp);     } </code></pre>  <p>To move items on sorted list we have to remove and add item again. Ok! Debugging says that operation went wonderfully and my item have now index 5 i moved it from index 4. Where index 5 were empty before method MoveItem.</p>  <p>Or was it empty? Before that operation i had index 5 filled with stuff and i called simple Items.Remove(5);</p>  <p>But now happens what i described before.</p>  <p>Worth noting that this only is happening when i move item upwards in index, look from 4-5. When i move from 5-4 everything works correctly.</p>  <p>Do you have any idea what is going on over here? I'm using .NET 3.5</p>  <p>Full code  </p>  <pre><code>using System; using System.Collections.Generic;  class Program {     static SortedList&lt;int, ItemData&gt; Items = new SortedList&lt;int, ItemData&gt;();      static void Main(string[] args)     {         var Foo = new ItemData();         Items.Add(0, Foo);         Items.Add(1, new ItemData());         Items.Remove(1);         MoveItem(0, 1);         var itemPos = Items.IndexOfValue(Foo);         Console.WriteLine(itemPos);         //Console should return 1 i think         ItemData item;         Items.TryGetValue(itemPos, out item);     }      public static void MoveItem(int indexFrom, int indexWhere)     {         ItemData itemToSawp;         Items.TryGetValue(indexFrom, out itemToSawp);         Items.Remove(indexFrom);         Items.Add(indexWhere, itemToSawp);     }      class ItemData     {      } } </code></pre>  <p>EDIT: This is a bit confusing, but! Indexer (look at name of it :P) Take as argument KEY not INDEX. This is what get me confused and i mixedup everythig. So as Christoph said. Its better to use you own list you could use it as desire or read documentation deeply.</p>