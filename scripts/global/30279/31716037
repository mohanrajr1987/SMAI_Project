<p><strong>Note:</strong> This is a vanilla WinForms application. No WPF or WCF or anything else.</p>  <p>Hey people, I'm developing a <strong>WinForms (.NET 3.5)</strong> application and am stuck at a problem. I'm trying to get cities based on the selected state (both in 2 different <code>ComboBox</code>-es with <code>DropDownStyle</code> set to <code>DropDownList</code>).</p>  <p>I have implemented this logic in the <code>SelectedIndexChanged</code> event handler using the <code>SelectedValue</code> property. The <code>DataSource</code> is a <code>DataTable</code> returned from a DB method, and <code>SelectedValue</code> returns an instance of <code>DataRowView</code>.</p>  <p><strong>In the form constructor</strong>, I populate the state ComboBox and programmatically set the default state selection using <code>SelectedIndex</code> property; this then goes to the event handler, <strong>executes properly, and populates the city</strong> <strong><code>ComboBox</code></strong> for that state.</p>  <p>Now the problem comes when I change the selected state <strong>post-construction</strong>, when the form is up &amp; running, using my mouse. This again goes to the event handler, but the <code>SelectedValue</code> property <strong>returns a null reference</strong>. Please help. I'm attaching the code below.</p>  <pre><code>private void comboFindState_SelectedIndexChanged(object sender, EventArgs e)         {              DataRowView selectedState;             int selectedStateId;             DataTable citiesTable;              selectedState = comboFindState.SelectedValue as DataRowView;               if (selectedState != null) //Is true the first time around when the event is             //triggered due to programmatic change of the index.             //Then null afterwards, on change via mouse click.             {                 selectedStateId = Convert.ToInt32(selectedState.Row["State Code"]);                 citiesTable = DatabaseHelper.getStateCities(selectedStateId);                  comboFindCity.DataSource = citiesTable; //Same binding for state ComboBox                 //in the form's constructor;                 comboFindCity.DisplayMember = "City"; //only here it says "State",                 comboFindCity.ValueMember = "City Code";// and here it says "State Code".                  comboFindCity.SelectedIndex = 0; //Same thing in the form's constructor for                 //setting default selected index of state ComboBox.             }             else             {                 //just populates an error TextBox saying 'No Cities Found'             }         } </code></pre>  <p>Note that all this is happening for the state <code>ComboBox</code>, which is already populated. The city <code>ComboBox</code> doesn't even enter the scope the second time, so there's no database problem.</p>  <p><strong>EDIT:</strong> FYI, I have set the <code>ValueMember</code> property for t<code>comboFindState</code> from the <strong>absolute start</strong>. So that was not the reason why it didn't work. Also note that it worked properly the first time around, hence proving that the <code>ValueMember</code> is set properly.</p>