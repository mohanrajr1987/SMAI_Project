<p>The following is a valid Java program.</p>  <pre><code>public class Foo {     public static void \u006d\u0061\u0069\u006e(String[] args)     {         System.out.println("hello, world");     } } </code></pre>  <p>The <code>main</code> identifier is written using Unicode escape sequences. It compiles and runs fine.</p>  <pre><code>$ javac Foo.java &amp;&amp; java Foo hello, world </code></pre>  <p>Although the following details may not be necessary for this question, I am sharing it in case someone is curious about it. I am using Java compiler from OpenJDK on Debian 8.0 but what I ask in this question should be applicable to any Java compiler.</p>  <pre><code>$ javac -version javac 1.7.0_79 $ readlink -f $(which javac) /usr/lib/jvm/java-7-openjdk-amd64/bin/javac </code></pre>  <p>The following program is an error because the escape sequence used to write <code>m</code> of <code>main</code> is invalid.</p>  <pre><code>public class Foo {     public static void \u6d\u0061\u0069\u006e(String[] args)     {         System.out.println("hello, world");     } } </code></pre>  <p>The compiler complains about illegal unicode sequence.</p>  <pre><code>$ javac Foo.java &amp;&amp; java Foo Foo.java:3: error: illegal unicode escape     public static void \u6d\u0061\u0069\u006e(String[] args)                            ^ Foo.java:3: error: invalid method declaration; return type required     public static void \u6d\u0061\u0069\u006e(String[] args)                             ^ 2 error </code></pre>  <p>What surprised me is that the following program is also invalid even though the illegal unicode escape sequence <em>appears</em> to be in a comment.</p>  <pre><code>public class Foo {     // This comment contains \u6d.     public static void main(String[] args)     {         System.out.println("hello, world");     } } </code></pre>  <p>Here is the error.</p>  <pre><code>$ javac Foo.java &amp;&amp; java Foo Foo.java:3: error: illegal unicode escape     // This comment contains \u6d.                                  ^ 1 error </code></pre>  <p>The compiler complains about the illegal unicode escape sequence although it appears to be in a comment.</p>  <p>The reason behind this behaviour becomes clear when we see how an end-of-line comment is defined in <a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.7" rel="nofollow">JLS ยง3.7</a>.</p>  <pre><code>EndOfLineComment: / / {InputCharacter}  </code></pre>  <p><a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.4" rel="nofollow">JLS ยง3.4</a> defines <code>InputCharacter</code> as follows.</p>  <pre><code>InputCharacter:   UnicodeInputCharacter but not CR or LF  </code></pre>  <p>Finally, <a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.3" rel="nofollow">JLS ยง3.3</a> defines <code>UnicodeInputCharacter</code> as follows.</p>  <pre><code>UnicodeInputCharacter:   UnicodeEscape   RawInputCharacter  UnicodeEscape:   \ UnicodeMarker HexDigit HexDigit HexDigit HexDigit  UnicodeMarker:   u {u}  HexDigit:   (one of)   0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F  RawInputCharacter:   any Unicode character </code></pre>  <p>Therefore, the lexical analyzer is required to first recognize the Unicode escape sequences in order to recognize comments, and if an illegal Unicode escape sequence is found, the lexical analysis would fail and an error would occur. Therefore, the compiler would never proceed to recognizing the comment that contained the illegal Unicode espcae sequence.</p>  <p>Although I used to think that everything from the start of a comment (say <code>//</code>) till the end is ignored, the above example shows that this is not the case because the lexical analyzer has to recognize Unicode escape sequences between the start of a comment and the end of a comment, and an illegal Unicode escape sequence can cause the lexical analysis to fail.</p>  <p>What else can cause the compiler to fail while parsing a comment?</p>