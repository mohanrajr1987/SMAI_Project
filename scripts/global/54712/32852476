<p>Have tried several hours to accomplish this with Python 2.7s Flask:</p>  <pre><code>site.com/diseases                     : gives a page where I can list all diseases site.com/diseases/diseaseX            : list of subtopics for diseaseX site.com/diseases/diseaseX/subHeading : so a url can be shared that brings users to a specific subheading e.g. overview, causes </code></pre>  <p>app.py   </p>  <pre><code>from flask import Flask, render_template app = Flask(__name__)  app.route('/home') def home(): render_template('home.html')  @app.route('/diseases/&lt;disease&gt;/&lt;subheading&gt;') def diseases(disease=None, subheading=None):     return render_template('diseases.html', disease='new')  app.run(debug=True) </code></pre>  <p>The route needs both variable or gives a 404 Error.  The argument defaults were changed to 'disease' &amp; 'sub', but loading site.com/diseases gives 404 also.  Only adding variables e.g. site.com/diseases/diabetes/treatment works, but then what if someone types just site.com/diseases or site.com/diseases/diabetes?  I couldn't find examples of anyone doing this, everyone was just stating the required variables, then obeying them, so maybe this is a problem of not understanding standard web app procedures.  Ideally the URLs will be expandable to any length e.g. /diseases/diabetes/treatment/treatmentX, but I'm somewhat lost as to how.</p>  <p>EDIT I've made progress by doing </p>  <pre><code>@app.route('/diseases/&lt;path:queries&gt;) </code></pre>  <p>The path: element treats any / as text, so I can now do </p>  <pre><code>/diseases/diabetes/treatment/treatmentX </code></pre>  <p>and in the function do</p>  <pre><code>queries.split('/') </code></pre>  <p>to get the discrete URL parts.  This seems a little long winded, but maybe it's how things are done?</p>