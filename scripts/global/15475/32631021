<p>I wrote a program with multiple threads. My log entries contain timestamp, logging level, thread number, thread name, file name and so on. Example:</p>  <pre><code>2015-08-24 16:53:21,827;    INFO;   140013173012224;    rec_thread;     receiver.py;    11; Receiver 2015-08-24 16:53:21,827;    INFO;   140013164619520;    trans_thread;   transmitter.py; 10; Transmitter </code></pre>  <p>140013173012224 and 140013164619520 being thread numbers. However the program is supposed to perform CPU-bound tasks, so I chose multiprocessing over multithreading to get around the GIL. I modified the logger to store the process' numbers as well and got:</p>  <pre><code>2015-09-17 14:29:19,979;    INFO;   140160851117824;    MainThread;     19310;  receiver.py;    12; Receiver 2015-09-17 14:29:19,980;    INFO;   140160851117824;    MainThread;     19311;  transmitter.py; 10; Transmitter </code></pre>  <p>19310 and 19311 being process numbers and 140160851117824 being the main thread number. Why do I get one thread number, but different process numbers?</p>  <p>Edit:</p>  <pre><code>from multiprocessing import Process, Queue class AppManager():     """     starts all the processes     """     def __init__(self):         self.date = datetime(2015, 9, 9, 4, 39, 0)         self.log = logger.start_log("INFO")         self.log.info("#========================================================#")         self.log.info("start app")         self.lst_process = []         self.init_queues()         self.start_processes()       def init_queues(self):         """         inits queues necessary for the prcesses to communicate;         self.main_2_GS sends data from main process to the ground station process, etc.         """         self.main_2_GS = Queue()         self.GS_2_TR = Queue()         self.TR_2_RC = Queue()         self.RC_2_main = Queue()         self.GS_2_main = Queue()         self.sat_2_RC = Queue()      def start_processes(self):         """         starts all the processes         """         self.init_GS_proc()         self.init_satellite_proc()         self.init_RC_proc()         self.init_TR_proc()         for thread in self.lst_process:             thread.start()      def init_GS_proc(self):         gs_instance = GroundStationCLS         next_proc = Process(target = gs_instance, args = (1, self.GS_2_main, self.GS_2_TR, self.main_2_GS))         self.lst_process.append(next_proc)      def init_satellite_proc(self):         sat_instance = SatelliteCLS         next_proc = Process(target = sat_instance, args = (2, self.date, self.sat_2_RC))         self.lst_process.append(next_proc)      def init_RC_proc(self):         rec_instance = ReceiverCLS         next_proc = Process(target = rec_instance, args = (3, self.RC_2_main, self.TR_2_RC, self.sat_2_RC))         self.lst_process.append(next_proc)      def init_TR_proc(self):         trans_instance = TransmitterCLS         next_proc = Process(target = trans_instance, args = (4, self.TR_2_RC, self.GS_2_TR))         self.lst_process.append(next_proc) </code></pre>  <p>all of the other classes are empty and look like this:</p>  <pre><code>class ReceiverCLS():     def __init__(self, number, RC_2_main, TR_2_RC, sat_2_RC):         self.log = logger.start_log("INFO")         self.log.info("Receiver")         self.number = number         self.RC_2_main = RC_2_main         self.TR_2_RC = TR_2_RC         self.sat_2_RC = sat_2_RC </code></pre>  <p>and the logger:</p>  <pre><code>import logging import time   def start_log(verbosity):     log = logging.getLogger("test")     if not len(log.handlers):         timestr = time.strftime("%Y%m%d")         hdlr = logging.FileHandler(timestr+'test.log')         # formatter = logging.Formatter('%(asctime)s;\t%(levelname)s;\t%(thread)d;\t%(threadName)s;\t%(filename)s;\t%(lineno)d;\t%(message)s')         formatter = logging.Formatter('%(asctime)s;\t%(levelname)s;\t%(thread)d;\t%(process)d;\t%(filename)s;\t%(lineno)d;\t%(message)s')         hdlr.setFormatter(formatter)         log.addHandler(hdlr)         if verbosity == "DEBUG":             log.setLevel(logging.DEBUG)         elif verbosity == "INFO":             log.setLevel(logging.INFO)         elif verbosity == "WARNING":             log.setLevel(logging.WARNING)     return log </code></pre>