<p>The following code starts three processes, they are in a pool to handle 20 worker calls:</p>  <pre><code>import multiprocessing  def worker(nr):     print(nr)  numbers = [i for i in range(20)]  if __name__ == '__main__':     multiprocessing.freeze_support()     pool = multiprocessing.Pool(processes=3)     results = pool.map(worker, numbers)     pool.close()     pool.join() </code></pre>  <p><strong>Is there a way to start the processes in a sequence (as opposed to having them starting all at the same time), with a delay inserted between each process start?</strong></p>  <p>If not using a <code>Pool</code> I would have used <code>multiprocessing.Process(target=worker, args=(nr,)).start()</code> in a loop, starting them one after the other and inserting the delay as needed. I find <code>Pool</code> to be extremely useful, though (together with the <code>map</code> call) so I would be glad to keep it if possible.</p>