<p>I have a function which I would like to be executed several times in parallel, but with only a defined number of instances at the same time.</p>  <p>The natural way to do this seems to be to use <a href="https://docs.python.org/3.5/library/multiprocessing.html#module-multiprocessing.pool" rel="nofollow"><code>multiprocessing.Pool</code></a>. Specifically, the documentation says that</p>  <blockquote>   <p>A frequent pattern (...) is to allow a worker within a   pool to complete only a set amount of work before being exiting, being   cleaned up and a new process spawned to replace the old one. The   <code>maxtasksperchild</code> argument to the Pool exposes this ability to the end   user.</p> </blockquote>  <p><code>maxtasksperchild</code> is defined as:</p>  <blockquote>   <p><code>maxtasksperchild</code> is the number of tasks a worker process can   complete before it will exit and be replaced with a fresh worker   process, to enable unused resources to be freed. The default   maxtasksperchild is None, which means worker processes will live as   long as the pool.</p> </blockquote>  <p>I am not clear what <strong><em>task</em></strong> means here. If I want to have, say, only up to 4 instances of my worker running in parallel should I initiate <code>multiprocessing.Pool</code> as</p>  <pre><code>pool = multiprocessing.Pool(processes=4, maxtasksperchild=4) </code></pre>  <p>How <code>processes</code> and <code>maxtasksperchild</code> work together? Could I set <code>processes</code> to 10 and still have only 4 workers running (effectively having 6 processes idle?)</p>