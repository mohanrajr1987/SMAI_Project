<p>Here is the Bakery Algorithm that's implementing a lock, straight from the "Herlihy The art of multiprocessor programming" book: </p>  <pre><code>public class Bakery implements Lock { boolean[] flag; Label[] label; public Bakery (int n){     flag = new boolean[n];     label = new Label[n];     for (int i = 0; i&lt;n; i++){         flag[i] = false;         label[i] = 0;     } } public void lock(){     int i = ThreadID.get();     flag[i] = true;     label[i] = max(label[0],..., label[n-1]) + 1;     while((∃k!=i)(flag[k] &amp;&amp; (label[k], k)&lt;&lt;(label[i], i))){};     } public void unlock(){     flag[ThreadID.get()]=false;     } } </code></pre>  <p>As you may notice in the lock method, the while kind of makes sense but not totally clear. So I'm revising that part starting from the line before that: </p>  <pre><code>label[i] = max(label[0],..., label[n-1]) + 1; while((∃k!=i)(flag[k] &amp;&amp; (label[k], k)&lt;&lt;(label[i], i))){}; </code></pre>  <p>Here's my version so far, but I'm not sure if it's correct though: </p>  <pre><code>public void lock(){         int i = ThreadID.get();         flag[i] = true;         for (int j = 0; j &lt; n; j++)              if (j != i)                 while (!(label[j] == 0 || label[i] &lt; label[j] ||                  (flag[i] == flag[j] &amp;&amp; i &lt; j)))                  } </code></pre>  <p>Could anyone point out where I'm making the error, please? Thanks in advance! </p>