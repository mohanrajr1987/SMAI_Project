<p>I observed this behavior when trying to create nested child processes in Python. Here is the parent program <code>parent_process.py</code>:</p>  <pre><code>import multiprocessing import child_process  pool = multiprocessing.Pool(processes=4) for i in range(4):         pool.apply_async(child_process.run, ()) pool.close() pool.join() </code></pre>  <p>The parent program calls the "run" function in the following child program child_process.py:</p>  <pre><code>import multiprocessing  def run():         pool = multiprocessing.Pool(processes=4)         print 'TEST!'         pool.close()         pool.join() </code></pre>  <p>When I run the parent program, nothing was printed out and the program exited quickly. However, if <code>print 'TEST!'</code> is moved one line above (before the nested child processes are created), <code>'TEST!'</code> are printed for 4 times.</p>  <p>Because errors in a child process won't print to screen, this seems to show that the program crashes when a child process creates its own nested child processes.</p>  <p>Could anyone explain what happens behind the scene? Thanks!</p>