<p>I'm working on a tool for data entry at my job where it basically takes a report ID number, opens a PDF to that page of that report, allows you to input the information and then saves it.</p>  <p>I'm completely new to instantiating new processes in python; this is the first time that I've really tried to do it. so basically, I have a relevant function:</p>  <pre><code>def get_report(id):     path = report_path(id)     if not path:         raise NameError     page = get_page(path, id)     proc = subprocess.Popen(["C:\Program Files (x86)\Adobe\Reader 11.0\Reader\AcroRd32.exe", "/A", "page={}".format(page),                              path]) </code></pre>  <p>in order to open the report in Adobe Acrobat and be able to input information while the report is still open, I determined that I had to use <code>multiprocessing</code>. So, as a result, in the main loop of the program, where it iterates through data and gets the report ID, I have this:</p>  <pre><code>for row in rows:     print 'Opening report for {}'.format(ID)     arg = ID     proc = Process(target=get_report, args=(arg,))     proc.start()      row[1] = raw_input('Enter the desired value: ')     rows.updateRow(row)      while proc.is_alive():         pass </code></pre>  <p>This way, one can enter data without the program hanging on the <code>subprocess.Popen()</code> command. However, if it simply continues on to the next record without closing the Acrobat window that pops up, then it won't actually open the next report. Hence the <code>while proc.is_alive():</code>, as it gives one a chance to close the window manually. I'd <em>like</em> to kill the process immediately after 'enter' is hit and the value entered, so it will go on and just open the next report with even less work. I tried several different things, ways to kill processes through the <code>pid</code> using <code>os.kill()</code>; I tried killing the subprocess, killing the process itself, killing both of them, and also tried using <code>subprocess.call()</code> instead of <code>Popen()</code> to see if it made a difference. </p>  <p>It didn't.</p>  <p>What am I missing here? How do I kill the process <em>and</em> close the window that it opened in? Is this even possible? Like I said, I have just about 0 experience with processes in python. If I'm doing something horribly wrong, please let me know!</p>  <p>Thanks in advance.</p>