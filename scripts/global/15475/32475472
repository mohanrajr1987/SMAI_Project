<p>I am a newbie in python programming. I started a project for a score-table. The concecpt is very easy. 2 Players, there scores should be raised and a timer that increases. No problem so far. In addition the whole thing should be controlled by a Wii remote controller. I started to implement the wii-connection code using threading. If I now execute the code and connect the wii controller the execution becomes more than slow and output comes only sporadically. The strange thing is, if I now attach strace to that process it runs normal, if it's killed it's slow again and so on. Did anyone saw that kind of behavior ? After that I tried to implement the wii connection using multiprocessing. That worked normal so far, but now I got the problem that I cannot call other windows (gtk) because of the 2 processes that access the same handlers for connecting to the X-server. What can I do to get this running ? Many thanks in advance, best regards,</p>  <p>Nico</p>  <p>main.py should be started to call WiiRemote.py. After succesfull connection WiiWindow.py should be called from main.py to close the window and open the next one.</p>  <p><strong>main.py:</strong></p>  <pre><code>#!/usr/bin/env python # coding=UTF-8  try:   pygtk.require('2.0') except:   pass  import gobject from Tafel import Tafel from Wahl  import Wahl from WiiWindow import WiiWindow from WiiRemote import WiiRemote #from thread import start_new_thread #import threading  class Main:   def __init__(self):     self.Tafel = Tafel()     self.WiiWindow = WiiWindow()     self.Wahl = Wahl("","")     self.Wii = WiiRemote(self.callbackWii, self.wiiConnected)     gobject.timeout_add(1, self.Wii.keepRunning)     self.currentScreen = 0     self.showWii()    def showTafel(self):     self.currentScreen = 2     self.Tafel.show()     self.Tafel.run()    def showWahl(self):     self.currentScreen = 1     gobject.timeout_add(500, self.Wii.keepRunning)     self.Wahl.show()     #self.Wahl.run()    def showWii(self):     self.currentScreen = 0     self.WiiWindow.show()     self.WiiWindow.run()    def wiiConnected(self, isConnected):     print("isConn: ",isConnected)     if (isConnected == True):       self.WiiWindow.Connected()       self.showWahl()     else:       self.wii.destroy()     def callbackWii(self, btn):     print ("wiiClicked: ", btn)     return     if (self.currentScreen == 1):       self.Wahl.callbackWii(btn)     if (self.currentScreen == 2):       self.Tafel.callbackWii(btn)     main = Main() </code></pre>  <p><strong>WiiRemote.py:</strong></p>  <pre><code>import cwiid import time import threading  class WiiRemote(threading.Thread):    def __init__(self, callbackClicked, callbackConnected):     threading.Thread.__init__(self)     self.thread = self     self.thread.setDaemon = True     self.thread.start()     self.callback = callbackClicked     self.connected = callbackConnected     self.running = True    def keepRunning(self):     return True    def destroy(self):     self.running = False    def run(self):      while True:       print 'break'       time.sleep(1)       self.button_delay = 0.2     print 'Press 1 + 2 on your Wii Remote now ...'     time.sleep(1)      # Connect to the Wii Remote. If it times out     # then quit.     try:       wii=cwiid.Wiimote()     except RuntimeError:       print "Error opening wiimote connection"       self.connected(False)       quit()     self.connected(True)     print 'Wii Remote connected...\n'     print 'Press some buttons!\n'     print 'Press PLUS and MINUS together to disconnect and quit.\n'      wii.rpt_mode = cwiid.RPT_BTN     while self.running == True:        buttons = wii.state['buttons']        # If Plus and Minus buttons pressed       # together then rumble and quit.       if (buttons - cwiid.BTN_PLUS - cwiid.BTN_MINUS == 0):         print '\nClosing connection ...'         wii.rumble = 1         time.sleep(1)         wii.rumble = 0         exit(wii)        # Check if other buttons are pressed by       # doing a bitwise AND of the buttons number       # and the predefined constant for that button.       if (buttons - cwiid.BTN_UP == 0):         self.callback("UP")         time.sleep(self.button_delay) </code></pre>  <p><strong>WiiWindow.py</strong></p>  <pre><code>try:   import pygtk   import gobject   pygtk.require('2.0')   import gtk   import time except:   pass  RCCONN = False  class WiiWindow(object):   def __init__(self):     self.builder = gtk.Builder()     self.builder.add_from_file("wahl.glade")     self.wwindow = self.builder.get_object("window1")     self.BUTworc = self.builder.get_object('BUTworc')      def run(self):     print 'start'     gtk.main()     def show(self):     self.wwindow.show()    def Connected(self):     self.wwindow.destroy() </code></pre>