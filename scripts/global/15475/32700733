<p>I'm making some api requests which are limited at 20 per seconds. As to get the answer the waiting time is about 0.5 secs I thougt to use multiprocessing.Pool.map and using this decorator <a href="http://stackoverflow.com/questions/667508/whats-a-good-rate-limiting-algorithm/667706#667706">rate-limiting</a> So my code looks like</p>  <pre><code>    def fun(vec):         #do stuff      def RateLimited(maxPerSecond):         minInterval = 1.0 / float(maxPerSecond)         def decorate(func):             lastTimeCalled = [0.0]             def rateLimitedFunction(*args,**kargs):                 elapsed = time.clock() - lastTimeCalled[0]                 leftToWait = minInterval - elapsed                 if leftToWait&gt;0:                     time.sleep(leftToWait)                 ret = func(*args,**kargs)                 lastTimeCalled[0] = time.clock()                 return ret            return rateLimitedFunction        return decorate     @RateLimited(20)    def multi(vec):        p = Pool(5)           return p.map(f, vec) </code></pre>  <p>I have 4 cores and this programs works fine and there is an improvement in time compared to the loop version. Furthermore when the Pool argument is 4,5,6  it works and the time is smaller for Pool(6) but when I use 7+ I got errors (To many connections per seconds I guess).</p>  <p>Then if my function is more complicated and can do 1-5 requestes the decorator doesn't work as expected.  What else I can use in this case? </p>  <h2>UPDATE</h2>  <p>For anyone looking for use Pool remember to close it otherwise you are going to use all the RAM</p>  <pre><code>   def multi(vec):        p = Pool(5)           res=p.map(f, vec)        p.close()        return res </code></pre>  <h2>UPDATE 2</h2>  <p>I found that something like this <a href="http://stackoverflow.com/questions/26200661/how-can-i-limit-api-calls-in-multithreaded-program-in-python-3">WebRequestManager</a> can do the trick. The problem is that doesn't work with multiprocessing.Pool with 19-20 processes because the time is stored on the class you need to call when you run the request.</p>