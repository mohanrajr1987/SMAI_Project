<p>I have 2 processes <code>A</code> and <code>B</code>, communicating through a <code>multiprocessing.Pipe()</code>, and I would like raise an exception in <code>B</code> when <code>A</code> fails. For now I have something like that:</p>  <pre><code>def A_function():     try:         a,b=Pipe()         B=Process(target=B_function,args=(b,))         B.start()         while True:             a.send(data)             data_recv=a.recv()     except Exception as e:         print e         #  terminate process properly  def B_function(b):     try:         while True:             data_recv=b.recv()             # do some work on data_recv, but can fail             b.send(modified_data)     except Exception as e:         print e         raise # not working on the other process `A`  A=Process(target=A_function) A.start() </code></pre>  <p>If process <code>B</code> fails, there is nothing happening on <code>A</code>. I wonder if there is a pythonic way to transmit the exception to <code>A</code> or if I should send some dummy message through the <code>Pipe</code>, or kill the Pipe to raise an Error in <code>A</code>, but that doesn't seem very clean.</p>