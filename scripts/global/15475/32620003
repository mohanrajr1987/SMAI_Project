<p><em>Scenario:</em></p>  <p>I currently have a class <strong><code>MyLoadBalancerSingleton</code></strong> that manages access to a cluster of resources (<strong><code>resource1</code></strong> and <strong><code>resource2</code></strong>). The class has methods <em>create(count)</em> and <em>delete(count)</em>. When these methods get called, the load balancer would queue up the request and then processes it FIFO on the resources.</p>  <p>Naturally, there should be only one load balancer running otherwise each they'll all think they have complete control over the resources being managed.</p>  <p><em>Here is the problem:</em> </p>  <p>Multiple users will simultaneously try to access the load balancer from a GUI. Each user will spawn their own GUI via <code>python gui.py</code> on the same machine. (They will all ssh into the same machine) As such, each GUI will be running in it's own process. The GUI will then attempt to communicate with the load balancer.</p>  <p>Is it possible to have those multiple GUI processes access only one loadbalancer process and call the load balancer's methods?</p>  <p>I looked into the <code>multiprocessing</code> library and it appears that the workflow is opposite to what I want. Using my example it would be: Loadbalancer process spawns 2 GUI processes (child) and then shares the parent resources with the child. In my example, both the GUI and the load balancer are top level processes. (No parent-child relationship)</p>  <p>I suspect that Singleton is not the right word as singletons only work within one process. Maybe run the load balancer as a daemon process and then have those GUI processes connect to it? I tried searching IPC but it just lead me to the <code>multiprocessing</code> module which is not what I want. The <code>distributed, cluster computing modules (dispy)</code> isn't what I want either. This is strictly processes communicating with each other (IPC?) on the same machine.</p>  <p>Which brings me to my original question: <em>Is it possible to allow multiple processes to connect to a singleton process and invoke method calls or access its resources? All processes will be executing on the same machine.</em></p>  <p>Fictitious pseudocode:</p>  <p>LoadBalancer.py</p>  <pre><code>class MyLoadBalancerSingleton(object):     def __init__():         # Singleton instance logic here         # Resource logic here     def create(count):         resource1.create(count)         resource2.create(count)     def delete(count):         resource1.delete(count)         resource2.delete(count) </code></pre>  <p>Gui.py</p>  <pre><code>class GUI(object):     def event_loop():         # count = Ask for user input         # process = Locate load balancer process         # process.create(count)         # process.delete(count) </code></pre>  <p>Thank you for your time!</p>