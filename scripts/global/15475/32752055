<p>My question pertains to the code below:</p>  <pre><code>import multiprocessing import math import time   def do_work():     for i in range(1,10,1):       math.cos(i)   workers = [ multiprocessing.Process(target=do_work) for i in xrange(20) ]  for t in workers:     t.daemon = True     t.start()  time.sleep(100) # put here to simply indicate main is busy doing something  for t in workers:     print t.name + " joining"     t.join() </code></pre>  <p>As you can see my parent process is sleeping for a long time before joining on child processes. And my child processes run real quick.</p>  <p><strong>Question is:</strong></p>  <p>Is it ok for main process to wait for a long time before joining on child processes as in the example above? Is there a danger that the child process will become Zombie by the time main process gets around to joining it ? Is there a problem with this code ? Is this bad code in some way ? How can I improve it ?</p>  <p><strong>My attempt:</strong></p>  <p>I tried to study the behavior. It seemed ok to me. But I guess once I did see a child process turn into a zombie, atleast <code>ps</code> output showed that.</p>