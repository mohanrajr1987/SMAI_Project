<p>This is a somewhat general question without a specific code example. I'm trying to parallelize calls of a method from a 3rd party library. Using multiprocessing.Pool would be exactly what I want, but it fails because the method isn't pickle-able. Using something like twisted would be way overkill.</p>  <p>The individual calls are independent and the program can block waiting for the calls as a whole to finish. I do need to pass a few parameters in to the parallelized calls, which can be done with a list of dicts. So I need to achieve the equivalent of</p>  <pre><code>p = multiprocessing.Pool(count) p.map(my_wrapper_around_some_3rd_party_method, my_list_of_dicts) </code></pre>  <p>when the 3rd party method isn't pickle-able.</p>  <p>Is there an obvious python idiom or pattern I should be looking at?</p>