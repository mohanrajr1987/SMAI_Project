<p>I'm thinking of creating a gem that can return the type of terminal we're currently running, be it <code>Ubuntu</code>'s <code>gnome terminal</code> or <code>Window</code>'s <code>Command Processor</code>. Let's call this gem "Identifier" in this question.</p>  <p>I want to be able to do this.</p>  <p>In <code>Window</code>'s <code>Command Procesor</code>:</p>  <pre><code>&gt; irb require 'identifier' Identifier.identify #=&gt; 'Command Processor' </code></pre>  <p>In <code>Ubuntu</code>'s <code>Gnome Terminal</code>:</p>  <pre><code>$ irb require 'identifier' Identifier.identify #=&gt; 'Gnome Terminal' </code></pre>  <p>Firstly, I would love to know if you have a clever way of finding out this information. Remember, it has to work in:</p>  <ul> <li>Windows 2000 or later</li> <li>Linux 2.6+</li> <li>FreeBSD</li> <li>Solaris 8+</li> <li>HP-UX 10+</li> <li>OS X 10.4+</li> <li>AIX 5.3+</li> </ul>  <p>The way I'm thinking of doing it is pretty simple. First, I determine the os with this snippet of pure ruby: <code>RbConfig::CONFIG['host_os']</code> Then, I utilize the <a href="https://github.com/djberg96/sys-proctable" rel="nofollow">sys-proctable gem</a> to get an array of all running processes. I then simply check if this array of processes contains a terminal program that is available for the detected OS. This won't be clever, I'll simply need to hardcode every available terminal for Windows, Linux, FreeBSD, Solaris, HP-UX, OS X, AIX, but still doable. It's a finite list. And if someone's terminal cannot be defined, it doesn't matter. It'll raise an error clearly explaining the problem and a link to the gem's github project directory where they can add their terminal name its process name to the project. Anyway, my idea looks something like this (pseudo code):</p>  <pre><code>proc_table = Sys::ProcTable.ps case RbConfig::CONFIG['host_os'] when "i686-linux"     utilized = proc_table &amp; ['terminator','tilda','guake','gnome-terminal','Yakuake','ROXTerm'] when "x64-mingw32"     utilized = proc_table &amp; ['windows-command-host'] when "some-other-madness" ... end </code></pre>  <p>Now, this should actually work for most cases, but there is one edge case that is bugging me! <strong>What if they have two terminal programs running at the same time? What if gnome-terminal and ROXTerm, for example, are both installed and running?</strong></p>  <p>Our <code>utilized</code> variable would look like this: <code>['gnome-terminal','ROXTerm']</code>. <em>How do we pick which one?</em> Here's the question...do you have an ingenious way we can somehow manipulate the process in a certain way to identify which process is the terminal that's currently running the script? Or something? If this question gets nothing I'll just tell the user to simply quit the terminal they're not using, but I'd love this to be able to work automatically and I feel it's so possible. The script has been executed from Terminal A, Terminal A and Terminal B are both running...so choose Terminal A! Doesn't seem crazy.</p>  <p>Any ideas? Remember, we are identifying the OS so OS specific hacks are acceptable.</p>  <p><a href="http://stackoverflow.com/questions/32811782/identify-what-terminal-a-ruby-script-is-running-in">Related</a></p>