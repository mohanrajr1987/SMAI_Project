<p><br> I created a custom widget for TextView. The created custom component works fine when declared through xml. But when I try to add it to layout dynamically through code , it does not fill the available width. <br> Can any one help me how  to make it occupy full width.</p>  <p>My xml layout is as below : <br></p>  <pre><code>&lt;ScrollView xmlns:android="http://schemas.android.com/apk/res/android"     xmlns:tools="http://schemas.android.com/tools"     android:layout_width="match_parent"     android:layout_height="match_parent" &gt; &lt;LinearLayout   android:orientation="vertical"  android:layout_width="match_parent"  android:layout_height="wrap_content"  android:id="@+id/llayout"  &gt; </code></pre>  <p>In Activity file , I try to add a custom widget to linear layout as below : <br></p>  <pre><code>String yourText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. " +                     "Ut volutpat interdum interdum. Nulla laoreet lacus diam, vitae " +                     "sodales sapien commodo faucibus. Vestibulum et feugiat enim. Donec " +                     "semper mi et euismod tempor. Sed sodales eleifend mi id varius. Nam " +                     "et ornare enim, sit amet gravida sapien. Quisque gravida et enim vel " +                     "volutpat. Vivamus egestas ut felis a blandit. Vivamus fringilla " +                     "dignissim mollis. Maecenas imperdiet interdum hendrerit. Aliquam" +                     " dictum hendrerit ultrices. Ut vitae vestibulum dolor. Donec auctor ante" +                     " eget libero molestie porta. Nam tempor fringilla ultricies. Nam sem " +                     "lectus, feugiat eget ullamcorper vitae, ornare et sem. Fusce dapibus ipsum" +                     " sed laoreet suscipit. ";          LinearLayout llayout = (LinearLayout)findViewById(R.id.llayout);          ExpandableTextView expandableTextView = new ExpandableTextView(getApplicationContext());          LayoutParams lpView = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);          expandableTextView.setLayoutParams(lpView);          expandableTextView.setTextColor(Color.MAGENTA);          expandableTextView.setTextSize(25);          expandableTextView.setText(yourText);          llayout.addView(expandableTextView); </code></pre>  <h1>ExpandableTextView</h1>  <pre><code>/**  *   */ package com.andr.expandabletextviewwidget;    import com.andr.kamal56.R;  import android.content.Context; import android.content.res.TypedArray; import android.text.SpannableStringBuilder; import android.util.AttributeSet; import android.view.View; import android.widget.TextView;        public class ExpandableTextView extends TextView{      private static final int DEFAULT_TRIM_LENGTH = 200;     private static final String ELLIPSIS = ".....";      private CharSequence originalText;     private CharSequence trimmedText;     private BufferType bufferType;     private boolean trim = true;     private int trimLength;      public ExpandableTextView(Context context) {         super(context);         // TODO Auto-generated constructor stub     }       public ExpandableTextView(Context context, AttributeSet attrs) {         super(context, attrs);         TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.ExpandableTextView);         this.trimLength = typedArray.getInt(R.styleable.ExpandableTextView_trimLength, DEFAULT_TRIM_LENGTH);         typedArray.recycle();          setOnClickListener(new OnClickListener() {              @Override             public void onClick(View v) {                 trim = !trim;                 setText();                 requestFocusFromTouch();                             }         });     }       private void setText() {             super.setText(getDisplayableText(), bufferType);         }      private CharSequence getDisplayableText() {         return trim ? trimmedText : originalText;     }      @Override     public void setText(CharSequence text, BufferType type) {         originalText = text;         trimmedText = getTrimmedText(text);         bufferType = type;         setText();      }         private CharSequence getTrimmedText(CharSequence text) {             if (originalText != null &amp;&amp; originalText.length() &gt; trimLength) {                 return new SpannableStringBuilder(originalText, 0, trimLength + 1).append(ELLIPSIS);             } else {                 return originalText;             }         }        public CharSequence getOriginalText() {             return originalText;         }          public void setTrimLength(int trimLength) {             this.trimLength = trimLength;             trimmedText = getTrimmedText(originalText);             setText();         }          public int getTrimLength() {             return trimLength;         } } </code></pre>