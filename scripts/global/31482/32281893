<p>I create android app widget that make hot spot wifi. if you click on the image, the app make hot spot and if you click again, the hot spot closing.</p>  <p>but if you close the hot spot from device setting, the widget is on although the hot spot are close.</p>  <p>this is my code:</p>  <pre><code>package com.appweb;  import java.util.Random;  import android.app.PendingIntent; import android.appwidget.AppWidgetManager; import android.appwidget.AppWidgetProvider; import android.content.ComponentName; import android.content.Context; import android.content.Intent; import android.content.SharedPreferences; import android.content.SharedPreferences.Editor; import android.util.Log; import android.widget.RemoteViews; import android.widget.Toast;  public class wifiWidget extends AppWidgetProvider {      private static final String SYNC_CLICKED    = "ham";      int count = 0;       @Override     public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {         final int N = appWidgetIds.length;          SharedPreferences pref = context.getSharedPreferences("wifipref", 2);          Editor editor = pref.edit();       //  Toast.makeText(context, "doing on update", Toast.LENGTH_SHORT).show();          for (int i=0; i&lt;N; i++) {              int appWidgetId = appWidgetIds[i];              Intent intent = new Intent(context, MainActivity.class);             intent.setAction("ham");             PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, intent, 0);              RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.wifi_widget);             if(!NetworkUtil.isHotspotOn(context))             {                 editor.putBoolean("wifiniv", true).commit();                 views.setTextViewText(R.id.textView1, "On");                 views.setImageViewResource(R.id.imageButton1, R.drawable.wifion);             }             else             {                 editor.putBoolean("wifiniv", false).commit();                  views.setTextViewText(R.id.textView1, "Off");                 views.setImageViewResource(R.id.imageButton1, R.drawable.ic_launcher);             }                         views.setOnClickPendingIntent(R.id.imageButton1, getPendingSelfIntent(context,                     "ham"));              appWidgetManager.updateAppWidget(appWidgetId, views);          }      }      @Override     public void onReceive(Context context, Intent intent) {         // TODO Auto-generated method stub         RemoteViews remoteViews;         ComponentName watchWidget;          SharedPreferences pref = context.getSharedPreferences("wifipref", 2);          Editor editor = pref.edit();         remoteViews = new RemoteViews(context.getPackageName(), R.layout.wifi_widget);         watchWidget = new ComponentName(context, wifiWidget.class);         super.onReceive(context, intent);         try {             remoteViews.setTextViewText(R.id.textView1, "Wait..");         }         catch (Exception e)         {             Toast.makeText(context, "e: "+e, Toast.LENGTH_SHORT).show();         }         if (SYNC_CLICKED.equals(intent.getAction())) {             try {                  boolean bay = pref.getBoolean("wifiniv", false);                 if(!NetworkUtil.isHotspotOn(context))                 {                     MainActivity.turnOnOffHotspot(context, true);                     editor.putBoolean("wifiniv", true).commit();                     remoteViews.setTextViewText(R.id.textView1, "On");                     remoteViews.setImageViewResource(R.id.imageButton1, R.drawable.wifion);                 }                 else                 {                     editor.putBoolean("wifiniv", false).commit();                     MainActivity.turnOnOffHotspot(context, false);                     remoteViews.setTextViewText(R.id.textView1, "Off");                     remoteViews.setImageViewResource(R.id.imageButton1, R.drawable.ic_launcher);                 }                 /* if(bay)                 {                     MainActivity.turnOnOffHotspot(context, false);                     editor.putBoolean("wifiniv", false).commit();                     bay = pref.getBoolean("wifiniv", false);                     remoteViews.setTextViewText(R.id.textView1, "Off");                     remoteViews.setImageViewResource(R.id.imageButton1, R.drawable.ic_launcher);                 }                 else if(!bay)                 {                     MainActivity.turnOnOffHotspot(context, true);                     editor.putBoolean("wifiniv", true).commit();                     bay = pref.getBoolean("wifiniv", true);                     remoteViews.setTextViewText(R.id.textView1, "On");                     remoteViews.setImageViewResource(R.id.imageButton1, R.drawable.wifion);                 } */              }             catch(Exception e)             {                 Toast.makeText(context, "e1: "+e, Toast.LENGTH_SHORT).show();                 Log.i("niv", "e1: "+ e);             }              AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);              appWidgetManager.updateAppWidget(watchWidget, remoteViews);          }     }      protected PendingIntent getPendingSelfIntent(Context context, String action) {         Intent intent = new Intent(context, getClass());         intent.setAction(action);         return PendingIntent.getBroadcast(context, 0, intent, 0);     }   } </code></pre>  <p>NetworkUtility</p>  <pre><code>package com.appweb;  import java.io.BufferedReader; import java.io.FileReader; import java.io.IOException; import java.net.Inet4Address; import java.net.InetAddress; import java.net.NetworkInterface; import java.net.SocketException; import java.util.ArrayList; import java.util.Enumeration; import java.util.List;  import android.bluetooth.BluetoothAdapter; import android.content.Context; import android.net.ConnectivityManager; import android.net.NetworkInfo; import android.net.wifi.WifiManager; import android.util.Log;  /**  *   * To use this Util you need following permissions&lt;BR/&gt;  * &lt;BR/&gt;  * &lt;BR/&gt;  * &lt;b&gt; android.permission.INTERNET&lt;BR/&gt;  * android.permission.ACCESS_NETWORK_STATE&lt;BR/&gt;  * android.permission.ACCESS_WIFI_STATE&lt;BR/&gt;  * android.permission.CHANGE_WIFI_STATE&lt;BR/&gt;  * android.permission.BLUETOOTH&lt;BR/&gt;  * android.permission.BLUETOOTH_ADMIN&lt;BR/&gt;  * &lt;/b&gt;  *   * This Utility contains important network related methods. It is helpful to  * turn on wifi, hotspot etc.  *   *   *   */ public class NetworkUtil {      /**      * Check... Is phone connected to internet      *       * @param context      * @return      */     public static boolean isConnectedToNetwork(Context context) {         boolean isConnected = false;         ConnectivityManager connectivityManager = (ConnectivityManager) context                 .getSystemService(Context.CONNECTIVITY_SERVICE);          NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();         if (networkInfo != null) {             isConnected = networkInfo.isConnected();         }          return isConnected;     }      /**      * Is internet connected using Wifi      *       * @param context      * @return      */     public static boolean isNetworkConnectedThroughWifi(Context context) {         boolean isConnected = false;         ConnectivityManager connectivityManager = (ConnectivityManager) context                 .getSystemService(Context.CONNECTIVITY_SERVICE);          NetworkInfo networkInfo = connectivityManager                 .getNetworkInfo(ConnectivityManager.TYPE_WIFI);         if (networkInfo != null) {             isConnected = networkInfo.isConnected();         }          return isConnected;     }      /**      * Is internet connected using Bluetooth      *       * @param context      * @return      */     public static boolean isNetworkConnectedThroughBluetooth(Context context) {         boolean isConnected = false;         ConnectivityManager connectivityManager = (ConnectivityManager) context                 .getSystemService(Context.CONNECTIVITY_SERVICE);          NetworkInfo networkInfo = connectivityManager                 .getNetworkInfo(ConnectivityManager.TYPE_BLUETOOTH);         if (networkInfo != null) {             isConnected = networkInfo.isConnected();         }          return isConnected;     }      /**      * This method will return list of devices that connected with your phone      * using Hotspot      *       * @return      * @throws IOException      */     public static List&lt;NetworkDevice&gt; getDevicesConnectedToHotspot()             throws IOException {         List&lt;NetworkDevice&gt; devices = new ArrayList&lt;NetworkDevice&gt;();         BufferedReader bufferedReader;          bufferedReader = new BufferedReader(new FileReader("/proc/net/arp"));         String line = null;         while ((line = bufferedReader.readLine()) != null) {             String[] splitted = line.split(" +");             if (splitted != null) {                  String mac = splitted[3];                 Log.i("NetworkUtil", "Mac : Outside If " + mac);                 if (mac.matches("..:..:..:..:..:..")) {                      NetworkDevice device = new NetworkDevice();                     device.setIpAddress(splitted[0]);                     device.setMacAddress(mac);                     int count = 0;                     for (String data : splitted) {                         Log.i("NetworkUtil", "Data (" + (count++) + "):" + data);                     }                     devices.add(device);                  }              }         }         return devices;     }      /**      * Turn On or Off wifi      *       * @param context      * @param isTurnToOn      */     public static void turnOnOffWifi(Context context, boolean isTurnToOn) {         WifiManager wifiManager = (WifiManager) context                 .getSystemService(Context.WIFI_SERVICE);          if (isTurnToOn &amp;&amp; isHotspotSupported() &amp;&amp; isHotspotOn(context)) {             turnOnOffHotspot(context, false);         }          wifiManager.setWifiEnabled(isTurnToOn);     }      /**      * is wifi is on.      *       * @param context      * @return true for on otherwise false      */     public static boolean isWifiOn(Context context) {         WifiManager wifiManager = (WifiManager) context                 .getSystemService(Context.WIFI_SERVICE);         return wifiManager.isWifiEnabled();     }      /**      * Turn on or off Hotspot.      *       * @param context      * @param isTurnToOn      */     public static void turnOnOffHotspot(Context context, boolean isTurnToOn) {         WifiManager wifiManager = (WifiManager) context                 .getSystemService(Context.WIFI_SERVICE);         WifiApControl apControl = WifiApControl.getApControl(wifiManager);         if (apControl != null) {              if (isWifiOn(context) &amp;&amp; isTurnToOn) {                 turnOnOffWifi(context, false);             }              apControl.setWifiApEnabled(apControl.getWifiApConfiguration(),                     isTurnToOn);         }     }      /**      * check.. is hotspot on ?      *       * @param context      * @return      */     public static boolean isHotspotOn(Context context) {         boolean isOn = false;          WifiManager wifiManager = (WifiManager) context                 .getSystemService(Context.WIFI_SERVICE);         WifiApControl apControl = WifiApControl.getApControl(wifiManager);         if (apControl != null) {             isOn = apControl.isWifiApEnabled();         }         return isOn;     }      /**      * Is device has support of Hotspot.      *       * @return      */     public static boolean isHotspotSupported() {         return WifiApControl.isApSupported();     }      /**      * This method will return Inet 4 address base on enable (Wifi or Hotspot)      * connection.      *       * @return      * @throws SocketException      */     public static List&lt;String&gt; getInet4NetworkAddress() throws SocketException {          List&lt;String&gt; ipAddressList = new ArrayList&lt;String&gt;();          for (Enumeration en = NetworkInterface.getNetworkInterfaces(); en                 .hasMoreElements();) {             NetworkInterface intf = (NetworkInterface) en.nextElement();             for (Enumeration enumIpAddr = intf.getInetAddresses(); enumIpAddr                     .hasMoreElements();) {                 InetAddress inetAddress = (InetAddress) enumIpAddr                         .nextElement();                 if (!inetAddress.isLoopbackAddress()                         &amp;&amp; inetAddress instanceof Inet4Address) {                     ipAddressList.add(inetAddress.getHostAddress().toString());                 }             }         }         return ipAddressList;     }      public static boolean isBluetoothOn() {         BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();         return adapter.isEnabled();     }      public static boolean isBluetoothSupported() {         BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();         if (adapter == null) {             return false;         }         return true;     }      public static void turnOnOffBluetooth(boolean isTurnToOn) {         BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();         if (isTurnToOn) {             adapter.enable();         } else {             adapter.disable();         }     }  } </code></pre>