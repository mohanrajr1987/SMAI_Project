<p>I have the following XSD structure:</p>  <pre><code>&lt;xs:schema xmlns:ns="http://abc/"&gt;   ...   &lt;xs:element name="abc"&gt;     &lt;xs:complexType&gt;       &lt;xs:sequence&gt;         &lt;xs:element ref="map"/&gt;       &lt;/xs:sequence&gt;     &lt;/xs:complexType&gt;   &lt;/xs:element&gt;   ...   &lt;xs:element name="map"&gt;     &lt;xs:complexType&gt;       &lt;xs:sequence&gt;         &lt;xs:element name="entry" type="ns:MapEntryType" minOccurs="0" maxOccurs="unbounded"/&gt;       &lt;/xs:sequence&gt;     &lt;/xs:complexType&gt;     &lt;xs:unique name="entry"&gt;       &lt;xs:selector xpath="entry"/&gt;       &lt;xs:field xpath="key"/&gt;     &lt;/xs:unique&gt;   &lt;/xs:element&gt;   &lt;xs:complexType name="MapEntryType"&gt;     &lt;xs:sequence&gt;       &lt;xs:element name="key" type="xs:string"/&gt;       &lt;xs:element name="value" type="xs:anyType"/&gt;     &lt;/xs:sequence&gt;   &lt;/xs:complexType&gt; &lt;/xs:schema&gt; </code></pre>  <p>This is doing its job.</p>  <p>The <code>map</code> element now has to be called something different based on whichever is the wrapper, so the name is sometimes <code>map</code>, sometimes <code>properties</code>, sometimes <code>options</code>, etc.</p>  <p>Therefore I want to genericize the <code>map</code> element.</p>  <p>I tried doing the following:</p>  <ul> <li>Making <code>map</code> a <code>xs:complexType</code> and changing <code>ref</code> to <code>type</code>.  <ul> <li>This resulted in <code>xs:unique</code> not being accepted and failed</li> </ul></li> <li>Making <code>map</code> a <code>xs:complexType</code>, changing <code>ref</code> to <code>type</code> and moving the <code>xs:unique</code> constraint to the element definitions.  <ul> <li>This worked but resulted in the XSD having a lot of <code>xs:unique</code> present in the document.</li> </ul></li> </ul>  <p>Isn't there a way to simply tell that I want a specific structure and it containing unique elements without having to repeat the unique constraint everywhere?</p>