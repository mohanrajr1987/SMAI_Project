<p>I have an XML schema that defines a simple type based on xs:token, with a maximum length restriction.</p>  <p>When I validate an XML document against this schema, the validation correctly applies normalization to the content. Specifically contiguous whitespace characters are replaced by a single space. E.g. "A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B" is normalized to "A B" <em>before</em> the maximum length restriction is checked.</p>  <p>However, when I deserialize the XML document into types generated by xsd.exe, the normalization is not applied. This can result in strings which are longer than the schema allows.</p>  <p>For reference, I'm using C# and .NET 4.5.2.</p>  <p>Here's a minimal example to demonstrate the issue.</p>  <p>Example XML schema:</p>  <pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;xs:schema targetNamespace="http://tempuri.org/XMLSchema.xsd"     elementFormDefault="qualified"     xmlns="http://tempuri.org/XMLSchema.xsd"     xmlns:mstns="http://tempuri.org/XMLSchema.xsd"     xmlns:xs="http://www.w3.org/2001/XMLSchema" &gt;   &lt;xs:element name="testElement" type="testType"/&gt;    &lt;xs:complexType name="testType"&gt;     &lt;xs:sequence&gt;       &lt;xs:element name="name" type="shortToken"/&gt;     &lt;/xs:sequence&gt;   &lt;/xs:complexType&gt;    &lt;xs:simpleType name="shortToken"&gt;     &lt;xs:restriction base="xs:token"&gt;       &lt;xs:maxLength value="5"/&gt;     &lt;/xs:restriction&gt;   &lt;/xs:simpleType&gt; &lt;/xs:schema&gt; </code></pre>  <p>The type generated by giving the schema to xsd.exe:</p>  <pre><code>[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.18020")] [System.SerializableAttribute()] [System.Diagnostics.DebuggerStepThroughAttribute()] [System.ComponentModel.DesignerCategoryAttribute("code")] [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/XMLSchema.xsd")] [System.Xml.Serialization.XmlRootAttribute("testElement", Namespace="http://tempuri.org/XMLSchema.xsd", IsNullable=false)] public partial class testType {      private string nameField;      /// &lt;remarks/&gt;     [System.Xml.Serialization.XmlElementAttribute(DataType="token")]     public string name {         get {             return this.nameField;         }         set {             this.nameField = value;         }     } } </code></pre>  <p>A valid XML document according to this schema:</p>  <pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;testElement xmlns="http://tempuri.org/XMLSchema.xsd"&gt;   &lt;name&gt;A                 B&lt;/name&gt; &lt;/testElement&gt; </code></pre>  <p>If I validate the document, the value of the name element is correctly normalized and I get no errors.</p>  <p>However, if I use the following code to deserialize the XML document, the value of name is not normalized.</p>  <pre><code>XmlSerializer xmlSerialiser = new XmlSerializer(typeof(testType)); testType result = (testType)xmlSerialiser.Deserialize(xmlReader); </code></pre>  <p>It would seem like the responsibility for normalizing the value lies with the XmlReader, for which it would need to be aware of the schema. I have tried using XmlReaderSettings as follows, but without success.</p>  <pre><code>XmlReaderSettings settings = new XmlReaderSettings(); settings.ValidationType = ValidationType.Schema; settings.Schemas.Add(xmlSchema); </code></pre>  <p>Please could someone provide me with an example of how to setup the XmlReader or the XmlSerializer such that the resulting value of the "name" property would be "A B" rather than "A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B".</p>  <p>Thanks!</p>