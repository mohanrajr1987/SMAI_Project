<p>I have a <code>TreeView</code> that looks like this:</p>  <pre><code>&lt;TreeView Grid.Row="1" x:Name="InspectionResultsTreeView"           ItemsSource="{Binding Source={StaticResource InspectionTypeGroupViewSource}, Path=Groups}"           ItemTemplate="{StaticResource InspectionTypeGroupsTemplate}"&gt; &lt;/TreeView&gt; </code></pre>  <p>The <code>ItemsSource</code> is a keyed resource that goes by the name of <code>InspectionTypeGroupViewSource</code>:</p>  <pre><code>&lt;CollectionViewSource x:Key="InspectionTypeGroupViewSource" Source="{Binding Results}"&gt;     &lt;CollectionViewSource.GroupDescriptions&gt;         &lt;PropertyGroupDescription PropertyName="Inspection.InspectionType" /&gt;         &lt;PropertyGroupDescription PropertyName="Inspection" /&gt;     &lt;/CollectionViewSource.GroupDescriptions&gt; &lt;/CollectionViewSource&gt; </code></pre>  <p>The role of this little thing is to take the ViewModel's <code>Results</code> property:</p>  <pre><code>private ObservableCollection&lt;ICodeInspectionResult&gt; _results;  public ObservableCollection&lt;ICodeInspectionResult&gt; Results {     get { return _results; }      set { _results = value; OnPropertyChanged(); } } </code></pre>  <p>...and group it on two levels - first by <code>InspectionType</code>, then by <code>Inspection</code> - the result is a 3-level hierarchy with inspection types, inspections, and then individual inspection results. At this point a screenshot might help visualizing I guess:</p>  <p><a href="http://i.stack.imgur.com/sOH0H.png" rel="nofollow"><img src="http://i.stack.imgur.com/sOH0H.png" alt="Rubberduck 2.0 Code Inspections toolwindow"></a></p>  <p>So, the <code>ItemTemplate</code> of the <code>InspectionResultsTreeView</code> is another keyed resource, by the name of <code>InspectionTypeGroupsTemplate</code> - that's the <strong>bold</strong> "inspection type" items:</p>  <pre><code>&lt;HierarchicalDataTemplate x:Key="InspectionTypeGroupsTemplate"                              DataType="{x:Type CollectionViewGroup}"                             ItemsSource="{Binding Items}"                             ItemTemplate="{StaticResource InspectionGroupsTemplate}"&gt;      &lt;StackPanel Orientation="Horizontal"&gt;         &lt;TextBlock VerticalAlignment="Center"                     Text="{Binding Name}"                    FontWeight="Bold"                    TextWrapping="NoWrap"/&gt;         &lt;TextBlock Margin="4,0,4,0"                     VerticalAlignment="Center"                     Text="{Binding ItemCount, StringFormat=({0})}"                     TextWrapping="NoWrap"/&gt;     &lt;/StackPanel&gt; &lt;/HierarchicalDataTemplate&gt; </code></pre>  <p>And the <code>ItemTemplate</code> of that template is an <code>InspectionGroupsTemplate</code> - that's the individual inspections, with the "severity" icons:</p>  <pre><code>&lt;HierarchicalDataTemplate x:Key="InspectionGroupsTemplate"                           DataType="{x:Type CollectionViewGroup}"                           ItemsSource="{Binding Items}"                           ItemTemplate="{StaticResource InspectionResultTemplate}"&gt;      &lt;StackPanel Orientation="Horizontal"&gt;         &lt;Image Style="{StaticResource IconStyle}"                 Source="{Binding Name, Converter={StaticResource InspectionIconConverter}}"                VerticalAlignment="Center" /&gt;         &lt;TextBlock Margin="4"                     VerticalAlignment="Center"                     Text="{Binding Name, Converter={StaticResource InspectionDescriptionConverter}}"                    TextWrapping="NoWrap"/&gt;         &lt;TextBlock Margin="0,4,0,4"                     VerticalAlignment="Center"                     Text="{Binding ItemCount, StringFormat=({0})}"                     TextWrapping="NoWrap"/&gt;     &lt;/StackPanel&gt; &lt;/HierarchicalDataTemplate&gt; </code></pre>  <p>Lastly, the <code>ItemTemplate</code> of this grouping is an <code>InspectionResultTemplate</code>, which is for each individual inspection result:</p>  <pre><code>&lt;DataTemplate x:Key="InspectionResultTemplate"                DataType="{x:Type inspections:ICodeInspectionResult}"&gt;     &lt;StackPanel Orientation="Horizontal"&gt;         &lt;TextBlock VerticalAlignment="Center"                     Margin="4"                    Text="{Binding Name}"                     TextWrapping="NoWrap"/&gt;     &lt;/StackPanel&gt; &lt;/DataTemplate&gt; </code></pre>  <hr>  <p>The <code>ICodeInspectionResult</code> interface has a <code>string Name</code> property that I'm using here; this <code>Name</code> is different from the <code>Name</code> that's used in the grouping levels, where it's an <code>object CollectionViewGroup.Name</code> - the underlying type of that <code>Name</code> is that of the grouping, so level 1 is an <code>InspectionType</code>, and level 2 is an <code>Inspection</code>.</p>  <p>The problem is that I'm using more converters than I believe I'd need to, to convert this <code>object Name</code> and access the members I need to access and display... but then, I need to display the number of items in each grouping so the <code>DataType</code> ought to be a <code>CollectionViewGroup</code>... right?</p>  <p>How can I do this without resorting to a converter for everything that needs to be displayed? How is this <em>supposed</em> to be done? Every <code>TreeView</code> / <code>CollectionViewGroup</code> tutorial I could find was a trivial implementation.</p>