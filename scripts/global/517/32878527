<p>I'm newbie on java fx. And I'm making an application with treeview and treeview has made by nested set model. So each treeitem has to have left, right data.(I made a treeitem like Treeitem>. Object has data(id, label name, left, right, etc) and String is label name to be shown at treeview.)</p>  <p>The problem is that whole treeitems have to be updated when I add a new treeitem(or delete treeitem). I already implemented whole data(the other treeitem's) to be updated on DB, but treeview still has data isn't updated.</p>  <p>I looked for the way to refresh treeview, but I just found user shouldn't use updateitem forcefully.</p>  <p>Is there any way or method to refresh whole treeview?</p>  <p>FYI. code below</p>  <pre><code>Pair&lt;LabelTreeItem,String&gt; f = new Pair&lt;&gt;(new LabelTreeItem(1, "Root", 0, 0, "",0), "Root");      try {         f = new Pair&lt;&gt;(service.getRoot(), "Root");     } catch (SQLException e) {         System.out.println("Can't find Root Node");         e.printStackTrace();     }      TreeItem&lt;Pair&lt;LabelTreeItem,String&gt;&gt; root = createNode(f);     root.setExpanded(true);     treeView.setRoot(root);     treeView.setEditable(true);       treeView.setCellFactory(new Callback&lt;TreeView&lt;Pair&lt;LabelTreeItem,String&gt;&gt;,TreeCell&lt;Pair&lt;LabelTreeItem,String&gt;&gt;&gt;(){         @Override         public TreeCell&lt;Pair&lt;LabelTreeItem,String&gt;&gt; call(TreeView&lt;Pair&lt;LabelTreeItem,String&gt;&gt; p) {                           return new TextFieldTreeCellImpl();                      }     }); </code></pre>  <p>.....................................</p>  <pre><code>private TreeItem&lt;Pair&lt;LabelTreeItem,String&gt;&gt; createNode(final Pair&lt;LabelTreeItem,String&gt; f) {     return new TreeItem&lt;Pair&lt;LabelTreeItem,String&gt;&gt;(f) {         private boolean isLeaf;         private boolean isFirstTimeChildren = true;         private boolean isFirstTimeLeaf = true;          @Override public ObservableList&lt;TreeItem&lt;Pair&lt;LabelTreeItem,String&gt;&gt;&gt; getChildren() {             if (isFirstTimeChildren) {                 isFirstTimeChildren = false;                 super.getChildren().setAll(buildChildren(this));             }             return super.getChildren();         }          @Override public boolean isLeaf() {             if (isFirstTimeLeaf) {                 isFirstTimeLeaf = false;                 Pair&lt;LabelTreeItem,String&gt; f = getValue();                  int nodeLeft = f.getKey().getLeft();                 int nodeRight = f.getKey().getRight();                  if(nodeRight-nodeLeft == 1) {                     isLeaf = true;                     System.out.println("this is leaf");                 }             }              return isLeaf;         }          private ObservableList&lt;TreeItem&lt;Pair&lt;LabelTreeItem,String&gt;&gt;&gt; buildChildren(TreeItem&lt;Pair&lt;LabelTreeItem,String&gt;&gt; TreeItem) {             Pair&lt;LabelTreeItem,String&gt; f = TreeItem.getValue();             System.out.println("ID: "+f.getKey().getId());               int nodeLeft = f.getKey().getLeft();             int nodeRight = f.getKey().getRight();              try {                  if (f != null &amp;&amp; nodeRight-nodeLeft != 1) {                     ArrayList&lt;LabelTreeItem&gt; item = new ArrayList&lt;&gt;();                     item = service.getChildren(f.getKey().getLeft(), f.getKey().getRight(), f.getKey().getDepth());                     ArrayList&lt;Pair&lt;LabelTreeItem,String&gt;&gt; itemList = new ArrayList&lt;&gt;();                     for(int i=0; i&lt;item.size(); i++) {                         System.out.println("test : " + item.get(i).getLabel());                          Pair&lt;LabelTreeItem,String&gt; pair = createPair(item.get(i), item.get(i).getLabel());                         itemList.add(pair);                     }                      if(itemList.size() != 0) {                         ObservableList&lt;TreeItem&lt;Pair&lt;LabelTreeItem,String&gt;&gt;&gt; children = FXCollections.observableArrayList();                          for (Pair&lt;LabelTreeItem,String&gt; childNode : itemList) {                             children.add(createNode(childNode));                         }                          return children;                     }                 }             } catch (SQLException e) {                 // TODO Auto-generated catch block                 e.printStackTrace();             }             return FXCollections.emptyObservableList();         }     }; }  private Pair&lt;LabelTreeItem, String&gt; createPair(LabelTreeItem item, String name) {     return new Pair&lt;&gt;(item, name); } </code></pre>  <p>LabelTreeItem.java</p>  <pre><code>public class LabelTreeItem { private int id; private String label; private int left; private int right; private String comment; private int depth;  public LabelTreeItem(int id, String label, int left, int right, String comment, int depth) {     this.id = id;     this.label = label;     this.left = left;     this.right = right;     this.comment = comment;     this.depth = depth; }  public int getId() {     return id; }  public void setId(int id) {     this.id = id; }  public String getLabel() {     return label; }  public void setLabel(String label) {     this.label = label; }  public int getLeft() {     return left; }  public void setLeft(int left) {     this.left = left; }  public int getRight() {     return right; }  public void setRight(int right) {     this.right = right; }  public String getComment() {     return comment; }  public void setComment(String comment) {     this.comment = comment; }  public int getDepth() {     return depth; }  public void setDepth(int depth) {     this.depth = depth; } } </code></pre>  <p>TextFieldTreeCellImpl.java</p>  <pre><code>public TextFieldTreeCellImpl() {     service = SqliteService.getInstance();     MenuItem addLabel = new MenuItem("Label add");     addMenu.getItems().add(addLabel);     addLabel.setOnAction(new EventHandler&lt;ActionEvent&gt;() {         @Override         public void handle(ActionEvent event) {             getTreeItem().setExpanded(true);              LabelTreeItem newItem = null;             try {                 id = getTreeItem().getValue().getKey().getId();                 label = getTreeItem().getValue().getKey().getLabel();                 depth = getTreeItem().getValue().getKey().getDepth()+1;                 left = getTreeItem().getValue().getKey().getLeft();                 right = getTreeItem().getValue().getKey().getRight();                  newItem = service.getData("New Label", id,depth);                 TreeItem&lt;Pair&lt;LabelTreeItem,String&gt;&gt; newLabel = new TreeItem(createPair(newItem, newItem.getLabel()));                 getTreeItem().getChildren().add(newLabel);             } catch (SQLException e) {                 e.printStackTrace();             }         }     });      MenuItem editLabel = new MenuItem("Label modify");     addMenu.getItems().add(editLabel);     editLabel.setOnAction(new EventHandler&lt;ActionEvent&gt;() {         @Override         public void handle(ActionEvent event) {             startEdit();         }     });      MenuItem removeLabel = new MenuItem("Label delete");     addMenu.getItems().add(removeLabel);     removeLabel.setOnAction(new EventHandler&lt;ActionEvent&gt;() {         @Override         public void handle(ActionEvent event) {             try {                 left = getTreeItem().getValue().getKey().getLeft();                 right = getTreeItem().getValue().getKey().getRight();                 service.deleteData(left, right, (right-left)+1);             } catch (SQLException e) {                 e.printStackTrace();             }             getTreeItem().getParent().getChildren().remove(getTreeItem());              System.out.println("Remove");         }     }); }  @Override  protected void updateItem(final Pair&lt;LabelTreeItem, String&gt; pair, boolean empty) {     super.updateItem(pair, empty);      if (!empty &amp;&amp; pair != null) {         if (isEditing()) {             if (textField != null) {                 textField.setText(getString());             }             setText(null);             setGraphic(textField);         } else {              setText(pair.getKey().getLabel());             setGraphic(getTreeItem().getGraphic());             setContextMenu(addMenu);         }     } else {         setText(null);         setGraphic(null);     }      setOnMouseExited(new EventHandler&lt;MouseEvent&gt;() {          @Override         public void handle(MouseEvent event) {             if(pair !=null){                 Tooltip tTip = new Tooltip(pair.getKey().getLabel());                 tTip.uninstall(getTreeView(), tTip);             }         }     });      setOnMouseEntered(new EventHandler&lt;MouseEvent&gt;() {          @Override         public void handle(MouseEvent event) {             if(pair !=null){                 Tooltip tTip = new Tooltip();                 tTip.setText(pair.getKey().getLabel()                         +"\nComment : "+pair.getKey().getComment()                         +"\nLeft : "+pair.getKey().getLeft()                         +"\nRight : "+pair.getKey().getRight());                 tTip.setFont(new Font("Arial", 16));                 tTip.setStyle("-fx-background-color: grey;");                 tTip.centerOnScreen();                 tTip.install(getTreeView(), tTip);              }         }     }); } </code></pre>  <p>DB Table </p>  <pre><code>id|label|left|right|comment|depth </code></pre>