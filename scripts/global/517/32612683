<p>I Have this Model :  <br/>1) Team : </p>  <pre><code>public class Team {  private String nom ; private Employee leader ; private List&lt;Employee&gt; members = new ArrayList&lt;Employee&gt;();  private List&lt;Person&gt; persons = new ArrayList&lt;Person&gt;();     public Team() { }  public Team(String nom, Employee leader, List&lt;Employee&gt; members, List&lt;Person&gt; persons) {     this.nom = nom;     this.leader = leader;     this.members = members;     this.persons = persons; }  public Team(String nom) {     this.nom = nom; }  public Employee addEmployee (Employee employee) {     members.add(employee);     return employee; }  public Person addPerson (Person person) {     persons.add(person);     return person; } public List&lt;Person&gt; getPersons() {     return persons; }  public void setPersons(List&lt;Person&gt; persons) {     this.persons = persons; }  public String getNom() {     return nom; }  public void setNom(String nom) {     this.nom = nom; }  public Employee getLeader() {     return leader; }  public void setLeader(Employee leader) {     this.leader = leader; }  public List&lt;Employee&gt; getMembers() {     return members; }  public void setMembers(List&lt;Employee&gt; members) {     this.members = members; }  @Override public String toString() {     return "Team{" +             "nom='" + nom + '\'' +             ", leader=" + leader +             ", members=" + members +             '}'; }  public Team(int i){     this.setNom("team"+i);     this.setLeader(new Employee("MoMo" + i, "dd" + i));     this.addEmployee(new Employee("mehdi" + i, "dd" + i));     this.addEmployee(new Employee("albert" + i+1,"dd"+ i));     this.addEmployee(new Employee("lolo" + i+2,"dd"+ i));      this.addPerson(new Person("Person" + i));     this.addPerson(new Person("Person" + i+1 ));     this.addPerson(new Person("Person" + i+2 )); } </code></pre>  <p>2)</p>  <pre><code>public class Employee {     private String cin;     private String nom;     private String prenom; </code></pre>  <p>3)</p>  <pre><code>public class Person {      private String address;     private String name;      public Person(){     }      public Person(String name) {         this.name = name;     }      public Person(String name, String address) {         this.name = name;         this.address = address;     }      public String getAddress() {         return address;     }      public String getName() {         return name;     } } </code></pre>  <p>I want to build a GWT TreeViewModel like the following :</p>  <p>Team => (i want to have my list of persons and my list of employees mixed)   </p>  <p>Here is my TreeViewModel </p>  <pre><code>public class EmployeeTreeModel implements TreeViewModel {      private final List&lt;Team&gt; teamList;      private final SingleSelectionModel&lt;Employee&gt; selectionModel         = new SingleSelectionModel&lt;Employee&gt;();      public EmployeeTreeModel() {         teamList =  new ArrayList&lt;Team&gt;();         {             for (int i = 0; i &lt; 5 ; i++) {                 teamList.add(new Team(i) );             }         }     }      @Override     public &lt;T&gt; NodeInfo&lt;?&gt; getNodeInfo(T value) {         if (value == null) {             ListDataProvider&lt;Team&gt; dataProvider                 = new ListDataProvider&lt;Team&gt;(teamList);              Cell&lt;Team&gt; cell = new AbstractCell&lt;Team&gt;() {                 @Override                 public void render(Context context, Team value, SafeHtmlBuilder sb) {                     if (value != null) {                         sb.appendHtmlConstant("    ");                         sb.appendEscaped(value.getNom());                     }                 }             };             return new DefaultNodeInfo&lt;Team&gt;(dataProvider, cell);         }         else if (value instanceof Team) {             ListDataProvider&lt;Employee&gt; dataProvider                     = new ListDataProvider&lt;Employee&gt;(                     ((Team) value).getMembers());              Cell&lt;Employee&gt; cell =                     new AbstractCell&lt;Employee&gt;() {                         @Override                         public void render(Context context, Employee employee, SafeHtmlBuilder sb) {                             if (employee != null) {                                 sb.appendHtmlConstant("    ");                                 sb.appendEscaped(employee.getNom());                             }                         }                     };             return new DefaultNodeInfo&lt;Employee&gt;(dataProvider, cell,selectionModel, null);         }         return null;     }      @Override     public boolean isLeaf(Object o) {         if (o instanceof Employee) {             return true;         }else if(o instanceof Person){             return true;         }         else return false;     }  } </code></pre>  <p>in my actual code I can't mix Employees data and Person's Data because two different objects </p>  <p>Any way to do that ?  A listDataProvider who brings two Objects maybe ?</p>