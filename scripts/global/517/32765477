<p>I've been trying to make a Win32 form with a TreeView element. I'm new to the Win32 API, so I've been working through the example on MSDN to get it going:</p>  <p><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/bb773409.aspx" rel="nofollow">Using Tree-View Controls</a></p>  <p>I've got the code built and compiled and it runs without errors, but the TreeView element comes up blank/empty. There are no icons and no item text. I can click and expand it, and the TreeView's dotted lines come up, but there's no obvious data in it.</p>  <p>Here's the code:</p>  <pre><code>#include &lt;windows.h&gt; #include &lt;stdio.h&gt; #include &lt;commctrl.h&gt; #include &lt;string&gt;  using namespace std;  const char *clsName = "WinAPI";     // Class Name const char *title = "Rss1";             // Window Title  bool running = true;    // Global loop variable  HWND hWnd = NULL;       // Handle to the window  typedef struct{     TCHAR itemName [25];     int itemLevel; }itemStruct;  itemStruct itemArray[5];  int treeIcon;  BOOL InitTreeViewImage(HWND hWnd, HINSTANCE hInstance){     HBITMAP hbmp;     HIMAGELIST hImgList;      if((hImgList = ImageList_Create(10, 10, FALSE, 1, 0)) == NULL) return false;      hbmp = LoadBitmap(hInstance, MAKEINTRESOURCE('treeicon.bmp'));     treeIcon = ImageList_Add(hImgList, hbmp, NULL);     //DeleteObject(hbmp); }  HTREEITEM AddItemToTree(HWND hwndTV, LPTSTR lpszItem, int nLevel){     TVITEM tvi;     TVINSERTSTRUCT tvins;     static HTREEITEM hPrev  = (HTREEITEM)TVI_FIRST;     static HTREEITEM hPrevRootItem = NULL;     static HTREEITEM hPrevLev2Item = NULL;     HTREEITEM hti;      tvi.mask = TVIF_TEXT | TVIF_IMAGE | TVIF_SELECTEDIMAGE | TVIF_PARAM;      //set item text     tvi.pszText = lpszItem;     tvi.cchTextMax = sizeof(tvi.pszText)/sizeof(tvi.pszText[0]);      // set item image     tvi.iImage = treeIcon;     tvi.iSelectedImage = treeIcon;      // save heading level     tvi.lParam = (LPARAM)nLevel;     tvins.item  = tvi;     tvins.hInsertAfter = hPrev;      // set parent item based based on level     if(nLevel == 1) tvins.hParent = TVI_ROOT;     else if (nLevel == 2) tvins.hParent = hPrevRootItem;     else tvins.hParent = hPrevLev2Item;      // add item to treeview control     hPrev = (HTREEITEM)SendMessage(hwndTV, TVM_INSERTITEM, 0, (LPARAM)(LPTVINSERTSTRUCT)&amp;tvins);      if(hPrev == NULL) return NULL;      // save handle to item     if(nLevel ==1) hPrevRootItem = hPrev;     else if(nLevel == 2) hPrevLev2Item = hPrev;      // SKIPPED give parent closed folder icon      return hPrev; }  BOOL InitTreeViewItems(HWND hwndTV){     HTREEITEM hti;     for(int i=0;i&lt;(sizeof(itemArray)/sizeof(*itemArray));i++){         hti = AddItemToTree(hwndTV, itemArray[i].itemName, itemArray[i].itemLevel);         if(hti == NULL) return false;     }     return true; }  // Create TreeView element HWND createTreeView(HWND hWndParent, HINSTANCE hInstance){     RECT rcClient;  // dimensions of client area     HWND hwndTV;    // handle to tree control      InitCommonControls();   //Load common control dll      // get dimensions of parent window     GetClientRect(hWndParent, &amp;rcClient);     // define and create the treeview     hwndTV = CreateWindowEx(0,             WC_TREEVIEW,             TEXT("TreeView"),             WS_VISIBLE | WS_CHILD | WS_BORDER | TVS_HASLINES,             0,             0,             rcClient.right,             rcClient.bottom,             hWndParent,             NULL,             NULL,             NULL);     if(!InitTreeViewImage(hWndParent, hInstance)){         DestroyWindow(hwndTV);         MessageBox(NULL, "Error adding Treeview icons", "Eror", MB_OK);         return FALSE;     }      if(!InitTreeViewItems(hwndTV)){         DestroyWindow(hwndTV);         MessageBox(NULL, "Error creating TreeView", "Eror", MB_OK);         return FALSE;     }      return hwndTV; }  // Windows callback function, handles window close event LRESULT WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam){     switch(uMsg){     case WM_CLOSE:         DestroyWindow(hWnd);         return 0;     case WM_DESTROY:         PostQuitMessage(0);         running = false;         return 0;     default:         return DefWindowProc(hWnd,uMsg,wParam,lParam);      } }  int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow){     //MessageBox(NULL, "Hello!", "Hello", MB_OK);      WNDCLASSEX WndEx;     MSG msg;      WndEx.cbSize = sizeof(WNDCLASSEX);     WndEx.style = CS_HREDRAW|CS_VREDRAW|CS_OWNDC;     WndEx.lpfnWndProc = (WNDPROC)WndProc;     WndEx.cbClsExtra = 0;     WndEx.cbWndExtra = 0;     WndEx.hIcon = LoadIcon(NULL, IDI_APPLICATION);     WndEx.hCursor = LoadCursor(NULL, IDC_ARROW);     WndEx.hbrBackground = NULL;     WndEx.lpszMenuName = NULL;     WndEx.lpszClassName = clsName;     WndEx.hInstance = hInstance;     WndEx.hIconSm = LoadIcon(NULL, IDI_APPLICATION);      /* Register the window's class */     if(!RegisterClassEx(&amp;WndEx)){         MessageBox(NULL, "Failed to register class!", "ERROR", MB_OK | MB_ICONERROR);         return 0;     }      // Create the window     if(!(hWnd = CreateWindowEx(WS_EX_APPWINDOW | WS_EX_WINDOWEDGE, clsName, title, WS_OVERLAPPEDWINDOW | WS_CLIPSIBLINGS | WS_CLIPCHILDREN, CW_USEDEFAULT, CW_USEDEFAULT, 460, 340, NULL, NULL, hInstance, NULL))){         MessageBox(NULL, "Failed to create window!", "ERROR", MB_OK | MB_ICONERROR);         return 0;     }      ShowWindow(hWnd, SW_SHOW); // window inits hidden, show it      itemArray[0].itemName[6] = 'Title';     itemArray[0].itemLevel = 1;     itemArray[1].itemName[25] = 'Item 1';     itemArray[1].itemLevel = 2;     itemArray[2].itemName[25] = 'Item 2';     itemArray[2].itemLevel = 2;     itemArray[3].itemName[25] = 'Item 3';     itemArray[3].itemLevel = 2;     itemArray[4].itemName[25] = 'Item 4';     itemArray[4].itemLevel = 2;      createTreeView(hWnd, hInstance);      // Beginning of main loop     while(running){         // check message queue         if(PeekMessage(&amp;msg, NULL, 0, 0, PM_REMOVE)){             TranslateMessage(&amp;msg);             DispatchMessage(&amp;msg);         }     }     return msg.wParam; } </code></pre>  <p>Please help! I'm using Eclipse 4.5.0 with MinGW/GCC.</p>