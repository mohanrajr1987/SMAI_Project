<p>This is the xaml of my FTPTab usercontrol:</p>  <pre><code>&lt;UserControl x:Class="MyFTP.Views.FTPTab"          xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"          xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"          xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"           xmlns:d="http://schemas.microsoft.com/expression/blend/2008"                        xmlns:MyFTPClasses="clr-namespace:MyFTP.Classes"             xmlns:local="clr-namespace:MyFTP.ViewModels"           mc:Ignorable="d"           d:DesignHeight="300" d:DesignWidth="300"&gt; &lt;Grid VerticalAlignment="Stretch" Height="600" HorizontalAlignment="Stretch"&gt;     &lt;TreeView  ItemsSource="{Binding FolderItems}" VerticalAlignment="Stretch" Height="600" HorizontalAlignment="Stretch" Background="Aqua"&gt;         &lt;TreeView.Resources &gt;             &lt;HierarchicalDataTemplate DataType="{x:Type MyFTPClasses:TFolderItem}" ItemsSource="{Binding Children}"&gt;                 &lt;TextBlock Text="{Binding FtpPath}"/&gt;             &lt;/HierarchicalDataTemplate&gt;             &lt;!--&lt;DataTemplate DataType="{x:Type IO: }"&gt;                 &lt;TextBlock Text="{Binding Name}" /&gt;             &lt;/DataTemplate&gt;--&gt;         &lt;/TreeView.Resources&gt;     &lt;/TreeView&gt; &lt;/Grid&gt; </code></pre>  <p></p>  <p>This is the custom type fed to ItemsSource property of the HierarchicalDataTemplate:</p>  <pre><code>public class TFolderItem {     /*public FolderItem(RemoteDirectoryInfo rdi, WinSCP.Session winscpSession)     {         RDI = rdi;         this.WinSCPSession = winscpSession;     }*/      public TFolderItem()     {      }      public TFolderItem(string path, WinSCP.Session winscpSession)     {                     this.FtpPath = path;         this.WinSCPSession = winscpSession;     }      private WinSCP.Session winscpSession;      public RemoteDirectoryInfo RDI { get; set; }      public string FtpPath { get; set; }      public WinSCP.Session WinSCPSession     {         get { return this.winscpSession; }         set { this.winscpSession = value; }     }      public IList Children     {         get         {             RDI = winscpSession.ListDirectory(FtpPath);             var children = new CompositeCollection();              var subDirItems = new List&lt;TFolderItem&gt;();             var subDirFiles = new List&lt;RemoteFileInfo&gt;();              foreach (RemoteFileInfo rfi in RDI.Files)             {                 if (rfi.Name == ".." || rfi.Name == ".")                     continue;                  Debug.WriteLine(FtpPath);                  if (rfi.IsDirectory)                 {                     subDirItems.Add(new TFolderItem(this.FtpPath + rfi.Name + "/", this.WinSCPSession));                 }                 /*else                 {                     subDirFiles.Add(rfi);                 }*/             }              children.Add(new CollectionContainer             {                 Collection = subDirItems             });             children.Add(new CollectionContainer             {                 Collection = subDirFiles             });              return children;         }     } } </code></pre>  <p>This is the ViewModel of the FTPTab view:</p>  <pre><code>public class FTPTabViewModel : BindableBase {     public FTPTabViewModel(string host, WinSCP.Session winscpSession)     {         this.Host = host;         this.Session = winscpSession;          this.FolderItems = new ObservableCollection&lt;TFolderItem&gt; {             new TFolderItem("/home/korakinf/", Session)         };           //this.FolderItems.Add();         Debug.WriteLine(this.FolderItems[0].Children.Count);     }      private WinSCP.Session session;     private ObservableCollection&lt;TFolderItem&gt; folderItems;     private string host;      public string Host     {         get { return this.host; }         set { SetProperty(ref this.host , value); }     }      public WinSCP.Session Session     {         get { return session; }         set { SetProperty(ref this.session , value); }     }      public ObservableCollection&lt;TFolderItem&gt; FolderItems     {         get { return folderItems; }         set { SetProperty(ref this.folderItems , value); }     } } </code></pre>  <p>The problem is every time I expand the TreeView's FTP folder it seems to list its Children IList collection (as it should), but also seems to load(not list) all of the Children's children (subdirectory's subdirectories). I can't seem to debug why that is happening, and my guess is there is some kind of a preloader on TreeView/HDT that populates the ItemsSource ahead of time. Is that true or am I missing something here?</p>