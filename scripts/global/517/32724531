<p>I have to show files and directories from a ftp server in my listview and treeview. Up to now, I can see the directories in the treeview, but what I still need is to list the files and the directories in a listview. I think you know what I mean. </p>  <p>This is the code for the treeview</p>  <pre><code>   public void PopulateFTPtreeView(TreeView ftpTV)     {         var root = "ftp://10.0.0.100////";          ftpTV.Nodes.Clear();         ftpTV.Nodes.Add(CreateDirectoryNode(root, "FTP-Server"));     }      private TreeNode CreateDirectoryNode(string path, string name)     {         var directoryNode = new TreeNode(name);         var directoryListing = GetDirectoryListing(path);          var directories = directoryListing.Where(d =&gt; d.IsDirectory);         var files = directoryListing.Where(d =&gt; !d.IsDirectory);          foreach (var dir in directories)         {             directoryNode.Nodes.Add(CreateDirectoryNode(dir.FullPath, dir.Name));         }         foreach (var file in files)         {             directoryNode.Nodes.Add(new TreeNode(file.Name));         }         return directoryNode;     }      public IEnumerable&lt;TreeviewClass&gt; GetDirectoryListing(string rootUri)     {         var CurrentRemoteDirectory = rootUri;         var result = new StringBuilder();         var request = GetWebRequest(WebRequestMethods.Ftp.ListDirectoryDetails, CurrentRemoteDirectory);         using (var response = request.GetResponse())         {             using (var reader = new StreamReader(response.GetResponseStream()))             {                 string line = reader.ReadLine();                 while (line != null)                 {                     result.Append(line);                     result.Append("\n");                     line = reader.ReadLine();                 }                 if (string.IsNullOrEmpty(result.ToString()))                 {                     return new List&lt;TreeviewClass&gt;();                 }                 result.Remove(result.ToString().LastIndexOf("\n"), 1);                 var results = result.ToString().Split('\n');                 string regex =                     @"^" +               //# Start of line                     @"(?&lt;dir&gt;[\-ld])" +          //# File size                               @"(?&lt;permission&gt;[\-rwx]{9})" +            //# Whitespace          \n                     @"\s+" +            //# Whitespace          \n                     @"(?&lt;filecode&gt;\d+)" +                     @"\s+" +            //# Whitespace          \n                     @"(?&lt;owner&gt;\w+)" +                     @"\s+" +            //# Whitespace          \n                     @"(?&lt;group&gt;\w+)" +                     @"\s+" +            //# Whitespace          \n                     @"(?&lt;size&gt;\d+)" +                     @"\s+" +            //# Whitespace          \n                     @"(?&lt;month&gt;\w{3})" +          //# Month (3 letters)   \n                     @"\s+" +            //# Whitespace          \n                     @"(?&lt;day&gt;\d{1,2})" +        //# Day (1 or 2 digits) \n                     @"\s+" +            //# Whitespace          \n                     @"(?&lt;timeyear&gt;[\d:]{4,5})" +     //# Time or year        \n                     @"\s+" +            //# Whitespace          \n                     @"(?&lt;filename&gt;(.*))" +            //# Filename            \n                     @"$";                //# End of line                  var myresult = new List&lt;TreeviewClass&gt;();                 foreach (var parsed in results)                 {                     var split = new Regex(regex)                         .Match(parsed);                     var dir = split.Groups["dir"].ToString();                     var permission = split.Groups["permission"].ToString();                     var filecode = split.Groups["filecode"].ToString();                     var owner = split.Groups["owner"].ToString();                     var group = split.Groups["group"].ToString();                     var filename = split.Groups["filename"].ToString();                     myresult.Add(new TreeviewClass()                     {                         Dir = dir,                         Filecode = filecode,                         Group = group,                         FullPath = CurrentRemoteDirectory + "/" + filename,                         Name = filename,                         Owner = owner,                         Permission = permission,                     });                 };                 return myresult;             }         }     }      private FtpWebRequest GetWebRequest(string method, string uri)     {         Uri serverUri = new Uri(uri);         if (serverUri.Scheme != Uri.UriSchemeFtp)         {             return null;         }         var reqFTP = (FtpWebRequest)FtpWebRequest.Create(serverUri);         reqFTP.Method = method;         reqFTP.UseBinary = true;         reqFTP.Credentials = new NetworkCredential("Mathias", "abc");         reqFTP.Proxy = null;         reqFTP.KeepAlive = false;         reqFTP.UsePassive = false;         return reqFTP;     } } </code></pre>