<p>I know that using global variable in functions is wrong, but I have a code that uses these variables and I have an issue that I can't find how to solve.</p>  <p>I have a module with the following code:</p>  <pre><code>messages = {}  def MessageReceived(message):     global messages      print messages     msgNumber = message[0]     if messages.has_key(msgNumber):         messageData = messages.pop(msgNumber)         ReleaseMessageNumber(msgNumber)         if messageData["callback"] is not None:             messageData["callback"](messageData["originalMessage"])  def SendMessage(message, callBack):     global messages      msgNumber = GetMessageNumber()      messageToSend = msgNumber + message + "\0"      messages[msgNumber] = { 'originalMessage' : message, 'time' : time.time(), 'callback' : callBack }     print messages     Send(messageToSend)      return True </code></pre>  <p>In general, the function "SendMessage" builds a message with a message number, sends the message an stores the message and a callback in a <strong>global</strong> dictionary.</p>  <p>The function "MessageReceived" gets the callback of the specific message from the global dictionary and calls it.</p>  <p>The problem is that it seems that 2 different dictionaries exists here.</p>  <p>When I send a message, I see that the dictionary grows (a new record is added to the dictionary every time I send a message), but the print at the "MessageReceived" function always shows an empty dictionary.</p>  <p>Can you help me with that? Where is the bug here?</p>  <p>Thanks!</p>