<p>Importing the same Python module from a different path appears to result in the creation of two different module references.</p>  <p>For example take the following three Python scripts. Script1 and Script2 are located in OuterPackage, TestWithGlobals is located in SubPackage.</p>  <pre><code>+ Root |_+ OuterPackage   | - Script1   | - Script2   |_+ SubPackage     | - TestWithGlobals </code></pre>  <p>Script1:</p>  <pre><code>from OuterPackage.SubPackage import TestWithGlobals import Script2 print TestWithGlobals.__name__  print TestWithGlobals.global_string Script2.MakeStringBall() print TestWithGlobals.global_string </code></pre>  <p>and Script2:</p>  <pre><code>from SubPackage import TestWithGlobals print TestWithGlobals.__name__  def MakeStringBall():     TestWithGlobals.global_string = "ball" </code></pre>  <p>and finally TestWithGlobals itself</p>  <pre><code>global_string = "test" </code></pre>  <p>Now, when Script1 is run the output is as follows:</p>  <pre><code>SubPackage.TestWithGlobals OuterPackage.SubPackage.TestWithGlobals test test </code></pre>  <p>Changing <code>from SubPackage</code> to <code>from OuterPackage.SubPackage</code> in Script2 will result in different output for Script1:</p>  <pre><code>OuterPackage.SubPackage.TestWithGlobals OuterPackage.SubPackage.TestWithGlobals test ball </code></pre>  <p>Root is appended to the pythonpath before running Script1.</p>  <p>Why is TestWithGlobals different between Script1 and Script2, while the same module is referenced? What is the reasoning behind this?</p>