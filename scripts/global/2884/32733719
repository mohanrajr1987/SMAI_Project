<p>I'm planning to write a business method for those non-container-managed clients such as JRX-RS resources.</p>  <pre class="lang-java prettyprint-override"><code>@Stateless public class PersistenceService {      public &lt;R&gt; R apply(final Function&lt;EntityManager, R&gt; function) {         return function.apply(entityManager);     }      @PersistenceContext     private transient EntityManager entityManager; } </code></pre>  <p>So that a JAX-RS root resource class uses it like this.</p>  <pre class="lang-java prettyprint-override"><code>@RequestScoped @Path("/entities") public class MyEntites {      @GET     @Path("/{id: \\d+}")     public Response read(final long id) {          return Response.ok(service.apply(m -&gt; {             m.find(MyEntity.class, id);         })).build();     }      @Inject     private transient PersistenceService service; } </code></pre>  <p>The problem is that how can I prevent clients invoking <code>close()</code> on specified entity manager?</p>  <pre class="lang-java prettyprint-override"><code>service.apply(m -&gt; {     m.close();     return null; }); </code></pre>