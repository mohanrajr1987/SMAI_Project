<p>I decided to use TomEE OpenEJB in my Junit test simply because IBM's EmbeddedEJBContainer is too limited. For example, it doesn't support MDB.</p>  <p>So, I added a number of dependencies into my Maven POM.xml and got all necessary OpenEJB jars into my test code. In the BeforeClass method I created the EmbeddedContainer: </p>  <pre><code>testEJBContainer = EJBContainer.createEJBContainer(); </code></pre>  <p>And this was successful. So, I thought the @EJB annotation for injection would also work. But it didn't. Then I went on to interrogate the JNDI contexts used by OpenEJB. I found my EJB reference was bounded in the following sub-contexts like: </p>  <p>"java:global/MyModule/MyEJB!com.company.dept.MyEJB"   and "java:global/MyModule/MyEJB"   </p>  <p>So, they were there. However, the @EJB annotation injection failed. So, I went on to search for tomcat annotation implementation for the EJB annotation method. I wasn't able to find that. </p>  <p>Wondering what may be wrong here. A few things I can think of:</p>  <ol> <li>The jar containing the @EJB annotation for OpenEJB is not called. That is, some other jar implementing javax.ejb.EJB intercepted tomcat's call.</li> <li>The subcontext name is wrong.</li> </ol>  <p>I wanted to bind the MyEJB reference myself to the JNDI context for the injection to work but not able to match up the actual sub-context name. Could you please point me to the right direction?</p>  <p>Sincerely,</p>  <p>Student_101</p>