<p>Say that we want a rest-based shopping cart completely realized with XHR calls on the client-browser side and as a rest service implemented with java-ee on the server side. We use JAAS for security.</p>  <p>Client will log in, do shopping, close browser, come back later to continue shopping with his state remembered without the need to do login again.</p>  <p><strong>How exactly is his state kept?</strong></p>  <p>Below is a nominal stateful bean for the cart, it must be injected in a REST resource that will be the interface between client and business logic:</p>  <pre><code>@Stateful public class ClientCart{      @Resource private SessionContext ctx;     private List&lt;String&gt; items; //contains a list of products      @PostConstruct     private void createCart(){         /*         init stuff like db connection...         get name of user with ctx.getCallerPrincipa()         check if user had items in cart in the db         if there were items, create a list: items = new LinkedList()&lt;&gt;;         else: populate items with whatever was in db         */     }      public List getItems(){ /* return the cart... */ }      public void addItem(String item){ /*do a items.add(item); */}      @PrePassivate     private void maintenanceOnSleep(){         /*         Called when the server decided to suspend this instance due to long time of inactivity - when user close browser, etc...         Does clean up tasks like closing a db connection         */     }      @PostActivate     private void maintenanceOnActivate(){         /*         Opposite of @PrePassivete - open the db connection...         */     }      @Remove     public void logout(){ /* nothing in here... */ }      @PreDestroy     public void cleanUP(){         /* called when error happens or logout() is explicitly called, will send purge instance vars like items to db and close connections.     }  } </code></pre>  <p>Now how do i make the rest resource? As rest is request scoped, i can't inject the stateful bean...</p>  <pre><code>@Path("/shop") public class ShoppingCart{      @GET     @Path("/login/{user}/{pass}     public void (@Context HttpServletRequest rq, @PathParam("user") String u, @PathParam("pass") String p {          /*         we do programmatic logins with rq.login(u, p); ... and then what happens? :)          */      }  } </code></pre>