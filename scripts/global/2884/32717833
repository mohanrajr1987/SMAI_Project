<p>I have written a stateless EJB as an interval timer class; code calls <code>start()</code> on it with parameters to start the timer, passing in start and interval parameters along with an action to be executed when the timer fires.</p>  <p>I have two places in my code where I want to use timers, a different timer in each case.  So I wrote </p>  <pre><code>@EJB  IntervalTimerEJBLocal timer1;  @EJB IntervalTimerEJBLocal timer2; </code></pre>  <p>But this gives me two references to the same timer.  I need it to be an EJB so that I can use the javax.ejb.Timer and related classes in it, so I can't just use the new operator and instantiate it myself.  Is there not a way to tell the system that I want a different instance in each variable here?</p>  <p>If it matters, the interface is declared</p>  <pre><code>@Local public Interface IntervalTimerEJBLocal </code></pre>  <p>and the class itself is declared as</p>  <pre><code>@Stateless public class IntervalTimerEJB implements IntervalTimerEJBLocal </code></pre>  <p>There are questions like this I've found, but they all seem to involve wanting to configure different parameters, or to use different beans based on parameters.  I just want two different instances of one bean, the call to the method that sets up the timers contains the configuration I need.</p>