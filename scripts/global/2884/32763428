<p>I have been reading lately about safe publication of Java objects (e.g. here: <a href="http://shipilev.net/blog/2014/safe-public-construction/" rel="nofollow">http://shipilev.net/blog/2014/safe-public-construction/</a>). </p>  <p>Until now I was trusting EJB container without questions when relying on container managed concurrency. </p>  <p>Now I'm wondering  1) how an EJB container can make sure that the EJB itself is published safely?  2) how an EJB container can make sure that objects created by its EJBs are published safely (e.g. EJB instance vars)? </p>  <p>E.g. stateless session bean can be accessed by different threads over time (I'm not necesseraly saying simultaneously), so unsafe publication is a potential issue. </p>  <p>For 1), I roughly see possibilities, e.g. by wrapping the EJB and using some volatile accesses to garantuee total order. </p>  <p>For 2), I don't see how EJB container can enforce it.  Maybe it is forbidden by the EJB 3.1 spec to keep instance variables in the EJB if it can be accessed by different threads?  Maybe the statement "don't worry about concurrency in container managed EJB" is not true, and I should use safe publication patterns (including volatile and/or final keywords) in the class definitions of the classes used in my EJB instance vars? </p>  <p>I'm surpirsed I missed this fundamental problemacy for that many years as a Java developer. </p>  <p>Regards,  Lars</p>