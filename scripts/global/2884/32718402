<p>We have a EAR containing some jars, an EJB module and a WAR module. We want to obtain a class with JNDI InitialContext.lookup from, and to the same EJB module.</p>  <p>In the jBoss console we can see the java:global with the application, the module and all the classes inside the module. If we do the lookup like that it works. There is also an applications section that includes our EAR with the module and all the classes inside.</p>  <p>Now that our EAR can have different executions, and therefore different binary names, we wanted to use java:app to skip the hardcoded AppName. To our surprise, even if the java:app exists in the jBoss console JNDI listing, it throws all the time a NameNotFoundException. We also tried with java:comp, java:module, java:app/env/... (even if they are not shown in the jBoss console) but nothing except the portable names work.</p>  <p>Does anyone know why this could be happening?</p>  <pre><code>private static final String MY_TIMER_SINGLETON = "java:global/myear-1.0.0-SNAPSHOT/mymoduleejb/MyTimerSingleton";  //private static final String MY_TIMER_SINGLETON = "java:app/mymoduleejb/MyTimerSingleton";  InitialContext ic = new InitialContext(); MyTimerSingleton t = (MyTimerSingleton) ic         .lookup(MY_TIMER_SINGLETON); </code></pre>  <p>JBoss console Profile->Container->Naming:</p>  <pre><code>java:jboss  -...  java:global  -myear-1.0.0-SNAPSHOT   -mymoduleejb    -MyTimerSingleton    -...  applications  -myear-1.0.0-SNAPSHOT   -java:app    -mymoduleear     -MyTimerSingleton     -... </code></pre>  <p>EDIT 1: Additional information.</p>  <p>jBoss is running using standalone-ha.xml configuration.</p>  <p>I am trying to get the Singleton through JDNI because @EJB does not work in org.jboss.msc.service.Service classes.</p>  <p>If I make MyTimerSingleton implement a @Remote or @Local interface, the JNDI of the JBoss console becomes empty.</p>  <p>In any case all the .../env/ of the JNDI list are empty</p>