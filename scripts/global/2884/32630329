<p>EDIT: I figured the first part of my question out myself - to avoid closing my question and opening a new one for the second part, i recycle this question and provide the link for accessing remote EJB ont he same applicationserver: <a href="https://github.com/PiotrNowicki/ear-intercommunication/blob/master/ear-intercommunication.client/ear-intercommunication.client.ejb/src/main/java/com/piotrnowicki/ejbintercommunication/client/Client.java" rel="nofollow">github example, thanks to PiotrNowicki</a></p>  <p>I have a War and a ear. The Ear contains a @Stateful EJB, using a PersistenceContext.EXTENDED for some databaseoperations. This Context is extended for access to Lazy-fetched lists in Entities outside the Persistence-bean.</p>  <p>The WAR has a JAX-RS REST-Interface, implemented using @Stateless Sessionbeans, which also do simple operations on other datasources. they do not require an extended context, so they use regular CMT.</p>  <p>the Beans in the WAR however need to call the EAR'S EJBs.</p>  <p>If I just Merge the Projects into one EAR and inject the beans via @EJB, the CMT cannot interact with the Extended Persistence-Context. This is expected, see JPA spec 7.6.3. (@Stateless beans attach a regular PersistenceContext to the transaction, which an extended context does not accept)</p>  <p>So I split the two Services and now need a Service-Interface for interaction.</p>  <p>My Question is:</p>  <p>1) Would remote EJB-calls SOLVE the Transaction-Problem, or would the JBOSS behave like the Bean was Local and try to add the Extended persistencecontext to the local transaction - resulting in the same problem?</p>  <p>Thanks</p>  <p>Billdoor</p>