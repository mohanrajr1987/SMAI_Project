<p>In my understanding, here's how MRI 1.9 GIL works:</p>  <ol> <li>Interpreter spawns a new thread by calling the corresponding underlying C function and ask to acquire the "GIL".</li> <li>If "GIL" is free, we are happy. If not, the new thread will wait and invoke another separate timer thread to set up "timeslice"</li> <li>When current executing thread hit some boundaries such as return or checking backward branches, interpreter checks the timer to decide if context switch should happen.</li> </ol>  <p>However, as pointed by this <a href="http://www.jstorimer.com/blogs/workingwithcode/8100871-nobody-understands-the-gil-part-2-implementation" rel="nofollow">article</a>, we can only guarantee atomicity for pure C implementing. That being said, if some parts of our thread contains ruby code, we are still in danger of race condition.</p>  <p>My question is if a thread needs to acquire GIL before executing, why only C implementation methods guarantee atomicity?</p>  <p>Thank you in advance!</p>