<p>Here's my (rather lengthy) function:</p>  <pre><code>def go(self, target, outfile, infile, stderr=sys.stderr, timeout=None):              self.pre_proc_started()                                                         try:                                                                                infile_fileno = infile.fileno()                                             except AttributeError:                                                              infile_fileno = None                                                        p_stdin = infile if infile_fileno is not None else subprocess.PIPE               if timeout is not None:                                                             p = [None]                                                                      def kill_process(p):                                                                if p[0]:                                                                            p[0].kill()                                                                 else:                                                                               print("WTH")                                                            timer = threading.Timer(timeout, lambda: kill_process(p))                       timer.start()                                                                p[0] = subprocess.Popen(target, stdin=p_stdin, stderr=stderr,                                           env={'__AFL_SHM_ID': str(self.shm_id)})                 try:                                                                                if p_stdin == subprocess.PIPE:                                                      p[0].stdin.write(infile.read())                                                 p[0].stdin.close()                                                      except IOError:  # brobably broken pipe                                             raise                                                                       p[0].wait()                                                                     if timeout is not None:                                                             timer.cancel()                                                              self.post_proc_started()                                                         trace_bytes_addr = shmat(self.shm_id, 0, 0)                                     if trace_bytes_addr == 2**64 - 1:                                                   raise RuntimeError("shmat() failed (%s)" % os.strerror(errno()))            trace_bytes = ctypes.string_at(ctypes.c_void_p(trace_bytes_addr),                                              MAP_SIZE)                                        return trace_bytes                          </code></pre>  <p>Why I find it hard to believe, if I run it enough times, <code>p[0]</code> is <code>None</code> and I get <code>WTH</code> to be printed out. Why is that?</p>