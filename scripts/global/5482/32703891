<pre><code>#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #define _XOPEN_SOURCE 600 #include &lt;ucontext.h&gt;  /* Tests creation.    Should print "Hello World!" */  typedef struct thread_t{   ucontext_t thread_context; }thread_t;  void *thr1(void *in) {   printf("Hello World!\n");   fflush(stdout);   return NULL; }  void *thr2(void *in) {   printf("goodbye World!\n");   fflush(stdout);   return NULL; }  int main() {   thread_t t1;   thread_t t2;    thread_create( &amp;t1, thr1, NULL);   // if you comment out the following line, the program will run like a charm.    thread_create( &amp;t2, thr2, NULL);   setcontext(&amp;t1.thread_context);    return EXIT_SUCCESS; }  void thread_routine(void *(*start_routine)(void *), void *arg) {   start_routine(arg);   printf("gtthread routine finished\n"); }  int thread_create(thread_t *thread,         void *(*start_routine)(void *),         void *arg){   if (getcontext(&amp;(thread-&gt;thread_context)) == -1)   {     perror("getcontext");   }    thread-&gt;thread_context.uc_stack.ss_sp = (char*) malloc(SIGSTKSZ);   thread-&gt;thread_context.uc_stack.ss_size = SIGSTKSZ;   thread-&gt;thread_context.uc_link = NULL;    makecontext(&amp;(thread-&gt;thread_context), thread_routine, 2, (void *)start_routine, arg); } </code></pre>  <p>I run my code in OS X 10.10 with gcc. I am trying to implement a usercontext library.</p>  <p>If I comment out <code>thread_create( &amp;t2, thr2, NULL);</code>, the code will produce desired effect. I have no idea why a line related to <code>t2</code> will lead to segmentation fault of <code>t1</code>.</p>  <h1>Author's Notes</h1>  <p>I happily work on implementing a usercontext library after switching to Ubuntu. Everything works fine. No segmentation fault anymore. And as expected, it crashes on OS X 10.10. </p>  <p>My guess would be that since makecontext(), swapcontext(), and etc. is deprecated on OS X since 10.6 as warned by compiler, I shouldn't expect that it will work. </p>