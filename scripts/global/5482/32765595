<p>I have the following codes..</p>  <p><strong>server.c</strong></p>  <pre><code>#include &lt;stdio.h&gt; #include "./../linux.h" #include "./tcp.h" #include &lt;pthread.h&gt;  static int clients = 0; static int* memptr = NULL;  void serve(void*);  int* push(int* memptr, int nsfd) {   clients++;   if (clients == 1)      memptr = (int*)malloc(sizeof(int) * clients);   else      memptr = (int*)realloc(memptr, sizeof(int) * clients);   memptr[clients - 1] = nsfd;  return memptr;  }     int main(int argc, char** argv) {     pthread_t thread[2];     int threadCount = 0;     if (argc != 3){      printf("\nUsage: ./server port_number maximum_clients\n");      return 1;    }    static struct sockaddr_in sock, sock_client;    int len, new_sock_fd;    int sock_fd = socket(PF_INET, SOCK_STREAM, 0);    if (sock_fd == -1){      perror("socket");      exit(1);    }   sock.sin_family = PF_INET;   sock.sin_port = htons(atoi(argv[1]));   sock.sin_addr.s_addr  = inet_addr("0.0.0.0");   len = sizeof(sock);   if ( bind(sock_fd, (struct sockaddr *)&amp;sock, len) == -1){     perror("bind");     exit(1);   }   if ( listen(sock_fd, atoi(argv[2])) == -1){     perror("listen");     exit(1);   }    while(1) {      new_sock_fd = accept(sock_fd, (struct sockaddr *)&amp;sock_client, (socklen_t *)&amp;len);      memptr = push(memptr, new_sock_fd);       if (new_sock_fd == -1){        perror("accept");        exit(1);      }    pthread_create(&amp;(thread[threadCount]), NULL, (void*)&amp;serve, (void *)&amp;new_sock_fd);   pthread_join(thread[threadCount++], NULL);   printf("threadCount  = %d\n", threadCount);       sleep(1);    } return 0;  }     void serve(void* fd){    int* new_sock_fd = (int*)fd;    Packet packet;    while(1){       bzero(&amp;packet, sizeof(packet));       read(*new_sock_fd , &amp;packet, sizeof(packet));       printf("%d\n", *new_sock_fd);       //printf("recipientId = %d\n", packet.recipientId);       // printf("message = %s\n", packet.data);       write(memptr[packet.recipientId - 1], packet.data, 1024);      }     pthread_exit(0);     } </code></pre>  <p>and the <strong>tcp.h</strong> looks like</p>  <pre><code>       #ifndef __TCP_H__        #     define __TCP_H__         typedef struct {              int recipientId;    // this is the reciever ID             char data[1024];           // this is the main data part             }Packet;          #endif /* __TCP_H__ */ </code></pre>  <p>and each <strong>client.h</strong> looks like this</p>  <pre><code> #include &lt;stdio.h&gt;  #include "./../linux.h"  #include "./tcp.h"  #include &lt;pthread.h&gt;   void print(void);  void scan(void);  int sock_fd;  int main(int argc, char** argv) {  if (argc != 3){      printf("\nUsage: ./client port_number server_ip\n");      return 1;   }  static struct sockaddr_in sock;  int len;  pthread_t thread1, thread2;  sock_fd = socket(PF_INET, SOCK_STREAM, 0);  if (sock_fd == -1){    perror("socket");    exit(1);  }  sock.sin_family = PF_INET;  sock.sin_port = htons(atoi(argv[1]));  sock.sin_addr.s_addr  = inet_addr(argv[2]);  len = sizeof(sock);  if ( connect(sock_fd, (struct sockaddr *)&amp;sock , len) == -1 ){    perror("connect");    exit(1);  }   pthread_create(&amp;thread1, NULL, (void*)&amp;print, NULL);  pthread_create(&amp;thread2, NULL, (void*)&amp;scan, NULL);   pthread_join(thread1, NULL);  pthread_join(thread2, NULL);    return 0; }   void print(){    char messege[1024];    while(1){    if (read(sock_fd, messege, 1024) == -1){      perror("read");      return;    }    printf("messege = %s\n", messege);   }  pthread_exit(0);  }    void scan(void){     Packet packet;     while(1){       printf("Enter the reciver ID: ");       scanf("%d", &amp;packet.recipientId);       printf("Enter the data: ");       scanf("%s", packet.data);       if ( write(sock_fd, &amp;packet, sizeof(packet)) == -1) {         perror("read");         return;       }    }    pthread_exit(0);   } </code></pre>  <p>Now the problems are </p>  <ol> <li><p>when I am running the server &amp; the in 2 terminals, 2 clients after each client is accepted <code>threadCount</code> should be printed at the server end but it is not printing. It means the execution stops/skips after the first <code>pthread_join</code> but <strong>WHY</strong> ??</p></li> <li><p>After connecting two threads, when I sent the data from 1st client to the 1st client itself, it works but not from the 1st client to the 2nd client..rather it is sending to the server terminal window. <strong>WHY ??</strong></p></li> <li><p>When sent from the second client nothing works ( sending itself or client 1)..<strong>WHY??</strong></p></li> </ol>  <p>Please help..And thanks for patiently reading all the codes above.</p>