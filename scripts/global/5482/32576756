<p>I'm testing based on linux 2.6.21 and pThread library.  I tried several cases in order to find out workaround how to avoid main process termination. But, I didn't find out it.  Please, tell me why exiting of thread function causes main process to be terminated? Here is test code below, </p>  <pre><code>    #include &lt;stdio.h&gt;     #include &lt;stdlib.h&gt;     #include &lt;string.h&gt;     #include &lt;unistd.h&gt;     #include &lt;signal.h&gt;     #include &lt;sys/time.h&gt;     #include &lt;sys/msg.h&gt;     #include &lt;sys/types.h&gt;     #include &lt;sys/ioctl.h&gt;     #include &lt;sys/signal.h&gt;     #include &lt;linux/input.h&gt;     #include &lt;fcntl.h&gt;     #include &lt;errno.h&gt;     #include &lt;dlfcn.h&gt;     #include &lt;time.h&gt;     #include &lt;pthread.h&gt;      int handle = 0;     int main_loop = 0;      void *testThread(void *pParm)     {       int i;       for (i=0; i &lt; 5 ; i++){         printf("====testThread loop %d\n", i);         sleep(1);       }        if (main_loop == 1){       exit(0);       }       else if (main_loop == 2)       {         sleep(10);         exit(0);       }       else if (main_loop == 3)       {         pthread_exit(NULL);       }       else if (main_loop == 4)       {         sleep(10);         pthread_exit(NULL);       }     }      int main(int argc, char *argv[])     {       pthread_t pTestThread;        int i, ret;        if (argc == 2){           main_loop = atoi(argv[1]);       }       if (argc == 3){           main_loop = atoi(argv[1]);           handle = atoi(argv[2]);       }        ret = pthread_create(&amp;pTestThread, NULL, (void *)testThread, NULL);       if (0 == ret){         if (handle == 0)           pthread_detach(pTestThread);         printf("====Thread creation okay!\n");       }else{         printf("====Thread creation error!\n");         return 0;       }        if (handle == 1)       {         printf("====pthread_join waiting\n");         pthread_join(pTestThread, (void **)&amp;ret);         printf("====pthread_join ret %d\n", ret);       }        for (i=0; i &lt; 20; i++)       {         printf("====Main loop %d\n", i);         sleep(1);       }        printf("====Main Exit\n");       return 0;     } </code></pre>  <p>In this code, I have never seen the log of "====Main Exit" with a various combinations (argument 2nd and 3rd). </p>