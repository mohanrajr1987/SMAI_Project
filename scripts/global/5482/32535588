<p>I am trying to learn programming with pthreads and here is a problem that I am trying to solve. I have an array with lets say 10 inputs, and I have 3 threads, I want each thread to read one item from the array, until the array gets exhausted.</p>  <pre><code>int arr[10] = { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }; </code></pre>  <p>I would like the 3 threads to work as follows:</p>  <pre><code> T1  T2  T3  T1  T2  10  11  12  13  14 </code></pre>  <p>What I have tried is, I have taken 3 sempahores, one for each thread and initialized the first one with 1 and the other with 0, as soon as we create the threads all the threads will try to get their semaphores, the two threads that have sem value initialized to 0 will have to wait, the one with value 1 will get to do the work. Once the first one is done, it would post to the second one, and when second one is done it will signal the third and so on until all the elements in the array are traversed. </p>  <p>However, when I try to run the following program, it segfaults. I am not sure what is going on. Can some one please give me some pointers as to what I am doing wrong. The code that I have written is shown below.</p>  <pre><code>//Read one element using one thread  #include&lt;pthread.h&gt; #include &lt;semaphore.h&gt; #include &lt;iostream&gt;  using namespace std;  int arr[10] = { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 };  sem_t   sem[3]; int count = 0;  void * printNumbers(  void * arg ) {      while(1) {         sem_wait( &amp;sem[count] );         cout&lt;&lt; " Waiting on the semaphore number " &lt;&lt; count &lt;&lt; endl;          count += 1;          if( count &gt; 9 )             break;          cout&lt;&lt; " consuming " &lt;&lt; arr[count]&lt;&lt; " with thid " &lt;&lt;  * ( (int*) arg ) &lt;&lt; endl;          int nextPost = count % 3;          cout&lt;&lt; " Posting to semaphore number " &lt;&lt; nextPost &lt;&lt; endl;          sem_post( &amp;sem[nextPost] );         } }  int main() {      sem_init( &amp;sem[0], NULL, 1 );     sem_init( &amp;sem[1], NULL, 0 );     sem_init( &amp;sem[2], NULL, 0 );      int t1 = 0;     int t2 = 1;     int t3 = 2;      pthread_t thid[3];     pthread_create( &amp;thid[0], NULL, printNumbers,  &amp;t1 );     pthread_create( &amp;thid[1], NULL, printNumbers,  &amp;t2 );     pthread_create( &amp;thid[2], NULL, printNumbers,  &amp;t3 );     pthread_exit( 0 );     return 0; } </code></pre>