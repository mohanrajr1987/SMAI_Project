<p>This is my header : </p>  <pre><code>class my_router_client : public FIX8::my::mine_Router {  private:     mine_session_client&amp; _session;     mutable std::vector&lt;std::string&gt; vSymbolList;  public:     my_router_client(mine_session_client&amp; session) : _session(session) {}      virtual bool operator() (const FIX8::my::SecurityList *msg) const;     void sendToServer(FIX8::Message *);      void logout();     void itertool() const;     }; </code></pre>  <p>I am trying to save the data obtained from security list response to the vSymbolList vector. After handling security response I am trying to iterate through the vector by itertool method. But every time I end up with an empty vector. I tried printing the contents of the vector inside securitylist response function</p>  <pre><code>virtual bool operator() (const FIX8::CX::SecurityList *msg) const; </code></pre>  <p>and I am able to print the contents. Is it some kind of race condition inside threads?</p>  <p>this is the security list response handler</p>  <pre><code>bool cx_router_client::operator() (const CX::SecurityList *msg) const {     GroupBase *dad(msg-&gt;find_group&lt; CX::SecurityList::NoRelatedSym &gt;());     if (dad) {         for (size_t cnt(0); cnt &lt; dad-&gt;size(); ++cnt) {             CX::Symbol symbol;             MessageBase *details(dad-&gt;get_element(cnt));             details-&gt;get(symbol);             string ss;              ss = symbol();             vSymbolList.push_back(ss); //          cout &lt;&lt; "at :: :: " &lt;&lt; vSymbolList[cnt] &lt;&lt; endl;          }            cout &lt;&lt; "no of symbol : " &lt;&lt; vSymbolList.size() &lt;&lt; endl;         hypersleep&lt;h_seconds&gt;(1);     }         return true; } </code></pre>  <p>This is the itertool method :</p>  <pre><code>void my_router_client::itertool() const {     cout &lt;&lt; "symbol list vector size inside itertool:: " &lt;&lt; vSymbolList.size() &lt;&lt; endl;      stringstream ss;      ss &lt;&lt; this_thread::get_id();     uint64_t id = stoull(ss.str());     cout &lt;&lt; "Thread ID #### " &lt;&lt; id &lt;&lt; endl;      vector&lt;string&gt;::iterator it = this-&gt;vSymbolList.begin();     while (it != vSymbolList.end()) {         cout &lt;&lt; *it &lt;&lt; endl;         it++;     } } </code></pre>  <p>This is how I use the them in main :</p>  <pre><code>int main() {   const string conf_file("myfix_client.xml");    unique_ptr&lt;ClientSessionBase&gt; mc(new ClientSession&lt;mine_session_client&gt;(my::ctx(), conf_file, "DLD1"));    mc-&gt;start(false, next_send, next_receive, mc-&gt;session_ptr()-&gt;get_login_parameters()._davi());    hypersleep&lt;h_seconds&gt;(1);    my_router_client *test = new my_router_client(static_cast&lt; mine_session_client&amp; &gt; (*mc-&gt;session_ptr()));    hypersleep&lt;h_seconds&gt;(1);    test-&gt;sendToServer(makeSecurityListRequest());    hypersleep&lt;h_seconds&gt;(1);    test-&gt;itertool();   while(1); } </code></pre>