<p>So I've got an assignment that I'm having trouble with.  I'm trying use pthreads to sum the elements of a matrix with 3 different processors.  I have a struct</p>  <pre><code>typedef struct{     int rows;     int cols;     pid;     int localsum; }ThreadData; </code></pre>  <p>some global variabls</p>  <pre><code>int processors=3; int rows=4; int cols=4; int matrix[10][10]; </code></pre>  <p>and a sum function</p>  <pre><code>void *matrixSum(void *p){      //cast *a to struct ThreadData?     int sum=0;     int i=p-&gt;pid;     int size=p-&gt;rows*p-&gt;cols;      //to sequentially add a processor's 'owned' cells     int row=p-pid/p-cols;     int col=p-pid%p-&gt;cols;      int max_partition_size = ((size/processors)+1);      for(i;i&lt;max_partition_size*processors;i+=processors){         col=i%p-&gt;cols;         row=i/p-&gt;cols;          if(i&lt;=size-1){             sum+=matrix[row][col]+1;         }     }      p-&gt;localsum=sum; } </code></pre>  <p>so my main method looks like this: <br/></p>  <pre><code>int main(){  int  totalsum=0;  ThreadData *a; a=malloc(processors*(sizeof(ThreadData)); int i; for(i=0;i&lt;processors;i++){     a[i].rows=rows;     a[i].cols=cols;     a[i].pid=i;     a[i].localsum=0; }  //just a function that iterates over the matrix to assign it some contents fillmatrix(rows, cols);  pthread_t tid[processors]; for(i=0;i&lt;processors;i++){     pthread_create(tid,NULL,matrixSum,(void *)&amp;a);     totalsum+=a[i].localsum; } pthread_join(); } </code></pre>  <p>My ultimate goal is to pass my <code>matrixSum()</code> with a <code>ThreadData</code> struct as the argument.</p>  <p>So I think I have to cast the void pointer given in <code>matrixSum()</code> to a struct, but I'm having trouble doing so.</p>  <p>I tried doing so like this </p>  <pre><code>ThreadData *a=malloc(sizeof(ThreadData)); a=(struct ThreadData*)p; </code></pre>  <p>But I get a <code>warning: assignment from incompatible pointer type</code> error. So what's the proper way to do this - that is to cast the void pointer taken from the parameters, and operate on it like the struct it is meant to be?</p>