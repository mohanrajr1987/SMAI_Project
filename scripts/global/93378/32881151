<p>I have a remote Validation rule set for one of the attributes in my class. I want to disable the validation for the attribute for a particular Action  method in controller. What can be the work around for this issue?</p>  <pre><code>    [Remote("DuplicateFamilyName","LsystemFamilies",HttpMethod = "POST",ErrorMessage= "System Family Name already Exists")]     public string FamilyName { get; set; } </code></pre>  <p>Validator</p>  <pre><code>    public JsonResult DuplicateFamilyName(string FamilyName)     {         var name = db.LsystemFamily.Where(x =&gt; x.FamilyName.Equals(FamilyName, StringComparison.CurrentCultureIgnoreCase)).FirstOrDefault();         return Json(name == null);     } </code></pre>  <p>I want to disable the Validator in the Edit Action method</p>  <pre><code>    public ActionResult Edit(int? id)     {         if (id == null)         {             return new HttpStatusCodeResult(HttpStatusCode.BadRequest);         }         LsystemFamily lsystemFamily = db.LsystemFamily.Find(id);         if (lsystemFamily == null)         {             return HttpNotFound();         }         return View(lsystemFamily);     } </code></pre>  <p>I know that particular features can be disabled during runtime in the controller. But I do not know what property of my Attribute should be accessed inorder to get it right.</p>  <p>EDIT</p>  <p>Validator</p>  <pre><code>    public JsonResult DuplicateFamilyName(string FamilyName, int FamilyID)     {         bool idExists = db.LsystemFamily.Any(id=&gt;id.LsystemFamilyID.Equals(FamilyID));         if (!idExists)         {             var name = db.LsystemFamily.Where(x =&gt; x.FamilyName.Equals(FamilyName, StringComparison.CurrentCultureIgnoreCase)).FirstOrDefault();             return Json(name == null);         }     } </code></pre>  <p>Edit 2</p>  <p>Model Class</p>  <pre><code>public class LsystemFamily {     public int LsystemFamilyID { get; set; }     [Display (Name = "Family Name")]     [Remote("DuplicateFamilyName","LsystemFamilies",HttpMethod = "POST",ErrorMessage= "System Family Name already Exists", AdditionalFields="LsystemFamilyID")]     public string FamilyName { get; set; }     [Display (Name = "System Count")] } </code></pre>  <p>Edit 3 : Create method</p>  <pre><code>    public ActionResult Create([Bind(Include = "LsystemFamilyID,FamilyName,LsystemCount,DescriptionEN,DescriptionDE,CreatedOn,ModifiedOn,CreatedBy,ModifiedBy")] LsystemFamily lsystemFamily)     {         if (ModelState.IsValid)         {             lsystemFamily.CreatedOn = DateTime.Now;             lsystemFamily.CreatedBy = User.Identity.Name;             lsystemFamily.ModifiedOn = DateTime.Now;             lsystemFamily.ModifiedBy = User.Identity.Name;             db.LsystemFamily.Add(lsystemFamily);             db.SaveChanges();             return RedirectToAction("Index");         }          return View(lsystemFamily);     } </code></pre>