<p>I'm working on a Web Application implemented in ASP.NET MVC 5 with Web API 2.</p>  <p>I've implemented Integrated Windows Authentication by adding the following code to web.config:</p>  <pre><code>&lt;system.web&gt;   &lt;authentication mode="Windows" /&gt; &lt;/system.web&gt; &lt;system.webServer&gt;   &lt;security&gt;     &lt;authentication&gt;       &lt;windowsAuthentication enabled="true"/&gt;     &lt;/authentication&gt;   &lt;/security&gt; &lt;/system.webServer&gt; </code></pre>  <p>and by adding <code>[Authorize]</code> annotation on top of my controllers.</p>  <p>Now, I'm asked to give access to some functionality based on the user's role. I've got a table where I hold the user permissions, but I don't know how I can create those roles, and associate the right permissions with them.</p>  <p>Any help would be appreciated.</p>  <p>Thanks in advance </p>  <p>[UPDATE]</p>  <p>Based on mason's answer, I've updated the code a bit.</p>  <p>Added the following line to web.config:</p>  <pre><code>&lt;roleManager defaultProvider="MyRoleProvider"&gt;   &lt;providers&gt;     &lt;add         name="MyRoleProvider"         type="MyApp.App_Start.MyRoleProvider"         applicationName="My Tool" /&gt;   &lt;/providers&gt; &lt;/roleManager&gt; </code></pre>  <p>MyRoleProvider.cs:</p>  <pre><code>public class MyRoleProvider : RoleProvider {     private MyEntities db = new MyEntities();      public override void AddUsersToRoles(string[] usernames, string[] roleNames)     {         throw new NotImplementedException();     }      public override string ApplicationName     {         get;         set;     }      public override void CreateRole(string roleName)     {         throw new NotImplementedException();     }      public override bool DeleteRole(string roleName, bool throwOnPopulatedRole)     {         throw new NotImplementedException();     }      public override string[] FindUsersInRole(string roleName, string usernameToMatch)     {         throw new NotImplementedException();     }      public override string[] GetAllRoles()     {         throw new NotImplementedException();     }      public override string[] GetRolesForUser(string username)     {         throw new NotImplementedException();     }      public override string[] GetUsersInRole(string roleName)     {         throw new NotImplementedException();     }      public override void RemoveUsersFromRoles(string[] usernames, string[] roleNames)     {         throw new NotImplementedException();     }      public override bool IsUserInRole(string username, string roleName)     {         vUser user = db.vUsers.Where(u =&gt; u.UserName == username).First();         if (roleName == "User")         {             if (user.IsAllowedToView == true)             {                 return true;             }             else             {                 return false;             }         }         else if (roleName == "Administrator")         {             if (user.IsAllowedToSubmit == true)             {                 return true;             }             else             {                 return false;             }         }         else         {             return false;         }     }      public override bool RoleExists(string roleName)     {         if (roleName == "User" || roleName == "Administrator")         {             return true;         }         else         {             return false;         }     } } </code></pre>  <p>When I use <code>[Authorize]</code> annotation on my controllers, and call <code>HttpContext.Current.User.Identity.Name</code> it returns the ID that I use to login to my machine. (Part of AD) But, if I use [Authorize(Roles="User")], it keeps asking for my username and password again and again, and doesn't accept anything. I put breakpoints to every single method on MyRoleProvider class, but the program hasn't stopped at any which makes me think maybe it is not even calling the provider.</p>