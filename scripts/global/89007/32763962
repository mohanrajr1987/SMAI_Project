<p>With the following code:</p>  <pre><code>public class Person {     private Long id;     private String name;     private List&lt;Dog&gt; dogs; }  public class Dog {     private Long id;     private Long oldId;     private Long age; } </code></pre>  <p>I have 2 objects of Person, 'person' and 'editedPerson'. I want to compare the two, and if one attribute is different, change the class of a element and create a tooltip showing the value of the other object's attribute. And I want to be able to do this inside a ng-repeat too, compare Dog attributes inside persons list based on their id/oldId (compare the dog inside the ng-repeat with the dog that has the same oldID as dog's id)</p>  <p>This is an example of how I've been doing so far:</p>  <pre><code>&lt;b ng-class="{ 'different' : person.name != editedPerson.name)}" tooltip="{{(person.name != editedPerson.name) ? 'New: ' + editedPerson.name : ''}}"&gt; Name:&lt;/b&gt; &lt;p&gt;{{person.name}}&lt;/p&gt; </code></pre>  <p>The problem is that I'll have a LOT of attributes, and some of them are inside Lists of different types. The sollution I have for the List so far is to create one function for each attribute, for example </p>  <pre><code>compareDogAge = function(dog, dogs) {     // Foreach on dogs until dogs[i].oldId == dog.id, return true if age is equal } </code></pre>  <p>I would like to know if I should keep my current solutions, or try to make/find a directive that can solve my problem (I have very little experience on making directives).</p>  <p>Thanks in advance</p>  <p><em><strong>EDIT</strong></em></p>  <p>I came up with the following function so far, but haven't tested it yet</p>  <pre><code>equals = function(fieldName, originalObj, newObj) {     if (newObj instanceof Array) {         for (var i = 0; i &lt; newObj.length; i++) {             if (originalObj.id == newObj[i].oldId) {                 return originalObj[fieldName] == newObj[i][fieldName];             }         }     } else if (newObj instanceof Object){         return originalObj[fieldName] == newObj[fieldName];     } } </code></pre>  <p>I still think a directive would be better</p>