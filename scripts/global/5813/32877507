<p>I'm trying to better understand pipes between a parent and multiple child processes, so I made a simple program that spawns two child processes, gives them a value (<code>i</code>), has them change that value, and then prints it out. </p>  <p>However it's not working, as the program prints <code>i</code> as if it was unaltered, and prints the altered <code>i</code> inside the children. I'm obviously not sending the <code>i</code> variable through correctly, so how should I fix this?</p>  <pre class="lang-c prettyprint-override"><code>int main ( int argc, char *argv[] ){     int i=0;     int pipefd[2];     int pipefd1[2];     pipe(pipefd);     pipe(pipefd1);     pid_t cpid;     cpid=fork();     cpid=fork();     if (cpid ==0)  //this is the child     {         close(pipefd[1]);   // close write end of first pipe         close(pipefd1[0]);  // close read end of second pipe         read(pipefd[0], &amp;i, sizeof(i));         i=i*2;         printf("child process i= %d\n",i);  //this prints i as 20 twice         write(pipefd1[1],&amp;i, sizeof(i));         close(pipefd[0]); // close the read-end of the pipe         close(pipefd1[1]);         exit(EXIT_SUCCESS);     }      else     {         close(pipefd[0]);   // close read end of first pipe         close(pipefd1[1]);  // close write end of second pipe         i=10;         write(pipefd[1],&amp;i,sizeof(i));           read (pipefd1[1], &amp;i, sizeof (i));         printf("%d\n",i); //this prints i as 10 twice         close(pipefd[1]);         close(pipefd1[0]);         exit(EXIT_SUCCESS);     } } </code></pre>