<p>I'm trying to better understand communication between pipes, so I tried to make a program that has two child processes, and communicates BOTH ways with both of these processes. It simply takes the integer i, defines it, and sends it to them. They then redefine it and send it back. However, when I run this code the parent process prints the i as if it never was changed in the child process, while both child processes print out a value of 20, as I expected. Why is the value of i not changing, and how do I get it to?</p>  <pre><code>int main ( int argc, char *argv[] ){ int i=0; int pipefd[2]; int pipefd1[2]; pipe(pipefd); pipe(pipefd1); pid_t cpid; cpid=fork(); cpid=fork(); if (cpid ==0)  //this is the child {     close(pipefd[1]);   // close write end of first pipe     close(pipefd1[0]);  // close read end of second pipe     read(pipefd[0], &amp;i, sizeof(i));     i=i*2;     printf("child process i= %d\n",i); //this prints 20 twice     write(pipefd1[1],&amp;i, sizeof(i));     close(pipefd[0]); // close the read-end of the pipe     close(pipefd1[1]);         exit(EXIT_SUCCESS);     } else {     close(pipefd[0]);   // close read end of first pipe     close(pipefd1[1]);  // close write end of second pipe     i=10;     write(pipefd[1],&amp;i,sizeof(i));       read (pipefd1[1], &amp;i, sizeof (i));     printf("%d\n",i); //this prints 10 twice     close(pipefd[1]);     close(pipefd1[0]);           exit(EXIT_SUCCESS); } } </code></pre>