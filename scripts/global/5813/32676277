<p>I am exploring the <a href="http://ironframework.io" rel="nofollow">Iron web framework for Rust</a> and have created a small handler that will read an image derived from the request URL, resize it and then deliver the result. From what I can tell an <a href="http://ironframework.io/doc/iron/response/struct.Response.html" rel="nofollow">Iron Response</a> can be built from a several different types, including types that implement the <a href="http://ironframework.io/doc/iron/response/trait.WriteBody.html" rel="nofollow">Read trait</a>.</p>  <p>The <a href="http://www.piston.rs/image/image/enum.DynamicImage.html#method.save" rel="nofollow">save function</a> in the <a href="https://crates.io/crates/image" rel="nofollow">image crate</a> takes a type that implements the <a href="https://doc.rust-lang.org/stable/std/io/trait.Write.html" rel="nofollow">Write trait</a>.</p>  <p>It feels like these two functions should be able to be hooked up such that the writer writes to a buffer that the reader reads from. I found the <a href="https://crates.io/crates/pipe" rel="nofollow">pipe crate</a>, which seems to implement this behaviour but I'm having trouble getting the <code>Read</code> end of the pipe into something that Iron will accept.</p>  <p>A slightly simplified version of my function:</p>  <pre class="lang-rust prettyprint-override"><code>fn artwork(req: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {     let mut filepath = PathBuf::from("artwork/sample.png");      let img = match image::open(&amp;filepath) {         Ok(img) =&gt; img,         Err(e) =&gt; return Err(IronError::new(e, status::InternalServerError))     };      let (mut read, mut write) = pipe::pipe();      thread::spawn(move || {         let thumb = img.resize(128, 128, image::FilterType::Triangle);         thumb.save(&amp;mut write, image::JPEG).unwrap();     });      let mut res = Response::new();     res.status = Some(iron::status::Ok);     res.body = Some(Box::new(read));      Ok(res) } </code></pre>  <p>The error I'm receiving:</p>  <pre><code>src/main.rs:70:21: 70:35 error: the trait `iron::response::WriteBody` is not implemented for the type `pipe::PipeReader` [E0277] src/main.rs:70     res.body = Some(Box::new(read));                                    ^~~~~~~~~~~~~~ </code></pre>  <p><a href="http://arcnmx.github.io/pipe-rs/pipe/struct.PipeReader.html" rel="nofollow">PipeReader</a> implements <code>Read</code> and <a href="http://ironframework.io/doc/iron/response/trait.WriteBody.html" rel="nofollow">WriteBody</a> is implemented for <code>Read</code> so I feel this should work. I also tried:</p>  <pre class="lang-rust prettyprint-override"><code>let reader: Box&lt;Read&gt; = Box::new(read);  let mut res = Response::new(); res.status = Some(iron::status::Ok); res.body = Some(reader); </code></pre>  <p>but this gives the error:</p>  <pre><code>src/main.rs:72:21: 72:27 error: mismatched types:  expected `Box&lt;iron::response::WriteBody + Send&gt;`,     found `Box&lt;std::io::Read&gt;` (expected trait `iron::response::WriteBody`,     found trait `std::io::Read`) [E0308] src/main.rs:72     res.body = Some(reader);                                    ^~~~~~ </code></pre>  <p>How can I hook up the <code>save</code> function to the Iron response body?</p>