<p>I am trying to receive data from a child process over an anonymous pipe in Windows.  I know how to do this using standard I/O streams but these are being used for other purposes.  I also know how to do this in Linux or OSX using <code>fork()</code>, <code>pipe()</code> and <code>execv()</code>.</p>  <p>In Windows, you can create a pipe with <code>CreatePipe()</code> and make one end <em>not</em> inheritable with <code>SetHandleInformation()</code>.  Then for stdout and stderr you can pass <code>STARTUPINFO</code>, with <code>hStdOutput</code> or <code>hStdError</code> set, to <code>CreateProcess()</code> to pass the other end to the child.  After the call to <code>CreateProcess()</code> the parent most close it's handle to the child's end of the pipe.  This is all explained in detail in <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms682499%28v=vs.85%29.aspx" rel="nofollow">Creating a Child Process with Redirected Input and Output</a> on MSDN.  However, I have not found a way to pass a <code>HANDLE</code>, other than via stderr, stdout or stdin, to the child.</p>  <p>I've tried converting the <code>HANDLE</code> to a string with something like this:</p>  <pre><code>std::ostringstream str; str &lt;&lt; hex &lt;&lt; "0x" &lt;&lt; handle; std::string handleArg = str.str(); </code></pre>  <p>And then passing it as a command line argument and converting it back to a <code>HANDLE</code>, which is just a <code>void *</code> in the child process.  Although the child process apparently inherits the pipe <code>HANDLE</code> the actual value of the <code>HANDLE</code> must be different than in the parent because passing it this way fails to work.</p>  <p>I know I can use a named pipe to do this but it seems it should be possible to do this with anonymous pipes.</p>  <p>So how can I pass a pipe <code>HANDLE</code> to a child process in Windows?</p>  <p><strong>Update1:</strong> Sample code in <a href="https://support.microsoft.com/en-us/kb/150523" rel="nofollow">this MSDN article</a> seems to indicate that, at least with socket handles, you can pass them as a string to the child.</p>  <p><strong>Update2:</strong> Turns out I made a mistake.  See my answer below.</p>