<p>I am trying to execute the one liner below as a part of bash script.</p>  <pre><code>command1 |grep -ID|grep -v + | awk '{print "command2" $2}'|bash </code></pre>  <p>The first part of the pipe prints the info below:    </p>  <pre><code>root@system:~# command1 |grep -v ID|grep -v + | id                                   | name                     | mac_address       | fixed_ips                                                                            | | 00277225-34fa-48f5-9a2a-ee5f1c5b1dcb | dummy                    | fa:18:3e:c4:85:94 | {"subnet_id": "0cd4d824-4420-4049-87c3-ed33c3addbf5", "ip_address": "11.170.1.121"}  | : : | ff9a6ed5-9694-45bc-bf71-59565f96d809 | BAT-T0-A2-0-7-tport      | fa:18:3e:62:70:fb | {"subnet_id": "f9ae81ed-3b1a-45a7-96fd-c417ed32 </code></pre>  <p>So, $2 in awk command2 is "00277225-34fa-48f5-9a2a-ee5f1c5b1dcb". e.g.</p>  <pre><code>command2 00277225-34fa-48f5-9a2a-ee5f1c5b1dcb </code></pre>  <p>The whole purpose of this one-liner is to execute a number of "command2" instances with different parameter values from the printout above. e.g.</p>  <pre><code>command2 00277225-34fa-48f5-9a2a-ee5f1c5b1dcb command2 ff9a6ed5-9694-45bc-bf71-59565f96d809 : : </code></pre>  <p>But I can not make the $2 recognized the way below</p>  <pre><code>command1 |grep -ID|grep -v + | awk '{print "command2" $2}'|bash </code></pre>  <p>I think I am missing few syntax tricks here (as newbie).</p>  <p>p.s: If I copy / paste the whole line in command line, it works fine.</p>