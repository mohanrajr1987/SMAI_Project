<p>As part of an assignment in OS course, we were asked to make a shell in c with certain features. One of them was piping. I have written a code but am unable to figure out where I am going wrong. The pipe works for 2 command pipes (eg. ls | wc). But for more than two commands, the output of the second command is not going to input of the third command.</p>  <pre>    eg. input     ls | wc | wc     output       2       2      14       0       0       0</pre>  <p>Here's my code:</p>  <pre><code>if(pipe(fd) == -1){     perror("pipe"); } for(it=0 ; it &lt; y-1 ; it++){//y-1 is the no of piped commands (eg.for ls | wc,y=3)     command = a[it];     int position = 0;     char *token = strtok_r(command," ",&amp;ptr2);     while(token != NULL){         args[position] = token;         token = strtok_r(NULL," ",&amp;ptr2);         position++;     }     for(i=position;i&lt;100;i++){         args[i] = NULL;     }     if(strcmp(args[0],"pwd")==0){         printf("%s\n",cwd);     }     else if(strcmp(args[0],"cd")==0){         if(chdir(args[1])!=0){             perror(args[0]);         }     }     else if(strcmp(args[0],"echo")==0){         int q = 1;         while(args[q]!=NULL){             printf("%s ",args[q]);             q++;         }         printf("\n");     }     else{         int in1 = in();         int out1 = out();         func();         op = -1;         inp = -1;         int initial;         pid=fork();         if(pid &lt; 0){             fprintf(stderr, "fork failed\n");             exit(1);         }         else if(pid &gt; 0){             wait();             close(fd[1]);         }         else{             dup2(fd[0],STDIN_FILENO);             if(it!=y-2){                 dup2(fd[1],STDOUT_FILENO);                 close(fd[1]);             }             close(fd[0]);             if(in1){//Checks for input redirection                 int fdi = open(input, O_RDONLY, 0);                 dup2(fdi,STDIN_FILENO);                 close(fdi);                 in1 = 0;              }             if(out1 == 1){//Checks for output redirection                 int fdo = creat(output,0644);                 dup2(fdo,STDOUT_FILENO);                 close(fdo);                 out1 = 0;             }             else if(out1==2){//Checks for output redirection                 int fdo = open(output,O_RDWR|O_APPEND|O_CREAT, 00644);                 dup2(fdo,STDOUT_FILENO);                 close(fdo);                 out1 = 0;             }             execvp(args[0],args);             _exit(0);         }     } } </code></pre>  <p></p>