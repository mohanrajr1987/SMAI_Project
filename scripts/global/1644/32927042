<p>I cannot understand what exactly the above names represent. MDN refers to them as <code>interfaces</code>. They seem to be neither <code>DOM nodes</code> since properties like <strong>parentNode</strong> and <strong>nodeType</strong> are not applied, nor javascript objects.</p>  <p>From the other hand, they appear to the prototype chain of DOM objects: e.g. <code>document--&gt;HTMLDocument.prototype--&gt;Document.prototype--&gt;Node.prototype...</code>  <strong><em>So, what exactly are they?</em></strong></p>  <p>And for the end, something that will go me crazy. Let's take <strong>HTMLElement.prototype</strong>. It is that <code>HTMLElement.prototype.hasOwnProperty('title')</code> is true. However <code>HTMLElement.prototype.title</code> returns <strong>Uncaught TypeError: Illegal invocation(â€¦)</strong> in Chrome Developer Tools!! Is there any logical explanation for this paradox?</p>  <p>Thank you</p>