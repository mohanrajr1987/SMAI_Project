<p>Before user goes to the next page in my <em>AngularJS</em> app, I make a custom call to retrieve some data. I achieve this successfully with <em>AngularJS promise</em>  </p>  <pre><code>app.config(['$routeProvider', function ($routeProvider) { $routeProvider    .when("/", {templateUrl: "partials/home.html", controller:  "PageCtrl",                 resolve: {delay: myFunction} }) </code></pre>  <p>...</p>  <pre><code> var myFunction = function($q, $timeout){       var defer = $q.defer();       myCustomAjaxCall({           success: function() {                defer.resolve();           },           error: function() {                 defer.reject('Reject error');           }       });       return defer.promise;  }; </code></pre>  <p>Note <code>myCustomAjaxCall</code> function. I have to use it as is. It makes the call and runs callbacks on success. This in turn resolved my promise. </p>  <p>This <code>myCustomAjaxCall</code> function tries to manipulate DOM for the new view. However, the <em>promise</em> is resolved before the new view is rendered. It is <em>router's</em> <code>routeChangeSuccess</code> method when the view is already changed and ready for DOM manipulation. For my case, however, it is too late because DOM is trying to be manipulated before the new view is rendered.</p>  <p>Is there any solution you suggest to follow to manipulate new view during <em>promise resolve</em> execution?</p>