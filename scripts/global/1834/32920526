<p>I'm developing a simple WPF Phone Book application which uses XML data. My idea is to make it more general so that I can use SQL data instead of XML data if it's required. That's why I chose the basic Factory Design Pattern.</p>  <hr>  <p>Here's my interface (which functions as an abstact class):</p>  <pre><code>public interface IPhoneBookData {     Dictionary&lt;string,string&gt; GetPhoneBookData(); } </code></pre>  <hr>  <p>Here's the Class which inherits from that interface using XML data  and returns dictionary:</p>  <pre><code>using System.Collections.Generic; using PhoneBook.BL.XML; using PhoneBook.BL.XML.ParserXML;  public class PhoneBookDataXml : IPhoneBookData {     private string _path;     Dictionary&lt;string, string&gt; _phoneBookDict = new Dictionary&lt;string,                                                                    string&gt;();      public PhoneBookDataXml(string path)     {         _path = path;     }      public Dictionary&lt;string, string&gt; GetPhoneBookData()     {         var phoneBookXml = ParseXml.Deserialize&lt;PhoneBookXml&gt;(_path);          foreach (var item in phoneBookXml.Properties)         {             _phoneBookDict.Add(item.Key, item.Value);          }          return _phoneBookDict;     }   } </code></pre>  <hr>  <p>Here's my Factory Class:</p>  <pre><code>public static class PhoneBookDataFactory {     public static IPhoneBookData GetPhoneBookClass(string input)     {         if (input.ToLower().Contains("xml"))         {             return new PhoneBookDataXml(input);         }          return null;     } } </code></pre>  <hr>  <p>And finally here's my MainViewModel Class (WPF MVVM) which uses the factory for XML:</p>  <pre><code>public MainViewModel() {     _nameList = new List&lt;string&gt;();     _phoneList = new List&lt;CustomKeyValuePair&lt;string, string&gt;&gt;();      //_phoneList = new List&lt;string&gt;();      var PhoneBookDataInstance =                                PhoneBookDataFactory.GetPhoneBookClass("PhoneBook.xml");      _phoneBookDict = PhoneBookDataInstance.GetPhoneBookData();      _nameList = _phoneBookDict.Keys.ToList(); } </code></pre>  <hr>  <p>I know that Dictionary inherits from ICollection which inherits from IEnumerable but I tried make it general and didn't succeed.</p>  <p>I'll be thankful if you can show me how can the "GetPhoneBookData" that will return a generic collection and I could  convert it to a Dictionary or any other collection which will be required in the future.</p>