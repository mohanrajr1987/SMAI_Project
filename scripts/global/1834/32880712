<p>I was a assigned to group ana grams together in a list of lists, lexcicographicaly.</p>  <p>Below is one of the test cases:</p>  <p><em>Input:</em>  <code>eat tea tan ate nat bat</code></p>  <p><em>Output:</em></p>  <p><code>ate eat tea  bat  nat tan</code></p>  <p>However, I keep getting a typeError like this: <code>TypeError: 'type' object is not iterable</code></p>  <p>I managed to fix this error by changing <code>anagramDict = OrderedDict(list)</code> to <code>anagramDict = defaultdict(list)</code> but this resulted the code to print all three line in a <strong>random order</strong> every time the program is ran.</p>  <p>Is there a way to fix this so that the program outputs <strong>exactly</strong> like the way it is shown above?</p>  <p>This is what i have done so far:</p>  <pre><code>import sys from collections import * def findAnagrams(string):     anagramDict = OrderedDict(list)     for word in string:         key = ''.join(sorted(word))         anagramDict[key].append(word)     return anagramDict  def main():     for string in sys.stdin:         stringList = string.split()         if len(stringList) == 0:            break         anagramDict = findAnagrams(stringList)         for key,anagrams in anagramDict.items():             if len(anagrams) &gt;=1:                 print(' '.join(sorted(anagrams)))         print () main() </code></pre>  <p>Note: the machine that runs this programs reads input from stdin/keyboard and prints the output to console(stdout).</p>