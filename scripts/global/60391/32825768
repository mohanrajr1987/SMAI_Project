<p>I want to understand how the preview buffer passed to <code>addCallbackBuffer</code> relates to the <code>byte[]</code> array passed through <code>onPreviewFrame</code>, which prompts the following related questions.</p>  <p>Q1. I am guessing that the buffer passed in <code>addCallbackBuffer</code> is used to store a new camera frame and that before <code>onPreviewFrame</code> is called, that buffer is copied into the data buffer passed through <code>onPreviewFrame</code>.   If it is the case, that would mean that I can reuse my preview frame buffer by calling <code>addCallbackBuffer</code> as soon as I enter <code>onPreviewFrame</code> and note at the end of the function when I am done processing the buffer returned by <code>onPreviewFrame</code>.  Is that correct?</p>  <p>Q2. I am also not clear about the mechanism for using two preview frame buffers. Say I have two private <code>byte[]</code> preview buffers added as follows during initialization:</p>  <pre><code>addCallbackBuffer(mPreviewBuffer1); addCallbackBuffer(mPreviewBuffer2); </code></pre>  <p>How do I know which preview buffer was used when I am in <code>onPreviewFrame</code> so that I can re-add the correct preview frame buffer with <code>addCallbackBuffer</code> again?</p>  <pre><code>private byte[] mPreviewBuffer1; private byte[] mPreviewBuffer1; ... public void onPreviewFrame(byte[] camera, Camera c) {   ...   // how do I decide which buffer to re-add?   //c.addCallbackBuffer(mPreviewBuffer1);   //c.addCallbackBuffer(mPreviewBuffer2);   ... } </code></pre>  <p>Q3. Am I understanding correctly that another thread is responsible for acquiring the frame buffer, i.e. that as long as a preview buffer is in the queue, we will be capturing a frame while <code>onPreviewFrame</code> is executing?  If that's not the case, having two call back buffers would not help with speed, would it?</p>