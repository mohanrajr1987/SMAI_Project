<p>I am trying to Access Native Camera so that I can set parameters like Scene_Mode,etc to get good picture quality. Actually my application uses OCR (Optical Character Recongnizition) hence needs good quality picture.</p>  <p>I am using below code which is working properly and saving picture in Camera device. However quality of preview and saved image is very bad.</p>  <p>My phone has "Android 4.4.2" and do have HDR in it.</p>  <p>I have tryied various solutions provided in various posts like below, however none of them is working for me.</p>  <p><a href="http://stackoverflow.com/questions/12539743/android-camera-api-hdr-photo-setting-samsung-galaxy/13964416#13964416">Android Camera API, HDR Photo Setting? (Samsung Galaxy)</a></p>  <p><a href="http://stackoverflow.com/questions/26967490/android-camera-preview-is-dark">Android camera preview is dark</a></p>  <p><a href="http://stackoverflow.com/questions/13811488/trying-to-implement-hdr-on-android-jellybean">Trying to implement HDR on Android jellybean</a> </p>  <p>Can anyone please suggest what is missing in my below code.</p>  <p>MainActivity.java.... (All my java code is available in this file only.)</p>  <p>package com.lokendrakushwah.mynativecamerademo;</p>  <pre><code>import android.app.Activity; import android.content.pm.ActivityInfo; import android.graphics.PixelFormat; import android.hardware.Camera; import android.os.Bundle; import android.os.Environment; import android.util.Log; import android.view.LayoutInflater; import android.view.Menu; import android.view.MenuItem; import android.view.SurfaceHolder; import android.view.SurfaceView; import android.view.View; import android.view.ViewGroup; import android.widget.Button; import android.widget.Toast;  import java.io.File; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException;   public class MainActivity extends Activity implements SurfaceHolder.Callback { Camera devicecamera; SurfaceView mySurfaceView; SurfaceHolder holder; LayoutInflater layoutInflater = null;  @Override protected void onCreate(Bundle savedInstanceState) {     super.onCreate(savedInstanceState);     setContentView(R.layout.activity_main);     setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);     getWindow().setFormat(PixelFormat.UNKNOWN);     mySurfaceView = (SurfaceView) findViewById(R.id.camerapreview);     holder = mySurfaceView.getHolder();     holder.addCallback(this);     layoutInflater = LayoutInflater.from(getBaseContext());     View view=layoutInflater.inflate(R.layout.control, null);     ViewGroup.LayoutParams layoutParams=new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);     this.addContentView(view, layoutParams);     Button buttonTakePicture = (Button) findViewById(R.id.clickimage);      buttonTakePicture.setOnClickListener(new View.OnClickListener() {         @Override         public void onClick(View v) {             try             {                 devicecamera.takePicture(mShutterCallback, mPictureCallback, mPictureCallback_JPG);             }             catch (Exception e)             {}          }     });  } //End of OnCreate Method..  Camera.ShutterCallback mShutterCallback = new Camera.ShutterCallback() {     @Override     public void onShutter() {      } };   Camera.PictureCallback mPictureCallback = new Camera.PictureCallback() {     @Override     public void onPictureTaken(byte[] data, Camera camera) {      } };  Camera.PictureCallback mPictureCallback_JPG = new Camera.PictureCallback() {     @Override     public void onPictureTaken(byte[] data, Camera camera) {         File sdDir= new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES),"CaptureImage");         if(!sdDir.exists())             if(!sdDir.mkdir())             {                 Log.d("MyNativeCameraDemo","failed to create directory");                 return;             }         File Image=new File(sdDir.getPath()+"/newimage.png");         try         {             FileOutputStream fos= new FileOutputStream(Image);             fos.write(data);             fos.close();             Toast.makeText(getApplicationContext(), "Image Saved Successfully",Toast.LENGTH_SHORT).show();         }         catch(FileNotFoundException e)         {}         catch(IOException e)         {}     } };      @Override public boolean onCreateOptionsMenu(Menu menu) {     // Inflate the menu; this adds items to the action bar if it is present.     getMenuInflater().inflate(R.menu.menu_main, menu);     return true; }  @Override public boolean onOptionsItemSelected(MenuItem item) {     // Handle action bar item clicks here. The action bar will     // automatically handle clicks on the Home/Up button, so long     // as you specify a parent activity in AndroidManifest.xml.     int id = item.getItemId();      //noinspection SimplifiableIfStatement     if (id == R.id.action_settings) {         return true;     }      return super.onOptionsItemSelected(item); }  @Override public void surfaceCreated(SurfaceHolder holder) {     devicecamera = Camera.open(); }  @Override public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {     try     {         Camera.Parameters params = devicecamera.getParameters();         params.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO);         params.setFlashMode(Camera.Parameters.FLASH_MODE_AUTO);         params.setSceneMode(Camera.Parameters.SCENE_MODE_HDR);         devicecamera.setPreviewDisplay(holder);         devicecamera.startPreview();     }     catch (IOException e)     {         e.printStackTrace();     } }  @Override public void surfaceDestroyed(SurfaceHolder holder) {     devicecamera.stopPreview();     devicecamera.release(); } } </code></pre>