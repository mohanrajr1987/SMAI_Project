<p>Ok, I want my app to enable users to take a photo and for the photo to be viewable to them later on, within the app.</p>  <p>The problem is that the photos taken by the camera are to large to be displayed in the app.</p>  <p>This is the kind of error written to logcat when the attempt is made to display the new photo in the app:</p>  <pre><code>Bitmap too large to be uploaded into a texture (5312x2988, max=4096x4096) </code></pre>  <p>So obviously I need to scale/resize the image before it is stored to the <b>mynewapp</b> folder on the device.</p>  <p>See the code below, where we try to load the <b>mynewfile.jpg</b> after it has been stored on the device, if we edit the file source to reference an image file that is 500x500, then that image <b>WILL</b> be displayed. But it <b>WILL NOT</b> display the <b>mynewfile.jpg</b> as it is too large.</p>  <p>Can someone tell me how to resize the image before it is save on the device?</p>  <p>Many thanks</p>  <p>Here is my code:</p>  <p>Obviously I have added the appropriate permission to the <b>AndroidManifest.xml</b> file</p>  <pre><code>&lt;uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" /&gt; &lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" /&gt;  &lt;uses-feature android:name="android.hardware.camera2" /&gt; </code></pre>  <p>The following code is in <b>TakePhotoDocActivity.java</b>:</p>  <pre><code>    package com.example.frankjones.glovebox;      import android.content.Intent;     import android.graphics.drawable.Drawable;     import android.net.Uri;     import android.os.Bundle;     import android.provider.MediaStore;     import android.support.v7.app.AppCompatActivity;     import android.view.Menu;     import android.view.MenuItem;     import android.view.View;     import android.widget.Button;     import android.widget.ImageView;     import android.widget.Toast;      import java.io.File;      public class TakePhotoDocActivity extends AppCompatActivity {          // Set Camera Request         static final int CAM_REQUEST = 1;          // Prepare variables         protected Button mTakePhotoBtn;         protected ImageView mTakePhotoImg;          // Start onCreate method         @Override         protected void onCreate(Bundle savedInstanceState) {             super.onCreate(savedInstanceState);             setContentView(R.layout.activity_take_photo_doc);              // Set variables             mTakePhotoBtn = (Button) findViewById(R.id.takePhotoBtn);             mTakePhotoImg = (ImageView) findViewById(R.id.takePhotoImg);              // Listen to button             mTakePhotoBtn.setOnClickListener(new View.OnClickListener() {                 @Override                 public void onClick(View v) {                     Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);                     File file = getFile();                     cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(file));                     startActivityForResult(cameraIntent, CAM_REQUEST);                 }             }); // End listen to button          } // End onCreate method          private File getFile() {             // Specify the directory we will store the file in             File folder = new File("/storage/emulated/0/mynewapp/");              // If the directory doesn't exist, create it             if (!folder.exists()) {                 folder.mkdir();             }              // Specify the filename with its directory             File imageFile = new File(folder, "mynewfile.jpg");              // Return the filename             return imageFile;         }          @Override         protected void onActivityResult(int requestCode, int resultCode, Intent data) {             // Display new photo in the ImageView             mTakePhotoImg.setImageDrawable(Drawable.createFromPath("/storage/emulated/0/mynewapp/mynewfile.jpg"));              // Toast a success message             Toast.makeText(this, "Image saved!", Toast.LENGTH_LONG).show();        }          @Override         public boolean onCreateOptionsMenu(Menu menu) {             // Inflate the menu; this adds items to the action bar if it is present.             getMenuInflater().inflate(R.menu.menu_take_photo_doc, menu);             return true;         }          @Override         public boolean onOptionsItemSelected(MenuItem item) {             // Handle action bar item clicks here. The action bar will             // automatically handle clicks on the Home/Up button, so long             // as you specify a parent activity in AndroidManifest.xml.             int id = item.getItemId();              //noinspection SimplifiableIfStatement             if (id == R.id.action_settings) {                 return true;             }              return super.onOptionsItemSelected(item);         }     } </code></pre>  <p>And lastly, this is the layout file <b>activity_take_photo_doc.xml</b></p>  <pre><code>    &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"         xmlns:tools="http://schemas.android.com/tools"         android:layout_width="match_parent"         android:layout_height="match_parent"         android:orientation="vertical"         android:paddingBottom="16dp"         android:paddingLeft="16dp"         android:paddingRight="16dp"         android:paddingTop="16dp"         tools:context="com.example.frankjones.glovebox.TakePhotoDocActivity"&gt;          &lt;Button             android:id="@+id/takePhotoBtn"             android:layout_width="200dp"             android:layout_height="wrap_content"             android:layout_gravity="center_horizontal"             android:text="Take photo" /&gt;          &lt;ImageView             android:id="@+id/takePhotoImg"             android:layout_width="350dp"             android:layout_height="300dp"             android:layout_gravity="center_horizontal"             android:layout_marginTop="20dp"             android:src="@drawable/ic_glovebox_launcher_v2" /&gt;      &lt;/LinearLayout&gt; </code></pre>  <p>Any help appreciated!</p>