<p>For some reason, the Camera.TakePicture method is not getting called in some devices. The pictureCallback is never reached. It works fine on GNexus and S5 but not on Droid Razor and HTC Incredible This is my code: Activity</p>  <pre><code> @Override protected void onResume() {     super.onResume();     if (!isCameraInPreviewMode) {         try {             captureImageButton.setEnabled(true);             CameraConfigurationUtils.open(-1);             disablePreviewMode();             cameraSurfaceView = new CameraSurfaceView(this);             cameraLive.addView(cameraSurfaceView);             captureImageButton.setOnClickListener(new View.OnClickListener() {                @Override                 public void onClick(View v) {                     captureImageButton.setEnabled(false);                     if (mProgressDialog != null) {                         mProgressDialog.setTitle("Please wait");                         mProgressDialog.show();                     }    CameraConfigurationUtils.mCameraInstance.takePicture(null, null, mJPEGPictureCallback);                 }             });         } catch (Exception ex) {             Toast.makeText(this, "Please close all background application and try again", Toast.LENGTH_SHORT).show();             finish();         }     } }  private Camera.PictureCallback mJPEGPictureCallback = new Camera.PictureCallback() {     @Override     public void onPictureTaken(byte[] data, Camera camera) {         CameraConfigurationUtils.releaseCamera();         CameraConfigurationUtils.stopPreview();         Log.e("DEBUG", "THis is picture call back"); }); </code></pre>  <p>SurfaceView:</p>  <pre><code>public class CameraSurfaceView extends SurfaceView implements SurfaceHolder.Callback { private SurfaceHolder mHolder; private Context mContext; private Camera.Parameters parameters; private byte[] mBuffer;  public CameraSurfaceView(Context context) {     super(context);     mContext = context;     mHolder = getHolder();     mHolder.addCallback(this);     mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS); }  public void surfaceCreated(SurfaceHolder holder) {     // The Surface has been created, now tell the camera where to draw the preview.     try {         if (CameraConfigurationUtils.mCameraInstance != null) {             CameraConfigurationUtils.mCameraInstance.setDisplayOrientation(90);             CameraConfigurationUtils.mCameraInstance.setPreviewDisplay(holder);             parameters = CameraConfigurationUtils.mCameraInstance.getParameters();             if (android.os.Build.VERSION.SDK_INT &gt;= 14) {                 CameraConfigurationUtils.setFocus(parameters, true, true, false);             } else {                 CameraConfigurationUtils.setFocus(parameters, true, true, true);             }             WindowManager manager = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);             Display display = manager.getDefaultDisplay();             Point theScreenResolution = new Point();             theScreenResolution.set(display.getHeight(), display.getWidth());             CameraConfigurationUtils.findBestPreviewSizeValue(parameters, theScreenResolution);             CameraConfigurationUtils.findBestPictureSizeValue(parameters,theScreenResolution);             if (parameters.getSupportedPictureFormats().contains(ImageFormat.JPEG)) {                 parameters.setPictureFormat(ImageFormat.JPEG);             }             CameraConfigurationUtils.mCameraInstance.setParameters(parameters);             CameraConfigurationUtils.mCameraInstance.setPreviewCallback(null);             CameraConfigurationUtils.mCameraInstance.setPreviewCallbackWithBuffer(null);             CameraConfigurationUtils.startPreview(mContext);         }     } catch (IOException e) {         e.printStackTrace();         CameraConfigurationUtils.releaseCamera();     }  }  public void surfaceDestroyed(SurfaceHolder holder) {     mHolder.removeCallback(this);  //CameraConfigurationUtils.stopPreview(); }  public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {     if (mHolder.getSurface() == null) {         return;     }     try {         CameraConfigurationUtils.mCameraInstance.setPreviewDisplay(mHolder);         CameraConfigurationUtils.startPreview(mContext);     } catch (Exception e) {         CameraConfigurationUtils.releaseCamera();     } } </code></pre>