<p>Basically I want to create my own custom camera, where I can access my mobile phone's camera remotely to take picture and save it in my system (laptop) through WiFi connection. I have successfully build the application both client and server side , which works pretty good in some smartphones like micromax but it crashes when I tried in other smartphones like samsung, Moto G etc. </p>  <p>This is my client side code ::</p>  <pre><code>import android.annotation.TargetApi; import android.app.Activity; import android.graphics.Bitmap; import android.graphics.BitmapFactory; import android.graphics.Matrix; import android.graphics.PixelFormat; import android.hardware.Camera; import android.os.Bundle; import android.util.Log; import android.view.SurfaceHolder; import android.view.SurfaceView; import android.view.View; import android.view.View.OnClickListener; import android.view.Window; import android.view.WindowManager; import android.widget.ImageView;  public class CameraView extends Activity implements SurfaceHolder.Callback, OnClickListener{         private static final String TAG = "CameraTest";         Camera mCamera;         boolean mPreviewRunning = false;          @SuppressWarnings("deprecation")         public void onCreate(Bundle icicle){             super.onCreate(icicle);             Log.e(TAG, "onCreate");              getWindow().setFormat(PixelFormat.TRANSLUCENT);             requestWindowFeature(Window.FEATURE_NO_TITLE);             getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);             setContentView(R.layout.cameraview);             ImageView img = (ImageView) findViewById(R.id.blankImage);              if(CaptureCameraImage.isBlack)                 img.setBackgroundResource(android.R.color.black);             else                 img.setBackgroundResource(android.R.color.white);              mSurfaceView = (SurfaceView) findViewById(R.id.surface_camera);             mSurfaceView.setOnClickListener(this);             mSurfaceHolder = mSurfaceView.getHolder();             mSurfaceHolder.addCallback(this);             mSurfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);          }          @Override         protected void onRestoreInstanceState(Bundle savedInstanceState){             super.onRestoreInstanceState(savedInstanceState);         }           Camera.PictureCallback mPictureCallback = new Camera.PictureCallback() {              public void onPictureTaken(byte[] data, Camera camera) {                 // TODO Auto-generated method stub                 if (data != null)                 {                      mCamera.stopPreview();                     mPreviewRunning = false;                     mCamera.release();                       try{                          BitmapFactory.Options opts = new BitmapFactory.Options();                          Bitmap bitmap= BitmapFactory.decodeByteArray(data, 0, data.length,opts);                          bitmap = Bitmap.createScaledBitmap(bitmap, 300, 300, false);                          int width = bitmap.getWidth();                          int height = bitmap.getHeight();                          int newWidth = 300;                          int newHeight = 300;                           // calculate the scale - in this case = 0.4f                          float scaleWidth = ((float) newWidth) / width;                          float scaleHeight = ((float) newHeight) / height;                           // createa matrix for the manipulation                          Matrix matrix = new Matrix();                          // resize the bit map                          matrix.postScale(scaleWidth, scaleHeight);                          // rotate the Bitmap                          matrix.postRotate(-90);                          Bitmap resizedBitmap = Bitmap.createBitmap(bitmap, 0, 0,                                  width, height, matrix, true);                          CaptureImage.image.setImageBitmap(resizedBitmap);                       }catch(Exception e){                          e.printStackTrace();                      }                     //StoreByteImage(mContext, imageData, 50,"ImageName");                     //setResult(FOTO_MODE, mIntent);                     setResult(585);                     finish();                 }                    }         };          protected void onResume(){             Log.e(TAG, "onResume");             super.onResume();         }          protected void onSaveInstanceState(Bundle outState){             super.onSaveInstanceState(outState);         }          protected void onStop(){             Log.e(TAG, "onStop");             super.onStop();         }          @TargetApi(9)         public void surfaceCreated(SurfaceHolder holder){             Log.e(TAG, "surfaceCreated");             mCamera = Camera.open(CaptureImage.cameraID);         }          public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {             Log.e(TAG, "surfaceChanged");              // XXX stopPreview() will crash if preview is not running             if (mPreviewRunning){                 mCamera.stopPreview();             }              Camera.Parameters p = mCamera.getParameters();             p.setPreviewSize(300, 300);              if(CaptureImage.cameraID == 0){                 String stringFlashMode = p.getFlashMode();                 if (stringFlashMode.equals("torch"))                         p.setFlashMode("on"); // Light is set off, flash is set to normal 'on' mode                 else                         p.setFlashMode("torch");             }              mCamera.setParameters(p);             try{                 mCamera.setPreviewDisplay(holder);             }catch (Exception e){                 // TODO Auto-generated catch block                 e.printStackTrace();             }             mCamera.startPreview();             mPreviewRunning = true;             mCamera.takePicture(null, mPictureCallback, mPictureCallback);         }          public void surfaceDestroyed(SurfaceHolder holder) {             Log.e(TAG, "surfaceDestroyed");             //mCamera.stopPreview();             //mPreviewRunning = false;             //mCamera.release();         }          private SurfaceView mSurfaceView;         private SurfaceHolder mSurfaceHolder;          public void onClick(View v) {             // TODO Auto-generated method stub             mCamera.takePicture(null, mPictureCallback, mPictureCallback);         }      } </code></pre>  <p>This are my permissions ::</p>  <blockquote> <pre><code>   &lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"     package="com.example.cameraApp"     android:versionCode="1"     android:versionName="1.0" &gt;      &lt;uses-sdk         android:minSdkVersion="8"         android:targetSdkVersion="18" /&gt;   &lt;uses-feature android:name="android.hardware.camera" android:required="false" /&gt; &lt;uses-feature android:name="android.hardware.camera.flash" android:required="false" /&gt; &lt;uses-feature android:name="android.hardware.camera.autofocus" /&gt;       &lt;uses-permission android:name="android.permission.FLASHLIGHT"/&gt;     &lt;uses-permission android:name="android.permission.CAMERA" /&gt;       &lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/&gt;     &lt;uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/&gt;     &lt;uses-permission android:name="android.permission.INTERNET"/&gt;     &lt;uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/&gt;     &lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/&gt;     &lt;uses-permission android:name="android.permission.CHANGE_WIFI_STATE"/&gt;     &lt;uses-permission android:name="android.permission.CHANGE_NETWORK_STATE"/&gt;     &lt;uses-permission android:name="android.permission.READ_PHONE_STATE"/&gt;         &lt;application         android:allowBackup="true"         android:icon="@drawable/ic_launcher"         android:label="@string/app_name"         android:theme="@style/AppTheme" &gt;         &lt;activity             android:name="com.example.cameraApp.MainActivity"             android:label="@string/app_name" &gt;             &lt;intent-filter&gt;                 &lt;action android:name="android.intent.action.MAIN" /&gt;                  &lt;category android:name="android.intent.category.LAUNCHER" /&gt;             &lt;/intent-filter&gt;         &lt;/activity&gt;         &lt;activity android:name="CapturePicture"&gt;&lt;/activity&gt;         &lt;activity android:name="CameraView"&gt;&lt;/activity&gt;     &lt;/application&gt;  &lt;/manifest&gt; </code></pre> </blockquote>