<p>I have made my own custom camera. This gives me bad pixelated image, I don't know why. I ma using JPEG compressing with 100 quality. And this is the Image I get <a href="http://imgur.com/RydT0No" rel="nofollow">Camera picture</a></p>  <p>This is my code:</p>  <pre><code>public class CameraSurfaceView extends SurfaceView implements SurfaceHolder.Callback { private SurfaceHolder mHolder; private Context mContext; private Camera.Parameters parameters; private byte[] mBuffer;  public CameraSurfaceView(Context context) {     super(context);     mContext = context;     mHolder = getHolder();     mHolder.addCallback(this);     mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS); }  public void surfaceCreated(SurfaceHolder holder) {     // The Surface has been created, now tell the camera where to draw the preview.     try {         if (CameraConfigurationUtils.mCameraInstance != null) {             CameraConfigurationUtils.mCameraInstance.setDisplayOrientation(90);             CameraConfigurationUtils.mCameraInstance.setPreviewDisplay(holder);             parameters = CameraConfigurationUtils.mCameraInstance.getParameters();             if (android.os.Build.VERSION.SDK_INT &gt;= 14) {                 CameraConfigurationUtils.setFocus(parameters, true, true, false);             } else {                 CameraConfigurationUtils.setFocus(parameters, true, true, true);             }             WindowManager manager = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);             Display display = manager.getDefaultDisplay();             Point theScreenResolution = new Point();             theScreenResolution.set(display.getHeight(), display.getWidth());             CameraConfigurationUtils.findBestPreviewSizeValue(parameters, theScreenResolution);             CameraConfigurationUtils.mCameraInstance.setParameters(parameters);             updateBufferSize();             CameraConfigurationUtils.mCameraInstance.addCallbackBuffer(mBuffer);             CameraConfigurationUtils.mCameraInstance.setPreviewCallbackWithBuffer(new Camera.PreviewCallback() {                 public synchronized void onPreviewFrame(byte[] data, Camera c) {                     if (CameraConfigurationUtils.mCameraInstance != null) {                         CameraConfigurationUtils.mCameraInstance.addCallbackBuffer(mBuffer);                     }                 }             });             CameraConfigurationUtils.startPreview(mContext);         }     } catch (IOException e) {         e.printStackTrace();         CameraConfigurationUtils.releaseCamera();     }  }  public void surfaceDestroyed(SurfaceHolder holder) {     mHolder.removeCallback(this);     CameraConfigurationUtils.stopPreview(); }  public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {     if (mHolder.getSurface() == null) {         return;     }     try {         CameraConfigurationUtils.mCameraInstance.setPreviewDisplay(mHolder);         CameraConfigurationUtils.startPreview(mContext);     } catch (Exception e) {         CameraConfigurationUtils.releaseCamera();     } }  public byte[] getPic(int x, int y, int width, int height) {     System.gc();     Camera.Size s = parameters.getPreviewSize();     YuvImage yuvimage = new YuvImage(mBuffer, ImageFormat.NV21, s.width, s.height, null);     ByteArrayOutputStream outStream = new ByteArrayOutputStream();     yuvimage.compressToJpeg(new Rect(x, y, width, height), 100, outStream); // make JPG      yuvimage = null;     System.gc();     return outStream.toByteArray(); }  private void updateBufferSize() {     mBuffer = null;     System.gc();     // prepare a buffer for copying preview data to     int h = parameters.getPreviewSize().height;     int w = parameters.getPreviewSize().width;     int bitsPerPixel = ImageFormat.getBitsPerPixel(parameters.getPreviewFormat());     mBuffer = new byte[w * h * bitsPerPixel / 8];     //Log.i("surfaceCreated", "buffer length is " + mBuffer.length + " bytes"); } </code></pre>  <p>}</p>  <p>What am i doing wrong ?</p>