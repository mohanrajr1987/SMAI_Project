<p>The following use case:</p>  <p>I have a numpy matrix/array with a few thousand 2d points. Call it A. Eg:     [1 2]     [300 400]     ..     [123 242]</p>  <p>I also have another numpy matrix with a few 2d points as above. Call it B. </p>  <p>Basically, I want to iterate through A, then iterate through B and compute the distance between A[i] and B[j]. Then assign that back to another array. I could do it like this:</p>  <pre><code>for i, (x0, x1) in enumerate(zip(A[:,0],A[:,1])):     weight_distance = 0     for j, (p0, p1) in enumerate(zip(A[:,0],A[:,1])):         weight_distance = weight_distance + distance((p0,p1),(x0,x1))     weight_array[i] = weight_distance </code></pre>  <p>But this is too slow. What might be a numpy way to approach this?</p>