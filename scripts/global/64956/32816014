<p>In my application I have a list view with edit text ,when I enter different values in edit text in each list item and when i pass the value to next activity on button click the list item values are shown correctly but edit text value is not correct its shows only the last value for all the edit text please  help me to fix it here is my code.</p>  <p>my button on clcik code is here </p>  <pre><code>order.setOnClickListener(new View.OnClickListener() {                  @Override                 public void onClick(View v) {                    /* SparseBooleanArray checked = lv.getCheckedItemPositions();                     for (int i = 0; i &lt; checked.size(); i++) {                         if (checked.valueAt(i)) {                             int pos = checked.keyAt(i);                             Object o = lv.getAdapter().getItem(pos);                             Log.e("checked",""+checked);                         }                     }*/                     StringBuilder checkedcontacts = new StringBuilder();                     System.out.println(".............." + adapter.mCheckStates.size());                     for (int i = 0; i &lt; tabletlist.size(); i++)                      {                         if (adapter.mCheckStates.get(i) == true) {                               checkedcontacts.append(tabletlist.get(i).get(TAG_TABLET).toString());                             checkedcontacts.append("   ");                          // checkedcontacts.append(tabletlist.get(i).get(TAG_CONTAINS).toString());                             checkedcontacts.append(edit);                             Log.e("editcheck",""+edit);                              checkedcontacts.append("\n");                             String builderstring = checkedcontacts.toString().replace("{", "").replace("}", "");                              Log.e("checkbuild", "" + mCheckStates);                            // Toast.makeText(TabletList.this, checkedcontacts, Toast.LENGTH_SHORT).show();                             Log.e("checkvalue", "" + checkedcontacts);                               Bundle bundle = new Bundle();                             //Add your data from getFactualResults method to bundle                             bundle.putString("VENUE_NAME", builderstring);                             //Add the bundle to the intent                             Intent j = new Intent(getApplicationContext(), OrderConform.class);                             j.putExtras(bundle);                             startActivity(j);                          } else {                             System.out.println("..Not Checked......" + tabletlist.get(i).toString());                         }                      }                  }               });   Here is my Base adapter code        class TabletAdapter extends BaseAdapter                  {                     SparseBooleanArray mCheckStates;                     CheckBox cb;                     Context context;                     LayoutInflater inflater;                     ArrayList&lt;HashMap&lt;String, String&gt;&gt; data;                     HashMap&lt;String, String&gt; display = new HashMap&lt;String, String&gt;();                     String Tablet;                     String Contains;                     String Cost;                     String Manufacture;                      String Unit;                     {                         mCheckStates = new SparseBooleanArray(tabletlist.size());                         inflater = (LayoutInflater)TabletList.this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);                     }                      private HashMap&lt;String, String&gt; textValues = new HashMap&lt;String, String&gt;();                     public TabletAdapter(Context context, ArrayList&lt;HashMap&lt;String, String&gt;&gt; arraylist) {                         this.context = context;                         data = arraylist;                       }                      @Override                     public int getCount() {                         return data.size();                     }                      @Override                     public Object getItem(int position) {                         return position;                     }                      @Override                     public long getItemId(int position) {                         return position;                     }                      @Override                     public View getView(int position, View convertView, ViewGroup parent) {                         TextView tablet;                         TextView manufacture;                         TextView contain;                         TextView cost;                         final EditText unitnum;                         inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);                       //  boolean convertViewWasNull = false;                           View itemView = inflater.inflate(R.layout.custom_list, parent, false);                           display = data.get(position);                          unitnum=(EditText)itemView.findViewById(R.id.unit);                         unitnum.setFocusableInTouchMode(true);                          tablet = (TextView)itemView.findViewById(R.id.Tabletname);                         manufacture = (TextView) itemView.findViewById(R.id.Manufacture);                         contain = (TextView) itemView.findViewById(R.id.Contains);                         cost = (TextView) itemView.findViewById(R.id.Cost);                           tablet.setText(display.get(TabletList.TAG_TABLET));                         manufacture.setText(display.get(TabletList.TAG_MANUFACTURE));                         contain.setText(display.get(TabletList.TAG_CONTAINS));                         cost.setText(display.get(TabletList.TAG_COST));                         cb = (CheckBox) itemView.findViewById(R.id.checkBox);                         cb.setTag(position);                         cb.setChecked(mCheckStates.get(position, false));                         cb.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {                             @Override                             public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                                 if (isChecked) {                                     //if it is check                                     unitnum.setVisibility(View.VISIBLE);                                  } else {                                     unitnum.setVisibility(View.GONE);                                 }                                 mCheckStates.put((Integer) buttonView.getTag(), isChecked);                             }                         });                          unitnum.addTextChangedListener(new TextWatcher() {                             @Override                             public void beforeTextChanged(CharSequence s, int start, int count, int after) {                              }                              @Override                             public void onTextChanged(CharSequence s, int start, int before, int count) {                                 edit=unitnum.getText().toString();                              }                              @Override                             public void afterTextChanged(Editable s) {                             }                         });                         return itemView;                      }                       public boolean isChecked(int position) {                         return mCheckStates.get(position, false);                     }                      public void setChecked(int position, boolean isChecked) {                         mCheckStates.put(position, isChecked);                         System.out.println("hello...........");                         notifyDataSetChanged();                     }                      public void toggle(int position) {                         setChecked(position, !isChecked(position));                     }                   /*  @Override                     public void onCheckedChanged(CompoundButton buttonView,                                                  boolean isChecked) {                         // TODO Auto-generated method stub                        }*/                  } </code></pre>