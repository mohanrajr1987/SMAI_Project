<p>I have a <code>Grid RecyclerView</code> (3 column) and I added a delegate click listener inside <code>OnBindViewHolder</code> method. </p>  <p><strong>Scenario (Log attached)</strong></p>  <p>Let say I have 18 items, which is 6 rows. By default without any scrolling, I can only see 2.5 rows. </p>  <p>When I click the item (position 0-8), the delegate function get invoked only once (Attempt 1 ~ 2).</p>  <p>When I scroll to the end of the page, and I click one of the item, the delegate function get invoked once (Attempt 3).</p>  <p>And if I scroll back up, and click one of the item the delegate function get invoked 4 times (Attempt 4).</p>  <p>In my (Attempt 5), I scroll it to the bottom and clicked an item, this time, the delegate function get invoked twice.</p>  <p>Note:</p>  <ul> <li>I am using <code>Xamarin.Android</code></li> <li>I only clicked those item once</li> <li>I have tested with multiple device and getting the same result</li> <li>The number of delegate function invoked is not fixed, sometimes might invoked up to 6 times per click.</li> </ul>  <blockquote>   <p>My question is why is this happen and is there any other proper way to implement this?</p> </blockquote>  <p><strong>Log</strong></p>  <pre><code>// Attempt 1 : (I clicked position 1) [[Log ==== ]] [Time : 9/12/2015 10:36:44 AM ] Clicked position [1] // Attempt 2 : (I clicked position 3) [[Log ==== ]] [Time : 9/12/2015 10:36:52 AM ] Clicked position [3] // Attempt 3 : (I scroll it till the end of the page and clicked position 14) [[Log ==== ]] [Time : 9/12/2015 10:36:52 AM ] Clicked position [14] // Attempt 4 : (I scroll it back to the top and clicked position 1) [[Log ==== ]] [Time : 9/12/2015 10:40:08 AM ] Clicked position [4] [[Log ==== ]] [Time : 9/12/2015 10:40:08 AM ] Clicked position [15] [[Log ==== ]] [Time : 9/12/2015 10:40:08 AM ] Clicked position [5] [[Log ==== ]] [Time : 9/12/2015 10:40:08 AM ] Clicked position [16] [[Log ==== ]] [Time : 9/12/2015 10:40:08 AM ] Clicked position [1] // Attempt 5 : (I scroll it down again and clicked position 14) [[Log ==== ]] [Time : 9/12/2015 10:41:57 AM ] Clicked position [11] [[Log ==== ]] [Time : 9/12/2015 10:41:57 AM ] Clicked position [14] </code></pre>  <p><strong>Activity</strong></p>  <pre><code>[Activity (Label = "DrinksMenuCategory", Theme = "@style/AppTheme.ActionBar")]           public class DrinksMenuCategory : AppCompatActivity {     private RecyclerView mRecyclerView;     private RecyclerView.LayoutManager mLayoutManager;     private RecyclerView.Adapter mAdapter;      private int selected_drinksCategory;     private List&lt;Drinks&gt; drinksCategory;      protected override void OnCreate (Bundle bundle)     {         base.OnCreate (bundle);         SetContentView (Resource.Layout.Activity_DrinksMenuCategoryGridview);         SupportActionBar.SetDisplayHomeAsUpEnabled (true);          mRecyclerView = FindViewById&lt;RecyclerView&gt; (Resource.Id.recyclerView_drinksMenuCategoryGridView);         mRecyclerView.HasFixedSize = true;          mLayoutManager = new GridLayoutManager (this, 3);         mRecyclerView.SetLayoutManager (mLayoutManager);         mAdapter = new DrinksMenuCategoryRecyclerAdapter (drinksCategory, mRecyclerView);         mRecyclerView.SetAdapter (mAdapter);     } } </code></pre>  <p><strong>Adapter &amp; ViewHolder</strong></p>  <pre><code>public class DrinksMenuCategoryRecyclerAdapter : RecyclerView.Adapter {     public List&lt;Drinks&gt; mDrinksItems;     public RecyclerView mRecyclerView;      public DrinksMenuCategoryRecyclerAdapter (List&lt;Drinks&gt; drinksItems, RecyclerView mRecyclerView)     {         this.mDrinksItems = drinksItems;         this.mRecyclerView = mRecyclerView;     }      public override int GetItemViewType (int position)     {         return Resource.Layout.recyclerView_cell_drinksMenu_category;     }      public override RecyclerView.ViewHolder OnCreateViewHolder (ViewGroup parent, int viewType)     {         View row = LayoutInflater             .From (parent.Context)             .Inflate (Resource.Layout.recyclerView_cell_drinksMenu_category, parent, false);          CardView v_drinksCard = row.FindViewById&lt;CardView&gt; (Resource.Id.drinks_card);         ImageView v_drinksImage = row.FindViewById&lt;ImageView&gt; (Resource.Id.drinks_image);         TextView v_drinksText = row.FindViewById&lt;TextView&gt; (Resource.Id.drinks_text);          DrinksMenuItemHolder viewHolder = new DrinksMenuItemHolder (row, parent.Context) {             mDrinksCard = v_drinksCard,             mDrinksImage = v_drinksImage,             mDrinksText = v_drinksText         };          return viewHolder;     }      public override void OnBindViewHolder (RecyclerView.ViewHolder holder, int position)     {         DrinksMenuItemHolder viewHolder = holder as DrinksMenuItemHolder;         viewHolder.mDrinksCard.Click += delegate {             // *** Click Event ***             Log.Debug ("[DrinksMenuCategoryRecyclerAdapter ==== ]", "[Time : " + DateTime.Now + " ] Clicked position [" + position + "]");             Toast.MakeText (viewHolder.context, "[Time : " + DateTime.Now + " ] Clicked position [" + position + "]", ToastLength.Short).Show ();          };         viewHolder.mDrinksText.Text = mDrinksItems[position].name;     }      public override int ItemCount {         get { return mDrinksItems.Count; }     }      public class DrinksMenuItemHolder : RecyclerView.ViewHolder     {         public Context context { get; set; }         public View mMainView { get; set; }          public CardView mDrinksCard { get; set; }         public ImageView mDrinksImage { get; set; }         public TextView mDrinksText { get; set; }          public DrinksMenuItemHolder (View view, Context context) : base (view)         {             this.context = context;             mMainView = view;         }     } } </code></pre>