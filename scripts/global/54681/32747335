<p>I need help as mentioned in the title.</p>  <p>I have a timer routine that will update the text of a label. It's a decode text effect, but it doesn't seem to update when the timer routine is executed. I am using C#.</p>  <p>MainActivity.cs</p>  <pre><code>using System; using Android.App; using Android.Content; using Android.Runtime; using Android.Views; using Android.Widget; using Android.OS; using System.Text; using System.Timers; using System.Linq;  namespace ValidateCreditCardNumber_Android {     [Activity (Label = "ValidateCreditCardNumber_Android", MainLauncher = true, Icon = "@drawable/icon")]     public class MainActivity : Activity     {         EditText editText;         DecodeTextView resultLabel;          protected override void OnCreate (Bundle bundle)         {             base.OnCreate (bundle);              // Set our view from the "main" layout resource             SetContentView (Resource.Layout.Main);              editText = FindViewById&lt;EditText&gt; (Resource.Id.editText);             Button validateButton = FindViewById&lt;Button&gt; (Resource.Id.validateButton);             resultLabel = FindViewById&lt;DecodeTextView&gt; (Resource.Id.resultLabel);              editText.KeyListener = Android.Text.Method.DigitsKeyListener.GetInstance("0123456789" + System.Globalization.CultureInfo.CurrentCulture.NumberFormat.CurrencyDecimalDigits);              validateButton.Click += OnNumberEntryCompleted;         }          void OnNumberEntryCompleted(object sender, EventArgs args)         {             var entry = editText;             var resultText = "";              if (Mod10Check (entry.Text)) { //              resultLabel.SetTextColor(Android.Graphics.Color.White);                 resultText = "__VALID NUMBER";             } else {                 resultText = "INVALID NUMBER";             }  //          entry.Enabled = false; //          resultLabel.AnimateText (true, resultText, 10);             RunOnUiThread(() =&gt; resultLabel.AnimateText (true, resultText, 10));         }          public static bool Mod10Check(string creditCardNumber)         {             // Check whether input string is null or empty.             if (string.IsNullOrEmpty(creditCardNumber)) {                 return false;             }              char[] charArray = creditCardNumber.ToCharArray();              // 1. Starting with the check digit double the value of every other digit              // 2. If doubling of a number results in a two digits number, add up.             //    the digits to get a single digit number. This will results in eight single digit numbers.             // 3. Get the sum of the digits.             int sumOfDigits = charArray.Where((e) =&gt; e &gt;= '0' &amp;&amp; e &lt;= '9')                 .Reverse()                 .Select((e, i) =&gt; ((int)e - 48) * (i % 2 == 0 ? 1 : 2))                 .Sum((e) =&gt; e / 10 + e % 10);               // If the final sum is divisible by 10, then the credit card number.             // is valid. If it is not divisible by 10, the number is invalid.                         return sumOfDigits % 10 == 0;         }     } } </code></pre>  <p>DecodeTextView.cs</p>  <pre><code>using System; using System.Text; using System.Timers; //using Android.Runtime; using Android.Content; using Android.Util;  namespace ValidateCreditCardNumber_Android {     public class DecodeTextView : Android.Widget.TextView     {         private readonly Timer _timerAnimate = new Timer();         private TextDecodeEffect _decodeEffect;         private bool _showing;         private int _initGenCount;          public int Interval         {             get { return (int)_timerAnimate.Interval; }             set { _timerAnimate.Interval = value; }         }  //      protected DecodeTextView(IntPtr javaReference, JniHandleOwnership transfer) : base(javaReference, transfer)         public DecodeTextView(Context c, IAttributeSet args) : base(c, args)         {             _timerAnimate.Interval = 100;             _timerAnimate.Elapsed += _timerAnimate_Tick;         }          public void AnimateText(bool show, string text, int initGenCount)         {             _initGenCount = initGenCount;             _decodeEffect = new TextDecodeEffect(text) { TextVisible = !show };             Text = _decodeEffect.Peek (DecodeMode.None);             _showing = show;             _timerAnimate.Start ();         }          private void _timerAnimate_Tick(object sender, EventArgs e)         {             if (_initGenCount != 0) {                 Text = _decodeEffect.GenerateNumberRange (Text.Length);                 _initGenCount--;                 return;             }              var decodeMode = _showing ? DecodeMode.Show : DecodeMode.Hide;             var text = _decodeEffect.Peek (decodeMode);              if (text == null) {                 _timerAnimate.Stop ();             } else {                 Text = text;             }         }     }      public enum DecodeMode     {         None,         Show,         Numbers,         Hide     }      class TextDecodeEffect     {         private int _visibleCount;         private readonly Random _random = new Random ();          public bool TextVisible         {             get { return _visibleCount == OriginalText.Length; }             set { _visibleCount = value ? OriginalText.Length : 0; }         }          public string OriginalText { get; private set; }          public TextDecodeEffect(string text)         {             OriginalText = text;         }          public string Peek(DecodeMode mode)         {             switch (mode) {             case DecodeMode.Numbers:                 return GenerateNumberRange (OriginalText.Length);             case DecodeMode.Hide:                 if (_visibleCount == 0)                     return null;                  _visibleCount--;                 break;             case DecodeMode.Show:                 if (_visibleCount == OriginalText.Length)                     return null;                  _visibleCount++;                 break;             }              var text = GenerateNumberRange (OriginalText.Length - _visibleCount);              text += OriginalText.Substring (OriginalText.Length - _visibleCount, _visibleCount);              return text;         }          public string GenerateNumberRange(int count)         {             var SB = new StringBuilder ();              for (int i = 0; i &lt; count; i++)                 SB.Append(_random.Next(0, 10));              return SB.ToString();         }     } } </code></pre>  <p><a href="https://github.com/jonathanzuniga/ValidateCreditCardNumber_Android" rel="nofollow">Here you can found the project</a></p>  <p>Please help me to fix this problem :( thank you.</p>