<p>Okay, so, one of our web apps has a bi-directional net.tcp WCF service that it self-hosts and uses to communicate with another Windows service to do service-y things, and I'm trying to add an HTTPS-based service to it to be consumed by something else, which I've added using an MVC ServiceRoute, as below:</p>  <pre><code>            routes.Add(new ServiceRoute("integration",             new ServiceHostFactory(),             typeof(IntegrationService))); </code></pre>  <p>And that works fine for communicating with <em>it</em>, but when the self-hosted TCP service starts up later in App_Start, I get this:</p>  <pre><code>System.InvalidOperationException: Could not find a base address that matches scheme net.tcp for the endpoint with binding NetTcpBinding. Registered base address schemes are []. </code></pre>  <p>The TCP service has base addresses defined in its configuration like so:</p>  <pre><code>    &lt;service name="Name" behaviorConfiguration="ServiceBehavior"&gt;   &lt;endpoint address="" contract="Contract" binding="netTcpBinding" bindingConfiguration="BindingConfiguration"&gt;     &lt;identity&gt;       &lt;dns value="localhost" /&gt;     &lt;/identity&gt;   &lt;/endpoint&gt;   &lt;host&gt;     &lt;baseAddresses&gt;       &lt;add baseAddress="net.tcp://localhost:8700/ImportService"/&gt;     &lt;/baseAddresses&gt;   &lt;/host&gt; &lt;/service&gt; </code></pre>  <p>..and it works if you remove the ServiceRoute registration, which has me wondering if the whole request pipeline changes somehow when you do it. This seems odd as I'd expect self-hosting to do its own thing completely separate from the hosting container (ie: IIS), but that doesn't seem to be the case once I register a ServiceRoute.</p>  <p>I'm kind of at a loss. I'm considering dropping HTTPS and going making this new service TCP-based with some SslStream mixed in, but since the application is hosted in IIS, that would lose some benefits (like easy SSL setup and automatic activation when requests come in), and I can't remove the existing TCP service <em>yet</em> because the current programming model requires it to be bi-directional (although we're looking at phasing that out in the future, at which point converting it would be an option.)</p>  <p>Suggestions/thoughts/questions?</p>