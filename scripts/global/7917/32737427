<p>Based on <a href="http://matplotlib.org/examples/widgets/slider_demo.html" rel="nofollow">this</a> and <a href="http://stackoverflow.com/questions/11069944/add-slider-to-matplotlib-chart">that</a> examples, I am trying to add sliders to a figure dynamically (in function of the object that is plotted).</p>  <p>The sliders are created and added inside a for-loop, and a new <code>update()</code> function is created every time.</p>  <p>Problems: The sliders do not respond to any mouse inputs!</p>  <p>Any idea how to solve this?</p>  <p><a href="http://i.stack.imgur.com/v57rZ.png" rel="nofollow"><img src="http://i.stack.imgur.com/v57rZ.png" alt="graph"></a></p>  <pre><code>import numpy as np from matplotlib import pyplot as plt from matplotlib.widgets import Slider  class Plotter:     def __init__(self):         self.fig, self.ax = plt.subplots()      def plot(self, obj):         self.obj = obj         self.l = plt.plot(obj.t,obj.series())         vars = obj.get_variables()         plt.subplots_adjust(bottom=0.03*(len(vars)+2))         for i,var in enumerate(vars):             self.add_slider(i*0.03, var[0], var[1], var[2])         plt.show()      def add_slider(self, pos, name, min, max):         ax = plt.axes([0.1, 0.02+pos, 0.8, 0.02], axisbg='lightgoldenrodyellow')         slider = Slider(ax, name, min, max, valinit=getattr(self.obj, name))         def update(val):             setattr(self.obj, name, val)             self.l.set_ydata(self.obj.series())             self.fig.canvas.draw_idle()         slider.on_changed(update)  class SinFunction:     def __init__(self):         self.freq = 1.0         self.amp = 0.5         self.t = np.arange(0.0, 1.0, 0.001)      def series(self):         return self.amp*np.sin(2*np.pi*self.freq*self.t)      def get_variables(self):         return [             ('freq', 0.1, 10),             ('amp', 0.1, 1)         ]  Plotter().plot(SinFunction()) </code></pre>