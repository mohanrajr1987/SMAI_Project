<p>I'm writing an app in Laravel using the repository pattern. The main idea is  to write one repository that will handle 2 models based on route parameters.</p>  <p>So my <code>routes.php</code> looks like this:</p>    <p><strong>Routes.PHP</strong></p>  <pre class="lang-php prettyprint-override"><code>&lt;?php $api = app('Dingo\Api\Routing\Router');   $api-&gt;version('v1', function ($api) {     $api-&gt;post('create/{type}', ['uses' =&gt; 'Beyondi\Account\Http\Controllers\AccountController@insert']);  }); </code></pre>  <p><strong>AccountController.php</strong></p>  <pre class="lang-php prettyprint-override"><code>class AccountController extends Controller {      /**      * Generate JSON Web Token.      */     protected $account;      public function __construct(TypeRepositoryInterface $user)     {         $this-&gt;account = $user;     }       public function insert(AccountRequest $request)     {         if($this-&gt;account-&gt;create($request-&gt;input()))         {             return $this-&gt;response-&gt;array("User inserted")-&gt;setStatusCode(200);         }else         {             return $this-&gt;response-&gt;array("Error, user not inserted")-&gt;setStatusCode(500);         }     } </code></pre>  <p><strong>AccountRequest.php</strong></p>  <pre class="lang-php prettyprint-override"><code>class AccountRequest extends Request {     public function __construct(FormRequest $request)     {          if ($request-&gt;route('type')=='consumer')         {             $rules=[                 'looking_for' =&gt; 'required|in:male,female,trans',                 'photo' =&gt; 'required',                 'newsletter' =&gt; 'boolean|required'             ];             $this-&gt;rules($rules);         }else         {             $rules=[                 'type' =&gt; 'required|in:private,agency',                 'sexuality' =&gt; 'required|in:hetero,bi,homo',                 'height' =&gt; 'required|numeric'             ];             $this-&gt;rules($rules);          }     }      public function rules($rules)     {          return [$rules];     }      public function authorize()             {                 return true;             }         } </code></pre>  <p><strong>TypeRepositoryInterface.php</strong></p>  <pre class="lang-php prettyprint-override"><code>interface TypeRepositoryInterface {     public function create(array $data);      public function update($id, array $data);      public function delete($id);      public function getAll(array $columns = ['*']);      public function findById($id, $columns = ['*']);  } </code></pre>  <p><strong>AbstractRepository.php</strong></p>  <pre class="lang-php prettyprint-override"><code>abstract class AbstractRepository implements AbstractRepositoryInterface {     protected $model;      /**      * Create new repository interface      *      * @param Model $model      */     public function __construct(Model $model)     {         $this-&gt;model = $model;     }      /**      * Get new instance of model      *      * @param array $attributes      * @return static      */     public function getNew(array $attributes = [])     {         return $this-&gt;model-&gt;newInstance($attributes);     }      /**      * Insert new data in database      *      * @param array $data      * @return static      */     public function create(array $data)     {         return $this-&gt;model-&gt;create($data);     }      /**      * Update data in database      *      * @param $id      * @param array $data      * @return mixed      */     public function update($id, array $data)     {         return $this-&gt;model-&gt;whereId($id)-&gt;update($data);     }      /**      * Delete data from database      *      * @param $id      * @return bool|null      * @throws \Exception      */     public function delete($id)     {         return $this-&gt;model-&gt;delete($id);     }      /**      * Get all data from database      *      * @param array $columns      * @return \Illuminate\Database\Eloquent\Collection|static[]      */     public function getAll(array $columns = ['*'])     {         return $this-&gt;model-&gt;all($columns);     }      /**      * Find data by id      *      * @param $id      * @param array $columns      * @return \Illuminate\Support\Collection|null|static      */     public function findById($id, $columns = ['*'])     {         return $this-&gt;model-&gt;find($id, $columns);     }   } </code></pre>  <p><strong>TypeRepository.php</strong></p>  <pre class="lang-php prettyprint-override"><code>class TypeRepository extends AbstractRepository implements TypeRepositoryInterface {     protected $model;      /**      * Create new repository interface      *      * @param Model $model      */     public function __construct(ProviderModel $providerModel,ConsumerModel $consumerModel,Request $request, $type)     {         if ($request-&gt;route('type')=='consumer')         {             $this-&gt;model = $consumerModel;         }else         {             $this-&gt;model = $providerModel;         }      }   } </code></pre>  <p>As you can see I am trying to switch between 2 models in my <code>TypeRepository</code> based on route <code>{type}</code> parameter. However I get </p>  <pre class="lang-php prettyprint-override"><code>Unresolvable dependency resolving [Parameter #3 [ &lt;required&gt; $type ]] in class Account\\Repositories\\Type\\Eloquent\\TypeRepository </code></pre>  <p>error. What am I missing? How to do it correctly?</p>