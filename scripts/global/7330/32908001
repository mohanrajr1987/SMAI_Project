<p>I have come up with a terrible situation, and in general I think I am missing many things in fully understanding git concepts:</p>  <p>We are using git, to share our project between 3 co-workers. 2 of us (A and B) are in the same commit state (our master branch is up to date with origin/master), which happens to be also the latest one, while the 3rd one (C) is in a really old commit state.</p>  <p>In C guy's <code>git status</code>, there are "Changes to be committed"(10), Changed but not updated(>40) and Untracked files(12), which <strong>we don't want to lose</strong>. As you can imagine, C guy was not a "pushing fan".</p>  <p>Particularly in our case, the best choice would be to keep all the changes made by C. If I am not mistaken simple push from C's machine would create a new branch</p>  <p>So I was thinking of a way to push all changes from C to origin/master and then A and B guys will pull this commit.</p>  <p>So the question is, what git commands do I need to do this?</p>