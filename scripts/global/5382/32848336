<p>I am working on an application that uses both relationnal and graph databases (sqlite and neo4j). I am trying to see if I can't get rid of sqlite to use only neo4j, and I am confronted to a problem of redundancy.</p>  <p>Let say I have nodes that represent audio tracks. I want to store of what musical genre each track is. With hundreds of thousands of nodes, I don't think repeating <em>"South-African Psytrance"</em> as a string property is a good idea, and I am pretty sure that creating a <em>"South-African Psytrance"</em> node and linking it to all concerned nodes is an even worse idea (bottleneck?).</p>  <p>Am I right if I say that using <strong>1) properties</strong> takes too much space, and using <strong>2) relationships</strong> is a bad design for this particular problem?</p>  <p>The current code uses the sqlite db to store a set of musical genres, and their indexes as properties in nodes (which are converted to their string representation in the application layer).</p>  <p>Is there a way to use only neo4j and avoid bottlenecks and redundancy?</p>