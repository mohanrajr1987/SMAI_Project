<p>I'm wondering if there is a function within igraph to calculate connection probabilities among vertices in a weighted graph, where the weights for the edges are probabilities of connection of the adjacent vertices.</p>  <p>I've built a graph based on such an adjacency matrix where adjacent connection probabilities form the weights (this is for a river network so each node of the graph is only connected to a single downstream node). </p>  <p>I had hoped to use something like the <code>shortest.paths</code> function in igraph but that sums the weights rather than calculates the product of them and I can't work out a way to change that. </p>  <p>The example below shows how I construct the adjacency matrix from the data I have, which is the probability that the vertex is connected to its downstream vertex (ProbConn) and then the identity of the downstream vertex (downstream).  The most downstream vertex is the river mouth so it is connected to no other (hence the vector called downstream begins with NA).</p>  <pre><code>library(igraph)  # vector of probability of connectivity to downstream vertex ProbConn &lt;- c(0, 1, 0.945881098491627, 0.997349787519144, 0.891475447373691, 0.993221681072185, 0.48071450525165, 0.0292543433507856, 0.0248645581575872, 1, 0.00540807765075205, 0.661465657844344, 0.108524549747512, 0.383311676351655, 0.708853495942148, 0.00150109592270933, 0.463859846404347, 0.0011491165581467, 2.87879700370202e-09, 0.536140153595653, 0.00831752330277812, 0.00185182893416988, 0.0186237313262708, 0.398961560996748, 0.582414707676981, 0.338534342155656, 1, 0.00137024127706289, 0.291146504057852, 1, 0.0743301054564134, 0.0514743607033332, 1, 1)  # the downstream vertex of each node downstream &lt;- c(NA, 1, 2, 3, 4, 5, 6, 2, 2, 7, 5, 8, 4, 6, 10, 3, 11, 3, 4, 11, 6, 6, 9, 9, 9, 8, 12, 5, 10, 13, 6, 6, 14, 15)  # Create the adjacency matrix from these vectors adjacPI &lt;- matrix(0, nrow=length(downstream), ncol=length(downstream)) # Set up the adjacency matrix to build the distance matrix  for (i in 1:length(downstream)) {   adjacPI[i, downstream[i]] &lt;- ProbConn[i]  # Fill the adjacency matrix }  # create the graph reflecting the downstream connectivity PIgraph &lt;- graph.adjacency(adjacPI, weighted=T) plot(PIgraph) # visualise the graph   PIpath &lt;- shortest.paths(PIgraph, mode="out")  # creates  the shortest paths matrix based on summing the distances of each step along each path    </code></pre>  <p>To extract an example from the shortest paths matrix PIpath, vertices 10 and 34 are connected via vertex 15.  As calculated in PIpath, the path distance between vertices 10 and 34 (PIpath[34,10]) is 1.708 which is the sum of the probability of connection between vertices 34 and 15 (PIpath[34,15] = 1), and vertices 15 and 10 (PIpath[15, 10] = 0.708) I would like for that to be a product so the path "distance" between 10 and 34 is 1*0.708.  </p>  <p>I'm not entirely sure of the nomenclature but the elements of the matrix I'm looking for would be the product of the transition probabilities of each step between the connected vertices.  Essentially replacing the sum function in shortest.paths with a product.</p>  <p>Is it possible to calculate that with a function in igraph or do I need to write some code separately to do this?</p>