<p>I have question similar - same - as this <a href="http://stackoverflow.com/questions/28244232/how-to-detect-if-an-undirected-graph-has-a-cycle-and-output-it-using-bfs-or-dfs">one</a>. So I want to know how to not only detect cycle but also print out vertices which this cycle contains. I tried ways which were mentioned in the question above, but I must have done something wrong, why it doesn't work for my. Also my program checks just if one specific vertex makes cycle. My code is here:</p>  <pre><code>#include&lt;iostream&gt; #include &lt;list&gt; using namespace std;   class Graph {     int V;         list&lt;int&gt; *adj;     public:     Graph(int V);        void addEdge(int v, int w);        bool Graph::isCyclicUtil(int v, bool visited[], int *cycleVertices, int parent, int index); };  Graph::Graph(int V) {     this-&gt;V = V;     adj = new list&lt;int&gt;[V]; }  void Graph::addEdge(int v, int w) {     adj[v].push_back(w);      adj[w].push_back(v); }   bool Graph::isCyclicUtil(int v, bool visited[], int *cycleVertices, int parent, int index) {      visited[v] = true;       list&lt;int&gt;::iterator i;     for (i = adj[v].begin(); i != adj[v].end(); ++i)     {          if (!visited[*i])         {             if (isCyclicUtil(*i, visited, cycleVertices, v, index)) {                 if (index &lt;= 1 || cycleVertices[0] != cycleVertices[index - 1])                     cycleVertices[index++] = *i;                 return true;             }         }          else if (*i != parent) {             cycleVertices[index++] = *i;             return true;         }     }     return false; }   int main() {     bool *visited = new bool[5];     for (int i = 0; i &lt; 5; i++)         visited[i] = false;     int cycleVertices[5];     for (int i = 0; i &lt; 5; i++)         cycleVertices[i] = -1;     Graph g1(5);     g1.addEdge(1, 0);     g1.addEdge(0, 2);     g1.addEdge(2, 1);     g1.addEdge(0, 3);     g1.addEdge(3, 4);     g1.isCyclicUtil(4, visited, cycleVertices, -1, 0) ? cout &lt;&lt; "Graph contains cycle\n" :         cout &lt;&lt; "Graph doesn't contain cycle\n";     int x = 0;     while (cycleVertices[x] != -1)         cout &lt;&lt; cycleVertices[x++] &lt;&lt; " ";     return 0; } </code></pre>