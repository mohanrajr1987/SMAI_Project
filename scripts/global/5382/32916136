<p>I have a function which receives a directed graph represented as a list of lists that needs to do this:</p>  <pre><code>int Algo::test(const vector&lt;vector&lt;int&gt; &gt; &amp;graph) {     ...     // Add a few edges to the graph     // Do calculations based on the graph } </code></pre>  <p>I may or may not use <code>const</code>.</p>  <p>For this function to work, I need to add a few other edges to the graph (need to make sure there is a [w,v] for every edge [v,w]). I'll never remove anything, just add, and I will not reorder the edges, so every new edge should be appended at the end of its respective list. At the end of this function, the graph should be left in its initial state. </p>  <p>I thought of two obvious ways to do this: </p>  <p>(1) Use <code>const</code> and copy the graph:</p>  <pre><code>vector&lt;vector&lt;int&gt; &gt; graph2(graph); // Work on graph2 </code></pre>  <p>(2) Do not use <code>const</code>, save the current size of each list in the original graph, modify it and in the end erase the added elements:</p>  <pre><code>vector&lt;unsigned&gt; origSizes(graph.size()); for (unsigned i = 0; i &lt; graph.size(); i++)      origSizes[i] = graph[i].size();  // Create edges and do calculations  for (unsigned i = 0; i &lt; graph.size(); i++)      graph[i].erase(graph[i].begin() + origSizes[i], graph[i].end(); </code></pre>  <p>I don't like solution (1) because copying the entire graph seems like too much overhead to me (the graph may be large). I don't like solution (2)  because I would prefer to use <code>const</code> and not modify the original graph internally.</p>  <p>Is there any other alternative way that is more efficient and/or safer than these two options?</p>