<p>I know how the BFS works for numbers but i don't know how to make it work if i need to traverse through a graph that has 3 co-ordinates per point. I'll be grateful if someone could help with the shortest path function in the program below.</p>  <pre><code>class Node{ public: int a, b, c; Node(int,int,int);   }; Node::Node(int x, int y,int z) { a=x; b=y; c=z; }  class Graph{ public: map&lt;int, Node&gt; nodes; void Insert(int, Node); void print(); void shortestpath(Node source, Node destination); // i need help with this //Node source(0,3,1)  // Node destination(0,2,1) }; void Graph::Insert(int x,Node a) {     nodes.insert(pair&lt;int,Node&gt;(x,a)); }     void Graph::print()        {                      map&lt;int,Node&gt;::iterator itr;      for(itr=nodes.begin();itr!=nodes.end();itr++)     {                  cout&lt;&lt;(*itr).first&lt;&lt;'\t'&lt;&lt;(*itr).second.a&lt;&lt;(*itr).second.b&lt;&lt;(*itr).second.c&lt;&lt;endl;      } </code></pre>  <p>}</p>  <pre><code>int main() { Graph g;    Node source(0,3,1) Node destination(0,2,1) Node a(2,2,1); Node b(0,2,0); Node c(0,3,1); Node d(0,1,0); Node e(1,1,1); Node f(0,2,1); Node go(0,0,0); Node h(0,1,1); g.Insert(1,a); g.Insert(2,b); g.Insert(3,c); g.Insert(4,d); g.Insert(5,e); g.Insert(6,f); g.Insert(7,go); g.Insert(8,h); g.print(); </code></pre>  <p>}</p>