<p>For a few days, I've been working on developing a Newsfeed using the Neo4j Graph Database and toying around with various ways of including an Activity Log (similar to Facebook) that will keep track of every user action.</p>  <p>For example, User1 sends a friend request to User2 (which would translate to something like this in Cypher):</p>  <pre><code>MATCH     (me:User {username: 'john.snow@gmail.com'}),      (friend:User {username: 'arya.stark@gmail.com'})  WHERE      NOT (me)-[:FRIENDSHIP_UPDATE]-(:FriendshipStatus)-[:FRIENDSHIP_UPDATE]-(friend)  CREATE     (me)-[:FRIENDSHIP_UPDATE]-(friendshipStatus:FriendshipStatus {status: 0})-[:FRIENDSHIP_UPDATE]-&gt;(friend)  RETURN     me,     friendshipStatus,     friend </code></pre>  <p>Pretty basic stuff so far, just create 2 relationships and 1 node that contains all the information regarding their friendship.</p>  <p>Retrieving both outgoing and incoming events is also pretty simple:</p>  <pre><code>MATCH     (me:User {username: 'john.snow@gmail.com'})-[actionName]-&gt;(actionData)-[]-&gt;(friend:User)  RETURN     me,     type(actionName) AS actionName,     actionData,     friend  UNION MATCH     (me:User)&lt;-[actionName]-(actionData)&lt;-[]-(friend:User)  RETURN     me,     type(actionName) AS actionName,     actionData,     friend </code></pre>  <p>But, let's say User2 declines User1 friend request, which would end up deleting the entire relationship between them. No problem... for a simple notification panel (like "you have one friend request", the other cancels the friend request, "oups, no friend requests"). So, no history.</p>  <p>Like I said, I'm planning to do something like the Facebook Activity Log.</p>  <pre><code>&gt; You liked [User]'s*link to the user* [Photo]*link to the photo* at [Time]. &gt; [User]*link to user* declined your friend request at [Time]. &gt; You sent [User]*link to user* a friend request at [Time] </code></pre>  <p>I've toyed with various ways of doing this, including linked lists, down to the day. The days would then contain the events the user performed or has been exposed to in that particular day (when creating an event, it is pushed to the friend timeline also - see the second code block) and keeping direct relationships between user (friendship updates, likes, etc) for speed so I don't have to search thru all the Day nodes. </p>  <p>Edit: Forgot to mention why I didn't stick with that particular design.</p>  <p>The problem was that there was no similarity between the actions (for example a "like" is directed to a "post" while a "friendship request" is directed to a "user"), which made me end up with multiple, unwanted joins.</p>  <p>What would be a good database design to keep track of all these actions, even if they get deleted?</p>  <p>Thank you in advance.</p>