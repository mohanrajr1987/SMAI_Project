<p>I'm using the networkx library to do some work with graphs and using matplotlib for visualising.</p>  <p>The problem I'm having is that the nodes are getting placed over each other. I am using my own classes for the nodes - a simplified, runnable version shown here:</p>  <pre><code>import matplotlib matplotlib.use('TKAgg') import matplotlib.pyplot as plt import networkx as nx  class MyCustomNode(object):     def __init__(self, value):     self.value = value  def __str__(self):     return "val: " + self.value   graph = nx.Graph() graph.add_edge(MyCustomNode('a'), MyCustomNode('b'))  labels = {} for node in graph.nodes():     labels[node] = str(node)  pos = nx.graphviz_layout(graph) nx.draw(graph, pos, node_color='red', node_size=3000) nx.draw_networkx_labels(graph, pos, labels, font_size=8, font_color='white') plt.show() </code></pre>  <p><a href="http://i.stack.imgur.com/KGPpCm.png" rel="nofollow"><img src="http://i.stack.imgur.com/KGPpCm.png" alt="This is what displays with the code above"></a></p>  <p>What I've found is that the behaviour seems to what gets returned in the __str__ method. If I change the __str__ method to something where the <strong>starting</strong> is unique, it lays out as expected:</p>  <pre><code>def __str__(self):     return self.value  </code></pre>  <p><a href="http://i.stack.imgur.com/2LVQ8m.png" rel="nofollow"><img src="http://i.stack.imgur.com/2LVQ8m.png" alt="enter image description here"></a></p>  <p>Can't tell if this is the expected behaviour, or I'm doing something wrong, or this is a bug. Advice appreciated! :)</p>