<p>As mentioned in title,I am trying to use linked list for adjacency matrix as it is of better time complexity compared to that of use of square matrix of order n.In my code,I am getting some arbit problem while that implementation.On inserting operations, my root value gets changed.Here is my code::`</p>  <pre><code>import java.io.*; import java.util.*;`` import java.text.*; import java.math.*; import java.util.regex.*;  public class Solution {  private static class Node{     int data;      String color;     int distance; } private static class Adjacent{     int data;     Adjacent next; }  static Node[] vertices; static Adjacent[] Adj;  public static void main(String[] args) {     /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */     Scanner sc = new Scanner(System.in);         int Vertices_N = sc.nextInt();         int Edges_M = sc.nextInt();         vertices = new Node[Vertices_N+1];         Adj = new Adjacent[Edges_N+1];         int a1,a2;          for(int j=1;j&lt;=Edges_M;j++){             a1 = sc.nextInt();             a2 = sc.nextInt();              Adjacent adj1 = new Adjacent();             adj1.data=a1;             adj1.next=null;             Adjacent adj2 = new Adjacent();             adj2.data=a2;             adj2.next=null;              if(Adj[a1]==null){                 Adj[a1]=adj2;  //             System.out.println(Adj[1].data);             }else{      //         System.out.println(Adj[1].data);                 insert(Adj[a1],adj2);     //        System.out.println(Adj[1].data);             }             if(Adj[a2]==null){                 Adj[j]=adj1;             }else {                 insert(Adj[a2],adj1);             }         }          for(int j=1;j&lt;=Vertices_N;j++){             Node node = new Node();             node.data=j;             node.distance=Integer.MAX_VALUE-3;             node.color="white";    //       node.next=null;             vertices[j]=node;         }        //for(int j=1j&lt;N;j++){    //        System.out.println(Adj[1].data);           //System.out.println(vertices[j].color);           //System.out.println(vertices[j].next.data);       //}          Queue&lt;Integer&gt; queue = new LinkedList&lt;Integer&gt;();         int S = sc.nextInt();         vertices[S].color="gray";         vertices[S].distance=0;         queue.add(S);           while(!queue.isEmpty()){             int no_u = queue.remove();           //  System.out.println(queue.isEmpty());           //  System.out.println(no_u);             //Node u = vertices[no_u-1];             //Node v = u.next;             Adjacent u = Adj[no_u];             Adjacent v = u;         //  System.out.println(u.data+ " "+v.data);             while(v!=null){                 if((vertices[v.data]).color=="white"){                     vertices[v.data].color="gray";                     vertices[v.data].distance=vertices[u.data].distance+1;                     queue.add(v.data);                 }       //        System.out.println(v.data+" ");                 v=v.next;             }             //vertices[u.data].color="black";         }          for(int j=2;j&lt;=N;j++){         if(vertices[j].distance==(Integer.MAX_VALUE-3))             System.out.print(-1+" ");         else             System.out.print(vertices[j].distance*6+" ");         }      }   }  private static void insert(Adjacent root,Adjacent edge){     Adjacent lastNode=root;     while(root!=null){         lastNode=root;         root=root.next;     }     lastNode.next = edge;}` </code></pre>