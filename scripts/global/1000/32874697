<p><strong>Maven Dependencies</strong></p>  <pre><code>&lt;!-- SPRING MVC --&gt; &lt;spring-version&gt;4.0.3.RELEASE&lt;/spring-version&gt; &lt;spring-test-version&gt;4.2.1.RELEASE&lt;/spring-test-version&gt; &lt;!-- TESTS --&gt; &lt;junit-Version&gt;4.11&lt;/junit-Version&gt; &lt;!-- DATA BASE --&gt; &lt;hibernate.version&gt;4.1.5.Final&lt;/hibernate.version&gt; &lt;hibernate-validator&gt;4.2.0.Final&lt;/hibernate-validator&gt; &lt;mysql.connector.version&gt;5.1.32&lt;/mysql.connector.version&gt; </code></pre>  <p><strong>AccountDao.java</strong></p>  <pre><code>@Repository @Transactional public class AccountDao {      private final SessionFactory sessionFactory;      @Inject     public AccountDao(SessionFactory sessionFactory) {         this.sessionFactory = sessionFactory;      }     [...] } </code></pre>  <p><strong>Test</strong></p>  <pre><code>@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = {SpringMVCInitializer.class}, loader=AnnotationConfigContextLoader.class) public class LoadingTests extends TestMachine {      @Autowired     private AccountDao accountDao; </code></pre>  <p><strong>AppConfig.java</strong></p>  <pre><code> @Configuration  @PropertySource("classpath:application.properties")  @ComponentScan(basePackages = "company")  @EnableTransactionManagement  public class AppConfig {         @Bean          public AccountDao accountDao() {              return new AccountDao();          }          @Bean         public PropertySourcesPlaceholderConfigurer propertyPlaceHolderConfigurer() {             return new PropertySourcesPlaceholderConfigurer();         }          @Bean         public JdbcTemplate jdbcTemplate() {             return new JdbcTemplate(dataSource());         }          @Bean         public DataSource dataSource() {             DriverManagerDataSource dataSource = new DriverManagerDataSource();              /*LOCAL*/             dataSource.setDriverClassName("com.mysql.jdbc.Driver");             dataSource.setUrl("jdbc:mysql://localhost:3306/compamny");             dataSource.setUsername("root");             dataSource.setPassword("");              return dataSource;         }          @Bean(name = "sessionFactory")         public LocalSessionFactoryBean sessionFactory() {             LocalSessionFactoryBean sessionFactoryBean = new LocalSessionFactoryBean();             sessionFactoryBean.setDataSource(dataSource());             sessionFactoryBean.setPackagesToScan("insynctive.model");             sessionFactoryBean.setHibernateProperties(hibProperties());             return sessionFactoryBean;         }          @Bean         public HibernateTransactionManager transactionManager() {             HibernateTransactionManager transactionManager = new HibernateTransactionManager();             transactionManager.setSessionFactory(sessionFactory().getObject());             return transactionManager;         }          private Properties hibProperties() {             Properties properties = new Properties();             properties.put(Environment.HBM2DDL_AUTO, "create");             properties.put(Environment.DIALECT, "org.hibernate.dialect.MySQLDialect");             properties.put(Environment.SHOW_SQL, true);             return properties;         }      } </code></pre>  <p><strong>SpringMVCConfiguration.java</strong></p>  <pre><code>@Configuration @EnableWebMvc @ComponentScan(basePackages="company.controller") public class SpringMVCConfiguration extends WebMvcConfigurerAdapter {      public void addResourceHandlers(ResourceHandlerRegistry registry) {         registry.addResourceHandler("/resources/**").addResourceLocations("/resources/");     }      @Bean     public ViewResolver viewResolver() {         InternalResourceViewResolver viewResolverJSP = new InternalResourceViewResolver();         viewResolverJSP.setOrder(1);         viewResolverJSP.setViewClass(JstlView.class);         viewResolverJSP.setPrefix("views/jsp/");         viewResolverJSP.setSuffix(".jsp");          return viewResolverJSP;     } } </code></pre>  <p><strong>SpringMVCInitializer.java</strong></p>  <pre><code>public class SpringMVCInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {      @Override     protected Class&lt;?&gt;[] getRootConfigClasses() {         return new Class&lt;?&gt;[] {AppConfig.class, SpringMVCConfiguration.class};     }      @Override     protected Class&lt;?&gt;[] getServletConfigClasses() {         return null;     }      @Override     protected String[] getServletMappings() {         return new String[] { "/" };     } } </code></pre>  <p>My <strong>autowired of AccountDao is returning null</strong> <strong><em>Why?</em></strong> but in my web application everything works good.</p>  <p>I Try lot of things like:</p>  <ul> <li>Create a new sessionFactory but doesn't work.  </li> <li>Used: classes ={AppConfig.class,SpringMVCConfig.class}.</li> <li>Used: @ContextConfiguration(initializers = {SpringMVCInitializer.class}, loader=AnnotationConfigContextLoader.class) throw Type mismatch: cannot convert from Class to Class></li> <li>Used: @SpringApplicationConfiguration(classes = {SpringMVCInitializer.class})</li> </ul>