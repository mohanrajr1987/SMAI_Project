<p>I try to make my test to work with Spring <code>@Transactional</code> annotation.</p>  <pre><code>@ContextConfiguration(classes = SomeTest.SomeTestSpringConfig.class) @RunWith(SpringJUnit4ClassRunner.class) public class SomeTest {      @Autowired     MyBean some;      @Autowired     PlatformTransactionManager transactionManager;      @Test     public void testSpring() throws Exception {         some.method();         assertTrue(some.isTransactionalWorks);     }      @EnableAspectJAutoProxy(proxyTargetClass = true)     @EnableLoadTimeWeaving     @EnableTransactionManagement(mode = AdviceMode.ASPECTJ)     @TransactionConfiguration     static class SomeTestSpringConfig {          @Bean         PlatformTransactionManager transactionManager() {             return new MyTransactionManager(dataSource());         }          @Bean         MyBean some() {             return new MyBean();         }          @Bean         DataSource dataSource() {             return new SimpleDriverDataSource(Driver.load(), "jdbc:h2:mem:unit-test");         }     } }  class MyBean {      @Autowired     DataSource dataSource;      public boolean isTransactionalWorks;      @Transactional     private void someInTransaction() {         try {             dataSource.getConnection();         } catch (SQLException e) {             e.printStackTrace();         }         System.out.println("I should be in transaction");     }      public void method() {         someInTransaction();     } }   class MyTransactionManager implements PlatformTransactionManager, InitializingBean {     private final DataSourceTransactionManager base = new DataSourceTransactionManager();      @Autowired     MyBean some;      public MyTransactionManager(DataSource datasource) {         base.setDataSource(datasource);     }      @Override     public TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException {         some.isTransactionalWorks = true;         return base.getTransaction(definition);     }      @Override     public void commit(TransactionStatus status) throws TransactionException {         base.commit(status);     }      @Override     public void rollback(TransactionStatus status) throws TransactionException {         base.rollback(status);     }      @Override     public void afterPropertiesSet() throws Exception {         base.afterPropertiesSet();     } } </code></pre>  <p>Also I added <code>-javaagent:D:/libs/spring-instrument-4.1.7.RELEASE.jar</code> to VM options for this test. But it always fails. What did I miss?</p>