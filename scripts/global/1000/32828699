<p>I'm new to JMockIt and am trying to figure out/understand how to use <code>@Injectable</code> for a top-level MockUp class that I have already defined.</p>  <p>For example:</p>  <pre><code>// JUnit Test Class public class RepositoryTest {      @Tested private Repository repository;     @Injectable private ResultsAPIWrapper resultsApiWrapper;      @Test     public void testRepo(){         new ResultsApiWrapper();         assertThat(repository.doSomething(), is("done" ) );     } }   // Class under test public class Repository{     @Autowired private ResultsAPIWrapper resultsApiWrapper;     public String doSomething(){       return resultsApiWrapper.load();    } }  // Mocked implementation of the ResultsAPIWrapper that I want injected into Repository public class ResultsApiWrapperMock extends MockUp&lt;ResultsAPIWrapper&gt;{    @Mock    public String load(){       return "done";    } } </code></pre>  <p>If I try the above, I get an error</p>  <pre><code>java.lang.IllegalArgumentException: Class already mocked: com.fw.wrappers.ResultsAPIWrapper     at com.fw.wrappers.mock.ResultsApiWrapperMock.&lt;init&gt;(ResultsApiWrapperMock.java:12)     at com.fw.repository.RepositoryTest.testRepo(RepositoryTest.java:38) </code></pre>  <p>But If I remove the <code>new ResultsApiWrapper()</code> then I do not know how to specify which is the class I want to use as my mocked implementation for the autowire.</p>  <p>Am I misunderstanding how to do this?  How can I specify that I want JMockit to autowire using my <code>MockUp&lt;&gt;</code> implementation?</p>