<p>I am programming Bokeh embeded app with Plot and Widget objects in bokeh based on slider_app example. </p>  <p><a href="https://github.com/bokeh/bokeh/blob/0c78cf646ec95d3c003c714c35a388db4b4ad834/examples/app/sliders_applet/sliders_app.py" rel="nofollow">https://github.com/bokeh/bokeh/blob/0c78cf646ec95d3c003c714c35a388db4b4ad834/examples/app/sliders_applet/sliders_app.py</a></p>  <p>When I want to use a Dialog widget in this example for letting user know about the calculation of data for the plot, the dialog widget does not show up. There is taylor example on github where the dialog is working</p>  <p><a href="https://github.com/bokeh/bokeh/blob/0c78cf646ec95d3c003c714c35a388db4b4ad834/examples/glyphs/taylor_server.py" rel="nofollow">https://github.com/bokeh/bokeh/blob/0c78cf646ec95d3c003c714c35a388db4b4ad834/examples/glyphs/taylor_server.py</a></p>  <p>however there is a different concept as is in slider_example and is based on session and document</p>  <pre><code>document = Document() session = Session() session.use_doc('taylor_server') session.load_document(document) </code></pre>  <p>and then using</p>  <pre><code>session.store_objects(dialog)  session.store_document(document) </code></pre>  <p>that enables to store the dialog what execute callback in the browser. Now I am not using Session and Document object as I am embedding app in Flask based on slider_app with following</p>  <pre><code>from bokeh.server.utils.plugins import object_page from bokeh.server.app import bokeh_app  from flask import render_template, Flask  app = Flask('example')  @bokeh_app.route("/search/") @object_page("search") def make_search_test(**kwargs):    app = EXAMPLE_DASHBOARD.create()    return app </code></pre>  <p>In the class EXAMPLE_DASHBOARD I am trying to press button and then getting the Dialog in following way:</p>  <pre><code>def input_change(self, obj, attrname, old, new):         """Executes whenever the input form changes.          It is responsible for updating the plot, or anything else           you want.          Args:              obj : the object that changed              attrname : the attr that changed              old : old value of attr              new : new value of attr         """         print "BUTTON PRESSED - TESTING DIALOG"          dialog = Dialog(title="Example")          print self.dialog         self.dialog.visible = True         print self.dialog.visible          self.dialog._dirty = True         self.dialog._callbacks_dirty = True </code></pre>  <p>I do not understand in whole the mechanism in this case as there is not object storing in document which would enable callbacks and will show the dialog. I was thinking that </p>  <pre><code> self.dialog._dirty = True  self.dialog._callbacks_dirty = True </code></pre>  <p>would do the job similar than it is true for DataSource and Plots object where this is working, but this is not a case. Can somebody help me by explaining me the concept. </p>  <p>Cheers</p>