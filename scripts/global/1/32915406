<p>I'm working with some unmanaged type libraries and reference files in a C# (.NET) application to get information out of them, such as the interfaces, functions, enums, etc, that they contain. I currently have an object of type ComTypes.ITypeInfo that represents a coclass. I've already written some code to get the coclass's name, however what I really want is a list of all the names of the interfaces contained within that coclass. I couldn't find any "easy-access" properties in the System.Runtime.InteropServices.ComTypes namespace, so to meet this end, I'm currently using <a href="https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.comtypes.itypeinfo.createinstance(v=vs.110).aspx" rel="nofollow">ITypeInfo.CreateInstance</a>. From my understanding, by doing this I can get out a COM object of type Object and then get the desired information from it (I'm a beginner at COM so feel free to point out where I'm incorrect).</p>  <p>I can get all the way to where I've successfully made the call on a coclass and got out an Object of type "object {System.__ComObject}", however I'm not sure where to go from there. How can I use this coclass COM object to obtain the names of the interfaces it contains? Here's the code I'm using to get the coclass COM object:</p>  <pre><code>//Assume the ti object below is already initialized as an object of TYPEKIND.TKIND_COCLASS ComTypes.ITypeInfo ti; if(//Condition where we know ti is a coclass) {    try    {       int href;       Object obj;       for (var i = 0; i &lt; tiTypeAttr.cImplTypes; i++)       {          ti.GetRefTypeOfImplType(i, out href);          ComTypes.ITypeInfo newTi;          ti.GetRefTypeInfo(href, out newTi);          if (newTi != null)          {             IntPtr attrP;             ComTypes.TYPEATTR attr;             newTi.GetTypeAttr(out attrP);             attr = (ComTypes.TYPEATTR)Marshal.PtrToStructure(attrP, typeof(ComTypes.TYPEATTR));             if (attr.typekind == ComTypes.TYPEKIND.TKIND_INTERFACE || attr.typekind == ComTypes.TYPEKIND.TKIND_DISPATCH)             {                Guid iid = attr.guid;                ti.CreateInstance(null, iid, out obj);                //STUCK HERE: Do stuff with obj to acquire the interface names within it                newTi.ReleaseTypeAttr(attrP);             }          }       }    }    catch(Exception e)    {Console.WriteLine(e);} } </code></pre>  <p>Is there a way to use that Object obj to get the info I'm looking for? Or is there an easier way/a way at all? Thank you!</p>