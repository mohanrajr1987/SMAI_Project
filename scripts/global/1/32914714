<p>I'm trying to make a regex that would match a character at the beginning and end of the expression or match without the character in either place.  I know I can do this using a <code>|</code> and two complete expressions, but is it possible to do so in one expression?</p>  <p>Example text:</p>    <pre class="lang-none prettyprint-override"><code>This is some groovy_[Item]text[/Item]_right here.  And here's some_[Item]more[/Item]. </code></pre>  <p>Current regex:</p>  <pre class="lang-none prettyprint-override"><code>_?\[Item\]([^\[]+)\[\/Item\]_? </code></pre>  <p>For the above, the regex would match <code>_[Item]text[/Item]_</code> and <code>_[Item]more[/Item]</code>.  However, for the second match, I don't want the leading _, since the trailing _ isn't there.</p>  <p>I could obviously use this regex and it would work:</p>  <pre class="lang-none prettyprint-override"><code>_\[Item\]([^\[]+)\[/Item\]_|\[Item\]([^\[]+)\[/Item\] </code></pre>  <p>I just want to know if there's a way to do it without the doubling up of the meat of the expression.</p>