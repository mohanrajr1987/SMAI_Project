<p>Could anyone point me in the right direction on how to manually sign the message body in WCF using a certificate?</p>  <p>I'm thinking: implement IDispatchMessageInspector to intercept the message before reply is sent, sign it, craft the security header, add it to the message, and send it out. The problem is, I can't find an easy way to craft the security header. What looks like a simple task for WSE (<a href="https://msdn.microsoft.com/en-us/library/aa529277.aspx" rel="nofollow">How to: Sign a SOAP Message Using an X.509 Certificate</a>) seems to be a very complicated task in WCF.</p>  <p>I couldn't find anything useful, and hope that someone has tackled this problem by now.</p>  <hr>  <p><strong>BACKGROUND:</strong></p>  <p>I'm working on a WCF service that needs to accept unsecured request (from a Java client) and return a signed response.</p>  <p>Now, I got the other way around to work (accept signed request and send unsigned response) using custom binding with enableUnsecuredResponse="true".</p>  <p>Looking at the source code that attribute doesn't seem to help because it's used in combination with ActAsInitiator property, which is false in my case (for service side).</p>  <p>In <a href="http://referencesource.microsoft.com/#System.ServiceModel/System/ServiceModel/Security/MessageSecurityProtocol.cs,e4d888421ea1d6bb" rel="nofollow">MessageSecurityProtocol</a>:</p>  <pre><code> protected bool RequiresIncomingSecurityProcessing(Message message)     {         // if we are receiveing a response that has no security that we should accept this AND no security header exists         // then it is OK to skip the header.         if (this.factory.ActAsInitiator           &amp;&amp; this.factory.SecurityBindingElement.EnableUnsecuredResponse           &amp;&amp; !this.factory.StandardsManager.SecurityVersion.DoesMessageContainSecurityHeader(message))             return false;          bool requiresAppSecurity = this.factory.RequireIntegrity || this.factory.RequireConfidentiality || this.factory.DetectReplays;         return requiresAppSecurity || factory.ExpectSupportingTokens;     } </code></pre>