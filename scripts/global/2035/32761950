<p>CI am trying to implement an openCL kernel which copies a source array to the destination array. For debugging reasons i count the number that dst = src instruction executes just to be sure that every element of the array is processed just once. However for some reason it executes 100 times. </p>  <p>I run the code on the Intel HD2500 GPU</p>  <pre><code>localWorkSize[0] = 16;             // this is the max localworksize globalWorkSize[0] = 2048*2400;  err1 = clEnqueueNDRangeKernel(commands, kernel_cpy_naive,                                 1, NULL, globalWorkSize, localWorkSize, 0, NULL, NULL); </code></pre>  <p>my kernel : </p>  <pre><code>       __kernel void mul_naive(__global unsigned int* A,                                __global unsigned int* B,                                __global unsigned int* C)        {            const int tx = get_global_id(0);            unsigned int max=2400*2048;            if (tx&lt;max){                 B[tx] = A[tx];                 C[tx]++;             }         } </code></pre>  <p>The outcome is that array C is 100 for all the elements. </p>