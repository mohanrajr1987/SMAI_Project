<p>For one part of a code, I need to save both the name and the stats (user ID, group ID, modification time, permissions, etc.) of every file in a given directory into an array of self-defined structs. The saving info into the array is fine, so for clarity, I left those things out. The problem I'm having is with the pre-defined <code>struct stat</code>: in testing, it prints out the same exact modification date for every file in the directory, which is one problem, and the date is from 1969, which is another problem (considering I clearly remember creating and modifying those files sometime last year). I'm not sure what's going wrong; some help would be greatly appreciated.</p>  <p>Note: This is my very first time coding in C, so if there are any blatant errors, please do let me know. My professor is very big on independent research and doesn't exactly cover all the important things to know. Also, I'm aware that I need to be checking for errors -- those checks have been written and will be implemented later. I just need to fix the sunny-day portion of this code before I worry about all of my error checks, so please don't tell me that that's my problem. I'm always handing it a plain ol' readable directory. It should have no trouble opening or reading. </p>  <pre><code>  int main ()   {         DIR *myDIR;         struct dirent *mydirent = malloc(sizeof(struct dirent));        //necessary?         struct stat mystat;         myDIR = opendir(pathname);         int count = 0;         while ((mydirent = readdir(myDIR)) != NULL)              count++;         rewinddir(myDIR);         struct file_info **file_info_array = malloc(sizeof(struct file_info*)*(count+1));         int i = 0;         while ((mydirent = readdir(myDIR)) != NULL)         {              stat(mydirent-&gt;d_name, &amp;mystat);              printf("name: %s\n", mydirent-&gt;d_name);              printf("mod_time: %s\n", ctime(&amp;mystat.st_mtime));               /*              ... saving file info into file_info_array              */          }         int is_closed = closedir(myDIR);          /*         ... freeing pointers         */          return 0;    } </code></pre>