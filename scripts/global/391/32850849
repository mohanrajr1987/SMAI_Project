<p>This script creates a pseudo progress bar:</p>  <pre><code>bar, bar2 = '', '' 10.times do |i|   bar &lt;&lt; '='   bar2 &lt;&lt; '**'   print "#{bar} - #{i+1}0%\r"   #print "#{bar2} - #{i+1}0%\r"   sleep 0.3 end </code></pre>  <p>10 <code>=</code> appear in the bottom left of the screen before it completes.</p>  <p>I want to create two simultaneous loading bars. So as you can see, I've created <code>bar2</code> that creates 20 <code>*</code> before it completes. </p>  <p><strong>Both work fine, but not simultaneously!</strong> If I uncomment both print commands, I print both bars, only the <code>bar2</code> is shown, <code>bar1</code> doesn't show up at all.</p>  <p>I'm guessing this is because the <code>\r</code> returns the "cursor" to the start of the line and overrides <code>bar</code> with <code>bar2</code>'s progress.</p>  <p>I've tried utilizing a <code>\n</code>, but all text preceding the <code>\n</code> is not wiped.  Again, this is because <code>\r</code> is carriage return that can't get before a new line, so while the first loop actually works perfectly, <code>bar</code>'s progress (and a <code>\n</code>) stays on the screen, causing this effect:</p>  <pre><code>&gt; = - 10% &gt; == - 20% &gt; === - 30%% &gt; ==== - 40%0% &gt; ===== - 50%40% &gt; ====== - 60% 50% &gt; ======= - 70%- 60% &gt; ======== - 80% - 70% &gt; ========= - 90%* - 80% &gt; ========== - 100%* - 90% </code></pre>  <p>So how do I create two simultaneous loading bars? Or indeed an infinite number of simultaneous loading bars? I'm testing in <code>gnome-terminal</code> but I'd like a solution that works in most, if not all, modern terminals.</p>