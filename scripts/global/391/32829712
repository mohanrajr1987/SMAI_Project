<p>I recently started using Git as a version control system and deployment workflow for my company's website files. I have yet to find a simple way to back up just the updated files in a Commit (this way all of the project files don't get redundantly backed up every time), and I've brainstormed a way to output the files in a Commit using the following command:</p>  <pre><code>git show --pretty="format:" --name-only {COMMIT_ID} </code></pre>  <p>...where <code>{COMMIT_ID}</code> is the 8-character ID of the Commit.</p>  <p>This works, and outputs the files in a nice way, one file on each line.</p>  <p>What I wanted to do is capture each line of this output, which may be e.g.:</p>  <pre><code>/a/b/c/file1.txt /a/b/c/d/file2.txt /x/y/file3.txt /x/y/z/file4.txt </code></pre>  <p>...and perform the following Terminal command on each line of this output to make a copy of each file with <code>rsync</code>:</p>  <pre><code>rsync -aR ~/Git/repo/./{OUTPUT_LINE} ~/Commit/repo/{COMMIT_ID}/ </code></pre>  <p>...where <code>{OUTPUT_LINE}</code> is this line of the output (e.g. <code>/a/b/c/file1.txt</code>) and <code>{COMMIT_ID}</code> is the 8-character ID of the Commit from earlier.</p>  <h1>TLDR;</h1>  <p>How can I run a command on the result of each line of a multiline output from a Terminal command?</p>  <p>&nbsp;</p>  <h2>Further Notes</h2>  <ul> <li><p>I'm familiar with the <code>|</code> pipe, but only on a fundamental level, and I'm not sure how to utilize it for this.</p></li> <li><p>To expand on my <code>rsync</code> command: this grabs the diff file from the my local directory that houses the Git repo files, creates the directory structure of the file, and one-time copies the file over. No sync.</p></li> <li><p>I plan to use this backup workflow in an AppleScript that asks for the Commit ID in a dialog box so you can quickly copy, paste, and go. Then it will run the terminal command, and fire one last prompt on completion.</p></li> <li><p>The full series of Terminal commands that will perform this backup are as follows:</p></li> </ul>  <pre> mkdir ~/Commit/repo/{COMMIT_ID} cd ~/Git/repo git show --pretty="format:" --name-only {COMMIT_ID} rsync ... </pre>  <p>Explanation:</p>  <ol> <li>Create a new directory in the <code>~/Commit/repo/</code> backup folder</li> <li>Load this Git repo</li> <li>Show the files that were changed in the last Commit</li> <li>For each one, <code>rsync</code> the files to the backup folder</li> </ol>