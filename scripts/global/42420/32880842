<p>In my application:</p>  <ol> <li><p>I track an object.</p></li> <li><p>Get where its <code>corners</code> are coming in this frame.</p></li> <li><p>I find the homography between its <code>corners</code> from last frame and current frame.</p></li> <li><p>Use that homography to do a <code>perspectiveTransform</code> on the <code>corners</code> found in the current frame, to get <code>transformed_corners</code>.</p></li> <li><p>Use the <code>transformed_corners</code> to find the homography between them and the <code>overlay_image</code>.</p></li> <li><p>Apply above homography <code>M</code> to <code>overlay_image</code>, to get what would be called the <code>warped_image</code> using warpPerspective. <strong>This is the slow part</strong>.</p></li> <li><p>And then using masking operations, I print the <code>warped_image</code> onto the current frame where the object was found.</p></li> </ol>  <p>Now I know after reading <a href="http://romsteady.blogspot.in/2015/07/calculate-opencv-warpperspective-map.html" rel="nofollow">this blog article here</a> why warpPerspective is slow. </p>  <p>And I'm getting ~300ms per frame in just the 6th step above, all because of warpPerspective. It's significantly affecting the FPS output of my application. Basically, it went down to 2FPS from 12 FPS without warping on every frame.</p>  <p>Is there any faster alternative to this? It's all done on Android, using NDK r9. What are some fast alternatives, and optimizations to reduce the warp time from 300ms to sub 50ms times?</p>