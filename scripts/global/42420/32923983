<p>I use gradle build system to build my android project with NDK. Debug build works fine. But when i assembe release build, some magik happend and it breaks with following error:</p>  <pre><code>Execution failed for task ':myapp:packageRelease'.  &gt; Failed to add &gt; C:\Users\myname\Documents\android\main\MainProjects\myapp\app\build\intermediates\ndk\release\lib\armeabi\myapp.so </code></pre>  <p>Maybe it happen because of using custom Android.mk file. Here is my build.gradle file :</p>  <pre><code>buildscript {     repositories {         maven { url 'https://maven.fabric.io/public' }     }      dependencies {         classpath 'io.fabric.tools:gradle:1.+'     } } apply plugin: 'com.android.application' apply plugin: 'io.fabric'  repositories {     jcenter()     maven { url 'https://maven.fabric.io/public' } }  android {     compileOptions.encoding = 'ISO-8859-1'     compileSdkVersion CompiledSdkVersion     buildToolsVersion BuildToolsVersion      defaultConfig {         applicationId "myapp"         minSdkVersion MinSdkVersion         targetSdkVersion TargetSdkVersion         versionCode 10         versionName "1.0.2b"     }      signingConfigs {         release {             storeFile file("..\\release.keystore")             storePassword "***"             keyAlias "***"             keyPassword "***"         }     }      lintOptions {         checkReleaseBuilds false         abortOnError false     }      android {         sourceSets.main {             jni.srcDirs = []             jniLibs.srcDir 'src/main/libs'         }     }      buildTypes {         release {             signingConfig signingConfigs.release             minifyEnabled false             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'          }     }      splits {         abi {             enable false // enable ABI split feature to create one APK per ABI             universalApk true //generate an additional APK that targets all the ABIs         }     }     project.ext.versionCodes = ['armeabi':1, 'armeabi-v7a':2, 'arm64-v8a':3, 'mips':5, 'mips64':6, 'x86':8, 'x86_64':9]     android.applicationVariants.all { variant -&gt;         variant.outputs.each { output -&gt;             output.versionCodeOverride =                     project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) * 1000000 + android.defaultConfig.versionCode         }     } }  crashlytics {     enableNdk true     androidNdkOut 'src/main/obj'     androidNdkLibsOut 'src/main/libs' }  dependencies {      compile Dependencies.appCompat     compile Dependencies.recyclerView     compile Dependencies.cardView     compile Dependencies.playServices      compile files('libs/dropbox-android-sdk-1.6.3.jar')     compile files('libs/json_simple-1.1.jar')     compile files('libs/kxml2-2.3.0.jar')      compile('com.crashlytics.sdk.android:crashlytics:2.5.2@aar') {         transitive = true     }     compile('com.crashlytics.sdk.android:crashlytics-ndk:1.1.1@aar') {         transitive = true     } }  task buildNative(type: Exec, description: 'Compile JNI source via NDK') {     android.applicationVariants.all { variant -&gt;         def ndkDir = project.plugins.findPlugin('com.android.application').sdkHandler.getNdkFolder()         commandLine "$ndkDir/ndk-build.cmd", '-C', file('src/main').absolutePath      } }  tasks.withType(JavaCompile) {     compileTask -&gt; compileTask.dependsOn buildNative } </code></pre>  <p>It's very strange behavior of gradle release build. Please help me to deal with this strange problem.</p>