<p>I have an internal library used in Node.js and browser. It has many files, concatenated with a Grunt task and different prologues, one for browser, one for Node:</p>  <p>browser:</p>  <pre><code>// dependent 3rd-party libs like Mustache are already global window.myLib = { /*just a namespace object filled with stuff later*/ }  // then comes the plain javascript which just adds elements to myLib. // This part is identical to that used in Node // example: myLib.renderPartDetail = function (...) {...}; </code></pre>  <p>Node:</p>  <pre><code>var Mustache = require('mustache'); var myLib = {}; module.exports = myLib;  // then comes the plain javascript which just adds elements to myLib. // This part is identical to that used in Browser </code></pre>  <p>This results in 2 different single output js files, one for browser, one for Node.</p>  <p><strong>What I'd like</strong></p>  <ul> <li>use TypeScript</li> <li>if possible, use only one CommonJS syntax (or ES6 modules) for both browser and node</li> <li>invest in something not dying in the next couple of months</li> <li>be a bit more modular (maybe somebody needs only part of the lib)</li> </ul>  <p><strong>What confuses me</strong></p>  <p>I find 2 different kinds of module handling in TypeScript:</p>  <pre><code>import {a, b} from './x' </code></pre>  <p>and</p>  <pre><code>import c = require('./y') </code></pre>  <p>I'm used to the latter from node, but the first looks like ES6 (which might be the future).</p>  <p>Currently I use <code>tsc --module commonjs</code> but this is only the output format, right? There is also <code>--module system</code> but I can't find documentation for this option and when I use it, the compiler complains about <code>export = ...</code> is not allowed.</p>  <p>Haven't yet played around with <code>browserify</code>, <code>tsify</code>, <code>watchify</code>, <code>jspm</code>, SystemJS, <code>webpack</code> - it's just too similar and too much, but I think one or a few of those tools could do the work for me.</p>  <p>And when I <code>require(&lt;a node module living in node_modules&gt;)</code>, tsc cannot find the module: "TS2307: Cannot find external module 'moment'".</p>  <p><strong>Concrete Questions</strong></p>  <ul> <li>Which module syntax should I use in my code to best work with Node and Browser?</li> <li>Which tool-chain will solve my requirements? Is there an example project or a boilerplate where I can copy from? (I'm open to Gulp as well, doesn't have to use Grunt).</li> <li>Which TypeScript and Node versions are currently supported? I'm having 1.4 embedded in IntelliJ, when referencing 1.6.2 as external I'm getting very deep cryptic error messages like "TypeError: host.fileExists is not a function" (not finding anything helpful about this). Maybe it's not optimal to use Node v4.1.1?</li> </ul>  <p>I'm sorry that this post is so complex. If necessary, just give me advise where to start or what is the most important thing to change or begin with. </p>