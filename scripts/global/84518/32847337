<p>I currently have a large typescript file that I want to split up. There are a few functions and variables only used within the file, and a number of classes. It currently looks something along these lines:</p>  <pre><code>var numbers = [1, 2, 3]; function formatDate() {...}  class Widget { ... } class Section { ... } </code></pre>  <p>I've tried putting this in a module and splitting it across a few files:</p>  <pre><code>//Widget.ts module ReportTemplate {     export class Widget { ... } }  //Section.ts module ReportTemplate {     export class Section { ... } }  //ReportTemplate.ts /// &lt;reference path="Widget.ts"/&gt; /// &lt;reference path="Section.ts"/&gt; module ReportTemplate {     var numbers = [1, 2, 3];     function formatDate() { ... } } </code></pre>  <p>I was hoping that this would be equivalent to my original file, but wrapped in a module, but what I've found is that <code>Widget</code> and <code>Section</code> are unable to access <code>numbers</code> and <code>formatDate</code>.</p>  <p>I wasn't sure if I'd just misunderstood the references, so I've tried adding references to <code>ReportTemplate.ts</code> in <code>Section.ts</code> and <code>Widget.ts</code> but it hasn't helped. The only way I've found to allow <code>Section.ts</code> and <code>Widget.ts</code> to access <code>numbers</code> and <code>formatDate</code> is to export them, but I don't want them to be accessible outside the module.</p>  <p>I've read quite a bit about typescript modules, but I haven't found any examples that are the same as what I'm trying to do, so I'm still confused. Am I trying to do something which can't be done, or am I simply going about it the wrong way?</p>