<p>I'm not sure if I'm structuring my typescript incorrectly so may be asking the wrong question here.</p>  <p>I've got 2 related classes 1 interfaces in separate files in the same folder.</p>  <p>I've wrapped them in a module because that feels like what I should do coming from C#.</p>  <p>This is all angularjs so it does it's own DI which might be important but probably isn't.</p>  <p>File 1:</p>  <pre><code>export module Module1{     export interface IService{     } } </code></pre>  <p>File2:</p>  <pre><code>export module Module1{     export class Implementation implements IInterface{     ...     } } </code></pre>  <p>File 3 is angular code that uses the angular injected instance of IInterface. If I import File2 using <code>require("./File2")</code> it works but I'd rather import the whole of <code>Module1</code>, something like below, so I don't have to require each class individually (as this is obviously a simplified case).</p>  <pre><code>import authModule = require('Module1');  var assetStreamApp = angular.module("[])     .run(['IInterface'], (instance: IInterface) =&gt; {         instance.doSomething();     }); </code></pre>  <p>Is this possible?</p>  <p>I don't want to have to import every file individually and then choose a different alias for each "module" to namespace the types when it feels like I should be able to do that once.</p>  <p>Edit: After a little more reading I think I've worked out some of the terminology. I want to use typescript internal modules in a project but also use AMD modules as split points so I can use webpack's code splitting.</p>