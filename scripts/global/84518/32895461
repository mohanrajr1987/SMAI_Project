<p>Angular version is 1.4.7.</p>  <p>The model in question contains two objects, 'systems', an array, and 'selectedSystem'. What I want is for selectedSystem to reference one of the objects in systems. This is the case when the page loads, and everything works as expected, but when I make a selection from the first dropdown, selectedSystem seems to become a copy rather than a reference to the original object in systems. Consequently, changes to the second drop down no longer are reflected in systems.</p>  <pre><code>&lt;!DOCTYPE html&gt; &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt; &lt;head&gt;     &lt;title&gt;Hello&lt;/title&gt; &lt;/head&gt; &lt;body ng-app="testApp"&gt;     Hi There!     &lt;div ng-controller="TestAppSummaryCtrl"&gt;         &lt;input type="button" value="Add Query" ng-click="addQuery()"/&gt;         &lt;select ng-model="state.selectedSystem" ng-options="system.description for system in state.systems track by system.systemId" &gt;&lt;/select&gt;         &lt;select ng-model="state.selectedSystem.currentEnvironment" ng-options="environment.description for environment in state.selectedSystem.environments track by environment.environmentId"&gt;&lt;/select&gt;         Selected System: {{state.selectedSystem.systemId}}          &lt;div ng-repeat="item in state.systems"&gt;             System: {{item.description}}             Current Environment: {{item.currentEnvironment.description}}         &lt;/div&gt;          &lt;div ng-repeat="item in state.selectedSystem.categories"&gt;             Cateogry:             {{item.categoryId}}             {{item.description}}             &lt;br /&gt;             Queries:             &lt;div ng-repeat="query in item.queries"&gt;                 {{query.queryId}}                 {{query.latestStatus}}             &lt;/div&gt;         &lt;/div&gt;     &lt;/div&gt;     &lt;script src="../Scripts/angular.js"&gt;&lt;/script&gt;     &lt;script src="../Scripts/angular-route.js"&gt;&lt;/script&gt;     &lt;script src="src/test.js"&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; </code></pre>  <p>typescript code:</p>  <pre><code>/// &lt;reference path="../../scripts/typings/angularjs/angular.d.ts" /&gt; /// &lt;reference path="../../scripts/typings/angularjs/angular-route.d.ts" /&gt;  module TestApp {     export class Config {         constructor($routeProvider: ng.route.IRouteProvider) {             $routeProvider.when("/test", {                 templateUrl: "StaticContent/StaticTest.html",                 controller: "TestAppCtrl"             });         }     }      Config.$inject = ['$routeProvider'];      export class SummaryService {         private summaryApiPath: string;         private httpService: ng.IHttpService;         private qService: ng.IQService;         private systems: Array&lt;Extensions.SystemSummary&gt;;          constructor($http: ng.IHttpService, $q: ng.IQService) {             this.summaryApiPath = "../api/systemList";             this.httpService = $http;             this.qService = $q;         }          getSystems(): ng.IPromise&lt;any&gt; {             if (this.systems != undefined) {                 return this.qService.when(this.systems);             }             var deferred = this.qService.defer();             this.httpService.get(this.summaryApiPath).then((result: any) =&gt; {                 deferred.resolve(result.data);             }), error =&gt; {                 deferred.reject(error);             }             return deferred.promise;         }          public static serviceFactory($http: ng.IHttpService, $q: ng.IQService): SummaryService {             return new SummaryService($http, $q);         }     }      export class TestAppSummaryCtrl {         private $scope: Extensions.ISummaryScope         private summaryService: SummaryService;          private init(): void {             var local = this.$scope;             this.summaryService.getSystems().then(data =&gt; {                 local.state.systems = &lt;Array&lt;Extensions.SystemSummary&gt;&gt;data;                 local.state.selectedSystem = local.state.systems.length == 0 ? undefined : local.state.systems[0];             });             local.updateCurrentEnvironment = envId =&gt; local.state.selectedSystem.currentEnvironment = local.state.selectedSystem.environments[envId];         }          constructor($scope: Extensions.ISummaryScope, summaryService: SummaryService) {             this.$scope = $scope;             this.$scope.state = new Extensions.SummaryCtrlUIState();             this.summaryService = summaryService;             this.init();         }     }      TestAppSummaryCtrl.$inject = ['$scope', 'summaryService'];      var app = angular.module('testApp', ['ngRoute']);     app.config(Config);     app.factory('summaryService', ['$http', '$q', SummaryService.serviceFactory]);     app.controller('TestAppSummaryCtrl', TestAppSummaryCtrl); }  module Extensions {     export class CategorySummary {         categoryId: number;         description: number;         queries: Array&lt;JobItemSummary&gt;;     }      export class JobItemSummary {         queryId: number;         lastJobId: number;         lastCompletedDate: string;         latestStatus: string;         latestResultsCount: number;         latestResultsSummary: string;         expectedResult: number;     }      export class EnvironmentSummary {         environmentId: number;         description: string;     }      export class SystemSummary {         systemId: number;         description: string;         environments: Array&lt;EnvironmentSummary&gt;;         currentEnvironment: EnvironmentSummary;         categories: Array&lt;CategorySummary&gt;;     }      export class SummaryCtrlUIState {         selectedSystem: Extensions.SystemSummary;         systems: Array&lt;Extensions.SystemSummary&gt;;     }      export interface ISummaryScope extends ng.IScope {          state: SummaryCtrlUIState;         updateCurrentEnvironment(envId: number): void;         addQuery(): void;      } } </code></pre>  <p>What is going on, and Is there some way to get the behavior I want with angular model binding?</p>