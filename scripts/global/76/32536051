<p>First, a small number of active users from a total of K users are set to respectively transmit a frame of convolutionally-encoded binary bits, optionally interleaved, then mapped following the Binary Phase-Shift Keying (BPSK) constellation. Inactive users are set to transmit all-zero frames, thus forming an augmented BPSK constellation {0, ±1}. All frames to be transmitted are then spread using bipolar-valued Pseudo-Noise (PN) spreading sequences before they go through their respective wireless channels (modeled as i.i.d. Rayleigh distributed channels with an exponentially-decaying power delay profile where the expected decay is known). The superposition of these signals through channels is considered to be the observation y the aggregated node or gateway receives</p>  <pre><code>enter code here </code></pre>  <p>%%%%%%%%%</p>  <pre><code>clc clear format long; K=128 ;    % the number of users Ns=K/4;    %spreading factor Lh=6;      %channel tap L=104;  Pactive=0.02;    %the active possibility of uers nTx=K*Pactive;   nBlocks = 10; % number of blocks for each SNR   SNR = 0:5:25; % dB X_origin=[];   for iSNR = 1:length(SNR)     for iBlock = 1:nBlocks         for i=1:K             r_K=randperm(L);             x=zeros(L,1);             for j=1:nTx                 x(r_K(j))=1;              end;             X_origin=[X_origin;x]; % signal vector           end;         inSignals=pskmod(X_origin ,2); %bpsk modulation         cH = RayleighChannel(Ns*L+Lh-1,K*L);  %channel matrix         rH = RVD(cH);          cB = cH*inSignals;         cY = awgn(cB,SNR(iSNR),'measured'); % add noise, n~(0,sigma2)          rY = RVD(cY);         spower = mean(abs(cY(:)).^2);          cG = cH'*cH;         rG = rH'*rH;          sigma2 = spower/(10^(SNR(iSNR)/10));         cW = cG+eye(K*L)*sigma2;         rW = RVD(cW);          invW = inv(rW);          rYBar = rH'*rY;         rSHat = invW*rYBar;         A=rH*rSHat;          S= CS_gOMP( rY,A,nTx);          %     X_reconstuction=rSHat*X_r;           [~,vBer1(iBlock)] = biterr(X_origin,S);      end;     %   ber(iSNR) = mean(vBer);     ber1(iSNR) = mean(vBer1);      SNR(iSNR)     ber1(iSNR) end; semilogy( SNR,ber1,'go--'); %set(P1,'Linewidth',[2]); grid on; title (['\fontsize{12}\bfCS—MUD :\rm','16-QAM,N=',int2str(K*L),',K=',int2str(K)]); xlabel ('SNR'); ylabel ('BER'); legend('SMV-CS-MUD'); </code></pre>