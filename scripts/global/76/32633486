<p><strong>Summary:</strong> I need a PNG writer and for various reasons I had to make it from scratch. I don't need to compress the image data, so I implemented PNG using the no-compression deflate algorithm. Rendering fails for images requiring multiple deflate blocks, seemingly because it ignores block lengths.</p>  <p><strong>Issue:</strong> When I have a tiny image written with a single deflate block, the resulting image is exactly what it is supposed to be (all pixels correct, no errors when checked with <a href="http://gnuwin32.sourceforge.net/packages/pngutils.htm" rel="nofollow">pngcheck</a>). However, as soon as I use multiple deflate blocks the resulting image is wrong because deflate blocks are being read past their lengths (though pngcheck still shows no errors). Looking at the raw data in a hex editor seems to show that everything is to spec (according to <a href="http://www.libpng.org/pub/png/spec/1.2/png-1.2-pdg.html" rel="nofollow">libpng</a>, RFC 1950, and RFC 1951).</p>  <p><strong>Example Data:</strong> I generated a 3x1 RGBA image where the pixel colors are, from left to right, <code>(fb,02,03,fa)</code>, <code>(01,fc,03,fa)</code>, <code>(01,02,fd,fa)</code>. I then wrote them to file with either an 8-byte or 64-byte maximum deflate block length. The 64-byte block length image is exactly correct and renders properly.</p>  <p>Complete image contents follow, as hex, where bold are the block lengths and italics are the block data.</p>  <p><em>8-byte block image</em> (renders incorrectly):<br> <code>89 50 4e 47 0d 0a 1a 0a 00 00 00 0d 49 48 44 52 00 00 00 03 00 00 00 01 08 06 00 00 00 1b e0 14 b4 00 00 00 1d 49 44 41 54 78 9c 00</code><strong>00 08</strong><code>ff f7</code><em>00 fb 02 03 fa 01 fc 03</em><code>01</code><strong>00 05</strong><code>ff fa</code><em>fa 01 02 fd fa</em><code>05 ee ac ee a1 e1 2d b9 00 00 00 00 49 45 4e 44 ae 42 60 82</code></p>  <p><em>64-byte block image</em> (renders correctly):<br> <code>89 50 4e 47 0d 0a 1a 0a 00 00 00 0d 49 48 44 52 00 00 00 03 00 00 00 01 08 06 00 00 00 1b e0 14 b4 00 00 00 18 49 44 41 54 78 9c 01</code><strong>00 0d</strong><code>ff f2</code><em>00 fb 02 03 fa 01 fc 03 fa 01 02 fd fa</em><code>05 ee ac ee f8 dc a0 6c 00 00 00 00 49 45 4e 44 ae 42 60 82</code></p>  <p>The beginning of each deflate block consists of 5 bytes: 0 or 1 (depending on if it's the final block) followed by a 2-byte length (in bold above) and its 2-byte one's complement. In the 8-byte block image, the length for the first block is 8 just as it should be. The 8 bytes after the length complement (in italics above) are indeed the values they are supposed to be, and the 9th byte equals 1 (and starts the final block). However, that 1 is being interpreted as a color value (the alpha for the second pixel) instead of as the start of the next block!</p>  <p>Presumably there is something that I'm missing about the structure of deflate blocks. Am I being dumb and making a mistake, or did I misunderstand the specs?</p>