<p>I want to compress a PNG image, to reduce its size but the quality should remain the same. I have tried to compress JPEG picture. Picture compressed about 90% and quality remain the same but when i compress a PNG image with it. No result, no compression. Same size. </p>  <p>Here is my code. </p>  <pre><code>public const string _StatusLog = "StatusLog.csv";         static void Main(string[] args)         {             Console.WriteLine("                 ###   WELCOME   ###");             Console.Write("\n\nPlease enter image folder path :");             string imagePath = Console.ReadLine();             Program p = new Program();             p.VaryQualityLevel(imagePath);             Console.ReadLine();         }         private void VaryQualityLevel(string pathOfImage)         {             try             {                 //Console.Write("Target Directory Path :");                 string targetDirectory = pathOfImage;//Console.ReadLine();                  if (targetDirectory != null)                 {                     string[] allDirectoryInTargetDirectory = Directory.GetDirectories(targetDirectory);                     //PRODUCT DIRECOTY OPEN                     Console.Write("Total Folders found = " + allDirectoryInTargetDirectory.Count());                     Console.Read();                     if (allDirectoryInTargetDirectory.Any())                     {                         foreach (var directory in allDirectoryInTargetDirectory)                         {                             string[] subDirectory = Directory.GetDirectories(directory); // ATTRIBUTE DIRECTORY OPEN                             if (subDirectory.Any())                             {                                 foreach (var filesInSubDir in subDirectory)                                 {                                     string[] allFilesInSubDir = Directory.GetFiles(filesInSubDir);                                     //FILES IN SUB DIR OPEN                                     if (allFilesInSubDir.Any())                                     {                                         foreach (var imageFile in allFilesInSubDir)                                         {                                             try                                             {                                                 Bitmap bmp1 = new Bitmap(imageFile);//pathOfImage);                                                 ImageCodecInfo jpgEncoder = GetEncoder(ImageFormat.Jpeg);                                                  // Create an Encoder object based on the GUID                                                  // for the Quality parameter category.                                                 System.Drawing.Imaging.Encoder myEncoder =                                                     System.Drawing.Imaging.Encoder.Quality;                                                  // Create an EncoderParameters object.                                                  // An EncoderParameters object has an array of EncoderParameter                                                  // objects. In this case, there is only one                                                  // EncoderParameter object in the array.                                                    #region SAVING THE COMPRESS IMAGE FILE                                                 EncoderParameters myEncoderParameters = new EncoderParameters(1);                                                  EncoderParameter myEncoderParameter = new EncoderParameter(myEncoder, 50L);                                                 myEncoderParameters.Param[0] = myEncoderParameter;                                                  bmp1.Save(filesInSubDir + "\\" + "Zip" + GettingImageNameForOptimizedImage(imageFile), jpgEncoder, myEncoderParameters);//pathOfImage                                                 Console.WriteLine(filesInSubDir + GettingImageNameForOptimizedImage(imageFile) + "  CREATED");//pathOfImage                                                  #endregion                                                  #region DELETING THE ORIGNAL FILE                                                 bmp1.Dispose();                                                 System.IO.File.Delete(filesInSubDir + "\\" + GettingImageNameForOptimizedImage(imageFile));//pathOfImage                                                 Console.WriteLine(imageFile.Replace("jpg", "png") + "  DELETED");//pathOfImage                                                  #endregion                                                 //myEncoderParameter = new EncoderParameter(myEncoder, 100L);                                                 //myEncoderParameters.Param[0] = myEncoderParameter;                                                 //bmp1.Save("D:\\" + RemovingImageFormat[0] + "100L" + ".jpg", jpgEncoder, myEncoderParameters);                                                  #region BACK RENAMING FILE TO ORIGNAL NAME                                                 System.IO.File.Move(filesInSubDir + "\\" + "Zip" + GettingImageNameForOptimizedImage(imageFile), filesInSubDir + "\\" + GettingImageNameForOptimizedImage(imageFile));                                                  #endregion                                             }                                             catch (Exception ex)                                             {                                                 Console.Write("\n" + ex.Message + " Press enter to continue :");                                                 Console.ReadLine();                                                  Console.Write("\nWould you like to retry ? [Y/N] :");                                                 string resp = Console.ReadLine();                                                 if (resp == "Y" || resp == "y")                                                 {                                                     Console.WriteLine("                 -------------------\n\n");                                                     Main(null);                                                 }                                             }                                         }                                     }                                 }                             }                         }                     }                 }             }             catch (Exception ex)             {                 Console.Write(ex);                 Console.Read();             }              Console.Write("Press any key to exit...");             Console.Read();             // Get a bitmap. ###################################################################           }         private ImageCodecInfo GetEncoder(ImageFormat format)         {              ImageCodecInfo[] codecs = ImageCodecInfo.GetImageDecoders();              foreach (ImageCodecInfo codec in codecs)             {                 if (codec.FormatID == format.Guid)                 {                     return codec;                 }             }             return null;         }         public string GettingImageNameForOptimizedImage(string pathOfImage)         {             try             {                 string[] splitingPathOfImage = pathOfImage.Split('\\');                 string[] RemovingImageFormat = splitingPathOfImage[splitingPathOfImage.Count() - 1].ToString().Split('.');                 return RemovingImageFormat[0] + ".jpg";             }             catch (Exception)             {                 return null;             }             return null;         }         public static void LoggingOperations(string ImageName, string Status, bool UpdateRequired)         {             try             {                 if (!File.Exists(_StatusLog))                 {                     using (File.Create(_StatusLog)) { }                     DirectorySecurity sec = Directory.GetAccessControl(_StatusLog);                     SecurityIdentifier everyone = new SecurityIdentifier(WellKnownSidType.WorldSid, null);                     sec.AddAccessRule(new FileSystemAccessRule(everyone, FileSystemRights.Modify | FileSystemRights.Synchronize, InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit, PropagationFlags.None, AccessControlType.Allow));                     Directory.SetAccessControl(_StatusLog, sec);                 }                 if (UpdateRequired == true)                 {                     string UpdateStatusText = File.ReadAllText(_StatusLog);                     UpdateStatusText = UpdateStatusText.Replace(ImageName, ImageName + "," + Status);                     File.WriteAllText(_StatusLog, UpdateStatusText);                     UpdateStatusText = "";                 }                 else                 {                     File.AppendAllText(_StatusLog, Environment.NewLine);                     File.AppendAllText(_StatusLog, Status);                 }             }             catch (Exception)             {             }         } </code></pre>  <p>For PNG compression i changed the following line. </p>  <pre><code>Bitmap bmp1 = new Bitmap(imageFile);//pathOfImage); ImageCodecInfo jpgEncoder = GetEncoder(ImageFormat.Png); </code></pre>  <p>Kindly some one help me out. If there is a new method, I welcome it. If this could be altered, it would a lot better. </p>