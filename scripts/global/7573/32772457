<p>I have a large table of connections, and would like to expand that table to include recursive connections.</p>  <p>My data looks like this --</p>  <pre><code>data city_list;    input from_city $ to_city $; datalines;   PORTLAND SEATTLE SEATTLE BOISE BOISE PORTLAND PORTLAND HELENA NYC ORLANDO ORLANDO MIAMI ; run; </code></pre>  <p>I'd like expand the data set to include stopovers, so it ends up looking like this.  I'm not concerned about whether I have both a "PORTLAND/SEATTLE" and a "SEATTLE/PORTLAND" record -- I can handle those afterwards as necessary.</p>  <pre><code>BOISE   HELENA BOISE   PORTLAND BOISE   SEATTLE NYC MIAMI NYC ORLANDO ORLANDO MIAMI PORTLAND    HELENA PORTLAND    SEATTLE SEATTLE HELENA </code></pre>  <p>I've tried using the following macro, but ran into performance problems when there were too many levels of recursion.  I believe the best option would be hash tables, but am not sure how to code this precise scenario.</p>  <pre><code>data city_list;    input from_city $ to_city $; datalines;   PORTLAND SEATTLE SEATTLE BOISE BOISE PORTLAND PORTLAND HELENA NYC ORLANDO ORLANDO MIAMI ; run;  %macro RecurJoin( baseTbl, destTbl, baseKey, compKey );  Proc SQL; Create Table WORK.RECUR_JOIN_TBL as SELECT distinct Base.&amp;baseKey, Connect.&amp;compkey   FROM &amp;baseTbl AS Base        INNER JOIN &amp;baseTbl AS Connect           ON (Base.&amp;compkey = Connect.&amp;baseKey)        LEFT JOIN &amp;baseTbl AS Subbase           ON (Base.&amp;baseKey = Subbase.&amp;baseKey) AND              (Connect.&amp;compkey = Subbase.&amp;compkey)  WHERE Subbase.&amp;baseKey IS NULL; quit;    proc sql noprint;     select count(1) into :connectCnt from RECUR_JOIN_TBL;   quit;  Data &amp;destTbl;   set &amp;baseTbl       RECUR_JOIN_TBL; run;      Proc DataSets nolist;         Delete RECUR_JOIN_TBL;     Quit;  %if &amp;connectCnt &gt; 0 %then %do;     %RecurJoin(     baseTbl=&amp;destTbl,     destTbl=&amp;destTbl,     baseKey=&amp;baseKey,     compKey=&amp;compKey     ); %end;  %mend;  %RecurJoin( baseTbl=city_list, destTbl=FNL_CITY_LIST, baseKey=from_city, compKey=to_city );  Proc Sort data=WORK.FNL_CITY_LIST (where=(NOT(from_city=to_city)));   by from_city to_city; run; </code></pre>