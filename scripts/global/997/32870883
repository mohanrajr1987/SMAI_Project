<p>I am trying to plot a function beta, which should show the stress trajectories, in polar coordinates. The problem deals with drilling. We have a wellbore with unit radius a=1 and a distance from the center of the wellbore out into the rock denoted as R. R should range from the edge of the wellbore; i.e., R=1, out to R=10 (the near far-field area). Chi and F are terms that will be fixed for each plot, for now, I'm wanting to plot chi=F=1. Theta should map out the entire range from 0 to 2*pi. I want to plot this in (R,theta) space.        </p>  <pre><code>import numpy as np #import matplotlib.pyplot as plt from pylab import * # Computation functions def stress_trajectory(R,chi,theta,F,a):     # R is the radius out from the center of the borehole at which we want to know the stress     # Theta is the angle from reference at which we want to know the stress     # a is the radius of the borehole     c = (1.0*a)/(R*1.0)     A = 0.5*(1 - c**2. + (1 - 4*c**2 + 3*c**4.)*np.cos(2*theta))     B = 0.5*(1 - c**2. - (1 - 4*c**2 + 3*c**4.)*np.cos(2*theta))     C = 0.5*(1 + c**2. - (1 + 3*c**4.)*np.cos(2*theta))     D = 0.5*(1 + c**2. + (1 + 3*c**4.)*np.cos(2*theta))     E = 0.5*((1 + 2*c**2. - 3*c**4.)*np.sin(2*theta))     tao_r = c**2 + (1.0/F)*(B-1.0*chi*A) # Radial stress     tao_theta = -1.*c**2 + (1.0/F)*(D - 1.0*chi*C) # Tangential stress     tao_r_theta = (1.0/F)*(1 + 1.0*chi)*E # Shear stress     tan_2B = (2.*tao_r_theta)/(tao_r - tao_theta)     beta = .5*np.arctan(tan_2B)     return tao_r, tao_theta, tao_r_theta, tan_2B, beta </code></pre>  <p>I'm not sure if it would be better to switch to Cartesian coordinates, but I've done that also,</p>  <pre><code>def stress_trajectory_cartesian(X,Y,chi,F,a):     # R is the radius out from the center of the borehole at which we want to know the stress     # Theta is the angle from reference at which we want to know the stress     # a is the radius of the borehole     c = (1.0*a)/(np.sqrt(np.power(X,2)+np.power(Y,2))*1.0)     A = 0.5*(1 - c**2. + (1 - 4*c**2 + 3*c**4.)*np.cos(2*np.arctan(Y/X)))     B = 0.5*(1 - c**2. - (1 - 4*c**2 + 3*c**4.)*np.cos(2*np.arctan(Y/X)))     C = 0.5*(1 + c**2. - (1 + 3*c**4.)*np.cos(2*np.arctan(Y/X)))     D = 0.5*(1 + c**2. + (1 + 3*c**4.)*np.cos(2*np.arctan(Y/X)))     E = 0.5*((1 + 2*c**2. - 3*c**4.)*np.sin(2*np.arctan(Y/X)))     tao_r = c**2 + (1.0/F)*(B-1.0*chi*A) # Radial stress     tao_theta = -1.*c**2 + (1.0/F)*(D - 1.0*chi*C) # Tangential stress     tao_r_theta = (1.0/F)*(1 + 1.0*chi)*E # Shear stress     tan_2B = (2.*tao_r_theta)/(tao_r - tao_theta)     beta = .5*np.arctan(tan_2B)     return tao_r, tao_theta, tao_r_theta, tan_2B, beta </code></pre>  <p>From here, I attempted to plot these as such:</p>  <pre><code>def stress_beta_cartesian(X,Y,chi,F,a):     return stress_trajectory_cartesian(X,Y,chi,F,a)[4] def to_unit_vector_x(angle):     return np.cos(angle) def to_unit_vector_y(angle):     return np.sin(angle) def plot_stresses_cartesian(F,chi,R_min,R_max,R_steps):     pre_X= np.array(list(np.linspace(-R_max,R_max,R_steps)))     X_grid, Y_grid = np.meshgrid(pre_X,pre_X)     cart_betas = stress_beta_cartesian(X_grid,Y_grid,chi,F,R_min)     beta_Xs = to_unit_vector_x(cart_betas)     beta_Ys = to_unit_vector_y(cart_betas)     fig=plt.figure()     ax5=fig.add_subplot(111)     ax5.streamplot(X_grid, Y_grid, beta_Xs, beta_Ys, minlength=.08, arrowstyle='-') #, color=U, linewidth=2, cmap=plt.cm.autumn)     ax5.add_patch(Circle((0, 0), radius=1, zorder=10, facecolor='k', linewidth=2))     ax5.set_title('Beta Stress Trajectories')       plt.tight_layout()     plt.show() </code></pre>  <p>And then I plotted them for these values:</p>  <pre><code>plot_stresses_cartesian(1,1,1,10,180) </code></pre>  <p>[![Beta Stress Trajectories][1]][1]</p>  <p>This is not really what they should look like. In theory, beta is returning different values of arctan() and so the trajectories across the horizontal should look in some way like the plot of arctan(x). Did I properly make the switch to Cartesian coordinates? Is there a better way to do this? Also, because of the nature of the arctangent, there are always two possible angles that you can take the angle of to get the same answer. Maybe I'm plotting only one of the solutions and not the other. </p>  <p>Does anyone have any ideas on how I could plot these betas in a neat, informative manner? </p>