<p>I have this image: <a href="http://i.stack.imgur.com/sD15z.png" rel="nofollow"><img src="http://i.stack.imgur.com/sD15z.png" alt="enter image description here"></a></p>  <p>I want to generate the set of sprites, each 32x32 in size. How can I do this with C++, no library used.  Texture class:</p>  <pre><code>class Texture {  protected:     // We cannot create or copy base class texture objects     // We will only ever have pointers or references to base     // class texture objects used in our program (and these     // will refer to derived class textures     Texture() = default;     Texture(Texture const &amp;) = default;     Texture &amp; operator=(Texture const &amp;) = default;      virtual void LoadFromFile(std::string const &amp; strFileName) = 0;     virtual void LoadFromResource(unsigned int rid) = 0;  public:     virtual ~Texture(){}      //  virtual Rect const &amp; GetBounds() const = 0;     virtual int Width() const = 0;     virtual int Height() const = 0; };  using TEXTURE_PTR = std::shared_ptr&lt;Texture&gt;; </code></pre>  <p>Sprite class:</p>  <pre><code>class Sprite { private:      virtual void draw_impl(Canvas &amp; c) = 0;     TEXTURE_PTR  m_pTexture;  protected:     // Ensure that Sprite objects can only be constructed by derived classes     explicit Sprite(TEXTURE_PTR pt = nullptr,POINT2f const &amp; p = { 0, 0 });      // All Sprite objects have a position state variable     POINT2f  m_position;       // Sprite objects can only be copied by derived class objects     Sprite(const Sprite&amp;) = default;     Sprite&amp; operator=(const Sprite&amp;) = default;  public:      virtual ~Sprite(){}      void OnDraw(Canvas &amp; c);      void SetPosition(POINT2f const &amp; pos);     POINT2f const &amp; GetPosition() const;     void SetTexture(TEXTURE_PTR pt);  }; </code></pre>  <p>AND i create the sprite this way:</p>  <pre><code>TEXTURE_PTR pLightning = std::make_shared&lt;Texture&gt;("resource//Lightning.bmp", RGB(255, 0, 255)); std::shared_ptr&lt;Sprite&gt; pSpark = std::make_shared&lt;Sprite&gt;(pLightning); </code></pre>  <p>How can I generate 9 sprites from the above image with this method?</p>  <p><strong>Edit</strong> I come up with these code but still doesn't work</p>  <pre><code>class WinTexture : public Texture {  protected:     HBITMAP m_hbmImage;     HBITMAP m_hbmMask;     BITMAP  m_bmParam;       virtual void LoadFromResource(UINT rid);     virtual void LoadFromFile(std::string const &amp; strFileName);     void CreateMask(DWORD dwTransparent);  public:     // Construct from Windows Resource     WinTexture(UINT uid, COLORREF dwTransparent);      // Constructor from file load     WinTexture(std::string const &amp; strFilename, COLORREF dwTransparent);      //Contruct from other Texture     WinTexture(std::shared_ptr&lt;WinTexture&gt; wt, int xStart,int yStart, int w, int h);      virtual ~WinTexture();      // Inherited interface //  virtual Rect const &amp; GetBounds() const;     virtual int Width() const;     virtual int Height() const;      HBITMAP ImageHandle() const;     HBITMAP MaskHandle() const;  }; </code></pre>  <p>with this, I want to make a constructor to create from other WinTexture:</p>  <pre><code>WinTexture::WinTexture(std::shared_ptr&lt;WinTexture&gt; wt, int xStart, int yStart, int w, int h)     : Texture(),                // as above     m_hbmImage(NULL),     m_hbmMask(NULL) {     HDC hdcMem1 = CreateCompatibleDC(0);     HDC hdcMem2 = CreateCompatibleDC(0);      m_hbmImage = CreateBitmap(w, h, 1, 1, NULL);     //m_hbmImage = CreateCompatibleBitmap(hdcMem2, 1, 1);     SelectObject(hdcMem1, wt-&gt;ImageHandle());     SelectObject(hdcMem2, m_hbmImage);     BitBlt(hdcMem2, xStart, yStart, w, h,hdcMem1, 0, 0, SRCCOPY);     BitBlt(hdcMem1, xStart, yStart, w, h, hdcMem2, 0, 0, SRCINVERT);     //SaveDC(hdcMem2);     DeleteDC(hdcMem1);     DeleteDC(hdcMem2);     CreateMask(RGB(0, 0, 0)); } </code></pre>  <p><strong>EDIT</strong> Currently, I have created this class from Sprite:</p>  <pre><code>class TexturedSprite : public Sprite {     private:         TEXTURE_PTR  m_pTexture;          virtual void draw_impl(Canvas &amp; c);      protected:      public:         explicit TexturedSprite(TEXTURE_PTR pt = nullptr, POINT2f pos = { 32, 32});         explicit TexturedSprite(int xStart,int yStart, int w, int h,TEXTURE_PTR pt = nullptr, POINT2f pos = { 32, 32 });          virtual ~TexturedSprite(){}          void SetTexture(TEXTURE_PTR pt); }; </code></pre>  <p>I can't figure out how to implement the second constructor, to copy a part of input texture (pt):</p>  <pre><code>TexturedSprite::TexturedSprite(int xStart, int yStart, int w, int h, TEXTURE_PTR pt , POINT2f pos ) :Sprite(pos) {     HDC hdcMem1 = CreateCompatibleDC(0);     HDC hdcMem2 = CreateCompatibleDC(0); //How to assign values to DC?     BitBlt(hdcMem1, 32, 32, w, h, hdcMem2, xStart, yStart, SRCCOPY);     DeleteDC(hdcMem1);     DeleteDC(hdcMem2); } </code></pre>