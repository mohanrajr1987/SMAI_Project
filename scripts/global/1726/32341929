<p>I'm using the Opencv c++ BoW classes with a gaussian based filterbank(it's for textures), and i've been having relatively low classification rates.  I've tracked this down to variation in the clusters produced. </p>  <p>Here's a quick example of my clusting setup:</p>    <pre class="lang-cpp prettyprint-override"><code>  int Flags = KMEANS_PP_CENTERS;   TermCriteria Tc(TermCriteria::MAX_ITER + TermCriteria::EPS, 1000, 0.0001);    float histArr[] = {0,255};   const float* hist= {histArr};   int histSize[] = {10};   int channels[] = {0};   Mat ou1;   namedWindow("testWin", CV_WINDOW_AUTOSIZE);    vector&lt;Mat&gt; compareMe;   for(int i=0;i&lt;2;i++){      BOWKMeansTrainer tstTrain(30, Tc, 5, Flags);      Mat img1 = imread("../lena.png", CV_LOAD_IMAGE_GRAYSCALE);      imshow("testWin", img1);      waitKey(1000);       // filterHandle(img1, imgOut, filterbank, n_sigmas, n_orientations);      cout &lt;&lt; "This is the size.." &lt;&lt; img1.rows &lt;&lt; " cols: " &lt;&lt; img1.cols &lt;&lt; endl;      Mat imgFlat = reshapeCol(img1);      cout &lt;&lt; "This is the size.." &lt;&lt; imgFlat.rows &lt;&lt; " cols: " &lt;&lt; imgFlat.cols &lt;&lt; endl;       tstTrain.add(imgFlat);      Mat clusters = Mat::zeros(10,1, CV_32FC1);      clusters = tstTrain.cluster();       calcHist(&amp;clusters, 1, channels, Mat(), ou1, 1, histSize, &amp;histArr, true, false);      compareMe.push_back(ou1);      tstTrain.clear();      cout &lt;&lt; "This is the tstTrain.size(): " &lt;&lt; tstTrain.descripotorsCount() &lt;&lt; endl;   }    double value =  compareHist(compareMe[0], compareMe[1], CV_COMP_CHISQR);   cout &lt;&lt; "This is the Chisqr comparison.." &lt;&lt; value &lt;&lt; endl;   compareMe.clear(); </code></pre>  <p>The Function 'ReshapeCol' is shown below:</p>  <pre class="lang-cpp prettyprint-override"><code>  Mat reshapeCol(Mat in){     Mat points(in.rows*in.cols, 1,CV_32F);     int cnt = 0;     cout &lt;&lt; "inside. These are the rows: " &lt;&lt;  in.rows &lt;&lt; " and cols: " &lt;&lt; in.cols  &lt;&lt; endl;     for(int i =0;i&lt;in.cols;i++){       for(int j=0;j&lt;in.rows;j++){         points.at&lt;float&gt;(cnt, 0) = in.at&lt;Vec3b&gt;(i,j)[0];         cnt++;       }     }     return points;   } </code></pre>  <p>My Questions are first, from row and col outputs no matter what i change i cant make it one row it is always one column and many rows. Is this an issue based on the <a href="http://docs.opencv.org/modules/features2d/doc/object_categorization.html#bowtrainer-add" rel="nofollow">documentation</a>?</p>  <p>The second more pressing is why do i get such a large variation when classifying the same image. I'm trying to match a precalculated histogram (as my model) with a similar image, but it's not much use if it cant even match itself. </p>  <p>I noticed that the self match 'distances' had a sequence with using KMEANS_PP_CENTERS, this is shown below. </p>  <p>ChiSquare Distances between histograms generated from identical images.</p>  <p>{4,6,6,4,3,4,5,6,4,6,5,3,3,5,6,5,6,5,6,4,5,5,4,5,4,4,6,3,5}</p>  <p>This was generated from my wider project, hosted here: <a href="https://github.com/albertJ32/multiChannel_Kmeans_c/blob/master/novelImgTest.cpp" rel="nofollow">https://github.com/albertJ32/multiChannel_Kmeans_c/blob/master/novelImgTest.cpp</a>.  If anyone has any tips or knows where this variation might be coming it would make my year! this has driven me crazy.. </p>  <p>Thank you in advance.</p>