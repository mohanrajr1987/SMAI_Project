<p>I've got a question about libGDX collision detection. Because it's a rather specific question I have not found any good solution on the internet yet.</p>  <p>So, I already created "humans" that consist of different body parts, each with rectangle-shaped collision detection.</p>  <p>Now I want to implement weapons and skills, which for example look like this:</p>  <p><a href="http://i.stack.imgur.com/kGDXy.png" rel="nofollow">Skill example image</a></p>  <p><strong>Problem</strong></p>  <p>Working with rectangles in collision detections would be really frustrating for players when there are skills like this: They would dodge a skill successfully but the collision detector would still damage them.</p>  <p><strong>Approach 1:</strong></p>  <p>Before I started working with Libgdx I have created an Android game with a custom engine and similar skills. There I solved the problem following way:</p>  <ol> <li>Detect rectangle collision</li> <li>Calculate overlapping rectangle section</li> <li>Check every single pixel of the overlapping part of the skill for transparency</li> <li>If there is any non-transparent pixel found -> Collision</li> </ol>  <p>That's a kind of heavy way, but as only overlapping pixels are checked and the rest of the game is really light, it works completely fine.</p>  <p>At the moment my skill images are loaded as "TextureRegion", where it is not possible to access single pixels. I have found out that libGDX has a Pixmap class, which would allow such pixel checks. Problem is: having them loaded as Pixmaps additionally would 1. be even more heavy and 2. defeat the whole purpose of the Texture system.</p>  <p>An alternative could be to load all skills as Pixmap only. What do you think: Would this be a good way? Is it possible to draw many Pixmaps on the screen without any issues and lag? </p>  <p><strong>Approach 2:</strong></p>  <p>An other way would be to create Polygons with the shape of the skills and use them for the collision detection. </p>  <p><strong>a)</strong> But how would I define a Polygon shape for every single skill (there are over 150 of them)? Well after browsing a while, I found this useful tool: <a href="http://www.aurelienribon.com/blog/projects/physics-body-editor/" rel="nofollow">http://www.aurelienribon.com/blog/projects/physics-body-editor/</a> it allows to create Polygon shapes by hand and then save them as JSON files, readable by the libGDX application. Now here come the difficulties:</p>  <ul> <li>The Physics Body Editor is connected to Box2d (which I am not using). I would either have to add the whole Box2d physics engine (which I do not need at all) just because of one tiny collision detection OR I would have to write a custom BodyEditorLoader which would be a tough, complicated and time-intensive task</li> <li>Some images of the same skill sprite have a big difference in their shapes (like the second skill sprite example). When working with the BodyEditor tool, I would have to not only define the shape of every single skill, but I would have to define the shape of several images (up to 12) of every single skill. That would be extremely time-intensive and a huge mess when implementing these dozens of polygon shapes</li> </ul>  <p><strong>b)</strong> If there is any smooth way to automatically generate Polygons out of images, that could be the solution. I could simply connect every sprite section to a generated polygon and check for collisions that way. There are a few problems though:</p>  <ul> <li>Is there any smooth tool which can generate Polygon shapes out of an image (and does not need too much time therefor)?</li> <li>I don't think that a tool like this (if one exists) can directly work with Textures. It would probably need Pixmaps. It would not be needed to keep te Pixmaps loaded after the Polygon creation though. Still an extremely heavy task!</li> </ul>  <p><strong>My current thoughts</strong></p>  <p>I'm stuck at this point because there are several possible approaches but all of them have their difficulties. Before I choose one path and continue coding, it would be great if you could leave some of your ideas and knowledge.</p>  <p>There might be helpful classes and code included in libGDX that solve my problems within seconds - as I am really new at libGDX I just don't know a lot about it yet.</p>  <p>Currently I think I would go with approach 1: Work with pixel detection. That way I made exact collision detections possible in my previous Android game. </p>  <p>What do you think?</p>  <p>Greetings Felix</p>