<p>I've run into a bit of a confusing problem with OpenGL, it's rather simple but I've failed to find any directly related information.</p>  <h3>What I'm trying to do</h3>  <p>I'm creating several new textures every frame, and right after creation I bind them, use them for drawing, and then delete them right after.</p>  <h3>The Problem</h3>  <p>If I delete every texture right after it was used, the last one to be drawn replaces the previous ones(but their different geometry works as it should). If I batch my deletions after all drawing has been done, it works as expected, but if I do any draw calls at all after deleting the textures, the texture used in the last drawcall replaces the old ones(which could be some common permanent sprite texture).</p>  <h3>Results from debugging</h3>  <p>I've tried using glFlush(), which didn't seem to do anything at all, not deleting the textures at all gives the correct behaviour, and also not drawing anything at all between deleting the textures and calling SwapBuffers() works.</p>  <h3>Code</h3>  <p>This is not what my code looks like, but this is what the relevant parts boil down to:</p>  <pre><code>int Tex1, Tex2, Tex3; glGenTextures(1, &amp;Tex1); glBindTexture(GL_TEXTURE_2D, Tex1); // ... Fill Texture with data, set correct filtering etc. glDrawElements(GL_TRIANGLES, ...); // Using Tex1   glGenTextures(1, &amp;Tex2); glBindTexture(GL_TEXTURE_2D, Tex2); // ... Fill Texture with data, set correct filtering etc. glDrawElements(GL_TRIANGLES, ...); // Using Tex2  // I delete some textures here. glDeleteTextures(1, &amp;Tex1); glDeleteTextures(1, &amp;Tex2);  // If I comment out this section, everything works correctly // If I leave it in, this texture replaces Tex1 and Tex2, but // the geometry is correct for each geometry batch. glGenTextures(1, &amp;Tex3); glBindTexture(GL_TEXTURE_2D, Tex3); // ... Fill Texture with data, set correct filtering etc. glDrawElements(GL_TRIANGLES, ...); // Using Tex3  glDeleteTextures(1, &amp;Tex3);  // ... SwapBuffers(); </code></pre>  <p>I suspect this might have something to do with OpenGL buffering my draw calls, and by the time they are actually processed the textures are deleted? It doesn't really make sense to me though, why would drawing something else <em>after</em> deleting the previous textures cause this behaviour?</p>  <h3>More context</h3>  <p>The generated textures are text strings, that may or may not change each frame, right now I create new textures for each string each frame and then render the texture and discard it right after. The bitmap data is generated with Windows GDI.</p>  <p>I'm not really looking for advice on efficiency, ideally I want an answer that can quote the documentation on the expected/correct behaviour for rendering using temporary textures like this, as well as possible common gotchas with this approach.</p>