<pre><code>public class MyMiddleware {     RequestDelegate _next;      public MyMiddleware(RequestDelegate next)     {         _next = next;     }      public async Task Invoke(HttpContext context)     {          //await context.Response.WriteAsync("Hello!");         await _next(context);         context.Response.Headers.Add("X-ElapsedTime", new[] { "bla" });     } } </code></pre>  <p>As soon as I add something like a header. I cannot receive any more the response from my Web API controller.</p>  <pre><code> public void Configure(IApplicationBuilder app, IHostingEnvironment env)  {      app.UseMyMiddleware();      app.UseMvc();  } </code></pre>  <p>Do I need to read first the answer the following middleware "UseMvc" produced?</p>  <p>I just have a very simple Controller method:</p>  <pre><code>    // GET: api/values     [HttpGet]     public IEnumerable&lt;string&gt; Get()     {         //Task t = new Task(() =&gt; Thread.Sleep(2000));         //t.Start();          return new string[] { "value1", "value2" };     } </code></pre>  <p>I think I found a solution, but it is not actually a full answer:</p>  <pre><code> public class MyMiddleware {     RequestDelegate _next;     HttpContext _context;      public MyMiddleware(RequestDelegate next)     {         _next = next;     }     public async Task Invoke(HttpContext context)     {         _context = context;         context.Response.OnStarting(OnStartingCallback, state: this);         await _next(context);     }     public Task OnStartingCallback(object state)     {         _context.Response.Headers.Set("x-bla", "bla");         return Task.FromResult(0);     } } </code></pre>  <p>I found a reference to: <a href="https://github.com/aspnet/Session/blob/master/src/Microsoft.AspNet.Session/SessionMiddleware.cs" rel="nofollow">https://github.com/aspnet/Session/blob/master/src/Microsoft.AspNet.Session/SessionMiddleware.cs</a> and tried to build my code according to it.</p>  <p>Anyway this code feels not very safe. Is it really thread safe.</p>