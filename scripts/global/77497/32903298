<p>I have a ui-grid with some rows. I added a column with a link to access the details of the row and show it in a new (angularjs) view. The new view gets its data from a http.get command. Is there any way to transfer the "selected row" parameter to the new view so the http.get gets the right details? At the moment I use MVC routing, so there is a Controller in between the two angular parts.</p>  <p>Ui-Grid:</p>  <pre><code> $scope.gridOptions2 = {          enableFiltering: true,         treeRowHeaderAlwaysVisible: false,         rowHeight: 100,         columnDefs: [             { name: 'Trigraph', field: 'ZeigeTrigraphen', width: '10%' },             { name: 'Titel', field: 'Titel', cellTemplate: '&lt;td style="word-wrap:break-word;padding:5px;"&gt;{{ COL_FIELD }}&lt;/td&gt;' },             {name: 'Aktionen',field:'AlarmkalenderId',cellTemplate:'&lt;a href="/Details/{{COL_FIELD}}" id="Details" class="btn btn-success" )"&gt;&lt;i class="glyphicon glyphicon-edit"&lt;/a&gt;'}         ],         onRegisterApi: function (gridApi2) {             $scope.gridApi2 = gridApi2;         }     }; </code></pre>  <p>MVC controller:</p>  <pre><code> public ActionResult Details(int id)         {Viewmodel = ViewModelService.getViewmodel(id);             return View(Viewmodel)         } </code></pre>  <p>http.get in the new view (the returned one above):</p>  <pre><code> $http.get('/api/Alarmkalender/HoleAlarmmassnahme').then(function (resp) {              $scope.gridOptionsEinzelmassnahmen.data = resp.data.IndexEinzelmassnahmen;             $scope.data=resp.data;             $log.info(resp);         }); </code></pre>  <p>WebApiController Method:</p>  <pre><code>public async Task&lt;IHttpActionResult&gt; HoleAlarmmassnahme(int alarmmassnahmeId=1)         { detailsAlarmmassnahmeViewModel = //getting Viewmodel from a Controller/Service              return Ok(detailsAlarmmassnahmeViewModel);         } </code></pre>  <p>Routes:</p>  <pre><code>    public class RouteConfig {     public static void RegisterRoutes(RouteCollection routes)     {         routes.IgnoreRoute("{resource}.axd/{*pathInfo}");          routes.MapRoute(             name: "Default",             url: "{controller}/{action}/{id}",             defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional }         );          routes.MapRoute(             name: "404-PageNotFound",             // This will handle any non-existing urls             url: "{*url}",             // "Shared" is the name of your error controller, and "Error" is the action/page             // that handles all your custom errors             defaults: new { controller = "Shared", action = "Error" }         );     } </code></pre>