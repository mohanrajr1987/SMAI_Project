<p>I have some entities which have data that must only be accessible for some users. </p>  <pre><code>public class Foo {     public virtual Bar { get; set; }     ... }  public class Bar {     public string Secret { get; set; }     ... } </code></pre>  <p>For example <code>Bar.Secret</code> must only be accessible by <code>UserA</code> but not by <code>UserB</code>. I could so something like this:</p>  <pre><code>public class BarsController : ODataController {     [EnableQuery]     public IHttpActionResult Get()     {         if (User.Identity.Name != "UserA")              return Unauthorized();          return _db.Bars();     } } </code></pre>  <p>Besides that being a bad implementation. It doesn't cover this controller:</p>  <pre><code>public class FoosController : ODataController {     [EnableQuery]     public IHttpActionResult Get()     {         return _db.Foos();     } } </code></pre>  <p>Which could be called with <code>/odata/Foos?$expand=Bars</code> and then I could view <code>Bar.Secret</code>. I can't just disable <code>$expand</code> on <code>Foo</code> because that query is totally legit for <code>UserA</code> and also needed.</p>  <p>Is there a way to make OData validate the queries against some predicate that involves the requested entities.</p>  <p>Something like</p>  <pre><code>public class SecureEnableQueryAttribute : EnableQueryAttribute {     public bool ValidateResult(IEnumerable&lt;T&gt; entities)     {         return entities.All(x =&gt; x.Secret == UserA.Secret);     } } </code></pre>