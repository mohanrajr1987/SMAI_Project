<p>I am creating a WebApi Service that interacts with the Yahoo! API that uses OAuth 1.0. I am able to use MVC to call and get the access token back with no issue. I am experimenting in doing the process without using MVC at all. This is what I would like to occur.</p>  <ol> <li>Call Api through the browser (<a href="http://mysite/api/auth/AuthentiateWithYahoo" rel="nofollow">http://mysite/api/auth/AuthentiateWithYahoo</a>)</li> <li>New tab is opened up to auth page, access is given.</li> <li>Redirect is done to another method on the controller and the access token is stored.</li> </ol>  <p>Here is the code that currently works with MVC.</p>  <pre><code>  public ActionResult AuthenticateWithYahoo()     {           var callbackUri = new Uri ("http://localhost/yahoo/api/auth/Home/YahooOAuthCallback");          try         {             //this call eventually does this             //var request = this.Consumer.PrepareRequestUserAuthorization(callback, null, null);             //this.Consumer.Channel.Respond(request);             this.Fantasizer.BeginAuthorization(callbackUri);         }         catch (ProtocolException pe)         {             var webException = pe.InnerException as WebException;             if (webException != null)             {                 HttpWebResponse response = webException.Response as HttpWebResponse;                 if (response != null &amp;&amp; response.StatusCode == HttpStatusCode.Unauthorized)                 {                     var appException =                         new ApplicationException(                             "Unable to authorize with Yahoo. Check YahooConsumerKey and YahooConsumerSecret environment variables.",                             pe);                      throw appException;                 }             }              throw;         }          // This will not get hit         return null;     }      public ActionResult YahooOAuthCallback()     {         // this ends up calling OAUTH complete authorization         this.Fantasizer.CompleteAuthorization();         return RedirectToAction("ListLeagues", "User");     } </code></pre>  <p>What would I need to do to move this process to one that is not dependent on MVC? If possible, passing the access token back in the call would be ideal. Let me know if more information is required.</p>