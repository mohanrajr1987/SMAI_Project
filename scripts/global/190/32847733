<p>I have an application configuration file, for example in Django there is a settings.py file. Within that file are database connection settings like so:</p>  <pre><code>DATABASES = {     'default': {         'ENGINE': 'django.db.backends.mysql',         'NAME': 'db_name',         'USER': 'db_user',         'PASSWORD': 'db_pass',         'HOST': 'localhost',         'PORT': '3306',     }, } </code></pre>  <p>And then in environment specific group_vars files I have some variables that store values that will replace the ones in the settings.py file during a deploy role task.</p>  <p>What is the best practice for the above scenario? Should 'db_name' be something like '[DB_NAME_PLACEHOLDER]' and then Ansible replaces that with a specified variable from the proper group_vars file?</p>  <p><strong>UPDATE</strong></p>  <p>I instead used an approach where I turned settings.py into a jinja2 template and now have a settings.py.j2 file in the templates directory of my deploy role. Then I made a task in my deploy role to use the template module to place the file in the right place.</p>  <p>I also removed settings.py from my django code base, as it is now being written during an ansible deploy play. I had to then edit my .gitignore to ignore changes to the settings.py file. This seems like a hack-y workaround. Maybe place settings.py outside of the django source and then modify DJANGO_SETTINGS_MODULE environment variable?</p>