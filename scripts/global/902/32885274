<p>I have an AngularJS app, which does not use any AMD library since Angular's dependency injection is all what I need for a good architecture. I was inspired for this design by an <a href="https://medium.com/@dickeyxxx/best-practices-for-building-angular-js-apps-266c1a4a6917" rel="nofollow">article on medium.com</a>.</p>  <p>Now I want to use an external library which internally works with <a href="https://dojotoolkit.org/documentation/tutorials/1.10/modules/" rel="nofollow">AMD from DOJO</a> and offers its functionality only via <code>require()</code> (or <code>define()</code>).</p>  <p>So let's wrap this external module in an Angular service:</p>  <pre><code>angular.module('myApp') .factory('myService', function() {     var result = {};     require(['dependantModule'], function(mod) {         result.mod = mod;     });     return result; }); </code></pre>  <p>so that I can consume it:</p>  <pre><code>angular.module('myApp') .controller('MyController', [ 'myService', function(myService) {     console.log('mod: ' + myService.mod); }]); </code></pre>  <p>The console logs <code>mod: undefined</code> when the controller is consumed. The reason is that <code>require()</code> executes it's callback asynchronously, so <code>result.mod</code> is set <strong>after</strong> <code>console.log()</code> gets executed.</p>  <p>Redesign my whole app to also use <code>require()</code> would technically be possible, but is no option anyway because an external library should not force me in one direction.</p>  <p>So what is the best way in AngularJS to use async AMD modules from external libraries?</p>  <h2>Update</h2>  <p>After more research and trial'n'error, I've come up with</p>  <pre><code>angular.module('myApp') .factory('myService', [ '$q', function($q) {     var deferred = $q.defer();     require(['dependantModule'], function(mod) {         var result = {             mod: mod         };         deferred.resolve(result);     });     return deferred.promise; }])  .controller('MyController', [ 'myService', function(myServicePromise) {     myServicePromise.then(function(myService) {         console.log('mod: ' + myService.mod);     }); }]); </code></pre>  <p>But is this the preferred way? Seems fishy, because consumers of the service must know that the injected thing is not the service itself, but only a promise which later resolves to the service.</p>  <h2>Update 2</h2>  <p>As we saw, first declaring the service and <code>require</code>ing the module inside the service does not work. The other way around neither:</p>  <pre><code>require(['dependantModule'], function(mod) {     angular.module('myApp')     .factory('myService', function() {         return {             mod: mod         };     }); });  angular.module('myApp') .controller('MyController', [ 'myService', function(myService) {     console.log('mod: ' + myService.mod); }]); </code></pre>  <p>because the require callback is executed <strong>after</strong> AngularJS will inject the service:</p>  <pre><code>Error: [$injector:unpr] Unknown provider: myServiceProvider &lt;- myService &lt;- MyController </code></pre>