<p>I'm designing an abstract superclass in javascript using dojo. The purpose of the class is to define the contract for any UI element that can enable the user to select an entity with a unique identifier. So far this is my code. </p>  <pre><code>define( [        "dojo/Evented",     "dojo/_base/declare" ], function(Evented, declare){     var NotImplementedException = "Method not implemented";      return declare("EntitySelector", Evented, {         //it's implementation should change the entity selected by the UI         select: function(id){             throw NotImplementedException;         },         //it's implemantation should populate the UI with the data to be selected.         setData: function(dataStore){             throw NotImplementedException;         }      }); }); </code></pre>  <p>I also need that subclasses fire an onSelect event, so I can respond to the user actually selecting an entity.</p>  <p>Is there a way (other than documentation) to indicate that subclasses should fire the onSelect event on their implementation?</p>  <p>Fo example, in Java you usually define a <code>public void addEventListener(ListenerInterface)</code> method to indicate that subclasses should fire an event. In C# you can declare an <code>event EventHandler</code> to achieve something similar.</p>  <p>Is there a way in dojo or general Javascript to achieve this?</p>