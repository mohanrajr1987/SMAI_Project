<p>I have this code. Datastore and tree.  How can I create three different Menus and attach them to three different tree level nodes? How to tell which tree nodes have which Menu?</p>  <pre><code>this.myStore = new Memory({         data: [             { id: 'world', name:'The earth', type:'planet', population: '6 billion'},             { id: 'AF', name:'Africa', type:'continent', population:'900 million', area: '30,221,532 sq km', timezone: '-1 UTC to +4 UTC', parent: 'world'},                 { id: 'EG', name:'Egypt', type:'country', parent: 'AF' },                 { id: 'KE', name:'Kenya', type:'country', parent: 'AF' },                     { id: 'Nairobi', name:'Nairobi', type:'city', parent: 'KE' },                     { id: 'Mombasa', name:'Mombasa', type:'city', parent: 'KE' },                 { id: 'SD', name:'Sudan', type:'country', parenmenuTreet: 'AF' },                     { id: 'Khartoum', name:'Khartoum', type:'AS' },             { id: 'OC', name:'Oceania', type:'continent', population:'21 million', parent: 'world'},             { id: 'EU', name:'Europe', type:'continent', parent: 'world' },                 { id: 'DE', name:'Germany', type:'country', parent: 'EU' },                 { id: 'FR', name:'France', type:'country', parent: 'EU' },                 { id: 'ES', name:'Spain', type:'country', parent: 'EU' },                 { id: 'IT', name:'Italy', type:'country', parent: 'EU' },                 { id: 'IT', name:'Italy', type:'country', parent: 'EU' },             { id: 'NA', name:'North America', type:'continent', parent: 'world' },             { id: 'SA', name:'South America', type:'continent', parent: 'world' }         ],         getChildren: function(object){             return this.query({parent: object.id});         }       });         aspect.around(klasifikacija.myStore, "put", function(originalPut){             // To support DnD, the store must support put(child, {parent: parent}).             // Since memory store doesn't, we hack it.             // Since our store is relational, that just amounts to setting child.parent             // to the parent's id.             return function(obj, options){                 if(options &amp;&amp; options.parent){                     obj.parent = options.parent.id;                 }                 return originalPut.call(klasifikacija.myStore, obj, options);             }       });         // Wrap the store in Observable so that updates to the store are reflected to the Tree       this.myStore = new Observable(this.myStore);        // Create the model       var myModel = new ObjectStoreModel({           store: klasifikacija.myStore,           query: {id: 'world'}       });        // Create the Tree.       var tree = new Tree({           model: myModel,           showRoot: true,           openOnClick: true,           dndController: dndSource,           betweenThreshold: 5       }, "KlasifikacijaID_TreeID");       //tree.placeAt(win.body());        // registriranje listenerjev za gumber       // ADD       var addButton = new Button( {label:"Add"}, "AddButtonID" );       var removeButton = new Button( {label:"Remove"}, "RemoveButtonID" );       on(addButton, "click", lang.hitch(this, "_onAddButtonClick"));       on(removeButton, "click", lang.hitch(this, "_onRemoveButtonClick"));         // Menu and MenuItems       var treeMenu = new Menu({         id: "treeMenu",         style:"display: none;",         //targetNodeIds: ["KlasifikacijaID_TreeID", "AddButtonID", "RemoveButtonID", "spanid1"],         targetNodeIds: ["KlasifikacijaID_TreeID"],         selector: ".dijitTreeNode"       });        var menuItemAdd = new MenuItem({         id: "menuItemAddID",         label: "Add"       });       var menuItemEdit = new MenuItem({         id: "menuItemEditID",         label: "Edit"       });       var menuItemRemove = new MenuItem({         id: "menuItemRemoveID",         label: "Remove"       });        treeMenu.addChild( menuItemAdd );       treeMenu.addChild( menuItemEdit );       treeMenu.addChild( menuItemRemove );       /*       Dijit events similar to DOM evtreeful for button widgets         onChange(newVal): note that the first argument to onChange is the new value, not the event object itself         onDblClick(evt)         onKeyDown(evt)         onKeyPress:(evt)         onKeyUp(evt)         onMouseMove(evt)         onMouseDown(evt)         onMouseOut(evt): probably not useful since it will report mouse out events within the widget’s internal DOM nodes; consider using onMouseLeave instead         onMouseOver(evt): probably not useful since it will report mouse in events within the widget’s internal DOM nodes; consider using onMouseEnter instead         onMouseLeave(evt): when the mouse is moved away from the widget’s outermost DOM node         onMouseEnter(evt): when the mouse is moved over the widget’s outermost DOM node         onMouseUp(evt)       */        // registriranje listenerjev za menuitem v meniju za Nodes       on( menuItemAdd, "click", this._onMenuItemAddAction );       on( menuItemEdit,   "click", this._onMenuItemEditAction ); // pazi tukaj je click ne onClick !!! onClick je za widgete click je za DOM elemente       on( menuItemRemove, "click", this._onMenuItemRemoveAction ); </code></pre>