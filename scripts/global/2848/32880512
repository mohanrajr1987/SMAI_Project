<p>I am trying to implement a function which takes in an int and a list of numbers, and check if all elements of the list is divisible by the int, for example:div_by_x 2 [1;3;4;8;0] = [false;false;true;true;true] I have a helper function which just returns true or false when viable: </p>  <pre><code>let divisible x i =       if i mod x = 0 then true else false;;  </code></pre>  <p>With that, I have already implemented a working recursive div function, which is: </p>  <pre><code>let rec div_by_x x y = match y with      [] -&gt; []     | (hd :: tl) -&gt;        let l1 = div_by_x x tl in divisible x hd :: l1;; </code></pre>  <p>But now I am trying to implement div_by_x with the fold function, defined as: </p>  <pre><code>let rec fold f a l = match l with    [] -&gt; a    | (h::t) -&gt; fold f (f a h) t ;; </code></pre>  <p>I am kinda stuck on how to make the list while keeping the on going list. So far I have </p>  <pre><code>let div_by_x x y= fold divisible x y [] y;; </code></pre>  <p>which doesnt seem to work and yells at me with: "</p>  <blockquote>   <p>Error: This expression has type int -> int -> bool          but an expression was expected of type            ('a -> 'b -> 'c) -> 'd -> 'a -> 'b -> 'c          Type int is not compatible with type 'a -> 'b -> 'c "</p> </blockquote>  <p>Any help? Thanks!</p>