<p>So in Objective-C when using Booleans it's possible, and encouraged, to write code using a variable's non-zero value as it's boolean value, which means you can write code like this:</p>  <pre><code>if (someBool) {     // Stuff } </code></pre>  <p>Also, there are reasons why code like the following is discouraged:</p>  <pre><code>if (someBool == YES) {     // Might run into problems here } </code></pre>  <p>The reasons why checking a boolean against another boolean are better explained <a href="https://www.bignerdranch.com/blog/bools-sharp-corners/">here</a>, but briefly the issue is just that when you're comparing equality to <code>YES</code> or <code>NO</code> directly, you're actually comparing against <code>1</code> and <code>0</code>, respectively. Since Objective-C allows for using non-zero values as a truth value, you could end up comparing something that should be considered true against <code>YES</code> and have the expression resolve to <code>NO</code>, e.g.</p>  <pre><code>int trueNumber = 2; if (trueNumber == YES) {     // Doesn't run because trueNumber != 1 } </code></pre>  <p>Is this still an issue in Swift? Code style issues aside, if I see something like the following</p>  <pre><code>var someBool = true if someBool == true {     // stuff } </code></pre>  <p>is that going to be an issue, or does it not really matter? Are these C-style comparisons still happening under the hood, or is there something built into the Swift BooleanType that prevents these issues?</p>