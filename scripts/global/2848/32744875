<p>So I am currently trying to create a circle linked list (double linked list with each value having a previous, and a next value not equal to null), and I am not sure if I am properly creating it. My goal is to be able to create a LinkedList of values, and then when I iterate through the list, hasNext() should always return true (no null values). I think there is something wrong with the way I am adding values, but I am not sure. Here is the code, with the CircularList class having an inner node class:</p>  <pre><code>public class CircularList&lt;E&gt; { //I decided to still have heads and tails, to link them together private Node&lt;E&gt; first = null; private Node&lt;E&gt; last = null; private Node&lt;E&gt; temp; private int size;  //inner node class private static class Node&lt;E&gt;{ //In this case I am using String nodes     private E data; //matching the example in the book, this is the data of the node     private Node&lt;E&gt; next; //next value     private Node&lt;E&gt; prev; //previous value     //Node constructors, also since in this case this is a circular linked list there should be no null values for previous and next         private Node(E data, Node&lt;E&gt; next, Node&lt;E&gt; prev){         this.data = data;         this.next = next;         this.prev = prev;     } } //end of inner node class public void addValue(E item){     Node&lt;E&gt; n = new Node&lt;E&gt;(item, first, last);     if(emptyList() == true){ //if the list is empty         //only one value in the list         first = n;         last = n;     }     else{ //if the list has at least one value already         temp = first;         first = n;         first.next = temp;         last.next = first;     }     size++; }  public boolean emptyList(){     boolean result = false;     if(first == null &amp;&amp; last == null){ //if there is no values at all         result = true;     }     return result; } } </code></pre>