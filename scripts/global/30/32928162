<p>I'd like to start a brainstorming with this post ... before ask my question, let me go into the scenario:</p>  <p>I'm going to build a software service, it's will be a CRM-like web-based software.<br> So, everyone can subscribe to the service and, as logged user, you can have one or more CONTACTS and one or more EMPLOYEES (employees can sign-in too).</p>  <p>The software is CONTACT centered ... every contact can have PROJECTS, DOCUMENTS, and so on.</p>  <p>NOW THE QUESTION: In order to build a secure and easy to maintain software, this time I was thinking to use separate database. What do you think about having a database dedicated for each subscriber?</p>  <p>Why I ask this question? Well ... The service will have a custom version. This means that a single user (that has subscribed to the service) can have a VERY VERY personalized version, this customization will touch EVERY layer:</p>  <ul> <li>DB structure</li> <li>Model classes</li> <li>Views (this is the easies part)</li> <li>Controllers</li> </ul>  <p>Seems that it's going to be a different application.</p>  <p>I was thinking to keep a master database where all users can login ... and then connect to their private database.</p>  <p>I saw a lot of service out there that also use a personal login page, with a third level domain, like: yourcompany.service.com</p>  <p>Looking to their urls, seems that they use this approach, because we can find something like this:</p>  <p>yourcompany.service.com/contact/1</p>  <p>that shows the details page for a single (first) contact (with ID 1). Seems that it's the first record of the contacts table.</p>  <p>Otherwise, I can keep one database and control everything with the user_id. So, for example, having a single contacts tables to store ALLL the contacts of ALLLLL my users ... and write a custom one only when needed.</p>  <p>I'm stuck ... I have ever worked with one database for one app, but I'd like to give a chance to another approach.</p>  <p>Have you ever faced this problem?  How would you solve it?</p>