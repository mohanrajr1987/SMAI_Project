<p>When creating string literals in C++, I would like to know how the strings are encoded  -- I can specify the encoding form (UTF-8, 16, or 32), but I want to know how the compiler determines the unspecified parts of the encoding.</p>  <p>For UTF-8 the byte-ordering is not relevant, and I would assume the byte ordering of UTF-16 and UTF-32 is, by default, the system byte-ordering.  This leaves the normalization.  As an example:</p>  <pre><code>std::string u8foo = u8"Föo"; std::u16string u16foo = u"Föo"; std::u32string u32foo = U"Föo"; </code></pre>  <p>In all three cases, there are at least two possible encodings -- decomposed or composed.   For more complex characters there might by multiple possible encodings, but I would assume that the compiler would generate one of the normalized forms.</p>  <p>Is this a safe assumption?  Can I know in advance in what normalization the text in <code>u8foo</code> and <code>u16foo</code> is stored?  Can I specify it somehow?  </p>  <p>I am of the impression this is not defined by the standard, and that it is implementation specific.  How does GCC handle it?  Other compilers?</p>