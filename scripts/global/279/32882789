<p>Edit: Solve now, a simple </p>  <pre><code>reload(sys)   sys.setdefaultencoding('utf8') </code></pre>  <p>Was missing in the xliterator.py file.  Now the whole process is slow as hell, but basicly it works. Let's see how that can be tackled...</p>  <p>I have a self-written tool with is converting indian transliterated strings into unicode output, working like this:</p>  <pre><code>&gt;&gt;&gt; x_HK_to_UNI("ahaM") </code></pre>  <p>Wich results in the following string:</p>  <pre><code>'aha\xe1\xb9\x82'' </code></pre>  <p>So far so good, this tool is tested and has been used on converting thousand of documents.  Now i am writing a Django app and wish to apply this function as a filter in a template. The code looks like this:</p>  <pre><code>`enter code here`from __future__ import unicode_literals from django import template from django.utils.encoding import smart_text from xliterator import * register = template.Library()  @register.filter def process_trans_for_html(string):     newstring = []     string = string.split(' ')     for word in string:         if word[-3:] == '_xn' :             newstring.append(x_HK_to_UNI(word[:1]).upper()+(x_HK_to_UNI(word[1:-3]).lower())         elif word[-3:] == '_xh' :             newstring.append(x_HK_to_UNI(word[:-3]).lower())         else:             newstring.append(word)     return ' '.join(newstring) </code></pre>  <p>In the template I pass data to the filter this way: </p>  <pre><code>{{ line.line|process_trans_for_html }} </code></pre>  <p>Basically the function is working as long as nothing is replaced, so when it processes <em>yena_xn</em> it is displayed on the website correctly as <em>Yena</em>. But <em>ahaM_xn</em> should be turned into <em>ahaṃ</em> (this is the job of <code>x_HK_to_UNI</code>) - and when such a word is encountered, the whole string just disappears and leaves blank space on the page.</p>  <p>Any suggestion on this? I tried already all kinds of unicode transformation stuff and there seems to be no much help. I feel rather confused. There is also no error message. </p>  <p>I use Python2.7.</p>  <p>EDIT: Here the relevant parts of xliterator.py:</p>  <pre><code>import sys, re, os  SEPARATOR_PRIMARY=";"  class Xlator(dict): # Xlator is initialized through a mapping     def _make_regex(self):         """Build re object based on the keys of the current dict"""         return re.compile("|".join(map(re.escape, self.keys())))     def __call__(self, match):         """Handler invoked for each regex match"""         return self[match.group(0)]      def xlate(self, text):         """Translate text, returns the modified text"""         return self._make_regex().sub(self, text)  def _transposeDict(d): # returns a dict with key value transposed     nd = {}     for (k,v) in d.items():         nd[v]=k     return nd  #Unicode to HK   DICT_UNI_HK = {'ā':'A','Ā':'A','ī':'I','Ī':'I','ū':'U','Ū':'U',\     'ṛ':'R','Ṛ':'R','ṝ':'RR','ḷ':'L','Ḷ':'L','ḹ':'LL',\     'ṃ':'M','Ṃ':'M','ḥ':'H','Ḥ':'H','ṅ':'G','Ṅ':'G',\     'ñ':'J','Ñ':'J','ṭ':'T','Ṭ':'T','ḍ':'D','Ḍ':'D',\     'ṇ':'N','Ṇ':'N','ś':'z','Ś':'z','ṣ':'S','Ṣ':'S',     }   def x_UNI_to_HK(in_str_UNI): # input:      xlator_Obj = Xlator(DICT_UNI_HK)     return xlator_Obj.xlate(in_str_UNI)   def x_HK_to_UNI(in_str_UNI):     DICT_HK_UNI = dict (zip(DICT_UNI_HK.values(),DICT_UNI_HK.keys()))     xlator_Obj = Xlator(DICT_HK_UNI)     return xlator_Obj.xlate(in_str_UNI) </code></pre>