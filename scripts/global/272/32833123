<p><strong>HUGE DISCLAIMER NOTE:</strong> this only applies if you are processing the resulting html sheet with something that doesn't natively translate HTML entity double quotes that otherwise the XSLT processor should take care of generating even inside a normal double quote wrapped attribute. (e.g. <code>&amp;#34;</code>). I of course realized the escaped double quotes were actually working for my needs only after I wrote this up, because the first thing I had tried was single quotes which didn't parse as JSON, and I've run into touchy JSON parsing situations before so I didn't even think to just go with element escaped double quotes, but this may still benefit some other situations (see: touchy JSON parsing situations), so I'm going to go ahead and post it.</p>  <p>concisely: you don't need to do all of this for JSON that will be acted upon by a modern browser based parser. HTML entity double quotes (<code>&amp;#34;</code>) are valid delimiters for those (yes, even IE).</p>  <hr>  <p>I'm running into a frustrating conundrum with building JSON into an HTML element's attribute via XSLT (specifically, an HTML5 data- attribute for initializing a slider).</p>  <p>XSLT only processes attributes as being wrapped inside double quotes. (note: if there's a processing flag/directive that can swap this, it needs to be one I can call from inside a sheet, not from the initiating call to the processor, as I have no control over that).</p>  <p>JSON requires double quotes to be valid.</p>  <p>Key processing details: I'm working in Saxon 9.3.0.5 and it's being called and initialized by a system I don't have direct access to modify (proprietary CMS code).</p>  <p>I can probably (?) solve this in javascript, but if there's a native XSLT solution I've overlooked then it would be nice to know. I'm assuming there's not, as there's a <a href="http://stackoverflow.com/questions/18028446/need-to-assign-attribute-value-in-single-quote-xslt#comment26375200_18028499">comment from Michael Kay</a> from 2013 where he jokes about how attribute wrapping choice had always been immutable because there should have been no earthly reason to <em>need</em> to change it. I normally would have agreed until now, where I actually do <em>need</em> it because single quotes for the JSON inside the double quoted attribute is actually invalid JSON. <strong>edit:</strong> see the disclaimer, he's still probably right for 99% of even JSON related cases.</p>  <p>I could probably build a separate JSON string in a script element or similar, and then inject it into the attribute via javascript before the related slider function gets run on this, and that's probably what I <em>should</em> do when I refactor this, but I'd like to know what other options are out there, if any.</p>  <p>I'm going to leave this with the not really native/proper XSLT solution that works in a pinch for anyone else who runs into a similar problem, but I <strong>really</strong> want something better if it's out there, as I hate using this type of hack in XSL.</p>  <p>Example code (minus a lot of surrounding matches, the identity xform, etc):</p>  <p>(the issue is specific to adding the 'data-slick' attribute to the matched ul like this)</p>  <pre><code>&lt;xsl:template match="mus:call-template[@name='slick-slider-carousel']//ul"&gt;     &lt;xsl:param name="slider-options" tunnel="yes" /&gt;     &lt;xsl:param name="pcf-context" tunnel="yes" /&gt;     &lt;xsl:copy copy-namespaces="no"&gt;         &lt;xsl:apply-templates select="@attribute" /&gt;         &lt;xsl:attribute name="data-slick"&gt;&lt;xsl:text&gt;{&lt;/xsl:text&gt;             &lt;xsl:apply-templates select="$slider-options" /&gt;             &lt;xsl:text&gt;}&lt;/xsl:text&gt;         &lt;/xsl:attribute&gt;         &lt;xsl:apply-templates select="$pcf-context/gallery/images/image" mode="slick-slider"&gt;             &lt;xsl:with-param name="asset-id" select="$pcf-context/gallery/@asset-id" /&gt;         &lt;/xsl:apply-templates&gt;     &lt;/xsl:copy&gt; &lt;/xsl:template&gt; </code></pre>  <p>Example html layout sheet:</p>  <pre><code>    &lt;mus:call-template name="slick-slider-carousel"&gt;         &lt;div class="image-carousel"&gt;             &lt;ul&gt;             &lt;/ul&gt;         &lt;/div&gt;     &lt;/mus:call-template&gt; </code></pre>  <p>Example tree fragment loaded into $pcf-context from content sheet (via an xsl:sequence):</p>  <pre><code>&lt;gallery created="2015-03-25T21:18:20Z" forceCrop="false" modified="2015-03-25T21:19:31Z" asset_id="649"&gt;   &lt;name&gt;Test&lt;/name&gt;   &lt;thumbnailWidth&gt;100&lt;/thumbnailWidth&gt;   &lt;thumbnailHeight&gt;100&lt;/thumbnailHeight&gt;   &lt;forceCrop&gt;false&lt;/forceCrop&gt;   &lt;advanced&gt;   &lt;/advanced&gt;   &lt;images&gt;     &lt;image created="2015-03-25T21:18:53Z" modified="2015-03-25T21:18:53Z" staging_url="[full-url]/6d640b3f-7e50-4bdf-802d-2d5e33955ed1.jpeg" url="[full-url]/6d640b3f-7e50-4bdf-802d-2d5e33955ed1.jpeg" status="existing"&gt;       &lt;storedName&gt;6d640b3f-7e50-4bdf-802d-2d5e33955ed1.jpeg&lt;/storedName&gt;       &lt;friendlyName&gt;d01454b9-5eab-4a7f-b999-3ec92313b193.jpeg&lt;/friendlyName&gt;       &lt;thumbnail staging_url="[full-url]/thumb/6d640b3f-7e50-4bdf-802d-2d5e33955ed1.jpeg" url="[full-url]/6d640b3f-7e50-4bdf-802d-2d5e33955ed1.jpeg"&gt;         &lt;width&gt;100&lt;/width&gt;         &lt;height&gt;100&lt;/height&gt;       &lt;/thumbnail&gt;       &lt;title&gt;A very cute puppy&lt;/title&gt;       &lt;description&gt;Cute puppy&lt;/description&gt;       &lt;caption&gt;Look at that cute puppy! lorem ipsum blah blah blah&lt;/caption&gt;       &lt;link&gt;       &lt;/link&gt;     &lt;/image&gt;   &lt;/images&gt; &lt;/gallery&gt; </code></pre>