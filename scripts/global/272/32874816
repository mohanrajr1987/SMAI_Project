<p>follow-on question to <a href="http://stackoverflow.com/questions/32642492/spring-mvc-controller-method-for-rendering-soap-message-from-a-webservice-with-xslt">spring mvc controller method for rendering soap message from a webservice with xslt</a>>this question</p>  <p>I've learned I need to wrap my class and response-class objects in JAXBElements to avoind the "no XmlRootElement" issue. I've whipped a couple of methods to test different ways of using WebServiceTemplate.marshalSendAndReceive() - they "work" in that they don't crash but all fail with pesky "cannot be converted to XSLT Source" errors. So I'm still missing a puzzle piece there. Now I've come across WebServiceTemplate.sendSourceAndReceiveToResult() that seems like the more Spring-ish way to go but I can't figure out how get from a JAXBElement object to a Source or StreamSource object. Ooof.</p>  <p>My SOAP web service</p>  <p>localhost:8080/myWebService/sayHello  yields</p>  <pre><code>&lt;soap:Envelope&gt;   &lt;soap:Body&gt;     &lt;ns2:sayHelloResponse&gt;       &lt;return&gt;greetings from the web service! time is 2015-09-10T22:25:05.281&lt;/return&gt;     &lt;/ns2:sayHelloResponse&gt;   &lt;/soap:Body&gt; &lt;/soap:Envelope&gt; </code></pre>  <p>I've crafted a companion spring MVC webapp ("the client") to consume the web service. I used wsimport aimed at the wsdl to automagically generate the ObjectFactory, the interface and all the method/methodRespose class-pairs. </p>  <p>Pertinent snippets...</p>  <p>WEB-INF/xsl/XSLTview.xsl  exists and tests out ok generated classes SayHello and SayHelloResponse, which exist, and a Spring MVC-type controller containing</p>  <pre><code>//old way @Autowired @Resource(name="formsWebServicePortProxy") FormsEndpoint   formsWebServicePortProxy; // comes in from bean  //new way @Autowired @Resource(name="webServiceTemplate") WebServiceTemplate webServiceTemplate = new WebServiceTemplate(); // comes in from bean  gov.zz.dept.forms.web.endpoint.ObjectFactory objFactory = new gov.zz.dept.forms.web.endpoint.ObjectFactory();  //throws  "Value 'javax.xml.bind.JAXBElement@9dfbef' cannot be converted to XSLT Source" error @RequestMapping(value="/trySomething_I") public ModelAndView trySomthing_I( HttpServletRequest  request,                                    HttpServletResponse response) {     ModelAndView model = null;     Source ssource = null;     Result rresult = null;      SayHello         woof = new SayHello();     SayHelloResponse bark = null;      JAXBElement&lt;SayHello&gt;         jaxbWoof = objectFactory.createSayHello(woof);     JAXBElement&lt;SayHelloResponse&gt; jaxbBark = (JAXBElement&lt;SayHelloResponse&gt;) webServiceTemplate.marshalSendAndReceive(jaxbWoof);     bark = jaxbBark.getValue();     String whatSayHelloSays = bark.getReturn();      // adds the XML source file to the model so the XsltView can detect     model = new ModelAndView("XSLTView");     model.addObject("xmlSource", jaxbBark);      return model; }  //throws "Value 'gov.zz.dept.forms.web.endpoint.SayHelloResponse@1c3ea10' cannot be converted to XSLT Source" error @RequestMapping(value="/trySomething_II") public ModelAndView trySomething_II( HttpServletRequest  request,                                      HttpServletResponse response) {     ModelAndView model = null;     Source ssource = null;     Result rresult = null;      SayHello         woof = new SayHello();     SayHelloResponse bark = null;      JAXBElement&lt;SayHello&gt;         jaxbWoof = objectFactory.createSayHello(woof);     JAXBElement&lt;SayHelloResponse&gt; jaxbBark = (JAXBElement&lt;SayHelloResponse&gt;) webServiceTemplate.marshalSendAndReceive(jaxbWoof);     bark = jaxbBark.getValue();     String whatSayHelloSays = bark.getReturn();      // adds the XML source file to the model so the XsltView can detect     model = new ModelAndView("XSLTView");     model.addObject("xmlSource", bark);      return model; }  //throws  "Value 'greetings from the web service! time is 2015-09-29T00:11:19.718' cannot be converted to XSLT Source" error @RequestMapping(value="/trySomething_III") public ModelAndView trySomething_III( HttpServletRequest  request,                                       HttpServletResponse response) {     ModelAndView model = null;     Source ssource = null;     Result rresult = null;      SayHello         woof = new SayHello();     SayHelloResponse bark = null;      JAXBElement&lt;SayHello&gt;         jaxbWoof = objectFactory.createSayHello(woof);     JAXBElement&lt;SayHelloResponse&gt; jaxbBark = (JAXBElement&lt;SayHelloResponse&gt;) webServiceTemplate.marshalSendAndReceive(jaxbWoof);     bark = jaxbBark.getValue();     String whatSayHelloSays = bark.getReturn();      // adds the XML source file to the model so the XsltView can detect     model = new ModelAndView("XSLTView");     model.addObject("xmlSource", whatSayHelloSays);      return model; }  //throws  "Value '&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;' cannot be converted to XSLT Source" error @RequestMapping(value="/trySomething_IV") public ModelAndView trySomething_IV( HttpServletRequest  request,                                      HttpServletResponse response) {     ModelAndView model = null;     Source ssource = null;     Result rresult = null;      SayHello         woof = new SayHello();     SayHelloResponse bark = null;      JAXBElement&lt;SayHello&gt;         jaxbWoof = objectFactory.createSayHello(woof);     JAXBElement&lt;SayHelloResponse&gt; jaxbBark = (JAXBElement&lt;SayHelloResponse&gt;) webServiceTemplate.marshalSendAndReceive(jaxbWoof);      bark = jaxbBark.getValue();     String whatSayHelloSays = bark.getReturn();      org.springframework.oxm.Marshaller     marshaller = webServiceTemplate.getMarshaller();     org.springframework.oxm.Unmarshaller unmarshaller = webServiceTemplate.getUnmarshaller();             StringResult xmlResult = new StringResult();     try {         marshaller.marshal(bark, xmlResult);     } catch (XmlMappingException e) {         // TODO Auto-generated catch block         e.printStackTrace();     } catch (IOException e) {         // TODO Auto-generated catch block         e.printStackTrace();     }      // adds the XML source file to the model so the XsltView can detect     model = new ModelAndView("XSLTView");     model.addObject("xmlSource", xmlResult);      return model; }      //havent got this working yet but does compile @RequestMapping(value="/trySomething_X") public ModelAndView trySomething_X( HttpServletRequest  request,                                     HttpServletResponse response) {     ModelAndView model = null;     javax.xml.transform.Source source = null;     javax.xml.transform.Result result = null;      SayHello         woof = new SayHello();     SayHelloResponse bark = null;      JAXBElement&lt;SayHello&gt;         jaxbWoof = objectFactory.createSayHello(woof);     JAXBElement&lt;SayHelloResponse&gt; jaxbBark = null;      org.springframework.oxm.Marshaller     marshaller = webServiceTemplate.getMarshaller();     org.springframework.oxm.Unmarshaller unmarshaller = webServiceTemplate.getUnmarshaller();             /* need some way to get from JAXBElement&lt;SayHello&gt; to Source or StreamSource */      webServiceTemplate.sendSourceAndReceiveToResult(source, result);      // adds the XML source file to the model so the XsltView can detect     model = new ModelAndView("XSLTView");     model.addObject("xmlSource", result);      return model; } </code></pre>  <p>The goal here is for a method to somehow exercise the web service' sayHello() , which is a SOAP message, merge it with the xsl to produce a wep page.  Anyone have any suggestions/hints/constructive criticisms/examples they'd care to share?</p>  <p>TIA,</p>  <p>Still-learning Steve</p>