<p>follow-on question to <a href="http://stackoverflow.com/questions/32874816/spring-mvc-controller-method-for-rendering-soap-message-from-web-service-with-xslt---almost-there">spring mvc controller method for rendering soap message from web service with xslt - almost there</a>>this question</p>  <p>My SOAP web service</p>  <p>localhost:8080/myWebService/sayHello  yields</p>  <pre><code>&lt;soap:Envelope&gt;   &lt;soap:Body&gt;     &lt;ns2:sayHelloResponse&gt;       &lt;return&gt;greetings from the web service! time is 2015-09-10T22:25:05.281&lt;/return&gt;     &lt;/ns2:sayHelloResponse&gt;   &lt;/soap:Body&gt; &lt;/soap:Envelope&gt; </code></pre>  <p>I've crafted a companion spring MVC webapp ("the client") to consume the web service. I used wsimport aimed at the wsdl to automagically generate the ObjectFactory, the interface and all the method/methodRespose class-pairs. </p>  <p>Pertinent snippets...</p>  <p>WEB-INF/xsl/XSLTview.xsl  exists and tests out ok generated classes SayHello and SayHelloResponse, which exist, and a Spring MVC-type controller containing</p>  <pre><code>@RequestMapping(value="/trySomething_IV") public ModelAndView trySomething_IV( HttpServletRequest  request,                                      HttpServletResponse response) {     ModelAndView model = null;     Source ssource = null;     Result jaxbResult = null;     Result result = null;      SayHello         woof = new SayHello();     SayHelloResponse bark = null;      JAXBElement&lt;SayHello&gt;         jaxbWoof = objFactory.createSayHello(woof);     JAXBElement&lt;SayHelloResponse&gt; jaxbBark = (JAXBElement&lt;SayHelloResponse&gt;) webServiceTemplate.marshalSendAndReceive(jaxbWoof);      bark = jaxbBark.getValue();     String whatSayHelloSays = bark.getReturn();      org.springframework.oxm.Marshaller     marshaller = webServiceTemplate.getMarshaller();     org.springframework.oxm.Unmarshaller unmarshaller = webServiceTemplate.getUnmarshaller();      org.springframework.oxm.jaxb.Jaxb2Marshaller marshaller2 = new org.springframework.oxm.jaxb.Jaxb2Marshaller();      java.io.OutputStream baos = new ByteArrayOutputStream();     StreamResult jaxbStreamResult = new StreamResult( baos);     String xmlString = "dammit";     try {         marshaller.marshal( jaxbBark, jaxbStreamResult);         xmlString = new String(((ByteArrayOutputStream) baos).toByteArray(), "UTF-8");     } catch (UnsupportedEncodingException e1) {         // TODO Auto-generated catch block         e1.printStackTrace();     } catch (XmlMappingException e) {         // TODO Auto-generated catch block         e.printStackTrace();     } catch (IOException e) {         // TODO Auto-generated catch block         e.printStackTrace();     }      // adds the XML source file to the model so the XsltView can detect     model = new ModelAndView("XSLTView");     model.addObject("xmlSource", xmlString);      return model; } </code></pre>  <p>which, when called throws</p>  <pre><code>Request processing failed; nested exception is java.lang.IllegalArgumentException: Value '&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;&lt;ns2:sayHelloResponse xmlns:ns2="http://endpoint.web.forms.dept.zz.gov/"&gt;&lt;return&gt;greetings from the web service! time is 2015-10-03T12:58:08.468&lt;/return&gt;&lt;/ns2:sayHelloResponse&gt;' cannot be converted to XSLT Source </code></pre>  <p>The value sure looks good to me.  Now it gets weird  -  if I write xmlString to a local file then read it in with this method</p>  <pre><code>@RequestMapping(value="/viewXSLTSayHelloResponse") public ModelAndView viewXSLTSayHelloResponse( HttpServletRequest  request,                                           HttpServletResponse response) throws IOException {     ModelAndView model = null;     Source source = null;     try {         source = new StreamSource( new File( "C:/chris_stuff/sayHelloResponse.xml"));     } catch ( Exception eef) {         eef.printStackTrace();     }      // adds the XML source file to the model so the XsltView can detect     model = new ModelAndView("XSLTView");     model.addObject("xmlSource", source);              return model; } </code></pre>  <p>everything works and I see a page containing</p>  <pre><code>greetings from the web service! time is 2015-10-03T12:58:08.468 </code></pre>  <p>as expected. So I'm stumped. Why does addObject method burp on what it receives from the webservice but not from the file when the two look identical? Maybe it has something to do with using ByteArrayOutputStream, or some fiendishly subtle coding issue ivisible to the naked eye.</p>  <p>Any ideas?</p>  <p>TIA,</p>  <p>Still-learning Steve</p>