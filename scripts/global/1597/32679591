<p>sorry, I know such questions happened here, but I cannot action them in my code, I am a beginner... So, I am trying to get a GPS coordinates read from LocationManager and my code is throwing a "Can't create handler inside thread that has not called Looper.prepare()".</p>  <p>So my code works this way. I used a Timer and Timertask classes to create a scheduled task from which my coordinates are being read.</p>  <p>This is a timer class:</p>  <pre><code>public class GeoLocationTimer extends Timer { private List coords; private Context context;  public GeoLocationTimer(Context context){     this.context = context;     this.coords = new ArrayList&lt;Double&gt;();     //Log.e("cont timer","content" + context); }  public void addPosition(Double pos) {     this.coords.add(pos); }  public void scheduleTasks(long interval) {     //Log.e("z schedule","cont"+context);     this.schedule(new GeoLocationTask(this, context), 0, interval); }  public void cancelTasks() {     this.cancel(); }  public List getList(){     return coords; } </code></pre>  <p>This is task:</p>  <pre><code>public class GeoLocationTask extends TimerTask{ private final GeoLocationTimer timerContext; private final Context context; private Pair&lt;Double, Double&gt; coordsSet;   public GeoLocationTask(GeoLocationTimer timerContext, Context context){     this.timerContext = timerContext;     this.context = context; }  @Override public void run() {     // TODO Auto-generated method stub     GeoActivity tracker = new GeoActivity(context);     coordsSet = tracker.getLocation();     Log.e("first","timertask");     if (coordsSet != null){     Log.e("first","a tu wartosc" + coordsSet.first);     Log.e("second","a tu wartosc" + coordsSet.second);      timerContext.addPosition(coordsSet.first);     timerContext.addPosition(coordsSet.second);     //context.addPosition(tracker.getLocationNow().get(1));     } } public boolean cancel() {     return false; }  } </code></pre>  <p>Here is context from which I am trying to run this task:</p>  <pre><code>package com.example.gpstracking;  public class GeoActivity extends ContextWrapper { Context context; public GeoActivity(Context base) {     super(base);     this.context = base; }  public Pair&lt;Double, Double&gt; getLocation(){      Tracking track = new Tracking(context);     return track.getLocation(); } </code></pre>  <p>And tracking now:</p>  <pre><code>public class Tracking extends Service implements LocationListener{ private final Context mContext; Location location; // location double latitude; // latitude double longitude; // longitude  // The minimum distance to change Updates in meters private static final long MIN_DISTANCE_CHANGE_FOR_UPDATES = 10; // 10 meters  // The minimum time between updates in milliseconds private static final long MIN_TIME_BW_UPDATES = 1000 * 30 * 1; // 0.5 minute  // flag for GPS status boolean isGPSEnabled = false;  // flag for network status boolean isNetworkEnabled = false; boolean canGetLocation = false;  protected LocationManager locationManager;  public Tracking(Context context) {     this.mContext = context; }   public Pair&lt;Double, Double&gt; getLocation() { try {     locationManager = (LocationManager) mContext.getSystemService(LOCATION_SERVICE);      // getting GPS status     isGPSEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);      // getting network status     isNetworkEnabled = locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);      if (!isGPSEnabled &amp;&amp; !isNetworkEnabled) {         // no network provider is enabled         Log.e("no provider","turn it on man!");     } else {         this.canGetLocation = true;         // First get location from Network Provider         if (isNetworkEnabled) {             Log.e("Network", "Network");                 location = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);                 latitude = location.getLatitude();                 longitude = location.getLongitude();                 Log.e("latitude","latitude"+latitude);                 Log.e("longitude","longitude"+longitude);                 locationManager.requestLocationUpdates(                         LocationManager.NETWORK_PROVIDER,                         MIN_TIME_BW_UPDATES,                         MIN_DISTANCE_CHANGE_FOR_UPDATES, this);                 return new Pair(latitude,longitude);           }         // if GPS Enabled get lat/long using GPS Services         if (isGPSEnabled) {             Log.e("GPS", "GPS");                 locationManager.requestLocationUpdates(                         LocationManager.GPS_PROVIDER,                         MIN_TIME_BW_UPDATES,                         MIN_DISTANCE_CHANGE_FOR_UPDATES, this);                 location = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);                 longitude = location.getLongitude();                 return new Pair(latitude,longitude);           }     }  } catch (Exception e) {     Log.e("excepton:","exp" + e.getMessage());     e.printStackTrace();     e.getMessage(); }  return new Pair(0.0,0.0); }  @Override public void onLocationChanged(Location location) {     // TODO Auto-generated method stub  } </code></pre>  <p>So, sorry for being stupid. Could someone help me with this?</p>  <p>Cheers A</p>