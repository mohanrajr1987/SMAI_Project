<p>I am doing something like this in Angular. <br>After compiled, the object will not be passed to the DirectiveB correctly. <br>However, if I passed the object defined in scope, it will be fine. <br>I wonder why this happens and how can I pass an object(not in scope) to a directive with a compiled html string in an easy way? I used closure to do that, but it is not easy to maintain. <br><br>In DirectiveA.js:</p>  <pre><code>.directive('DirectiveA', function($compile, $parse) {     return     ...     link: function(scope, element, attrs) {          function func_be_called_somewhere (...) {              var obj= {"key":"value"};   //obj is not in scope, I create it here              var el = '&lt;DirectiveB para="obj" ...&gt;';             var content = $compile(el)(scope);  //compiled here             element.append(content);         }     } } </code></pre>  <p><br>In DirectiveB.js:</p>  <pre><code>.directive('DirectiveB', function($compile, $rootScope, $parse) {     ...     scope: {         ...         para: '='         ...     }     link: function(scope, element, attr) {         console.log(scope.para); //undefined     } } </code></pre>  <p>JS BIN : <a href="http://jsbin.com/depohoqofi/edit?html,js,console,output" rel="nofollow">http://jsbin.com/depohoqofi/edit?html,js,console,output</a></p>