<p>I'm writing app functionality, that set loading gif when request are executing (in learning purposes). I use AngularJS 1.4.5, "Controller as" syntax and John Papa style guides. So, I wrote an <em>interceptor</em> that pass quantity of current request to service:</p>  <pre><code>(function () {     'use strict';     angular         .module('eventApp')         .factory('requestInterceptorService', requestInterceptorService);      requestInterceptorService.$inject = ['$q', 'loadingService'];      function requestInterceptorService($q, loadingService) {          var numLoadings = 0;          var requestInterceptorServiceFactory = {             request: request,             response: response,             responseError: responseError         };         return requestInterceptorServiceFactory;          function request(config) {             numLoadings++;             loadingService.setLoaderStatus(numLoadings);             return config || $q.when(config);         }         function response(response) {             numLoadings--;             loadingService.setLoaderStatus(numLoadings);             return response || $q.when(response);          }         function responseError(response) {             numLoadings--;             loadingService.setLoaderStatus(numLoadings);             return $q.reject(response);         }     } })(); </code></pre>  <p>This is my <em>loading.service</em> with flag <em>isLoadgerEnabled</em>, that indicate whether we need to show loading image or not:</p>  <pre><code>(function () {     'use strict';     angular         .module('eventApp')         .factory('loadingService', loadingService);      function loadingService() {          var isLoaderEnabled = false;          var loadingServiceFactory = {             setLoaderStatus: setLoaderStatus,             getLoaderStatus: getLoaderStatus,             isLoaderEnabled: isLoaderEnabled         };          return loadingServiceFactory;          function setLoaderStatus(numberOfRequests) {             var status = false;             if (numberOfRequests === 0) {                 status = false;             }             if (numberOfRequests !== 0) {                 status = true;             }             isLoaderEnabled = status;         }          function getLoaderStatus() {             return isLoaderEnabled;         }     } })(); </code></pre>  <p>Above code works for me.  On view I have <em>div</em> with loading image and <em>ng-show directive</em>, that listens flag from <em>index controller:</em></p>  <pre><code>&lt;div id="loaderDiv"&gt;    &lt;img src="client/assets/img/loader.gif" class="content-loader"          ng-show="index.isLoaderEnabled" /&gt; &lt;/div&gt;   .controller('indexController', indexController);      indexController.$inject = ['$location', 'authService', 'authModal', 'loadingService', '$scope'];      function indexController($location, authService, authModal, loadingService, $scope) {         var vm = this;          vm.isLoaderEnabled = loadingService.isLoaderEnabled;         //code with other functionality           $scope.$watch(function () {             return loadingService.isLoaderEnabled;         }, function (newValue) {             vm.isLoaderEnabled = newValue;         });     } })(); </code></pre>  <p>My problem: vm.isLoaderEnabled <em>isn't updating with service</em> (actually vm.isLoaderEnabled always false) and I'm not sure where is problem. I would like to write efficient and elegant solution for this functionality, maybe without $scope (if it's possible). I'm ready for questions, refactoring advice or better ideas to bind data to view. </p>