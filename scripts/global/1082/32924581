<p><a href="http://i.stack.imgur.com/zzRdl.png" rel="nofollow"><img src="http://i.stack.imgur.com/zzRdl.png" alt="enter image description here"></a></p>  <p>Noticeably thicker on the left side. Using a Matte Border does not produce this. What I want to know is why LineBorder would create this and not MatteBorder.</p>  <p>This is a JButton being placed in a JPanel which is then being added to a JFrame. </p>  <p>Relevant code:</p>  <pre><code>package test;  import java.awt.Color; import java.awt.Dimension; import java.awt.FlowLayout; import java.awt.Font; import java.awt.event.ActionEvent; import java.awt.event.ActionListener;  import javax.swing.JButton; import javax.swing.JPanel; import javax.swing.border.LineBorder;    public class View extends JPanel{       public View(){         JPanel displayPanel = new JPanel();         displayPanel.setBackground(Color.WHITE);         displayPanel.setSize(500, 500);          JButton backspace = createButton("\u2190", "backspace", Color.RED, null, new Controller());          backspace.setOpaque(false);         backspace.setSize(25, 25);         backspace.setBorder(new LineBorder(Color.RED, 1));         backspace.setMinimumSize(new Dimension(25, 25));         backspace.setPreferredSize(new Dimension(25, 25));          displayPanel.add(backspace);          add(displayPanel);     }      private JButton createButton (String text, String ac, Color fg, Color bg, ActionListener handler){        JButton button = new JButton();        button.setText(text);        button.setForeground(fg);        button.setBackground(bg);        if (ac!= null){            button.setActionCommand(ac);        }        button.setFont(new Font(button.getFont().getName(), button.getFont().getStyle(), 20));        button.addActionListener(handler);        return button;    }      private class Controller implements ActionListener{          @Override         public void actionPerformed(ActionEvent e) {             String foo = e.getSource().toString();             System.out.println(foo);             //display.setText(button.getActionListeners().toString());          }      }  } </code></pre>  <p>And the main:</p>  <pre><code>package test;  import java.awt.Dimension; import java.awt.EventQueue; import java.awt.Toolkit;  import javax.swing.JFrame;  public class Foo{        public static void main (String args[]){             final int height = 400;             final int width =  330;             Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();             EventQueue.invokeLater(new Runnable(){           @Override         public void run() {          JFrame frame = new JFrame();          frame.setSize(330, 400);           frame.setLocation((screen.width - width )/2, (screen.height - height)/2);          frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);          frame.setResizable(false);          frame.setContentPane(new View());          frame.setVisible(true);            }       });         }     } </code></pre>  <p>If I switch it to </p>  <pre><code>  backspace.setBorder(new MatteBorder(1, 1, 1, 1, Color.RED)); </code></pre>  <p>It displays as desired.</p>  <p>What is causing the thickness inconsistency in LineBorder?</p>