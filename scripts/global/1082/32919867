<p>I have a <code>JTable</code>:</p>  <p><a href="http://i.stack.imgur.com/XcAg7.png" rel="nofollow"><img src="http://i.stack.imgur.com/XcAg7.png" alt="enter image description here"></a></p>  <p>after I swap columns unfortunately the flags are not rendered anymore:</p>  <p><a href="http://i.stack.imgur.com/3KDKc.png" rel="nofollow"><img src="http://i.stack.imgur.com/3KDKc.png" alt="enter image description here"></a></p>  <p>I assume it is the fault of my <code>getColumnClass</code> method where I have fixed class for every column, but I don't know how to fix this issue.</p>  <pre><code>package zad1;  import java.awt.BorderLayout; import java.awt.Color; import java.awt.Component; import java.awt.Image; import java.awt.image.BufferedImage; import java.io.BufferedReader; import java.io.File; import java.io.FileReader; import java.util.Arrays; import java.util.Vector;  import javax.imageio.ImageIO; import javax.swing.Icon; import javax.swing.ImageIcon; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.JTable; import javax.swing.table.DefaultTableModel; import javax.swing.table.TableCellRenderer; import javax.swing.table.TableModel;  public class CountryTable extends JTable {         public CountryTable(String countriesFileName) {         Vector&lt;String&gt; columnNames = new Vector&lt;String&gt;();         Vector&lt;Vector&lt;Object&gt;&gt; data = new Vector&lt;Vector&lt;Object&gt;&gt;();         try {             BufferedReader br = new BufferedReader(new FileReader(countriesFileName));             columnNames.addAll(Arrays.asList(br.readLine().split("\t")));             System.out.println(columnNames);             String line;             while ((line = br.readLine()) != null) {                 String[] attributes = line.split("\t");                 Vector&lt;Object&gt; rowData = new Vector&lt;Object&gt;();                 rowData.add(attributes[0]);                 rowData.add(attributes[1]);                 rowData.add(Long.valueOf(attributes[2]));                 BufferedImage icon = ImageIO.read(new File("./data/" + attributes[3]));                 double ratio = (double) icon.getWidth() / icon.getHeight();                 rowData.add(new ImageIcon(icon.getScaledInstance(30, 20, Image.SCALE_FAST)));                 data.add(rowData);             }             br.close();         } catch (Exception e) {             e.printStackTrace();         }         setModel(new MyTableModel(data, columnNames));         setRowHeight(30);         getColumnModel().getColumn(2).setCellRenderer(new PopulationCellRenderer());         for (int i = 0; i &lt; getColumnCount(); i++) {             getColumnModel().getColumn(i).setWidth(400);         }     }      @Override     public Class getColumnClass(int column) {         switch (column) {         case 0:             return String.class;// Panstwo         case 1:             return String.class;// stolica         case 2:             return Long.class;// ludnosc         case 3:             return Icon.class; // flaga jakiej klasy jest dana komorka w danej kolumnie aby tabela ja poprawnie wyswietlila         default:             return String.class;         }     }       class MyTableModel extends DefaultTableModel {         public MyTableModel(Vector&lt;Vector&lt;Object&gt;&gt; data, Vector&lt;String&gt; columnNames) {             super(data, columnNames);//wywolanie konstruktora z nadklasy             System.out.println(columnNames);         }          @Override         public boolean isCellEditable(int row, int column) {             return column == 3;         }     }      class PopulationCellRenderer extends JLabel implements TableCellRenderer {          @Override         public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {             Long population = (Long) value;             setHorizontalAlignment(JLabel.RIGHT);             if (population &gt; 20000000) {                 setForeground(Color.red);             } else {                 setForeground(Color.BLACK);             }             setText(population + "");             return this;         }      } } </code></pre>