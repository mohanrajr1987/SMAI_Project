<p>I have an web-application developed using C# and EXT.NET in Visual Studio 2015, and have implemented a method that downloads a file using the HTTP response. The user clicks a download button on a row in a grid, and the file is downloaded. This works perfectly fine when I am running the application locally on my computer. Once i publish and installs the application on my <strong>IIS webserver (v8.0)</strong> located on a <strong>Windows 2012 Server</strong>, it doesn't work any more. Every time the download button is clicked a popup is displayed with the following message: </p>  <p><strong><em>Request Failure</em></strong></p>  <p><strong>Status Code:</strong> </p>  <p><strong>Status Text: *BADRESPONSE: Unexpected token &lt;</strong></p>  <p>In the codebehind method i use the response to write the file</p>  <pre><code>// Clear the content of the response Response.ClearContent(); Response.ClearHeaders();  // LINE1: Add the file name and attachment, which will force the open/cance/save dialog to show, to the header Response.AddHeader("Content-Disposition", "attachment; filename=" + fileInfo.Name);  // Add the file size into the response header Response.AddHeader("Content-Length", fileInfo.Length.ToString());  // Set the ContentType Response.ContentType = "image/jpeg";  //Response.Redirect(url, true);  // Write the file into the response (TransmitFile is for ASP.NET 2.0. In ASP.NET 1.1 you have to use WriteFile instead) Response.TransmitFile(fileInfo.FullName);  HttpContext.Current.Response.Flush(); // Sends all currently buffered output to the client. HttpContext.Current.Response.SuppressContent = true;  // Gets or sets a value indicating whether to send HTTP content to the client. HttpContext.Current.ApplicationInstance.CompleteRequest(); // Causes ASP.NET to bypass all events and filtering in the HTTP pipeline chain of execution and directly execute the EndRequest event. </code></pre>  <p>The IIS server is set up to use the Integrated Pipeline Mode in the IIS Appication Pool, and when chaning it to Classic, the download works again.</p>  <p>However, I would really like to get it to work with the Integrated setting, so I change my Project in Visual Studio to use Integrated Managed Pipleline Mode and change the code to add headers in the new way.</p>  <p><strong>Classic Pipeline Mode</strong></p>  <pre><code>Response.AddHeader("Content-Length", fileInfo.Length.ToString()); </code></pre>  <p><strong>Integrated Pipeline Mode</strong></p>  <pre><code>Response.Headers.Add("Content-Length", fileInfo.Length.ToString()); </code></pre>  <p>But, the problem reimains</p>  <p>I discover that the HTTP response headers are never set in the published application, but with the local it is.</p>  <p><strong>When running the application locally via Visual Studio I get the following HTTP response:</strong></p>  <ul> <li>HTTP/1.1 200 OK</li> <li>Cache-Control: private</li> <li>Content-Length: 5885</li> <li>Content-Type: image/jpeg; charset=utf-8</li> <li>Server: Microsoft-IIS/10.0</li> <li>X-AspNet-Version: 4.0.30319</li> <li>Content-disposition: attachment;filename=picture.jpg</li> <li>X-SourceFiles: =?UTF-8?B?QzpcVEZTXF...</li> <li>X-Powered-By: ASP.NET</li> <li>Date: Wed, 23 Sep 2015 15:38:31 GMT</li> </ul>  <p><strong>Running the published IIS application I get:</strong></p>  <ul> <li>HTTP/1.1 200 OK</li> <li>Cache-Control: private</li> <li>Content-Type: text/html; charset=utf-8</li> <li>Vary: Accept-Encoding</li> <li>Server: Microsoft-IIS/8.0</li> <li>X-AspNet-Version: 4.0.30319</li> <li>X-Powered-By: ASP.NET</li> <li>Date: Wed, 23 Sep 2015 15:37:05 GMT</li> <li>Transfer-Encoding: chunked</li> </ul>  <p>Anyone have any ideas on why this is happening?</p>  <p>Thanks</p>