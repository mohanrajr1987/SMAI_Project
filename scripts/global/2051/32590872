<p>My team has an API we wrote in PHP using the Slim Framework. It's being consumed by a web app and a third party mobile app. </p>  <p>We use the standard OAuth 2 workflow to provide access to our resources. We can see if someone is a sending a valid access token along with the API request and that part of the flow makes sense.</p>  <p>The stumbling block we're running into is how to most efficiently authorize access to a resource depending on the permissions of the user associated with the access token.</p>  <p>For the sake of simplicity let's say that we just want to ensure that the owner of the resource in question matches the owner of the access token. To me that seems like something that a route middleware would handle, for every request, before processing the request make sure that the resource owner ID matches that of the access token.</p>  <p>The problem in my mind is that resource permissions aren't necessarily consistent across all routes, a route isn't necessarily going to have an ID in the same section of the URI, it might not have an ID in the URI at all, etc. etc. </p>  <p>My current solution has been to have an authorization utility class that takes in an email and checks it against the user that's currently "logged in" (token owner). </p>  <pre><code>class Authorization() {     checkResourcePermissions($email) {          if (loggedInUser-&gt;email == $email) {              return true;          }            } } </code></pre>  <p>Obviously this is a simplification, but what this means is that since a route middleware won't have the context of a request until that request goes through I will need to call this authorization method inside of every API route, responding with an error if necessary, etc. Our API is fairly large, essentially boiling this down to a large amount of copy and paste which always makes me very nervous. </p>  <p>What am I missing?  </p>