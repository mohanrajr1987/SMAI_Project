<p>The below code is working with play 2.1.5 where as it is not working with play 2.2.6. Can someone please help in resolving this issue. This seems to be a version issue. Please let me know if there is any other way to make this code working.</p>  <blockquote>   <p>[IOException: Remotely Closed [id: 0x4f9725a3, /]]</p> </blockquote>  <pre><code>package controllers     import play.api._     import java.io.File     import play.api.mvc._     import play.api.libs.ws._ import scala.concurrent.Future  import play.api.libs.ws.Response  import play.api.libs.ws.WS import play.api.libs.concurrent.Execution.Implicits._ import scala.concurrent.duration._ import scala.language.postfixOps import java.net.URLEncoder import akka.util.Timeout import scala.concurrent.ExecutionContext.Implicits.global import scala.concurrent.{ Await, Future } import scala.concurrent.duration._ import play.api.libs.concurrent.Execution.Implicits._ import java.util.concurrent.TimeoutException import com.ning.http.client.Realm.AuthScheme import java.io._; import play.api.mvc.MultipartFormData import org.apache.http.HttpEntity; import org.apache.http.HttpResponse; import org.apache.http.client.ClientProtocolException; import org.apache.http.client.HttpClient; import org.apache.http.client.methods.HttpPost; import org.apache.http.impl.client.DefaultHttpClient; import org.apache.http.util.EntityUtils; import org.apache.commons.codec.binary.Base64.encodeBase64; import com.ning.http.client.AsyncHttpClient import com.ning.http.client.FilePart import com.ning.http.client.StringPart object Application extends Controller {    def index = Action {     Ok(views.html.index("Your new application is ready really ?"))    }    def getUpload = Action.async {        WS.url(url).withAuth("apple", "1234", AuthScheme.BASIC).get().map { response =&gt;       Ok(response.body)     }     //Ok(" "+res.response)     //Ok("hello")    }    def postUpload = Action(parse.multipartFormData) { request =&gt;      val groupingType = request.body.dataParts("Grouping type").mkString     val email = request.body.dataParts("NotificationRecepients").mkString     val custId = request.body.dataParts("CustomerId").mkString     val custIdFinal: Int = custId.toInt      Ok("******* " + groupingType + "********" + email + "********" + custIdFinal)      request.body.file("file").map { file =&gt;        val file1 = file.ref.file.getAbsolutePath;        val fileName = file.filename       val contentType = file.contentType       Ok(" " + file1)       file.ref.moveTo(new File("C:/Users/tmp/" + fileName), true)         val user = "apple";       val password = "1234";        val encodedCredentials =         new String(encodeBase64("%s:%s".format(user, password).getBytes))        val asyncHttpClient: AsyncHttpClient = WS.client       val postBuilder = asyncHttpClient.preparePost(url)       val builder = postBuilder         .addHeader("Authorization", "Basic " + encodedCredentials)         .addBodyPart(new StringPart("selectedGroupType", groupingType, "UTF-8"))         .addBodyPart(new StringPart("mailRecipients", email, "UTF-8"))         .addBodyPart(new StringPart("selectedFile", fileName, "UTF-8"))         .addBodyPart(new FilePart("file", new File("C:/Users/tmp/" + fileName), null, null))       //.addBodyPart(new FilePart("file",new File("C:/Users/kancgupt/Desktop/Sample_group_upload_file.xlsx"),null,null))       val response = asyncHttpClient.executeRequest(builder.build()).get();       Ok(response.getResponseBody)     }.getOrElse {        Ok("Missing file")      }    } } </code></pre>