<p>I'm using the <a href="https://github.com/wsargent/play-slick-3.0" rel="nofollow">play-slick-3.0</a> project as base for migrating a legacy Play project I have. The legacy <code>controller.Application</code> used to be an object and now is a class, likewise all the other controller implementations were objects and now are classes. The legacy project was doing "controller chaining" i.e. Application delegates to other controllers:  </p>  <pre><code>class Application extends Controller { ...   def uploadDo(context: String) = { implicit request ⇒      // a lot of boilerplate code common to all contexts     context match {       case "aum" ⇒ AumController.uploadDo(storedFile)       case "portfolio" ⇒ PortfolioController.uploadDo(storedFile)       case "price" ⇒ PriceController.uploadDo(storedFile)     }     // more boilerplate code common to all contexts   } } </code></pre>  <p>The problem is that I can no longer do that kind of delegation because AumController is a class and not an object anymore. I can't also define an associated object because these classes get instantiated and dependencies are injected by the framework ... see for instance the <a href="https://github.com/wsargent/play-slick-3.0/blob/master/app/controllers/Application.scala" rel="nofollow">Application.scala</a> in that same project, it is not possible to instantiate it directly.</p>  <p>How can I fix/migrate the delegation issue above? </p>