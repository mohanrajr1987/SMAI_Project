<p>I have like 2000 locations in a web database which a user should be able to select on a Map. I can ask the web database to give me only a certain number of locations originating from a current location.</p>  <p>To make everything smooth and elegant I would first instantiate MKMapView, start CLLocationManager and wait until I get a didUpdateLocations. Then I would try to get my data from a Database with a completion handler. </p>  <p>Should I  </p>  <p>a) get all data at once</p>  <p>b) get the data in little pieces or chunks ? </p>  <p>What it the best way?</p>  <pre><code>func locationManager(manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {     self.gotoCurrentLocation()     if let userLocation = manager.location {         GroundHelper.getAllGroundLocations(userLocation) { self.handleWaypoints($0!) }     } }  private func handleWaypoints(grounds: [Ground]) {     mapView.addAnnotations(grounds) }  // MARK: - Helper Methods  typealias GPXCompletionHandler = ([Ground]?) -&gt; Void  class func getAllGroundLocations(userlocation: CLLocation, completionHandler: GPXCompletionHandler)  {      let priority = DISPATCH_QUEUE_PRIORITY_DEFAULT     dispatch_async(dispatch_get_global_queue(priority, 0), { ()-&gt;() in         var results = RestApiManager.sharedInstance.getGPS(userlocation, limit: 50)          // return first 50 results         dispatch_async(dispatch_get_main_queue(), {              var grounds = [Ground]()             for result in results {                 let (_,jsonGround) = result                 let ground = Ground(json:jsonGround)                 grounds.append(ground)             }             completionHandler(grounds)         })          // get the rest         results = RestApiManager.sharedInstance.getGPS(userlocation)          // return them         dispatch_async(dispatch_get_main_queue(), {              var grounds = [Ground]()             for result in results {                 let (_,jsonGround) = result                 let ground = Ground(json:jsonGround)                 grounds.append(ground)             }             completionHandler(grounds)          })     }) } </code></pre>  <p>}</p>