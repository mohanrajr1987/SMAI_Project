<p>I want this type of output for ios Application. I hadn't any idea how to do it. Please let me know if anyone know how to do it.</p>  <p><a href="http://i.stack.imgur.com/k4eNK.png" rel="nofollow"><img src="http://i.stack.imgur.com/k4eNK.png" alt="enter image description here"></a></p>  <p><strong>EDIT</strong></p>  <h1>I had updated my code as per answer, but still it was not working. I can't unserstand that how UIView display and what will be its size ?</h1>  <pre><code>#import &lt;UIKit/UIKit.h&gt; @interface MyView : UIView  @end  #import "MyView.h"  @implementation MyView  - (id)initWithFrame:(CGRect)frame {     self = [super initWithFrame:frame];     if (self)     {         // Initialization code         // initilize all your UIView components         UILabel *label1 = [[UILabel alloc]initWithFrame:CGRectMake(20,30, 200, 44)];         label1.text = @"i am label 1";         [self addSubview:label1]; //add label1 to your custom view          UILabel *label2 = [[UILabel alloc]initWithFrame:CGRectMake(20,80, 200, 44)];         label2.text = @"i am label 2";         [self addSubview:label2]; //add label2 to your custom view           }     return self; }  =================================================  #import &lt;MapKit/MapKit.h&gt; #import "MyView.h"  @interface MyCustomView : MKAnnotationView  - (UIView*)hitTest:(CGPoint)point withEvent:(UIEvent*)event; - (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent*)event; - (void)setShowCustomCallout:(BOOL)showCustomCallout animated:(BOOL)animated; - (void)setShowCustomCallout:(BOOL)showCustomCallout ;  @property(strong, nonatomic) MyView *calloutView ;  @end  #import "MyCustomView.h"  @implementation MyCustomView  - (void)setShowCustomCallout:(BOOL)showCustomCallout {     [self setShowCustomCallout:showCustomCallout animated:NO]; }  - (void)setShowCustomCallout:(BOOL)showCustomCallout animated:(BOOL)animated {     //if (showCustomCallout == showCustomCallout) return;      showCustomCallout = showCustomCallout;      void (^animationBlock)(void) = nil;     void (^completionBlock)(BOOL finished) = nil;      if (showCustomCallout)     {          self.calloutView.alpha = 0.0f;           animationBlock = ^{             self.calloutView.alpha = 1.0f;              [self addSubview:self.calloutView];         };      } else {         animationBlock = ^{ self.calloutView.alpha = 0.0f; };         completionBlock = ^(BOOL finished) { [self.calloutView removeFromSuperview]; };     }      if (animated) {         [UIView animateWithDuration:0.2f animations:animationBlock completion:completionBlock];      } else {         animationBlock();         completionBlock(YES);     } }  - (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event {     UIView *view = [super hitTest:point withEvent:event];      if ([view isKindOfClass:_calloutView.class]) {         return nil; // todo: add a new delegate method to the map protocol to handle callout taps     } else {         return view;     } }   - (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent*)event {     CGRect rect = self.bounds;     BOOL isInside = CGRectContainsPoint(rect, point);     if(!isInside)     {         for (UIView *view in self.subviews)         {             isInside = CGRectContainsPoint(view.frame, point);             if(isInside)                 break;         }     }     return isInside; }  ================================================= #import "ViewController.h"  @interface ViewController () {     CLLocationManager *locationManager; }  - (void)viewDidLoad {     [super viewDidLoad];     // Do any additional setup after loading the view, typically from a nib.      locationManager = [[CLLocationManager alloc] init];     locationManager.delegate = self;     locationManager.distanceFilter = kCLDistanceFilterNone; //whenever we move     locationManager.desiredAccuracy = kCLLocationAccuracyBest;      [locationManager startUpdatingLocation];     [locationManager requestWhenInUseAuthorization]; // Add This Line     [locationManager startUpdatingLocation];      _mapView.showsUserLocation = YES;     _mapView.delegate = self;      CLLocationCoordinate2D annotationCoord;      annotationCoord.latitude = 23.041261;     annotationCoord.longitude = 72.513892;       _mapView.region = MKCoordinateRegionMakeWithDistance(annotationCoord, 800, 800);      // MKCoordinateRegion adjustedRegion = [_mapView regionThatFits:MKCoordinateRegionMakeWithDistance(annotationCoord, 800, 800)];      MKPointAnnotation *annotationPoint = [[MKPointAnnotation alloc] init];     annotationPoint.coordinate = annotationCoord;     annotationPoint.title = @"I am here";     annotationPoint.subtitle = @"Microsoft's headquarters";   }   - (MKAnnotationView *)mapView:(MKMapView *)mapView1 viewForAnnotation:(id &lt;MKAnnotation&gt;)annotation {     MKPinAnnotationView *annView=[[MKPinAnnotationView alloc]initWithAnnotation:annotation reuseIdentifier:@"pin"];     annView.pinColor = MKPinAnnotationColorGreen;     return annView;  }  - (void)mapView:(MKMapView *)mapView didDeselectAnnotationView:(MKAnnotationView *)view {         [((MyCustomView *)view) setShowCustomCallout:NO animated:YES]; }   -(void)mapView:(MKMapView *)mapView didSelectAnnotationView:(MKAnnotationView *)view {     MyCustomView *annotationView = [[MyCustomView alloc]init];              [annotationView setShowCustomCallout:YES animated:YES]; } </code></pre>