<p>In my situation I have to placed more than one polygon as the overlay on the MKMapView, those polygon are actually creating from the JSON response, the response actually containing the polygon_id along with coordinate for the to form that polygon. I just want to some how merge that polygon_id with the overlay, so that whenever user clicked on that overlay it will return the polygon_id.</p>  <p>This is my code:</p>  <pre><code>-(void)darwPolyGon:(NSMutableArray *)polyArr polyGonAreaId:(NSString *)areaID isAssign:(BOOL)isAssign{       CLLocationCoordinate2D *coordinates = (CLLocationCoordinate2D*)malloc(sizeof(CLLocationCoordinate2D) * [polyArr count]);     for (int i=0; i&lt;polyArr.count; i++) {         ModelPolygon *poly=[polyArr objectAtIndex:i];         coordinates[i] = CLLocationCoordinate2DMake(poly.lat,poly.lon);      }     MKPolygon *polygon = [MKPolygon polygonWithCoordinates:coordinates count:polyArr.count];     strTapAreaId=areaID;     polygon.title=strTapAreaId;      [MyMapView addOverlay:polygon];   } -(MKOverlayView *)mapView:(MKMapView *)mapView viewForOverlay:(id &lt;MKOverlay&gt;)overlay {     if([overlay isKindOfClass:[MKPolygon class]]){         MKPolygonView *viewPoly = [[MKPolygonView alloc] initWithOverlay:overlay];          viewPoly.lineWidth=3;         if (isAssignUser) {             viewPoly.strokeColor=[UIColor colorWithRed:255/255.0f green:30/255.0f blue:0/255.0f alpha:1.0f];          }else         viewPoly.strokeColor=[UIColor colorWithRed:132/255.0f green:0/255.0f blue:255/255.0f alpha:1.0f];         viewPoly.tag=[strTapAreaId integerValue];         UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleMapTap:)];         tap.cancelsTouchesInView = NO;         tap.numberOfTapsRequired = 1;         [MyMapView addGestureRecognizer:tap];         return viewPoly ;     }     return nil; }  -(void)handleMapTap:(UIGestureRecognizer*)tap{     CGPoint tapPoint = [tap locationInView:MyMapView];      CLLocationCoordinate2D tapCoord = [MyMapView convertPoint:tapPoint toCoordinateFromView:MyMapView];     MKMapPoint mapPoint = MKMapPointForCoordinate(tapCoord);     CGPoint mapPointAsCGP = CGPointMake(mapPoint.x, mapPoint.y);      for (id&lt;MKOverlay&gt; overlay in MyMapView.overlays) {         if([overlay isKindOfClass:[MKPolygon class]]){             MKPolygon *polygon = (MKPolygon*) overlay;              CGMutablePathRef mpr = CGPathCreateMutable();              MKMapPoint *polygonPoints = polygon.points;              for (int p=0; p &lt; polygon.pointCount; p++){                 MKMapPoint mp = polygonPoints[p];                 if (p == 0)                     CGPathMoveToPoint(mpr, NULL, mp.x, mp.y);                 else                     CGPathAddLineToPoint(mpr, NULL, mp.x, mp.y);             }              if(CGPathContainsPoint(mpr , NULL, mapPointAsCGP, FALSE)){                 MKPolygonView *viewPoly = [[MKPolygonView alloc] initWithOverlay:overlay];                 NSLog(@"tag=%d",viewPoly.tag);             }              CGPathRelease(mpr);         }     } } </code></pre>