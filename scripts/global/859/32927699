<p>Consider this class:</p>  <pre><code>public class TestClass&lt;T&gt; {      @FunctionalInterface     private interface CheckParam&lt;T&gt; {         public boolean check(T newParam);     }      private CheckParam&lt;T&gt; checkCall;      public TestClass() {         checkCall = (newParam) -&gt; someDoubleMethod() == newParam;         //checkCall = (newParam) -&gt; someLongMethod() == newParam;     }      public double someDoubleMethod() {         return 0;     }      public long someLongMethod() {         return 0L;     } } </code></pre>  <p><code>TestClass</code> couble be instantiated with <code>Double</code> or <code>Long</code>.</p>  <p>The compiler gives <code>Incompatible operand types double and T</code> for the line:</p>  <pre><code>checkCall = (newParam) -&gt; someDoubleMethod() == newParam; </code></pre>  <p>How is it possible to assign the <code>checkCall</code> field to different lambda types?</p>