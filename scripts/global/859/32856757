<p>I am new to lisp and have very little experience with lambda expressions at this point in my college career. This is for a homework exercise with a problem that states:</p>  <blockquote>   <ol start="5">   <li>Write a LISP function COUNTALLNUMBERS which counts the number of numeric atoms in a list, no matter how deeply nested they are. For example:   (COUNTALLNUMBERS â€˜(1 A 2 (3 B 4 (5 6))))   Returns the value 6</li>   </ol> </blockquote>  <p>I am using Lispworks to compile my code as well and have been getting the error:</p>  <pre><code> Badly formed lambda: (NUMBERP (CAR LIST) (+ 1 (COUNTALLNUMBERS (CDR LIST)))) </code></pre>  <p>Here is my code:</p>  <pre><code>(defun countallnumbers(list)   (if (eql list nil)       nil      (let ((elem (car list))           (restlist (cdr list)))       (if (listp elem)           (append (countallnumbers elem) (countallnumbers restlist))         (append (cons elem nil) (countallnumbers restlist)))       ((numberp (car list) (+ 1 (countallnumbers (cdr list))))))))  (write (countallnumbers '(1 2 3 a b (4 c)))) </code></pre>  <p>So far I have tested and got everything to work up to the line that starts by calling numberp. I figured it would be easiest to deal with everything if the input was converted to a list of just atoms, no nesting. Any help making making sense of this would be appreciated</p>