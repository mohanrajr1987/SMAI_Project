<p>I am trying to understand a Python program that solves differential equations numerically using the Runge-Kutta method. I have developed my own solution but was looking for other implementations. I found several but this one intrigued me as I am having a difficult time understanding how lambda works.</p>  <p>Here is the code:</p>  <pre><code>def RK4(f):     return lambda t, y, dt: (         lambda dy1: (         lambda dy2: (         lambda dy3: (         lambda dy4: (dy1 + 2*dy2 + 2*dy3 + dy4)/6         )( dt * f( t + dt  , y + dy3   ) )         )( dt * f( t + dt/2, y + dy2/2 ) )         )( dt * f( t + dt/2, y + dy1/2 ) )         )( dt * f( t       , y         ) )  def theory(t): return (t**2 + 4)**2 /16  from math import sqrt dy = RK4(lambda t, y: t*sqrt(y))  t, y, dt = 0., 1., .1 while t &lt;= 10:     if abs(round(t) - t) &lt; 1e-5:         print("y(%2.1f)\t= %4.6f \t error: %4.6g" % ( t, y, abs(y - theory(t))))     t, y = t + dt, y + dy( t, y, dt ) </code></pre>  <p>The long strings of lambdas and the dy function is confusing me.</p>  <p>First: How is the function RK4 receiving (t, y, dt) when dy is called? It looks appears that the lambda in dy = RK4(..) is only taking two parameters.</p>  <p>Second: How do the repeated lambda calls in RK4 work?</p>