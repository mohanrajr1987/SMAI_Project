<p>Let's suppose I have the following task:</p>  <pre><code>var task = _entityManager.UseRepositoryAsync(async (repo) =&gt;  {     IEnumerable&lt;Entity&gt; found = //... Get from repository      return new      {         Data = found.ToList()     }; } </code></pre>  <p>What is the type of <code>task</code>?</p>  <p>Actually, it turns out to be: <code>System.Threading.Tasks.Task&lt;'a&gt;</code>,</p>  <p>where <code>'a</code> is anonymous type: <code>{ List&lt;object&gt; Data }</code></p>  <p>How can I explicitly state this type without using <code>var</code>?</p>  <p>I have tried <code>Task&lt;a'&gt; task = ...</code> or <code>Task&lt;object&gt; task = ...</code> but can't manage it to compile.</p>  <h2>Why do I need to do this?</h2>  <p>I have a method (<code>UseApplicationCache&lt;T&gt;</code>), that takes a <code>Func&lt;Task&lt;T&gt;&gt;</code> as a parameter.</p>  <p>I also have a variable <code>cache</code> that the user might set to <code>true</code> or <code>false</code>.</p>  <p>If <code>true</code>, the above said method should be called and my <code>task</code> should be passed as argument, if <code>false</code>, I should execute my <code>task</code> without giving it as an argument to the method.</p>  <p>My end result would be something like this:</p>  <pre><code>Func&lt;Task&lt;?&gt;&gt; fetch = () =&gt; _entityManager.UseRepositoryAsync(async (repo) =&gt; {      IEnumerable&lt;Entity&gt; found = //... Get from repository      return new { Data = found.ToList() }; }  return await (cache ? UseApplicationCache(fetch) : fetch()); </code></pre>