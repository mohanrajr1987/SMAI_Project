<p>When I want to sync changes in the ExtJS grid, I'm experiencing issues with values in the postback of the store sync method. </p>  <p>As you see in this fiddle excerpt, calls are being made but they contain no data, resulting in a null reference in the Web API</p>  <pre><code>632 200 HTTP    localhost:52543 /api/Tasks/Delete?_dc=1442568648737 0   no-cache; Expires: -1       chrome:822280            635 200 HTTP    localhost:52543 /api/Tasks/Update?_dc=1442568658100 0   no-cache; Expires: -1       chrome:822280        </code></pre>  <p>Here is the store definition:</p>  <pre><code>Ext.define('SchedulerApp.store.UnplannedTaskStore', { extend: 'Ext.data.Store', model: 'UnplannedTask', autosync: false, autoLoad: true, proxy: {     type: 'ajax',     api: {         read: '/api/Tasks/Get',         add: '/api/Tasks/Add',         update: '/api/Tasks/Update',         destroy: '/api/Tasks/Delete'     },     reader: {         rootProperty: 'data',         totalProperty: 'total'     },     writer: {         type: 'json',         root: 'data',         writeAllFields: true,         encode: true     } }, listeners: {     load: function (sender, node, records) {         Ext.each(records, function (record, index) {             console.log(record);         }, this);     },     remove: function (sender, node, records) {         sender.sync();     },     edit: function (sender, node, records) {         sender.sync();     },     update: function (sender, node, records) {         sender.sync();     } } });  </code></pre>  <p>Here's the model:</p>  <pre><code>Ext.define('UnplannedTask', { extend: 'Sch.model.Event', fields: [     { name: 'Importance', type: 'float' },     { name: 'Category', type: 'string' },     { name: 'TaskNo', type: 'float' } ] }); </code></pre>  <p>Not that this will matter, but here's what I've got in my .NET code:</p>  <pre><code>[System.Web.Http.HttpGet]     public async Task&lt;dynamic&gt; Get(string page, string start, string limit)     {         // Get items from database with request information from the Kendo Grid Control         PagingResult&lt;TaskViewModel&gt; tasks = await this.Worker.GetPagedTasksAsync(int.Parse(page), int.Parse(limit), null, null);          // Map them to store objects         var convertedTasks = new SchedulerTasksViewModel()         {             total = tasks.Count,             data = tasks.Items.Select(x =&gt; new SchedulerTask()             {                 Importance = x.Importance,                 Category = x.Category,                 TaskNo = x.TaskNumber             }).ToArray()         };          var response = Request.CreateResponse(HttpStatusCode.OK, convertedTasks);         return response;     }      [System.Web.Http.HttpPost]     public async Task&lt;dynamic&gt; Add(SchedulerTask data)     {                  var response = Request.CreateResponse(HttpStatusCode.OK);         return response;     }      [System.Web.Http.HttpPost]     public async Task&lt;dynamic&gt; Update(SchedulerTask data)     {         var response = Request.CreateResponse(HttpStatusCode.OK);         return response;     }      [System.Web.Http.HttpPost]     public async Task&lt;dynamic&gt; Delete(SchedulerTask data)     {         var response = Request.CreateResponse(HttpStatusCode.OK);         return response;     } </code></pre>  <p>Any ideas on what I'm missing here?</p>