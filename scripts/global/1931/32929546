<p>I have an asynchronous function:</p>  <pre><code>// In a class called DBUtil public async Task&lt;bool&gt; UpdateRecord(Guid recordId) {     await recordObj = recordService.Get(recordId);     await Task.WhenAll(recordService.UpdateRecord(recordId), adminService.NotifyAdmins(recordObj));     return true; } </code></pre>  <p>I created a unit test that is supposed to test if calling <code>UpdateRecord()</code> also called <code>recordService.UpdateRecord()</code> and <code>adminService.NotifyAdmins()</code> like:</p>  <pre><code>[TestMethod] public async Task UpdateRecordWillUpdateAndNotifyAdmins() {     ...     await DBUtil.UpdateRecord(record.Id);     recordService.AssertWasCalled(f =&gt; f.UpdateRecord(record.Id));     adminService..AssertWasCalled(f =&gt; f.NotifyAdmins(record)); } </code></pre>  <p>However, it doesn't seem to call the functions. I tried <code>Task.WaitAll()</code> and ran the functions synchronously using <code>RunSynchronously()</code> but got the same results. How do you add blocking to an asynchronous function?</p>