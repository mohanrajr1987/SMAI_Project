<p>I building a test-driven application that will sort a flat file into a parent-child-hierarchy. And now I want to create a pretty generic test for my own sorting. For that I want to generate some test data, which I then sort.</p>  <p>The object that will be sorted will look something like this:</p>  <pre><code>public interface IHierarchicalUnitWithChildren {     string Id { get; }     string ParentId { get; }     IList&lt;IHierarchicalUnitWithChildren&gt; Children { get; set; } } </code></pre>  <p>But I don't want to create the test-object myself. I want this to be generated by code, as such:</p>  <pre><code>        _items = new List&lt;IHierarchicalUnitWithChildren&gt;();         Random random = new Random();          for (int i = 1; i &lt; 1000; i++)         {             var item = new HierarchicalUnitMock()             {                 Oid = i.ToString(),                 Children = new List&lt;IHierarchicalUnit&gt;(),             };              // We need a couple of roots.             if (i%100 != 0)             {                 item.Poid = random.Next(1, 100).ToString();             }              _items.Add(item);         } </code></pre>  <p>I can easily generate a thousand items, but I also need to give them a valid parent. How can I make sure that I'm creating a valid structure, where I have a couple of roots and all children have parents that are valid.</p>  <p>No item should have a parent that is a child (or grandchild) of itself and thus making it an infinite hierachy.</p>  <p>Or am I thinking about it all wrong? Should a test always have static data?</p>  <p><strong>UPDATE:</strong></p>  <p>Is there any way to do this with a smart loop, that always generate the same data? So that the test-case always will be the same?</p>