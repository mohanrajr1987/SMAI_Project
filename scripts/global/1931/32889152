<p>I'm trying to write a unit test that will test a visual appearance of my custom control. Therefore I want to capture the control visual appearance using RenderTargetBitmap and then use assertions on result pixels. Here is my test:</p>  <pre><code>[TestClass] public class UnitTest2 {     [TestMethod]     public void TestMethod2()     {         //pixels to test         byte[] pixels = null;          // Since I create a UI elements, I need to use Dispatcher here.         // It's impossible to 'await' within unit test method, otherwise you         // need to add 'async' keyword to the signature of the test method. If I do so,         // the test runner doesn't recognize this method as a test.         var task = CoreApplication.MainView.CoreWindow.Dispatcher.RunAsync(Windows.UI.Core.CoreDispatcherPriority.High, () =&gt;         {             // Here I create a visual element that I want to test             var brush = new SolidColorBrush(Color.FromArgb(255, 255, 0, 0));             var element = new Border()             {                 MinWidth = 20,                 MinHeight = 20,                 Background = brush,                 HorizontalAlignment = HorizontalAlignment.Left,                 VerticalAlignment = VerticalAlignment.Top,                 BorderThickness = new Thickness(0)             };              // create an instance of RenderTargetBitmap to render a bitmap              var rtb = new RenderTargetBitmap();             var rtbTask = rtb.RenderAsync(element).AsTask();              // the following operation lasts for ages             // May be the reason is that the element is not a part of the VisualTree             rtbTask.Wait();               var rtbGetPixelsTask = rtb.GetPixelsAsync().AsTask&lt;IBuffer&gt;();             rtbGetPixelsTask.Wait();             pixels = rtbGetPixelsTask.Result.ToArray();         });         task.AsTask().Wait();          Assert.AreEqual&lt;byte&gt;(255, pixels[0]);         Assert.AreEqual&lt;byte&gt;(255, pixels[1]);         Assert.AreEqual&lt;byte&gt;(255, pixels[2]);         Assert.AreEqual&lt;byte&gt;(255, pixels[3]);     } } </code></pre>  <p>The problem is that when I run this test the <code>RendreAsync()</code> operation lasts forever.<br> (The cause of that could be that the <code>element</code> is not a part of the VisualTree, but I cannot find any way to get existing visual tree or to create a new one.)<br>   My question is - how can I make this test work?</p>