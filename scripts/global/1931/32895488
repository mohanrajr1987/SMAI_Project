<p>On tearing down my unit tests I want to check that the database has been returned to the status quo ante (subject to certain tolerances) before proceeding with the next test. I know I could always load a fresh copy of the original database, but in fact returning to the status quo ante is part of verifying that only those changes that I intend are actually occurring. </p>  <p>But it turns out that if you put a <code>self.assertXXX</code> in <code>tearDown()</code>, and if this fails, it is not reported as a failure at the end.</p>  <p>One thing I could do is to have a common procedure which every <code>test_XXX</code> method would have to call as its last command, but I'm just wondering how the pros handle this sort of situation.</p>  <p>I'm also interested to know how this is viewed in the "philosophy" of unit-testing: a lack of data compliance post-test is not actually a coding failure... so how should it be handled?</p>