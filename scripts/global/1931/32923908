<p>Can a unit test replace a DLL?   </p>  <p>My setup is as follows:   Visual Studio 2013.  Writing a stock trading application in C# targeting the .NET 4.0 framework.</p>  <p>The chart below shows the architecture.   I am using a 3rd party API which I assume works. I need to test my Order Manager (Device Under Test).  It is a Console Application, targeting .NET 4.0. The Order Manager interfaces to a 3rd party API. The DLL is my hard-coded algorithm which watches the market (provided to it by the Order Manager) and places trades.   The Order Manager will know which DLLs placed which order and will interface with the appropriate DLL when the order is filled.    Upon initialization, the Order Manager will spin up the DLLs.</p>  <p>I want to test the Order Manager.   Ideally, my unit tests would masquerade as separate DLLs before the Order Manager is started.  Is this what people call "DLL Injection" ??  This is new to me and would greatly appreciate pointers.</p>  <pre><code>+---------+   +----------+   +---------------+   +-----------+ |         |   |  API     |   | Order Manager |   |  Algorithm| | Exchange|&lt;-&gt;|  DLL     |&lt;-&gt;| Console App   |&lt;-&gt;|     DLL   |  |         |   | 3rd party|   |    DUT        |   |           |   +---------+   +----------+   +---------------+   +-----------+ </code></pre>  <p>EDIT: As an alternative, i can convert the DLL to a console App... but would still need the unit tests to masquerade as them...</p>  <p>Thanks -Ed</p>