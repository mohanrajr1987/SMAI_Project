<p>I'm using Liquibase to version my Oracle DB schema; my system is made up of the following Maven projects:</p>  <ul> <li><p><code>db-schema</code>: a Maven project which contains the Liquibase changes to my DB. The Liquibase plugin is also configured in the <code>pom.xml</code>, so that I can upgrade the schema by executing </p>  <p><code>mvn liquibase:update</code>.</p></li> <li><p><code>dal</code>: this is the Data Access Layer of my application. This includes the dependency to the db-schema jar as follows</p>  <pre><code>&lt;dependency&gt;     &lt;groupId&gt;test&lt;/groupId&gt;     &lt;artifactId&gt;db-schema&lt;/artifactId&gt;     &lt;version&gt;${db-schema-version}&lt;/version&gt; &lt;/dependency&gt; </code></pre>  <p>This way I can realize the link between the DB schema version to the right and compatible DAL version. For more information please <a href="http://stackoverflow.com/questions/32786272/how-to-link-a-version-of-a-git-repository-with-a-version-of-one-another-git-repo/32885032#32885032">read my question</a>. </p></li> <li><p><code>web-app</code>: this is the REST-exposed Business layer of my web application. Includes the DAL as a Maven dependency. </p></li> </ul>  <p>Everything is Git-versioned and deployed onto a private Maven repository so that the dependecies of <code>db-schema</code> and <code>dal</code> can be resolved.</p>  <p>The point is that this system should be deployed (via a Continuous Integration system like Jenkins) onto different environment, machines and with different credentials. This means also that different DBs will be used and so the liquibase.properties (stored into the db-schema project) cannot be deployed into the Jar onto the private Maven repository becaus it is not unique for all environments (and is also a security risk to share credentials on Git and Artifactory).</p>  <p>So, I need a way to easily externalize the liquibase.properties file giving different properties for different environments to the Maven <code>liquibase:update</code> goal of the <code>db-schema</code> project.</p>  <p>These are the ideas I came to:</p>  <ul> <li>Configure the Maven Liquibase plugin to read the properties from the <a href="https://maven.apache.org/pom.html#Properties" rel="nofollow">environment variables</a>. This way I could write a script which sets the Liquibase properties as environment variables and then calls <code>mvn liquibase:update</code></li> <li><p>Have an external and environment-specific liquibase.properties file set and launch </p>  <p><code>mvn liquibase:update -Dliquibase.propertyFile=/path/to/liquibase.properties</code></p></li> <li><p>Define Maven profiles, one for each type of environment, and execute </p>  <p><code>mvn liquibase:update -P &lt;environment&gt;</code></p>  <p>This approach has two main drawbacks</p>  <ul> <li>The profiles (and Liquibase username/password/URL properties) will be versioned in Git. Very insecure!</li> <li>In case there will be 1000 developers, each with its own local environment, I will have to include in the pom.xml 1000+ profiles. Goodbye maintenance!</li> </ul></li> </ul>  <p>What do you think should I do? Which are for you better approaches? </p>  <p>Thank you  Giulio</p>