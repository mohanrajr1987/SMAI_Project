<p>We recently implemented TLS certificate on our server and as such wanted to run our application under HTTPS channel.</p>  <p>Unfortunately since we started it we have been getting a infinite redirect loop to our site.</p>  <p>We tried making slight modifications on our DEV environment to see if we can capture anything and noticed these lines constantly being repeated:</p>  <pre><code>2015-10-04 13:29:24 DEBUG FilterChainProxy:324 - / at position 1 of 14 in additional filter chain; firing Filter: 'ChannelProcessingFilter' 2015-10-04 13:29:24 DEBUG ChannelProcessingFilter:142 - Request: FilterInvocation: URL: /; ConfigAttributes: [REQUIRES_SECURE_CHANNEL] 2015-10-04 13:29:24 DEBUG RetryWithHttpsEntryPoint:62 - Redirecting to: https://localhost:8443/ 2015-10-04 13:29:24 DEBUG DefaultRedirectStrategy:39 - Redirecting to 'https://localhost:8443/' </code></pre>  <p>Our high level view of spring security config is as follows:</p>  <pre><code>@Autowired     public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {         auth.                 userDetailsService(userAccessDetails).passwordEncoder(passwordEncoder)                 .and()                 .jdbcAuthentication().dataSource(dataSource);     }      @Override     protected void configure(HttpSecurity http) throws Exception {         http                 .authorizeRequests()                 .antMatchers("/mancon/**").hasRole("ADMIN")                 .antMatchers("/**").permitAll()                 .anyRequest().anonymous()                 .and()                 .requiresChannel().anyRequest().requiresSecure()                 .and()                 .exceptionHandling().accessDeniedPage("/denied")                 .and()                 .formLogin()                 .loginPage("/login")                 .failureUrl("/error-login")                 .successHandler(authSuccessHandler)                 .and()                 .logout().logoutRequestMatcher(new AntPathRequestMatcher("/logout")).logoutSuccessUrl("/").and()                 .rememberMe().userDetailsService(userAccessDetails).tokenRepository(persistentTokenRepository()).tokenValiditySeconds(16000);     }      @Bean     public PersistentTokenRepository persistentTokenRepository() {         JdbcTokenRepositoryImpl db = new JdbcTokenRepositoryImpl();         db.setDataSource(dataSource);         return db;     }      @Bean     public BCryptPasswordEncoder passwordEncoder() {         return new BCryptPasswordEncoder();     } </code></pre>  <p>Also we are using Tomcat 8.</p>