<p>Please Help me to store video or path of video that has been recorded through webcam in database using c# or silverlight 4</p>  <p>please help me to perform this task</p>  <hr>  <p>ya sure this is my code</p>  <pre><code> MainPage.xaml  &lt;UserControl x:Class="SilverlightApplication2.MainPage"     xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"     xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"     xmlns:d="http://schemas.microsoft.com/expression/blend/2008"     xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"     mc:Ignorable="d"     d:DesignHeight="390" d:DesignWidth="472"&gt;      &lt;Grid x:Name="LayoutRoot" Background="White"&gt;         &lt;Grid.RowDefinitions&gt;             &lt;RowDefinition Height="439*" /&gt;             &lt;RowDefinition Height="14*" /&gt;         &lt;/Grid.RowDefinitions&gt;          &lt;!--&lt;StackPanel HorizontalAlignment="Center" Margin="109,20,142,6" Width="443" Grid.RowSpan="2"&gt;--&gt;             &lt;Rectangle x:Name="rectWebCamView" Width="788" Height="709"/&gt;             &lt;StackPanel Orientation="Horizontal" Height="34" Margin="48,11,-20,-33" Grid.Row="1"&gt;                 &lt;Button x:Name="btnCaptureDevice" Content="Capture Device" Margin="5"/&gt;                 &lt;Button x:Name="btnPlayCapture" Content="Start Capture" Margin="5"/&gt;                 &lt;Button x:Name="btnStopCapture" Content="Stop Capture" Margin="5"/&gt;                 &lt;Button x:Name="btnSaveClip" Content="SaveClip" Height="23" Width="89" Click="btnSaveClip_Click" /&gt;             &lt;!--&lt;MediaElement Name="me"/&gt;             &lt;Button Name="b" Width="200" Height="20" Content="Open" Click="Button_Click"/&gt;--&gt;         &lt;/StackPanel&gt;         &lt;!--&lt;/StackPanel&gt;--&gt;     &lt;/Grid&gt; &lt;/UserControl&gt; </code></pre>  <hr>  <pre><code>MainPage.xaml.cs </code></pre>  <hr>  <pre><code>using System; using System.Collections.Generic; using System.Linq; using System.Net; using System.Windows; using System.Windows.Controls; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Animation; using System.Windows.Shapes; using System.IO; using System.IO.IsolatedStorage; using System.Diagnostics;    namespace SilverlightApplication2 {     public partial class MainPage : UserControl     {          public class MemoryStreamVideoSink : VideoSink         {             public VideoFormat CapturedFormat { get; private set; }             public MemoryStream CapturedVideo { get; private set; }             protected override void OnCaptureStarted()             {                 CapturedVideo = new MemoryStream();             }             protected override void OnCaptureStopped()             {             }             protected override void OnFormatChange(VideoFormat videoFormat)             {                 if (CapturedFormat != null)                 {                     throw new InvalidOperationException("Can't cope with change!");                 }                 CapturedFormat = videoFormat;             }             protected override void OnSample(long sampleTime, long frameDuration, byte[] sampleData)             {                 CapturedVideo.Write(sampleData, 0, sampleData.Length);                 UploadProgressChangedEventArgs.Equals(sampleTime, sampleData);             }         }           private CaptureSource captureSource = new CaptureSource();         //CaptureSourcecaptureSource;         MemoryStreamVideoSink videoSink;         public MainPage()         {             InitializeComponent();             this.Loaded += new RoutedEventHandler(MainPage_Loaded);             btnPlayCapture.Click += new RoutedEventHandler(btnPlayCapture_Click);             btnStopCapture.Click += new RoutedEventHandler(btnStopCapture_Click);             btnCaptureDevice.Click += new RoutedEventHandler(btnCaptureDevice_Click);         }         void btnCaptureDevice_Click(object sender, RoutedEventArgs e)         {             TryCaptureDevice();         }         void btnStopCapture_Click(object sender, RoutedEventArgs e)         {             // Stop capturing             captureSource.Stop();             btnPlayCapture.IsEnabled = true;             btnStopCapture.IsEnabled = false;         }         void btnPlayCapture_Click(object sender, RoutedEventArgs e)         {             // If the device is already capturing Stop it             if (captureSource.State == CaptureState.Started)             {                 captureSource.Stop();             }             // Start capturing             captureSource.Start();             btnPlayCapture.IsEnabled = false;             btnStopCapture.IsEnabled = true;         }         void MainPage_Loaded(object sender, RoutedEventArgs e)         {             TryCaptureDevice();         }         private void TryCaptureDevice()         {             // Get the default video capture device             VideoCaptureDevice videoCaptureDevice = CaptureDeviceConfiguration.GetDefaultVideoCaptureDevice();             if (videoCaptureDevice == null)             {                 // Default video capture device is not setup                 btnPlayCapture.IsEnabled = false;                 btnStopCapture.IsEnabled = false;                 btnCaptureDevice.IsEnabled = true;                 MessageBox.Show("You don't have any default capture device");             }             else             {                 btnPlayCapture.IsEnabled = false;                 btnStopCapture.IsEnabled = false;                 // Set the Capture Source to the VideoBrush of the rectangle                 VideoBrush videoBrush = new VideoBrush();                 videoBrush.SetSource(captureSource);                 rectWebCamView.Fill = videoBrush;                 //SaveCaptureDevice();                 // Check if the Silverlight has already access to the device or grant access from the user                 if (CaptureDeviceConfiguration.AllowedDeviceAccess || CaptureDeviceConfiguration.RequestDeviceAccess())                 {                     btnPlayCapture.IsEnabled = true;                     btnStopCapture.IsEnabled = false;                     btnCaptureDevice.IsEnabled = false;                 }             }         }          //getting the Video bit stream         private void SaveCaptureDevice()         {                 using (IsolatedStorageFile isf = IsolatedStorageFile.GetUserStoreForApplication())             {                 long newSpace = isf.Quota + 1523456786435;                 try                 {                     if (true == isf.IncreaseQuotaTo(newSpace))                     {                         Debug.WriteLine("success");                     }                     else                     {                         Debug.WriteLine("unsuccessful");                     }                 }                 catch (Exception ex)                 {                      throw ex;                 }             }                    bool ok = CaptureDeviceConfiguration.AllowedDeviceAccess;             if (!ok)             {                 ok = CaptureDeviceConfiguration.RequestDeviceAccess();             }             if (ok)                 if (videoSink != null)                 {                     captureSource = new CaptureSource()                     {                         VideoCaptureDevice = CaptureDeviceConfiguration.GetDefaultVideoCaptureDevice()                     };                     VideoBrush videoBrush = new VideoBrush();                     videoBrush.SetSource(captureSource);                     rectWebCamView.Fill = videoBrush;                     videoSink = new MemoryStreamVideoSink();                     videoSink.CaptureSource = captureSource;                  }         }         private void btnSaveClip_Click(object sender, RoutedEventArgs e)         {             SaveCaptureDevice();         }          //private void Button_Click(object sender, RoutedEventArgs e)         //{         //    OpenFileDialog ofd = new OpenFileDialog();          //    if (ofd.ShowDialog().Value)         //    {         //        Stream s = ofd.File.OpenRead();         //        WaveMediaStreamSource wavMss = new WaveMediaStreamSource(s);         //        try         //        {         //            me.SetSource(wavMss);         //        }         //        catch (InvalidOperationException)         //        {         //            // This file is not valid         //        }         //    }         //}      }  } </code></pre>