<p>We have been running a JSF 1.2 application on Websphere 7 and 8 for years. We build our war with JSF bundled in it, and always set the classloader as PARENT LAST.</p>  <p>Having now upgraded to JSF 2.2 (and RF4 and PF4 - until migration is complete ), we are now facing issues deploying on the same server (WAS 8.0 as well as WAS 8.5).</p>  <p>We've now done a similar approach (with bundling JSF and PARENT LAST classloading). The application does start, it mentions initialization of Mojarra 2.2.11 , but on first page request, we get below error:</p>  <pre><code>java.lang.reflect.UndeclaredThrowableException  at com.sun.proxy.$Proxy34.markResourceRendered(Unknown Source)  at org.richfaces.resource.ResourceFactoryImpl.createMappedResource(ResourceFactoryImpl.java:366)  at org.richfaces.resource.ResourceFactoryImpl.createResource(ResourceFactoryImpl.java:343)  at org.richfaces.resource.ResourceHandlerImpl.createResource(ResourceHandlerImpl.java:266)  at javax.faces.application.ResourceHandlerWrapper.createResource(ResourceHandlerWrapper.java:137)  at org.apache.myfaces.custom.captcha.CAPTCHAResourceHandlerWrapper.createResource(CAPTCHAResourceHandlerWrapper.java:83)  at org.apache.myfaces.tomahawk.resource.UncompressedResourceHandlerWrapper.createResource(UncompressedResourceHandlerWrapper.java:109)  at org.apache.myfaces.tomahawk.resource.UncompressedResourceHandlerWrapper.createResource(UncompressedResourceHandlerWrapper.java:61)  at com.sun.faces.renderkit.html_basic.ScriptRenderer.encodeEnd(ScriptRenderer.java:104)  at javax.faces.component.UIComponentBase.encodeEnd(UIComponentBase.java:919)  at javax.faces.component.UIComponent.encodeAll(UIComponent.java:1863)  Caused by: java.lang.reflect.InvocationTargetException  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)  at java.lang.reflect.Method.invoke(Method.java:611)  at org.richfaces.application.ServiceTracker$1.invoke(ServiceTracker.java:153)  ... 52 more  Caused by: java.lang.ExceptionInInitializerError  at org.richfaces.resource.external.ResourceTrackerForMyFaces.&lt;init&gt;(ResourceTrackerForMyFaces.java:58)  at org.richfaces.resource.external.ResourceTrackerImpl.getImplementation(ResourceTrackerImpl.java:86)  at org.richfaces.resource.external.ResourceTrackerImpl.markResourceRendered(ResourceTrackerImpl.java:67)  ... 57 more  Caused by: java.lang.NoSuchMethodException: org.apache.myfaces.shared_impl.renderkit.html.util.ResourceUtils.isRenderedStylesheet(javax.faces.context.FacesContext, java.lang.String, java.lang.String)  at java.lang.Class.throwNoSuchMethodException(Class.java:356)  at java.lang.Class.getMethod(Class.java:1018)  at org.richfaces.resource.external.ResourceTrackerForMyFaces.&lt;init&gt;(ResourceTrackerForMyFaces.java:49)  ... 59 more  </code></pre>  <p>I have obviously seen many suggestions of using a shared library, but I have similarly found that CDI is not supported when not using the default JSF implementation provided by websphere.</p>  <p>The preferred solution would obviously be to have a single deployment war, but I'm wondering if that's possible in websphere?</p>  <p>Also note that this application runs fine on weblogic and tomcat7</p>