<p>I am trying to impliment a simple chat app based on the following article:</p>  <p><a href="http://www.codeproject.com/Tips/897826/Designing-Android-Chat-Bubble-Chat-UI" rel="nofollow">http://www.codeproject.com/Tips/897826/Designing-Android-Chat-Bubble-Chat-UI</a></p>  <p>I have managed to get my chat working fine,</p>  <p>this is my sequence of events...</p>  <p>Send new message to a MySql Db and return a JSON with the status that the message was delivered, I then send a GCM message to the reciving device that is listining for a broadast reciever and fires off a function to Add a new message. all this is fine and dandy, once the mesage is downloaed from the server i fire a GCM back to the sender to notify that the message has been read. This is where i am stuck :(</p>  <p>How would i update the already populated listview to show the change?</p>  <p>something like i.e: </p>  <pre><code>// Do a JSON call for the current user No Problem here  // See if the status has changed ??????????????? //Do the Update ?????????????? update (Int msgID){ // here i need to update the imageview notifyDataSetChanged(); }  </code></pre>  <p>Please see the base code below.</p>  <p>ChatActivity</p>  <pre><code>public class ChatActivity extends ActionBarActivity {      private EditText messageET;     private ListView messagesContainer;     private Button sendBtn;     private ChatAdapter adapter;     private ArrayList&lt;ChatMessage&gt; chatHistory;      @Override     protected void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         setContentView(R.layout.activity_chat);         initControls();     }      private void initControls() {         messagesContainer = (ListView) findViewById(R.id.messagesContainer);         messageET = (EditText) findViewById(R.id.messageEdit);         sendBtn = (Button) findViewById(R.id.chatSendButton);          TextView meLabel = (TextView) findViewById(R.id.meLbl);         TextView companionLabel = (TextView) findViewById(R.id.friendLabel);         RelativeLayout container = (RelativeLayout) findViewById(R.id.container);         companionLabel.setText("My Buddy");// Hard Coded         loadDummyHistory();          sendBtn.setOnClickListener(new View.OnClickListener() {             @Override             public void onClick(View v) {                 String messageText = messageET.getText().toString();                 if (TextUtils.isEmpty(messageText)) {                     return;                 }                  ChatMessage chatMessage = new ChatMessage();                 chatMessage.setId(122);//dummy                 chatMessage.setMessage(messageText);                 chatMessage.setDate(DateFormat.getDateTimeInstance().format(new Date()));                 chatMessage.setMe(true);                  messageET.setText("");                  displayMessage(chatMessage);             }         });     }      public void displayMessage(ChatMessage message) {         adapter.add(message);         adapter.notifyDataSetChanged();         scroll();     }      private void scroll() {         messagesContainer.setSelection(messagesContainer.getCount() - 1);     }      private void loadDummyHistory(){          chatHistory = new ArrayList&lt;ChatMessage&gt;();          ChatMessage msg = new ChatMessage();         msg.setId(1);         msg.setMe(false);         msg.setMessage("Hi");         msg.setDate(DateFormat.getDateTimeInstance().format(new Date()));         chatHistory.add(msg);         ChatMessage msg1 = new ChatMessage();         msg1.setId(2);         msg1.setMe(false);         msg1.setMessage("How r u doing???");         msg1.setDate(DateFormat.getDateTimeInstance().format(new Date()));         chatHistory.add(msg1);          adapter = new ChatAdapter(ChatActivity.this, new ArrayList&lt;ChatMessage&gt;());         messagesContainer.setAdapter(adapter);                  for(int i=0; i&lt;chatHistory.size(); i++) {                     ChatMessage message = chatHistory.get(i);                     displayMessage(message);                 }     } } </code></pre>  <p>ChatMessage</p>  <pre><code>public class ChatMessage {     private long id;     private boolean isMe;     private String message;     private Long userId;     private String dateTime;      public long getId() {         return id;     }     public void setId(long id) {         this.id = id;     }     public boolean getIsme() {         return isMe;     }     public void setMe(boolean isMe) {         this.isMe = isMe;     }     public String getMessage() {         return message;     }     public void setMessage(String message) {         this.message = message;     }     public long getUserId() {         return userId;     }      public void setUserId(long userId) {         this.userId = userId;     }      public String getDate() {         return dateTime;     }      public void setDate(String dateTime) {         this.dateTime = dateTime;     } } </code></pre>  <p>ChatAdapter</p>  <pre><code>public class ChatAdapter extends BaseAdapter {      private final List&lt;ChatMessage&gt; chatMessages;     private Activity context;      public ChatAdapter(Activity context, List&lt;ChatMessage&gt; chatMessages) {         this.context = context;         this.chatMessages = chatMessages;     }      @Override     public int getCount() {         if (chatMessages != null) {             return chatMessages.size();         } else {             return 0;         }     }      @Override     public ChatMessage getItem(int position) {         if (chatMessages != null) {             return chatMessages.get(position);         } else {             return null;         }     }      @Override     public long getItemId(int position) {         return position;     }      @Override     public View getView(final int position, View convertView, ViewGroup parent) {         ViewHolder holder;         ChatMessage chatMessage = getItem(position);         LayoutInflater vi = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);          if (convertView == null) {             convertView = vi.inflate(R.layout.list_item_chat_message, null);             holder = createViewHolder(convertView);             convertView.setTag(holder);         } else {             holder = (ViewHolder) convertView.getTag();         }          boolean myMsg = chatMessage.getIsme() ;//Just a dummy check                  //to simulate whether it me or other sender         setAlignment(holder, myMsg);         holder.txtMessage.setText(chatMessage.getMessage());         holder.txtInfo.setText(chatMessage.getDate());          return convertView;     }      public void add(ChatMessage message) {         chatMessages.add(message);     }      public void add(List&lt;ChatMessage&gt; messages) {         chatMessages.addAll(messages);     }      private void setAlignment(ViewHolder holder, boolean isMe) {         if (!isMe) {             holder.contentWithBG.setBackgroundResource(R.drawable.in_message_bg);              LinearLayout.LayoutParams layoutParams =                  (LinearLayout.LayoutParams) holder.contentWithBG.getLayoutParams();             layoutParams.gravity = Gravity.RIGHT;             holder.contentWithBG.setLayoutParams(layoutParams);              RelativeLayout.LayoutParams lp =                  (RelativeLayout.LayoutParams) holder.content.getLayoutParams();             lp.addRule(RelativeLayout.ALIGN_PARENT_LEFT, 0);             lp.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);             holder.content.setLayoutParams(lp);             layoutParams = (LinearLayout.LayoutParams) holder.txtMessage.getLayoutParams();             layoutParams.gravity = Gravity.RIGHT;             holder.txtMessage.setLayoutParams(layoutParams);              layoutParams = (LinearLayout.LayoutParams) holder.txtInfo.getLayoutParams();             layoutParams.gravity = Gravity.RIGHT;             holder.txtInfo.setLayoutParams(layoutParams);         } else {             holder.contentWithBG.setBackgroundResource(R.drawable.out_message_bg);              LinearLayout.LayoutParams layoutParams =                  (LinearLayout.LayoutParams) holder.contentWithBG.getLayoutParams();             layoutParams.gravity = Gravity.LEFT;             holder.contentWithBG.setLayoutParams(layoutParams);              RelativeLayout.LayoutParams lp =                  (RelativeLayout.LayoutParams) holder.content.getLayoutParams();             lp.addRule(RelativeLayout.ALIGN_PARENT_RIGHT, 0);             lp.addRule(RelativeLayout.ALIGN_PARENT_LEFT);             holder.content.setLayoutParams(lp);             layoutParams = (LinearLayout.LayoutParams) holder.txtMessage.getLayoutParams();             layoutParams.gravity = Gravity.LEFT;             holder.txtMessage.setLayoutParams(layoutParams);              layoutParams = (LinearLayout.LayoutParams) holder.txtInfo.getLayoutParams();             layoutParams.gravity = Gravity.LEFT;             holder.txtInfo.setLayoutParams(layoutParams);         }     }      private ViewHolder createViewHolder(View v) {         ViewHolder holder = new ViewHolder();         holder.txtMessage = (TextView) v.findViewById(R.id.txtMessage);         holder.content = (LinearLayout) v.findViewById(R.id.content);         holder.contentWithBG = (LinearLayout) v.findViewById(R.id.contentWithBackground);         holder.txtInfo = (TextView) v.findViewById(R.id.txtInfo);         return holder;     }      private static class ViewHolder {         public TextView txtMessage;         public TextView txtInfo;         public LinearLayout content;         public LinearLayout contentWithBG;     } } </code></pre>  <p>Thanks in advance</p>  <p>K-</p>  <p>EDIT:</p>  <p>The main problem was how to get the ID from the already created listview, This was clearly shown in the Acepted answer. </p>  <p>however instead of </p>  <pre><code>chatMessages.get(i).id == message.id </code></pre>  <p>i had to use</p>  <pre><code>chatMessages.get(i).getId() == message.getId() </code></pre>  <p>but this is a simple soloution and really works as expected</p>