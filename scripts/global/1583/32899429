<p>In list view</p>  <p>The first item is the second item looks invisible.</p>  <p>If the scroll seemed to be normal.</p>  <p>How do I solve this problem?</p>  <p>ListView is StaggeredGridView</p>  <p>Specifies the height of the row, depending on the image height</p>  <pre><code>public View getView(final int position, View v, ViewGroup container) {      final CardDetailViewHolder holder;     if(v == null) {         holder = new CardDetailViewHolder();         v = View.inflate(ctx, R.layout.row_card_detail, null);           holder.tv_contents = (TextView) v.findViewById(R.id.contents);          holder.viewpager = (ViewPager)v.findViewById(R.id.viewpager);          holder.tv_img_cnt = (TextView) v.findViewById(R.id.img_cnt_tv);          holder.iv_line = (ImageView)v.findViewById(R.id.line_2);          holder.imgbox = (RelativeLayout)v.findViewById(R.id.imgbox);           holder.btn_prev = (ImageView)v.findViewById(R.id.img_prev_btn);         holder.btn_next = (ImageView)v.findViewById(R.id.img_next_btn);             v.setTag(holder);     }else{         holder = (CardDetailViewHolder) v.getTag();     }       final CardBlockDTO mData = mList.get(position);         if(img_pos.containsKey(position)){      }else{         img_pos.put(position, 0);     }         ImageAdapter adapter = new ImageAdapter(mData.getPicArr(), holder.imgbox, position);      holder.viewpager.setAdapter(adapter);     holder.viewpager.setOffscreenPageLimit(mData.getPicArr().size()-1);     //      holder.viewpager.setClipToPadding(false);        holder.tv_contents.setText(mData.getContents());           holder.tv_img_cnt.setText("1"+"/"+ mData.getPicArr().size());     holder.viewpager.setOnPageChangeListener(new OnPageChangeListener() {          @Override         public void onPageSelected(int arg0) {              // TODO Auto-generated method stub             holder.tv_img_cnt.setText((arg0+1)+"/"+ mData.getPicArr().size());                img_pos.put(position, arg0);                 if(img_pos.get(position) == 0){                 holder.btn_prev.setVisibility(View.GONE);             }else{                 holder.btn_prev.setVisibility(View.VISIBLE);             }              if(img_pos.get(position) == mData.getPicArr().size() - 1){                 holder.btn_next.setVisibility(View.GONE);             }else{                 holder.btn_next.setVisibility(View.VISIBLE);             }             }          @Override         public void onPageScrolled(int arg0, float arg1, int arg2) {             // TODO Auto-generated method stub          }          @Override         public void onPageScrollStateChanged(int arg0) {             // TODO Auto-generated method stub          }     });      holder.viewpager.setCurrentItem(img_pos.get(position));       if(img_pos.get(position) == 0){         holder.btn_prev.setVisibility(View.GONE);     }else{         holder.btn_prev.setVisibility(View.VISIBLE);     }      if(img_pos.get(position) == mData.getPicArr().size() - 1){         holder.btn_next.setVisibility(View.GONE);     }else{         holder.btn_next.setVisibility(View.VISIBLE);     }        holder.btn_prev.setOnClickListener(new OnClickListener() {          @Override         public void onClick(View v) {             // TODO Auto-generated method stub             int image_position = img_pos.get(position);              if(image_position == 0){                 image_position = 0;             }else{                 image_position = image_position - 1;             }              holder.viewpager.setCurrentItem(image_position);           }     });       holder.btn_next.setOnClickListener(new OnClickListener() {          @Override         public void onClick(View v) {             // TODO Auto-generated method stub             int image_position = img_pos.get(position);              if(image_position == mData.getPicArr().size()){              }else{                 image_position = image_position + 1;             }                  holder.viewpager.setCurrentItem(image_position);          }     });        if(mheight.containsKey(position)){          System.out.println("mheight.get(position)" + mheight.get(position));          RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(LayoutParams.MATCH_PARENT, mheight.get(position));         holder.imgbox.setLayoutParams(params);     }       return v;  } </code></pre>