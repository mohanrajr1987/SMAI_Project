<p>I have an app I am developing that polls a vehicle's sensors via the obd2 port. Everything is going great and now I am adding a new activity that shows which sensors are supported and which aren't.</p>  <p>The issue now is that there is a possibility that a user might start the activity before all the supported commands have been checked, thus the ListView needs to be updated when the variable does change. </p>  <p>Now all the available pids are stored on a variable on the mainview, but once it changes it gets broadcasted and updated on the supportview.</p>  <p>The issue I am having is that it doesn't want to update the listview automatically. I have gone through multiple threads on SF and haven't found a solution thus far. I have tried everything from creating a custom handler and receiver to running it on the UI-thread.</p>  <p>This is the complete activity:</p>  <pre><code>public class SupportedView extends ListActivity { ArrayAdapter&lt;Spanned&gt; mAdapter; ArrayList&lt;Spanned&gt; commandsList; private String availpids;  private BroadcastReceiver mMessageReceiver = new BroadcastReceiver() {      @Override     public void onReceive(Context context, Intent intent) {         // Get extra data included in the Intent         PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);         PowerManager.WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,                 "ObdReader");          if (!wakeLock.isHeld()){             getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);             wakeLock.acquire();         }          String pids32 = intent.getParcelableExtra("pids");          updateList(pids32);         Log.d("receiver", "Got message: Updated PIDS" );           mAdapter.notifyDataSetChanged();          Toast.makeText(context, "Received and tried update", Toast.LENGTH_LONG).show();      } };  @Override public void onCreate(Bundle savedInstanceState) {     super.onCreate(savedInstanceState);     setContentView(R.layout.sl_listview);     //Set fullscreen     availpids = MainView.pids32_val;     getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);      LocalBroadcastManager.getInstance(this).registerReceiver(mMessageReceiver,             new IntentFilter("pids"));      updateList(availpids);      mAdapter = new ArrayAdapter&lt;Spanned&gt;(this, R.layout.sllist_item, commandsList);     setListAdapter(mAdapter);     //ListView lv = getListView();  }   public void updateList(String listPids){     commandsList = new ArrayList&lt;&gt;();     final ArrayList&lt;Spanned&gt; tmpEnabled = new ArrayList&lt;&gt;();     final ArrayList&lt;Spanned&gt; tmpDisabled = new ArrayList&lt;&gt;();      for (ObdCommand Command : ObdConfig.getCommands()) {         int commandKey = Command.getKey();          if(commandKey &gt; 0 &amp;&amp; commandKey &lt; 999 &amp;&amp; listPids != null) {             boolean isSupported = String.valueOf(listPids.charAt(commandKey - 1)).equals("1");             if (isSupported) {                 tmpEnabled.add(Html.fromHtml( "&lt;font color=\"green\"&gt;"  + Command.getName() + " isn't supported&lt;/font&gt;"));             }else {                 tmpDisabled.add(Html.fromHtml("&lt;font color=\"red\"&gt;" + Command.getName() + " is supported&lt;/font&gt;"));             }         }     }     commandsList.addAll(tmpEnabled);     commandsList.addAll(tmpDisabled); }   @Override protected void onDestroy() {     // Unregister since the activity is about to be closed.     super.onDestroy(); }   } </code></pre>