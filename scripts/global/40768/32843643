<p>To convince some people to switch from old school tech, I need to build a chat demo application that manages more than 10K concurrent connections using <em>Java</em> (like <em>Node.Js</em> stuff).</p>  <p>I have tested <em>Netty</em> 5.0 which is awesome but requires lot of work to be done; on the other hand <em>Jetty</em> 9.3 is great but is slow compared to other competitors.</p>  <p>After some search I found the <em>Vert.x</em> 3 toolkit which is based on <em>Netty</em> with a plethora of great tools (no need to reinvent the wheel), I have seen the examples in git and I was able to build a websocket server, etc.</p>  <pre class="lang-java prettyprint-override"><code>public void start() throws Exception {     vertx.createHttpServer().websocketHandler(new Handler&lt;ServerWebSocket&gt;() {         @Override         public void handle(ServerWebSocket e) {            // business stuff in the old style not yet lambda          }     }).listen(port); } </code></pre>  <p>Being new to the <em>Vert.x</em> world, I could not figure out how to manage connected users using it, normally the old fashion way is to use something like: </p>  <pre class="lang-java prettyprint-override"><code>HashMap&lt;UUID,ServerWebSocket&gt; connectedUsers; </code></pre>  <p>When a connection is established I check if it exists; if not I add it as a new  entry and do some functions to send, broadcast, retrieve through the collection and so on.</p>  <p>My question is does <em>Vert.x</em> 3 have something to deal with connections to track them and remove those who left (ping pong), broadcast, etc. or should I implement them from scratch using cookies, session, ....)</p>  <p>I could not find any real example using <em>Vert.x</em> 3.</p>