<p><strong>Aim:</strong></p>  <p>Add the multi-threading in the web-socket method by using play framework scala language.</p>  <p><strong>What I did:</strong></p>  <p>I have created the web-socket in both client/server side by using the play-websocket sample given by play framework. In the web socket message I have passed base64 image from the client and received it in the server side. </p>  <p><strong>What I want:</strong></p>  <p>I have to pass the base64 image to 4 different methods by using multithreading and pass the result message in the web socket response.</p>  <p>Can anyone tell me, is it possible to do this? If yes, can you tell how to implement this? It would be helpful to me.</p>  <p><strong>Code snippet:</strong></p>  <p><strong>index.scala.html:</strong></p>  <pre><code>    &lt;ul&gt;         &lt;li id="open"&gt;             &lt;a href='#'&gt;Open WebSocket&lt;/a&gt;         &lt;/li&gt;         &lt;li id="sendMsg" class="disabled"&gt;             &lt;a href='#'&gt;Send echo&lt;/a&gt;         &lt;/li&gt;         &lt;li id="file" class="disabled"&gt;             &lt;input type="file" id="picture" /&gt;         &lt;/li&gt;     &lt;/ul&gt;  @ws("WS_Prova") &lt;script type="text/javascript" charset="utf-8"&gt;     $(function() {          WS_Prova.address = "ws://localhost:9000/ws"              WS_Prova.on('open', function(e) {                 $('#status').text("WebSocket: opened").addClass('opened');             })              WS_Prova.on('message', function(e) {                 $('#message').text("Received: " + JSON.stringify(e.content));             })              WS_Prova.on('close', function(e) {                 $('#status').text("WebSocket: closed").addClass('closed');                 $('#message').text("...");              })             $('#picture').change(function(e) {                 e.preventDefault();                 var reader = new FileReader;                 reader.onloadend = function () {                     var obj = {                         "echo" : false,                         "data" : reader.result                     }                      WS_Prova.send(obj);                 }                 reader.readAsDataURL(this.files[0]);             })     }); </code></pre>  <p><strong>Application.scala:</strong></p>  <pre><code>  def index = Action {implicit request =&gt;     Ok(views.html.index("Welcome! Let's Play with your brand new websocket!")).withSession(         ("uuid" -&gt; java.util.UUID.randomUUID.toString)       )   }    def ws =      WebSocket.async[JsValue] {implicit request =&gt;      println("ws call initiated");       actors.ws.Ws.control   } } </code></pre>  <p><strong>Ws.scala:</strong></p>  <pre><code>object Ws extends WebSocketManager[Ws]  {   case class AlertOnlyMe(uuid: String) }  class Ws extends WSManagerActor {    import Ws._   import WSClientMsgs._    override def operative(implicit request: RequestHeader) = {     (wsClient) =&gt; {      case AlertOnlyMe(uuid) =&gt;       for {         clientUUID &lt;- request.session.get("uuid")         if (clientUUID.compareTo(uuid) == 0)       } {         wsClient ! JsToClient(Json.obj(               "status" -&gt; true,           "message" -&gt; "success"             ))       }     case JsFromClient(something) =&gt;       ((something\"echo").asOpt[Boolean]) match {         case Some(true) =&gt;           wsClient ! AlertOnlyMe(request.session.get("uuid").getOrElse(""))         case _ =&gt;            println((something\"data"))           var img = something\"data";           fn1(img.toString());           fn2(img.toString());           fn3(img.toString());           fn4(img.toString());           self ! JsToClient(Json.obj("broadcast" -&gt; (something\"data")))       }   }   }    def fn1(img: String) {    }    def fn2(img: String) {    }    def fn3(img: String) {    }    def fn4(img: String) {    }  } </code></pre>