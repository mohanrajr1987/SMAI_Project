<p>I'm trying to figure out the best way for my client apps (angular) to have a callback (with data) triggered from a server event. My current scheme is this:</p>  <ul> <li>client app uploads a document (not a very frequent operation)</li> <li>regular rest server receives it, and dispatches it to a worker over an amqp queue, where many version are generated and shuffled around S3 (could take a while)</li> <li>when workers are done, a message is sent, ultimately meant to trigger a callback in the client side app</li> </ul>  <p>Issues: - we will have many cooperating apps on different machines - we have to support IE9</p>  <p>The simplest solution seems to be that the workers put the result into redis, and the client app polls another server-app who's only job is to hand back results from redis (json params and a token to a callback to fire). If this "answer callback server" does nothing else, it can be plenty fast and tweaked for polling. In our case, the only server push events will be <em>responses</em> to something the client occasionally initiates. So a client only really needs to poll if they have a) uploaded a file and b) not gotten their response yet. We don't need all clients polling all the time for random server events (like you would for chat, say). I wonder if this means that vanilla short-polling would be fine, or are there advantages to using websockets or long polling that I'm not aware of? Any suggestions or pointers to resources welcome.</p>