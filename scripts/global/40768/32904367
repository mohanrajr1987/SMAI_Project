<p><strong>Aim:</strong></p>  <p>Implement the oAuth in the web socket using Play framework scala language.</p>  <p><strong>What I did:</strong></p>  <p>I have implemented the web socket using play scala framework. Now I am trying to implement the oAuth in the web socket.</p>  <p><strong>What I want:</strong> Is it possible to implement the oAuth in the web socket communication. I have searched in the internet. But I didn't get any documentation or example regarding this.</p>  <p>Can anyone tell me, is it possible to do this? If yes, can you tell how to implement this? It would be helpful to me.</p>  <p>Code snippet for web socket:</p>  <p><strong>Application.scala:</strong></p>  <pre><code>def index = Action {implicit request =&gt;     Ok(views.html.index("Welcome! Let's Play with your brand new websocket!")).withSession(         ("uuid" -&gt; java.util.UUID.randomUUID.toString)       )   }    def ws =      WebSocket.async[JsValue] {implicit request =&gt;      println("ws call initiated");       actors.ws.Ws.control   } </code></pre>  <p><strong>Ws.scala:</strong></p>  <pre><code>object Ws extends WebSocketManager[Ws]  {   case class AlertOnlyMe(uuid: String) }  class Ws extends WSManagerActor {    import Ws._   import WSClientMsgs._    override def operative(implicit request: RequestHeader) = {     (wsClient) =&gt; {      case AlertOnlyMe(uuid) =&gt;       for {         clientUUID &lt;- request.session.get("uuid")         if (clientUUID.compareTo(uuid) == 0)       } {         wsClient ! JsToClient(Json.obj(               "status" -&gt; true,           "message" -&gt; "success"             ))       }     case JsFromClient(something) =&gt;       ((something\"echo").asOpt[Boolean]) match {         case Some(true) =&gt;           wsClient ! AlertOnlyMe(request.session.get("uuid").getOrElse(""))         case _ =&gt;            println((something\"data"))           self ! JsToClient(Json.obj("broadcast" -&gt; (something\"data")))       }   }   } } </code></pre>