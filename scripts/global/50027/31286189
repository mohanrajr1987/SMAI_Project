<p>I want to bind <code>visibility</code> of a <code>textblock</code>, within a <code>listbox</code>, to a <code>bool</code> value in my <code>ViewModel</code>. Binding works well to a <code>textblock</code> outside the <code>listbox</code>, but it isn't working to the <code>textblock</code> within the <code>listbox</code>. Please help!</p>  <p>xaml code:</p>  <pre><code>&lt;TextBlock x:Name="heading" Visibility="{Binding MyVb.Visible, Converter={StaticResource BoolToVisConverter}}" Width="480"/&gt; &lt;ListBox x:Name="lstBani1" ItemsSource="{Binding Users}"&gt;             &lt;ListBox.ItemTemplate&gt;                 &lt;DataTemplate&gt;                     &lt;StackPanel Orientation="Vertical"&gt;                         &lt;TextBlock x:Name="tb1" Text="{Binding string1}" Visibility="{Binding MyVb.Visible, Converter={StaticResource BoolToVisConverter}}" Width="480"/&gt;                         &lt;TextBlock x:Name="tb2" Text="{Binding string2}"  Width="480"/&gt;                         &lt;TextBlock x:Name="tb3" Text="{Binding string3}" Width="480"/&gt;                     &lt;/StackPanel&gt;                 &lt;/DataTemplate&gt;             &lt;/ListBox.ItemTemplate&gt;         &lt;/ListBox&gt; </code></pre>  <p>cs code:</p>  <pre><code>public partial class Page1 : PhoneApplicationPage {     public Page1()     {         ViewModel model = new ViewModel();         model.Users = GetUsers();         model.MyVb = new MyVisibility();         model.MyVb.Visible = false;         this.DataContext = model;     }     // View Model     public class ViewModel     {         public List&lt;User&gt; Users { get; set; }         public MyVisibility MyVb { get; set; }     }       // Bool to Visibility Converter      public class BooleanToVisibilityConverter : IValueConverter     {         public object Convert(object value, Type targetType, object parameter, CultureInfo culture)         {             return (bool)value ? Visibility.Visible : Visibility.Collapsed;         }          public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)         {             throw new NotImplementedException();         }     }     // Property Classes     public class User     {         public string string1 { get; set; }         public string string2 { get; set; }         public string string3 { get; set; }     }     public class MyVisibility : INotifyPropertyChanged     {         private bool _Visible;         public event PropertyChangedEventHandler PropertyChanged;         public bool Visible         {             get { return _Visible; }             set             {                 _Visible = value;                 NotifyPropertyChanged("Visible");             }         }         public void NotifyPropertyChanged(string propertyName)         {             if (PropertyChanged != null)             {                 PropertyChanged(this, new PropertyChangedEventArgs(propertyName));             }         }     }     private List&lt;Bani&gt; GetUsers() {....}                     } </code></pre>