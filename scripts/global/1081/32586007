<pre><code>CMD&gt;// Applet Instantiation APDU Script // // Package:     cryptoPack // Package AID: //aid/A000000062/03010C01 // Applet:      CryptoDES // Applet AID:  //aid/A000000062/03010C0101 // // Select the installer applet 0x00 0xA4 0x04 0x00 0x09 0xA0 0x00 0x00 0x00 0x62 0x03 0x01 0x08 0x01 0x7F; APDU|CLA: 00, INS: a4, P1: 04, P2: 00, Lc: 09, a0, 00, 00, 00, 62, 03, 01, 08, 01, Le: 00, SW1: 90, SW2: 00 // Create CryptoDES applet 0x80 0xB8 0x00 0x00 0x0C 0x0A 0xA0 0x00 0x00 0x00 0x62 0x03 0x01 0x0C 0x01 0x01 0x00 0x7F; APDU|CLA: 80, INS: b8, P1: 00, P2: 00, Lc: 0c, 0a, a0, 00, 00, 00, 62, 03, 01, 0c, 01, 01, 00, Le: 00, SW1: 64, SW2: 44 </code></pre>  <p>I tested this code from <a href="http://stackoverflow.com/questions/30148089/java-card-des-generator-applet-output-is-different-from-online-tools-output">Java Card DES generator applet output is different from online-tools output</a>. And my test environment is eclipse and java card platform.  I compiled CryptoDES.java as Java Card Project. And first, I operated cap-cryptoPack script. Next, create-cryptoPack.CryptoDES script. But, as above console, Sample_Device returned 0x6444. I don't know problem. Please help me.</p>  <pre><code>package cryptoPack;  import javacard.framework.APDU; import javacard.framework.Applet; import javacard.framework.ISO7816; import javacard.framework.ISOException; import javacard.framework.JCSystem; import javacard.framework.Util; import javacard.security.CryptoException; import javacard.security.DESKey; import javacard.security.KeyBuilder; import javacardx.crypto.Cipher;  public class CryptoDES extends Applet {      // Array for the encryption/decryption key     private byte[] TheDES_Key = { (byte) 0x00, (byte) 0x00, (byte) 0x00,             (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,             (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,             (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,             (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,             (byte) 0x00 };      // Defining required Keys     DESKey MyDES1Key = (DESKey) KeyBuilder.buildKey(KeyBuilder.TYPE_DES,             KeyBuilder.LENGTH_DES, false);     DESKey MyDES2Key = (DESKey) KeyBuilder.buildKey(KeyBuilder.TYPE_DES,             KeyBuilder.LENGTH_DES3_2KEY, false);     DESKey MyDES3Key = (DESKey) KeyBuilder.buildKey(KeyBuilder.TYPE_DES,             KeyBuilder.LENGTH_DES3_3KEY, false);      byte ConfiguredKeyLength;      // Defining required cipher     Cipher MyCipher;      // Defining switch case variables for supported instructions = INS in APDU command     final byte SetKey = (byte) 0xC0;     final byte OneKeyDES = (byte) 0xC1;     final byte TwoKeyDES = (byte) 0xC2;     final byte ThreeKeyDES = (byte) 0xC3;      // Defining switch case variables for cipher algorithms = P1 in APDU command     final byte DES_CBC_ISO9797_M1 = (byte) 0x00;     final byte DES_CBC_ISO9797_M2 = (byte) 0x01;     final byte DES_CBC_NOPAD = (byte) 0x02;     final byte DES_CBC_PKCS5 = (byte) 0x03;     final byte DES_ECB_ISO9797_M1 = (byte) 0x04;     final byte DES_ECB_ISO9797_M2 = (byte) 0x05;     final byte DES_ECB_NOPAD = (byte) 0x06;     final byte DES_ECB_PKCS5 = (byte) 0x07;      // Defining Proprietary Status Words     final short KeyInNotSetGood = 0x6440;      // A flag to be sure that the configured key has the same length that the     // algorithm needs.      private CryptoDES() {      }      public static void install(byte bArray[], short bOffset, byte bLength)             throws ISOException {         new CryptoDES().register();     }      public void process(APDU apdu) throws ISOException {          // Assigning 0 to "ConfiguredKeyLength" to force the user to use ...         // ... "SetKey" command, after applet selection.         if (selectingApplet()) {             ConfiguredKeyLength = 0;             return;         }          byte[] buffer = apdu.getBuffer();          // Checking the CLA field in the APDU command.         if (buffer[ISO7816.OFFSET_CLA] != 0) {             ISOException.throwIt(ISO7816.SW_CLA_NOT_SUPPORTED);         }          // Checking the P1 and P2 fields in the APDU command.         if (buffer[ISO7816.OFFSET_P1] &gt; 7 || buffer[ISO7816.OFFSET_P2] &gt; 1) {             ISOException.throwIt(ISO7816.SW_INCORRECT_P1P2);         }          // Analyzing the command.         try {              switch (buffer[ISO7816.OFFSET_INS]) {              case SetKey:                 SetCryptoKeyAndInitCipher(apdu);                 break;              case OneKeyDES:                  OneKeyDESCrypto(apdu);                 DoEncryptDecrypt(apdu);                  break;              case TwoKeyDES:                 TwoKeyDESCrypto(apdu);                 DoEncryptDecrypt(apdu);                 break;              case (byte) ThreeKeyDES:                 ThreeKeyDESCrypto(apdu);                 DoEncryptDecrypt(apdu);                 break;              default:                 ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);              }          } catch (CryptoException e) {             ISOException.throwIt(((CryptoException) e).getReason());         }      }      public void SetCryptoKeyAndInitCipher(APDU apdu)             throws ISOException {         byte[] buffer = apdu.getBuffer();         // Key must has a length of 8, 16 or 24 bytes         if (buffer[ISO7816.OFFSET_LC] == 8 || buffer[ISO7816.OFFSET_LC] == 16                 || buffer[ISO7816.OFFSET_LC] == 24) {             Util.arrayCopyNonAtomic(buffer, ISO7816.OFFSET_CDATA, TheDES_Key,                     (short) 0, buffer[ISO7816.OFFSET_LC]);              ConfiguredKeyLength = buffer[ISO7816.OFFSET_LC];          } else {             ISOException.throwIt(ISO7816.SW_DATA_INVALID);         }          switch (buffer[ISO7816.OFFSET_P1]) {         case DES_CBC_ISO9797_M1:             MyCipher = Cipher.getInstance(Cipher.ALG_DES_CBC_ISO9797_M1, false);             break;         case DES_CBC_ISO9797_M2:             MyCipher = Cipher.getInstance(Cipher.ALG_DES_CBC_ISO9797_M2, false);             break;         case DES_CBC_NOPAD:             MyCipher = Cipher.getInstance(Cipher.ALG_DES_CBC_NOPAD, false);             break;         case DES_CBC_PKCS5:             MyCipher = Cipher.getInstance(Cipher.ALG_DES_CBC_PKCS5, false);             break;         case DES_ECB_ISO9797_M1:             MyCipher = Cipher.getInstance(Cipher.ALG_DES_ECB_ISO9797_M1, false);             break;         case DES_ECB_ISO9797_M2:             MyCipher = Cipher.getInstance(Cipher.ALG_DES_ECB_ISO9797_M2, false);             break;         case DES_ECB_NOPAD:             MyCipher = Cipher.getInstance(Cipher.ALG_DES_ECB_NOPAD, false);             break;         case DES_ECB_PKCS5:             MyCipher = Cipher.getInstance(Cipher.ALG_DES_ECB_PKCS5, false);             break;          }      }      public void OneKeyDESCrypto(APDU apdu)             throws ISOException {         byte[] buffer = apdu.getBuffer();         // Check to see if the configured key is the required key for this ...         // ... algorithm or not         if (ConfiguredKeyLength != 8) {             ISOException.throwIt(KeyInNotSetGood);         }         MyDES1Key.setKey(TheDES_Key, (short) 0);          if (buffer[ISO7816.OFFSET_P2] == 1) {             MyCipher.init(MyDES1Key, Cipher.MODE_ENCRYPT);         } else {             MyCipher.init(MyDES1Key, Cipher.MODE_DECRYPT);          }      }      public void TwoKeyDESCrypto(APDU apdu)             throws ISOException {         byte[] buffer = apdu.getBuffer();         // Check to see if the configured key is the required key for this ...         // ... algorithm or not          if (ConfiguredKeyLength != 16) {             ISOException.throwIt(KeyInNotSetGood);         }         MyDES2Key.setKey(TheDES_Key, (short) 0);          if (buffer[ISO7816.OFFSET_P2] == 1) {             MyCipher.init(MyDES2Key, Cipher.MODE_ENCRYPT);         } else {             MyCipher.init(MyDES2Key, Cipher.MODE_DECRYPT);          }      }      public void ThreeKeyDESCrypto(APDU apdu)             throws ISOException {         byte[] buffer = apdu.getBuffer();         // Check to see if the configured key is the required key for this ...         // ... algorithm or not         if (ConfiguredKeyLength != 24) {             ISOException.throwIt(KeyInNotSetGood);         }          MyDES3Key.setKey(TheDES_Key, (short) 0);          if (buffer[ISO7816.OFFSET_P2] == 1) {             MyCipher.init(MyDES3Key, Cipher.MODE_ENCRYPT);         } else {             MyCipher.init(MyDES3Key, Cipher.MODE_DECRYPT);          }      }      public void DoEncryptDecrypt(APDU apdu) {         byte[] buffer = apdu.getBuffer();          byte[] CipheredData = JCSystem.makeTransientByteArray((short) 32,                 JCSystem.CLEAR_ON_DESELECT);          short datalen = apdu.setIncomingAndReceive();         if ((datalen % 8) != 0) {             ISOException.throwIt(ISO7816.SW_DATA_INVALID);         }          MyCipher.doFinal(buffer, (short) 0, datalen, CipheredData, (short) 0);         Util.arrayCopyNonAtomic(CipheredData, (short) 0, buffer, (short) 0,                 datalen);         apdu.setOutgoingAndSend((short) 0, datalen);     }  } </code></pre>