<p>The following UPDATE statement does exactly what I want it to do:</p>  <pre><code>UPDATE [dbo].[Person] SET [IsUpdated] = 0  FROM [Person] p WHERE p.IsUpdated = 1   and p.PersonID NOT IN (SELECT DISTINCT q.PersonID FROM [DeletionQueue] d, [Queue] q                          WHERE d.fkQueueID = q.QueueID) </code></pre>  <p>However, when I run the Estimated execution plan for this statement, I see that 70% of my process time is consumed by the NOT IN SELECT statement. I would much rather achieve the same results using a JOIN statement of some sort.</p>  <p>I have tried to create the statement in a number of different ways, but the closest I have been able to come to replicating the above statement is one that gives me the exact opposite results of what I am looking for (i.e. If I have 2 persons in the Persons table with IsUpdated = 1, both persons have an entry in the Queue table (QueueID), but only person B is in the DeletionQueue table (fkQueueID), then only person A's record in the Person table should have IsUpdated changed to 0). Currently, when I try a JOIN statement, person B is updated and person A is not.</p>  <p>I can use the statement as is if necessary, but performance is pretty critical in this application.  Any ideas?</p>