<p>First I'm including some things I tried, as I think it's quite self explanatory to what I'm trying to do.</p>  <pre><code>$event-&gt;load(['dates' =&gt; function($q) {   $q-&gt;where( DB::raw('DATE(start_time)'), '&gt;=', Carbon::now()-&gt;format('Y-m-d'))    -&gt;orderBy('start_time', 'asc')     -&gt;where( DB::raw('DATE(start_time)'), '&lt;', Carbon::now()-&gt;format('Y-m-d'))    -&gt;orderBy('start_time', 'desc');  }]); </code></pre>  <p>or</p>  <pre><code>$event-&gt;load(['dates' =&gt; function($q) {   $q-&gt;where( DB::raw('DATE(start_time)'), '&gt;=', Carbon::now()-&gt;format('Y-m-d'))    -&gt;orderBy('start_time', 'asc')     -&gt;orWhere(function($query) {       $query-&gt;where( DB::raw('DATE(start_time)'), '&lt;', Carbon::now()-&gt;format('Y-m-d'))            -&gt;orderBy('start_time', 'desc');      });  }]); </code></pre>  <h2>What I'm trying to do</h2>  <p>I have an EVENTS table with an <code>hasMany</code> relation to DATES. I'm trying to eager load the related dates <strong>first</strong> in <strong>ascending</strong> order for the upcoming dates and then in <strong>descending</strong> order for the dates that have already passed.</p>  <p>With anything I try, the <code>orderBy</code> is always ordering <strong>all</strong> the results and not the <code>where</code> query. How to approach this problem?</p>  <hr>  <p>Many thanks - correct answer will of course be voted up and selected as answer.</p>