<p>I have a series of <code>INSERT</code> statements to execute, and I would like to use Laravel's Eloquent to do so:</p>  <pre><code>$mountain = Mountain::find(1); $dragons = [1, 2, 3, 4]; foreach ($dragons as $id){     $mountain-&gt;dragons()-&gt;attach($id);  // Eloquent performs an `INSERT` here }   </code></pre>  <p>I know that Eloquent uses prepared statements, but will it <em>re-prepare</em> the same query over each iteration, or is it smart enough to cache the prepared <code>INSERT</code> statement on the first iteration, and then simply run <code>-&gt;execute</code> on each subsequent iteration?</p>  <p>From <a href="http://php.net/manual/en/pdo.prepared-statements.php" rel="nofollow">PHP's PDO documentation</a>:</p>  <blockquote>   <p>By using a prepared statement the application avoids repeating the analyze/compile/optimize cycle. This means that prepared statements use fewer resources and thus run faster. </p> </blockquote>  <p>I realize that saving every prepared statement ever throughout the application lifecycle might not be the best idea, but in certain cases it seems warranted.  If Eloquent doesn't do this by default, is there a way to tell it to cache the prepared statements for a particular model operation?</p>