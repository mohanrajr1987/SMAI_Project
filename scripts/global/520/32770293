<p>I'm trying to write a (web) music player, but my problem is that I can either</p>  <ul> <li>Download the entire song with XHR request (at the very least 5-7seg delay, has to be transcoded)</li> <li>Create an audio element, set the src property to the url and have it play</li> </ul>  <p>My problem with the first scenario is that the delay is too big to be useful.</p>  <p>The problem with the second scenario is that while it starts playing instantly, on big files the browser only downloads part of the song (say, 3MB) and then waits until the buffer starts running out before downloading the rest of the song. The problem is that upon requesting the file, the back-end starts delivering the audio from the beginning, so the audio stops.</p>  <p>What can I do? Ideally I'd add the output as its received to an array, and would begin playing as soon as the first chunk arrives. The audio is OGG.</p>  <p>More info:</p>  <p>Doing something trivial like this</p>  <pre><code>        var audio = new Audio();         audio.preload='auto';         audio.addEventListener('canplaythrough',function() {             audio.play();         });         audio.src='/back/song/'+song;         audio.load(); </code></pre>  <p>Results in this <a href="http://i.stack.imgur.com/NkNBs.png" rel="nofollow"><img src="http://i.stack.imgur.com/NkNBs.png" alt="Timings"></a></p>  <p>Where the second request doesn't work</p>