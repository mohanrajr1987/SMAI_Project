<p>I have this function for streaming text files:</p>  <pre><code>def txt_response(filename, iterator):     if not filename.endswith('.txt'):         filename += '.txt'     filename = filename.format(date=str(datetime.date.today()).replace(' ', '_'))     response = Response((_.encode('utf-8')+'\r\n' for _ in iterator), mimetype='text/txt')     response.headers['Content-Disposition'] = 'attachment; filename={filename}'.format(filename=filename)     return response </code></pre>  <p>I am working out how to stream a CSV in a similar manner. <a href="http://flask.pocoo.org/docs/0.10/patterns/streaming/" rel="nofollow">This page</a> gives an example, but I wish to use the CSV module.</p>  <p>I can use <code>StringIO</code> and create a fresh "file" and CSV writer for each line, but it seems very inefficient. Is there a better way?</p>