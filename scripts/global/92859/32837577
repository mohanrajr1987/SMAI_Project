<p>The objective is to get it so that if a <code>SKSpriteNode(circle)</code> of a certain colour touches the same colour edge then it is removed from the scene. Each circle is randomly spawned at each edge of the screen.</p>  <p>I have tried adding 4 <code>SKSprite</code> nodes at each edge and using the <code>didBeginContact</code> func to detect the collision. I have also tried to do this via the <code>gameScene.sks</code> file but for some reason it does not detect the collisions even after adding the <code>collisionBitMask</code> categories it does not detect. But I still cant get this to work and its quite frustrating, please help.</p>  <pre><code>import SpriteKit  class GameScene: SKScene, SKPhysicsContactDelegate {      var bombColor = SKSpriteNode()      var blueBombCatagory : UInt32 = 0x1 &lt;&lt; 0     var redBombCatagory : UInt32 = 0x1 &lt;&lt; 2     var yellowBombCatagory : UInt32 = 0x1 &lt;&lt; 3     var greenBombCatagory : UInt32 = 0x1 &lt;&lt; 4      var blueSideContact : UInt32 = 0x1 &lt;&lt; 5     var yellowSideContact : UInt32 = 0x1 &lt;&lt; 6     var greenSideContact : UInt32 = 0x1 &lt;&lt; 7     var redSideContact : UInt32 = 0x1 &lt;&lt; 8      var speedFactor:CGFloat = 0.5     var spawnInterval =  0.4 + (NSTimeInterval(arc4random_uniform(5)) * 0.25)     var spawnTimer = NSTimer()      override func didMoveToView(view: SKView) {         /* Setup your scene here */          self.physicsWorld.contactDelegate = self         self.physicsWorld.gravity = CGVectorMake(0, 0)          var rotationPoint = childNodeWithName("rotationPoint")         var player = childNodeWithName("player")          var blueSide = childNodeWithName("blueSidePhyscis") as! SKSpriteNode!         let redSide = childNodeWithName("redSide") as! SKSpriteNode!         let greenSide = childNodeWithName("greenSide") as! SKSpriteNode!         let yellowSide = childNodeWithName("yellowSide") as! SKSpriteNode!          blueSide?.physicsBody!.categoryBitMask = blueSideContact         blueSide?.physicsBody!.contactTestBitMask = blueBombCatagory         redSide?.physicsBody!.categoryBitMask = redSideContact         redSide?.physicsBody!.contactTestBitMask = redBombCatagory         greenSide?.physicsBody!.categoryBitMask = greenSideContact         greenSide?.physicsBody!.contactTestBitMask = greenBombCatagory         yellowSide?.physicsBody!.categoryBitMask = yellowSideContact         yellowSide?.physicsBody!.contactTestBitMask = yellowBombCatagory          spawnTimer = NSTimer.scheduledTimerWithTimeInterval(2, target: self, selector: Selector("spawnPoint"), userInfo: nil, repeats: true)     }      func didBeginContact(contact: SKPhysicsContact) {         //this gets called automatically when two objects begin contact with each other         if (contact.bodyA.categoryBitMask == blueSideContact &amp;&amp; contact.bodyB.categoryBitMask == blueBombCatagory)  {             println("blue")             deletion()          } else if(contact.bodyB.categoryBitMask == blueSideContact &amp;&amp; contact.bodyA.categoryBitMask == blueBombCatagory) {             println("blue")             deletion()          }else if(contact.bodyA.categoryBitMask == redSideContact &amp;&amp; contact.bodyB.categoryBitMask == redBombCatagory) {             println("red")             deletion()          } else if(contact.bodyA.categoryBitMask == greenSideContact &amp;&amp; contact.bodyB.categoryBitMask == greenBombCatagory) {             println("green")             deletion()          } else if(contact.bodyA.categoryBitMask == yellowSideContact &amp;&amp; contact.bodyB.categoryBitMask == yellowBombCatagory) {             println("yellow")             deletion()         }     }       override func touchesBegan(touches: Set&lt;NSObject&gt;, withEvent event: UIEvent) {         /* Called when a touch begins */          for touch in (touches as! Set&lt;UITouch&gt;) {              let location = touch.locationInNode(self)              if location.x &lt; self.size.width/2 {                 println("Left")                 rotateLeft()             }             else {                 println("Right")                 rotateRight()             }          }      }      override func update(currentTime: CFTimeInterval) {         /* Called before each frame is rendered */     }      func deletion() {         bombColor.removeFromParent()     }      func rotateLeft() {          var rotationPoint : SKNode = childNodeWithName("rotationPoint")!          let rotationLeft = SKAction.rotateByAngle(CGFloat(1.570793268), duration: 0.3)         rotationPoint.runAction(rotationLeft)          //player.runAction(rotationLeft)      }      func spawnPoint() {          let spritePicker = arc4random() % 4         var rotationPoint : SKNode = childNodeWithName("rotationPoint")!          switch spritePicker{          case 0:             bombColor = SKSpriteNode(imageNamed: "BombBlue")             bombColor.size = CGSize(width: 20, height: 20)             bombColor.physicsBody = SKPhysicsBody(circleOfRadius: 10)             bombColor.physicsBody?.categoryBitMask = 4294967294             bombColor.physicsBody?.usesPreciseCollisionDetection = true             bombColor.physicsBody?.dynamic = true             bombColor.physicsBody?.collisionBitMask = 4294967295             break;         case 1:             bombColor = SKSpriteNode(imageNamed: "BombRed")             bombColor.size = CGSize(width: 20, height: 20)             bombColor.physicsBody = SKPhysicsBody(circleOfRadius: 10)             bombColor.physicsBody?.categoryBitMask = redBombCatagory             bombColor.physicsBody?.usesPreciseCollisionDetection = true             bombColor.physicsBody?.dynamic = true             bombColor.physicsBody?.collisionBitMask = redSideContact             break;         case 2:             bombColor = SKSpriteNode(imageNamed: "BombYellow")             bombColor.size = CGSize(width: 20, height: 20)             bombColor.physicsBody = SKPhysicsBody(circleOfRadius: 10)             bombColor.physicsBody?.categoryBitMask = yellowBombCatagory             bombColor.physicsBody?.usesPreciseCollisionDetection = true             bombColor.physicsBody?.dynamic = true             bombColor.physicsBody?.collisionBitMask = yellowSideContact             break;         case 3:             bombColor = SKSpriteNode(imageNamed: "BombGreen")             bombColor.size = CGSize(width: 20, height: 20)             bombColor.physicsBody = SKPhysicsBody(circleOfRadius: 10)             bombColor.physicsBody?.categoryBitMask = greenBombCatagory             bombColor.physicsBody?.usesPreciseCollisionDetection = true             bombColor.physicsBody?.dynamic = true             bombColor.physicsBody?.collisionBitMask = greenSideContact             break;         default:             break;         }          let RandomNumber = arc4random() % 1          switch RandomNumber{          case 0:              bombColor.position.x = CGRectGetMidX(self.frame)              bombColor.position.y = CGRectGetMaxY(self.frame)              self.addChild(bombColor)              break;          case 1:              bombColor.position.x = CGRectGetMidX(self.frame)              bombColor.position.y = CGRectGetMinY(self.frame)              self.addChild(bombColor)              break;          case 2:              bombColor.position.x = CGRectGetMinX(self.frame)              bombColor.position.y = CGRectGetMidY(self.frame)              self.addChild(bombColor)              break;          case 3:              bombColor.position.x = CGRectGetMaxX(self.frame)              bombColor.position.y = CGRectGetMidY(self.frame)              self.addChild(bombColor)              break;          default:             break;         }          let speed = 2 - speedFactor         bombColor.runAction(SKAction.moveTo(rotationPoint.position, duration: NSTimeInterval(2)))      }      func rotateRight() {          var rotationPoint : SKNode = childNodeWithName("rotationPoint")!          let rotationRight = SKAction.rotateByAngle(CGFloat(-1.570793268), duration: 0.3)          rotationPoint.runAction(rotationRight)         //player.runAction(rotationRight)      } } </code></pre>