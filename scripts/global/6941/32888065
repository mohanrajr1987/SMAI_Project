<p>I am trying to create remap function using C same as OpenCV function(Remap). i don't want to do interpolation. My code is as below</p>  <pre><code>           unsigned short *src, *dst;             unsigned short **src_2D, **dst_2D;             unsigned short **map_x,**map_y;               //-------------------create buffer-----------------------------               unsigned short **src_2D=malloc(ROW * sizeof(*src_2D ));               unsigned short **dst_2D=malloc(ROW * sizeof(*dst_2D ));              unsigned short **map_x=malloc(ROW * sizeof(*map_x ));               unsigned short **map_y=malloc(ROW * sizeof(*map_y ));                 for (i = 0; i &lt; ROW; i++)              {                 src_2D[i] = malloc(COL* sizeof(*src_2D));                  dst_2D[i] = malloc(COL* sizeof(*dst_2D));                 map_x[i] = malloc(COL* sizeof(*map_x));                 map_y[i] = malloc(COL* sizeof(*map_y));             }          correct_orientation(){             /*making mapx and mapy values*/                  double  theta = 0,                     sRadius = 0,                     sRadius2 = 0,                     sDistance = 0,                     radius = 0,                     nX = 0,                     nY = 0;                   long tWidth = COL; // as per sensor specification for full frame                 long tHeight = ROW;                  float lensRadius = 100; // to apply the effect on the full frame of an image                     double midX = tWidth/2;                     double midY = tHeight/2;                  sRadius = sqrt((tWidth * tWidth) + (tHeight * tHeight));                  double refDistance = 0;//modified 0 to 2                 double fixStrength =6.2;                 double fixZoom = 1.9;                 refDistance = sRadius / fixStrength;                  sRadius = sRadius * (lensRadius / 100);                 sRadius2 = sRadius * sRadius;                  //float sampleIndex =1; //has to be changed in future              int x = 0;              int y = 0;              for (x = 0; x &lt; ROW; x++)                 {                  for (y = 0; y &lt; COL; y++)                 {              //Remap the coordinates around a center point of (0, 0)                     nX = x - midX;                     nY = y - midY;                            //Calculate distance automatically                         sDistance = (nX * nX) + (nY * nY);                          if (sDistance &lt;= (sRadius2))                         {                              sDistance = sqrt(sDistance);                             radius = sDistance / refDistance;                              if (radius == 0)                             {                                 theta = 1;                             }                             else                             {                                 theta = atan(radius) / radius;                             }                               map_x[x][y]= midX + (theta) * nX * fixZoom;                             map_y[x][y] = midY + (theta) * nY * fixZoom;                         }                          else                         {                             map_x[x][y] = x ;//+ cos(fabs(theta)) * fixZoom  ;//x;                             map_y[x][y] = y ;//+ sin(fabs(theta)) * fixZoom ;//y;                          }                      }                 }      }      void remap(src,dst,map_x,map_y){      //-------remap function output buffer is dst as opencv excluding interpolation argument--------------------             // remap(src,dst,map_x,map_y,CV_INTERPOLATE_CUBIC);              for(m=0;m&lt;ROW;m++)                      {                        for(n=0;n&lt;ROW;n++)                        {                           dst_2D[m][n]=(src_2D[m][n]*map_x[m][n]*map_y[m][n]);                           }                         }              //---------------converting dst to 1D--------------------             l=0;              for(i=0;i&lt;ROW;i++)              {                 for(k=l,j=0;k&lt;MAX_SIZE,j&lt;COL;k++,j++)                {                   dst[k]=dst_2D[i][j];                   }                l=k;                   }  return dst;            } </code></pre>  <p>I understand that remap reallocates the new value to the src array using map_x and map_y buffer. but how to write a program for that? the output of my remap function is not as Opencv. I can't figure out what to do? Any help will be highly appreciable.</p>