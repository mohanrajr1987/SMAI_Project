<p>I wrote this function in PHP for changing a picture from one color to another, and I really like it. To me, it looks very realistic for my purposes, and it seems to take the brightness of the original image into consideration pretty well. But, it's slow. With the image sizes I'm working with, it takes about 23 seconds to recolor one image. I know the speed bump is from looping through every pixel, so I tried out some different combinations of Imagemagick functions through the Imagick class, but I couldn't find any combo that I liked the results of as much as my function. Is there a way, maybe using C, that I can write this as some sort of plugin for Imagemagick, and even make it available through the Imagick class so I don't have to run it through something like exec()? I also tried using Imagick's PixelIterator, and looked at fxImage, but those were just as slow if not worse.</p>  <pre><code>public function colorize($img, $rgb) {     imagealphablending($img, true);     imagesavealpha($img, true);      // get width and height of image     $iwidth = imagesx($img);     $iheight = imagesy($img);      // loop through each pixel     for ($y=0; $y&lt;$iheight; $y++) for ($x=0; $x&lt;$iwidth; $x++) {         // get all original r, g, b, a values of the pixel         $orgb = imagecolorat($img, $x, $y);         $oa = ($orgb &gt;&gt; 24) &amp; 0xFF;         $or = ($orgb &gt;&gt; 16) &amp; 0xFF;         $og = ($orgb &gt;&gt; 8) &amp; 0xFF;         $ob = $orgb &amp; 0xFF;          // add up orginal rgb values and new rgb values         $total_original = $or + $og + $ob;         $total_new = $rgb[0] + $rgb[1] + $rgb[2];          // adjust brightness using average of rgb channels         $bright = -127 + $total_new/3;         // take average difference between new color's brightness and old color's brightness, add brightness adjustment to it, and round         $adjustment = round($bright + ($total_new - $total_original) / -3);          // set each channel to new color channels, add the adjustment, and make sure the result isn't less than 0 or greater than 255         $r = max(0,min($adjustment + $rgb[0],255));         $g = max(0,min($adjustment + $rgb[1],255));         $b = max(0,min($adjustment + $rgb[2],255));          // replace original pixel         $nrgb = imagecolorallocatealpha($img, $r, $g, $b, $oa);         imagesetpixel($img, $x, $y, $nrgb);     } } </code></pre>