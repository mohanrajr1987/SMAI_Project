<p>So I've been working on a Win10 Universal App and wanted to create some live tiles for it. I'm using the <strong>NotificationExtensions</strong> library for achieving this. However, I ran into a super weird behavior which doesn't make any sort of sense to me. Basically, I'm trying to assign some string to the Text property of a TileText and it wouldn't work in certain conditions. Let me exemplify a bit:</p>  <pre><code>public sealed class ConnectionRequestDetailsTile : TileLayoutBase {      private readonly ResourceLoader m_resLoader;       public ConnectionRequestDetailsTile(int connectionRequestCount, ResourceLoader resLoader)      {         if (resLoader == null)         {             throw new ArgumentNullException(nameof(resLoader));         }         m_resLoader = resLoader;          //TileHeader.Text = m_resLoader.GetString("Connections");         //TileStaticText.Text = m_resLoader.GetString("Requests");         //TileData.Text = connectionRequestCount.ToString();          TileHeader.Text = "Connections";         TileStaticText.Text = "Requests";         TileData.Text = connectionRequestCount.ToString();      }       public override async Task&lt;TileNotification&gt; UpdateTileAsync()      {         ...      }     .....    } }  public abstract class TileLayoutBase {     public virtual TileText TileHeader =&gt; new TileText     {         Style = TileTextStyle.Caption,         Align = TileTextAlign.Left,         MaxLines = 1     };      public virtual TileText TileStaticText =&gt; new TileText     {         Style = TileTextStyle.CaptionSubtle,         Align = TileTextAlign.Center,         MaxLines = 1     };      public virtual TileText TileData =&gt; new TileText     {         Style = TileTextStyle.Body,         Align = TileTextAlign.Center,         MaxLines = 1     };      public virtual TileImage TileIcon =&gt; new TileImage     {         Align = TileImageAlign.Left,         RemoveMargin = true,         Source = new TileImageSource("some_image_source")     };      protected virtual TileBinding CreateSmallTileBinding()     {         TileGroup tileGroup = new TileGroup();         TileSubgroup tileSubGroup = new TileSubgroup { TextStacking = TileTextStacking.Center };         ... // code to create a medium sized binding     }      protected virtual TileBinding CreateLargeTileBinding()     {         TileGroup tileGroup = new TileGroup();         TileSubgroup tileSubGroup = new TileSubgroup { TextStacking = TileTextStacking.Center };         ... // code to create a large tile binding     }      public abstract Task&lt;TileNotification&gt; UpdateTileAsync();  } </code></pre>  <p>The problem here is the <strong><em>Text property doesn't do any assignment</em></strong>. Whenever I step over the line where I want to set the text in my subclass, <strong>the Text stays null</strong>. I initially thought this must be a problem with their implementation of the setter in the NotificationExtensions library, so I grabbed it and decompiled it. To my surprise, all seems normal:</p>  <pre><code>public sealed class TileText : ITileSubgroupChild, ITileAdaptiveChild {     private int _maxLines = int.MaxValue;     private int _minLines = 1;      public string Text { get; set; }     ...  } </code></pre>  <p>If I assign the text in the base class (where I set all the other common properties, everything works fine and dandy). Also, in the immediate window, everything seems to work just fine as well. I suspect it's got something to do with the inheritance, but I have no idea what it could be. Here's a link to MSDN with more information about the library: <a href="http://NotificationExtensions%20info" rel="nofollow">http://blogs.msdn.com/b/tiles_and_toasts/archive/2015/08/20/introducing-notificationsextensions-for-windows-10.aspx</a></p>  <p>Some help would be well appreciated. It's annoying to have to work around such issues with uglier, more unnatural code. Thanks!</p>