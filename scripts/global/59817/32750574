<p>I made a simple UserControl to a setting entry, which contains a RadioButton, like</p>  <pre><code>&lt;UserControl.Resources&gt;     &lt;Style x:Key="RadioButtonStyle1" TargetType="RadioButton"&gt;         &lt;Setter Property="Background" Value="Transparent"/&gt;         &lt;Setter Property="Foreground" Value="Black"/&gt;         &lt;Setter Property="Padding" Value="8,6,0,0"/&gt;         &lt;Setter Property="HorizontalAlignment" Value="Left"/&gt;         &lt;Setter Property="VerticalAlignment" Value="Center"/&gt;         &lt;Setter Property="HorizontalContentAlignment" Value="Left"/&gt;         &lt;Setter Property="VerticalContentAlignment" Value="Top"/&gt;         &lt;Setter Property="FontFamily" Value="{ThemeResource ContentControlThemeFontFamily}"/&gt;         &lt;Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}"/&gt;         &lt;Setter Property="MinWidth" Value="120"/&gt;         &lt;Setter Property="UseSystemFocusVisuals" Value="True"/&gt;         &lt;Setter Property="Template"&gt;             &lt;Setter.Value&gt;                 &lt;ControlTemplate TargetType="RadioButton"&gt;                     &lt;Grid BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"&gt;                         &lt;Grid.ColumnDefinitions&gt;                             &lt;ColumnDefinition Width="20"/&gt;                             &lt;ColumnDefinition Width="*"/&gt;                         &lt;/Grid.ColumnDefinitions&gt;                         &lt;VisualStateManager.VisualStateGroups&gt;                             &lt;VisualStateGroup x:Name="CommonStates"&gt;                                 &lt;VisualState x:Name="Normal"/&gt;                                 &lt;VisualState x:Name="PointerOver"&gt;                                     &lt;Storyboard&gt;                                         &lt;ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Stroke" Storyboard.TargetName="OuterEllipse"&gt;                                             &lt;DiscreteObjectKeyFrame KeyTime="0" Value="Silver"/&gt;                                         &lt;/ObjectAnimationUsingKeyFrames&gt;                                         &lt;ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Stroke" Storyboard.TargetName="CheckOuterEllipse"&gt;                                             &lt;DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightAccentBrush}"/&gt;                                         &lt;/ObjectAnimationUsingKeyFrames&gt;                                         &lt;ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Fill" Storyboard.TargetName="CheckOuterEllipse"&gt;                                             &lt;DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightTransparentBrush}"/&gt;                                         &lt;/ObjectAnimationUsingKeyFrames&gt;                                         &lt;ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Fill" Storyboard.TargetName="CheckGlyph"&gt;                                             &lt;DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlHighlightAltBaseHighBrush}"/&gt;                                         &lt;/ObjectAnimationUsingKeyFrames&gt;                                     &lt;/Storyboard&gt;                                 &lt;/VisualState&gt;                                 &lt;VisualState x:Name="Disabled"&gt;                                     &lt;Storyboard&gt;                                         &lt;ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Stroke" Storyboard.TargetName="OuterEllipse"&gt;                                             &lt;DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlDisabledBaseLowBrush}"/&gt;                                         &lt;/ObjectAnimationUsingKeyFrames&gt;                                         &lt;ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Stroke" Storyboard.TargetName="CheckOuterEllipse"&gt;                                             &lt;DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlDisabledBaseLowBrush}"/&gt;                                         &lt;/ObjectAnimationUsingKeyFrames&gt;                                         &lt;ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Fill" Storyboard.TargetName="CheckOuterEllipse"&gt;                                             &lt;DiscreteObjectKeyFrame KeyTime="0" Value="Transparent"/&gt;                                         &lt;/ObjectAnimationUsingKeyFrames&gt;                                         &lt;ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Fill" Storyboard.TargetName="CheckGlyph"&gt;                                             &lt;DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlDisabledBaseLowBrush}"/&gt;                                         &lt;/ObjectAnimationUsingKeyFrames&gt;                                         &lt;ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Foreground" Storyboard.TargetName="ContentPresenter"&gt;                                             &lt;DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemControlDisabledBaseLowBrush}"/&gt;                                         &lt;/ObjectAnimationUsingKeyFrames&gt;                                     &lt;/Storyboard&gt;                                 &lt;/VisualState&gt;                             &lt;/VisualStateGroup&gt;                             &lt;VisualStateGroup x:Name="CheckStates"&gt;                                 &lt;VisualState x:Name="Checked"&gt;                                     &lt;Storyboard&gt;                                         &lt;DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="CheckGlyph"/&gt;                                         &lt;DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="OuterEllipse"/&gt;                                         &lt;DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="CheckOuterEllipse"/&gt;                                     &lt;/Storyboard&gt;                                 &lt;/VisualState&gt;                                 &lt;VisualState x:Name="Unchecked"/&gt;                                 &lt;VisualState x:Name="Indeterminate"/&gt;                             &lt;/VisualStateGroup&gt;                         &lt;/VisualStateManager.VisualStateGroups&gt;                         &lt;Grid Height="32" VerticalAlignment="Top"&gt;                             &lt;Ellipse x:Name="OuterEllipse" Height="20" Stroke="#e8edf0" StrokeThickness="{ThemeResource RadioButtonBorderThemeThickness}" UseLayoutRounding="False" Width="20"/&gt;                             &lt;Ellipse x:Name="CheckOuterEllipse" Fill="{ThemeResource SystemControlHighlightTransparentBrush}" Height="20" Opacity="0" Stroke="{ThemeResource SystemControlHighlightAltAccentBrush}" StrokeThickness="{ThemeResource RadioButtonBorderThemeThickness}" UseLayoutRounding="False" Width="20"/&gt;                             &lt;Ellipse x:Name="CheckGlyph" Fill="#e8edf0" Height="10" Opacity="0" UseLayoutRounding="False" Width="10"/&gt;                         &lt;/Grid&gt;                         &lt;ContentPresenter x:Name="ContentPresenter" AutomationProperties.AccessibilityView="Raw" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Content="{TemplateBinding Content}" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" TextWrapping="Wrap" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/&gt;                     &lt;/Grid&gt;                 &lt;/ControlTemplate&gt;             &lt;/Setter.Value&gt;         &lt;/Setter&gt;     &lt;/Style&gt; &lt;/UserControl.Resources&gt;  &lt;Grid Height="55"&gt;     &lt;Border BorderThickness="0,0,0,1" BorderBrush="#e8edf0" Margin="0"&gt;         &lt;Grid Background="White"&gt;             &lt;Grid.ColumnDefinitions&gt;                 &lt;ColumnDefinition Width="50"/&gt;                 &lt;ColumnDefinition Width="*"/&gt;             &lt;/Grid.ColumnDefinitions&gt;             &lt;Image Grid.Column="0" Width="30" Height="30" Source="{Binding ElementName=RadioButtonSettingsEntryControl, Path=IconSource}"                     HorizontalAlignment="Center" VerticalAlignment="Center" Margin="5,0,5,0"/&gt;             &lt;RadioButton Grid.Column="1" Content="{Binding ElementName=RadioButtonSettingsEntryControl, Path=ContentText}" GroupName="{Binding ElementName=RadioButtonSettingsEntryControl, Path=RadioButtonGroupName}"                           Style="{StaticResource RadioButtonStyle1}" Margin="10,0,0,0" IsChecked="{Binding ElementName=RadioButtonSettingsEntryControl, Path=IsTheButtonChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/&gt;         &lt;/Grid&gt;     &lt;/Border&gt; &lt;/Grid&gt; </code></pre>  <p>The UserCOntrol's xaml.cs:</p>  <pre><code>public sealed partial class RadioButtonSettingsEntry : UserControl {     public string IconSource     {         get { return (string)GetValue(IconSourceProperty); }         set { SetValue(IconSourceProperty, value); }     }      // Using a DependencyProperty as the backing store for IconSource.  This enables animation, styling, binding, etc...     public static readonly DependencyProperty IconSourceProperty =         DependencyProperty.Register("IconSource", typeof(string), typeof(RadioButtonSettingsEntry), null);      public string ContentText     {         get { return (string)GetValue(ContentTextProperty); }         set { SetValue(ContentTextProperty, value); }     }      // Using a DependencyProperty as the backing store for ContentText.  This enables animation, styling, binding, etc...     public static readonly DependencyProperty ContentTextProperty =         DependencyProperty.Register("ContentText", typeof(string), typeof(RadioButtonSettingsEntry), null);      public string RadioButtonGroupName     {         get { return (string)GetValue(RadioButtonGroupNameProperty); }         set { SetValue(RadioButtonGroupNameProperty, value); }     }      // Using a DependencyProperty as the backing store for RadioButtonGroupName.  This enables animation, styling, binding, etc...     public static readonly DependencyProperty RadioButtonGroupNameProperty =         DependencyProperty.Register("RadioButtonGroupName", typeof(string), typeof(RadioButtonSettingsEntry), null);      public bool IsTheButtonChecked     {         get { return (bool)GetValue(IsTheButtonCheckedProperty); }         set { SetValue(IsTheButtonCheckedProperty, value); }     }      // Using a DependencyProperty as the backing store for IsTheButtonChecked.  This enables animation, styling, binding, etc...     public static readonly DependencyProperty IsTheButtonCheckedProperty =         DependencyProperty.Register("IsTheButtonChecked", typeof(bool), typeof(RadioButtonSettingsEntry), null);      public RadioButtonSettingsEntry()     {         InitializeComponent();     } } </code></pre>  <p>and made the above DependencyProperties in the code behind. If I set the IsChecked property, it is changing, but the visual state isn't. If I navigate to the page containing the control, all radiobutton's visual states are unchecked and I can change it only if I tap on it. The button's visual state should change if I change the IsChecked afaik.</p>  <p>This is how I use the control:</p>  <pre><code>&lt;Controls:RadioButtonSettingsEntry Grid.Row="2" IconSource="/Assets/ContactState-icons/available_icon.png" ContentText="Online" RadioButtonGroupName="StatusGroup" Tag="1" x:Name="availableRb"                                        IsTheButtonChecked="{Binding SelectedState, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ConverterParameter=1, Converter={StaticResource RadioButtonValueConv}}"/&gt; &lt;Controls:RadioButtonSettingsEntry Grid.Row="3" IconSource="/Assets/ContactState-icons/donotdisturb_icon.png" ContentText="Do not disturb (&amp;quot;DND&amp;quot;)" RadioButtonGroupName="StatusGroup" Tag="2" x:Name="dndRb"                                        IsTheButtonChecked="{Binding SelectedState, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ConverterParameter=2, Converter={StaticResource RadioButtonValueConv}}"/&gt; &lt;Controls:RadioButtonSettingsEntry Grid.Row="4" IconSource="/Assets/ContactState-icons/offline_icon.png" ContentText="Invisible" RadioButtonGroupName="StatusGroup" Tag="3" x:Name="invisibleRb"                                        IsTheButtonChecked="{Binding SelectedState, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ConverterParameter=3, Converter={StaticResource RadioButtonValueConv}}"/&gt; </code></pre>  <p>The RadioButtonValueConverter:</p>  <pre><code>  public class RadioButtonValueConverter : IValueConverter {     public object Convert(object value, Type targetType, object parameter, string language)     {         return value.Equals(parameter);     }      public object ConvertBack(object value, Type targetType, object parameter, string language)     {         return System.Convert.ToBoolean(value) ? parameter : null;     } } </code></pre>  <p>What am I doing wrong?</p>