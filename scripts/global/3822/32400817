<p>I'm working on a componentization system based on JSPs. This means that parts of the JSP can be moved from one JSP to an other one via drag and drop and leads to a need for a local page scope as variable of a component defined in one JSP my collide in an other JSP. I can use Servlet 3.0 / JSP 2.2 / JSTL 1.2.</p>  <p><strong>++ Tag File ++</strong></p>  <p>The straight way of doing that would be to create a tag file for a component or something similar as they have this local page scope. But for every change in the tag file it would need to get redeployed and needing to create a tag file needs some time by itself. But if there is no other solution this direction (custom tags, tag files, JSP includes,...) is probably the way to go.</p>  <p><strong>++ Namespace prefixing/suffixing ++</strong></p>  <p>In Portlets one is supposed to concatenate each variable with a namespace provided from the portlet response object. I could do something similar but this can lead to side effects and unexpected behavior. If someone forgets to prefix/suffix the namespace it might work for some time but stops working at an other time without changing the code when the component moved to an other JSP with a conflicting variable name.</p>  <p><strong>++ Custom Tag wrapping ++</strong></p>  <p>I was hoping that I as a component framework developer can wrap the component code of a component developer with a tag file for a component tag like this</p>  <pre><code>&lt;a:component&gt;     &lt;div data-component-id="9"&gt;         &lt;c:set var="componentId" value="9"/&gt;         &lt;c:set var="path" value='${abc:getCurrentPath()}_${componentId}'/&gt;         &lt;c:set var="resource" value='${abc:getResourceFromPath(path)}'/&gt;         &lt;c:set var="val" value="${resource.getValue('paragraphValue')"/&gt;         &lt;p&gt;&lt;c:out value="${value}"/&gt;&lt;/p&gt;         &lt;/div&gt; &lt;/a:component&gt; </code></pre>  <p>to have the variable in the local page context of the tag file. But instead they are in the context of the surrounding page. I'm looking for something like this</p>  <pre><code>&lt;% { %&gt;     &lt;div data-component-id="9"&gt;         &lt;%         String componentId = 9;         String path = obj.getCurrentPath()+componentId;         Resource resource = otherObj.getResourceFromPath(path);         String value = resource.getValue("paragraphValue");         %&gt;         &lt;p&gt;&lt;c:out value="&lt;%=value%&gt;"/&gt;&lt;/p&gt;       &lt;/div&gt; &lt;% } %&gt; </code></pre>  <p>which would create a code block in which variables have their own namespace. But of course for JSTL and JSTL-EL instead of scriptlet code. I had a look at the JSTL specification but did not find out if there is a way to create such a local page scope. But I didn't check everything as it's huge and I'm not sure if it's possible with custom tags.</p>  <p>It is clear to me that bigger code blocks should not be in the JSP but with the framework I would like to provide simple solutions for smaller components.</p>  <p><strong>++ Changing the JSP code ++</strong></p>  <p>When components are initially placed on a JSP or moved around via drag 'n drop I actually move the JSP code of a component from one JSP to an other or within a JSP. This means I can also programmatically manipulate the JSP code of a component if it doesn't get too complex and it helps solving the problem.</p>