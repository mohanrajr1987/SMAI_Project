<p>I'm using Visual Studio 2013. I have a Custom Build Tool (I think that's the right terminology at least) created which processes Simulink (.slx) files. The gist of how it works is that VS will "compile" a Simulink model by launching MATLAB/Simulink and telling it to build the Simulink model into a DLL and generate some headers for use in other VS projects in the Solution. That functionality works just fine from the MATLAB/Simulink side. </p>  <p>This Custom Build Tool, called "Real Time Workshop - SLX", consists of a .props file, a .targets file, and a .xml file. To use it, I have a VS project with its Configuration Type set to Utility (Properties, General page) and my Custom Build Tool checked in the project's "Build Dependencies"-->"Build Customization..." dialog. Then I drag various .slx files onto the project in the Solution Explorer and it adds them. Then I can build the project and it will process each .slx file as described above. </p>  <p>Each .slx file is dependent on a number of MATLAB scripts and other files. Changes in one of those other files needs to trigger a rebuild of the .slx file by Simulink. Currently, whenever the .slx file itself is unchanged, VS just skips over it. I can't seem to set additional dependencies for the .slx files.</p>  <p>If I go to the Properties dialog for an individual .slx file, the Item Type specifies my "Real Time Workshop - SLX" as expected. However, when I go to the General page underneath "Real Time Workshop - SLX" things are grayed out and there is no Additional Dependencies entry.</p>  <p>I thought the purpose of Custom Build Tools was specifically to enable special processing like this. How do I specify file dependencies for the individual .slx files to be processed by my "Real Time Workshop - SLX" Custom Build Tool?</p>  <p>One other thing to note is that it appears that additional dependencies can be added to the .props file within the <code>&lt;AdditionalDependencies&gt;</code> tag, but then that creates a dependency relationship for <em>all</em> .slx files, which is not a viable solution.</p>