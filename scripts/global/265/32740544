<ol> <li>I have an existing dll coded in C#, which performs some custom Build activities. It implements CodeActivity class.Basically it takes few parameter from TFS and rest from an XML config file to build.The path to dll and other parameter are defined in Build Definition-->Process.This works Fine.</li> <li>We are now moving to Jenkins, so the story starts here;  <ul> <li>We are planning to build a custom task in MSBuild Proj file(which will replace the existing config file and  the parameter from Build Definition).This custom task is a new Class (class-name-->SECOND) added to the source code of the dll,and the newly added class implements interface ITasks and this is how developed our custom task.</li> <li>We created an object of the existing class(class name-->First)(the one that implements CodeActivity)and pass the values from proj file as arguments. So far so good.</li> <li>Now in the Class(classname-->FIRST) we have a constructor with values from proj file and an existing overridden method protected overridden void Execute(ActivityCodeContext context),this method needs to be called from our constructor.</li> </ul></li> <li>IDEA is to build a msbuild proj file in Jenkins(that will send values to dll)that will call the custom task.In the dll the old variables will be initialize with new values and the Execute method will be called. ROADBLOCK:HOW TO CALL THE "protected overridden Execute(CondeActivityContext var) METHOD FROM THE CONSTRUCTOR.?</li> </ol>  <h3>Ex.</h3>  <pre><code>public sealed class FIRST : CodeActivity {  string a,b;  public FIRST (string a,string b){   this.a=a;this.b=b;  }  protected overriden void Execute(ActivityCodeContext context){  } } </code></pre>  <p>//end of class</p>  <pre><code>    public class SECOND:Itask     {     //here we get the values from proj file    private IBuildEngine engine;         public IBuildEngine BuildEngine         {             get { return engine; }             set { engine = value; }         }          private ITaskHost host;         public ITaskHost HostObject         {             get { return host; }             set { host = value; }         }     private string a;          [Required]         public string A         {             get { return a; }             set { a= value; }         }   private string b;          [Required]         public string B         {             get { return b; }             set { b= value; }         }     public void Excute(){     new First(string A,string B);     }     } </code></pre>