<p>We are developing an adapter component that sits between two document-processing systems. </p>  <p><strong>Brief Document Lifecycle Description</strong></p>  <ol> <li>The system A sends documents to the adapter one by one. </li> <li>The adapter collects those documents, preforms validation and transforms the documents to a format that is understandable by the system B. Transformed documents are stored in a database.</li> <li>Every 5 minutes transformed documents are taken from a database, packed to a package and sent to the system B. </li> </ol>  <p><strong>Document Processing Details</strong></p>  <p>It is possible that for a document an update could come to the adapter. This update looks like an ordinary document with the same identifier as an original one, but several fields differ. When such an update comes there are the following requirements:</p>  <ol> <li>If an original document is sent to the system B, skip the update;</li> <li>If an original document is not sent to the system B, send only the update.</li> </ol>  <p>As it was described above there are two phases of the document processing: validation-transformation-persisting documents one by one and document aggregation-sending. </p>  <p>Each document has a dedicated database record. When an update comes, a corresponding record is updated (no separate record creation). When a document arrives it has the 'New' status, after being validated and transformed it gains the 'Ready for Sending' status. After being sent as a part of a package - 'Sent' status.</p>  <p><strong>Problem Statement</strong></p>  <p>There is a possibility of the following scenario: </p>  <ol> <li>a document arrives to the adapter - grabs the 'New' status;</li> <li>the document is validated and transformed successfully - 'Ready for Sending' </li> <li>a collection of documents, containing the described document, is taken from a database and the package transformation process started - all documents are still in the 'Ready for Sending' status;</li> <li>An update arrives for one of the documents in a package, and a corresponding transaction commits - this document record is at the 'Ready for Sending' status, but several fields changed (so do a Hibernate-@Version-marked column).</li> <li>A package is formed and at the sending phase the adapter tries to set the 'Sent' status for all the documents in the package, but fails with the OptimisticLock exception, which means that the whole package must be reprocessed.</li> </ol>  <p>Our adapter has a rate of 250 messages per second and usually a package contains at average 20000 transformed documents and the likelihood of facing the described issue is rather high. It is forbidden to forms and send several packages of lower size, also it is forbidden to loose documents or send duplicates.</p>  <p>Optimistic locking is crucial at the adapter because it grabs and processes documents in several parallel threads, thus an original document and an update could be processed at parallel...</p>  <p><strong>Solution Ideas</strong></p>  <p>We are thinking about introducing a new status like 'On Package Forming' just right before forming a package and setting up this status for each document in a separate transaction: if some documents will raise an OptimisticLock exception, we will just reprocess this document. This solutions looks rather slow.  </p>  <p>Could you please suggest a solution for this case? Maybe we have to change the approach completely? </p>