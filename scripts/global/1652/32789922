<p>I am looking to develop a multi-threaded worker based sub-application. I was going through approaches on various site and suddenly tumbled onto a wiki page.</p>  <p><a href="https://en.wikipedia.org/wiki/Thread_pool_pattern" rel="nofollow">https://en.wikipedia.org/wiki/Thread_pool_pattern</a></p>  <blockquote>   <p>When implementing this pattern, the programmer should ensure   thread-safety  of the queue. In Java, you can synchronize the relevant   method using the  synchronized keyword. This will bind the block   modified with synchronized  into one atomic structure, therefore   forcing any threads using the  associated resource to wait until there   are no threads using the resource.(  I hope this is achievable by   applying mutex lock in c++)  As a drawback to  this method,   synchronization is rather expensive. You can also create an  object   that holds a list of all the jobs in a queue, which could be a    singleton.</p> </blockquote>  <p>What i want to understand is how a singleton object containing list of all Jobs would help me more than synchronizing the queue. And how will they be exactly different ?</p>  <p>P.S: I know few of you might question the source of my content ( wiki here) but still , i would like to know more about it.</p>  <p>Thanks in advance.</p>