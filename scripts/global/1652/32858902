<p>We all know that we should use locks to make things run right in multi-thread process. But a process as follows, should uses lock to <code>b_active</code>?</p>  <pre><code>import time import threading  b_active = True  def foo():     while b_active:         print 'hello world'         time.sleep(1)  if __name__ == '__main__':     thr = threading.Thread(target=foo)     thr.start()     raw_input()     b_active = False     thr.join() </code></pre>  <p>I wonder if it's necessary to write codes like this, for <code>while b_active</code> and <code>b_active = False</code> both have several bytecodes.</p>  <pre><code>import time import threading  lck = threading.Lock() b_active = True  def foo():     while True:         with lck:             if not b_active:                 break         print 'hello world'         time.sleep(1)  if __name__ == '__main__':     thr = threading.Thread(target=foo)     thr.start()     raw_input()     with lck:         b_active = False     thr.join() </code></pre>  <p>Thx!</p>