<p>Im implementing a simple <code>Button</code> in WPF, that is bound in XAML to an <code>ICommand</code>.</p>  <p>Whilst it works great, I've got it triggering <code>CanExecute()</code> via the following code:</p>  <pre><code> public event EventHandler CanExecuteChanged         {             add { CommandManager.RequerySuggested += value; }             remove { CommandManager.RequerySuggested -= value; }         } </code></pre>  <p>The problem is, the instantiated <code>ICommand</code> is being kept alive by this event, and even after I've finished with it, <code>CanExecute()</code> is continually triggered by the <code>CommandManager</code>.</p>  <p>I supposed I've got a temporary undesirable fix in the form of a <code>List&lt;EventHandler&gt;</code> inside the <code>ICommand</code> instance, that adds each incoming <code>value</code> from the <code>add{}</code> , which i'm then manually unsubscribing from by just iterating it and calling <code>CommandManager.RequerySuggested -= eventItem</code>, but I'm wondering if there is a better way or i'm using it wrongly?</p>