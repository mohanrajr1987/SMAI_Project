<p>I'm testing around with client-server communication. </p>  <p>I have a server that should receive messages and print them, and send messages that it gets from <code>System.in</code> using a <code>Socket</code>. The client reads messages from the <code>Socket</code>, and sends back some messages. But for some reason both the server and the client get locked when checking if there is a message from the other end (at <code>readLine()</code>).</p>  <p>This client:</p>  <pre><code>public void run() {     try {         Log.i("DataManager", "Trying to connect to server");             socket.connect(new InetSocketAddress(ADDRESS, PORT), 3000);         Log.i("DataManager", "Connected to: " + socket.getInetAddress());             BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));         PrintWriter out = new PrintWriter(socket.getOutputStream(), true); //autoflush          String inputLine;         while (socket.isConnected()) {             if ((inputLine = in.readLine()).isEmpty()){                 Log.i("DataManager", "Server says: " + inputLine);               }              synchronized (outcoming){                 if (!outcoming.isEmpty()){                     for (int i = 0; i &lt; outcoming.size(); i++){                         out.println(outcoming.get(i));                         outcoming.remove(i);                     }                 }             }          }     }      ... }// </code></pre>  <p>The Server:</p>  <pre><code>ServerSocket listener = new ServerSocket(PORT);     try {         Socket socket;         socket = listener.accept(); //waits for connection         System.out.println("Client connected: " + socket.getInetAddress());          BufferedReader sysRead = new BufferedReader(new InputStreamReader(System.in));         BufferedReader clientIn = new BufferedReader(new InputStreamReader(socket.getInputStream()));         PrintWriter out = new PrintWriter(socket.getOutputStream(), true); //autoflush          String inputLine;         out.println("Hello, you are connected to server" + listener.getInetAddress());         while (true){             if ((inputLine = clientIn.readLine()).isEmpty()){                 System.out.println("Client says: " + inputLine);             }             String line = sysRead.readLine();             if (line.equals("stop")){                 break;             } else {                 out.println(line);             }         }         socket.close();     }  </code></pre>  <p>I tried solving this by encasing the <code>readLine</code> statements with <code>if(in.ready())</code> but it didn't help at all. I've been looking around on google and found that this is caused by the fact that <code>readLine()</code> looks for eof, and the stream from the socket only ends when the socket is disconnected. I have no idea how to get around this problem other that writing some kind of protocol where i end my messages with a specific sequence. Is there a better way around this problem?</p>