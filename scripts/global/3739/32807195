<p>I found a sample C# program where server is able to communicate to multiple clients, and multiple clients are able to communicate with one another too. However, my project requires me to make a chat system between PCs and Android. I have found another sample programme on android(client) communicate with PC(server) however it couldn't communicate with multiple clients. I am very new to Visual studio and Andorid studio programming, can anyone tell me how can I change the coding of the android programming in order for me to connect android(client) with the 1st sample of C# programming that I found </p>  <p>Here is the C# programming sample that connects PC server to mupltiple PCs clients</p>  <p><strong>- Server Programming :</strong></p>  <pre><code>using System; using System.Collections.Generic; using System.ComponentModel; using System.Data; using System.Drawing; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows.Forms; using NetworksApi.TCP.SERVER;  namespace AdvancedServer     {    public delegate void UpdateChatLog(string txt); public delegate void UpdateListBox(ListBox box, string value, bool Remove); public partial class Form1 : Form {     Server server;     public Form1()     {         InitializeComponent();     }      private void Form1_Load(object sender, EventArgs e)     {         server = new Server("192.168.1.9", "8000");         server.OnClientConnected += new OnConnectedDelegate(Server_OnClientConnected);         server.OnClientDisconnected += new OnDisconnectedDelegate(Server_OnClientDisconnected);         server.OnDataReceived += new OnReceivedDelegate(Server_OnDataReceived);         server.OnServerError += new OnErrorDelegate(Server_OnServerError);         server.Start();     }      private void ChangeChatLog(string txt)     {         if(textBox1.InvokeRequired)         {             Invoke(new UpdateChatLog(ChangeChatLog), new object[] { txt });          }         else         {             textBox1.Text += txt + "\r\n";         }     }      private void ChangeListBox(ListBox box, string value, bool Remove)     {         if(box.InvokeRequired)         {             Invoke(new UpdateListBox(ChangeListBox), new object[] { box, value, Remove });          }         else         {             if(Remove)             {                 box.Items.Remove(value);             }             else             {                 box.Items.Add(value);             }          }     }      private void Server_OnServerError(object Sender, ErrorArguments R)     {         MessageBox.Show(R.ErrorMessage);     }      private void Server_OnDataReceived(object Sender, ReceivedArguments R)     {         ChangeChatLog(R.ReceivedData);         server.BroadCast(R.Name+" says : " + R.ReceivedData);     }      private void Server_OnClientDisconnected(object Sender, DisconnectedArguments R)     {         server.BroadCast(R.Name + " Has Disconnected");         ChangeListBox(listBox1, R.Name, true);         ChangeListBox(listBox2, R.Ip, true);     }      private void Server_OnClientConnected(object Sender, ConnectedArguments R)     {         server.BroadCast(R.Name + " Has Connected" ); ;         ChangeListBox(listBox1, R.Name, false);         ChangeListBox(listBox2, R.Ip, false);     }      private void button1_Click(object sender, EventArgs e)     {         server.SendTo((string)listBox1.SelectedItem, textBox2.Text);     }      private void button2_Click(object sender, EventArgs e)     {         server.BroadCast(textBox2.Text);     }      private void button3_Click(object sender, EventArgs e)     {         server.DisconnectClient((string)listBox1.SelectedItem);     }      private void Form1_FormClosing(object sender, FormClosingEventArgs e)     {         System.Environment.Exit(System.Environment.ExitCode);      }      private void listBox1_SelectedIndexChanged(object sender, EventArgs e)     {         listBox2.SelectedIndex = listBox1.SelectedIndex;     }      private void listBox2_SelectedIndexChanged(object sender, EventArgs e)     {         listBox1.SelectedIndex = listBox2.SelectedIndex;     } } </code></pre>  <p>}</p>  <p><strong>- Client Programming</strong></p>  <pre><code>using System; using System.Collections.Generic; using System.ComponentModel; using System.Data; using System.Drawing; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows.Forms; using NetworksApi.TCP.CLIENT;  namespace AdvancedClient {  public delegate void UpdateText(string txt);  public partial class Form1 : Form {     Client client;      public Form1()     {         InitializeComponent();     }      private void Form1_Load(object sender, EventArgs e)     {      }      private void ChangeTextBox(string txt)     {         if(textBox1.InvokeRequired)         {             Invoke(new UpdateText(ChangeTextBox), new object[] { txt });         }         else         {             textBox1.Text += txt + "\r\n";         }     }      private void button3_Click(object sender, EventArgs e)     {         if(textBox3.Text != "" &amp;&amp; textBox4.Text != ""&amp;&amp;textBox5.Text != "")         {             client = new Client();             client.ClientName = textBox4.Text;             client.ServerIp = textBox3.Text;             client.ServerPort = textBox5.Text;             client.OnClientConnected += new OnClientConnectedDelegate(Client_OnClientConnected);             client.OnClientConnecting += new OnClientConnectingDelegate(Client_OnClientConnecting);             client.OnClientDisconnected += new OnClientDisconnectedDelegate(Client_OnClientDisconnected);             client.OnClientError += new OnClientErrorDelegate(Client_OnClientError);             client.OnClientFileSending += new OnClientFileSendingDelegate(Client_OnClientFileSending);             client.OnDataReceived += new OnClientReceivedDelegate(Client_OnDataReceived);             client.Connect();         }         else         {             MessageBox.Show("You must fill all Textboxes");         }     }      private void Client_OnDataReceived(object Sender, ClientReceivedArguments R)     {         ChangeTextBox(R.ReceivedData);     }      private void Client_OnClientFileSending(object Sender, ClientFileSendingArguments R)     {      }      private void Client_OnClientError(object Sender, ClientErrorArguments R)     {         ChangeTextBox(R.ErrorMessage);     }      private void Client_OnClientDisconnected(object Sender, ClientDisconnectedArguments R)     {         ChangeTextBox(R.EventMessage);     }      private void Client_OnClientConnecting(object Sender, ClientConnectingArguments R)     {         ChangeTextBox(R.EventMessage);     }      private void Client_OnClientConnected(object Sender, ClientConnectedArguments R)     {         ChangeTextBox(R.EventMessage);     }      private void button1_Click(object sender, EventArgs e)     {         if(client != null &amp;&amp; client.IsConnected)         {             client.Send(textBox2.Text);             textBox2.Clear();         }     }      private void button2_Click(object sender, EventArgs e)     {      }      private void textBox2_KeyDown(object sender, KeyEventArgs e)     {         if (client != null &amp;&amp; client.IsConnected &amp;&amp; e.KeyCode==Keys.Enter)         {             client.Send(textBox2.Text);             textBox2.Clear();         }     }      private void Form1_FormClosing(object sender, FormClosingEventArgs e)     {         System.Environment.Exit(System.Environment.ExitCode);     } } </code></pre>  <p>}</p>  <p>And here is the sample programming on PC server(C#) and AndroidClient (Java)</p>  <p><strong>- Server Programming (C#)</strong></p>  <pre><code>using System; using System.Collections.Generic; using System.ComponentModel; using System.Data; using System.Drawing; using System.Linq; using System.Net; using System.Net.Sockets; using System.Text; using System.Windows.Forms;  namespace GameSocket { public class SocketT2h {     public Socket _Socket { get; set; }     public string _Name { get; set; }     public SocketT2h(Socket socket)     {         this._Socket = socket;     } }  public partial class frm_Server : Form {     private  byte[] _buffer = new byte[1024];     public List&lt;SocketT2h&gt; __ClientSockets { get; set; }     List&lt;string&gt; _names = new List&lt;string&gt;();     private  Socket _serverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);     public frm_Server()     {         InitializeComponent();         CheckForIllegalCrossThreadCalls = false;         __ClientSockets = new List&lt;SocketT2h&gt;();     }      private void frm_Server_Load(object sender, EventArgs e)     {         SetupServer();     }     private  void SetupServer()     {         lb_stt.Text="Setting up server . . .";         _serverSocket.Bind(new IPEndPoint(IPAddress.Parse("127.0.0.1"), 100));         _serverSocket.Listen(1);         _serverSocket.BeginAccept(new AsyncCallback(AppceptCallback), null);     }     private  void AppceptCallback(IAsyncResult ar)     {         Socket socket = _serverSocket.EndAccept(ar);         __ClientSockets.Add(new SocketT2h(socket));         list_Client.Items.Add(socket.RemoteEndPoint.ToString());          lb_soluong.Text = "Total client connected: " + __ClientSockets.Count.ToString();         lb_stt.Text = "Client connected. . .";         socket.BeginReceive(_buffer, 0, _buffer.Length, SocketFlags.None, new AsyncCallback(ReceiveCallback), socket);         _serverSocket.BeginAccept(new AsyncCallback(AppceptCallback), null);     }      private  void ReceiveCallback(IAsyncResult ar)     {          Socket socket = (Socket)ar.AsyncState;         if (socket.Connected)         {             int received;             try             {                 received = socket.EndReceive(ar);             }             catch (Exception)             {            for (int i = 0; i &lt; __ClientSockets.Count; i++)                 {                     if (__ClientSockets[i]._Socket.RemoteEndPoint.ToString().Equals(socket.RemoteEndPoint.ToString()))                     {                         __ClientSockets.RemoveAt(i);                         lb_soluong.Text = "Total client connected: "+__ClientSockets.Count.ToString();                     }                 }                                return;             }             if (received!=0)             {                 byte[] dataBuf = new byte[received];                 Array.Copy(_buffer, dataBuf, received);                 string text = Encoding.ASCII.GetString(dataBuf);                 lb_stt.Text = "Text received: " + text;                  string reponse = string.Empty;                  for (int i = 0; i &lt; __ClientSockets.Count; i++)                 {                     if (socket.RemoteEndPoint.ToString().Equals(__ClientSockets[i]._Socket.RemoteEndPoint.ToString()))                     {                         rich_Text.AppendText("\n" + __ClientSockets[i]._Name + ": " + text);                     }                 }                    if (text == "bye")                 {                     return;                 }                 reponse = "server replied" + text;                 Sendata(socket, reponse);             }             else             {                 for (int i = 0; i &lt; __ClientSockets.Count; i++)                 {                     if (__ClientSockets[i]._Socket.RemoteEndPoint.ToString().Equals(socket.RemoteEndPoint.ToString()))                     {                         __ClientSockets.RemoveAt(i);                         lb_soluong.Text = "Total client connected: " + __ClientSockets.Count.ToString();                     }                 }             }         }             socket.BeginReceive(_buffer, 0, _buffer.Length, SocketFlags.None, new AsyncCallback(ReceiveCallback), socket);     }     void Sendata(Socket socket,string noidung)     {         byte[] data = Encoding.ASCII.GetBytes(noidung);         socket.BeginSend(data, 0, data.Length, SocketFlags.None, new AsyncCallback(SendCallback), socket);         _serverSocket.BeginAccept(new AsyncCallback(AppceptCallback), null);     }     private  void SendCallback(IAsyncResult AR)     {         Socket socket = (Socket)AR.AsyncState;         socket.EndSend(AR);     }      private void btnSend_Click(object sender, EventArgs e)     {         for (int i = 0; i &lt; list_Client.SelectedItems.Count; i++)         {             string t = list_Client.SelectedItems[i].ToString();             for (int j = 0; j &lt; __ClientSockets.Count; j++)             {                 //if (__ClientSockets[j]._Socket.Connected &amp;&amp; __ClientSockets[j]._Name.Equals("@"+t))                 {                     Sendata(__ClientSockets[j]._Socket, txt_Text.Text);                 }             }         }         rich_Text.AppendText("\nServer: " + txt_Text.Text);     } } </code></pre>  <p>}</p>  <p><strong>- Android Programming (Client)</strong></p>  <pre><code>import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.net.Socket;  import android.app.Activity; import android.content.Intent; import android.os.AsyncTask; import android.os.Bundle; import android.os.Handler; import android.os.Message; import android.view.View; import android.view.View.OnClickListener; import android.widget.Button; import android.widget.EditText; import android.widget.TextView; import android.widget.Toast;  public class MainActivity extends Activity {  private static TextView textResponse; private EditText editTextAddress, editTextPort; private Button buttonConnect; private String message = "Hi client!"; private static String kq = ""; private ClientTask myClientTask; private OnListener listener; private static boolean flag = true; Socket socket = null;  public interface OnListener {     void listener(String text); }  public void addListener(OnListener listener) {     this.listener = listener; }  static Handler handler = new Handler() {     @Override     public void handleMessage(Message msg) {         if (flag) {             kq += msg.obj.toString() + "\r\n";             textResponse.setText(kq);         }     } };  @Override protected void onCreate(Bundle savedInstanceState) {     super.onCreate(savedInstanceState);     setContentView(R.layout.activity_main);      editTextAddress = (EditText) findViewById(R.id.address);     editTextPort = (EditText) findViewById(R.id.port);     buttonConnect = (Button) findViewById(R.id.connect);     textResponse = (TextView) findViewById(R.id.response);      buttonConnect.setOnClickListener(new OnClickListener() {          @Override         public void onClick(View v) {             // TODO Auto-generated method stub             myClientTask = new ClientTask(editTextAddress.getText()                     .toString(), Integer.parseInt(editTextPort.getText()                     .toString()));             myClientTask.execute();         }     });  }  public class ClientTask extends AsyncTask&lt;String, String, String&gt; implements         OnListener {      String dstAddress;     int dstPort;     PrintWriter out1;       ClientTask(String addr, int port) {         dstAddress = addr;         dstPort = port;     }      @Override     protected void onProgressUpdate(String... values) {         // TODO Auto-generated method stub         super.onProgressUpdate(values);      }      @Override     protected String doInBackground(String... params) {         // TODO Auto-generated method stub          try {              socket = new Socket(dstAddress, dstPort);             out1 = new PrintWriter(socket.getOutputStream(), true);             //out1.print("Hello server!");             out1.flush();              BufferedReader in1 = new BufferedReader(new InputStreamReader(                     socket.getInputStream()));             do {                 try {                     if (!in1.ready()) {                         if (message != null) {                             MainActivity.handler.obtainMessage(0, 0, -1,                                     "Server: " + message).sendToTarget();                             message = "";                         }                     }                     int num = in1.read();                     message += Character.toString((char) num);                 } catch (Exception classNot) {                 }              } while (!message.equals("bye"));              try {                 sendMessage("bye");             } catch (Exception e) {                 // TODO Auto-generated catch block                 e.printStackTrace();             } finally {                 socket.close();             }          } catch (IOException e) {             e.printStackTrace();         }         return null;     }      @Override     protected void onPostExecute(String result) {         try {             if (socket.isClosed()) {                 flag = false;             }         } catch (Exception e) {             Toast.makeText(getApplicationContext(), "Lỗi nhập!", Toast.LENGTH_LONG).show();         }          super.onPostExecute(result);     }      @Override     public void listener(String text) {         // TODO Auto-generated method stub         sendMessage(text);     }      void sendMessage(String msg) {         try {             out1.print(msg);             out1.flush();             if (!msg.equals("bye"))                 MainActivity.handler.obtainMessage(0, 0, -1, "Me: " + msg)                         .sendToTarget();             else                 MainActivity.handler.obtainMessage(0, 0, -1,                         "Ngắt kết nối!").sendToTarget();         } catch (Exception ioException) {             ioException.printStackTrace();         }     }  }  public void send(View v) {     addListener(myClientTask);     if (listener != null)         listener.listener(((EditText) findViewById(R.id.editText1))                 .getText().toString()); }  @Override protected void onDestroy() {     // TODO Auto-generated method stub     try {         if (listener != null)             listener.listener("bye");         socket.close();     } catch (Exception e) {         // TODO: handle exception     }     super.onDestroy(); }  @Override protected void onStop() {     // TODO Auto-generated method stub     try {         if (listener != null)             listener.listener("bye");         socket.close();     } catch (Exception e) {         // TODO: handle exception     }     super.onStop(); }  public void onClick(View v) {     Intent intent = new Intent(getApplicationContext(), MainActivity.class);     startActivity(intent);     finish(); } </code></pre>  <p>}</p>  <p><strong>- Andoid Manifest</strong></p>  <pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"     package="com.example.androidclient"     android:versionCode="1"     android:versionName="1.0" &gt;      &lt;uses-sdk         android:minSdkVersion="8"         android:targetSdkVersion="18" /&gt;     &lt;uses-permission android:name="android.permission.INTERNET"/&gt;     &lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /&gt;      &lt;application         android:allowBackup="true"         android:icon="@drawable/ic_launcher"         android:label="@string/app_name"         android:theme="@style/AppTheme" &gt;         &lt;activity             android:name="com.example.androidclient.MainActivity"             android:label="@string/app_name" &gt;             &lt;intent-filter&gt;                 &lt;action android:name="android.intent.action.MAIN" /&gt;                  &lt;category android:name="android.intent.category.LAUNCHER" /&gt;             &lt;/intent-filter&gt;         &lt;/activity&gt;     &lt;/application&gt;  &lt;/manifest&gt; </code></pre>  <p>Bothe samples work perfectly fine. However I want to modify the android programming such that it is able to connect to the multiple clients in the 1st C# sample. Can anyone help me on this? I was trying to find out for the past 2 days but I couldn't. Thanks in advance</p>