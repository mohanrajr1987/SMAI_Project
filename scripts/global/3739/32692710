<p>Good day,</p>  <p>I have a client application which sends to the server a lists of application the client opens. It particulary sends the file path, file name and hostname. My problem is the sent data should be serialize and deserialize when it is received in the server. I am new to C# so I have very little idea of Serialization. </p>  <p>This is the client side</p>  <pre><code>private List&lt;int&gt; listedProcesses = new List&lt;int&gt;();         private void SendData()         {             String processID = "";             String processName = "";             String processPath = "";             String processFileName = "";             String processMachinename = "";              listBox1.BeginUpdate();             try             {                    piis = GetAllProcessInfos();                 for (int i = 0; i &lt; piis.Count; i++)                 {                     try                     {                         if (!listedProcesses.Contains(piis[i].Id)) //placed this on a list to avoid redundancy                         {                             listedProcesses.Add(piis[i].Id);                             processID = piis[i].Id.ToString();                             processName = piis[i].Name.ToString();                             processPath = piis[i].Path.ToString();                             processFileName = piis[i].FileName.ToString();                             processMachinename = piis[i].Machinename.ToString();                             output.Text += "\n\nSENT DATA : \n\t" + processFileName + "\n\t" + processMachinename + "\n\t" + processID + "\n\t" + processName + "\n\t" + processPath + "\n";                         }                      }                     catch (Exception ex)                     {                         wait.Abort();                         output.Text += "Error..... " + ex.StackTrace;                      }                      NetworkStream ns = tcpclnt.GetStream();                     String data = "";                     data = "--++" + "  " + processFileName + " " + processMachinename + " " + processID + " " + processPath;                     if (ns.CanWrite)                     {                         byte[] bf = new ASCIIEncoding().GetBytes(data);                         ns.Write(bf, 0, bf.Length);                         ns.Flush();                     }                 }             }             finally             {                 listBox1.EndUpdate();             }          }          private void cmd_dis_Click(object sender, EventArgs e)         {             if (wait != null)             {                 wait.Abort();                 //read.Close(2000);             }              IPAddress ipclient = Dns.GetHostByName(Dns.GetHostName()).AddressList[0];             String ipclnt = "+@@+" + ipclient.ToString();             NetworkStream ns = tcpclnt.GetStream();             if (ns.CanWrite)             {                 byte[] bf = new ASCIIEncoding().GetBytes(ipclnt);                 ns.Write(bf, 0, bf.Length);                 ns.Flush();             }              tcpclnt.Close();            // read.Close();             Application.Exit();         }          private void listBox1_SelectedIndexChanged(object sender, EventArgs e)         {             ProcessInfoItem pii = piis.FirstOrDefault(x =&gt; x.Id == (int)(sender as ListBox).SelectedValue);             if (pii != null)             {                 string hostName = System.Net.Dns.GetHostName();                  textBox4.Text = listBox1.SelectedValue.ToString();                 textBox5.Text = (pii.FileName);                 textBox6.Text = (pii.Path);                 textBox7.Text = (pii.Machinename);             }         }          private List&lt;ProcessInfoItem&gt; piis = new List&lt;ProcessInfoItem&gt;();         private void Form1_Load(object sender, EventArgs e)         {             piis = GetAllProcessInfos();             listBox1.DisplayMember = "Name";             listBox1.ValueMember = "Id";             listBox1.DataSource = piis;          }         private List&lt;ProcessInfoItem&gt; GetAllProcessInfos()         {              List&lt;ProcessInfoItem&gt; result = new List&lt;ProcessInfoItem&gt;();             Process currentProcess = Process.GetCurrentProcess();             Process[] processes = Process.GetProcesses();             foreach (Process p in processes)             {                 if (!String.IsNullOrEmpty(p.MainWindowTitle))                 {                     //ProcessInfoItem pii = new ProcessInfoItem(p.Id, p.MainModule.ModuleName, p.MainModule.FileName, p.MainWindowTitle);                     ProcessInfoItem pii = new ProcessInfoItem(p.Id, p.MainModule.ModuleName, p.MainWindowTitle, p.MainModule.FileName, Environment.MachineName);                     result.Add(pii);                 }             }             return result;         }         public class ProcessInfoItem         {             public int Id { get; set; }             public string Name { get; set; }             public string FileName { get; set; }             public string Path { get; set; }             public string Machinename { get; set; }             public ProcessInfoItem(int id, string name, string filename, string path, string machinename)             {                 this.Id = id;                 this.Name = name;                 this.FileName = filename;                 this.Path = path;                 this.Machinename = machinename;             }         } </code></pre>  <p>and here is the server which needs to be deserialize</p>  <pre><code>  private void recieveData()         {             NetworkStream nStream = tcpClient.GetStream();             ASCIIEncoding ascii = null;             while (!stopRecieving)             {                 if (nStream.CanRead)                 {                     byte[] buffer = new byte[1024];                     nStream.Read(buffer, 0, buffer.Length);                     ascii = new ASCIIEncoding();                     recvDt = ascii.GetString(buffer);                     /*Received message checks if it has +@@+ then the ip is disconnected*/                     bool f = false;                     f = recvDt.Contains("+@@+");                     if (f)                     {                         string d = "+@@+";                         recvDt = recvDt.TrimStart(d.ToCharArray());                         clientDis();                         stopRecieving = true;                     }                      //else if (recvDt.Contains("^^"))                     //{                     //    new Transmit_File().transfer_file(file, ipselected);                     //}                     /* ++-- shutsdown/restrt/logoff/abort*/                     else if (recvDt.Contains("++--"))                     {                         string d = "++--";                         recvDt = recvDt.TrimStart(d.ToCharArray());                         this.Invoke(new rcvData(addToOutput));                         clientDis();                     }                      /*--++ Normal msg*/                     else if (recvDt.Contains("--++"))                     {                          string d = "--++";                         recvDt = recvDt.TrimStart(d.ToCharArray());                         this.Invoke(new rcvData(addToOutput));                      }                 }                 Thread.Sleep(1000);             }          }   public void addToOutput()         {             if (recvDt != null &amp;&amp; recvDt != "")             {                 output.Text += "\n Received Data : " + recvDt;                 recvDt = null;                }          } </code></pre>  <p>Thank you.</p>