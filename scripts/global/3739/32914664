<p>I'm creating an iOS app with a Rails server to store and sync user information across devices.</p>  <p>Just as an example, let's say my user has an email to uniquely identify himself and a list of places:</p>  <pre><code>{     email: ...,     places: [         {             id: ...,             name: ...,             latitude: ...,             longitude: ...,             category: ...         },         ...     ] } </code></pre>  <p>In my iOS app I have the <code>User</code> and <code>Place</code> entities/classes.</p>  <p>Should I also have a <code>Place</code> activerecord entity in Rails with the parameters (name, latitude, longitude, category) in the migration or should I just have a <code>Place</code> entity with <code>id</code> and <code>data</code>, <code>data</code> being a hash that would contain the keys "name", "latitude", "longitude" and "category"?</p>  <p>One advantage I see with the second approach is that if I update my models in the iOS App, I don't have to also update it in the Rails server, because it is only storing a hash for each place.</p>  <p>What should I do?</p>