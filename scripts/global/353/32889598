<p>I have a nested loop that generates a list of "all feasible solutions".  a solution is uniquely defined by 7 variables (all object references).  each of the 7 variables are chosen from a list of available options for that variable (8 to 43 options).  with a naive loop there are 12 billion combinations, but by applying certain feasibility checks (via LINQ Where clauses), i can reduce the combinations to 20 to 250 thousand.</p>  <p>I would like to parallelize this code.  What is the best way to structure this?  I have tried simply using <code>.AsParallel()</code> and that helps a little (10-15%), but it feels like I should be able to do much better.</p>  <pre><code>ICollection&lt;Type4&gt; nullList4 = new List&lt;Type4&gt;() { null }; var candidates = new List&lt;CandidateSolution&gt;(); foreach (var var1left in list1     .Where(l =&gt; l.Include(thisthing.InfoLeft))     .Where(l =&gt; l.MeetsMinimum(thisthing.InfoLeft))) foreach (var var2right in list1     .Where(r =&gt; r.Include(thisthing.InfoRight))     .Where(r =&gt; r.MeetsMinimum(thisthing.InfoRight))     .Where(r =&gt; r.IsCompatibleWith(var1left))) foreach (var var3 in list2.Where(b =&gt; b.IsActive)) foreach (var var4left in list3     .Where(l =&gt; l.IncludeForCandidates(thisthing.InfoLeft))) foreach (var var4right in list3     .Where(r =&gt; r.IncludeForCandidates(thisthing.InfoRight))     .Where(r =&gt; r.IsCompatibleWith(var4left))) foreach (var var5left in !var1left.IsSpecial() ? nullList4 :     list4.Where(r =&gt; r.MeetsCondition(thisthing.InfoRight.a, thisthing.InfoRight.b))) foreach (var var5right in !var2right.IsSpecial() ? nullList4 :     list4.Where(r =&gt; r.MeetsCondition(thisthing.InfoLeft.a, thisthing.InfoLeft.b))) {     var candidate = new CandidateSolution(thisthing, otherthing);     candidate.Var3 = var3;     candidate.Var4Left = var4left;     candidate.Var4Right = var4right;     candidate.Var5Left = var5left;     candidate.Var5Right = var5right;      candidate.Var1Left = var1left.CreateInstance(candidate, ...);     candidate.Var1Right = var2right.CreateInstance(candidate, ...);      candidates.Add(candidate); } </code></pre>