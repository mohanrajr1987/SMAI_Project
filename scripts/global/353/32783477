<p>I have an array data = array[1:50,1:50,1:50] the values inside are real numbers between -1, 1.</p>  <p>"Data" could be treated as cube 50x50x50.</p>  <p>I need to create a correlation matrix (removing all zeros) based on this equation => </p>  <p>value = (x+y)-|x-y| and the matrix size is 2 times the possible combinations (50x50x50)*((50x50x50)-1)/2 = 7.812.437.500  this 2 times = correlation matrix.</p>  <p>I did this:</p>  <p>Lets say we have 3x3x3:</p>  <pre><code>arr = array(rnorm(10), dim=c(3,3,3))  data = data.frame(array(arr))   data$voxel &lt;- rownames(data)   #remove zeros data&lt;-data[!(data[,1]==0),]  rownames(data) = data$voxel  data$voxel = NULL   ####################################################################################### #Create cluster  no_cores &lt;- detectCores() #- 1  clus &lt;- makeCluster(no_cores)  clusterExport(clus, list("data") , envir=environment())  clusterEvalQ(clus,              compare_strings &lt;- function(j,i) {                value &lt;- (data[i,]+data[j,])-abs(data[i,]- data[j,])                   pair &lt;- rbind(rownames(data)[j],rownames(data)[i],value)                return(pair)              })  i = 0 # start 0 kk = 1 table &lt;- data.frame()  ptm &lt;- proc.time()  while(kk&lt;nrow(data)) {    out &lt;-NULL     i = i+1 # fix row   j = c((kk+1):nrow(data)) # rows to be compared    #Apply the declared function     out = matrix(unlist(parRapply(clus,expand.grid(i,j), function(x,y) compare_strings(x[1],x[2]))),ncol=3, byrow = T)    table &lt;- rbind(table,out)    kk = kk +1  }  proc.time() - ptm </code></pre>  <p>The result is data.frame:</p>  <pre><code>v1  v2  v3 1   2   2.70430114250358 1   3   0.199941717684129 ... up to 351 rows </code></pre>  <p>but this will take days...</p>  <p>Also I would like to create an matrix for this correlation:</p>  <pre><code>   1                         2              3... 1  1                  2.70430114250358  2  2.70430114250358          1 3... </code></pre>  <p>Is there a faster way to do it?</p>  <p>Thanks</p>