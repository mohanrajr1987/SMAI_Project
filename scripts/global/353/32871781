<p>I am working with MPI, and I have a certain hierarchy of operations. For a particular value of a parameter <code>_param</code>, I launch 10 trials, each running a specific process on a distinct core. For n values of <code>_param</code>, the code runs in a certain hierarchy as:</p>  <p>driver_file ->  launches one process which checks if available processes are more than 10. If more than 10 are available, then it launches an instance of a process with a specific <code>_param</code> value passed as an argument to coupling_file</p>  <p>coupling_file -> does some elementary computation, and then launches 10 processes using  <code>MPI_Comm_spawn()</code>, each corresponding to a trial_file while passing <code>_trial</code> as an argument </p>  <p>trial_file -> computes work, returns values to the coupling_file </p>  <p>I am facing two dilemmas, namely:</p>  <ol> <li><p>How do I evaluate the required condition for the cores in driver_file? As in, how do I find out how many processes have been terminated, so that I can correctly schedule processes on idle cores? I thought maybe adding a blocking <code>MPI_Recv()</code> and use it to pass a variable which would tell me when a certain process has been finished, but I'm not sure if this is the best solution. </p></li> <li><p>How do I ensure that processes are assigned to different cores? I had thought about using something like <code>mpiexec --bind-to-core --bycore -n 1 coupling_file</code> to launch one coupling_file. This will be followed by something like <code>mpiexec --bind-to-core --bycore -n 10 trial_file</code>  launched by the coupling_file. However, if I am binding processes to a core, I don't want the same core to have two/more processes. As in, I don't want <code>_trial_1</code> of <code>_coupling_1</code> to run on core <code>x</code>, then I launch another process of <code>coupling_2</code> which launches <code>_trial_2</code> which also gets bound to core <code>x</code>. </p></li> </ol>  <p>Any input would be appreciated. Thanks! </p>