<p>So I'm trying to finish an assignment for my parallel class, and it involves using Pthreads to sum some numbers.</p>  <p>I have a sum function to which I pass a struct:</p>  <pre><code>void *partition(void* p){     ThreadData *a=malloc(sizeof(ThreadData));     a=(ThreadData*)p;      int i = a-&gt;pid;      int sum=0;      int size = a-&gt;rows*a-&gt;cols;     int row=a-&gt;pid/a-&gt;cols;     int col=a-&gt;pid%a-&gt;cols;      int partition_size = ((size / processors)+1);      for(i;i&lt;partition_size*processors;i+=processors){          col = i%a-&gt;cols;         row = i/a-&gt;cols;          if (i&lt;=size-1){             sum+= matrix[row][col]+1;             //printf("[%d][%d]%d +",row,col,matrix[row][col]);         }       }      a-&gt;localsum=sum;     printf("function sum: %d\n",sum);     pthread_exit(NULL); } </code></pre>  <p>and in my main method I have the following</p>  <pre><code>int main(){       int totalsum=0;     void *status;     ThreadData *g;     g=malloc(processors*( sizeof(ThreadData)));     int i;      for(i=0;i&lt;processors;i++){         g[i].rows=rows;         g[i].cols=cols;         g[i].pid=i;         g[i].localsum=0;     }      fillMatrix(rows, cols);      pthread_t tid[processors];      i;      for(i=0;i&lt;processors;i++){         pthread_create(&amp;tid[i],NULL,partition,(void *)&amp;g[i]);         sleep(1);          pthread_mutex_lock(&amp;mVar);         totalsum+=g[i].localsum;         pthread_mutex_unlock(&amp;mVar);      }     for(i=0;i&lt;processors;i++){         pthread_join(tid[i],NULL);     }      printf("The sum of your Matrix is %d",totalsum); } </code></pre>  <p>for 3 processors on a 4x4 matrix I get the following output</p>  <pre><code>function sum: 51 function sum: 40 function sum: 45 The sum of your Matrix is 136 </code></pre>  <p>So as you can see, in order to produce the desired result, I'm using <code>sleep(1);</code> but having the program wait a whole second before moving on totally defeats the purpose of multi-threading for parallel computing.  It also makes he use of the mutual exclusion locks pointless, I can literally comment them out and the program functions the same. </p>  <p>From what I've seen in tutorials around the web, this is the way a lot of people have written their code, but it doesn't seem to work for me.</p>  <p>So how can I rewrite this code same result without using <code>sleep();</code>?</p>  <p>Thanks in advance!</p>