<p>I have wrote the following code sample with java stream reduce:</p>  <pre><code>Person reducedPerson = Person.getPersons().stream()                 .parallel()  //will return surprising result                 .reduce(new Person(), (intermediateResult, p2) -&gt; {                             intermediateResult.setAge(intermediateResult.getAge() + p2.getAge());                             return intermediateResult;                         },                         (ir1, ir2) -&gt; {                             ir1.setAge(ir1.getAge() + ir2.getAge());                             return ir1;                         });         System.out.println(reducedPerson); </code></pre>  <p>model:</p>  <pre><code>public class Person {      String name;      Integer age;      public Person() {         age = 0;         name = "default";     }      //...     public Person(String name, Integer age) {         this.name = name;         this.age = age;     }      public static Collection&lt;Person&gt; getPersons() {         List&lt;Person&gt; persons = new ArrayList&lt;&gt;();         persons.add(new Person("Vasya", 12));         persons.add(new Person("Petya", 32));         persons.add(new Person("Serj", 10));         persons.add(new Person("Onotole", 18));         return persons;     } } </code></pre>  <p>Each code sample execution returns different result:</p>  <p>example: <code>Person{name='default', age=256}</code> or</p>  <pre><code>Person{name='default', age=248} </code></pre>  <p>I have loclized that problem inside <code>combiner</code> because in sequental stream code executes correctly.</p>  <p>Please help to correct combiner.</p>  <p>P.S.</p>  <p>expected result: person with name 'default' and age 72(sum ges of all pepsons in list)</p>  <h2>P.S.</h2>  <p>same code for Integer as reduce result works properly:</p>  <pre><code>Integer age = Person.getPersons().stream()                 .parallel()                 .reduce(0, (intermediateResult, p2) -&gt; {                     intermediateResult = intermediateResult + p2.getAge();                     return intermediateResult;                 }, (ir1, ir2) -&gt; {                     System.out.println("combiner");                     ir1 = ir1 + ir2;                     return ir1;                 });         System.out.println(age); </code></pre>