<p>I am trying to connect to the OBD2 adapter in my car. So my app runs a service which starts collecting data from the car and stores it in the backend database. Now there are two different use cases:</p>  <ul> <li>One is where I want to collect all the parameters (approx. 130) and store it in my database.</li> <li>Second is where I want to display some 10 parameters in an activity.</li> </ul>  <p>Now If I use one thread and collect all the 130 parameters and update the display activity accordingly then there will be a lag of some seconds.  So I want to use two threads which can run in parallel or sequential so that one is dedicated to storing in database and other for updating activity.</p>  <p>Here are relevant files: </p>  <p><strong>SampleThread.java</strong></p>  <pre><code>Thread thread = new Thread(new Runnable() {     @Override     public void run() {         try {             executeStoreQueue();         } catch (InterruptedException e){             thread.interrupt();         }     } });  Thread displayThread = new Thread(new Runnable() {     @Override     public void run() {         try {             executeDisplayQueue();         } catch (InterruptedException e){             displayThread.interrupt();         }     } });  displayThread.start(); thread.start();  @Override protected void executeStoreQueue() throws InterruptedException {     while (!Thread.currentThread().isInterrupted()) {          try {             // data collection from car - job         } catch (Exception e){          }         if (job != null){              ((MainActivity) applicationContext).runOnUiThread(new Runnable() {                     @Override                     public void run() {                         ((MainActivity) applicationContext).storeUpdate();                     }             });         }     } }  @Override protected void executeDisplayQueue() throws InterruptedException {     while (!Thread.currentThread().isInterrupted()) {          try {             // data collection from car - job         } catch (Exception e){          }         if (job != null){              ((MainActivity) applicationContext).runOnUiThread(new Runnable() {                     @Override                     public void run() {                         ((MainActivity) applicationContext).displayUpdate();                     }             });         }     } } </code></pre>  <p>Now how would I make these two threads run parallel so that they don't interfere with each other. Since the parameters in one thread is around 130 and other thread is only 10. <strong>So maybe display thread runs 13 times when thread runs one time</strong>. <strong><em>And all the parameters come sequentially from the adapter.</em></strong></p>  <p>The reason why I want to use two threads is because I don't want to hamper the update speed of the UI. The parameters are fetched sequentially from the adapter. So if I use one thread for both the tasks then my UI will get updated after a long time when one cycle is completed. That is the reason I want to use multiple threads. So that database gets filled separately and my UI can maintain its update speed.</p>  <p>Please suggest anything as to how should I proceed??</p>