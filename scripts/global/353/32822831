<p>I have to calculate the <code>std</code> and <code>mean</code> of a large data set with respect to quite a few models. The final loop block is nested to four levels.</p>  <p>This is what it looks like:</p>  <pre><code>count = 1; alpha  = 0.5; %%%Below if each individual block is to be posterior'd and then average taken  c = 1; for i = 1:numel(writers) %no. of writers     for j = 1: numel(test_feats{i}) %no. of images         for k = 1: numel(gmm) %no. of models             for n = 1: size(test_feats{i}{j},1)                 [~, scores(c)] = posterior(gmm{k}, test_feats{i}{j}(n,:));                 c = c + 1;             end             c = 1;             index_kek=find(abs(scores-mean(scores))&gt;alpha*std(scores));             avg = mean(scores(index_kek)); %using std instead of mean... beacause of ..reasons             NLL(count) = avg;             count = count + 1;         end         count = 1; %reset count         NLL_scores{i}(j,:) = NLL;       end     fprintf('***score for model_%d done***\n', i) end </code></pre>  <p>It works and gives the desired result but it takes 3 days to give me the final calculation, even on my i7 processor. During processing the task manager tells me that only 20% of the cpu is being used, so I would rather put more load on the cpu to get the result faster.</p>  <p>Going by the official help <a href="http://uk.mathworks.com/help/distcomp/nesting-and-flow-in-parfor-loops.html" rel="nofollow">here</a> if I suppose want to make the outer most loop a parfor while keeping the rest normal for all I have to do is to insert integer limits rather than function calls such as <code>size</code> or <code>numel</code>.</p>  <p>So making these changes the above code will become:</p>  <pre><code>count = 1; alpha  = 0.5; %%%Below if each individual block is to be posterior'd and then average taken  c = 1; num_writers = numel(writers); num_images = numel(test_feats{1}); num_models = numel(gmm); num_feats = size(test_feats{1}{1},1);  parfor i = 1:num_writers %no. of writers     for j = 1: num_images %no. of images         for k = 1: num_models %no. of models             for n = 1: num_feats                 [~, scores(c)] = posterior(gmm{k}, test_feats{i}{j}(n,:));                 c = c + 1;             end             c = 1;             index_kek=find(abs(scores-mean(scores))&gt;alpha*std(scores));             avg = mean(scores(index_kek)); %using std instead of mean... beacause of ..reasons             NLL(count) = avg;             count = count + 1;         end         count = 1; %reset count         NLL_scores{i}(j,:) = NLL;       end     fprintf('***score for model_%d done***\n', i) end </code></pre>  <p>Is this the most optimum way to implement <code>parfor</code> in my case? Can it be improved or optimized further?</p>