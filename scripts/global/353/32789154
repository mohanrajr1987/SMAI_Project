<p>I never tried parallel programming before in c#. So, before I jumped in, I wish I can get a fast answer to know if it worth delving into it, or not. I have C# WCF web services applications with .NET 4.0. (it is possible to upgrade to 4.5 if parallel programming works)</p>  <p>All services are REST Services. There is one service in particular that is taking sometimes very long time. The service is processing and modifying an xml document. the service accept an xml string as input, and give back the modified xml file.</p>  <p>The service does processing the xml in different locations, and different elements. So, I created classes that inherits from an interface called IDocumentProcessor, and I have a list of those</p>  <p>The code briefly looks like this</p>  <pre><code>interface IDocumentProcessor {      void Process(XDocument doc); }  public class DateProcessor : IDocumentProcessor {    public void Process(XDocument doc) {....}; }  public class CountryProcessor : IDocumentProcessor {    public void Process(XDocument doc) {....}; }   public class AddressProcessor : IDocumentProcessor {    public void Process(XDocument doc) {....}; }   public class AuthorProcessor : IDocumentProcessor {    public void Process(XDocument doc) {....}; }  ....  Public class DocumentProcessorService {     public class ProcessDocument(string xmlFileAsString)      {         var processorList = new List&lt;IDocumentProcessor&gt;{             new DateProcessor();             new CountryProcessor();             new AddressProcessor();             new AuthorProcessor();         }          var xDocument = XDocument.Parse(xmlFileAsString);         processorList.forEach(x =&gt; x.Process(xDocument));     } } </code></pre>  <p>so my fast question, and before I delve into making this parallel: Can parallel computing modify the same xDocument object (in different locations)</p>  <p>and can this code be translated to do parallel computing with .net 4.0?</p>