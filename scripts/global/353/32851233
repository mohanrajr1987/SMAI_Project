<p>I've developed a model using the program NetLogo. Using the RNetLogo package to run NetLogo using R, I ask the model to run each parameter set simultaneously on 8 processors (nodes), then compile the 8 outputs from those runs into a single csv. Then this process is repeated sequentially 3 more times to get a total of 32 (8*4) simulations for each parameter combination. It also gives me 4 separate csvs that I later combine in R into one dataset to analyze. At least this is what I did in the past and it worked great. </p>  <p>Now, I've modified the code somewhat, and I am getting an occasional error that shuts down one of those processes (i.e., error on one node shuts down all 8 nodes). So I get 8,16, or 24 simulations instead of 32. </p>  <p>I ask each of the 8 replicates to show me how far along they are during the simulation to find out if they are reaching an error somewhere in the middle of the simulation. However, it appears that most of the simulations complete while one or two nodes don't initiate at all.  </p>  <pre><code> Error in checkForRemoteErrors(val) : one node produced an error:   Calls: rep.sim ... clusterApply -&gt; staticClusterApply -&gt; checkForRemoteErrors  Execution halted </code></pre>  <p>This suggests that it isn't the output from the NetLogo model but something with the execution of the R code (rep.sim) or something in the write.csv? </p>  <p>Any ideas on how to diagnose this would be really great. Below is the R code, which is using RNetLogo package to control NetLogo and send the model to multiple nodes on a server. </p>  <pre><code># #with parallel processing # library(parallel) nl.path &lt;- "/nfs/ncarter-data/netlogo-parallel/NetLogo-5.1.0" model.path &lt;- "/nfs/ncarter-data/netlogo-parallel/NetLogo_model_cluster_test/June_1_CNP_resource_use.nlogo" model.directory &lt;- "/nfs/ncarter-data/netlogo-parallel/NetLogo_model_cluster_test" gui &lt;- FALSE # # Create an output dir if the OUTPUT_DIR environment is set, otherwise use current dir # outputdir &lt;- Sys.getenv('OUTPUT_DIR') if (nchar(outputdir) == 0) {  outputdir &lt;- getwd() } setwd(model.directory) # # Startup NetLogo # prepro &lt;- function(dummy, gui, nl.path, model.path) {   library(RNetLogo)   NLStart(nl.path, gui=gui)   NLLoadModel(model.path) } # # Startup cluster using all available cores # processors &lt;- detectCores() cl &lt;- makePSOCKcluster(processors) # # initializing parallel processors # invisible(parLapply(cl, 1:processors, prepro, gui=gui, nl.path=nl.path, model.path=model.path)) # # Function to cancel parallel processing # postpro &lt;- function(x) {   NLQuit() } # #Function to run model simulation # sim &lt;- function(per_pixel_prey_remove){ results=list() NLCommand("set per-pixel-prey-remove", per_pixel_prey_remove, "set entire-site-prey-remove 0.05", "setup", "go") ret &lt;- NLDoReport(440,"go",c("per-pixel-prey-remove","dead-male-chall","dead-fem-starv","dead-adult-fem","dead-adult-male",                              "dead-cub-male","dead-cub-fem","dead-juv-male","dead-juv-fem","dead-tran-male",                               "dead-tran-fem","num-infanticide","count breeding-males","count breeding-females",                              "count cub-males","count cub-females","count juvenile-females",                              "count juvenile-males","count transient-males","count transient-females",                              "count males","count females","count breeding-females with [count my-offspring &gt; 0]",                               "mean [count territory] of breeding-females","mean [count territory] of breeding-males",                              "mean [count females-in-my-territory] of breeding-males with [count females-in-my-territory &gt; 0]",                              "mean [count females-in-my-territory] of breeding-males"),                    as.data.frame=TRUE); results[[1]]=ret return(results) } # # Function to replicate simulation for each parameter value #  rep.sim &lt;- function(per_pixel_prey_remove, rep) {    return(      parLapply(cl, replicate(rep, d), sim))   }  d &lt;- seq(0.25,1,0.25)  per.pixel.prey.remove &lt;- rep.sim(d,processors) # # Write Output File # write.csv(per.pixel.prey.remove,file.path(outputdir,paste(Sys.getenv("JOB_NAME"),"_output_",format(Sys.time(),"%Y_%m_%d_%H%M%S"),".csv",sep=''))) # #quit all parallel processing # invisible(parLapply(cl, 1:processors, postpro)) stopCluster(cl)   </code></pre>