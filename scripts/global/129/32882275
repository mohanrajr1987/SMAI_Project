<p>I wrote some wrappers in C++ to draw some 3D points in a OpenGL scene. I'm not very experienced in OpenGL and I'm not sure if I'm following the pipeline as expected. This is more or less my code:</p>  <ul> <li><p>Main function:</p>    <pre class="lang-cpp prettyprint-override"><code>std::vector&lt;Element&gt; elements(1); while (true) {   glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);   for (auto&amp; element : elements) element.Draw();   ... // some other operations and buffer swapping } </code></pre></li> <li><p><code>Element</code> class:</p>  <pre class="lang-cpp prettyprint-override"><code>class Element {  public:    Element() {      ... // fill m_xyz, m_rgb and m_pose    }    void Draw() {      // translate      glPushMatrix();      glRotatef(m_pose[3], m_pose[4], m_pose[5], m_pose[6]);      glTranslatef(m_pose[0], m_pose[1], m_pose[2]);      // draws 3D points      glEnableClientState(GL_VERTEX_ARRAY);      glEnableClientState(GL_COLOR_ARRAY);      glVertexPointer(3, GL_FLOAT, 0, m_xyz.data());      glColorPointer(3, GL_FLOAT, 0, m_rgb.data());      glDrawArrays(GL_POINTS, 0, m_xyz.size() / 3);      glDisableClientState(GL_COLOR_ARRAY);      glDisableClientState(GL_VERTEX_ARRAY);      // retrieve previous pose      glPopMatrix();    }  private:    std::vector&lt;float&gt; m_xyz, m_rgb, m_pose; }; </code></pre></li> </ul>  <p>Do I have to call <code>glDrawArrays</code> at every iteration of the main loop? </p>  <p>Is there any code of the <code>Draw</code> function that doesn't need to be executed all the time? </p>  <p>Is this how all these functions are expected to be used?</p>  <p>Is there a faster way of doing this?</p>