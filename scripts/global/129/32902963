<p>I'm trying to make a white triangle with the coordinates in the code below to appear on the window. But it shows nothing but a blank screen. These are my codes.</p>  <h1>Vert Shader</h1>  <pre><code>#version 450  in vec3 vertPos;  void main() {     gl_Position = vec4(vertPos, 1); } </code></pre>  <h1>Frag Shader</h1>  <pre><code>#version 450  out vec4 Color;  void main() {     Color = vec4(0.5f, 0.5f, 0.5f, 1.0f); } </code></pre>  <h1>C++</h1>  <pre><code>void Mesh::LoadShader(const std::string VSPath, const std::string FSPath) {     Program = glCreateProgram();      Shaders[0] = CreateShader(inputShader(VSPath), GL_VERTEX_SHADER);     Shaders[1] = CreateShader(inputShader(FSPath), GL_FRAGMENT_SHADER);      for (unsigned int i = 0; i &lt; 2; i++)         glAttachShader(Program, Shaders[i]);      glBindAttribLocation(Program, 0, "vertPos");      glLinkProgram(Program);     CheckShaderError(Program, GL_LINK_STATUS, true, "Error: Program linking failed");      glValidateProgram(Program);     CheckShaderError(Program, GL_VALIDATE_STATUS, true, "Error: Program is invalid"); }  Mesh::Mesh(Vertex *vertices, unsigned int numVertices) {      glGenVertexArrays(1, &amp;VAO);     glBindVertexArray(VAO);      glGenBuffers(1, VBO);      std::vector&lt;glm::vec3&gt; positions;     std::vector&lt;glm::vec2&gt; texCoords;      positions.reserve(numVertices);     texCoords.reserve(numVertices);      for (unsigned int i = 0; i &lt; numVertices; i++)     {         positions.push_back(vertices[i].GetPosition());         texCoords.push_back(vertices[i].GetTextureCoordinate());     }      glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);     glBufferData(GL_ARRAY_BUFFER, positions.size(), &amp;positions[0], GL_STATIC_DRAW);     glEnableVertexAttribArray(0);     glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);      glBindBuffer(GL_ARRAY_BUFFER, 0);     glBindVertexArray(0); }  void Mesh::Render(unsigned int TexUnit) {      glUseProgram(Program);      glBindVertexArray(VAO);     glDrawArrays(GL_TRIANGLES, 0, 3);      glBindVertexArray(0);     glUseProgram(0); }  int main(int argc, char** argv) {     // Initialize Window     InitWindow win(800, 600, "Example");     if (!win.isSuccess())         return 1;      // column 1 = Position , column 2 = Texture Coordinate     Vertex vertices[]={ Vertex(glm::vec3(-0.5,-0.5,0),  glm::vec2(0.0,0.0)),                     Vertex(glm::vec3(0,0.5,0),      glm::vec2(0.5,1.0)),                     Vertex(glm::vec3(0.5,-0.5,0),   glm::vec2(1.0,0.0)) };      // Initialize mesh object     Mesh mesh(vertices, sizeof(vertices) / sizeof(vertices[0]));      // Load Shader     mesh.LoadShader("./res/vertex-shader.vs","./res/fragment-shader.fs");      // Loop until the user closes the window      while (!win.isWindowShouldClosed())     {         // Clear Screen         win.ClearScreen(0, 0.15f, 0.3f, 1);          // Render here         mesh.Render(0);          // Swap front and back buffers         win.SwapBuffer();          // Poll for and process events         win.PollEvents();     }     win.CloseWindow();     return 0; } </code></pre>  <p>I'm pretty sure that nothing's wrong with vertex shader because I use glGetAttribLocation() to check for index of "vertPos" attrib in vertex shader.</p>  <p>Could anyone please help checking it up for me? I'm trying to fix it for a night but it didn't work. I'm sorry that I'm a real beginner to OpenGL and don't want to stuck at making the simple triangle for long. Thanks for upcoming helping :)</p>  <p>P.S. I'm sorry if I do something wrong with this Post. This is my first time on this site.</p>