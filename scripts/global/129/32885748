<p>I'm trying to create a high-level Objective-C OpenGL shader wrapper that allows me to execute various GL shaders without a lot of GL code that clutters the application logic.</p>  <p>So something like this for a shader with two 'in' arguments to create a quad with a different color in every corner:</p>  <pre><code>OpenGLShader* theShader = [OpenGLShaderManager shaderWithName:@"MyShader"]; glUseProgram(theShader.program);  float colorsForQuad[4] = {{1.0f, 0.0f, 0.0f, 1.0f}, {0.0f, 1.0 ....}} theShader.arguments[@"inColor"] setValue:colorsForQuad forNumberOfVertices:4];  float positionsForQuad[4] = {{-1.0f, -1.0f, 0.0f, 1.0f}, {-1.0f, 1.0f, ....}} theShader.arguments[@"inPosition"] setValue:positionsForQuad forNumberOfVertices:4];  glDrawArrays(GL_TRIANGLE_FAN, 0, 4); </code></pre>  <p>The <code>setValue:forNumberOfVertices:</code> function looks like this:</p>  <pre><code>int bytesForGLType = numBytesForGLType(self.openGLValueType); glBindVertexArray(self.vertexArrayObject); GetError();  glBindBuffer(GL_ARRAY_BUFFER, self.vertexBufferObject); GetError();  glBufferData(GL_ARRAY_BUFFER, bytesForGLType * numVertices, value, GL_STATIC_DRAW); GetError();  glEnableVertexAttribArray((GLuint)self.boundLocation); GetError();  glVertexAttribPointer((GLuint)self.boundLocation, numVertices,                               GL_FLOAT, GL_FALSE, 0, 0); </code></pre>  <p>I think the problem is that each argument has its own VAO and VBO but the shader needs the data of all arguments when it is executed. I can obviously only bind one buffer at a time. The examples I've seen so far only use one VAO and one VBO and create a C structure containing all the data needed. This however would make my current modular approach much harder.</p>  <p>Isn't there any option to have OpenGL copy the data so it doesn't need to be available and bound when glDraw... is called?</p>  <p><strong>Edit</strong></p>  <p>I found out that using a shared Vertex Array Object is enough to solve the issue.  However, I would appreciate some more insight on when things are actually copied to the GPU.</p>