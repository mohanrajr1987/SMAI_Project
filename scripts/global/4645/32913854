<p>I have a multidimensional array, and I am trying to sort it so that the array with the most entries comes first, etc... Then if two arrays have the same number of entries, they should be arranged alphabetically. Also, if the entries could be sorted by the key, 'name', I think that would be great. As you can see below, I am using <em>ldap_sort</em> to sort by 'name'. But I'm sure calling too many sort functions is bad practice.</p>  <pre><code>if ($conn == True ) {     Try {          // Authenticate         $bind = ldap_bind($conn, $user, $pass);          // Search AD         $search = ldap_search($conn, $dn, $filter, $attr);          // Sort         ldap_sort($conn, $search, 'name');          // Retrieve Data         $records = ldap_get_entries($conn, $search);          Foreach ($records as $record) {              if(is_array($record) &amp;&amp; array_key_exists('l', $record)) {                  $locations[$record['l'][0]][] = $record;              }              continue;          }      } finally {          // Close Connection         ldap_close($conn);      }  } else {      trigger_error('Unable_To_Connect_To_Server');  }  // Sort Location By Number Of Entries array_multisort(array_map('count', $locations), SORT_DESC, $locations); </code></pre>  <p>I guess to put it layman's terms.. Sorting entries alphabetically by their 'name' value, should be inherent. Then the arrays should be sorted by the number of entries, and if any arrays have the same number of entries they should be sorted alphabetically.</p>  <p>P.S. - I'm asking for help because it's hard for me to understand multidimensional arrays (especially those returned by <em>ldap_search</em>) and sorting them is even more mind-boggling to me.</p>  <p><strong>EDIT</strong> Like I said, arrays confuse me but hopefully the below accurately depicts my intentions:</p>  <pre><code>Array (      [Location1] =&gt; Array (          [0] =&gt; Array (              [l] =&gt; Array (                  [count] =&gt; 1                  [0] =&gt; Location1             )              [0] =&gt; l              [telephonenumber] =&gt; Array (                  [count] =&gt; 1                  [0] =&gt; XXX.XXX.XXXX             )              [1] =&gt; telephonenumber              [department] =&gt; Array (                  [count] =&gt; 1                  [0] =&gt; Department1             )              [2] =&gt; department              [name] =&gt; Array (                  [count] =&gt; 1 [0] =&gt; User1             )              [3] =&gt; name              [ipphone] =&gt; Array (                  [count] =&gt; 1                  [0] =&gt; IPPhone1             )              [4] =&gt; ipphone              [mail] =&gt; Array (                  [count] =&gt; 1                  [0] =&gt; user@domain.com             )              [5] =&gt; mail              [count] =&gt; 6              [dn] =&gt; DistinguishedName1         )     ) ) </code></pre>  <p>I cut the above short (there are hundreds of records returned) and I'm not sure I ended it correctly. But I am essentially parsing the information to output something like below.</p>  <pre><code>c_Location1    a_user1    b_user1    c_user1 a_Location2    a_user2    b_user2 b_location3    a_user3    b_user3 </code></pre>