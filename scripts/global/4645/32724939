<p>I implemented the LDAP authentication and authorization using Spring Security in my project. I configured the spring-security.xml and got it running. I am trying to do the same using Java (WebSecurityConfig.java). Can someone guide me on how to do this?</p>  <pre><code>Here is my spring-security.xml  &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;beans xmlns="http://www.springframework.org/schema/beans"     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"      xmlns:security="http://www.springframework.org/schema/security"     xsi:schemaLocation="http://www.springframework.org/schema/beans              http://www.springframework.org/schema/beans/spring-beans-3.2.xsd             http://www.springframework.org/schema/security              http://www.springframework.org/schema/security/spring-security-3.2.xsd"&gt;      &lt;!-- This is where we configure Spring-Security  --&gt;     &lt;security:http auto-config="true" use-expressions="true"  &gt;          &lt;security:intercept-url pattern="/main/common" access="hasRole('role.xyz.WebAdmin')"/&gt;         &lt;security:intercept-url pattern="/admincare" access="hasRole('role.xyz.WebAdmin')"/&gt;          &lt;security:form-login                 login-page="/auth/login"                  authentication-failure-url="/auth/login?error=true"                  default-target-url="/main/common"/&gt;          &lt;security:logout                  invalidate-session="true"                  logout-success-url="/auth/login"                  logout-url="/auth/logout"/&gt;      &lt;/security:http&gt;               &lt;security:authentication-manager&gt;          &lt;security:authentication-provider ref="ldapAuthProvider" /&gt;     &lt;/security:authentication-manager&gt;      &lt;bean id="ldapAuthProvider" class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider"&gt;         &lt;constructor-arg name="authenticator"&gt;             &lt;bean class="org.springframework.security.ldap.authentication.BindAuthenticator"&gt;                 &lt;constructor-arg ref="ldapContext" /&gt;                 &lt;property name="userSearch"&gt;                     &lt;bean class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch"&gt;                         &lt;constructor-arg name="searchBase" value="" /&gt;                         &lt;constructor-arg name="searchFilter" value="(&amp;amp;(uid={0})(objectclass=person)(ums-account-state=OK))" /&gt;                         &lt;constructor-arg name="contextSource" ref="ldapContext" /&gt;                     &lt;/bean&gt;                 &lt;/property&gt;             &lt;/bean&gt;         &lt;/constructor-arg&gt;         &lt;constructor-arg&gt;             &lt;bean class="com.gemalto.mobileid.service.UmsLdapAuthoritiesPopulator"&gt;                 &lt;constructor-arg ref="ldapContext"/&gt;             &lt;/bean&gt;         &lt;/constructor-arg&gt;     &lt;/bean&gt;      &lt;security:ldap-server id="ldapContext" url="ldap://aaa:54389/dc=xxx.com" manager-dn="bbb" manager-password="ccc" /&gt;  &lt;/beans&gt; </code></pre>  <p>Now, if I want to do same in the JAVA style (in WebSecurityConfig.java) and get rid of the XML, how do I do? I am not so familiar with the APIs provided for this. I started it this way:</p>  <pre><code>    public ActiveDirectoryLdapAuthenticationProvider activeDirectoryLdapAuthenticationProvider() {         ActiveDirectoryLdapAuthenticationProvider provider = new ActiveDirectoryLdapAuthenticationProvider("", "ldap://aaa:54389/dc=xxx.com");         provider.setConvertSubErrorCodesToExceptions(true);         provider.setUseAuthenticationRequestCredentials(true);         provider.setUseAuthenticationRequestCredentials(true);         return provider;     }      @Bean     public LoggerListener loggerListener() {         return new LoggerListener();     }      @Override     protected void configure(AuthenticationManagerBuilder auth) throws Exception {         auth.authenticationProvider(activeDirectoryLdapAuthenticationProvider());     }      @Override     protected void configure(HttpSecurity http) throws Exception {         // Configuration for Redirects, Login-Page and stuff          http         .authorizeRequests()             .antMatchers("/admincare").authenticated()             .and()         .formLogin();             //.loginPage("/auth/login")             //.permitAll();          }    </code></pre>  <p>I am not sure how to set the rest of the parameters (as done in XML) in this Java code for the WebSecurityConfig. Any help would be really appreciated</p>