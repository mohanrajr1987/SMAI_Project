<p>We use git for source control. Each time there is a commit from developers, a script would modify a build file and checks in the file. The script commits the build file with a message that follows a pattern. So the commit history is like the following:</p>  <ul> <li>script checkin build file 003</li> <li>fix this bug</li> <li>script checkin build file 002</li> <li>resolve that story</li> </ul>  <p>What I want to do is to remove all commits by the script. Now, obviously, this is very different from removing a particular commit.</p>  <p>I have the freedom to start a brand new repository by copying from existing repository, but I still want to preserve the "developer's commit history" as much as possible, while getting rid of the "script's commit history".</p>  <p>Is that possible?</p>  <p>Note - the "script's commits" only changed this single file (that is, the build file), and did not change any other file. And, no "developer's commit" ever changed this particular file.</p>  <p>So far what I have been doing is to run "bfg tool" to delete that particular build file from the git repo. Only the commits from the script ever changed the build file, so I am hoping by removing the build file, the associated commits would be squashed away by git.</p>  <p>But, what I found is: the build file is gone, yet all commits are preserved, and those commits, curiously, having "0 changes".</p>  <p>So my next question is: is it possible to ask git to remove commits with "0 changes"?</p>