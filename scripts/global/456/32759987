<p>The title pretty much says it all.</p>  <p>In the local repo I've got .git folder containing my hooks. I use my custom Lua source to write the current version in the file inside itself. Then in the pre-commit hook I have:</p>  <pre><code>#!/bin/sh # # An example hook script to verify what is about to be committed. # Called by "git commit" with no arguments.  The hook should # exit with non-zero status after issuing an appropriate message if # it wants to stop the commit. # # To enable this hook, rename this file to "pre-commit".  echo "START" &gt;&gt; E:/Desktop/tmp.txt  exec $LUA_HOME\\lua.exe ${PWD}\\hooks\\pre-commit.lua "${PWD}/lua/autorun/trackassembly_init.lua" "Rev." &gt; E:/Desktop/tmp.txt </code></pre>  <p>I've got two files. In the first I do the actual changes ( source file ). The second one I use to write the current version in ( version file ).</p>  <p>Whenever I use TortoiseGit and do:</p>  <pre><code>1) Modify the source file 2) Repo Directory --&gt; Right Click --&gt; Git Commit "master" </code></pre>  <p>The information about the source file is added in the indexes, but there is no trace of the changed version file with the new version inside it. This lead to a difference between the working copy and the version file and TortoiseGit puts a (!) on the directory.</p>  <p>According to the manual:</p>  <p>The pre-commit hook is run first, before you even type in a commit message. It’s used to inspect the snapshot that’s about to be committed, to see if you’ve forgotten something, to make sure tests run, or to examine whatever you need to inspect in the code. Exiting non-zero from this hook aborts the commit</p>