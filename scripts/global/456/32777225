<p>Our code base is split between several projects that have some dependency relationships between them. Say that executable <code>E</code> depends on static library <code>L</code> to be build. Therefore, within project <code>E</code>, some information is written stating it depends on <code>L</code>.</p>  <p>The issue comes when handling the versions of these projects. <code>E</code> has <code>trunk</code>, <code>branch</code> (the latest, ignore older ones), and <code>tags</code>. Same for <code>L</code> that also has <code>trunk</code>, <code>branch</code>, and <code>tags</code>.</p>  <ul> <li><code>E/trunk</code> depends on <code>L/trunk</code>.</li> <li><code>E/branch</code> depends on <code>L/branch</code>.</li> <li><code>E/tags/1.1</code> depends on <code>L/tags/2.1</code>.</li> </ul>  <p>The issue pops up when tagging. Indeed, we create the tag by copying the branch content. However, within <code>E/branch</code> the dependency is on <code>L/branch</code>. Therefore we usually first create <code>E/tag</code>, and then change the dependencies within this tag. This is not good thing to change stuff in a tag. Furthermore it's error prone as one can easily forget to change these dependencies (it already happen), leaving us with a tag of a project depending on branches of other projects. Not exactly the purpose of a tag.</p>  <p>We've tried to create another branch directory: <code>release</code>. This directory is a stagging area, where all dependencies are on sub project tags. It's this <code>release</code> that is copied to <code>tags</code>. This has proven possible where a project is mainly a dependencies project (think of an overall project gathering everything for a final setup) with very few code. But for other projects, this would mean managing all of <code>trunk</code>, <code>branches</code>, and <code>releases</code>. Impracticable.</p>  <p>Does anyone know strategies for handling dependencies and tagging?</p>