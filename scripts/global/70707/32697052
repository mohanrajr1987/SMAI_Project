<p>Hello guys i am building an app in which user has 2 options to login.</p>  <ul> <li>Option 1) Register into <code>SQLLite Database</code> and then Login </li> <li>Option 2) Sign in with Google +</li> </ul>  <p>The thing is that it logs the user in the first time but i want to keep the session so the user will not have to login again and again. In this part comes the problemm.</p>  <p>I have searched and all tutorials and examples so far are implementing such a thing inside of an activity i am trying to implement it inside a Fragment.</p>  <p>My code:</p>  <pre><code>public class Login extends Fragment implements         GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener {       private Button signIn;     private View rootView;     private SessionManager session;     private TextView tv;     private String personName, personPhotoUrl;     DatabaseAdapter loginDataBaseAdapter;     private static final int RC_SIGN_IN = 0;     private static final String TAG = "MainActivity";     private static final int PROFILE_PIC_SIZE = 400;     private GoogleApiClient mGoogleApiClient;      private boolean mIntentInProgress;     private boolean signedInUser;      private ConnectionResult mConnectionResult;      private SignInButton btnSignIn;       @Override     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {         rootView = inflater.inflate(R.layout.signin, container, false);         loginDataBaseAdapter = new DatabaseAdapter(getActivity().getApplicationContext());         loginDataBaseAdapter = loginDataBaseAdapter.open();         session = new SessionManager(getActivity().getApplicationContext());         if (session.isLoggedIn()) {             Intent intent = new Intent(getActivity().getApplicationContext(), UserProfile.class);             startActivity(intent);             getActivity().finish();         }         setupView();         setupClickEvent();         mGoogleApiClient = new GoogleApiClient.Builder(getActivity().getApplicationContext())                 .addConnectionCallbacks(this)                 .addOnConnectionFailedListener(this)                 .addApi(Plus.API, Plus.PlusOptions.builder().build())                 .addScope(Plus.SCOPE_PLUS_LOGIN)                 .build();          btnSignIn = (SignInButton) rootView.findViewById(R.id.btn_sign_in);         setupListenersForGPlus();         return rootView;     }      private void setupListenersForGPlus() {         btnSignIn.setOnClickListener(new View.OnClickListener() {             @Override             public void onClick(View v) {                 signInWithGooglePlus();             }         });       }      private void signInWithGooglePlus() {         if (!mGoogleApiClient.isConnecting()) {             signedInUser = true;             resolveSignInError();         }      }      private void resolveSignInError() {         if (mConnectionResult.hasResolution()) {             try {                 mIntentInProgress = true;                 mConnectionResult.startResolutionForResult(getActivity(), RC_SIGN_IN);             } catch (IntentSender.SendIntentException e) {                 mIntentInProgress = false;                 mGoogleApiClient.connect();             }         }     }       public void onStart() {         super.onStart();         mGoogleApiClient.connect();     }      public void onStop() {         super.onStop();         if (mGoogleApiClient.isConnected()) {             mGoogleApiClient.disconnect();         }     }      @Override     public void onDestroy() {         super.onDestroy();         loginDataBaseAdapter.close();     }          private void getProfileInformation() {         try {             if (Plus.PeopleApi.getCurrentPerson(mGoogleApiClient) != null) {                 Person currentPerson = Plus.PeopleApi                         .getCurrentPerson(mGoogleApiClient);                 personName = currentPerson.getDisplayName();                 personPhotoUrl = currentPerson.getImage().getUrl();                 personPhotoUrl = personPhotoUrl.substring(0,                         personPhotoUrl.length() - 2)                         + PROFILE_PIC_SIZE;             } else {                 Toast.makeText(getActivity().getApplicationContext(),                         "Person information is null", Toast.LENGTH_LONG).show();             }         } catch (Exception e) {             e.printStackTrace();         }     }      @Override     public void onActivityResult(int requestCode, int responseCode, Intent intent) {         switch (requestCode) {             case RC_SIGN_IN:                 if (responseCode == Activity.RESULT_OK) {                     signedInUser = false;                 }                 mIntentInProgress = false;                 if (!mGoogleApiClient.isConnecting()) {                     mGoogleApiClient.connect();                 }                 break;         }     }       @Override     public void onConnected(Bundle bundle) {         signedInUser = false;         Toast.makeText(getActivity().getApplicationContext(), "Connected", Toast.LENGTH_LONG).show();         getProfileInformation();         updateUI(true);         session = new SessionManager(getActivity().getApplicationContext());         session.createLoginSession(personName, "some@email.com");         Intent intent = new Intent(getActivity().getApplicationContext(), UserProfile.class);         intent.putExtra("personName", personName);         intent.putExtra("personPhotoUrl", personPhotoUrl);         startActivity(intent);         getActivity().finish();     }      @Override     public void onConnectionSuspended(int i) {         mGoogleApiClient.connect();         updateUI(false);     }      private void updateUI(boolean b) {         if (signedInUser) {             btnSignIn.setVisibility(View.GONE);          } else {             btnSignIn.setVisibility(View.VISIBLE);         }     }      @Override     public void onConnectionFailed(ConnectionResult result) {         if (!result.hasResolution()) {             GooglePlayServicesUtil.getErrorDialog(result.getErrorCode(), getActivity(), 0).show();             return;         }         if (!mIntentInProgress) {             mConnectionResult = result;             if (signedInUser) {                 resolveSignInError();             }         }      } } </code></pre>  <p>I feel it does not work as it should...</p>  <p>in The UserProfile activity that the user is being send after login i have the following code:</p>  <pre><code>@Override     protected void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         setContentView(R.layout.user_profile);         checkSession();         checkNetwork();         populateProfileData();         registerMainButtons();          retrievePhotoFromPrefs();         populateShareContentButtons();         retrieveRateFromPrefs();         setupButtonEvents();         btnSignOut = (Button) findViewById(R.id.btn_sign_out);         btnRevokeAccess = (Button) findViewById(R.id.btn_revoke_access);         setupListenersForGPlus();     }      private void setupListenersForGPlus() {         btnSignOut.setOnClickListener(new View.OnClickListener() {             @Override             public void onClick(View v) {                 signOutWithGooglePlus();             }         });          btnRevokeAccess.setOnClickListener(new View.OnClickListener() {             @Override             public void onClick(View v) {                 revokeGoogleplusAccess();             }         });     }      private void revokeGoogleplusAccess() {         if (mGoogleApiClient.isConnected()) {             Plus.AccountApi.clearDefaultAccount(mGoogleApiClient);             Plus.AccountApi.revokeAccessAndDisconnect(mGoogleApiClient)                     .setResultCallback(new ResultCallback&lt;Status&gt;() {                         @Override                         public void onResult(Status arg0) {                             Log.e(TAG, "User access revoked!");                             mGoogleApiClient.connect();                             updateUI(false);                         }                      });         }     }      private void signOutWithGooglePlus() {         if (mGoogleApiClient.isConnected()) {             Plus.AccountApi.clearDefaultAccount(mGoogleApiClient);             mGoogleApiClient.disconnect();             mGoogleApiClient.connect();             updateUI(false);         }     }      private void populateShareContentButtons() {         rateButton = (FloatingActionButton) findViewById(R.id.rate);         shareButton = (FloatingActionButton) findViewById(R.id.share);     }      private void checkSession() {         session = new SessionManager(UserProfile.this);         session.checkLogin();         user = session.getUserDetails();     }      private void updateUI(boolean isSignedIn) {         if (isSignedIn) {             btnSignOut.setVisibility(View.VISIBLE);             btnRevokeAccess.setVisibility(View.VISIBLE);         } else {             btnSignOut.setVisibility(View.GONE);             btnRevokeAccess.setVisibility(View.GONE);         }     } </code></pre>  <p>Any ideas of what might be wrong?</p>