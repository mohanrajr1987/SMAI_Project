<p>I'm implementing google plus in fragment. When i clicked on login with google plus button then a pop-up comes choose account , after that nothing happens. But when i open my app again then it says user is connected and opened a new activity without even clicking on login button. </p>  <p>public class Fragment1 extends Fragment implements  ConnectionCallbacks, OnConnectionFailedListener {</p>  <pre><code>EditText username, email, password, cnfrmpswd; protected static final ServiceConnection ServiceConnection = null; Drawable myDrawable; private LoginButton loginBtn; //private TextView username; private UiLifecycleHelper uiHelper; private Other other;     private static final int RC_SIGN_IN = 0;    private static final String TAG = "Fragment1";  private static final int PROFILE_PIC_SIZE = 400;  private boolean mIntentInProgress;  private boolean mSignInClicked;  private ConnectionResult mConnectionResult;  private SignInButton btnSignIn; private Button btnSignOut, btnRevokeAccess; private ImageView imgProfilePic; private TextView txtName, txtEmail; private RelativeLayout rlProfileLayout, frag;  private Context mContext; private Activity mActivity;   private GoogleApiClient mGoogleApiClient;   @Override public void onCreate(Bundle savedInstanceState) {     // TODO Auto-generated method stub     super.onCreate(savedInstanceState);      uiHelper = new UiLifecycleHelper(getActivity(), statusCallback);     uiHelper.onCreate(savedInstanceState);       mActivity = getActivity();     mContext = getActivity().getApplicationContext();      }  @Override public View onCreateView(LayoutInflater inflater, ViewGroup container,         Bundle savedInstanceState) {      View rootView = inflater.inflate(R.layout.activity_fragment1, container, false);      username = (EditText)rootView.findViewById(R.id.editText1);     email = (EditText)rootView.findViewById(R.id.editText2);     password = (EditText)rootView.findViewById(R.id.editText3);     cnfrmpswd = (EditText)rootView.findViewById(R.id.editText4);      frag = (RelativeLayout)rootView.findViewById(R.id.frag1);       imgProfilePic = (ImageView)rootView.findViewById(R.id.imgProfilePic);     btnSignIn = (SignInButton)rootView.findViewById(R.id.btn_sign_in);     btnRevokeAccess = (Button)rootView.findViewById(R.id.btn_revoke_access);     btnSignOut = (Button)rootView.findViewById(R.id.btn_sign_out);       rlProfileLayout = (RelativeLayout)rootView.findViewById(R.id.rlProfileLayout);      mGoogleApiClient = new GoogleApiClient.Builder(rootView.getContext())     .addConnectionCallbacks(this)     .addOnConnectionFailedListener(this).addApi(Plus.API,PlusOptions.builder().build())     .addScope(Plus.SCOPE_PLUS_LOGIN).build();       btnSignIn.setOnClickListener(new View.OnClickListener() {          @Override         public void onClick(View v) {              signInWithGplus();          }     });      btnSignOut.setOnClickListener(new View.OnClickListener() {          @Override         public void onClick(View v) {             signOutFromGplus();         }     });       loginBtn = (LoginButton)rootView.findViewById(R.id.authButton);     loginBtn.setFragment(this);     loginBtn.setReadPermissions(Arrays.asList("email"));     loginBtn.setUserInfoChangedCallback(new UserInfoChangedCallback() {         @Override         public void onUserInfoFetched(GraphUser user) {             if (user != null) {                    Intent i = new Intent(mActivity, GoogleMapActivity.class);                 startActivity(i); </code></pre>  <p>Context.BIND_AUTO_CREATE);</p>  <pre><code>             }              }         });     return rootView; } private Session.StatusCallback statusCallback = new Session.StatusCallback() {     @Override             public void call(Session session, SessionState state,                     Exception exception) {             onSessionStateChange(session,state,exception); }      private void onSessionStateChange(Session session, SessionState state,             Exception exception) {         // TODO Auto-generated method stub      } </code></pre>  <p>};</p>  <pre><code>@Override public void onStart() {     super.onStart();     mGoogleApiClient.connect();  }    @Override public void onStop() {     super.onStop();     if (mGoogleApiClient.isConnected()) {         mGoogleApiClient.disconnect();     } }   @Override public void onResume() { // TODO Auto-generated method stub     super.onResume();     uiHelper.onResume(); }   @Override public void onPause() {     // TODO Auto-generated method stub     super.onPause();     uiHelper.onPause(); }    @Override public void onDestroy() {     // TODO Auto-generated method stub     super.onDestroy();     uiHelper.onDestroy(); }       private void resolveSignInError() {           try {               mConnectionResult.startResolutionForResult(getActivity(), RC_SIGN_IN);              mIntentInProgress = true;           } catch (SendIntentException e) {              Log.e(TAG, "Could not resolve ConnectionResult.", e);              mIntentInProgress = false;              mGoogleApiClient.connect();          }          }      public void onConnectionFailed(ConnectionResult result) {         if (!result.hasResolution()) {          GooglePlayServicesUtil.getErrorDialog(result.getErrorCode(), mActivity,                  0).show();          return;      }        if (!mIntentInProgress) {          // Store the ConnectionResult for later usage          mConnectionResult = result;           if (mSignInClicked) {              // The user has already clicked 'sign-in' so we attempt to              // resolve all              // errors until the user is signed in, or they cancel.              resolveSignInError();          }      }   }      @Override     public void onActivityResult(int requestCode1, int resultCode1, Intent data1) {         // TODO Auto-generated method stub         super.onActivityResult(requestCode1, resultCode1, data1);         uiHelper.onActivityResult(requestCode1, resultCode1, data1);           if (requestCode1 == Fragment1.RC_SIGN_IN) {              if (resultCode1 != TabActivity.RESULT_OK) {                  mSignInClicked = false;              }               mIntentInProgress = false;               if (!mGoogleApiClient.isConnecting()) {                  mGoogleApiClient.connect();              }          }     }       @Override      public void onConnected(Bundle arg0) {          mSignInClicked = false;          Toast.makeText(getActivity(), "User is connected!", Toast.LENGTH_LONG).show();           // Get user's information             getProfileInformation();           // Update the UI after signin          updateUI(true);       }       @Override      public void onConnectionSuspended(int arg0) {          mGoogleApiClient.connect();            updateUI(false);      }   private void updateUI(boolean isSignedIn) {      if (isSignedIn) {            btnSignIn.setVisibility(View.GONE);          loginBtn.setVisibility(View.GONE);          username.setVisibility(View.GONE);          email.setVisibility(View.GONE);          password.setVisibility(View.GONE);          cnfrmpswd.setVisibility(View.GONE);          rlProfileLayout.setVisibility(View.VISIBLE);          btnSignOut.setVisibility(View.VISIBLE);       } else {          rlProfileLayout.setVisibility(View.GONE);          username.setVisibility(View.VISIBLE);          email.setVisibility(View.VISIBLE);          password.setVisibility(View.VISIBLE);          cnfrmpswd.setVisibility(View.VISIBLE);          btnSignIn.setVisibility(View.VISIBLE);          loginBtn.setVisibility(View.VISIBLE);          btnSignOut.setVisibility(View.GONE);          btnRevokeAccess.setVisibility(View.GONE);      }  }     private void getProfileInformation() {     try {         if (Plus.PeopleApi.getCurrentPerson(mGoogleApiClient) != null) {             Person currentPerson = Plus.PeopleApi                     .getCurrentPerson(mGoogleApiClient);             String personName = currentPerson.getDisplayName();             String personPhotoUrl = currentPerson.getImage().getUrl();             String personGooglePlusProfile = currentPerson.getUrl();             String email = Plus.AccountApi.getAccountName(mGoogleApiClient);              Log.e(TAG, "Name: " + personName + ", plusProfile: "                     + personGooglePlusProfile + ", email: " + email                     + ", Image: " + personPhotoUrl);               personPhotoUrl = personPhotoUrl.substring(0,                     personPhotoUrl.length() - 2)                     + PROFILE_PIC_SIZE;              new LoadProfileImage(imgProfilePic).execute(personPhotoUrl);          } else {             Toast.makeText(getActivity(),                     "Person information is null", Toast.LENGTH_LONG).show();         }     } catch (Exception e) {         e.printStackTrace();     } } private class LoadProfileImage extends AsyncTask&lt;String, Void, Bitmap&gt; {     ImageView bmImage;      public LoadProfileImage(ImageView bmImage) {         this.bmImage = bmImage;     }      protected Bitmap doInBackground(String... urls) {         String urldisplay = urls[0];         Bitmap mIcon11 = null;         try {             InputStream in = new java.net.URL(urldisplay).openStream();             mIcon11 = BitmapFactory.decodeStream(in);         } catch (Exception e) {             Log.e("Error", e.getMessage());             e.printStackTrace();         }         return mIcon11;     }      protected void onPostExecute(Bitmap result) {         bmImage.setImageBitmap(result);     } </code></pre>  <p>}   </p>  <pre><code>        /**           * Sign-in into google           * */          private void signInWithGplus() {              if (!mGoogleApiClient.isConnecting()) {                  mSignInClicked = true;                                    resolveSignInError();              }          }            /**           * Sign-out from google           * */          private void signOutFromGplus() {              if (mGoogleApiClient.isConnected()) {                  Plus.AccountApi.clearDefaultAccount(mGoogleApiClient);                  mGoogleApiClient.disconnect();                  mGoogleApiClient.connect();                  updateUI(false);              }          }       private void revokeGplusAccess() {          if (mGoogleApiClient.isConnected()) {              Plus.AccountApi.clearDefaultAccount(mGoogleApiClient);              Plus.AccountApi.revokeAccessAndDisconnect(mGoogleApiClient)                 .setResultCallback(new ResultCallback&lt;Status&gt;() {                     @Override                     public void onResult(Status arg0) {                         Log.e(TAG, "User access revoked!");                         mGoogleApiClient.connect();                         updateUI(false);                     }                 });             }         } </code></pre>