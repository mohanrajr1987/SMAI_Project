<p>I am trying to build a very basic Qt5 application that uses QtQuick 2 as UI-Language and is build using a GNU Makefile. That means, that I don't want to use javascript, but load the QML layout and specify signals and slots in C++. However, here are my questions:</p>  <ol> <li>What's the best way to load a QML layout and access its' elements?</li> <li>How do I build such an application directly with GNU Make instead of using qmake to generate a Makefile?</li> </ol>  <p>Please find my first attempts below:</p>  <p><strong>qml/main.qml</strong></p>  <pre><code>import QtQuick 2.5 import QtQuick.Controls 1.4 import QtQuick.Dialogs 1.2  Rectangle {     width: 360     height: 360     Text {         text: qsTr("Hello World")         anchors.centerIn: parent     }      MouseArea {         anchors.fill: parent         onClicked: {             Qt.quit();         }     } } </code></pre>  <p><strong>src/main.cpp</strong></p>  <pre><code>#include &lt;QApplication&gt; #include &lt;QQmlApplicationEngine&gt; #include &lt;sqlite3.h&gt;  int main(int argc, char* argv[]) {   QApplication app(argc, argv);    QQmlApplicationEngine engine;   engine.load(QUrl(QStringLiteral("qrc:/main.qml")));    return app.exec(); } </code></pre>  <p><strong>Makefile</strong></p>  <pre><code>CC          = /usr/bin/g++ MOC         = moc-qt5 CFLAGS      = -Wall -pedantic -std=c++0x -D_REENTRANT \                             -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED TARGET        = yarott INCPATH         = -I. -I/usr/include -I/usr/include/qt -I/usr/include/qt/QtGui \                             -I/usr/include/qt/QtCore -I/usr/lib/qt/mkspecs/linux-g++ LDFLAGS     = -L/usr/lib -lsqlite3 -lQt5Gui -lQt5Core -lGL -lpthread SRCPATH         = ./src BINPATH         = ./bin  DEFINES         = $(shell find $(SRCPATH) -type f -name '*.h') SOURCES         = $(shell find $(SRCPATH) -type f -name '*.cpp') OBJECTS         := $(patsubst $(SRCPATH)/%.cpp, $(BINPATH)/%.o, $(SOURCES)) MOC_SOURCES := $(patsubst $(SRCPATH)/%.cpp, $(SRCPATH)/moc_%.cpp, $(SOURCES)) MOC_OBJECTS := $(patsubst $(BINPATH)/%.o, $(BINPATH)/moc_%.o, $(OBJECTS))  SOURCES += $(MOC_SOURCES) OBJECTS += $(MOC_OBJECTS)  all: bin $(TARGET)  $(TARGET): $(OBJECTS)     $(CC) $(CFLAGS) -o $(BINPATH)/$(TARGET) $(OBJECTS) $(LDFLAGS) $(INCPATH)  $(BINPATH)/%.o: $(SRCPATH)/%.cpp     @mkdir -p "$(@D)"     $(CC) $(CFLAGS) -c $&lt; -o $@  $(SRCPATH)/moc_%.cpp: $(SRCPATH)/%.h     $(MOC) $(DEFINES) $(INCPATH) $&lt; -o $@  # Generate cc from h via Qt's Meta Object Compiler # $(SRCPATH)/%.moc.cc: $(SRCPATH)/%.h #   $(MOC) $(INCPATH) $&lt; -o $@  # Create bin folder bin:     mkdir $(BINPATH)  # Remove bin folder clean:     rm -r $(BINPATH) </code></pre>