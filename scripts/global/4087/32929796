<p>I am currently learning some C++ for a course I am taking in school.  I have basic understanding of lvalues and rvalues, but I am unable to determine why I am receiving a compiler error.  </p>  <p>I am creating a singly linked list and need to be able to reverse it.  As per my assignment I have two classes. The first is the node and just holds an int as well as a pointer.</p>  <pre><code> class Node {   int data;   Node *next;    public:     //Constructor     Node(int d) {       data = d;       next = NULL;}      //Set to next Node     void SetNext(Node *nextOne) {       next = nextOne;}      //Returns data value     int Data(){return data;}      //Returns next Node     Node *Next() {return next;} }; </code></pre>  <p>Then I have a linked list class that has a header pointer and then a number of functions for adding, printing etc. the list.</p>  <pre><code>class LinkedList {   Node *head;    public:     //Constructor     LinkedList(){head = NULL;}      void AddNode(int d) {       //Create a new Node       Node *newNode = new Node(d);        //Create a temporary pointer       Node *temp = head;        //If there are already nodes in the list       if(temp != NULL) {         //Parse through to the end of the list         while(temp-&gt;Next() != NULL) {           temp = temp-&gt;Next();}         //Point the last Node in the list to the new Node         temp-&gt;SetNext(newNode);       }        //If adding as the first Node       else{         head = newNode;}     }      void PrintList() {       //Temporary pointer       Node *temp = head;        //If there are no nodes in the list       if(temp == NULL) {         std::cout &lt;&lt; "The list is empty" &lt;&lt; std::endl;}        //If there is only one node in the list       if(temp-&gt;Next() == NULL) {           std::cout &lt;&lt; temp-&gt;Data() &lt;&lt; std::endl;}          //Parse through the list and print       else {         do {           std::cout &lt;&lt; temp-&gt;Data();           temp = temp-&gt;Next();         }         while(temp != NULL);       }     }      //Returns the number of nodes in the list     int CountList() {       //Temporary pointer       Node *temp = head;       //Counter variable       int counter = 0;        //If the list is empty       if(temp == NULL) {         return counter;}        //Parse through Nodes counting them       else {         do {counter++;           temp = temp-&gt;Next();         }         while(temp != NULL);       }       return counter;     }      //Reverses the list     Node *ReverseList() {       //Initially set to NULL then tracks the new head       Node *marker = NULL;       //Tracks the next one in the list       Node *nextOne;        //Sets the first Node to NULL and then sets the last Node to point to       //the first one and rotates through the list pointing the last to the       //first       while(head != NULL) {         nextOne = head-&gt;Next();         head-&gt;Next() = marker;         marker = head;         head = nextOne;       }       //Setting the head back to the start again       head = marker;     }  }; </code></pre>  <p>One of those functions is supposed to reverse the list.  The line "head->Next() = marker;" in the ReverseList function is causing a "lvalue required as left operand of assignment" error when compiling.</p>  <p>Any insight as to why this is occurring and how I can correct the problem?  </p>  <p>Thank you in advance!</p>