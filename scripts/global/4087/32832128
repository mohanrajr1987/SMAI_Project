<p>I just came across a very strange error while using nose and cython inside my virtualenv with python3. For some reason nosetests started giving me an ImportError even though <code>python -m unittest basic_test.py</code> was working. I made a new directory to reproduce the error to make sure there wasn't something weird in that directory.</p>  <p>Here are the three files: fileA.pyx, setup.py, and basic_test.py</p>  <pre><code>file1.pyx class FileA:     def __init__(self):         self.temp = {} </code></pre>  <p>setup.py:</p>  <pre><code>from distutils.core import setup from distutils.extension import Extension from Cython.Distutils import build_ext  ext_modules = [     Extension('fileA', ['fileA.pyx'],) ] setup(     name='test',     ext_modules=ext_modules,     cmdclass={'build_ext': build_ext}, ) </code></pre>  <p>basic_test.py:</p>  <pre><code>def test():         from fileA import FileA         FileA()         assert True </code></pre>  <p>Fresh directory. I run <code>python setup.py build_ext --inplace</code>. It compiles. I run <code>nosetests</code> the single test passes.</p>  <p>Then I do <code>touch __init__.py</code> and then run <code>nosetests</code> again and it fails with this error:</p>  <pre><code>ImportError: No module named 'fileA' </code></pre>  <p>Is this a bug or do I not understand how <strong>init</strong> affects imports?</p>  <p>Update: I found this <a href="http://python-notes.curiousefficiency.org/en/latest/python_concepts/import_traps.html" rel="nofollow">post</a> about import traps and read something that might explain how adding <strong>init</strong> breaks it. I still don't get exactly how it fits in though.</p>  <blockquote>   <p>This is an all new trap added in Python 3.3 as a consequence of fixing   the previous trap: if a subdirectory encountered on sys.path as part   of a package import contains an <strong>init</strong>.py file, then the Python   interpreter will create a single directory package containing only   modules from that directory, rather than finding all appropriately   named subdirectories as described in the previous section.</p> </blockquote>