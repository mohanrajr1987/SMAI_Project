<p>Good morning,  i try to came out of this problem but i don't;</p>  <p>I have a mapcontrol with some points on the map. When i click on one map point the app go to detail page.  All it works but when i press back button on detail page i have a exception.</p>  <pre><code> A first chance exception of type 'System.Collections.Generic.KeyNotFoundException' occurred in mscorlib.ni.dll </code></pre>  <p>If i open the same window for example from a listBox and than i press back button all works fine.</p>  <p>Here the code</p>  <p>Mappa.xaml</p>  <pre><code>&lt;Page   ......      &lt;Grid Background="{StaticResource BackGroundApp}" x:Name="LayoutRoot"&gt;          &lt;Grid.ChildrenTransitions&gt;             &lt;TransitionCollection&gt;                 &lt;EntranceThemeTransition/&gt;             &lt;/TransitionCollection&gt;         &lt;/Grid.ChildrenTransitions&gt;          &lt;Grid.RowDefinitions&gt;             &lt;RowDefinition Height="Auto"/&gt;             &lt;RowDefinition Height="*"/&gt;         &lt;/Grid.RowDefinitions&gt;          &lt;!-- Title Panel --&gt;         &lt;StackPanel Background="Transparent" x:Name="TitlePanel" Grid.Row="0" Margin="12,17,0,28"&gt;             &lt;Grid Width="Auto" Height="Auto"  Background="{StaticResource BackGroundAppTitle}"&gt;                 &lt;TextBlock Foreground="Black"  Text="Mappa" Margin="0,0"/&gt;             &lt;/Grid&gt;             &lt;TextBlock  x:Uid="txbMappa" Foreground="Black" Margin="0,-6.5,0,0" Style="{ThemeResource HeaderTextBlockStyle}" CharacterSpacing="{ThemeResource PivotHeaderItemCharacterSpacing}"/&gt;         &lt;/StackPanel&gt;          &lt;!--TODO: Content should be placed within the following grid--&gt;         &lt;Grid Grid.Row="1" x:Name="ContentRoot" Margin="0"&gt;              &lt;Maps:MapControl  MapServiceToken="6iGrTCDmgNYi-5KaBQoXCw"  ZoomLevel="20" x:Name="mappaGeositi"&gt;                 &lt;Maps:MapItemsControl x:Name="MapItems"  &gt;                     &lt;Maps:MapItemsControl.ItemTemplate&gt;                         &lt;DataTemplate&gt;                             &lt;StackPanel  Width="35"  Tapped="puntoMappaTapped" &gt;                                  &lt;Button HorizontalAlignment="Center" Style="{StaticResource bottoniStyleResource}"  x:Name="MapItemButton" Background="Transparent"&gt;                                      &lt;Image Width="35" HorizontalAlignment="Center"  Source="/Assets/Img/marker.png" Maps:MapControl.Location="{Binding Point}" Maps:MapControl.NormalizedAnchorPoint="{Binding AnchorPoint}" RequestedTheme="Light" Margin="0"&gt;                                         &lt;Image.Transitions&gt;                                             &lt;TransitionCollection&gt;                                                 &lt;EntranceThemeTransition/&gt;                                             &lt;/TransitionCollection&gt;                                         &lt;/Image.Transitions&gt;                                      &lt;/Image&gt;                             &lt;/Button&gt;                             &lt;/StackPanel&gt;                          &lt;/DataTemplate&gt;                     &lt;/Maps:MapItemsControl.ItemTemplate&gt;                 &lt;/Maps:MapItemsControl&gt;              &lt;/Maps:MapControl&gt;             &lt;ScrollViewer Visibility="Collapsed" x:Name="scrollLegenda"  Width="auto" VerticalAlignment="Top"&gt;                 &lt;Image   x:Name="imgDettaglio" Width="Auto" Source="Assets/Img/legenda_small.png" &gt;                 &lt;/Image&gt;             &lt;/ScrollViewer&gt;            ...         &lt;/Grid&gt;     &lt;/Grid&gt; &lt;/Page&gt; </code></pre>  <p>Mappa.cs</p>  <pre><code>namespace Geositi {      public class PoiWrapper     {         static PoiWrapper()         {             AnchorPoint = new Point(0.5, 1.0);         }          public PoiWrapper(double latitude, double longitude, string titolo, int idSito)         {             Point = new Geopoint(new BasicGeoposition() { Latitude =latitude, Longitude = longitude });             Titolo = titolo;             id_geosito = idSito;          }          public Geopoint Point { get; private set; }         public string Titolo { get; private set; }         public int id_geosito { get; private set; }          public static Point AnchorPoint { get; private set; }     }       public sealed partial class Mappa : Page     {         private NavigationHelper navigationHelper;         private ObservableDictionary defaultViewModel = new ObservableDictionary();         private StreamSocketListener server;         private ObservableCollection&lt;Siti&gt; collectionListaGeositi = new ObservableCollection&lt;Siti&gt;();         DatabaseHelperClass Db_Helper = new DatabaseHelperClass();         private HttpMapTileDataSource httpTileDataSource = new HttpMapTileDataSource();         private MapTileSource httpTileSource;          public ObservableCollection&lt;PoiWrapper&gt; PoiPins { get; private set; }         private Siti sitoCorrente = null;           public Mappa()         {             this.InitializeComponent();              this.navigationHelper = new NavigationHelper(this);             this.navigationHelper.LoadState += this.NavigationHelper_LoadState;             this.navigationHelper.SaveState += this.NavigationHelper_SaveState;              this.server = new StreamSocketListener();             this.server.ConnectionReceived += ConnectionReceivedCallback;             this.server.BindServiceNameAsync("33321");              // Attach a handler for the UriRequested event.             httpTileDataSource.UriRequested += HandleUriRequestAsync;             httpTileSource = new MapTileSource(httpTileDataSource);             mappaGeositi.TileSources.Add(httpTileSource);             Debug.WriteLine("STO APRENDO LA PAGINA");             }          public async Task AggiungiPuntoMappa()         {              PoiPins = new ObservableCollection&lt;PoiWrapper&gt;();             PoiPins.Add(new PoiWrapper(sitoCorrente.lat, sitoCorrente.lng, sitoCorrente.titolo, sitoCorrente.ID));             MapItems.ItemsSource = PoiPins;                // se Ã¨ presente il geosito vuol dire che sto aprendo la mappa dal dettaglio             mappaGeositi.Center =                     new Geopoint(new BasicGeoposition()                     {                         Latitude = sitoCorrente.lat,                         Longitude = sitoCorrente.lng                     });             mappaGeositi.ZoomLevel = 8;             mappaGeositi.LandmarksVisible = true;              // aggiungo un solo punto                 // aggiunta punti                 MapIcon sighting1 = new MapIcon();                 sighting1.ZIndex = -500;                 //sighting1.Image = RandomAccessStreamReference.CreateFromUri(new Uri("ms-appx:///Assets/Img/ico1.png"));                 sighting1.NormalizedAnchorPoint = new Point(0.5, 1.0);                  sighting1.Location = new Geopoint(new BasicGeoposition()                 {                     Latitude = sitoCorrente.lat,                     Longitude = sitoCorrente.lng                  });               //  sighting1.NormalizedAnchorPoint = new Point(0.5, 1.0);                 sighting1.Title = sitoCorrente.titolo;                // mappaGeositi.MapElements.Add(sighting1);            }         public async Task AggiungiPuntiMappa()         {              collectionListaGeositi = Db_Helper.getListaGeositi();             PoiPins = new ObservableCollection&lt;PoiWrapper&gt;();             foreach (var geosito in collectionListaGeositi)             {                 PoiPins.Add(new PoiWrapper(geosito.lat, geosito.lng, geosito.titolo, geosito.ID));               //  Debug.WriteLine(geosito.lng);              }              MapItems.ItemsSource = PoiPins;              mappaGeositi.Center =                  new Geopoint(new BasicGeoposition()                  {                      Latitude = 46.126723,                      Longitude = 13.214247                  });             mappaGeositi.ZoomLevel = 9;             mappaGeositi.LandmarksVisible = true;                // aggiunta punti             MapIcon sighting1 = new MapIcon();             // sighting1.Image = RandomAccessStreamReference.CreateFromUri(new Uri("ms-appx:///Assets/Img/info.png"));             sighting1.ZIndex = 20;              sighting1.Location = new Geopoint(new BasicGeoposition()             {                 Latitude = 45.33333,                 Longitude = 34.222              });             //sighting1.NormalizedAnchorPoint = new Point(0.5, 1.0);             sighting1.Title = "";            // mappaGeositi.MapElements.Add(sighting1);            }          private async void HandleUriRequestAsync(HttpMapTileDataSource sender,             MapTileUriRequestedEventArgs args)         {                  {                     // Get a deferral to do something asynchronously.                     // Omit this line if you don't have to do something asynchronously.                     var deferral = args.Request.GetDeferral();                      // Get the custom Uri.                     var uri = await GetCustomUriAsync(args.X, args.Y, args.ZoomLevel);                      // Specify the Uri in the Uri property of the MapTileUriRequest.                     args.Request.Uri = uri;                      // Notify the app that the custom Uri is ready.                     // Omit this line also if you don't have to do something asynchronously.                     deferral.Complete();                 }          }          // Create the custom Uri.         private async Task&lt;Uri&gt; GetCustomUriAsync(int x, int y, int zoomLevel)         {           return new Uri("http://127.0.0.1:33321/Assets/FVG/" + zoomLevel + "/" + x + "/" + y + ".png ",                  UriKind.Absolute);                   }           /// &lt;summary&gt;         /// Gets the &lt;see cref="NavigationHelper"/&gt; associated with this &lt;see cref="Page"/&gt;.         /// &lt;/summary&gt;         public NavigationHelper NavigationHelper         {             get { return this.navigationHelper; }         }          /// &lt;summary&gt;         /// Gets the view model for this &lt;see cref="Page"/&gt;.         /// This can be changed to a strongly typed view model.         /// &lt;/summary&gt;         public ObservableDictionary DefaultViewModel         {             get { return this.defaultViewModel; }         }           private void NavigationHelper_LoadState(object sender, LoadStateEventArgs e)         {          }           private void NavigationHelper_SaveState(object sender, SaveStateEventArgs e)         {         }            async void ConnectionReceivedCallback(StreamSocketListener sender,               StreamSocketListenerConnectionReceivedEventArgs args)         {             try             {                 DataReader reader = new DataReader(args.Socket.InputStream);                 reader.InputStreamOptions = InputStreamOptions.Partial;                 uint numStrBytes = await reader.LoadAsync(512);                 string request = reader.ReadString(numStrBytes);                  using (IOutputStream output = args.Socket.OutputStream)                 {                     string requestMethod = request.Split('\n')[0];                     string[] requestParts = requestMethod.Split(' ');                      if (requestParts[0] == "GET")                         try                         {                             await SendResponse(requestParts[1], output);                          }                         catch (Exception e)                         {                           //  Debug.WriteLine("Dio scampat");                         }                 }             }             catch (Exception e)             {               //  Debug.WriteLine("Datareader exception");             }         }          private async Task SendResponse(string path, IOutputStream os)         {             // Debug.WriteLine("Percorso: " + path.ToString());             path = path.Replace("/",@"\");             //Debug.WriteLine("Percorsoooo" +path);              // ora il percorso della cartella prendo tutti tranne l'ultimo              string strTemp2 = path.Replace(@"\", ",");             string[] split = strTemp2.Split(new char[] { ',' });             string nomeImmagine = split[split.Length - 1];              //prelevo il rooto path             string root =Windows.ApplicationModel.Package.Current.InstalledLocation.Path;              path = root + @"\" + split[1] + @"\" + split[2] + @"\" + split[3] + @"\" + split[4] + @"\";              //Debug.WriteLine("Percorsoooo2222" + path);              //  path = root + @"\Assets\FVG\10\547\";              using (Stream resp = os.AsStreamForWrite())             {                 bool esiste = await esiste2(path,nomeImmagine);                 if (!esiste)                 {                     byte[] headerArray = Encoding.UTF8.GetBytes(                         "HTTP/1.1 404 Not Found\r\n" +                         "Content-Length:0\r\n" +                         "Connection: close\r\n\r\n");                     await resp.WriteAsync(headerArray, 0, headerArray.Length);                  }                 else                 {                   //  StorageFile file = await Windows.ApplicationModel.Package.Current.InstalledLocation.GetFileAsync(@path);                    // StorageFile file = await StorageFile.GetFileFromApplicationUriAsync(new Uri(path, UriKind.Absolute));                        // Get the app's Assets folder.                      StorageFolder assetsFolder =                         await StorageFolder.GetFolderFromPathAsync(path);                      // Check whether an image with the specified scale exists.                       StorageFile file = await assetsFolder.GetFileAsync(nomeImmagine);                      Stream fs = await file.OpenStreamForReadAsync();                       string header = String.Format("HTTP/1.1 200 OK\r\n" +                                     "Content-Length: {0}\r\n" +                                     "Content-Type:  image/png\r\n" +                                     "Connection: close\r\n" +                                     "\r\n",                                     fs.Length);                     byte[] headerArray = Encoding.UTF8.GetBytes(header);                     await resp.WriteAsync(headerArray, 0, headerArray.Length);                     await fs.CopyToAsync(resp);                  }                 await resp.FlushAsync();             }          }          //va a vedere se un file Ã¨ presente nel percorso degli assets         //percorso string path = "Assets/Map/10/550/36ddpng";         public async Task&lt;bool&gt; EsisteFileAssets(String percorso)         {             bool esiste = false;             try             {                   /* var uri = new System.Uri(percorso);                 var file = await Windows.Storage.StorageFile.GetFileFromApplicationUriAsync(uri);                 * */                 StorageFile file = await Windows.ApplicationModel.Package.Current.InstalledLocation.GetFileAsync(@percorso);                  //Debug.WriteLine("Il file esisteeeeeeee ");                 esiste = true;             }             catch (System.NullReferenceException)             {                  //Debug.WriteLine("Il file non esiste "+percorso);                 esiste  = false;             }             return esiste;         }          public async Task&lt;bool&gt; esiste2(string path, string nomeImmagine)         {            /* string root =             Windows.ApplicationModel.Package.Current.InstalledLocation.Path;             * */            // string path = root + @"\Assets\FVG\10\547\";              // Get the app's Assets folder.              StorageFolder assetsFolder =                 await StorageFolder.GetFolderFromPathAsync(path);              // Check whether an image with the specified scale exists.              //string imageName = "361.png";             if (await assetsFolder.GetFileAsync(nomeImmagine) != null)             {                 Debug.WriteLine(nomeImmagine + " exists.");                 return true;             }             else             { // Return value of TryGetItemAsync is null.                  Debug.WriteLine(nomeImmagine + " does not exist.");                 return false;             }          }          //  questa funzione va a cercaare nello storage        /*  public async task&lt;bool&gt; isfilepresent(string filename)         {             debug.writeline("path" + applicationdata.current.localfolder.path);             return system.io.file.exists(string.format(@"{0}\{1}", applicationdata.current.localfolder.path, filename));         }         /*  protected override void OnNavigatedTo(NavigationEventArgs e)         {             this.navigationHelper.OnNavigatedTo(e);         }          protected override void OnNavigatedFrom(NavigationEventArgs e)         {             this.navigationHelper.OnNavigatedFrom(e);         }         */          //intercettazione del pulsante back premuto         protected override async void OnNavigatedTo(NavigationEventArgs e)         {             //This should be written here rather than the contructor            // HardwareButtons.BackPressed += HardwareButtons_BackPressed;             this.navigationHelper.OnNavigatedTo(e);             Debug.WriteLine("sono arrivato qui");              //if (this._contentLoaded != null) return;                sitoCorrente = (Siti)e.Parameter;              if (sitoCorrente == null)             {                 await AggiungiPuntiMappa(); // puo essere anche null se proviene dal dettaglio              }             else {                 await AggiungiPuntoMappa(); // puo essere anche null se proviene dal dettaglio              }           }         /*  void HardwareButtons_BackPressed(object sender, BackPressedEventArgs e)         {             //This is where all your 'override backkey' code goes             //You can put message dialog and/or cancel the back key using e.Handled = true;            // MessageDialog dialogbox = new MessageDialog("Your message content", "title");             //await dialogbox.ShowAsync();              Debug.WriteLine("STO CHIUDENDO LA FINESTRA");           }*/           protected override void OnNavigatingFrom(NavigatingCancelEventArgs e)         {             //removef the handler before you leave!            // HardwareButtons.BackPressed -= HardwareButtons_BackPressed;             httpTileDataSource.UriRequested -= HandleUriRequestAsync;         }         #endregion          private void btnApriLegenda_Click(object sender, RoutedEventArgs e)         {             if (scrollLegenda.Visibility == Visibility.Collapsed)            {                 scrollLegenda.Visibility = Visibility.Visible;            }            else {                  scrollLegenda.Visibility = Visibility.Collapsed;             }            }          private void puntoMappaTapped(object sender, TappedRoutedEventArgs e)         {             // apro il dettaglio se e solo se non sono gia sul dettaglio             if (sitoCorrente == null) {                 Debug.WriteLine("hai tappato");                 var stackPanel = sender as StackPanel;                 var item = stackPanel.DataContext as PoiWrapper;                 if (item != null)                 {                     //MessageDialog dialog = new MessageDialog(item.Titolo);                     int id_sito = 0;                      Frame.Navigate(typeof(DettaglioGeosito), id_sito = item.id_geosito);                 }             }          }         } } </code></pre>  <p>DettaglioGeosito.cs</p>  <pre><code>// The Basic Page item template is documented at http://go.microsoft.com/fwlink/?LinkID=390556  namespace Geositi {     /// &lt;summary&gt;     /// An empty page that can be used on its own or navigated to within a Frame.     /// &lt;/summary&gt;     public sealed partial class DettaglioGeosito : Page     {         private NavigationHelper navigationHelper;         private ObservableDictionary defaultViewModel = new ObservableDictionary();          int id_sito = 0;         DatabaseHelperClass Db_Helper = new DatabaseHelperClass();         Siti sitoCorrente = new Siti();          public DettaglioGeosito()         {             this.InitializeComponent();              this.navigationHelper = new NavigationHelper(this);             this.navigationHelper.LoadState += this.NavigationHelper_LoadState;             this.navigationHelper.SaveState += this.NavigationHelper_SaveState;         }           /// &lt;summary&gt;         /// Gets the &lt;see cref="NavigationHelper"/&gt; associated with this &lt;see cref="Page"/&gt;.         /// &lt;/summary&gt;         public NavigationHelper NavigationHelper         {             get { return this.navigationHelper; }         }           public ObservableDictionary DefaultViewModel         {             get { return this.defaultViewModel; }         }           private void NavigationHelper_LoadState(object sender, LoadStateEventArgs e)         {         }          /// &lt;summary&gt;         /// Preserves state associated with this page in case the application is suspended or the         /// page is discarded from the navigation cache.  Values must conform to the serialization         /// requirements of &lt;see cref="SuspensionManager.SessionState"/&gt;.         /// &lt;/summary&gt;         /// &lt;param name="sender"&gt;The source of the event; typically &lt;see cref="NavigationHelper"/&gt;&lt;/param&gt;         /// &lt;param name="e"&gt;Event data that provides an empty dictionary to be populated with         /// serializable state.&lt;/param&gt;         private void NavigationHelper_SaveState(object sender, SaveStateEventArgs e)         {         }          #region NavigationHelper registration            protected override void OnNavigatedTo(NavigationEventArgs e)         {            // HardwareButtons.BackPressed += HardwareButtons_BackPressed;              id_sito = int.Parse(e.Parameter.ToString());             sitoCorrente = Db_Helper.getSito(id_sito);//Read selected DB contact             DataContext = sitoCorrente;         }          protected override void OnNavigatingFrom(NavigatingCancelEventArgs e)         {          }         #endregion          private async void btnApriPdf_Click(object sender, RoutedEventArgs e)         {             Siti geosito = (Siti)DataContext;             string nomeFile = geosito.pdf.TrimEnd('\n').Trim(); // elimino eventuali a capo dalla stringa              StorageFolder local = Windows.Storage.ApplicationData.Current.LocalFolder; //controllo sei l file esiste gia in caso conbtrario lo scarico             bool esiste = await esisteFileInStorage(nomeFile);             if(esiste == true) {                            StorageFile pdfFile = await local.GetFileAsync(nomeFile);                           Debug.WriteLine("Il pdf esiste gia");                 await Windows.System.Launcher.LaunchFileAsync(pdfFile);             }else{                 //prima di scaricare controollo se ce la connessione a internet                 if (NetworkInterface.GetIsNetworkAvailable() == true)                 {                     ToggleProgressBar(true, "Download in corso...");                     Uri urlPdf;                     Uri.TryCreate("http://app.divulgando.eu/geositifvg/pdf/" + nomeFile, UriKind.Absolute, out urlPdf);                     StorageFile destinationFile = await local.CreateFileAsync(nomeFile, CreationCollisionOption.ReplaceExisting);                     BackgroundDownloader download = new BackgroundDownloader();                     DownloadOperation downloadOperation = download.CreateDownload(urlPdf, destinationFile);                      //questo mi serve per intercettare lo stato di avanzamento o di termine                     var progress = new Progress&lt;DownloadOperation&gt;(ProgressCallback); // for showing progress                     await downloadOperation.StartAsync().AsTask(progress); //inizio il download                     await Windows.System.Launcher.LaunchFileAsync(destinationFile);                 }                 else                 {                     await new MessageDialog("Verifica la connessione a internet").ShowAsync();                 }               }               }          private void ProgressCallback(DownloadOperation download)         {             if (download.Progress.BytesReceived == download.Progress.TotalBytesToReceive)             {                 ToggleProgressBar(false);             }          }          //mostra o nascone la progress bar in alto          private async void ToggleProgressBar(bool toggle, string message = "")         {             StatusBarProgressIndicator progressbar = StatusBar.GetForCurrentView().ProgressIndicator;             if (toggle)             {                 progressbar.Text = message;                 await progressbar.ShowAsync();             }             else             {                 await progressbar.HideAsync();             }          }         //funzione che mi dice se un file Ã¨ presente nello storage locale          public async Task&lt;bool&gt; esisteFileInStorage(string nomeFile)         {              try             {                 StorageFolder local = Windows.Storage.ApplicationData.Current.LocalFolder;                 await local.GetFileAsync(nomeFile);                             return true;                           }             catch (System.IO.FileNotFoundException)             { // Return value of TryGetItemAsync is null.                  Debug.WriteLine(nomeFile + " does not exist.");                 return false;             }          }          private async void btnApriFoto_Click(object sender, RoutedEventArgs e)         {              if (NetworkInterface.GetIsNetworkAvailable() == true ){                              Frame.Navigate(typeof(ImmagineGeosito), sitoCorrente);             }else{                         await new MessageDialog("Verifica la connessione a internet").ShowAsync();             }          }          private async void btnApriMappPunto_Click(object sender, RoutedEventArgs e)         {                 if (NetworkInterface.GetIsNetworkAvailable() == true ){                         Frame.Navigate(typeof(Mappa), sitoCorrente);             }else{                         await new MessageDialog("Verifica la connessione a internet").ShowAsync();             }          }     } } </code></pre>  <p>If someone can help me because im going crazy.</p>  <p>Thank you</p>