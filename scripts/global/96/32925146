<p>I want to enable CORS in my Azure Blob Storage account. I am trying to follow this sample <a href="https://code.msdn.microsoft.com/Windows-Azure-Storage-CORS-45e5ce76" rel="nofollow">https://code.msdn.microsoft.com/Windows-Azure-Storage-CORS-45e5ce76</a></p>  <p>The server throws an System.Net.WebException (400) invalid request.</p>  <p>This is my code:</p>  <p>Global.asax.cs</p>  <pre><code>    protected void Application_Start() {     Database.SetInitializer&lt;dynazzy.Models.DAL&gt;(null);     AreaRegistration.RegisterAllAreas();      WebApiConfig.Register(GlobalConfiguration.Configuration);     FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);     RouteConfig.RegisterRoutes(RouteTable.Routes);     BundleConfig.RegisterBundles(BundleTable.Bundles);     AzureCommon.InitializeAccountPropeties(); } </code></pre>  <p>AzureCommon.cs</p>  <pre><code>using System.Collections.Generic; using Microsoft.WindowsAzure.Storage; using Microsoft.WindowsAzure.Storage.Blob; using Microsoft.WindowsAzure.Storage.Shared.Protocol; using Microsoft.WindowsAzure.Storage.Table; using Microsoft.WindowsAzure;  namespace dynazzy {     /// &lt;summary&gt;     /// This class contains the Windows Azure Storage initialization and common functions.     /// &lt;/summary&gt;     public class AzureCommon     {         private static CloudStorageAccount StorageAccount = CloudStorageAccount.DevelopmentStorageAccount;          public static CloudBlobClient BlobClient         {             get;             private set;         }          public static CloudTableClient TableClient         {             get;             private set;         }          public static CloudBlobContainer ImagesContainer         {             get;             private set;         }          public const string ImageContainerName = "someimagescontainer";          /// &lt;summary&gt;         /// Initialize Windows Azure Storage accounts and CORS settings.         /// &lt;/summary&gt;         public static void InitializeAccountPropeties()         {             BlobClient = StorageAccount.CreateCloudBlobClient();             TableClient = StorageAccount.CreateCloudTableClient();              InitializeCors(BlobClient, TableClient);              ImagesContainer = BlobClient.GetContainerReference(AzureCommon.ImageContainerName);             ImagesContainer.CreateIfNotExists(BlobContainerPublicAccessType.Container);         }          /// &lt;summary&gt;         /// Initialize Windows Azure Storage CORS settings.         /// &lt;/summary&gt;         /// &lt;param name="blobClient"&gt;Windows Azure storage blob client&lt;/param&gt;         /// &lt;param name="tableClient"&gt;Windows Azure storage table client&lt;/param&gt;         private static void InitializeCors(CloudBlobClient blobClient, CloudTableClient tableClient)         {             // CORS should be enabled once at service startup             ServiceProperties blobServiceProperties = new ServiceProperties();             ServiceProperties tableServiceProperties = new ServiceProperties();              // Nullifying un-needed properties so that we don't             // override the existing ones             blobServiceProperties.HourMetrics = null;             tableServiceProperties.HourMetrics = null;             blobServiceProperties.MinuteMetrics = null;             tableServiceProperties.MinuteMetrics = null;             blobServiceProperties.Logging = null;             tableServiceProperties.Logging = null;              // Enable and Configure CORS             ConfigureCors(blobServiceProperties);             ConfigureCors(tableServiceProperties);              // Commit the CORS changes into the Service Properties             blobClient.SetServiceProperties(blobServiceProperties);             tableClient.SetServiceProperties(tableServiceProperties);         }          /// &lt;summary&gt;         /// Adds CORS rule to the service properties.         /// &lt;/summary&gt;         /// &lt;param name="serviceProperties"&gt;ServiceProperties&lt;/param&gt;         private static void ConfigureCors(ServiceProperties serviceProperties)         {             serviceProperties.Cors = new CorsProperties();             serviceProperties.Cors.CorsRules.Add(new CorsRule()             {                 AllowedHeaders = new List&lt;string&gt;() { "*" },                 AllowedMethods = CorsHttpMethods.Put | CorsHttpMethods.Get | CorsHttpMethods.Head | CorsHttpMethods.Post,                 AllowedOrigins = new List&lt;string&gt;() { "*" },                 ExposedHeaders = new List&lt;string&gt;() { "*" },                 MaxAgeInSeconds = 1800 // 30 minutes             });         }     } } </code></pre>  <p>WebApiConfig.cs</p>  <pre><code>public static void Register(HttpConfiguration config) {      config.Routes.MapHttpRoute(         name: "DefaultApi",         routeTemplate: "api/{controller}/{id}",         defaults: new { id = RouteParameter.Optional }     );  } </code></pre>