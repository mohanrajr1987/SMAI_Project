<p><strong>Background</strong></p>  <p>I'm working with an API and am trying to port some code in an ASP.NET MVC project which they provided into a Dotnetnuke environment.  Each of my controllers inherits a base controller which in turn inherits Controller. As far as I can tell the purpose of  this base class is to cache a class (WebApiHelper) containing all API calls in a session variable meaning its created once and  pulled from memory on subsequent requests.  </p>  <p>Here is the code for the base controller</p>  <pre><code>public class ServiceController : DnnApiController {    private WebApiHelper application;     protected WebApiHelper Application    {      get { return application; }    }     protected override void Initialize(RequestContext requestContext)    {       Response.Cache.SetNoServerCaching();       Response.Cache.SetNoStore();        if(System.Web.HttpContext.Current.Items.Contains("_Application"))       {          application = (WebApiHelper)System.Web.HttpContext.Current.Items["_Application"];       }        else       {         application = new WebApiHelper();         System.Web.HttpContext.Current.Items.Add("_Application, application);       }    } } </code></pre>  <p>I know this works as I have tested it in an Asp.net MVC application. </p>  <p><strong>The Problem</strong></p>  <p>As dotnetnuke is built in Asp.net webforms i've had to change my approach. I've had to setup a dotnetnuke web service to pull data from this WebApiHelper file  so passwords, keys etc are obscured from the public in the javascript however the file structure is much the same. Each dotnetnuke web service controller inherits a base controller (ServiceController). This ServiceController is  where i've tried to replicate the code from above however I was unable to override an initializer with a RequestContext parameter so I resorted to using a simple constructor. </p>  <pre><code>public class ServiceController : DnnApiController {    public WebApiHelper application;     public WebApiHelper Application    {       get { return application; }    }     public ServiceController()    {       if (HttpContext.Current.Session["_application"] == null)       {         application = new WebApiHelper();         HttpContext.Current.Session["_application"] = application;       }        else       {         application = (WebApiHelper)HttpContext.Current.Session["_application"];         application.Balls = "new instantiation";       }    } } </code></pre>  <p>However this gives me the following error.</p>  <p><a href="http://i.stack.imgur.com/wdgdD.png" rel="nofollow"><img src="http://i.stack.imgur.com/wdgdD.png" alt="enter image description here"></a></p>  <p>After debugging the code I've found that this error is generated where i'm trying to access the session. Is there any reason why the session won't work. Perhap because i'm not overriding as in the  the first code snippet?.</p>  <p>Am I going to all this trouble for no reason. Would it be best to just create a new instance of WebApiHelper on each web request?</p>