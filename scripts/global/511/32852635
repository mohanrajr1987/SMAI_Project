<p>I've a table with a column that needs to be constantly recomputed and I want this table to be scallable. Users must be able to write on it as well.</p>  <p>It's difficult to test this type of things without having a server and concurrent users, at least I don't know how. So is one of those two options viable ?</p>  <pre><code>@ApplicationScoped public class Abean {    @EJB    private MyService myService;    @Asynchronous    public void computeTheData(){       long i = 1;       long numberOfRows = myService.getCountRows(); // gives the number of row in the table       while(i&lt;numberOfRows){         myService.updateMyRow(i);       }       computeTheData(); // recursion so it never stops, I'm wondering if this wouldn't spawn more threads and if it would be an issue.    } }  public class MyService implements MyServiceInterface{     ...     public void updateMyRows(int row){        Query query = em.createQuery("SELECT m FROM MyEntity WHERE m.id=:id");        Query.setParameter("id", row);        List&lt;MyEntity&gt; myEntities = (MyEntity) query.getResultList();        myEntity.computeData();     } } </code></pre>  <p>VS</p>  <pre><code>@ApplicationScoped public class Abean {    @EJB    private MyService myService;    @Asynchronous    public void computeTheData(){       myService.updateAllRows();    } }  public class MyService implements MyServiceInterface{         ...     public void updateAllRows(int page){        Query query = em.createQuery("SELECT m FROM MyEntity");        List&lt;MyEntity&gt; myEntities = (MyEntity) query.getResultList();        myEntity.computeData();     } } </code></pre>  <p>Is any of this viable ? I'm using mysql and the engine for tables is innoDB.</p>