<p>I have a class where I keep references to a set of <code>NSManagedObject</code> in an array. Such managed objects belong to which I call my <code>mainContext</code>, that is associated to main thread.</p>  <p>To update such objects, I call several web services, and I create new managed objects with the information I get from them. I insert those new objects in a context I call <code>privateContext</code> that is associated to a private queue. This context has its own separated Core Data stack, it is not child of the <code>mainContext</code>. I do this to avoid blocking the main thread while performing updates.</p>  <p>In the same class where I have the array of managed objects in the <code>mainContext</code> (<code>self.entities</code>), I have another array to keep the references of the managed objects in the <code>privateContext</code> (<code>self.tempEntities</code>). My intention is to compare the managed objects in both arrays and make the changes I could need to make to the objects in <code>mainContext</code>:</p>  <pre><code>- (void)manageEntitiesUpdate {    if ((self.tempEntities != nil) &amp;&amp; (self.entities != nil)) {        if (self.tempEntities.count &gt; 0) {             NSMutableArray *toDelete = [[NSMutableArray alloc] init];            NSMutableArray *toModify = [[NSMutableArray alloc] init];             for (MyEntity *tempEntity in self.tempEntities) {                 if (![tempEntity.isValid boolValue]) {                    [toDelete addObject:tempEntity.idEntity];                }                 for (MyEntity *entity in self.entities) {                    if ([tempEntity.idEntity integerValue] == [entity.idEntity integerValue]) {                        [toModify addObject:tempEntity.idEntity];                        break;                    }                }            }             if (toDelete.count &gt; 0) {                // Get main context                NSManagedObjectContext *mainContext = [CoreDataStack getMainContext];                 if (mainContext != nil) {                    for (NSNumber *idEntity in toDelete) {                         // Delete from main context                        for (MyEntity *entity in self.entities) {                            if ([idEntity integerValue] == [entity.idEntity integerValue]) {                                [mainContext deleteObject:entity];                                break;                             }                        }                         // Delete from private context                        for (MyEntity *entity in self.tempEntities) {                            if ([idEntity integerValue] == [entity.idEntity integerValue]) {                                [self.privateContext deleteObject:entity];                                break;                             }                        }                    }                }            }             if (toModify.count &gt; 0) {                // Get main context                NSManagedObjectContext *mainContext = [CoreDataStack getMainContext];                 if (mainContext != nil) {                    for (NSNumber *idEntity in toModify) {                      // Delete from main context                     for (MyEntity *entity in self.entities) {                         if ([idEntity integerValue] == [entity.idEntity integerValue]) {                                [mainContext deleteObject:entity];                                break;                            }                        }                    }                }            }             [self saveContext:self.privateContext];            [self clearContext:self.privateContext];        }    } } </code></pre>  <p>After this method, I refetch data in <code>mainContext</code>. I run the app and this seemed to work but... is it actually "legal" what I'm doing? Could I get errors and crashes other times I run the app?</p>  <p>If that is the case, that I'm doing wrong, how could I manage this scenario? The services I call for updates are asynchronous, and I need to wait for their responses and then create the new objects with the information I get. Then compare with the objects I already had. I can't perform updates directly on objects I already have.</p>  <p>Thanks</p>