<pre><code>import java.util.concurrent.Callable; import java.util.concurrent.ExecutionException; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.Future; import java.util.concurrent.TimeUnit; import java.util.concurrent.TimeoutException;  public class ExecutorServiceTest {      public static void main(String args[]) {         new ExecutorServiceTest();     }      public ExecutorServiceTest() {         while (true) {             action();         }     }      public String action() {         String string = "";         ExecutorService executor = Executors.newSingleThreadExecutor();         Future&lt;String&gt; future = executor.submit(new Callable() {             @Override             public String call() {                 return randomString();             }         });         try {             string = future.get(1, TimeUnit.MILLISECONDS);         } catch (InterruptedException | ExecutionException | TimeoutException ex) {          }         future.cancel(true);         executor.shutdownNow();         return string;     }      public String randomString() {         return "asdhkashdkjshakdasdsahdka";     }  } </code></pre>  <p>If you open up a task manager window and then run this class, you will notice that Java instantly uses a ton of memory. I have searched and debugged the class thoroughly but cannot find the memory leak. </p>  <p>What is causing <code>future.get(1, TimeUnit.MILLISECONDS);</code> to use up all the system memory and then crash?</p>