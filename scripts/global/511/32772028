<p>So I have a single instance of a shared class which performs an operation similar to the reader/writer problem except more relaxed, and it designed to fix the starvation-issue by implementing a queue. There are two identical sets of methods, one for male and one for females. The idea being that any number of males can use the bathroom if there are no females, and similarly any number of females can use the bathroom if there are no males.</p>  <p>So given that this is a multithreaded program I'm wondering if the parameter <code>Node male</code> will be unique for each thread? While trying to acquire the lock we first check if we are the head of the queue and that there are no females currently using the bathroom, if this is true than we may enter the critical section, otherwise we wait.</p>  <p>I'm wondering if once the thread is re-awakened after the <code>Monitor.Wait</code> statement will the <code>Node</code> instance be the expected object, or could it possibly reference one of the threads that invoked the method and is currently stuck at <code>Monitor.Wait</code>? I don't want a thread seeing that the condition <code>result == male</code> be true if the currently executing thread is <code>Thread 1</code> while the thread referenced by <code>male</code> is in fact <code>Thread 2</code>.</p>  <pre><code>public void EnterMale(Node male)     {         Monitor.Enter(_bathroomLock);         _bathroomQueue.Enqueue(male);         Node result;         _bathroomQueue.TryPeek(out result);         while (result != male || _numOfFemales &gt; 0)         {             Monitor.Wait(_bathroomLock);             _bathroomQueue.TryPeek(out result);         }         _numOfMales++;         //Remove self from queue         _bathroomQueue.TryDequeue(out result);         //Wake up next person in line         //need to own lock for this or exception gets thrown         Monitor.PulseAll(_bathroomLock);         //Enter critical section         Monitor.Exit(_bathroomLock);      }  public void LeaveMale()     {         _numOfMales--;         //Wake up next person in line         //need to own lock for this or exception gets thrown         lock (_bathroomLock)             Monitor.PulseAll(_bathroomLock);     } </code></pre>