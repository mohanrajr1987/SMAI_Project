<p>I handle two complete <code>Core Data</code> stacks in my app:</p>  <ul> <li>The one that is provided by default in <code>AppDelegate</code>.</li> <li>A second stack I fully create in order to perform <code>NSManagedObject</code> updates in a private queue, to avoid blocking the UI.</li> </ul>  <p>I have a class to create the second "auxiliary" Core Data stack, and I do this way:</p>  <pre><code>class CoreDataStack: NSObject {     class func getPrivateContext() -&gt; NSManagedObjectContext {         let bundle = NSBundle.mainBundle()        let modelURL = bundle.URLForResource("MyApp", withExtension: "momd")        let model = NSManagedObjectModel(contentsOfURL: modelURL!)!         let psc = NSPersistentStoreCoordinator(managedObjectModel: model)         let privateContext = NSManagedObjectContext(concurrencyType: NSManagedObjectContextConcurrencyType.PrivateQueueConcurrencyType)        privateContext.persistentStoreCoordinator = psc         let documentsURL = CoreDataStack.applicationDocumentsDirectory()        let storeURL = documentsURL.URLByAppendingPathComponent("MyApp.sqlite")         let options = [NSMigratePersistentStoresAutomaticallyOption: true]         var error: NSError? = nil        let store: NSPersistentStore?        do {            store = try psc.addPersistentStoreWithType(NSSQLiteStoreType, configuration: nil, URL: storeURL, options: options)        } catch let error1 as NSError {            error = error1            store = nil        }         if store == nil {            print("Error adding persistent store: \(error)")            abort()        }         return privateContext    }     class func applicationDocumentsDirectory() -&gt; NSURL {        let fileManager = NSFileManager.defaultManager()        let urls = fileManager.URLsForDirectory(.DocumentDirectory, inDomains: .UserDomainMask)         return urls[0]    }  } </code></pre>  <p>I need to firstly confirm/clarify some points:</p>  <p>A) Is it legal/correct to create a full Core Data stack to use a context in a private queue the way I'm doing?</p>  <p>B) Would creating even a new <code>NSManagedObjectModel</code> from the same resource and same <code>.sqlite</code> file than the one used in the <code>AppDelegate</code> default Core Data stack cause problems?</p>  <p>About managing both contexts I have (the default in <code>AppDelegate</code>, let's call it <code>mainContext</code>, and the one I create in a private queue, let's call it <code>privateContext</code>):</p>  <ul> <li>The <code>mainContext</code> is intended to show the <code>NSManagedObject</code> information throughout the app.</li> <li>The <code>privateContext</code> is intended to be used to call web services to get updated data, create the new <code>NSManagedObject</code> with the received information, and compare this new objects with the ones the app already have.</li> </ul>  <p>My questions regarding this are:</p>  <ol> <li>Should the <code>privateContext</code> be always used by calling <code>performBlock</code> or <code>performBlockAndWait</code>? Does that include all related operations, such s reading/inserting objects to the <code>privateContext</code>, and clearing/saving it?</li> <li>The <code>mainContext</code> is supposed to be associated to the main queue/thread, right? So then all its related operations should be performed in main thread...</li> <li>Having into account that <code>privateContext</code> has its own full Core Data stack... if I save its objects, would they be stored at the same <code>.sqlite</code> file than the ones when saving the <code>mainContext</code>? Or would such file be some way "duplicated"?</li> <li>If <code>privateContext</code> should save data from its private queue, and <code>mainContext</code> should be used in main thread, would it cause any problem to fetch from the <code>mainContext</code> the data that was saved from the <code>privateContext</code>?</li> </ol>  <p>I need help to understand and correctly manage <code>Core Data</code> concurrency in my app, I'm making a mess with all this persistence staff and I'm occasionally finding errors in operations that seemed to work... thanks so much in advance.</p>