<p>I have two Threads, <code>ThreadA</code> (Main) with the methods <code>j()</code> and <code>k(){...j()...}</code> and a second Thread, <code>ThreadB</code>. ThreadA randomly calls method <code>k()</code>, which, among others, calls method <code>j()</code>. <code>ThreadB</code> randomly calls method <code>j()</code>.</p>  <p>Now method <code>k()</code> and <code>j()</code> can not be executed at the same time as they share variables.</p>  <p>How can I make sure that <code>ThreadB</code> is only able to call method <code>j()</code> if <code>ThreadA</code> is not currently executing method <code>k()</code>? And also that <code>ThreadB</code> will execute <code>j()</code> after <code>ThreadA</code> finished executing <code>k()</code>.</p>  <p>I read about the synchronized keyword but it seems that it can only cover one method. (e.g. ThreadX and ThreadY both access method <code>m()</code>).</p>