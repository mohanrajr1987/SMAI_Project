<p><code>mpm_event</code> is like <code>mpm_worker</code> except that <code>mpm_event</code> manages all (non-SSL) KeepAlive connections with a separate, dedicated thread rather than having each thread manage each individual connection.  By giving and then keeping a dedicated thread for each KeepAlive connection, <code>mpm_worker</code> leaves that thread and its resources bound to that connection regardless of whether or not a request is being processed. <code>mpm_event</code> on the other hand, can lower system resource use in high concurrency environments by allowing the thread and its resources to be recycled back to the system once requests are complete.</p>  <p>It seems to me that in high concurrency, non-SSL environments where KeepAlive has long timeouts, <code>mpm_event</code> has the potential to make for a system that can handle a higher workload with equivalent resources than a system with the same resorces using <code>mpm_worker</code>. <strong><em>More importantly, it seems to me that in terms of resource use and features, <code>mpm_event</code> is at least as good as <code>mpm_worker</code>, if not better, in all circumstances.</em></strong></p>  <p>Despite my understanding that <code>mpm_event</code> is always at least as good and possibly better, my favorite Linux distributions default to using <code>mpm_worker</code> when installing Apache 2.4 from the repositories. This makes me wonder if my thinking is incomplete and if there is some technical reason I am missing to use <code>mpm_worker</code> rather than <code>mpm_event</code> in Apache 2.4.</p>  <p><strong>My question therefore is am I correct in saying <code>mpm_worker</code> is at least as good as <code>mpm_event</code>, if not better, in all circumstances, and (2) if not, what technical benefits are there to using <code>mpm_worker</code> in Apache 2.4?</strong></p>