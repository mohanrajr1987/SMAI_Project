<p>I've enabled <code>com.apple.CoreData.ConcurrencyDebug 1</code> to check <code>Core Data</code> concurrency errors. I have the following code snippet in a <code>Swift</code> class:</p>  <pre><code>lazy var context: NSManagedObjectContext! = {     var appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate     return appDelegate.managedObjectContext! }()  func getAllEntitiesToRootContext() -&gt; [MyEntity]? {     let fetchRequest = NSFetchRequest(entityName:"MyEntity")      do {         let fetchedResults = try context.executeFetchRequest(fetchRequest) as! [MyEntity]          if fetchedResults.count &gt; 0 {             return fetchedResults         } else {             return nil         }     } catch let error as NSError {         print("could not fetch \(error), \(error.userInfo)")         return nil     } } </code></pre>  <p>If I've correctly understood, the context I get from <code>AppDelegate</code> is associated to main thread, right?</p>  <p>But then, from another <code>Objective-C</code> class I have, I do:</p>  <pre><code>self.myEntitiesArray = [mySwiftClass getAllEntitiesToRootContext]; </code></pre>  <p>and I get this error log:</p>  <blockquote>   <p>CoreData: error: The current thread is not the recognized owner of this NSManagedObjectContext(0x1a25f8a0).  Illegal access during executeFetchRequest:error:</p> </blockquote>  <p>I don't understand why... I'm supposed to have such context associated to main thread, and I'm calling <code>getAllEntitiesToRootContext</code> from main thread...</p>  <p>Please I need help. Thanks in advance</p>  <p><strong>EDIT:</strong> These are the methods related to <code>Core Data</code> in <code>AppDelegate</code>:</p>  <pre><code>- (NSManagedObjectContext *)managedObjectContext {    // Returns the managed object context for the application (which is already bound to the persistent store coordinator for the application.)    if (_managedObjectContext != nil) {        return _managedObjectContext;    }     NSPersistentStoreCoordinator *coordinator = [self persistentStoreCoordinator];    if (!coordinator) {        return nil;    }    _managedObjectContext = [[NSManagedObjectContext alloc] init];    [_managedObjectContext setPersistentStoreCoordinator:coordinator];    return _managedObjectContext; }  - (NSPersistentStoreCoordinator *)persistentStoreCoordinator {    // The persistent store coordinator for the application. This implementation creates and return a coordinator, having added the store for the application to it.    if (_persistentStoreCoordinator != nil) {        return _persistentStoreCoordinator;    }     // Create the coordinator and store     _persistentStoreCoordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:[self managedObjectModel]];    NSURL *storeURL = [[self applicationDocumentsDirectory] URLByAppendingPathComponent:@"MyApp.sqlite"];    NSError *error = nil;    NSString *failureReason = @"There was an error creating or loading the application's saved data.";    if (![_persistentStoreCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:storeURL options:nil error:&amp;error]) {        // Report any error we got.        NSMutableDictionary *dict = [NSMutableDictionary dictionary];        dict[NSLocalizedDescriptionKey] = @"Failed to initialize the application's saved data";        dict[NSLocalizedFailureReasonErrorKey] = failureReason;        dict[NSUnderlyingErrorKey] = error;        error = [NSError errorWithDomain:@"YOUR_ERROR_DOMAIN" code:9999 userInfo:dict];        // Replace this with code to handle the error appropriately.        // abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.        NSLog(@"Unresolved error %@, %@", error, [error userInfo]);        abort();    }     return _persistentStoreCoordinator; }  - (NSManagedObjectModel *)managedObjectModel {    // The managed object model for the application. It is a fatal error for the application not to be able to find and load its model.    if (_managedObjectModel != nil) {       return _managedObjectModel;    }    NSURL *modelURL = [[NSBundle mainBundle] URLForResource:@"MyApp" withExtension:@"momd"];   _managedObjectModel = [[NSManagedObjectModel alloc] initWithContentsOfURL:modelURL];  return _managedObjectModel; } </code></pre>  <p><strong>EDIT 2:</strong> I'm using <code>Xcode 7</code> and testing in <code>iOS 9</code> device.</p>  <p><strong>EDIT 3:</strong> If I disable <code>com.apple.CoreData.ConcurrencyDebug 1</code>, I get objects from <code>getAllEntitiesToRootContext()</code>... I don't really understand anything, why is this happening?</p>  <p><strong>EDIT 4:</strong> I've made some tests. If I do this from an <code>Objective-C</code> class:</p>  <pre><code>- (void)getEntities {    AppDelegate *appDelegate = [[UIApplication sharedApplication] delegate];    NSManagedObjectContext *mainContext = appDelegate.managedObjectContext;     NSFetchRequest *fetchRequest = [[NSFetchRequest alloc] initWithEntityName:@"MyEntity"];    NSArray *entities = [mainContext executeFetchRequest:fetchRequest error:nil];     for (NSManagedObject *item in entities) {        NSLog(@"Name: %@", ((MyEntity *)item).name);    } } </code></pre>  <p>I sometimes get no error when calling <code>executeFetchRequest</code> and the name of the entities is shown in logs console. Other times I also get the Core Data error similar that the one I posted above and I also get when doing as I was doing:</p>  <pre><code>- (NSArray *)getEntities {    MyEntityDao *myEntityDao = [[MyEntityDao alloc] init];    self.myEntities = [[myEntityDao getAllEntitiesToRootContext] mutableCopy];     return [[NSArray arrayWithArray:self.myEntities] copy]; } </code></pre>  <p>where <code>MyEntityDao</code> is the <code>Swift</code> class that defines <code>lazy var context</code> and <code>getAllEntitiesToRootContext()</code>, I get the Core Data error I also posted above... why? Are not these two code snippets equivalent? Why I'm sometimes  said that main thread is not the owner of the MOC I retrieve from <code>AppDelegate</code>?</p>  <p>I really need help with this...</p>