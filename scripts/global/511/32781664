<p>This simple example I run on jruby, but it only one thread runs</p>  <pre><code>require 'benchmark' require 'celluloid/current'  TIMES = 10  def delay   sleep 1   # 40_000_000.times.each{|i| i*i} end  p 'celluloid: true multithreading?'  class FileWorker   include Celluloid    def create_file(id)     delay     p "Done!"     File.open("out_#{id}.txt", 'w') {|f| f.write(Time.now) }   end end  workers_pool = FileWorker.pool(size: 10)  TIMES.times do |i|   # workers_pool.async.create_file(i) # also not happens   future = Celluloid::Future.new { FileWorker.new.create_file(i) }   p future.value end </code></pre>  <p>All created files have interval 1 second.</p>  <p>Please help to turn Celluloid into multithreading mode, where all files are created simultaneously.</p>  <p>Thanks!</p>  <p>FIXED:</p>  <p>Indeed, array of "futures" helps!</p>  <pre><code>futures = [] TIMES.times do |i|    futures &lt;&lt; Celluloid::Future.new { FileWorker.new.create_file(i) } end futures.each {|f| p f.value } </code></pre>  <p>Thanks <em>jrochkind</em> !</p>