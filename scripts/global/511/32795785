<p>Alright, Go "experts". How would you write this code in idiomatic Go, aka without a mutex in <code>next</code>?</p>  <pre><code>package main  import (     "fmt" )  func main() {     done := make(chan int)     x := 0     for i := 0; i &lt; 10; i++ {         go func() {             y := next(&amp;x)             fmt.Println(y)             done &lt;- 0         }()     }     for i := 0; i &lt; 10; i++ {         &lt;-done     }     fmt.Println(x)  }  var mutex = make(chan int, 1)  func next(p *int) int {     mutex &lt;- 0     // critical section BEGIN     x := *p     *p++     // critical section END     &lt;-mutex     return x  } </code></pre>  <p>Assume you can't have two goroutines in the critical section at the same time, or else bad things will happen.</p>  <p>My first guess is to have a separate goroutine to handle the state, but I can't figure out a way to match up inputs / outputs.</p>