<p>I have an <code>NSManagedObjectContext</code> associated to main thread (<code>mainContext</code>), where I fetch all the <code>NSManagedObject</code> I show throughout the app.</p>  <p>Users don't edit these objects, but I get updates from web services. I periodically perform asynchronous calls to such services, and they "tell" me which of my managed objects have to be deleted (if any), which of them have to be updated with new information (if any), and if I need to insert new objects.</p>  <p>So, I need to firstly get the responses of all the services and then check what changes I have to make to the managed objects I already have in my <code>mainContext</code>. And I also need to perform the updates avoiding blocking the UI.</p>  <p>I was thinking about 2 ways to manage this scenario:</p>  <ol> <li>To use a completely separated <code>privateContext</code> in a private queue with its own Core Data stack to insert there all the objects I get from services. Then compare somehow (how?) with the objects I have in <code>mainContext</code>, and delete/modify/insert objects that are there in <code>mainContext</code>.</li> <li>To use a <code>privateContext</code> in a private queue, but being a child of the <code>mainContext</code>. I'd then need to pass the child context the objects I have in its parent <code>mainContext</code> (is this possible? how?), and at the same time insert in this child context the objects I get from services, and then compare and perform changes.</li> </ol>  <p>What of the approaches would be the best or the appropriate one? Or maybe should it be a different one I haven't thought about?</p>  <p>Thanks in advance</p>  <p><strong>EDIT:</strong> Could this be another possible way?:</p>  <ol start="3"> <li>Only use the <code>mainContext</code> and, as I'm parsing the responses of the services, instead of creating the new objects just make changes on <code>mainContext</code> one by one... </li> </ol>  <p><strong>EDIT 2:</strong> Another possibility?:</p>  <ol start="4"> <li>Only use the <code>privateContext</code>, get the services responses and create the new objects. Then, also fetch with this <code>privateContext</code> all the objects that already existed (and that would be the same as the objects in <code>mainContext</code>). Make changes in this <code>privateContext</code> comparing the two sets of objects (the recently created from services and the fetched), save this context, clear <code>mainContext</code> and re-fetch all objects in <code>mainContext</code>.</li> </ol>