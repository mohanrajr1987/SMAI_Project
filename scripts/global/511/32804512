<p>I'm testing this scenario that when i call delegate method from Thread the spring transaction does not begin. But when i call the delegate method directly it works perfectly. Can any one suggest what is missing here..?</p>  <p>Here is my main class :</p>  <pre><code>@Component public class SpringMainApplication {      @Autowired     private InsertThread insertThread;     @Autowired     private PrintThread printThread;     @Autowired     private ThreadPoolTaskExecutor taskExecutor;       public void startApplication() {         taskExecutor.execute(insertThread);         taskExecutor.execute(printThread);      /*This works     int count =1;      while(count&lt;=4) {         count ++;         Employee empBean = new Employee();         empBean.setAddress("ADD");         empBean.setName("NAME");         empDelegate.insertElement(empBean );     }*/         } } </code></pre>  <p>My thread Class : Insert Thread and print Thread to Insert a element and retrive element from DB. I use MYSQL here</p>  <pre><code>package com.sap.springconcurrent.thread;  import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service;  import com.sap.springconcurrent.bean.Employee; import com.sap.springconcurrent.bean.TestBean; import com.sap.springconcurrent.delegate.EmployeeDelegate;  @Service public abstract class InsertThread extends Thread{      @Autowired     EmployeeDelegate empDelegate;      public InsertThread(EmployeeDelegate empDelegate) {         this.empDelegate = empDelegate;     }      @Override     public void run() {         System.out.println("Count"+ empDelegate.getCount());         while(empDelegate.getCount() &lt;= 5){             synchronized (empDelegate) {                 Employee emp = new Employee();                 emp.setName(createTestBean().getTestValue());                 emp.setAddress("Address");                 System.out.println("Insert"+ empDelegate.getCount() +1 );                 empDelegate.insertElement(emp);             }         }     }      protected abstract TestBean createTestBean();  }  package com.sap.springconcurrent.thread;  import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Scope; import org.springframework.stereotype.Service;  import com.sap.springconcurrent.bean.TestBean; import com.sap.springconcurrent.delegate.EmployeeDelegate;  @Service @Scope("singleton") public class PrintThread extends Thread {      @Autowired     TestBean testBean;     @Autowired     EmployeeDelegate empDelegate;      public PrintThread(EmployeeDelegate empDelegate) {         this.empDelegate = empDelegate;     }      @Override     public void run() {         while (empDelegate.getCount() &lt;= 10) {             synchronized (empDelegate) {                 empDelegate.retrieveElement(testBean.getTestValue());             }         }     } } </code></pre>  <p>My bean from here i call the DAO which handles the transaction</p>  <pre><code>package com.sap.springconcurrent.delegate;  import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Scope; import org.springframework.stereotype.Service;  import com.sap.springconcurrent.bean.Employee; import com.sap.springconcurrent.dao.EmployeeDao;  @Service @Scope("singleton") public class EmployeeDelegate {      @Autowired     EmployeeDao doa;      private boolean elementRetreived = true;     private int count = 0;      public void insertElement(Employee empBean) {         System.out.println("Insert Start");         while (!elementRetreived) {             try {                 wait();             } catch (InterruptedException e) {                 e.printStackTrace();             }         }         count++;         empBean.setName(empBean.getName() + count);         empBean.setAddress(empBean.getAddress() + count);         System.out.println("Calling DAo");         Employee emp = saveEmp(empBean);         System.out.println("Inserted Employee" + emp.toString());         elementRetreived = false;         notifyAll();     }     //@Transactional(propagation=Propagation.REQUIRED)     public Employee saveEmp(Employee empBean) {         return doa.save(empBean);     }      public void retrieveElement(String name) {         while (elementRetreived) {             try {                 wait();             } catch (InterruptedException e) {                 e.printStackTrace();             }         }         Employee emp = doa.getEmployeeWithName(name + count);         System.out.println("Retrieved Employee" + emp.toString());         elementRetreived = true;         notifyAll();     }      public boolean isElementRetreived() {         return elementRetreived;     }      public int getCount() {         return count;     }  } </code></pre>  <p>My Dao: Here is the Transaction made</p>  <pre><code>package com.sap.springconcurrent.dao;  import javax.persistence.EntityManager; import javax.persistence.PersistenceContext; import javax.persistence.Query;  import org.springframework.stereotype.Repository; import org.springframework.transaction.annotation.Isolation; import org.springframework.transaction.annotation.Propagation; import org.springframework.transaction.annotation.Transactional;  import com.sap.springconcurrent.bean.Employee;  @Repository @Transactional(propagation = Propagation.REQUIRES_NEW) public class EmployeeDao {      @PersistenceContext     EntityManager entityManagerFactory;      @Transactional(propagation = Propagation.REQUIRES_NEW)     public Employee save(Employee employee) {         System.out.println("Insertint");         entityManagerFactory.persist(employee);         return employee;     }      @Transactional(readOnly=true)     public Employee getEmployeeWithName(String empName) {         String query = "select emp from Employee emp where emp.name LIKE :name ";         Query q = entityManagerFactory.createQuery(query);         q.setParameter("name", empName);         return (Employee) q.getResultList().get(0);     }  }  Spring COnfig :  &lt;beans xmlns="http://www.springframework.org/schema/beans"     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"     xmlns:tx="http://www.springframework.org/schema/tx"     xsi:schemaLocation="http://www.springframework.org/schema/beans     http://www.springframework.org/schema/beans/spring-beans-3.1.xsd     http://www.springframework.org/schema/context     http://www.springframework.org/schema/context/spring-context-3.1.xsd     http://www.springframework.org/schema/tx      http://www.springframework.org/schema/tx/spring-tx.xsd"&gt;      &lt;context:component-scan base-package="com.sap.springconcurrent" /&gt;     &lt;tx:annotation-driven transaction-manager="transactionManager" /&gt;     &lt;bean id="testBean" class="com.sap.springconcurrent.bean.TestBean"         scope="prototype"&gt;         &lt;property name="testValue" value="testValue"&gt;&lt;/property&gt;     &lt;/bean&gt;     &lt;bean class="org.springframework.orm.jpa.JpaTransactionManager"         id="transactionManager" scope="prototype"&gt;         &lt;property name="entityManagerFactory" ref="entityManagerFactory" /&gt;     &lt;/bean&gt;      &lt;bean id="empDelegate" class="com.sap.springconcurrent.delegate.EmployeeDelegate"&gt;      &lt;/bean&gt;      &lt;bean id="insertThread" class="com.sap.springconcurrent.thread.InsertThread"         scope="prototype"&gt;         &lt;constructor-arg ref="empDelegate" /&gt;         &lt;lookup-method name="createTestBean" bean="testBean" /&gt;     &lt;/bean&gt;      &lt;bean id="printThread" class="com.sap.springconcurrent.thread.PrintThread"         scope="prototype"&gt;         &lt;constructor-arg ref="empDelegate" /&gt;     &lt;/bean&gt;      &lt;bean id="taskExecutor"         class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"&gt;         &lt;property name="corePoolSize" value="5" /&gt;         &lt;property name="maxPoolSize" value="10" /&gt;         &lt;property name="WaitForTasksToCompleteOnShutdown" value="true" /&gt;     &lt;/bean&gt;      &lt;bean name="dataSource"         class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;         &lt;property name="driverClassName" value="com.mysql.jdbc.Driver" /&gt;         &lt;property name="url" value="jdbc:mysql://localhost:3306/mytestdb" /&gt;         &lt;property name="username" value="root" /&gt;         &lt;property name="password" value="saplab" /&gt;     &lt;/bean&gt;      &lt;bean id='entityManagerFactory'         class='org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean'&gt;         &lt;property name="persistenceUnitName" value="testPersistenceUnit" /&gt;         &lt;property name="packagesToScan" value="com.sap.springconcurrent.bean.Employee" /&gt;         &lt;property name='dataSource' ref='dataSource' /&gt;         &lt;property name="jpaVendorAdapter"&gt;             &lt;bean                 class="org.springframework.orm.jpa.vendor.EclipseLinkJpaVendorAdapter"&gt;                 &lt;property name="showSql" value="true" /&gt;                 &lt;property name="generateDdl" value="true" /&gt;                 &lt;property name="databasePlatform"                     value="org.eclipse.persistence.platform.database.MySQLPlatform" /&gt;             &lt;/bean&gt;         &lt;/property&gt;         &lt;property name="jpaDialect"&gt;             &lt;bean class="org.springframework.orm.jpa.vendor.EclipseLinkJpaDialect" /&gt;          &lt;/property&gt;         &lt;property name="jpaPropertyMap"&gt;             &lt;map&gt;                 &lt;entry key="eclipselink.weaving" value="false" /&gt;             &lt;/map&gt;         &lt;/property&gt;     &lt;/bean&gt;  &lt;/beans&gt;  persistence Xml :  &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;persistence xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"     version="2.0" xmlns="http://java.sun.com/xml/ns/persistence"&gt;     &lt;persistence-unit name="driftsloggPersistenceUnit" transaction-type="RESOURCE_LOCAL"&gt;          &lt;provider&gt;             org.eclipse.persistence.jpa.PersistenceProvider         &lt;/provider&gt;          &lt;class&gt;com.sap.springconcurrent.bean.Employee&lt;/class&gt;         &lt;properties&gt;             &lt;property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver" /&gt;             &lt;property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/mytestdb" /&gt;             &lt;property name="javax.persistence.jdbc.user" value="root" /&gt;             &lt;property name="javax.persistence.jdbc.password" value="saplab" /&gt;              &lt;!-- EclipseLink should create the database schema automatically --&gt;             &lt;property name="eclipselink.ddl-generation" value="create-tables" /&gt;             &lt;property name="eclipselink.ddl-generation.output-mode" value="database" /&gt;         &lt;/properties&gt;      &lt;/persistence-unit&gt; &lt;/persistence&gt;  My Start : package com.sap.springconcurrent.main;  import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;   @ContextConfiguration(locations = "classpath:spring-config.xml") @RunWith(SpringJUnit4ClassRunner.class) public class SpringMainApplicationTest {      @Autowired     SpringMainApplication app;       @Test     public void test() {         app.startApplication();     }  } </code></pre>