<p>I try to follow <a href="http://sec.cs.ucl.ac.uk/users/smurdoch/papers/protocols08cookies.pdf" rel="nofollow">this paper</a> (Hardened Stateless Session Cookies by Murdoch) to realize a salting mechanism. The following pseudo code describes the code:</p>  <blockquote> <pre><code>a[0](salt, password ) = H(salt||password )   a[x](salt, password ) = H(a[x−1](salt, password )||password )   </code></pre>      <p>H: Cryptographically secure hash function<br>   x: Hash iteration count<br>   a: Authenticator<br>   salt: Per-account, cryptographically secure pseudorandom number about 128bit<br>   password: User pw in cleartext</p> </blockquote>  <p>I wonder if the php implementation shall be the following:</p>  <pre><code>$a0 = hash('sha256', $salt | $password); $auth = recursiveHash($a0, $password, 256)  function recursiveHash($salt, $password, $counter) {     if ($counter === 0) {         return hash('sha256', $salt | $password);     } else {         $counter--;         return $this-&gt;recursiveHash(hash('sha256', $salt | $password), $password, $counter);     } } </code></pre>  <p>In general: I do struggle with the exact syntactic interpretation. What does a $varOne, $varTwo mean? Is it the result of the last function call? Is a || a bitwise OR Operator? Why not a single |? What does the following mean:</p>  <pre><code>c = a[n](salt, password ) </code></pre>  <p>Is it the same (when n == x) as:</p>  <pre><code>a[x](salt, password ) = H(a[x−1](salt, password )||password ) </code></pre>  <p>Would be very happy, if someone could help me with the semantic and syntactic interpretation of this paper.</p>