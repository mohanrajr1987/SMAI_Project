<p>I have been developing my integration tests using Selenium Webdriver so far, but quite recently I decided to explore the techniques for developing them using the custom libraries and classes of my web app.</p>  <p>I wrote an integration test which needed some data from the httpContext class (I am using .net), validate a session variable and based on that it redirected to a particular URL with response data in json format.</p>  <p>The above in terms of a browser based test using Selenium Webdriver involved getting the web page which had a few links and by clicking any of the links returned the expected json response.</p>  <p>The browser based test took 15 minutes to develop and verify.</p>  <p>The native API based test took 1 hour to develop and verify and 3 hours of searching over google and stackoverflow regarding mocking or not mocking httpContext.</p>  <p>In a generic scenario, lets just exclude the research time of 3 hours. Still the native API tests took way more longer to develop than the browser automated one.</p>  <p>So in your experience, is it better to keep the number of native API based IT at a minimum or are there any scenarios where they will yield greater ROI as compared to Selenium Webdriver based integration tests.</p>