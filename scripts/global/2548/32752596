<p>I am attempting to scrape a torrent from a tracker, however, I have not been able to get a UDP response yet, any ideas are greatly appreciated...</p>  <p>Problem Line is 67 in UDPTrackerClient.cs</p>  <p>Thank you!</p>  <p>Program.cs</p>  <pre><code>// magnet:?xt=urn:btih:1d76c3230be625cdd28e3431fed9e76afaf914b5&amp;dn=Fear.The.Walking.Dead.S01E04.HDTV.x264-KILLERS%5Bettv%5D&amp;tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&amp;tr=udp%3A%2F%2Fopen.demonii.com%3A1337&amp;tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&amp;tr=udp%3A%2F%2Fexodus.desync.com%3A6969  UDPTrackerClient httpTrackerClient = new UDPTrackerClient(5);  TrackerClient.Announce("udp://open.demonii.com:1337", "1d76c3230be625cdd28e3431fed9e76afaf914b5", Guid.NewGuid().ToString(), 0, 0, 0, 0, BitConverter.ToInt32(IPAddress.Parse("1.1.1.1").GetAddressBytes(), 0), 0, 4444, 0);  Dictionary&lt;string, System.Net.Torrent.BaseScraper.ScrapeInfo&gt; scrapeInfos2 = (Dictionary&lt;string, System.Net.Torrent.BaseScraper.ScrapeInfo&gt;)TrackerClient.Scrape("udp://open.demonii.com:1337", new string[] { "1d76c3230be625cdd28e3431fed9e76afaf914b5" });  foreach(System.Net.Torrent.BaseScraper.ScrapeInfo sInfo in scrapeInfos2.Values)  {     object whoa = (object)sInfo; } </code></pre>  <p>UDPTrackerClient.cs</p>  <pre><code>/* Copyright (c) 2013, Darren Horrocks All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  * Redistributions of source code must retain the above copyright notice, this   list of conditions and the following disclaimer.  * Redistributions in binary form must reproduce the above copyright notice, this   list of conditions and the following disclaimer in the documentation and/or   other materials provided with the distribution.  * Neither the name of Darren Horrocks nor the names of its   contributors may be used to endorse or promote products derived from   this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */  using System.Collections.Generic; using System.Data; using System.Linq; using System.Net.Sockets; using System.Net.Torrent.Misc; using System.Text;  namespace System.Net.Torrent {     public class UDPTrackerClient : BaseScraper, ITrackerClient     {         private byte[] _currentConnectionId;          public UDPTrackerClient(Int32 timeout)              : base(timeout)         {             _currentConnectionId = BaseCurrentConnectionId;         }          public IDictionary&lt;String, ScrapeInfo&gt; Scrape(String url, String[] hashes)         {             Dictionary&lt;String, ScrapeInfo&gt; returnVal = new Dictionary&lt;string, ScrapeInfo&gt;();              ValidateInput(url, hashes, ScraperType.UDP);              Int32 trasactionId = Random.Next(0, 65535);              IPEndPoint iEndPoint = new IPEndPoint(IPAddress.Any, trasactionId);              Socket client = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);             client.Connect(Tracker, Port);              byte[] sendBuf = _currentConnectionId.Concat(Pack.Int32(0)).Concat(Pack.Int32(trasactionId)).ToArray();             client.Send(sendBuf, 0, sendBuf.Length, SocketFlags.None);              byte[] recBuf = new byte[16];             int iCount = client.Receive(recBuf, 0, recBuf.Length, SocketFlags.None);              if(recBuf == null) throw new NoNullAllowedException("udpClient failed to receive");             if(recBuf.Length &lt; 0) throw new InvalidOperationException("udpClient received no response");             if(recBuf.Length &lt; 16) throw new InvalidOperationException("udpClient did not receive entire response");              UInt32 recAction = Unpack.UInt32(recBuf, 0, Unpack.Endianness.Big);             UInt32 recTrasactionId = Unpack.UInt32(recBuf, 4, Unpack.Endianness.Big);              if (recAction != 0 || recTrasactionId != trasactionId)             {                 throw new Exception("Invalid response from tracker");             }              _currentConnectionId = CopyBytes(recBuf, 8, 8);              byte[] hashBytes = new byte[0];             hashBytes = hashes.Aggregate(hashBytes, (current, hash) =&gt; current.Concat(Pack.Hex(hash)).ToArray());              int expectedLength = 8 + (12 * hashes.Length);              sendBuf = _currentConnectionId.Concat(Pack.Int32(2)).Concat(Pack.Int32(trasactionId)).Concat(hashBytes).ToArray();             client.Send(sendBuf, 0, sendBuf.Length, SocketFlags.None);              recBuf = new byte[16];             int iCount2 = client.Receive(recBuf);              if (recBuf == null) throw new NoNullAllowedException("udpClient failed to receive");             if (recBuf.Length &lt; 0) throw new InvalidOperationException("udpClient received no response");             if (recBuf.Length &lt; expectedLength) throw new InvalidOperationException("udpClient did not receive entire response");              recAction = Unpack.UInt32(recBuf, 0, Unpack.Endianness.Big);             recTrasactionId = Unpack.UInt32(recBuf, 4, Unpack.Endianness.Big);              _currentConnectionId = CopyBytes(recBuf, 8, 8);              if (recAction != 2 || recTrasactionId != trasactionId)             {                 throw new Exception("Invalid response from tracker");             }              Int32 startIndex = 8;             foreach (String hash in hashes)             {                 UInt32 seeders = Unpack.UInt32(recBuf, startIndex, Unpack.Endianness.Big);                 UInt32 completed = Unpack.UInt32(recBuf, startIndex + 4, Unpack.Endianness.Big);                 UInt32 leachers = Unpack.UInt32(recBuf, startIndex + 8, Unpack.Endianness.Big);                  returnVal.Add(hash, new ScrapeInfo(seeders, completed, leachers, ScraperType.UDP));                  startIndex += 12;             }              client.Close();              return returnVal;         }          public AnnounceInfo Announce(String url, String hash, String peerId)         {             return Announce(url, hash, peerId, 0, 0, 0, 2, 0, -1, 12345, 0);         }          public AnnounceInfo Announce(String url, String hash, String peerId, Int64 bytesDownloaded, Int64 bytesLeft, Int64 bytesUploaded,              Int32 eventTypeFilter, Int32 ipAddress, Int32 numWant, Int32 listenPort, Int32 extensions)         {             List&lt;IPEndPoint&gt; returnValue = new List&lt;IPEndPoint&gt;();              ValidateInput(url, new[] { hash }, ScraperType.UDP);              _currentConnectionId = BaseCurrentConnectionId;             Int32 trasactionId = Random.Next(0, 65535);              UdpClient udpClient = new UdpClient(Tracker, Port)                 {                     DontFragment = true,                     Client =                         {                             SendTimeout = Timeout*1000,                             ReceiveTimeout = Timeout*1000                         }                 };              byte[] sendBuf = _currentConnectionId.Concat(Pack.Int32(0, Pack.Endianness.Big)).Concat(Pack.Int32(trasactionId, Pack.Endianness.Big)).ToArray();             udpClient.Send(sendBuf, sendBuf.Length);              IPEndPoint endPoint = null;             byte[] recBuf;              try             {                 recBuf = udpClient.Receive(ref endPoint);             }             catch (Exception)             {                 return null;             }              if (recBuf == null) throw new NoNullAllowedException("udpClient failed to receive");             if (recBuf.Length &lt; 0) throw new InvalidOperationException("udpClient received no response");             if (recBuf.Length &lt; 16) throw new InvalidOperationException("udpClient did not receive entire response");              UInt32 recAction = Unpack.UInt32(recBuf, 0, Unpack.Endianness.Big);             UInt32 recTrasactionId = Unpack.UInt32(recBuf, 4, Unpack.Endianness.Big);              if (recAction != 0 || recTrasactionId != trasactionId)             {                 throw new Exception("Invalid response from tracker");             }              _currentConnectionId = CopyBytes(recBuf, 8, 8);              byte[] hashBytes = Pack.Hex(hash).ToArray();              Int32 key = Random.Next(0, 65535);              sendBuf = _currentConnectionId. /*connection id*/                 Concat(Pack.Int32(1)). /*action*/                 Concat(Pack.Int32(trasactionId, Pack.Endianness.Big)). /*trasaction Id*/                 Concat(hashBytes). /*hash*/                 Concat(Encoding.ASCII.GetBytes(peerId)). /*my peer id*/                 Concat(Pack.Int64(bytesDownloaded, Pack.Endianness.Big)). /*bytes downloaded*/                 Concat(Pack.Int64(bytesLeft, Pack.Endianness.Big)). /*bytes left*/                 Concat(Pack.Int64(bytesUploaded, Pack.Endianness.Big)). /*bytes uploaded*/                 Concat(Pack.Int32(eventTypeFilter, Pack.Endianness.Big)). /*event, 0 for none, 2 for just started*/                 Concat(Pack.Int32(ipAddress, Pack.Endianness.Big)). /*ip, 0 for this one*/                 Concat(Pack.Int32(key, Pack.Endianness.Big)). /*unique key*/                 Concat(Pack.Int32(numWant, Pack.Endianness.Big)). /*num want, -1 for as many as pos*/                 Concat(Pack.Int32(listenPort, Pack.Endianness.Big)). /*listen port*/                 Concat(Pack.Int32(extensions, Pack.Endianness.Big)).ToArray(); /*extensions*/             udpClient.Send(sendBuf, sendBuf.Length);              try             {                 recBuf = udpClient.Receive(ref endPoint);             }             catch (Exception)             {                 return null;             }              recAction = Unpack.UInt32(recBuf, 0, Unpack.Endianness.Big);             recTrasactionId = Unpack.UInt32(recBuf, 4, Unpack.Endianness.Big);              int waitTime = (int)Unpack.UInt32(recBuf, 8, Unpack.Endianness.Big);             int leachers = (int)Unpack.UInt32(recBuf, 12, Unpack.Endianness.Big);             int seeders = (int)Unpack.UInt32(recBuf, 16, Unpack.Endianness.Big);              if (recAction != 1 || recTrasactionId != trasactionId)             {                 throw new Exception("Invalid response from tracker");             }              for (Int32 i = 20; i &lt; recBuf.Length; i += 6)             {                 UInt32 ip = Unpack.UInt32(recBuf, i, Unpack.Endianness.Big);                 UInt16 port = Unpack.UInt16(recBuf, i + 4, Unpack.Endianness.Big);                  returnValue.Add(new IPEndPoint(ip, port));             }              udpClient.Close();              return new AnnounceInfo(returnValue, waitTime, seeders, leachers);         }          public IDictionary&lt;String, AnnounceInfo&gt; Announce(String url, String[] hashes, String peerId)         {             ValidateInput(url, hashes, ScraperType.UDP);              Dictionary&lt;String, AnnounceInfo&gt; returnVal = hashes.ToDictionary(hash =&gt; hash, hash =&gt; Announce(url, hash, peerId));              return returnVal;         }          private static byte[] CopyBytes(byte[] bytes, Int32 start, Int32 length)         {             byte[] intBytes = new byte[length];             for (int i = 0; i &lt; length; i++) intBytes[i] = bytes[start + i];             return intBytes;         }     } } </code></pre>  <p>BaseScraper.cs</p>  <pre><code>/* Copyright (c) 2013, Darren Horrocks All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  * Redistributions of source code must retain the above copyright notice, this   list of conditions and the following disclaimer.  * Redistributions in binary form must reproduce the above copyright notice, this   list of conditions and the following disclaimer in the documentation and/or   other materials provided with the distribution.  * Neither the name of Darren Horrocks nor the names of its   contributors may be used to endorse or promote products derived from   this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */  using System.Collections.Generic; using System.Text.RegularExpressions;  namespace System.Net.Torrent {     public abstract class BaseScraper     {         protected readonly Regex HashRegex = new Regex("^[a-f0-9]{40}$", RegexOptions.ECMAScript | RegexOptions.IgnoreCase);         protected readonly Regex UDPRegex = new Regex("udp://([^:/]*)(?::([0-9]*))?(?:/)?", RegexOptions.ECMAScript | RegexOptions.IgnoreCase);         protected readonly Regex HTTPRegex = new Regex("(http://.*?/)announce?|scrape?([^/]*)$", RegexOptions.ECMAScript | RegexOptions.IgnoreCase);         protected readonly byte[] BaseCurrentConnectionId = { 0x00, 0x00, 0x04, 0x17, 0x27, 0x10, 0x19, 0x80 };         protected readonly Random Random = new Random(DateTime.Now.Second);          public Int32 Timeout { get; private set; }         public String Tracker { get; private set; }         public Int32 Port { get; private set; }          protected BaseScraper(Int32 timeout)         {             Timeout = timeout;         }          public enum ScraperType         {             UDP,             HTTP         }          protected void ValidateInput(String url, String[] hashes, ScraperType type)         {             if (hashes.Length &lt; 1)             {                 throw new ArgumentOutOfRangeException("hashes", hashes, "Must have at least one hash when calling scrape");             }              if (hashes.Length &gt; 74)             {                 throw new ArgumentOutOfRangeException("hashes", hashes, "Must have a maximum of 74 hashes when calling scrape");             }              foreach (String hash in hashes)             {                 if (!HashRegex.IsMatch(hash))                 {                     throw new ArgumentOutOfRangeException("hashes", hash, "Hash is not valid");                 }             }              if (type == ScraperType.UDP)             {                 Match match = UDPRegex.Match(url);                  if (!match.Success)                 {                     throw new ArgumentOutOfRangeException("url", url, "URL is not a valid UDP tracker address");                 }                  Tracker = match.Groups[1].Value;                 Port = match.Groups.Count == 3 ? Convert.ToInt32(match.Groups[2].Value) : 80;             }             else if (type == ScraperType.HTTP)             {                 Match match = HTTPRegex.Match(url);                  if (!match.Success)                 {                     throw new ArgumentOutOfRangeException("url", url, "URL is not a valid HTTP tracker address");                 }                  Tracker = match.Groups[0].Value;             }         }          public class AnnounceInfo         {             public IEnumerable&lt;EndPoint&gt; Peers { get; set; }             public Int32 WaitTime { get; set; }             public Int32 Seeders { get; set; }             public Int32 Leachers { get; set; }              public AnnounceInfo(IEnumerable&lt;EndPoint&gt; peers, Int32 a, Int32 b, Int32 c)             {                 Peers = peers;                  WaitTime = a;                 Seeders = b;                 Leachers = c;             }         }          public class ScrapeInfo         {             public UInt32 Seeders { get; set; }             public UInt32 Complete { get; set; }             public UInt32 Leachers { get; set; }             public UInt32 Downloaded { get; set; }             public UInt32 Incomplete { get; set; }              public ScrapeInfo(UInt32 a, UInt32 b, UInt32 c, ScraperType type)             {                 if (type == ScraperType.HTTP)                 {                     Complete = a;                     Downloaded = b;                     Incomplete = c;                 }                 else if (type == ScraperType.UDP)                 {                     Seeders = a;                     Complete = b;                     Leachers = c;                 }             }         }     } } </code></pre>