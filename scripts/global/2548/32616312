<p>I am trying to code a socket and client programs, such that the server should listen to both connections at same time.</p>  <p>For example when I start the server, it will listen to UDP port as well as TCP port and whenever a UDP client sends message, it must process it and when TCP client sends message it must process it.</p>  <p>I tried using pthreads and not able to achieve what I want. </p>  <p>Here are the details in C++ Code</p>  <p>Following function will be called by the respective pthreads</p>  <pre><code>void *TCP(void *ptr) {     char tcp[MAXDATASIZE];     cout &lt;&lt; "\nEnter TCP port number\n";     cin &gt;&gt; tcp;     Server tcpServer(tcp,1);     tcpServer.testbind(1);     pthread_exit(NULL);  }  void *UDP(void *ptr) {     char udp[MAXDATASIZE];     cout &lt;&lt; "\nEnter UDP port number\n";     cin &gt;&gt; udp;     Server udpServer(udp,2);     udpServer.testDNS(2);     pthread_exit(NULL);  } </code></pre>  <p>Main Program</p>  <pre><code>int main(int c, char *argv[]) {   char tcp[MAX],udp[MAX];   int choice,choice1;   void *i;   pthread_t tcpThread,udpThread;   int tcpThreadCheck,udpThreadCheck;   pthread_attr_t attr;   pthread_attr_init(&amp;attr);   pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_JOINABLE);   choice1 = pthread_create(&amp;tcpThread,NULL,testTCP,i);   choice = pthread_create(&amp;udpThread,NULL,testUDP,i);   if(choice &lt;0) cout &lt;&lt;" Main tcp thread failed"&lt;&lt;endl;   if(choice1 &lt;0) cout &lt;&lt;" Main udp thread failed"&lt;&lt;endl;    pthread_attr_destroy(&amp;attr);   pthread_exit(NULL); } </code></pre>  <p>Whenever I try to run this server program, I get "Enter TCP Port number " and "Enter UDP port number" simulatenosly or in hay-way manner. I want bot the tcpServer and udpServer to run independently and process the incoming data from respective clients. </p>  <p>Can anyone please help me here, how to achieve this. Any examples?</p>  <p>Thanks in advance. </p>