<p>currently I try to reimplement a C application in go. Part of the C application is to send a string to a multicast group. This produces the following packet captured via tcpdump:</p>  <pre><code>00000000  d4 c3 b2 a1 02 00 04 00  00 00 00 00 00 00 00 00  |................| 00000010  ff ff 00 00 01 00 00 00  14 81 06 56 47 2c 01 00  |...........VG,..| 00000020  46 00 00 00 46 00 00 00  33 33 00 02 10 01 04 ce  |F...F...33......| 00000030  ef ca fe 1a 86 dd 60 00  00 00 00 10 11 01 fe 80  |......`.........| 00000040  00 00 00 00 00 00 06 ce  ef ff fe ca fe 1a ff 02  |................| 00000050  00 00 00 00 00 00 00 00  00 00 00 02 10 01 be 8f  |................| 00000060  03 e9 00 10 99 68 6e 6f  64 65 69 6e 66 6f        |.....hnodeinfo| </code></pre>  <p>I tried to replicate the behavior with the following code:</p>  <pre><code>const MultiCastGroup string = "ff02:0:0:0:0:0:2:1001" const Port int = 1001 const Proto string = "udp6" const MaxDataGramSize int = 8192  var announcedAddr = &amp;net.UDPAddr{IP: net.ParseIP(MultiCastGroup), Port: Port}  buf := []byte("nodeinfo") unicastConn, _ := net.ListenUDP(Proto, &amp;net.UDPAddr{IP: net.IPv6zero, Port: 0}) unicastConn.WriteToUDP(buf, announcedAddr) </code></pre>  <p>But the I don't think that it is working, because all I can capture from this via tcpdump is:</p>  <pre><code>00000000  d4 c3 b2 a1 02 00 04 00  00 00 00 00 00 00 00 00  |................| 00000010  ff ff 00 00 01 00 00 00                           |........| 00000018 </code></pre>  <p>It doesn't seem that the packet is even send. I tried this on a Debian Wheezy machine. Did anyone if you encounter a similar problem with golang and UDP?</p>  <p>Thanks in advance</p>