<p>Hi i am trying to send packets of 1 kb from client to server using UDP. I can receive all the packets but the problem is while loop is not exiting so i used socket timeout to achieve this.Since this does not suit dynamic environment i want to replace something sensible. Below are my server and client side code,  client side follows server side from while loop.</p>  <pre><code>byte[] buff=new byte[1024]; byte[] buffer=new byte[in.available()]; int total=0; int nRead=0; while((nRead = in.read(buffer)) != -1)  {     total += nRead; }     System.out.println("Read " + total + " bytes");  while(i&lt;buffer.length) {        buff[c]=buffer[i];     c++;     if(i%1023==0)     {         sendpacket[h]=new DatagramPacket(buff,buff.length,ip,1234);         //System.out.println(buff.length);         System.out.println("Client's sending packet "+h);         //System.out.println(new String(buff));         sock.send(sendpacket[h]);//send the packet         c=0;         h++;         buff=new byte[1024];     }     i++; } sendlastpacket=new DatagramPacket(buff,buff.length,ip,1234); sock.send(sendlastpacket); System.out.println("Client sent last packet"); </code></pre>  <p>server side:</p>  <pre><code>while(socketalive &amp;&amp; i&lt;9)//this is where I //need the change {     recvpacket[i]=new DatagramPacket(buffer1,0,buffer1.length);     sock.receive(recvpacket[i]);     System.out.println("server received packet "+i);     //System.out.println(new String(buffer));     System.out.println(recvpacket[i].getLength());      //Arrays.fill(buffer, 0);     i++;     fos=new FileOutputStream(new File("profile1.docx"),true);     fos.write(buffer1);     for(int j=0; j&lt;1024; j++)     {         buffer1[j]=0;     }  } </code></pre>