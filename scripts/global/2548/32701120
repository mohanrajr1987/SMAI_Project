<p>I'm currently developing a simple online-multiplayer game via .NET sockets in C#.</p>  <p>More precisely I'm trying to create the network communication structure around this game - not so much the game itself. For now I have a working HTTP-Server which handles basic requests, like "create a new game instance (party)", "join an existing party" etc.</p>  <p>This is working fine, but I don't really know how to handle communication inside a game instance. From my understanding there should be both, reliable communication and unreliable communication. Like sending a "kick player", "pause game", "get player list" request (reliable) and sending inputs, receiving snapshots (unreliable).</p>  <p>Does this mean it would make sense to have two seperate sockets (udp and tcp) running on different ports, so I actually have two servers to communicate with per game instance? Or is there a way to achieve both, guaranteed delivery and unreliable delivery via one single udp socket?</p>  <p>Note: <em>I'm not really aiming for ordered packet arriving, so reliable for me mainly means making sure the packet actually reaches its destination</em></p>  <p>Note2: <em>I don't really want to bother the http server with this game-instance specific reliable stuff, in my opinion it would be nicer if the game instances could handle this by themselves</em></p>  <p>I saw <a href="http://stackoverflow.com/questions/32083698/using-tcp-and-udp-for-java-game">This question here</a> being similar, but the accepted answer does not really help me. My questing regarding the answer there is: How is it possible to combine reliable and unreliable communication via .NET sockets in C#?</p>