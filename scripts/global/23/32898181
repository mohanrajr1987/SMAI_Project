<p>I am running a query and there are multiple parameters that can be used to filter the records returned.  The parameters are coming from dropdown menus, so if the user doesn't choose an option, the parameter comes over in an empty string.</p>  <p>How can I ignore the parameters that are a ""?</p>  <p>Here is the query: (There might be a better way to do this in LINQ, but my SQL skills are stronger).  I am building this report in MVC 5/C#.</p>  <pre><code>approvalReport = (from td in db.TData                               from call in                                   (from x in db.CallLog                                    where x.TID == td.TID                                    orderby x.CallDate descending                                    select new                                    {                                        x.CallStatus,                                        x.CallNotes,                                        x.CallDate                                    }).Take(1).DefaultIfEmpty()                               from appt in                                   (from x in db.Appt                                    where x.TID == td.TID                                    orderby x.ApptCreateDate descending                                    select new                                    {                                        x.ApptStatus,                                        x.ApptDate                                    }).Take(1).DefaultIfEmpty()                               where (td.Location == location &amp;&amp; td.ApprovedBy == approvedBy &amp;&amp; td.PCP == pcp &amp;&amp; td.IPA == ipa)                               orderby td.MemberName descending                               select new ApprovalDataVM()                               {                                   MemberName = td.MemberName,                                                                         PCP = td.PCP,                                   IPA = td.IPA,                                   Location = td.Location,                                   ApprovedBy = td.ApprovedBy,                                   CallStatus = call.CallStatus,                                   ApptDate = appt.ApptDate,                                   ApptStatus = appt.ApptStatus,                                   callLogCt = db.CallLog.Where(x =&gt; x.TID == td.TID).Count(),                               }); </code></pre>  <p>I have done some research on this and tried this for the where clause, but it didn't work. The report didn't pull any data. The example below is abbreviated to 3 parameters, and "approvedBy" will never be null or "".</p>  <pre><code>where (td.ApprovedBy == approvedBy &amp;&amp; (pcp =! "' &amp;&amp; td.PCP == pcp) &amp;&amp; (ipa != "" &amp;&amp; td.IPA == ipa) </code></pre>  <p>I don't want to have to repeat myself for all the parameter combinations that are possible.  What is the best solution for this?</p>  <p>The CallLog and Appt tables have a foriegn key of the td.TID. The output will be a list displaying all of the data in the view model. </p>  <p>View:</p>  <pre><code> &lt;div class="table-responsive"&gt;         &lt;table class="table table-hover small"&gt;             &lt;tr&gt;                 &lt;th&gt;&lt;/th&gt;                 &lt;th&gt;Approved By&lt;/th&gt;                 &lt;th&gt;Member Name&lt;/th&gt;                 &lt;th&gt;DOB&lt;/th&gt;                 &lt;th&gt;PCP&lt;/th&gt;                 &lt;th&gt;IPA&lt;/th&gt;                 &lt;th&gt;Call Status&lt;/th&gt;                 &lt;th&gt;Call Count&lt;/th&gt;                 &lt;th&gt;Appt Date&lt;/th&gt;                 &lt;th&gt;DOS&lt;/th&gt;             &lt;/tr&gt;             @{ int counter = 0; }             @foreach (var item in Model.reportData)             {                 counter = counter + 1;                 &lt;tr&gt;                     &lt;td&gt;                         @counter                     &lt;/td&gt;                     &lt;td&gt;                         @Html.DisplayFor(modelItem =&gt; item.ApprovedBy)                     &lt;/td&gt;                     &lt;td&gt;                         @Html.DisplayFor(modelItem =&gt; item.MemberName)                     &lt;/td&gt;                        &lt;td&gt;                         @if (item.DateOfBirth != null)                         {                             @item.DateOfBirth.Value.ToShortDateString()                         }                     &lt;/td&gt;                     &lt;td&gt;                         @Html.DisplayFor(modelItem =&gt; item.PCP)                     &lt;/td&gt;                     &lt;td&gt;                         @Html.DisplayFor(modelItem =&gt; item.IPA)                     &lt;/td&gt;                     &lt;td&gt;@Html.DisplayFor(modelItem =&gt; item.CallStatus)&lt;/td&gt;                     &lt;td&gt;@Html.DisplayFor(modelItem =&gt; item.callLogCt)&lt;/td&gt;                     &lt;td&gt;@Html.DisplayFor(modelItem =&gt; item.ApptStatus)&lt;/td&gt;                     &lt;td&gt;                         @if (item.ApptDate != null)                         {                             @item.ApptDate.Value.ToShortDateString()                         }                     &lt;/td&gt;                  &lt;/tr&gt;             }         &lt;/table&gt; </code></pre>  <p>Form that feeds the search query:</p>  <pre><code>&lt;form class="form-inline" role="form"&gt;                                                           &lt;div class="form-group" style="padding-right:15px;"&gt;                         &lt;label class="control-label"&gt;*Approved By: &amp;nbsp;&lt;/label&gt;                         @Html.DropDownList("approvedBy", Model.ApprovedByList, "Select One", new { @class = "input-sm" })                         @Html.ValidationMessageFor(model =&gt; model.ApprovedByList, "", new { @class = "text-danger" })                     &lt;/div&gt;                     &lt;div class="form-group" style="padding-right:15px;"&gt;                         &lt;label class="control-label"&gt;*Location: &amp;nbsp;&lt;/label&gt;                         @Html.DropDownList("location", (IEnumerable&lt;SelectListItem&gt;)ViewBag.location, "Select One", new { @class = "input-sm" })                     &lt;/div&gt;                       &lt;input type="submit" value="Run Report" class="btn-primary btn-sm" /&gt;                     &lt;hr /&gt;                     &lt;div class="form-group" style="padding-right:15px;"&gt;                         &lt;label class="control-label"&gt;PCP: &amp;nbsp;&lt;/label&gt;                         @Html.DropDownList("pcp", Model.PCPList, "All", new { @class = "input-sm" })                     &lt;/div&gt;                     &lt;div class="form-group" style="padding-right:15px;"&gt;                         &lt;label class="control-label"&gt;IPA: &amp;nbsp;&lt;/label&gt;                         @Html.DropDownList("ipa", Model.IPAList, "All", new { @class = "input-sm" })                     &lt;/div&gt;                     &lt;div class="form-group" style="padding-right:15px;"&gt;                         &lt;label class="control-label"&gt;Call Status: &amp;nbsp;&lt;/label&gt;                         @Html.DropDownList("callStatus", Model.CallStatusList, "All", new { @class = "input-sm" })                     &lt;/div&gt;                     &lt;br /&gt;&lt;br /&gt;                 &lt;/form&gt; </code></pre>