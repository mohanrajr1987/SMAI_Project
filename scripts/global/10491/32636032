<p>I have a considerable number of custom template tags that perform a variety of functions, including:</p>  <ul> <li>simple string transformation</li> <li>display of complex ui elements</li> <li>timestamp manipulation and formatting</li> <li>handling and display of user avatars</li> <li>etc...</li> </ul>  <p><strong>All of these functions reside in a single file</strong>: <code>app/templatetags/custom_tags.py</code>.  When I want to use one of these tags in a template, I import all of them using <code>{% load custom_tags %}</code>.  </p>  <p><strong>However, only a small subset of the available tags are actually used in any given template.</strong>  In other words, all these functions are being 'loaded' into the template, yet only a few of them are called in a specific web request.  </p>  <ul> <li>Is this inefficient, in terms of performance?  Should I be loading code more conservatively -- i.e., splitting up my custom tags into separate files and only loading the subset that I need?</li> <li>Or does this not matter, because all tags are loaded in memory -- i.e., subsequent calls to <code>{% load custom_tags %}</code> elsewhere in the application won't result in any additional overhead?</li> </ul>  <p>I apologize if there are incorrect assumptions or premises in this question.  I'd love to have a better understanding of the implications of importing python code in general, or in a Django environment specifically.</p>