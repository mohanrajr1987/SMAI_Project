<p>I want to upload profile picture in <code>yii user</code>. By so much digging, i came to know that i need to make a <code>profilefield</code>, which i did and called "<code>picture</code>" and then in view of <code>modules/user/registrtaion</code> i need to write this code, given below is my registration view file.</p>  <pre><code>&lt;?php          $profileFields=$profile-&gt;getFields();         if ($profileFields) {             foreach($profileFields as $field) {             ?&gt;     &lt;div class="row"&gt;         &lt;?php          if ($widgetEdit = $field-&gt;widgetEdit($profile)) {             echo $widgetEdit;         } elseif ($field-&gt;range) {             echo $form-&gt;dropDownListControlGroup($profile,$field-&gt;varname,Profile::range($field-&gt;range));         } elseif ($field-&gt;field_type=="TEXT") {             echo$form-&gt;textArea($profile,$field-&gt;varname,array('rows'=&gt;6, 'cols'=&gt;50));         }  // I added this below elseif for picture upload  elseif ($field-&gt;field_type=="VARCHAR" &amp;&amp; $field-&gt;field_size=="500") {             echo$form-&gt;fileField($profile,$field-&gt;varname,array('rows'=&gt;6, 'cols'=&gt;50));         }else {             echo $form-&gt;textFieldControlGroup($profile,$field-&gt;varname,array('size'=&gt;60,'maxlength'=&gt;(($field-&gt;field_size)?$field-&gt;field_size:255)));         }          ?&gt;  </code></pre>  <p>and i am hanlding this profile picture in modules/model/registration.php like this. Given below is the code.</p>  <pre><code>&lt;?php  class RegistrationForm extends User {     public $verifyPassword;     public $verifyCode;       public function rules() {         $rules = array(             array('username, password, verifyPassword, email', 'required'),             array('username', 'length', 'max'=&gt;20, 'min' =&gt; 3,'message' =&gt; UserModule::t("Incorrect username (length between 3 and 20 characters).")),             array('password', 'length', 'max'=&gt;128, 'min' =&gt; 4,'message' =&gt; UserModule::t("Incorrect password (minimal length 4 symbols).")),             array('email', 'email'),             array('username', 'unique', 'message' =&gt; UserModule::t("This user's name already exists.")),             array('email', 'unique', 'message' =&gt; UserModule::t("This user's email address already exists.")),             //array('verifyPassword', 'compare', 'compareAttribute'=&gt;'password', 'message' =&gt; UserModule::t("Retype Password is incorrect.")),             array('username', 'match', 'pattern' =&gt; '/^[A-Za-z0-9_]+$/u','message' =&gt; UserModule::t("Incorrect symbols (A-z0-9).")),         // adding this liine  array('picture', 'file','types'=&gt;'jpg, gif, png', 'allowEmpty'=&gt;true, 'on'=&gt;'update'), //                      );         if (!(isset($_POST['ajax']) &amp;&amp; $_POST['ajax']==='registration-form')) {             array_push($rules,array('verifyCode', 'captcha', 'allowEmpty'=&gt;!UserModule::doCaptcha('registration')));         }          array_push($rules,array('verifyPassword', 'compare', 'compareAttribute'=&gt;'password', 'message' =&gt; UserModule::t("Retype Password is incorrect.")));         return $rules;     }  } </code></pre>  <p>and finally in the controller i handle the picture like this given below is the code.</p>  <pre><code>&lt;?php  class RegistrationController extends Controller {     public $defaultAction = 'registration';      /**      * Declares class-based actions.      */     public function actions()     {         return array(             'captcha'=&gt;array(                 'class'=&gt;'CCaptchaAction',                 'backColor'=&gt;0xFFFFFF,             ),         );     }     /**      * Registration user      */     public function actionRegistration() {             $model = new RegistrationForm;             $profile=new Profile;             $profile-&gt;regMode = true;              // ajax validator             if(isset($_POST['ajax']) &amp;&amp; $_POST['ajax']==='registration-form')             {                 echo UActiveForm::validate(array($model,$profile));                 Yii::app()-&gt;end();             }              if (Yii::app()-&gt;user-&gt;id) {                 $this-&gt;redirect(Yii::app()-&gt;controller-&gt;module-&gt;profileUrl);             } else {                                         if(isset($_POST['RegistrationForm'])) {                      // handling picture                      $rnd = rand(0, 9999);  // generate random number between 0-9999                      $model-&gt;attributes = $_POST['RegistrationForm'];                      $uploadedFile = CUploadedFile::getInstance($model, 'picture');                     $fileName = "{$rnd}-{$uploadedFile}";  // random number + file name                     $model-&gt;picture = $fileName;                     if ($model-&gt;save()) {                     $uploadedFile-&gt;saveAs(Yii::app()-&gt;basePath . '/../img/' . $fileName);                     $this-&gt;redirect(array('view', 'id' =&gt; $model-&gt;id));                     }                   // hanlding picture ends                                              $profile-&gt;attributes=((isset($_POST['Profile'])?$_POST['Profile']:array()));                     if($model-&gt;validate()&amp;&amp;$profile-&gt;validate())                     {                         $soucePassword = $model-&gt;password;                         $model-&gt;activkey=UserModule::encrypting(microtime().$model-&gt;password);                         $model-&gt;password=UserModule::encrypting($model-&gt;password);                         $model-&gt;verifyPassword=UserModule::encrypting($model-&gt;verifyPassword);                         $model-&gt;superuser=0;                         $model-&gt;status=((Yii::app()-&gt;controller-&gt;module-&gt;activeAfterRegister)?User::STATUS_ACTIVE:User::STATUS_NOACTIVE);                          if ($model-&gt;save()) {                             $profile-&gt;user_id=$model-&gt;id;                             $profile-&gt;save();                             if (Yii::app()-&gt;controller-&gt;module-&gt;sendActivationMail) {                                 $activation_url = $this-&gt;createAbsoluteUrl('/user/activation/activation',array("activkey" =&gt; $model-&gt;activkey, "email" =&gt; $model-&gt;email));                                 UserModule::sendMail($model-&gt;email,UserModule::t("You registered from {site_name}",array('{site_name}'=&gt;Yii::app()-&gt;name)),UserModule::t("Please activate you account go to {activation_url}",array('{activation_url}'=&gt;$activation_url)));                             }                              if ((Yii::app()-&gt;controller-&gt;module-&gt;loginNotActiv||(Yii::app()-&gt;controller-&gt;module-&gt;activeAfterRegister&amp;&amp;Yii::app()-&gt;controller-&gt;module-&gt;sendActivationMail==false))&amp;&amp;Yii::app()-&gt;controller-&gt;module-&gt;autoLogin) {                                     $identity=new UserIdentity($model-&gt;username,$soucePassword);                                     $identity-&gt;authenticate();                                     Yii::app()-&gt;user-&gt;login($identity,0);                                     $this-&gt;redirect(Yii::app()-&gt;controller-&gt;module-&gt;returnUrl);                             } else {                                 if (!Yii::app()-&gt;controller-&gt;module-&gt;activeAfterRegister&amp;&amp;!Yii::app()-&gt;controller-&gt;module-&gt;sendActivationMail) {                                     Yii::app()-&gt;user-&gt;setFlash('registration',UserModule::t("Thank you for your registration. Contact Admin to activate your account."));                                 } elseif(Yii::app()-&gt;controller-&gt;module-&gt;activeAfterRegister&amp;&amp;Yii::app()-&gt;controller-&gt;module-&gt;sendActivationMail==false) {                                     Yii::app()-&gt;user-&gt;setFlash('registration',UserModule::t("Thank you for your registration. Please {{login}}.",array('{{login}}'=&gt;CHtml::link(UserModule::t('Login'),Yii::app()-&gt;controller-&gt;module-&gt;loginUrl))));                                 } elseif(Yii::app()-&gt;controller-&gt;module-&gt;loginNotActiv) {                                     Yii::app()-&gt;user-&gt;setFlash('registration',UserModule::t("Thank you for your registration. Please check your email or login."));                                 } else {                                     Yii::app()-&gt;user-&gt;setFlash('registration',UserModule::t("Thank you for your registration. Please check your email."));                                 }                                 $this-&gt;refresh();                             }                         }                     } else $profile-&gt;validate();                 }                 $this-&gt;render('/user/registration',array('model'=&gt;$model,'profile'=&gt;$profile));             }     } } </code></pre>  <p>so the problem is,, when i enter the details on registraion form and upload a picture i get this error <code>Property "RegistrationForm.picture" is not defined.</code>  The problem lies in controller line number 45 which is </p>  <pre><code> $model-&gt;picture = $fileName; </code></pre>  <p>I already have <code>picture</code> field in "<code>profiles</code>" table. But the thing is i am totally confused, and neither at yii framework forum nor at stackoverflow i found a proper documentation over this thing. Please help. </p>  <p>My profile.php (model) code</p>  <pre><code>    &lt;?php      class Profile extends UActiveRecord     {         /**          * The followings are the available columns in table 'profiles':          * @var integer $user_id          * @var boolean $regMode          */         public $regMode = false;          private $_model;         private $_modelReg;         private $_rules = array();          /**          * Returns the static model of the specified AR class.          * @return CActiveRecord the static model class          */         public static function model($className=__CLASS__)         {             return parent::model($className);         }          /**          * @return string the associated database table name          */         public function tableName()         {             return Yii::app()-&gt;getModule('user')-&gt;tableProfiles;         }          /**          * @return array validation rules for model attributes.          */         public function rules()         {             if (!$this-&gt;_rules) {                 $required = array();                 $numerical = array();                 $float = array();                        $decimal = array();                 $rules = array();                  $model=$this-&gt;getFields();                  foreach ($model as $field) {                     $field_rule = array();                     if ($field-&gt;required==ProfileField::REQUIRED_YES_NOT_SHOW_REG||$field-&gt;required==ProfileField::REQUIRED_YES_SHOW_REG)                         array_push($required,$field-&gt;varname);                     if ($field-&gt;field_type=='FLOAT')                         array_push($float,$field-&gt;varname);                     if ($field-&gt;field_type=='DECIMAL')                         array_push($decimal,$field-&gt;varname);                     if ($field-&gt;field_type=='INTEGER')                         array_push($numerical,$field-&gt;varname);                     if ($field-&gt;field_type=='VARCHAR'||$field-&gt;field_type=='TEXT') {                         $field_rule = array($field-&gt;varname, 'length', 'max'=&gt;$field-&gt;field_size, 'min' =&gt; $field-&gt;field_size_min);                         if ($field-&gt;error_message) $field_rule['message'] = UserModule::t($field-&gt;error_message);                         array_push($rules,$field_rule);                     }                     if ($field-&gt;other_validator) {                         if (strpos($field-&gt;other_validator,'{')===0) {                             $validator = (array)CJavaScript::jsonDecode($field-&gt;other_validator);                             foreach ($validator as $name=&gt;$val) {                                 $field_rule = array($field-&gt;varname, $name);                                 $field_rule = array_merge($field_rule,(array)$validator[$name]);                                 if ($field-&gt;error_message) $field_rule['message'] = UserModule::t($field-&gt;error_message);                                 array_push($rules,$field_rule);                             }                         } else {                             $field_rule = array($field-&gt;varname, $field-&gt;other_validator);                             if ($field-&gt;error_message) $field_rule['message'] = UserModule::t($field-&gt;error_message);                             array_push($rules,$field_rule);                         }                     } elseif ($field-&gt;field_type=='DATE') {                         $field_rule = array($field-&gt;varname, 'type', 'type' =&gt; 'date', 'dateFormat' =&gt; 'yyyy-mm-dd', 'allowEmpty'=&gt;true);                         if ($field-&gt;error_message) $field_rule['message'] = UserModule::t($field-&gt;error_message);                         array_push($rules,$field_rule);                     }                     if ($field-&gt;match) {                         $field_rule = array($field-&gt;varname, 'match', 'pattern' =&gt; $field-&gt;match);                         if ($field-&gt;error_message) $field_rule['message'] = UserModule::t($field-&gt;error_message);                         array_push($rules,$field_rule);                     }                     if ($field-&gt;range) {                         $field_rule = array($field-&gt;varname, 'in', 'range' =&gt; self::rangeRules($field-&gt;range));                         if ($field-&gt;error_message) $field_rule['message'] = UserModule::t($field-&gt;error_message);                         array_push($rules,$field_rule);                     }                 }                  array_push($rules,array(implode(',',$required), 'required'));                 array_push($rules,array(implode(',',$numerical), 'numerical', 'integerOnly'=&gt;true));                 array_push($rules,array(implode(',',$float), 'type', 'type'=&gt;'float'));                 array_push($rules,array(implode(',',$decimal), 'match', 'pattern' =&gt; '/^\s*[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?\s*$/'));                 $this-&gt;_rules = $rules;             }             return $this-&gt;_rules;         }          /**          * @return array relational rules.          */         public function relations()         {             // NOTE: you may need to adjust the relation name and the related             // class name for the relations automatically generated below.             $relations = array(                 'user'=&gt;array(self::HAS_ONE, 'User', 'id'),             );             if (isset(Yii::app()-&gt;getModule('user')-&gt;profileRelations)) $relations = array_merge($relations,Yii::app()-&gt;getModule('user')-&gt;profileRelations);             return $relations;         }          /**          * @return array customized attribute labels (name=&gt;label)          */         public function attributeLabels()         {             $labels = array(                 'user_id' =&gt; UserModule::t('User ID'),             );             $model=$this-&gt;getFields();              foreach ($model as $field)                 $labels[$field-&gt;varname] = ((Yii::app()-&gt;getModule('user')-&gt;fieldsMessage)?UserModule::t($field-&gt;title,array(),Yii::app()-&gt;getModule('user')-&gt;fieldsMessage):UserModule::t($field-&gt;title));              return $labels;         }          private function rangeRules($str) {             $rules = explode(';',$str);             for ($i=0;$i&lt;count($rules);$i++)                 $rules[$i] = current(explode("==",$rules[$i]));             return $rules;         }          static public function range($str,$fieldValue=NULL) {             $rules = explode(';',$str);             $array = array();             for ($i=0;$i&lt;count($rules);$i++) {                 $item = explode("==",$rules[$i]);                 if (isset($item[0])) $array[$item[0]] = ((isset($item[1]))?$item[1]:$item[0]);             }             if (isset($fieldValue))                  if (isset($array[$fieldValue])) return $array[$fieldValue]; else return '';             else                 return $array;         }          public function widgetAttributes() {             $data = array();             $model=$this-&gt;getFields();              foreach ($model as $field) {                 if ($field-&gt;widget) $data[$field-&gt;varname]=$field-&gt;widget;             }             return $data;         }          public function widgetParams($fieldName) {             $data = array();             $model=$this-&gt;getFields();              foreach ($model as $field) {                 if ($field-&gt;widget) $data[$field-&gt;varname]=$field-&gt;widgetparams;             }             return $data[$fieldName];         }          public function getFields() {             if ($this-&gt;regMode) {                 if (!$this-&gt;_modelReg)   $this-&gt;_modelReg=ProfileField::model()-&gt;forRegistration()-&gt;findAll();             return $this-&gt;_modelReg;         } else {             if (!$this-&gt;_model)                 $this-&gt;_model=ProfileField::model()-&gt;forOwner()-&gt;findAll();             return $this-&gt;_model;         }     } } </code></pre>