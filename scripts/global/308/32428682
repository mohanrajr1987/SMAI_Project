<p>I've been fighting a memory leak in my software, where the virtual address space of my application is slowly used up by shared memory.  Based on the amount of memory leaked, it was very clearly in the form of texture objects.</p>  <p>I've isolated the bug to the following code sample.  I created a share-able DX9 texture object, I open it from a D3D11 device, and then I release it.  In this sample, running on my NVIDIA GeForce 780 Ti on Windows 8.1, my 32-bit process very quickly runs out of VAS as these textures do not appear to get freed.</p>  <p>Am I misunderstanding an API, is there a bug in DirectX, or is there a bug in my GPU driver?  Any suggestions on fixing this, or who to contact, are greatly appreciated.</p>  <pre><code>while (true) {     IDirect3DTexture9* tex = nullptr;     HANDLE handle = 0;     hr = device9-&gt;CreateTexture(1024, 1024, 1, D3DUSAGE_RENDERTARGET, D3DFMT_A16B16G16R16F, D3DPOOL_DEFAULT, &amp;tex, &amp;handle);     VERIFY_SUCCEEDED(hr);      ID3D11Texture2D* tex11;     hr = device11-&gt;OpenSharedResource(handle, __uuidof(ID3D11Texture2D), (void**)&amp;tex11);     VERIFY_SUCCEEDED(hr);      tex11-&gt;Release();     tex-&gt;Release();      Sleep(10); } </code></pre>  <p>If I comment out the "OpenSharedResource" section there is no leak.  The DirectX 9 textures are created and freed repeatedly with no issue.</p>  <pre><code>while (true) {     IDirect3DTexture9* tex = nullptr;     HANDLE handle = 0;     hr = device9-&gt;CreateTexture(1024, 1024, 1, D3DUSAGE_RENDERTARGET, D3DFMT_A16B16G16R16F, D3DPOOL_DEFAULT, &amp;tex, &amp;handle);     VERIFY_SUCCEEDED(hr);      //ID3D11Texture2D* tex11;     //hr = device11-&gt;OpenSharedResource(handle, __uuidof(ID3D11Texture2D), (void**)&amp;tex11);     //VERIFY_SUCCEEDED(hr);      //tex11-&gt;Release();     tex-&gt;Release();      Sleep(10); } </code></pre>