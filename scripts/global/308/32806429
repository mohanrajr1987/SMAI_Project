<p>I have a big problem with the camera in my directx code. I want to use squad interpolation so that the rotation between the fixed points on my path is smooth.</p>  <p><a href="http://i.stack.imgur.com/ulknN.jpg" rel="nofollow"><img src="http://i.stack.imgur.com/ulknN.jpg" alt="Examplepath"></a></p>  <p>The problem starts, that I don´t really know what values my quaternions need. I started using simple 4d vectors with the degrees from my starting point and created SimpleMath::Quaternions.</p>  <p>e.g. first point (0,0,0,0) second (0,90,0,0) third (0,135,0,0)</p>  <p>Than i put those "quaternions" into the DirectX::XMQuaternionSlerp function and interpolated them. And I don´t know why, but it did what I wanted it to do.</p>  <p>But my research let me find out, that this can not be real quaternions, they are more euler angles, aren´t they?</p>  <p>So my questions:</p>  <ol> <li><p>How do I get the real Quaternions, if they aren´t one?</p></li> <li><p>In my book "Real-Time Rendering" the compute quaternions between the given. </p>  <p>ai = qi*exp[-((log(qi^-1*qi-1)+log(qi^-1*qi+1))/4]</p>  <p>What is the best way to compute them in directX11?</p></li> </ol>  <p>My goal is to use DirectX::XMQuaternionSquad, but I´m trying for 4 days now to get there. Hopefully, there is someone who can help me. Thank you.</p>