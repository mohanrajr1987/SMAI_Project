<p>I am compiling a simple code to capture screenshot using <code>GetBackBufer()</code> method and here is my complete code for reference:</p>  <pre><code>// include the basic windows header files and the Direct3D header files #include &lt;windows.h&gt; #include &lt;windowsx.h&gt; #include &lt;d3d11.h&gt; #include &lt;C:\Program Files (x86)\Microsoft DirectX SDK (June 2010)\Include\d3dx11.h&gt; #include &lt;C:\Program Files (x86)\Microsoft DirectX SDK (June 2010)\Include\d3dx10.h&gt; #include &lt;d3d9.h&gt; #include &lt;C:\Program Files (x86)\Microsoft DirectX SDK (June 2010)\Include\d3dx9tex.h&gt;  // include the Direct3D Library file #pragma comment (lib, "d3d11.lib") #pragma comment (lib, "d3dx11.lib") #pragma comment (lib, "d3dx10.lib") #pragma comment (lib, "d3dx9.lib")  // global declarations IDXGISwapChain *swapchain;             // the pointer to the swap chain interface ID3D11Device *dev;                     // the pointer to our Direct3D device interface ID3D11DeviceContext *devcon;           // the pointer to our Direct3D device context  // function prototypes void InitD3D(HWND hWnd);    // sets up and initializes Direct3D void CleanD3D(void);        // closes Direct3D and releases memory  // the WindowProc function prototype LRESULT CALLBACK WindowProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam);  // the entry point for any Windows program int WINAPI WinMain(HINSTANCE hInstance,     HINSTANCE hPrevInstance,     LPSTR lpCmdLine,     int nCmdShow) {     HWND hWnd;     WNDCLASSEX wc;      ZeroMemory(&amp;wc, sizeof(WNDCLASSEX));      wc.cbSize = sizeof(WNDCLASSEX);     wc.style = CS_HREDRAW | CS_VREDRAW;     wc.lpfnWndProc = WindowProc;     wc.hInstance = hInstance;     wc.hCursor = LoadCursor(NULL, IDC_ARROW);     wc.hbrBackground = (HBRUSH)COLOR_WINDOW;     wc.lpszClassName = L"WindowClass";      RegisterClassEx(&amp;wc);      RECT wr = { 0, 0, 800, 600 };     AdjustWindowRect(&amp;wr, WS_OVERLAPPEDWINDOW, FALSE);      hWnd = CreateWindowEx(NULL,         L"WindowClass",         L"Our First Direct3D Program",         WS_OVERLAPPEDWINDOW,         300,         300,         wr.right - wr.left,         wr.bottom - wr.top,         NULL,         NULL,         hInstance,         NULL);      ShowWindow(hWnd, nCmdShow);      // set up and initialize Direct3D     InitD3D(hWnd);      // enter the main loop:      MSG msg;      while (TRUE)     {         if (PeekMessage(&amp;msg, NULL, 0, 0, PM_REMOVE))         {             TranslateMessage(&amp;msg);             DispatchMessage(&amp;msg);              if (msg.message == WM_QUIT)                 break;         }         else         {             LPDIRECT3DDEVICE9 d3dDevice = NULL;              D3DPRESENT_PARAMETERS d3dpp;              ZeroMemory(&amp;d3dpp, sizeof(d3dpp));             d3dpp.Windowed = TRUE;             d3dpp.SwapEffect = D3DSWAPEFFECT_COPY;                IDirect3DSurface9 *offscreenSurface = 0;             d3dDevice-&gt;GetBackBuffer(0, 0, D3DBACKBUFFER_TYPE_MONO, &amp;offscreenSurface);             D3DXSaveSurfaceToFileA("E:\\filename.bmp", D3DXIFF_BMP, offscreenSurface, 0, 0);              // Run game code here             // ...             // ...         }     }      // clean up DirectX and COM     CleanD3D();      return msg.wParam; }   // this is the main message handler for the program LRESULT CALLBACK WindowProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) {     switch (message)     {     case WM_DESTROY:     {         PostQuitMessage(0);         return 0;     } break;     }      return DefWindowProc(hWnd, message, wParam, lParam); }   // this function initializes and prepares Direct3D for use void InitD3D(HWND hWnd) {     // create a struct to hold information about the swap chain     DXGI_SWAP_CHAIN_DESC scd;      // clear out the struct for use     ZeroMemory(&amp;scd, sizeof(DXGI_SWAP_CHAIN_DESC));      // fill the swap chain description struct     scd.BufferCount = 1;                                    // one back buffer     scd.BufferDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;     // use 32-bit color     scd.BufferUsage = DXGI_USAGE_RENDER_TARGET_OUTPUT;      // how swap chain is to be used     scd.OutputWindow = hWnd;                                // the window to be used     scd.SampleDesc.Count = 4;                               // how many multisamples     scd.Windowed = TRUE;                                    // windowed/full-screen mode      // create a device, device context and swap chain using the information in the scd struct     D3D11CreateDeviceAndSwapChain(NULL,         D3D_DRIVER_TYPE_HARDWARE,         NULL,         NULL,         NULL,         NULL,         D3D11_SDK_VERSION,         &amp;scd,         &amp;swapchain,         &amp;dev,         NULL,         &amp;devcon); }   // this is the function that cleans up Direct3D and COM void CleanD3D(void) {     // close and release all existing COM objects     swapchain-&gt;Release();     dev-&gt;Release();     devcon-&gt;Release(); } </code></pre>  <p>I am getting this error for the D3DXSaveSurfaceToFile function:</p>  <blockquote>   <p>1>Source.obj : error LNK2019: unresolved external symbol _D3DXSaveSurfaceToFileA@20 referenced in function _WinMain@16</p>      <p>1>c:\users\vrushali\documents\visual studio 2013\Projects\DirectXBackBufferTryTWO\Debug\DirectXBackBufferTryTWO.exe : fatal error LNK1120: 1 unresolved externals</p> </blockquote>  <p>I refered to a lot of SO threads regarding resolving this error and followed almost all the the procedures suggested <a href="http://stackoverflow.com/questions/17350521/error-lnk2019-unresolved-external-symbol-in-visual-studio">here</a>,<a href="https://msdn.microsoft.com/en-us/library/799kze2z.aspx" rel="nofollow">MSDN documentation: Linker Tools Error LNK2019</a>, <a href="http://stackoverflow.com/a/21937729/4794952">here</a> by changing the function to <code>SaveSurfacetoFileW</code> and using <code>L"E:\\filename.bmp"</code>. I also added the path to all library files and also copy pasted those library files in the project directory.</p>  <p>However after reading through a lot of threads I am not able to resolve this error. What am I doing wrong here? What else should I do in order to get rid of the unresolved external error? </p>