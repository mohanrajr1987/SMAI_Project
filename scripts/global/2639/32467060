<p>This is in the Phoenix fork of wxPython.</p>  <p>I'm trying to run a couple threads in the interests of not blocking the GUI.</p>  <p>Two of my threads work fine, but the other one never seem to hit its bound result function. I can tell that it's running, it just doesn't seem to properly post the event.</p>  <p>Here's the result function for the main calculation threads:</p>  <pre><code>def on_status_result(self, event):     if not self.panel.progress_bar.GetRange():         self.panel.progress_bar.SetRange(event.data.parcel_count)     self.panel.progress_bar.SetValue(event.data.current_parcel)     self.panel.status_label.SetLabel(event.data.message) </code></pre>  <p>Here's how I'm binding them:</p>  <pre><code>from wx.lib.pubsub.core import Publisher PUB = Publisher() </code></pre>  <p>Here's how I'm binding the method:</p>  <pre><code>def post_event(message, data):     wx.CallAfter(lambda *a: Publisher().sendMessage(message, data=data)) </code></pre>  <p>And here are the threads. The first one does not work, but the second two do:</p>  <pre><code>class PrepareThread(threading.Thread):     def __init__(self, notify_window):         threading.Thread.__init__(self)         self._notify_window = notify_window         self._want_abort = False      def run(self):         while not prepare_collection(DATABASE, self._previous_id, self._current_id, self._year, self._col_type):             for status in range(10):                 post_event('prepare.running')             return None      def abort(self):         self._want_abort = True   class SetupThread(threading.Thread):     def __init__(self, notify_window):         threading.Thread.__init__(self)         self._notify_window = notify_window         self._want_abort = False      def run(self):         while not self._want_abort:             do_more_stuff_with_the_database()             return None      def abort(self):         self._want_abort = True   class LatestCollectionsThread(threading.Thread):     def __init__(self, notify_window):         threading.Thread.__init__(self)         self._notify_window = notify_window         self._want_abort = False      def run(self):         while not self._want_abort:             do_stuff_with_my_database()             return None      def abort(self):         self._want_abort = True </code></pre>  <p><code>prepare_collection</code> is a function that returns a <code>Status</code> object that looks like this:</p>  <pre><code>class Status:     def __init__(self, parcel_count, current_parcel, total, message):         self.parcel_count = parcel_count         self.current_parcel = current_parcel         self.total = total         self.message = message </code></pre>  <p>Here's how I'm creating/starting the PrepareThread:</p>  <pre><code>MainForm(wx.Form):     prepare_thread = PrepareThread(self)     prepare_thread.start() </code></pre>  <p>I've tried stubbing out <code>prepare_collection</code> with <code>range(10)</code>, but I still never hit the event handler.</p>