<p>I'm creating a subclass of wx.lib.sized_controls.SizedDialog containing some TextCtrls and a standard button sizer, but for some reason, any control that has the wx.TE_READONLY style flag set doesn't appear to be a part of the tab order inside the dialog. I can set focus to such a control by clicking on it or using its associated mnemonic, but as soon as I tab away from it, I can't tab back.</p>  <p>The code below demonstrates the problem. First, notice that you can tab to the editable field, type some text, and it then appears in the second, which is set to be read-only. You can press Alt+N to jump keyboard focus to the read-only control, but otherwise, you cannot set focus to it using the keyboard.</p>  <pre><code>import wx import wx.lib.sized_controls as sc  class SampleDialog(sc.SizedDialog):     def __init__(self, *args, **kwargs):         super(SampleDialog, self).__init__(None, -1, 'A Sample Dialog', style=wx.DEFAULT_DIALOG_STYLE, *args, **kwargs)         self.Centre()         self.panel = self.GetContentsPane()         self.panel.SetSizerType('form')         self.setup_layout()      def create_field(self, label=None, text=None, read_only=True):         control_label = wx.StaticText(self.panel, label=label)         control = wx.TextCtrl(self.panel, -1, text)         control.SetSizerProps(expand=True)          if read_only:             control.SetWindowStyle(wx.TE_READONLY)          return control      def setup_layout(self):         self.editable_field = self.create_field('&amp;Editable field: ', '', read_only=False)         self.non_editable_field = self.create_field('&amp;Non-editable field: ', '', read_only=True)         self.editable_field.SetFocus()         self.editable_field.Bind(wx.EVT_TEXT, self.onTextChange)          button_sizer = self.CreateButtonSizer(wx.OK)         self.SetButtonSizer(button_sizer)      def onTextChange(self, event):         self.non_editable_field.SetValue(self.editable_field.GetValue())         event.Skip()  app = wx.App() sample_dialog = SampleDialog() sample_dialog.ShowModal() sample_dialog.Destroy() app.MainLoop() </code></pre>  <p>OS: Windows 7 Professional, 64-bit</p>  <p>Python 2.7.10 (default, May 23 2015, 09:40:32) [MSC v.1500 32 bit (Intel)] on win32</p>  <p>wxPython (Phoenix) 3.0.3.dev1830+0b5f910</p>