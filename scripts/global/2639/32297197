<p>In a wxPython application I have an embedded a FigureCanvas with a matplotlib figure. I want to be able to switch the figure by loading a new one. However, the figure is not being updated. </p>  <p>Answers to similar topics suggests that <code>panel.canvas.draw()</code> and <code>panel.Refresh()</code> should do the trick, but I've also tried <code>panel.Update()</code> and <code>panel.canvas.Refresh()</code>. I fear that this only works if you want to redraw the canvas <em>with the same</em> figure? </p>  <p>So my question is: how do you replace the figure inside a canvas and make it update?</p>  <p>Below is a small (non-working) example. First a figure is loaded with a single axis. If you from the embedded shell type <code>panel.LoadFigure()</code> a new figure with 2x2 subplots is created and put into the canvas. But the new figure is not shown.</p>  <pre><code>import numpy as np import wx from wx.py.shell import Shell  from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas import matplotlib.pyplot as plt   class ShellPanel(wx.Panel):     def __init__(self, parent):         wx.Panel.__init__(self, parent)         self.shell = Shell(self)         self.sizer = wx.BoxSizer(wx.VERTICAL)         self.sizer.Add(self.shell, 1, wx.GROW)         self.SetSizer(self.sizer)         self.Layout()         self.Fit()   class FigurePanel(wx.Panel):     def __init__(self, parent):          wx.Panel.__init__(self, parent)         self.parent = parent         self.sizer = wx.BoxSizer(wx.VERTICAL)         self.figure, ax = plt.subplots()         self.canvas = FigureCanvas(self, -1, self.figure)         self.shellpanel = ShellPanel(self)         s1 = wx.BoxSizer(wx.VERTICAL)         s1.Add(self.canvas, 0, wx.GROW)         s1.Add(self.shellpanel, 1 , wx.EXPAND)         self.sizer.Add(s1, 5, wx.GROW)          self.SetSizer(self.sizer)         self.Layout()         self.Fit()      def LoadFigure(self):         self.figure, ax = plt.subplots(2, 2)         self.canvas.draw()         self.Refresh()   class FigureFrame(wx.Frame):     def __init__(self, parent, id, title, size):         wx.Frame.__init__(self, parent, id, title, size=size)  if __name__ == "__main__":     app = wx.App(False)     fr = FigureFrame(None, -1, title='Figure Loader', size=(wx.DisplaySize()[0]/2, wx.DisplaySize()[1]*3/4))     panel = FigurePanel(fr)     fr.Show()     app.MainLoop() </code></pre>