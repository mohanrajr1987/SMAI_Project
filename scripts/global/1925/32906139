<p>In AWS Lambda people can create a node.js function and trigger it through events, for example a message, etc..</p>  <p>I wonder how this can work 'under the hood' and how to put something like this together in Haskell. The uploaded functions are basically single function libraries without any <code>main</code> function.</p>  <p>Means on the CLI or via an API you can call any of your functions by name (and with the required input) and you get the output defined by the function signature--or, alternatively an error of course.</p>  <p>Would it be possible to do this in Haskell? </p>  <p>To clarify: what I want to do is for example loading a number of different single function Haskell libraries on a Haskell platform or any other execution context that is in my data center and execute / call them by name via the CLI or an API just in the same way AWS Lambda works with node.js functions.</p>