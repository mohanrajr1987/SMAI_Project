<pre><code>import Math.NumberTheory.Primes (factorise) import System.Timeout (timeout) import Control.Monad (liftM)  type RetType = [(Integer, Int)] -- factorise's return type  -- proposed function timedFact :: Integer -&gt; Integer -&gt; Either RetType Integer timedFact u n = ? </code></pre>  <p>Trying to understand how to write a wrapper function for factorise which times out after u usec.  If it succeeds it returns <code>RetType</code> otherwise it returns <code>Integer</code> (what was passed in)</p>  <p>I'm kind of new to Haskell.  I understand a timeout requires working in the <code>IO</code> Monad but I'm having trouble pulling back the appropriate result.  (Note: I'm not married to <code>Either</code>.  <code>Maybe RetType</code> would be fine, too).</p>  <p>Thanks for any help</p>