<p>I am currently going through the implementation of the <a href="https://hackage.haskell.org/package/async-2.0.2/docs/src/Control-Concurrent-Async.html" rel="nofollow">async</a> library (for self-studying purpose) and have a question regarding the <code>waitBoth</code> function.</p>  <p>The library implements the function as follows:</p>  <pre><code>waitBoth :: Async a -&gt; Async b -&gt; IO (a,b) waitBoth left right =   atomically $ do     a &lt;- waitSTM left            `orElse`          (waitSTM right &gt;&gt; retry)     b &lt;- waitSTM right     return (a,b) </code></pre>  <p>And I was wondering if I could implement the function in terms of the <code>waitEither</code> and <code>wait</code> functions:</p>  <pre><code>{-# LANGUAGE LambdaCase        #-} {-# LANGUAGE TupleSections     #-}  waitBoth :: Async a -&gt; Async b -&gt; IO (a,b) waitBoth a b =   waitEither a b &gt;&gt;= \case     Left res  -&gt; (res,) &lt;$&gt; wait b     Right res -&gt; (,res) &lt;$&gt; wait a </code></pre>  <p>Are these two versions exactly the same or is there any subtle semantical or performance differences?</p>