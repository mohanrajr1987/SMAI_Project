<p>1.how to count the number of nested in tuples</p>  <p>2.got error when union, even if number of nested are the same, how to union this list of tuples?</p>  <p>error:</p>  <pre><code>&lt;interactive&gt;:13:1:     No instance for (Eq Expr) arising from a use of `union'     Possible fix: add an instance declaration for (Eq Expr)     In the expression: union b1 b2     In an equation for `it': it = union b1 b2 </code></pre>  <p>haskell code:</p>  <pre><code>countnest :: (Int,Int) -&gt; Int countnest ((a1,a2), (b1,b2)) = max (max ((countnest (fst (a1,a2)))+1) ((countnest (snd (a1,a2)))+1)) (max ((countnest (fst (b1,b2)))+1) ((countnest (snd (b1,b2)))+1)) countnest (a1, (b1,b2)) = max 0 (max ((countnest (fst (b1,b2)))+1) ((countnest (snd (b1,b2)))+1)) countnest ((a1,a2), b1) = max (max ((countnest (fst (a1,a2)))+1) ((countnest (snd (a1,a2)))+1)) 0 countnest (a1, a2) = 1 countnest a1 = 1  rotate :: Int -&gt; [a] -&gt; [a] rotate _ [] = [] rotate n xs = zipWith const (drop n (cycle xs)) xs  rev2 :: [a] -&gt; [a] rev2 (x:[]) = [x] rev2 (x:xs) = rev xs ++ [x]  flatten1 :: [[a]] -&gt; [a] flatten1 xss = foldr (++) [] xss  getUniqueOrder :: (Ord a) =&gt; [[a]] -&gt; [[a]] getUniqueOrder xs = nub ( map sort xs)  getUnique :: (Ord a) =&gt; [[a]] -&gt; [[a]] getUnique xs = nub (xs)  data Expr = A | B | C | D | S | M2 | M1 | MM1 deriving (Show) let cartProd xs ys = [(x,y) | x &lt;- xs, y &lt;- ys] let m1 = cartProd [A,S] [B,M2] let m2 = (cartProd (cartProd (cartProd [A,S] [B,M2]) [C,M1]) [D])   let m3 = m2 ++ [(((S,MM1),MM1),MM1)]  let a1 = m3 let b1 = [rotate y a1 | y &lt;- [0..(length a1 -1)]] let a2 = rev a1 let b2 = [rotate y a2 | y &lt;- [0..(length a2 -1)]] union b1 b2 </code></pre>  <p>when compile countnest got error, after tried many times, still can not  find where is wrong, already match pattern</p>  <pre><code>*Main&gt; :l oo.hs [1 of 1] Compiling Main             ( oo.hs, interpreted )  oo.hs:140:12:     Couldn't match expected type `Int'                 with actual type `((Int, Int), (Int, Int))'     In the pattern: (a1, a2)     In the pattern: ((a1, a2), (b1, b2))     In an equation for `countnest':         countnest ((a1, a2), (b1, b2))           = max               (max                  ((countnest (fst (a1, a2))) + 1) ((countnest (snd (a1, a2))) + 1))               (max                  ((countnest (fst (b1, b2))) + 1) ((countnest (snd (b1, b2))) + 1))  oo.hs:140:21:     Couldn't match expected type `Int'                 with actual type `((Int, Int), (Int, Int))'     In the pattern: (b1, b2)     In the pattern: ((a1, a2), (b1, b2))     In an equation for `countnest':         countnest ((a1, a2), (b1, b2))           = max               (max                  ((countnest (fst (a1, a2))) + 1) ((countnest (snd (a1, a2))) + 1))               (max                  ((countnest (fst (b1, b2))) + 1) ((countnest (snd (b1, b2))) + 1)) </code></pre>