<p>I'm trying to build a little program in Haskell in Leksah that will convert an .lhs file to an .hs file. But I can't get it to build without errors. Any help would be appreciated. I'm new to Haskell so forgive me if the answer is obvious, though I can't see it. Here is the code and error:</p>  <pre><code>-- Converts .lhs (literary Haskell files) to .hs (plain Haskell files) -- Keeps only the statements which are normally compiled, plus blank lines.  -- To use: --    ghc --make lhs2hs.hs -- to get an executable file lhs2hs. -- Then --    lhs2hs filename -- will open filename.lhs and save the converted file in filename.hs  -- by Scot Drysdale on 7/28/07, based on SOE program on p. 241  module Main where import System.IO -- import System.IO.Error (catchIOError) import Control.Exception (catch) import System.Environment   -- to allow getArgs  -- Opens a file, given name and mode openGivenFile :: String -&gt; IOMode -&gt; IO Handle openGivenFile name mode   =  catch (do handle &lt;- openFile name mode                return handle)              handler             where               handler :: IOError -&gt; IO Handle                -- Next line does not match IO Handle               handler ex = putStrLn $ "Caught exception: " ++ show ex                                 --   (\e -&gt; error ("Cannot open " ++ name))  main = do args &lt;- getArgs           fromHandle &lt;- openGivenFile (args !! 0 ++ ".lhs") ReadMode           toHandle &lt;- openGivenFile (args !! 0 ++ ".hs") WriteMode           convertFile fromHandle toHandle           hClose fromHandle           hClose toHandle  -- Converts all the lines in a file convertFile :: Handle -&gt; Handle -&gt; IO () convertFile fromHandle toHandle   = catch (do line &lt;- hGetLine fromHandle               case line of                           ('&gt;' : ' ' : rest) -&gt; hPutStrLn toHandle rest                           ('&gt;' : rest)       -&gt; hPutStrLn toHandle rest                           ('\n' : rest)      -&gt; hPutStrLn toHandle line                           ('\r' : rest)      -&gt; hPutStrLn toHandle line                            _                  -&gt; return ()               convertFile fromHandle toHandle)               handler               where                handler :: IOError -&gt; IO ()                handler ex = putStrLn $ "Caught exception: " ++ show ex </code></pre>  <p>Error is :</p>  <pre><code> src\Main.hs:27:28-69:     Couldn't match type `()' with `Handle'     Expected type: IO Handle       Actual type: IO ()     In the expression: putStrLn $ "Caught exception: " ++ show ex     In an equation for `handler':         handler ex = putStrLn $ "Caught exception: " ++ show ex     In an equation for `openGivenFile':         openGivenFile name mode           = catch               (do { handle &lt;- openFile name mode;                     return handle })               handler           where               handler :: IOError -&gt; IO Handle               handler ex = putStrLn $ "Caught exception: " ++ show ex </code></pre>