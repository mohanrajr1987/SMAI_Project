<p>I am new to Haskell and for practice I have been implementing a bunch of functions (<code>map</code>, <code>length</code>, etc) using <code>foldr</code> and <code>foldl</code>. Now I want to move onto trees!</p>  <p>My tree data structure:</p>  <pre><code>data Tree a = Node a [Tree a] deriving (Show)  </code></pre>  <p>I have written a Haskell function to fold over trees:</p>  <pre><code>treeFold :: (b-&gt;a-&gt;b) -&gt; b -&gt; Tree a -&gt; b treeFold f s (Node a []) = f s a treeFold f s (Node a xs) = foldl f (f s a) (dFSList xs) </code></pre>  <p>where <code>dFSList</code> is a list of all the nodes in the tree. So doing something like:</p>  <pre><code>treeFold (+) 0 (Node 1 [Node 2 [], Node 3 []]) </code></pre>  <p>returns 6. Cool. </p>  <p>Now I want to write a Haskell function to map over trees but I want to use my <code>treeFold</code> function to do it. Here is what I have so far:</p>  <pre><code>treeMap f (Node a []) = (Node (f a) []) treeMap f (Node a (x:xs)) = (Node (f a) (a list involving foldTree somehow??)) </code></pre>  <p>How do I finish my <code>treeMap</code> function? I want to be able to do</p>  <pre><code>treeMap (+1) (Node 1 [Node 2 [], Node 3 []]) </code></pre>  <p>and it should return </p>  <pre><code>(Node 2 [Node 3 [], Node 4 []]) </code></pre>