<p>While reading a snipped from <a href="http://learnyouahaskell.com/making-our-own-types-and-typeclasses#recursive-data-structures">Haskell for Great Good</a> I found the following situation:</p>  <pre><code>treeInsert :: (Ord a) =&gt; a -&gt; Tree a -&gt; Tree a   treeInsert x EmptyTree = singleton x   treeInsert x (Node a left right)      | x == a = Node x left right     | x &lt; a  = Node a (treeInsert x left) right     | x &gt; a  = Node a left (treeInsert x right) </code></pre>  <p>Wouldn't it be better for performance if we just reused the given Tree when <code>x == a</code>?</p>  <pre><code>treeInsert :: (Ord a) =&gt; a -&gt; Tree a -&gt; Tree a   treeInsert x EmptyTree = singleton x   treeInsert x all@(Node a left right)      | x == a = all     | x &lt; a  = Node a (treeInsert x left) right     | otherwise  = Node a left (treeInsert x right) </code></pre>  <p>In real life coding, what should I do? Are there any drawbacks when returning the same thing?</p>