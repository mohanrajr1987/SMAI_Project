<p>I'm new to Haskell and I am trying to generate an random weighted number for an arbitrary cell in a Sudoku</p>  <pre><code>90% of the time, it should generate Nothing 10% of the time, it should generate a random value between 1 and 9 </code></pre>  <p>This is what I have came up with so far  (it does not compile)</p>  <pre><code>-- cell generates an arbitrary cell in a Sudoku -- cell :: Gen (Maybe Int)   cell = case x of 1 -&gt; return (Just y); _ -&gt; return Nothing         where std = mkStdGen(100)               (x, a) = randomR(1, 10) std               (y, a')= randomR(1, 9) std </code></pre>  <p>Any help in getting it to compile, or by pointing me towards a better approach is much appreciated</p>  <hr>  <p>Using Quickcheck this is how I did it:</p>  <pre><code>-- cell generates an arbitrary cell in a Sudoku cell :: Gen (Maybe Int) cell = frequency [(9, return Nothing),                 (1, do r &lt;- choose (1,9); return (Just r))]          -- an instance for generating Arbitrary Sudokus instance Arbitrary Sudoku where   arbitrary =     do rows &lt;- sequence [ sequence [ cell | j &lt;- [1..9] ] | i &lt;- [1..9] ]        return (Sudoku rows) </code></pre>