<p>1.how to periodically refresh and update the png image display?</p>  <p>2.how to set width and height of hbox for image to fit to display?</p>  <p>3.some packages must need sudo cabal install and some packages must need cabal install with normal user right, when sudo cabal install , some import return not exist, how to solve this?</p>  <p>for example i have installed Cairo but return Could not find module `Graphics.Rendering.Cairo' </p>  <ol start="4"> <li>when compile example in <a href="http://www.muitovar.com/gtk2hs/app1.html" rel="nofollow">http://www.muitovar.com/gtk2hs/app1.html</a> got error</li> </ol>  <p>error</p>  <pre><code>when run example got error in ghci (not sudo ghci) [1 of 1] Compiling Main ( aa.hs, interpreted ) aa.hs:20:32: Couldn't match expected type ‘(a0 -&gt; m0 a0) -&gt; t0 -&gt; IO Bool’ with actual type ‘IO ()’ The function ‘renderWithDrawable’ is applied to four arguments, but its type ‘DrawWindow -&gt; Render () -&gt; IO ()’ has only two In a stmt of a 'do' block: renderWithDrawable drawin myDraw return (eventSent x) In the expression: do { renderWithDrawable drawin myDraw return (eventSent x) } aa.hs:20:73: Couldn't match expected type ‘Graphics.UI.Gtk.Gdk.Events.Event -&gt; t0’ with actual type ‘Control.Monad.Trans.Reader.ReaderT (GHC.Ptr.Ptr any0) IO Bool’ The function ‘eventSent’ is applied to one argument, but its type ‘EventM any0 Bool’ has none In the fourth argument of ‘renderWithDrawable’, namely ‘(eventSent x)’ In a stmt of a 'do' block: renderWithDrawable drawin myDraw return (eventSent x) Failed, modules loaded: none. </code></pre>  <p>haskell code:</p>  <pre><code>import Graphics.Rendering.Chart.Easy import Graphics.Rendering.Chart.Backend.Cairo import Graphics.UI.Gtk import Control.Concurrent import Control.Concurrent.STM --import Graphics.UI.Gtk.Layout.BackgroundContainer --import Graphics.UI.Gtk.Board.BoardLink --import Graphics.UI.Gtk.Display.Image --import Graphics.UI.Gtk.Gdk.Screen import System.Environment --import Graphics.Rendering.Cairo signal :: [Double] -&gt; [(Double,Double)] signal xs = [ (x,(sin (x*3.14159/45) + 1) / 2 * (sin (x*3.14159/5))) | x &lt;- xs ]  data State = Start | Stop type Timer = (TVar State, TMVar ())  waitTimer :: Timer -&gt; IO () waitTimer (_, timer) = atomically $ readTMVar timer  stopTimer :: Timer -&gt; IO () stopTimer (state, _) = atomically $ writeTVar state Stop  newTimer :: Int -&gt; IO Timer newTimer n = do     state &lt;- atomically $ newTVar Start     timer &lt;- atomically $ newEmptyTMVar     forkIO $ do         threadDelay n         atomically $ do             runState &lt;- readTVar state             case runState of                 Start -&gt; putTMVar timer ()                 Stop  -&gt; return ()     return (state, timer)  hello =  toFile def "example1_big.png" $ do  layout_title .= "Amplitude Modulation"  setColors [opaque blue, opaque red]  plot (line "am" [signal [0,(0.5)..400]])  plot (points "am points" (signal [0,7..400]))  hello2 =  toFile def "example2_big.png" $ do  layout_title .= "Amplitude Modulation"  setColors [opaque blue, opaque red]  plot (line "am" [signal [5,(0.5)..400]])  plot (points "am points" (signal [5,7..400]))  main :: IO () main = do  hello  hello2  initGUI  window &lt;- windowNew  --Just screen &lt;- screenGetDefault  --window &lt;- screenGetRootWindow screen  --size &lt;- drawableGetSize window  --origin &lt;- drawWindowGetOrigin window  --Just pxbuf &lt;- pixbufGetFromDrawable window ((uncurry . uncurry Graphics.UI.Gtk.Rectangle) origin size)  --[fileName] &lt;- getArgs  --pixbufSave pxbuf fileName "png" []  bgBac1 &lt;- imageNewFromFile "example1_big.png"  bgBac2 &lt;- imageNewFromFile "example1_big.png"  bgBac3 &lt;- imageNewFromFile "example1_big.png"  bgBac4 &lt;- imageNewFromFile "example1_big.png"  col  &lt;- vBoxNew False 2  containerAdd window col  row0  &lt;- hBoxNew False 2  boxPackStart col row0 PackNatural 1  row1  &lt;- hBoxNew False 2  boxPackStart col row1 PackNatural 2  boxPackStart row0 bgBac1 PackNatural 0  boxPackStart row0 bgBac2 PackNatural 1  boxPackStart row1 bgBac3 PackNatural 0  boxPackStart row1 bgBac4 PackNatural 1  --Graphics.UI.Gtk.set row0 [ containerWidth := 300 ]  --Graphics.UI.Gtk.set row1 [ containerWidth := 300 ]  Just screen &lt;- screenGetDefault  rootwindow &lt;- screenGetRootWindow screen  size &lt;- drawableGetSize rootwindow   onUpdatePreview bgBac1 $ do {bgBac1 &lt;- imageNewFromFile "example2_big.png"; return ()}  --widgetSetSizeRequest window (fst size) (snd size)  widgetShowAll window  onDestroy window mainQuit  mainGUI   timer2 &lt;- newTimer (1 * 1000000)  forkIO $ do   waitTimer timer2   putStrLn "Timer 2 expired"  stopTimer timer2 </code></pre>