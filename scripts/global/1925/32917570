<p>Currently I use data <code>fields</code> to mimic a C-struct. But I found that unlike the domain-driven way of programming like <code>object.property</code>, in haskell the property names are all dumped into the module namespace. This creates some problems when I have more than one such struct. For example, what if I have two data types:</p>  <pre><code>data Person = Person { name :: Text, address :: Text } data Dog = Dog { name :: Text, breed :: Text } </code></pre>  <p>then GHC will complain: <code>Multiple declarations of ‘name’</code>. Thus I have to name the "properties" with prefixes:</p>  <pre><code>data Person = Person { getPersonName :: Text, getPersonAddress :: Text } data Dog = Dog { getDogName :: Text, getDogBreed :: Text } </code></pre>  <p>is this necessary? Or am I using the wrong way to define a struct?</p>