<p>Suppose I have 2 pages: <code>Page1</code> and <code>Page2</code>.</p>  <p>When my app starts, I navigate to <code>Page1</code> which eventually navigates to <code>Page2</code>.  On <code>Page2</code>, I want to prevent the user from using the back button to return to <code>Page1</code>.  Similarly, I want to prevent the user from navigating from <code>Page1</code> to <code>Page2</code> using the back button (navigation to <code>Page1</code> from <code>Page2</code> is possible).</p>  <p>I know in Silverlight apps, you'd simply use:</p>  <pre><code>NavigationService.RemoveBackEntry(); </code></pre>  <p>However, my app is built using Windows 10 APIs, which aren't Silverlight-based.  I've tried doing:<br> In <code>Page2</code>:</p>  <pre><code>protected override void OnNavigatedTo(NavigationEventArgs e) {     //...     if (e.SourcePageType == typeof(Page1))          Frame.BackStack.RemoveAt(Frame.BackStackDepth - 1); // remove the last entry if it represents Page1.     //... } </code></pre>  <p>And in <code>Page1</code>:</p>  <pre><code>protected override void OnNavigatedTo(NavigationEventArgs e) {     //...     if (e.SourcePageType == typeof(Page2))          Frame.BackStack.RemoveAt(Frame.BackStackDepth - 1); // remove the last entry if it represents Page2.     //... } </code></pre>  <p>I also tried using <code>Frame.BackStack.RemoveAt(0);</code> and <code>Frame.BackStack.Remove(new PageStackEntry(e.SourcePageType, e.Parameter, e.NavigationTransitionInfo);</code> instead of <code>Frame.BackStack.RemoveAt(Frame.BackStackDepth - 1);</code>.</p>  <p>None of this does what I want it to.  What can I do to make this work?</p>