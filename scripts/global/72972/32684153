<p>I wonder about the reason of assigning a token to an asynchronous task, as in the following example:</p>  <pre><code>  var ctSource = new CancellationTokenSource();   Task.Factory.StartNew(() =&gt; doSomething(), ctSource.Token); </code></pre>  <p>The MSDN documentation insists on passing a token to the running method in addition to assigning it to task, but to me it appears as an unnatural duplication.</p>  <ol> <li><p>If a token is assigned to a task, does it mean, that <code>ctSource.Cancel()</code>automatically triggers <code>TaskCancelledException</code> for the task?</p></li> <li><p>Is there a way to retrieve the assigned token from the task (other than by sending it as an argument) ?</p></li> </ol>  <p>If neither of those, what is the reason of assigning a token to a task?</p>