<p>I have a Windows Runtime component in which all of my classes need to expose a handle internally:</p>  <pre><code>private interface class IHandleContainer {     IntPtr GetHandle(); } namespace Foo {     public ref class Bar: IHandleContainer { ... }     public ref class Baz: IHandleContainer {      internal:         virtual IntPtr GetHandle() = IHandleContainer::GetHandle;     } } </code></pre>  <p>I don't need IHandleContainer to be public, but I <em>do</em> need IHandleContainer to be on the interface list so that each of my internal objects can be <code>safe_cast&lt;IHandleContainer&gt;</code> successfully.</p>  <p>Being outside of a namespace, <code>IHandleContainer</code> should not be emitted to metadata, but should have a COM GUID associated with it and by listing it on the ref class's interface list, CX should be able to wire up the correct response to QueryInterface.  Structurally, everything should "just work."  But the compiler isn't cooperating:</p>  <pre><code>error C3991: 'Foo::Baz': cannot implement a non-public or nested interface 'IHandleContainer' </code></pre>