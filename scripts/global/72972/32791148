<p>I've currently implemented a find function on a RichEditBox that when executed will search for <code>query</code> and select the found text inside the RichEditBox:</p>  <pre><code>String^ docText; currentRichEditBox-&gt;Document-&gt;GetText(Text::TextGetOptions::None, &amp;docText); start = currentRichEditBox-&gt;Document-&gt;Selection-&gt;EndPosition; end = docText-&gt;Length(); int result = newRange-&gt;FindText(query, end-start, Text::FindOptions::None); if (result != 0) {     currentRichEditBox-&gt;Document-&gt;Selection-&gt;SetRange(newRange-&gt;StartPosition, newRange-&gt;EndPosition); } </code></pre>  <p>This kind of gets the job done, but is overall a fairly subpar experience for a number of reasons:</p>  <ul> <li><p>The typical behavior of a search is not to select the found text. Instead, when comparing against existing apps such as Microsoft Edge or Word, the focus remains on the search box instead of shifting to the result text that was found, allowing for the query to be repeated or modified. </p></li> <li><p>A search should be able to highlight multiple results in the text at the same time.</p></li> <li><p>With this style implementation, there is no way to enable instant search where the results update live while the user types a query.</p></li> </ul>  <p>How can I implement search in a UWP Windows 10 app that functions as a regular search function instead of selecting the found text?</p>