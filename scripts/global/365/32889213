<p>I'm running a tiny web crawler so I really need a way to manage all discovered URLs in a unified manner. So, I've decided the standard to be a percent-encoded URL with a punycode hostname. How do I convert whatever piece of garbage parser finds into a properly escaped URL? So far I came up with the following code:</p>  <pre><code>import java.io.UnsupportedEncodingException; import java.net.IDN; import java.net.MalformedURLException; import java.net.URI; import java.net.URISyntaxException; import java.net.URL; import java.net.URLDecoder;  public class URLEscaper {   public static String toURI(String url) throws Exception {      if (url == null) return null;      // The input string might already be an escaped url, so decode     // it first, which is an idempotent operation:     URL u = new URL(URLDecoder.decode(url,"UTF-8"));      String scheme = u.getProtocol();     String usercreds = u.getUserInfo();     String host = IDN.toASCII(u.getHost());     int port = u.getPort();     String path = u.getPath();     String query = u.getQuery();     String fragment = u.getRef();     URI result = new URI(scheme, usercreds, host, port, path, query, fragment);      return result.toASCIIString();   } } </code></pre>  <p>The problem with this function is java.net.URI strict following RFC, which states that a hostname cannot contain any symbols besides <code>[a-z0-9-]</code>. So if a hostname contains, say underscore '_' then URI constructor will throw URISyntaxException. And there is a whole lot of perfectly accessible websites on the Internet, that contain an underscore in the hostname. And I wouldn't like to lose those. What can I use instead of java.net.URI?</p>