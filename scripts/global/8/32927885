<p>I have a script that contains a struct and I need to make several computations to the fields. Right now all of my computations are within my main function and everything is getting ugly and out of control. I'd like to know how I can create a function to be able to pass my struct to, to do calculations. The main also contains an integer value 'reccount' that holds the number of elements in my struct. I'd also like to pass that value to the new function. Here is the code that I am working with:</p>  <p><strong>EDIT:</strong></p>  <p>Includes attempt from duplicate post, however still getting an error that reads:</p>  <pre><code>extra_3_v001.c:16:23: warning: ‘struct studentData’ declared inside parameter list   # include &lt;stdio.h&gt; # include &lt;string.h&gt; # include &lt;stdlib.h&gt;  int max_array(int a[], int num_elements);  typedef struct { char name[30]; int quiz1; int quiz2; int quiz3; int quiz4; int mid1; int mid2; int finalexam; } studentData; studentData record[100];  void sortNames(struct studentData record);        int main(int argc, char *argv[])     // main function with command line arguments     {         FILE *iFilePointer,  *oFilePointer;          // file pointers for input and output files         char lineInput[200];         char name[30];           char buf[200];         char *token;         int q1, q2, q3, q4, midi, midii, final, max_quiz1,q1w,q2w,q3w,q4w,midiw,midiiw,finalw;         float sum_quiz1, sum_quiz2, sum_quiz3, sum_quiz4, average_q1, average_q2, average_q3, average_q4, average_m1, average_m2, average_fin, sum_m1, sum_m2, sum_fin;           int reccount = 0;         int k;          if ( argc !=      3)    // Validate that argument count not equal to 3         {             printf("Usage: %s   inputFileName outputFileName \n",   argv[0]);             exit(1);         }         else         {             printf("%s: %s \n%s: %s\n","Input will be read from", argv[1],"Output will be written into",argv[2]);             printf("\n\n");              //properly open the file and give the error messages             if ((iFilePointer  =  fopen(argv[1],"r"))     ==    NULL)                {                 printf("An error has been generated while attempting to open the input file %s\n", argv[1]);                 exit(1);             }              //validate that output file can be opened in 'write' mode             if ((oFilePointer = fopen(argv[2], "w")) == NULL)             {                 printf("An error has been generated while attempting to open the output file %s\n",argv[2]);                 fclose(iFilePointer);                 // make sure to close the previously opened file                 exit(1);             }              //write the header in the output file             fprintf(oFilePointer, "This is what was read from InputFile: %s: \r\n", argv[1]);              while (fgets(buf,   sizeof(buf),    iFilePointer)   != NULL)             {                   token = strtok(buf, ",");                 strcpy(name, token);                 strcpy(record[reccount].name,   token);                  token   =   strtok(NULL, ",");                 q1 = atof(token);                 record[reccount].quiz1 = q1;                 q1w = q1*.10;                  token = strtok( NULL,",");                 q2 = atof(token);                 record[reccount].quiz2 = q2;                 q2w = q2*.10;                  token   =   strtok(NULL,",");                 q3 = atof(token);                 record[reccount].quiz3 = q3;                 q3w = q3*.10;                  token = strtok(NULL, ",");                 q4 = atof(token);                 record[reccount].quiz4 = q4;                 q4w = q4*.10;                  token = strtok(NULL, ",");                 midi =  atof(token);                 record[reccount].mid1 = midi;                 midiw = midi*.20;                  token = strtok(NULL,",");                 midii = atof(token);                 record[reccount].mid2 = midii;                 midiiw = midii*.15;                  token = strtok(NULL,",");                 final    =  atof(token);                 record[reccount].finalexam = final;                 finalw = final*.25;                  reccount++;                  int FinalScore;                 FinalScore = q1w+q2w+q3w+q4w+midiw+midiiw+finalw;                 char LetterGrade;                  // Determine the letter Grade                 if(FinalScore&gt;=0  &amp;&amp; FinalScore &lt;= 59) LetterGrade = 'F';                 if(FinalScore&gt;=60 &amp;&amp; FinalScore &lt;=69) LetterGrade = 'D';                 if(FinalScore&gt;=70 &amp;&amp; FinalScore &lt;=79) LetterGrade = 'C';                 if(FinalScore&gt;=80 &amp;&amp; FinalScore &lt;=89) LetterGrade = 'B';                 if(FinalScore&gt;=90) LetterGrade = 'A';                    //display   in  screen                 printf("%s %d %d %d %d %d %d,%d\n\n",name,q1, q2, q3, q4, midi, midii,final);                 printf("\n");                 printf("%d",FinalScore);                 printf("\n");                 printf("%c",LetterGrade);                 printf("\n");                  //print the name    in  the output file                 fprintf(oFilePointer, "%s\r\n", name);                 printf("\n");              }             printf("\n");             printf("\n");             fclose(iFilePointer);             fclose(oFilePointer);              /* Loop through and report on data */             printf("The Student records are as follows: \n\n");             printf("Name Quiz1 Quiz2 Quiz3 Quiz4 Midterm1 Midterm2 Final \n");              for (k=0; k&lt;reccount; k++)                 {                      printf("%s %d %d %d %d %d %d %d\n\n", record[k].name, record[k].quiz1, record[k].quiz2, record[k].quiz3, record[k].quiz4, record[k].mid1, record[k].mid2,record[k].finalexam);                  }              // calculate the score sums                 for (k=0; k&lt;reccount; k++)                 {                     // quizzes                     sum_quiz1 += record[k].quiz1;                     sum_quiz2 += record[k].quiz2;                     sum_quiz3 += record[k].quiz3;                     sum_quiz4 += record[k].quiz4;                      // midterms                     sum_m1 += record[k].mid1;                     sum_m2 += record[k].mid2;                      // finals                     sum_fin += record[k].finalexam;                  }             // calculate the averages             // quizzes             average_q1 = sum_quiz1/reccount;             average_q2 = sum_quiz2/reccount;             average_q3 = sum_quiz3/reccount;             average_q4 = sum_quiz4/reccount;              //midterms             average_m1 = sum_m1/reccount;             average_m2 = sum_m2/reccount;              //finals             average_fin = sum_fin/reccount;               // display the averages             //quizzes             printf("%.2f\n",average_q1);             printf("%.2f\n",average_q2);             printf("%.2f\n",average_q3);             printf("%.2f\n",average_q4);             //midterms             printf("%.2f\n",average_m1);             printf("%.2f\n",average_m2);             //finals             printf("%.2f\n",average_fin);                  // calculate the quiz1 max                 int max_quiz1 = -32000;                  for (k=0; k&lt;reccount; k++)                 {                         if (record[k].quiz1 &gt; max_quiz1)                         {                             max_quiz1 = record[k].quiz1;                         }                   }              printf("quiz1 max is: ");             printf("%d\n", max_quiz1);              // calculate the quiz2 max                 int max_quiz2 = -32000;                  for (k=0; k&lt;reccount; k++)                 {                         if (record[k].quiz2 &gt; max_quiz2)                         {                             max_quiz2 = record[k].quiz2;                         }                   }              printf("quiz2 max is: ");             printf("%d\n", max_quiz2);              // calculate the quiz3 max                 int max_quiz3 = -32000;                  for (k=0; k&lt;reccount; k++)                 {                         if (record[k].quiz3 &gt; max_quiz3)                         {                             max_quiz3 = record[k].quiz3;                         }                   }              printf("quiz3 max is: ");             printf("%d\n", max_quiz3);              // calculate the quiz4 max                 int max_quiz4 = -32000;                  for (k=0; k&lt;reccount; k++)                 {                         if (record[k].quiz4 &gt; max_quiz4)                         {                             max_quiz4 = record[k].quiz4;                         }                   }              printf("quiz4 max is: ");             printf("%d\n", max_quiz4);              // calculate the midterm1 max                 int max_mid1 = -32000;                  for (k=0; k&lt;reccount; k++)                 {                         if (record[k].mid1 &gt; max_mid1)                         {                             max_mid1 = record[k].mid1;                         }                   }              printf("midterm1 max is: ");             printf("%d\n", max_mid1);                     // calculate the midterm2 max                 int max_mid2 = -32000;                  for (k=0; k&lt;reccount; k++)                 {                         if (record[k].mid2&gt; max_mid2)                         {                             max_mid2 = record[k].mid2;                         }                   }              printf("midterm2 max is: ");             printf("%d\n", max_mid2);                             // calculate the final max                 int max_fin = -32000;                  for (k=0; k&lt;reccount; k++)                 {                         if (record[k].finalexam&gt; max_fin)                         {                             max_fin = record[k].finalexam;                         }                   }              printf("Final max is: ");             printf("%d\n", max_fin);                       }        }     void studentData(struct studentData record) {     return; } </code></pre>