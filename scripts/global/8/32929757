<p>I am planning to write a Java FFI library that will use <a href="http://luajit.org/dynasm.html" rel="nofollow">DynASM</a> to generate the FFI trampolines at runtime, instead of performing interpreted calls via libffi.</p>    <p>At least initially, I do not plan on supporting passing/returning composite types by value.  C data structures will be created in Java via direct <code>ByteBuffer</code>s. Pointers will be obtained and dereferenced via <code>sun.misc.Unsafe</code> and represented as Java <code>long</code> values.</p>  <p>A JNI call works as follows:</p>    <pre class="lang-c prettyprint-override"><code>JNIEXPORT t JNICALL my_c_func(JNIEnv *env, jobject *self, jlong arg); </code></pre>  <p>The problem is that there are two unwanted arguments.  I would like to write a trampoline that removes these two arguments and then calls the actual function.  On Windows systems, it needs to translate from <code>stdcall</code> (used by JNI on Windows) to either <code>stdcall</code>, <code>cdecl</code>, or <code>thiscall</code>.  Also, DynASM does not support dynamic register allocation.</p>