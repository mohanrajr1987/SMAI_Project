<p>I have checked each and every question and article about this, that I could find, but nothing really answers it. I make it sound as if I have just one question, there's more of them.</p>  <p>Maybe I should first explain what I am trying to do, I am building a File Manager entirely in JavaScript, the File Manager receives files from Backend (PHP, Twig), it then stores them in an array of Folder, each Folder has its own Files, Folders is an Array, and Files in each Folder is an Array as well, these Files are also shown on the page, and the user can select, copy, cut, paste ( other operations ) them ( I am still writing these operations, because here lies the problem ).<br> Files on page have data-id assigned to them, so that I can easily operate on them between File Manager and the Backend, and because I know the ID of every and each file, I think I could completely eliminate traversing through Arrays of Files in search of a particular File, if I could only create an Array that would take the ID of a File as an Index, and because this is JavaScript, I can do that! but there are some problems with it.</p>  <p>Trying to use an Object for this task just does not work, because it is just way slower than Array ( now, I understand, that the differences in speed, even if in millions, are not that big, but why not try to dig for ultimate performance, right ? )</p>  <p>So here is a list of questions, that I cannot seem to find a reliable answer to:</p>  <ol> <li>Why is Object on Chrome so much faster, than Object on Firefox ?</li> <li>Why is accessing an undefined index on Chrome so much slower ?</li> <li>Why is Array so much faster on Firefox, than on Chrome ?</li> <li>I know why Chrome loses performance with higher indexes ( at 100k it transforms the array into a list, I think, it was answered with a link to source in another question on SO ), but Firefox loses performance gradually as if it traveresed to higher indexes sequentially, even if accessed directly, why is that ?</li> <li>Why is an Array extermely slow when there is only one element in it, but that element is at a very high index ?</li> </ol>  <p>There are probably some more questions I have, but I cannot think of them right now.</p>  <hr>  <p>The fastest configuration I found, that supports IDs as indexes and holes between them, as well as starting at a high index, is using an Array that holds the data you want to store, and another array, that just holds the indexes, so that when you are searching for an object with ID 10, you touch the index Array, instead of the Array with data. <br> You can see an example of this in <a href="http://jsperf.com/array-management-performance/2" rel="nofollow">http://jsperf.com/array-management-performance/2</a>.</p>  <p>EDIT: If you want to see the performance degradation, please "review" this jsperf and change minId and maxId to some big numebers.</p>  <hr>  <p>Here are some stats:</p>  <p>Object</p>  <p>Read Defined: Firefox 165.173 mln ops/sec | Chrome 351.699 mln ops/sec<br> Read Undefined: Firefox 98.582 mln ops/sec | Chrome 54.666 mln ops/sec<br> Write Close: Firefox 7.599 mln ops/sec | Chrome 291.244 mln ops/sec<br> Write Far: Firefox 5.599 mln ops/sec | Chrome 93.733 mln ops/sec<br> Write Overwrite: Firefox 7.599 mln ops/sec | Chrome 291.244 mln ops/sec<br></p>  <p>Array</p>  <p>Read Defined: Firefox 681.206 mln ops/sec | Chrome 401.522 mln ops/sec<br> Read Undefined: Firefox 681.206 mln ops/sec | Chrome 62.827 mln ops/sec<br> Write Close: Firefox 400.234 mln ops/sec | Chrome 121.519 mln ops/sec<br> Write Far: Firefox 348.560 mln ops/sec | Chrome 121.519 mln ops/sec<br> Write Overwrite: Firefox 400.234 mln ops/sec | Chrome 234.337 mln ops/sec<br></p>  <p>P.S. Did you know, that Read Defined is faster on Chrome on Mobile, than on Chrome on Desktop ?</p>  <p>I jsperf-ed every single question I have here, so either my/others' tests were incorrectly written, or this is some really funky stuff.</p>  <p><a href="http://jsperf.com/array-management-performance/2" rel="nofollow">http://jsperf.com/array-management-performance/2</a><br> <a href="http://jsperf.com/array-in-the-middle-of-nowhere" rel="nofollow">http://jsperf.com/array-in-the-middle-of-nowhere</a><br> <a href="http://jsperf.com/object-holey-performance-better" rel="nofollow">http://jsperf.com/object-holey-performance-better</a><br> <a href="http://jsperf.com/object-performance-better" rel="nofollow">http://jsperf.com/object-performance-better</a><br> <a href="http://jsperf.com/array-vs-object-mine-v2/5" rel="nofollow">http://jsperf.com/array-vs-object-mine-v2/5</a><br><br></p>  <p>P.S.2 I know, that one of the Array tests is actually testing Object, and another Object test is actually testing Array, please do not point that out, I am aware, I wrote this, the error is because jsperf is very poorly made, and I was trying to relatively quickly check a lot of different settings. </p>  <p>P.S.3 I am sorry, that some of these tests are really messy, I did not think, I would actually need to show them to anyone, but I still think there are sufficient.</p>