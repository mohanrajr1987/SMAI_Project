<p>I am trying to create a report that can retrieve the results of a procedure's output for the end user. It would serve as a proxy / broker of sorts.  In our User’s Web Application, we can install a procedure as a web-based report that end users can run. We want to allow them to enter an ID number (associated with the proc they want to run) as an input parameter to this report.</p>  <p>Process Would Look Like this:</p>  <ol> <li>User enters ID number into public web report (which is PROC_A)</li> <li>PROC_A takes that ID and looks up the requested procedure in a simple table with ID|Procname (we will call this looked up proc, PROC_B)</li> <li>PROC_A then runs PROC_B, which returns a data set</li> <li>PROC_A hands off the data set as output for the web report (user downloads as excel).</li> </ol>  <p>Installing a procedure (using our Web Application’s configuration utility) as an end-user report is possible but a LOT of work, and we want to be able to have a single report that can call many different procs. We would only need to add the proc to the ID lookup table to make it available.  We have tried a bunch of different approaches to no avail. We know we can check to make sure the ID is numeric before using it in SQL to avoid injection, so that isn't a problem.    They are all procedures (not calling functions) and do not have any input parameters for now. However they return a ref-cursor rather than populating a table. At least the parent needs to do that as our Web Application allows that to be downloaded as an extract.</p>  <p>Any ideas how this might best be accomplished? </p>  <p>so far, This works using the inline conditionals, but we are still not able to get it to run looking up the name of the proc dynamically. It may be because the proc needs to be called with the ref cursor passed in as a parameter (which you can see on the conditional version that works. Not sure how to get that to work with the dynamic version (see commented out section) ? </p>  <pre><code>create or replace PROCEDURE ic_rep_extract_retrieval (   e_id IN integer,   exout OUT sys_refcursor   ) IS  --use_proc_name varchar2(200);  BEGIN  IF e_id = '1' THEN   ic_rep_test1 exout); ELSIF e_id = '2' THEN   ic_rep_test2 exout); END IF;  --SELECT PROC || '();' INTO use_proc_name FROM OPSGENERAL.IC_EXTRACTS WHERE extract_id = e_id; --EXECUTE IMMEDIATE 'begin ' || use_proc_name || '(exout); end;';  END ic_rep_extract_retrieval; </code></pre>