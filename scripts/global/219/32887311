<p>I need some help decoding a char in C to its UTF8 interpretation.</p>  <p>My code so far works this way:</p>  <ul> <li>A <code>char</code> is initialised with hexadecimal representation of 'password' <code>70617373776F7264</code></li> <li>It is then encrypted using 3DES <code>DD201F609E49C0609FABA4C8AAFBB1E5</code></li> <li>Then it is decrypted successfully using 3DES <code>70617373776F72640808080808080808</code></li> </ul>  <p>In the<code>printf("decrypted: %s",dec)</code> statement, all looks fine and it is displayed as <code>decrypted: password</code></p>  <p>However when doing a string compare, it does not match. Looking closely at the char, I can see that it comes out as <code>\001password\010\010\010\010\010\010\010\010</code> (this is due to the padding)</p>  <p>Is there any way to either un-pad or to decode to <em>UTF8</em>? <a href="http://software.hixie.ch/utilities/cgi/unicode-decoder/utf8-decoder" rel="nofollow">something similar to this</a></p>  <p>Edit with code:</p>  <pre><code>#include &lt;stdio.h&gt; #include &lt;string.h&gt; #include &lt;stdlib.h&gt; #include &lt;openssl/des.h&gt; #include &lt;openssl/rand.h&gt; #include &lt;ldap.h&gt; #include "k.h" #include "hex.h"   #define ULONG unsigned long #define INT unsigned int   char *encrypt(char *data) {    int i = 0;   int len = 0;   int nlen = 0;     char *key1 = "1313232323231313";   char *key2 = "6789678967896789";   char *key3 = "1313232323231313";    /* Padding */   char ch = '\0';   unsigned char out[64] = {0};   unsigned char src[64] = {0};     unsigned char *ptr  = NULL;   unsigned char block[8] = {0};   DES_key_schedule ks1, ks2, ks3;    /* set password table */   ptr = hex2bin(key1, strlen(key1), &amp;nlen);   memcpy(block, ptr, sizeof(block));   free(ptr);   DES_set_key_unchecked((C_Block *)block, &amp;ks1);    ptr = hex2bin(key2, strlen(key2), &amp;nlen);   memcpy(block, ptr, sizeof(block));   free(ptr);   DES_set_key_unchecked((C_Block *)block, &amp;ks2);    ptr = hex2bin(key3, strlen(key3), &amp;nlen);   memcpy(block, ptr, sizeof(block));   free(ptr);   DES_set_key_unchecked((C_Block *)block, &amp;ks3);    ptr = hex2bin(data, strlen(data), &amp;nlen);   memcpy(src, ptr, nlen);   free(ptr);    len = (nlen / 8 + (nlen % 8 ? 1: 0)) * 8;    ch = 8 - nlen % 8;   memset(src + nlen, ch, (8 - nlen % 8) % 8);    printf("Raw data: ");   for (i = 0; i &lt; len; i++) {       printf("%02X", *(src + i));   }   printf("\n");    for (i = 0; i &lt; len; i += 8) {       DES_ecb3_encrypt((C_Block *)(src + i), (C_Block *)(out + i), &amp;ks1, &amp;ks2, &amp;ks3, DES_ENCRYPT);   }    printf("Encrypted: ");   for (i = 0; i &lt; len; i++) {       printf("%02X" , *(out + i));   }   printf("\n");     return out;  }   char *decrypt(char *data) {    int i = 0;   int len = 0;   int nlen = 0;     char *key1 = "1313232323231313";   char *key2 = "6789678967896789";   char *key3 = "1313232323231313";    /* Padding */   int ch = 0;   unsigned char out[64] = {0};   unsigned char src[64] = {0};     unsigned char *ptr  = NULL;   unsigned char block[8] = {0};   DES_key_schedule ks1, ks2, ks3;    /* set password table */   ptr = hex2bin(key1, strlen(key1), &amp;nlen);   memcpy(block, ptr, sizeof(block));   free(ptr);   DES_set_key_unchecked((C_Block *)block, &amp;ks1);    ptr = hex2bin(key2, strlen(key2), &amp;nlen);   memcpy(block, ptr, sizeof(block));   free(ptr);   DES_set_key_unchecked((C_Block *)block, &amp;ks2);    ptr = hex2bin(key3, strlen(key3), &amp;nlen);   memcpy(block, ptr, sizeof(block));   free(ptr);   DES_set_key_unchecked((C_Block *)block, &amp;ks3);    ptr = hex2bin(data, strlen(data), &amp;nlen);   memcpy(src, ptr, nlen);   free(ptr);    len = (nlen / 8 + (nlen % 8 ? 1: 0)) * 8;    ch = 8 - nlen % 8;   memset(src + nlen, ch, (8 - nlen % 8) % 8);    printf("Raw data: ");   for (i = 0; i &lt; len; i++) {       printf("%02X", *(src + i));   }   printf("\n");    for (i = 0; i &lt; len; i += 8) {       DES_ecb3_encrypt((C_Block *)(src + i), (C_Block *)(out + i), &amp;ks1, &amp;ks2, &amp;ks3, DES_DECRYPT);   }    printf("Decrypted: ");   for (i = 0; i &lt; len; i++) {       printf("%02X", *(out + i));   }    printf("\n");   return out;  }   K DES_ecb3_do(K user, K pass,K fl ) {   int res = 0;   int flag = fl-&gt;i;   char *usn = user-&gt;s;    char *enc = pass-&gt;s;   char *decr = "";   char dec[32];    if(flag==1)   {     decr = encrypt(enc);     strcat(dec,decr);   }   else if(flag==0)   {     decr = decrypt(enc);     strcat(dec,decr);   }   int ret;   ret = strcmp(dec, "password");   if(ret==0)   {     printf("they match");   }   else   {     printf("they don't match\n");     return (K) 0;   }    printf("decrypted pass is:%s\n",dec);     return ks(dec); } </code></pre>