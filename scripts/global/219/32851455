<p>I was trying to make a programm that uses keys(SecretKeys) to encrypt files or whatever but mostly File. So I made a class that uses multithreading so no matter how big is the file the process wont stop the program itself. My class works when I'm trying to encrypt the file but when I'm going to decrypt it, it fails. So here's my code I know you are not going to read it fully but please check the decryption class.</p>  <pre><code>import java.io.BufferedOutputStream; import java.io.File; import java.io.FileOutputStream; import java.io.IOException; import java.io.ObjectOutputStream; import java.security.InvalidKeyException; import java.security.NoSuchAlgorithmException; import java.util.Map; import java.util.TreeMap; import javax.crypto.Cipher; import javax.crypto.CipherOutputStream; import javax.crypto.NoSuchPaddingException; import javax.crypto.SecretKey;  /**  *  * @author Cesar  */  public class Encrypter {  public static void Encrypt(File file, SecretKey key) {     Thread hilo = new Thread(new Encrypt(file, key));     hilo.start(); }  public static void Decrypt(File file, SecretKey key) {     Thread hilo = new Thread(new Decrypt(file, key));     hilo.start(); } </code></pre>  <p>}</p>  <pre><code>class Encrypt extends Encrypter implements Runnable {  private File file; private SecretKey key;  public Encrypt(File file, SecretKey key) {     this.file = file;     this.key = key; }  @Override public void run() {     Map map = new TreeMap(System.getProperties());     int number = map.size();      try {          Cipher desCipher = Cipher.getInstance("DES/ECB/PKCS5Padding");         desCipher.init(Cipher.ENCRYPT_MODE, key);          FileOutputStream fos = new FileOutputStream(file);         BufferedOutputStream bos = new BufferedOutputStream(fos);         CipherOutputStream cos = new CipherOutputStream(bos, desCipher);         ObjectOutputStream oos = new ObjectOutputStream(cos);          oos.writeObject(map);         oos.writeInt(number);          oos.close();      } catch (NoSuchPaddingException e) {         System.err.println("Padding problem: " + e);     } catch (NoSuchAlgorithmException e) {         System.err.println("Invalid algorithm: " + e);     } catch (InvalidKeyException e) {         System.err.println("Invalid key: " + e);     } catch (IOException e) {         System.err.println("I/O Problem: " + e);     } } </code></pre>  <p>}</p>  <pre><code>class Decrypt extends Encrypter implements Runnable {  private File file; private SecretKey key;  public Decrypt(File file, SecretKey key) {     this.file = file;     this.key = key; }  @Override public void run() {     try {         Map map = new TreeMap(System.getProperties());         int number = map.size();         Cipher desCipher = Cipher.getInstance("DES/ECB/PKCS5Padding");         desCipher.init(Cipher.DECRYPT_MODE, key);           FileOutputStream fos = new FileOutputStream(file);         BufferedOutputStream bos = new BufferedOutputStream(fos);         CipherOutputStream cos = new CipherOutputStream(bos, desCipher);         ObjectOutputStream oos = new ObjectOutputStream(cos);          oos.writeObject(map);         oos.writeInt(number);          oos.close();      } catch (NoSuchPaddingException e) {         System.err.println("Padding problem: " + e);     } catch (NoSuchAlgorithmException e) {         System.err.println("Invalid algorithm: " + e);     } catch (InvalidKeyException e) {         System.err.println("Invalid key: " + e);     } catch (IOException e) {         System.err.println("I/O Problem: " + e);     } } </code></pre>  <p>}</p>