<p>I'm a new android developer and im trying to build a simple rss feeder. One step is done but im trying to do as follow: after i retrieve the title i wanna push it and go to the description. many thanks!!</p>  <p>public class RssFeed implements Serializable {</p>  <pre><code>private String title; private String link; private String description;  public RssFeed(){  }  public RssFeed(String title, String link, String description) {     this.title = title;     this.link = link;     this.description = description; }  public String getTitle() {     return title; }   public void setTitle(String title) {     this.title = title; }  public String getLink() {     return link; }  public void setLink(String link) {     this.link = link; }  public String getDescription() {     return description; }  public void setDescription(String description) {     this.description = description; } </code></pre>  <p>}</p>  <p>public class RssParseHandler  {</p>  <pre><code>private InputStream urlStream; private XmlPullParser parser; private XmlPullParserFactory factory;  private List&lt;RssFeed&gt; rssFeedList; private RssFeed rssFeed;  private String urlString; private String tagName;  private String title; private String link; private String description;  public static final String ITEM = "item"; public static final String CHANNEL = "channel"; public static final String TITLE = "title"; public static final String LINK = "link"; public static final String DESCRIPTION = "description";  public RssParseHandler(String urlString) {     this.urlString = urlString; }  public static InputStream downloadUrl(String urlString) throws IOException{      URL url = new URL(urlString);      HttpURLConnection connection = (HttpURLConnection) url.openConnection();     connection.setRequestMethod("GET");     connection.setDoInput(true);     connection.connect();      InputStream stream = connection.getInputStream();     return stream;  }  public List&lt;RssFeed&gt; parse() {      try {         int count = 0;          factory = XmlPullParserFactory.newInstance();         parser = factory.newPullParser();         urlStream = downloadUrl(urlString);         parser.setInput(urlStream, null);          rssFeedList = new ArrayList&lt;RssFeed&gt;();         int eventType = parser.getEventType();         boolean insideItem = false;          while (eventType != XmlPullParser.END_DOCUMENT) {             if (eventType == XmlPullParser.START_TAG) {                  if (parser.getName().equalsIgnoreCase("item")) {                     insideItem = true;                 } else if (parser.getName().equalsIgnoreCase("title")) {                     if (insideItem) {                          title = parser.nextText();                     }                 } else if (parser.getName().equalsIgnoreCase("link")) {                     if (insideItem) {                          link = parser.nextText();                     }                 } else if (parser.getName().equalsIgnoreCase("description")) {                     if (insideItem) {                          description = parser.nextText();                     }                 }             } else if (eventType == XmlPullParser.END_TAG &amp;&amp; parser.getName().equalsIgnoreCase("item")) {                 insideItem = false;                 rssFeedList.add(new RssFeed(title, link, description));             }              eventType = parser.next(); // move to next element         }     }     catch (Exception e) {         e.printStackTrace();     }      return rssFeedList; } </code></pre>  <p>}</p>  <p>public class Rssplease extends Activity implements AdapterView.OnItemClickListener {</p>  <pre><code>private ListView mRssListView; private RssParseHandler mNewsFeeder; private List&lt;RssFeed&gt; mRssFeedList; private RssAdapter mRssAdap;  private static final String TOPSTORIES = "http://www.footballfancast.com/category/premier-league/manchester-united/feed";   @Override protected void onCreate(Bundle savedInstanceState) {     super.onCreate(savedInstanceState);     setContentView(R.layout.activity_main);      mRssListView = (ListView) findViewById(R.id.rss_list_view);     mRssFeedList = new ArrayList&lt;RssFeed&gt;();        mRssListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {         @Override         public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {              Log.e("roei", "working");          //  new DoRssFeedTask().onPostExecute(new DoRssFeedTask().doInBackground());             Intent intent = new Intent(Rssplease.this , Main2Activity.class);           //  Intent string = intent.putExtra("string", );             startActivity(intent);             finish();          }     });     new DoRssFeedTask().execute(TOPSTORIES); }  private class RssAdapter extends ArrayAdapter&lt;RssFeed&gt; {      private List&lt;RssFeed&gt; rssFeedList;      public RssAdapter(Context context, int textViewResourceId, List&lt;RssFeed&gt; rssFeedList1) {         super(context, textViewResourceId, rssFeedList1);         this.rssFeedList = rssFeedList1;     }       @Override     public View getView(int position, View convertView, ViewGroup parent) {          View view = convertView;         RssHolder rssHolder = null;         if (convertView == null) {             view = View.inflate(Rssplease.this, R.layout.list, null);             rssHolder = new RssHolder();             rssHolder.rssTitleView = (TextView) view.findViewById(R.id.rss_title_view);              view.setTag(rssHolder);         } else {             rssHolder = (RssHolder) view.getTag();         }         RssFeed rssFeed = mRssFeedList.get(position);         rssHolder.rssTitleView.setText(rssFeed.getTitle());         return view;     } }  static class RssHolder {     public TextView rssTitleView;     public  TextView rssDesView; }  public class DoRssFeedTask extends AsyncTask&lt;String, Void, List&lt;RssFeed&gt;&gt; {     ProgressDialog prog;     String jsonStr = null;     Handler innerHandler;      @Override     protected void onPreExecute() {         prog = new ProgressDialog(Rssplease.this);         prog.setMessage("Loading....");         prog.show();     }      @Override     protected List&lt;RssFeed&gt; doInBackground(String... params) {         for (String urlVal : params) {             mNewsFeeder = new RssParseHandler(urlVal);         }         mRssFeedList = mNewsFeeder.parse();         return mRssFeedList;     }      @Override     protected void onPostExecute(final List&lt;RssFeed&gt; result) {         Log.e("Miki", "result size = " + result.size());         prog.dismiss();         runOnUiThread(new Runnable() {              @Override             public void run() {                 mRssAdap = new RssAdapter(Rssplease.this, R.id.rss_list_view, result);                 int count = mRssAdap.getCount();                 if (count != 0 &amp;&amp; mRssAdap != null) {                     mRssListView.setAdapter(mRssAdap);                 }             }         });     }      @Override     protected void onProgressUpdate(Void... values) {     } }  @Override public void onItemClick(AdapterView&lt;?&gt; adapterView, View v, int position, long id) { } </code></pre>  <p>}</p>  <p>activity_main.xml</p>  <p>  <pre><code>&lt;ListView     android:id="@+id/rss_list_view"     android:layout_width="fill_parent"     android:layout_height="fill_parent" /&gt; </code></pre>  <p></p>  <p>list.xml</p>  <p>  <pre><code>&lt;TextView android:id="@+id/rss_title_view" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_alignParentLeft="true" android:layout_alignParentTop="true" android:layout_marginLeft="17dp" android:layout_marginTop="14dp" android:textAppearance="?android:attr/textAppearanceMedium" android:textColor="@android:color/black" /&gt; </code></pre>  <p></p>