<p>When I try to fetch and parse the Indian Express rss feed, the following error occurred.</p>  <blockquote>   <p>A PHP Error was encountered<br>   Severity: Warning<br>   Message: Illegal string offset 'CONTENT'<br>   Filename: libraries/rssparser.php(114) : eval()'d code<br>   Line Number: 1</p>      <p>A PHP Error was encountered<br>   Severity: Warning<br>   Message: Illegal string offset 'ENCODED'<br>   Filename: libraries/rssparser.php(114) : eval()'d code<br>   Line Number: 1</p>      <p>A PHP Error was encountered<br>   Severity: Warning<br>   Message: Illegal string offset 'CONTENT'<br>   Filename: libraries/rssparser.php(114) : eval()'d code<br>   Line Number: 1</p> </blockquote>  <p>I am using rssparser library</p>  <p>rssparser.php</p>  <pre><code>&lt;?PHP   // Original PHP code by Chirp Internet: www.chirp.com.au   // Please acknowledge use of this code by including this header.    class rssparser   {     // keeps track of current and preceding elements     var $tags = array();      // array containing all feed data     var $output = array();      // return value for display functions     var $retval = "";      var $errorlevel = 0;      // constructor for new object     function rssparser1($file)     {        $errorlevel = error_reporting();       error_reporting($errorlevel &amp; ~E_NOTICE);        // instantiate xml-parser and assign event handlers       $xml_parser = xml_parser_create("");       xml_set_object($xml_parser, $this);       xml_set_element_handler($xml_parser, "startElement", "endElement");       xml_set_character_data_handler($xml_parser, "parseData");        // open file for reading and send data to xml-parser       $data = preg_match("/^http/", $file) ? file_get_contents($file) : file_get_contents($file);        //print_r($data);         xml_parse($xml_parser, $data) or die(         sprintf("Airtel: Error &lt;b&gt;%s&lt;/b&gt; at line &lt;b&gt;%d&lt;/b&gt;&lt;br&gt;",         xml_error_string(xml_get_error_code($xml_parser)),         xml_get_current_line_number($xml_parser))       );        // dismiss xml parser       xml_parser_free($xml_parser);        error_reporting($errorlevel);     }      function startElement($parser, $tagname, $attrs=array())     {       // RSS 2.0 - ENCLOSURE       if($tagname == "ENCLOSURE" &amp;&amp; $attrs) {         $this-&gt;startElement($parser, "ENCLOSURE");         foreach($attrs as $attr =&gt; $attrval) {           $this-&gt;startElement($parser, $attr);           $this-&gt;parseData($parser, $attrval);           $this-&gt;endElement($parser, $attr);         }         $this-&gt;endElement($parser, "ENCLOSURE");       }        // Yahoo! Media RSS - images       if($tagname == "MEDIA:CONTENT" &amp;&amp; $attrs['URL'] &amp;&amp; $attrs['MEDIUM'] == 'image') {         $this-&gt;startElement($parser, "IMAGE");         $this-&gt;parseData($parser, $attrs['URL']);         $this-&gt;endElement($parser, "IMAGE");       }        // check if this element can contain others - list may be edited       if(preg_match("/^(RDF|RSS|CHANNEL|IMAGE|ITEM)/", $tagname)) {         if($this-&gt;tags) {           $depth = count($this-&gt;tags);           if(is_array($tmp = end($this-&gt;tags))) {             list($parent, $num) = each($tmp);             if($parent) $this-&gt;tags[$depth-1][$parent][$tagname]++;           }         }         array_push($this-&gt;tags, array($tagname =&gt; array()));       } else {         if(!preg_match("/^(A|B|I)$/", $tagname)) {           // add tag to tags array           array_push($this-&gt;tags, $tagname);         }       }     }      function endElement($parser, $tagname)     {       if(!preg_match("/^(A|B|I)$/", $tagname)) {         // remove tag from tags array         array_pop($this-&gt;tags);       }     }      function parseData($parser, $data)     {       // return if data contains no text       if(!trim($data)) return;        $evalcode = "\$this-&gt;output";       foreach($this-&gt;tags as $tag) {         if(is_array($tag)) {           list($tagname, $indexes) = each($tag);           $evalcode .= "[\"$tagname\"]";           if(${$tagname}) $evalcode .= "[" . (${$tagname} - 1) . "]";           if($indexes) extract($indexes);         } else {           if(preg_match("/^([A-Z]+):([A-Z]+)$/", $tag, $matches)) {             $evalcode .= "[\"$matches[1]\"][\"$matches[2]\"]";           } else {             $evalcode .= "[\"$tag\"]";           }         }       }       eval("$evalcode = $evalcode . '" . addslashes($data) . "';");     }      // display a single channel as HTML     function display_channel($data, $limit)     {       extract($data);       if(@$IMAGE) {         // display channel image(s)         foreach($IMAGE as $image) $this-&gt;display_image($image);       }       if(@$TITLE) {         // display channel information         $this-&gt;retval .= "&lt;h1&gt;";         if($LINK) $this-&gt;retval .= "&lt;a href=\"$LINK\" target=\"_blank\"&gt;";         $this-&gt;retval .= stripslashes($TITLE);         if($LINK) $this-&gt;retval .= "&lt;/a&gt;";         $this-&gt;retval .= "&lt;/h1&gt;\n";         if($DESCRIPTION) $this-&gt;retval .= "&lt;p&gt;$DESCRIPTION&lt;/p&gt;\n\n";         $tmp = array();         if(@$PUBDATE) $tmp[] = "&lt;small&gt;Published: $PUBDATE&lt;/small&gt;";         if(@$COPYRIGHT) $tmp[] = "&lt;small&gt;Copyright: @$COPYRIGHT&lt;/small&gt;";         if($tmp) $this-&gt;retval .= "&lt;p&gt;" . implode("&lt;br&gt;\n", $tmp) . "&lt;/p&gt;\n\n";         $this-&gt;retval .= "&lt;div class=\"divider\"&gt;&lt;!-- --&gt;&lt;/div&gt;\n\n";       }       if($ITEM) {         // display channel item(s)         foreach($ITEM as $item) {           $this-&gt;display_item($item, "CHANNEL");           if(is_int($limit) &amp;&amp; --$limit &lt;= 0) break;         }       }     }      // display a single image as HTML     function display_image($data, $parent="")     {       extract($data);       if(!$URL) return;        $this-&gt;retval .= "&lt;p&gt;";       if($LINK) $this-&gt;retval .= "&lt;a href=\"$LINK\" target=\"_blank\"&gt;";       $this-&gt;retval .= "&lt;img src=\"$URL\"";       if(@$WIDTH &amp;&amp; $HEIGHT) $this-&gt;retval .= " width=\"$WIDTH\" height=\"$HEIGHT\"";       $this-&gt;retval .= " border=\"0\" alt=\"$TITLE\"&gt;";       if($LINK) $this-&gt;retval .= "&lt;/a&gt;";       $this-&gt;retval .= "&lt;/p&gt;\n\n";     }      // display a single item as HTML     function display_item($data, $parent)     {       extract($data);       //print_r($data);       //exit;        if(!$TITLE) return;        $this-&gt;retval .=  "&lt;p&gt;&lt;b&gt;";       if($LINK) $this-&gt;retval .=  "&lt;a href=\"$LINK\" target=\"_blank\"&gt;";       $this-&gt;retval .= stripslashes($TITLE);       if($LINK) $this-&gt;retval .= "&lt;/a&gt;";       $this-&gt;retval .=  "&lt;/b&gt;";       if(!$PUBDATE &amp;&amp; $DC["DATE"]) $PUBDATE = $DC["DATE"];       if($PUBDATE) $this-&gt;retval .= " &lt;small&gt;($PUBDATE)&lt;/small&gt;";       $this-&gt;retval .=  "&lt;/p&gt;\n";        // use feed-formatted HTML if provided       if(@$CONTENT['ENCODED']) {         $this-&gt;retval .= "&lt;p&gt;" . stripslashes(@$CONTENT['ENCODED']) . "&lt;/p&gt;\n";       } elseif($DESCRIPTION) {         if(@$IMAGE) {           foreach($IMAGE as $IMG) $this-&gt;retval .= "&lt;img src=\"$IMG\"&gt;\n";         }         $this-&gt;retval .=  "&lt;p&gt;" . stripslashes($DESCRIPTION) . "&lt;/p&gt;\n\n";       }        // RSS 2.0 - ENCLOSURE       if(@$ENCLOSURE) {         $this-&gt;retval .= "&lt;p&gt;&lt;small&gt;&lt;b&gt;Media:&lt;/b&gt; &lt;a href=\"{$ENCLOSURE['URL']}\"&gt;";         @$this-&gt;retval .= $ENCLOSURE['TYPE'];         @$this-&gt;retval .= "&lt;/a&gt; ({$ENCLOSURE['LENGTH']} bytes)&lt;/small&gt;&lt;/p&gt;\n\n";       }        if(@$COMMENTS) {         $this-&gt;retval .= "&lt;p style=\"text-align: right;\"&gt;&lt;small&gt;";         $this-&gt;retval .= "&lt;a href=\"$COMMENTS\"&gt;Comments&lt;/a&gt;";         $this-&gt;retval .= "&lt;/small&gt;&lt;/p&gt;\n\n";       }     }      function fixEncoding(&amp;$input, $key, $output_encoding)     {       if(!function_exists('mb_detect_encoding')) return $input;        $encoding = mb_detect_encoding($input);       switch($encoding)       {         case 'ASCII':         case $output_encoding:           break;         case '':           $input = mb_convert_encoding($input, $output_encoding);           break;         default:           $input = mb_convert_encoding($input, $output_encoding, $encoding);       }     }      // display entire feed as HTML     function getOutput($limit=false, $output_encoding='UTF-8')     {       $this-&gt;retval = "";       $start_tag = key($this-&gt;output);        switch($start_tag)       {         case "RSS":           // new format - channel contains all           foreach($this-&gt;output[$start_tag]["CHANNEL"] as $channel) {             $this-&gt;display_channel($channel, $limit);           }           break;          case "RDF:RDF":           // old format - channel and items are separate           if(isset($this-&gt;output[$start_tag]['IMAGE'])) {             foreach($this-&gt;output[$start_tag]['IMAGE'] as $image) {               $this-&gt;display_image($image);             }           }           foreach($this-&gt;output[$start_tag]['CHANNEL'] as $channel) {             $this-&gt;display_channel($channel, $limit);           }           foreach($this-&gt;output[$start_tag]['ITEM'] as $item) {             $this-&gt;display_item($item, $start_tag);           }           break;          case "HTML":           die("Error: cannot parse HTML document as RSS");          default:           die("Error: unrecognized start tag '$start_tag' in getOutput()");       }        if($this-&gt;retval &amp;&amp; is_array($this-&gt;retval)) {         array_walk_recursive($this-&gt;retval, 'myRSSParser::fixEncoding', $output_encoding);       }       //return $this-&gt;retval;       //echo $this-&gt;output[$start_tag]['IMAGE'];       return $this-&gt;output[$start_tag]["CHANNEL"];     }      // return raw data as array     function getRawOutput($output_encoding='UTF-8')     {       array_walk_recursive($this-&gt;output, 'myRSSParser::fixEncoding', $output_encoding);       return $this-&gt;output;     }   } ?&gt; </code></pre>