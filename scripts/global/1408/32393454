<p>I would like to get a collection of Customers including several properties among which is the adress but only when it has not been deleted yet (<code>SuppressionDate == null</code>)</p>  <pre><code>IQueryable&lt;Customer&gt; customers =     context.Persons.OfType&lt;Customer&gt;()         .Include(customer =&gt; customer.Addresses)         .Include(customer =&gt; customer.Bills)         .Include(customer =&gt; customer.Code)         .Include(customer =&gt; customer.Tutors); </code></pre>  <p>I have tried several ways to use the where clause in order to filter addresse :</p>  <pre><code>... .Include(customer =&gt; customer.Addresses.Where(a =&gt; a.SuppressionDate == null)) .Include(customer =&gt; customer.Bills) ... </code></pre>  <p>That was my first try but it raises the following exception :</p>  <blockquote>   <p>System.ArgumentException : The Include path expression must refer to a   navigation property defined on the type. Use dotted paths for   reference navigation properties and the Select operator for collection   navigation properties. Parameter Name : path</p> </blockquote>  <p>I've also tried with the same where clause at the end of the <code>Include()</code> and at the end of the query but neither seems to work. </p>  <p>I'm currently using a workaround which is iterate through the collection of customer and remove the adresses that are deleted as such :</p>  <pre><code>foreach(Customer c in customers){     customer.Addresses = customer.Addresses.Where(a =&gt; a.SuppressionDate == null).ToList(); } </code></pre>  <p>Being fairly new to linq to object/entities, I was wondering if there was a built-in way to achieve this. Thanks</p>