<p>I have a data entry form where user will input DateFrom and DateTo fields.</p>  <pre><code>Select From Date: &lt;input type="text" id="datepickerfrom" name="datepickerfrom"/&gt; Select To Date: &lt;input type="text" id="datepickerto" name="datepickerto"/&gt; &lt;asp:Button ID="btnGetData" runat="server" OnClick="BtnGetData_Click" Text="Get Error List" /&gt; </code></pre>  <p>I want to build a Linq query that retrieves only top 100 records in case if no input provided.</p>  <p>If user provides DateFrom and does not provide DateTo, the user will select data which is greater than DateFrom up to DateTime.Now.</p>  <p>If user provides DateTo and does not provide DateFrom, the user will select data which is less then DateTo.</p>  <p>I have the following now:</p>  <pre><code>public static List&lt;ErrorLogData&gt; GetLogErrorData(string appName, InputData data) {     SqlConnection con;     List&lt;ErrorLogData&gt; errorLogData = null;     string query = "";     if (data.DateFrom == "" &amp;&amp; data.DateTo == "")     {         query += "from ld in logData.errorLogs.Take(10000)";     }      if (data.DateFrom == "" &amp;&amp; data.DateTo != "")     {         query += "from ld in logData.errorLogs where ld.errorTime &lt;= " + data.DateTo;     }      if (data.DateFrom != "" &amp;&amp; data.DateTo == "")     {         query += "from ld in logData.errorLogs where ld.errorTime &gt;= " + data.DateFrom + " &amp;&amp; &lt;= " + DateTime.Now;     }      if (data.DateFrom != "" &amp;&amp; data.DateTo != "")     {         query += "from ld in logData.errorLogs where ld.errorTime &gt;= " + data.DateFrom + " &amp;&amp; &lt;= " + data.DateTo;     }      DateTime dateFrom = Convert.ToDateTime(data.DateFrom);     DateTime dateTo = Convert.ToDateTime(data.DateTo);       using (con = new SqlConnection(ConfigurationManager.AppSettings[conKey]))     using (WebEntities logData = new WebEntities())     {         logData.CommandTimeout = 300;         var errorLog = query +                         select new ErrorLogData                        {                            ErrorID = ld.errorID,                            ErrorTime = ld.errorTime,                            UserName = ld.username,                            ErrorType = ld.errorType,                            Error = ld.error,                            ControlNumber = ld.controlNumber                        };         errorLogData = errorLog.ToList();     }     return errorLogData; } </code></pre>  <p>I'm not sure how to append <code>query</code> to "<code>select new ErrorLogData...</code>" statement to have the entire query.</p>  <p>What is the approach here?</p>