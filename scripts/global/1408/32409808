<p>I'm using EF code first in my project, I have following entity:</p>  <pre><code>public class WorkcenterCapacity : ITimePeriodEntity {     public int Id { get; set; }     public decimal AvailableCapacity { get; set; }     public DateTime FromTime { get; set; }     public DateTime ToTime { get; set; } } public interface ITimePeriodEntity {     DateTime FromTime { get; set; }     DateTime ToTime { get; set; } }   </code></pre>  <p>I used <a href="http://www.albahari.com/nutshell/predicatebuilder.aspx" rel="nofollow">PredicateBuilder</a> to make a dynamic predicate too. I defined following generic class for usability purpose:</p>  <pre><code>public static class CropPredicateBuilder&lt;T&gt; where T : ITimePeriodEntity {     public static Expression&lt;Func&lt;T, bool&gt;&gt; Creat(DateTime windowStart,                                                   DateTime windowFinish)     {         var result = PredicateBuilder.False&lt;T&gt;();         Expression&lt;Func&lt;T, bool&gt;&gt; completelyInWindowRanges =             x =&gt; x.FromTime &gt;= windowStart &amp;&amp; x.ToTime &lt;= windowFinish;         Expression&lt;Func&lt;T, bool&gt;&gt; startIsInWindowRanges =             x =&gt; x.FromTime &gt;= windowStart &amp;&amp; x.FromTime &lt;= windowFinish;         Expression&lt;Func&lt;T, bool&gt;&gt; finishIsInWindowRanges =             x =&gt; x.ToTime &gt;= windowStart &amp;&amp; x.ToTime &lt;= windowFinish;         Expression&lt;Func&lt;T, bool&gt;&gt; overlapDateRangeWindow =             x =&gt; x.FromTime &lt;= windowStart &amp;&amp; x.ToTime &gt;= windowFinish;          return result.Or(completelyInWindowRanges)             .Or(startIsInWindowRanges)             .Or(finishIsInWindowRanges)             .Or(overlapDateRangeWindow);     } } </code></pre>  <p>and use it as following:</p>  <pre><code>var predicate = CropPredicateBuilder&lt;WorkcenterCapacity&gt;                .Creat(DateTime.Now,DateTime.Now.AddDays(10));  var workcenterCapacities = dbContext.WorkcenterCapacities             .AsNoTracking()             .Where(predicate)             .AsExpandable()             .ToList(); </code></pre>  <p>but when I run it, I get following error:</p>  <blockquote>   <p>Unable to cast the type 'WorkcenterCapacity' to type 'ITimePeriodEntity'. LINQ to Entities        only supports casting EDM primitive or enumeration types.</p> </blockquote>  <p>How can I solve this problem?</p>