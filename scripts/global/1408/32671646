<p> In my ASP.NET MVC 4 web application, I have utilized partial views and custom display/editor templates to modularize the code. One example is a User.cshtml DisplayTemplate which takes User (an Entity object) and prints out their name and an icon to popup their directory info.</p>  <p>Views/Shared/DisplayTemplates/User.cshtml</p>  <pre class="lang-cs prettyprint-override"><code>@model MyApp.Domain.Entities.User  @if (Model != null) {   @Html.DisplayFor(m =&gt; m.DisplayName)   &lt;span class="view-contact icon ui-icon ui-icon-contact" title="View Contact"&gt;&lt;/span&gt;   @Html.HiddenFor(m =&gt; m.Identity) } </code></pre>  <p>I'm having the opposite problem most people seem have when I searched on the topic. I've noticed that when I use this template, lazy loading is triggered and so a query is sent to the DB to grab the data, but I don't want this to happen if I've already preloaded the data, especially in the case where I show a listing of users.  In that case I made sure to use .Include("User") in my query and the info displays without issue or additional querying when I essentially write out the template's code in the view:</p>  <p>Simplified excerpt from Views/MyController/List.cshtml</p>  <pre class="lang-cs prettyprint-override"><code>...  @foreach (var item in Model) {   &lt;tr&gt;     &lt;td class="alignl"&gt;       @item.User.DisplayName       &lt;span class="view-contact icon ui-icon ui-icon-contact" title="View Contact"&gt;&lt;/span&gt;       @Html.HiddenFor(m =&gt; item.User.Identity)     &lt;/td&gt;   &lt;/tr&gt; }  ... </code></pre>  <p>If I replace those three lines with the call to template, each line queries the db.</p>  <pre class="lang-cs prettyprint-override"><code>@foreach (var item in Model) {   &lt;tr&gt;     &lt;td class="alignl"&gt;       @Html.DisplayFor(i =&gt; item.User)     &lt;/td&gt;   &lt;/tr&gt; } </code></pre>  <p>How do I utilize this template without triggering a unnecessary query?</p>