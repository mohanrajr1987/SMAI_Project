<p>I'm trying to implement the recursion in a slightly different way, but I'm stumped as to the implementation of said math.</p>  <p>Here's my code:</p>  <pre><code>#include &lt;iostream&gt; using namespace std;    template &lt;const int n&gt; class faculty { public:     static const int val = faculty&lt;n - 1&gt;::val * n; //Recursion!!!! };   //For when 1!, return value of 1! template &lt;&gt; class faculty&lt;1&gt; { public:     static const int val = 1; };   //Falling Factorial template &lt;const int n, const int k&gt; class fallingcfactorial { public:     static const int n_k = faculty&lt;n&gt;::val / faculty&lt;n - k&gt;::val;     // (n * n - 1 * ... * 1) / ((n - k) * (n - k + 1) * ... * 1) };    // Implementing the Factorial a different way // (n * (n - 1) * ... * (n - k + 1))   //For when n = k then output = 1 template &lt;const int n&gt; class fallingcfactorial&lt;n, n&gt; { public:     static const int n_k = 1;  };   int main(void) {     cout &lt;&lt; "Faculty of 5 (1*2*3*4*5): " &lt;&lt; faculty&lt;5&gt;::val &lt;&lt; endl;     cout &lt;&lt; "n(10)_k(5) = " &lt;&lt; fallingcfactorial&lt;10, 5&gt;::n_k &lt;&lt; endl; } </code></pre>  <p>Trying to do it <code>(n * (n - 1) * ... * (n - k + 1))</code> way, I fail at implementing it in code. Math isn't my absolute strong suit, but I do ok.</p>