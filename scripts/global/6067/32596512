<p>I seem to have trouble converting a character array to a 2D integer array. The specifics are as follows:</p>  <p>I want to convert a character array that contains a specific delimiter to a multidimensional array in which the end of each row is specified by the delimiter found inside the character array ( I have already made sure in a different method that every row has the same length).</p>  <p>The array contains only 0s and 1s.</p>  <p>The problem is that when testing the method it appears that it (the method) skips a row - reads the first row, the next row is 0s, reads the third row, the  fourth is 0s.</p>  <p>These are the methods (the method in question and the testing method):</p>  <pre><code>    /// &lt;summary&gt;     /// Converts a character array to 2D int array, where each character is a digit and only the digits of 1 and 0 are      /// allowed.     /// &lt;/summary&gt;     /// &lt;returns&gt;The 2D int array.&lt;/returns&gt;     /// &lt;param name="charArray"&gt;Character array.&lt;/param&gt;     /// &lt;param name="delimiter"&gt;Delimiter.&lt;/param&gt;     public int[,] ConvertCharArrayTo2DIntArray(char[] charArray, char delimiter){         int columnCounter = 0;         //count how many rows         while (charArray [columnCounter] != delimiter) {             columnCounter++;         }          //count how many lines taking into account the delimiter         int rows = charArray.Length/(columnCounter+1);          int[,] twoDimArray = new int[rows, columnCounter];          //count         int h = 0;         for (int i = 0; i &lt; rows; i++) {             for (int j = 0; j &lt; columnCounter; j++) {                 if (charArray [h] != '\n') {                     twoDimArray [i, j] = (int)Char.GetNumericValue(charArray [h]);                     //throw exception if the array contains numbers other than 1 or 0                     if (twoDimArray [i, j] != 1 &amp;&amp; twoDimArray [i, j] != 0)                         throw new ArgumentException ();                     h++;                 } else {                     h++;                     break;                 }             }         }         return twoDimArray;     } </code></pre>  <p>This is the testing method:</p>  <pre><code>    [Test()]     public void TestConvertCharArrayTo2DIntArray(){         HelperClass hc = new HelperClass ();         int[,] twoDimArrayExpected = new int[,]{              { 0, 1, 0, 1, 0 },             { 0, 1, 0, 1, 0 },             { 0, 1, 0, 1, 0 },             { 0, 1, 0, 1, 0 } };         char[] charArray = new char[] {'0','1','0','1','1','\n','1','1','1','1','1','\n','0','1','1','1','0','\n','0','1','0','1','0','\n'};         int[,] twoDimArrayActual = hc.ConvertCharArrayTo2DIntArray (charArray, '\n');         for (int i = 0; i &lt; twoDimArrayExpected.GetLength (0); i++) {             for (int j = 0; j &lt; twoDimArrayExpected.GetLength (1); j++) {                 Console.Write (twoDimArrayActual [i,j]);                 //Commented out because it throws exceptions                                                  //Assert.AreEqual(twoDimArrayExpected[i,j],                 //twoDimArrayActual[i,j]);                 if (j == twoDimArrayExpected.GetLength (1) - 1) {                     Console.Write ("\n");                 }             }         }     } </code></pre>  <p>The output is this:</p>  <p>01011</p>  <p>00000</p>  <p>11111</p>  <p>00000</p>  <p>I may simply be stuck, but right now I really  can't figure this out.</p>