<p>I'm using the following to check if a string is valid for use with my grammar:</p>  <pre><code>id(ID) :-     atom_chars(ID, [H|T]),     is_alpha(H),     ensure_valid_char(T).  ensure_valid_char([H|T]) :-     H == '_';     is_alpha(H);     atom_number(H, _),     ensure_valid_char(T). </code></pre>  <p>It basically just checks that it starts with an alphabetic character, and after that it can be alphanumeric or an underscore.</p>  <p>I cannot seem to figure out how to get this to work with my DCG/grammar though.</p>  <p>This is its current structure where the predicate would be used:</p>  <pre><code>typeID(Result) --&gt; ['int'], id(ID), {     Result = ['int', ID] }. </code></pre>  <p>Where basically I'm saying a <code>typeID</code> is an integer type declaration followed by an identifier (<code>int foo</code> would be an example), and then I format it into a list and "give it back". </p>  <p>But in this case it's saying "id" is an undefined predicate. How do I use it so that I'm still able to access what ID holds to be able to format it, and still ensure that it's an ID using the predicate?</p>  <p>If I try:</p>  <pre><code>id(ID) --&gt; {     atom_chars(ID, [H|T]),     is_alpha(H),     ensure_valid_char(T),     ID = ID  }. </code></pre>  <p>I get the error that:</p>  <pre><code>atom_chars/2: Arguments are not sufficiently instantiated </code></pre>