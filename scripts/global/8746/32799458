<p>While playing with Logtalk, is seems my program was longer to execute with Logtalk object versus plain Prolog. I did a benchmark comparing the execution of the simple predicate in plain Prolog with the logtalk object encapsulation equivalent below :</p>  <pre><code>%% % plain prolog predicate plain_prolog_simple :-   fail.  %% % object encapsulation :- object(logtalk_obj).      :- public([simple/0]).     simple :-       fail.  :- end_object.  </code></pre>  <p>Hereâ€™s what I get :</p>  <pre><code>?- benchmark(plain_prolog_simple).  Number of repetitions: 500000 Total time calls: 0.33799099922180176 seconds Average time per call: 6.759819984436035e-7 seconds Number of calls per second: 1479329.3346604244 true.  ?- benchmark(logtalk_obj::simple).  Number of repetitions: 500000 Total time calls: 2.950408935546875 seconds Average time per call: 5.90081787109375e-6 seconds Number of calls per second: 169468.0333888435 true. </code></pre>  <p>We can see <code>logtalk_obj::simple call</code> is slower than <code>plain_prolog_simple</code> call. I use SWI Prolog as backend, I tried to set some log talk flags, without success.</p>  <p>Edit : We can find benchmark code samples to <a href="https://github.com/koryonik/logtalk-experiments/tree/master/benchmarks" rel="nofollow">https://github.com/koryonik/logtalk-experiments/tree/master/benchmarks</a></p>  <p><strong>What's wrong ? Why this performance diff? How to optimize Logtalk method calls ?</strong></p>