<p>I'm a beginner in Prolog (using SWI-Prolog) and I have the following problem:</p>  <p>I have a rule defined as follows:</p>  <pre><code>start:-    write("Enter first list: "), read_list(List1),     write("Enter second list: "), read_list(List2),     equal_length(List1, List2),     compare(List1, List2, Alike),    write(" The lists are "), write(Alike).  start:- write("The lists should have the same length!!"). </code></pre>  <p>This is how I read the lists:</p>  <pre><code>read_list([H|T]):- read(H), H\=[], read_list(T). read_list([]). </code></pre>  <p>Compare is a set of rules that will compare the list, but it never gets to execute, I've even replaced it for this:</p>  <pre><code>compare(_, _, "the same"). </code></pre>  <p>This is how equal_length looks like:</p>  <pre><code>equal_length([_|T1], [_|T2]):- equal_length(T1, T2). equal_length([], []). </code></pre>  <p>So it fails when the lists don't have the same length. The problem is, when start fails, it executes the first occurrence again (with List1 and List2 already bound)!</p>  <p>I have tried simpler stuff like this:</p>  <pre><code>hi:- 1&gt;2, write("Nonsense"). hi:- write("Of course it doesn't work"). </code></pre>  <p>And the output is the second string.  Why the first one doesn't behave like that?</p>  <p><strong>Edit:</strong></p>  <p>After further testing I found out that this strange behavior only happens when reading lists from that custom method, and only when more than one list is read.</p>