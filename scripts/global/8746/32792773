<p>I'm trying to implement a solution for the factorial calculation (n!) without using recursion, only using the retroaction of prolog. For example:</p>  <pre><code>factorial(0, 1). factorial(1, 1). factorial(2, 2).  retroaction(X, Y) :- factorial(K, Y), not(K = X), fail.  retroaction(K, Y) :- factorial(K, Y).    </code></pre>  <p>With fixed facts <em>factorial</em>, if I call the predicate <em>retroaction</em> to discover the factorial of 2, for example, I'll receive the correct answer:</p>  <pre><code>?- retroaction(2, X). X = 2. </code></pre>  <p>The solution that I'm trying to implement is:</p>  <pre><code>factorial_ret(Number, _) :-     retractall(factorial(_, _)),     assertz(factorial(0,1)),     factorial(X, Y),     not(X = Number),     NewNumber is X + 1,     Factorial is Y * NewNumber,     retractall(factorial(_, _)),     assertz(factorial(NewNumber, Factorial)),     fail.  factorial_ret(Number, Y) :-      factorial(Number, Y). </code></pre>  <p>If I try get the factorial of a number greater than 1, doesn't works. Someone have any idea of the why?</p>