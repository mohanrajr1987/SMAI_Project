<p>How to use the '<a href="http://www.swi-prolog.org/pldoc/doc_for?object=(%3D..)/2" rel="nofollow">Univ</a>' ( <code>=../2</code> ) prolog predicate with a Logtalk object method as parameter ?</p>  <p>Consider this code :</p>  <pre><code>baz(foo(X)) :-   write(predicate), write(X), nl.  run :-     Term =.. [baz, foo(testfoo)],     write(Term), nl, Term,nl,         TermLgt =.. [bar::baz, foo(testfoo2)],     write(TermLgt), nl, Term,nl.      :- object(bar).    :- public(baz/1).   baz(foo(X)) :-     write(method), write(X), nl.  :- end_object.  :- object(main).    :- public(run/0).   run :-     Term =.. [baz, foo(testfoo)],     write(Term), nl, Term,nl,         TermLgt =.. [bar::baz, foo(testfoo2)],     write(TermLgt), nl, Term,nl.  :- end_object. </code></pre>  <p>I'll obtain :</p>  <pre><code>?- {myfile}. % (0 warnings) true.  ?- run. baz(foo(testfoo)) predicatetestfoo  ERROR: =../2: Type error: `atom' expected, found `bar::baz' (a compound)  ?- main::run. baz(foo(testfoo)) ERROR: Undefined procedure: baz/1 ERROR:   However, there are definitions for: ERROR:         baz/1 </code></pre>  <p>What workaround to use for a good interpretation / compilation ? It seems issue is the same with swi-prolog building predicate like <code>predsort/3</code> (<a href="http://www.swi-prolog.org/pldoc/doc_for?object=predsort/3" rel="nofollow">predsort/3 doc</a>).</p>