<h2>Background</h2>  <p>We have a handful of Cisco C40s that I'm trying to automate via bash (although I'd be open to alternatives). I need to log into it, dial an IP, <em>get back the call ID that's returned</em>, and then use that CallID to send a DTMF tone to the far end. I'm able to get about 90% of the way there but for some reason using SSH isn't returning all the text that's returned when using an interactive session.</p>  <h2>Interactive Shell Sample:</h2>  <pre><code>login as: admin Using keyboard-interactive authentication. Password: Welcome to XXX TANDBERG Codec Release TC7.1.1.168aadf SW Release Date: 2014-04-11 *r Login successful  OK  xConfiguration Audio Volume: 0 ** end  OK xCommand Dial Number: FAR_END_IP  OK *r DialResult (status=OK):     CallId: 73     ConferenceId: 44 ** end </code></pre>  <h2>Non-Interactive Shell Samples</h2>  <h3>Without <code>ssh -T</code> or <code>ssh -t -t</code> Options</h3>  <p>This occurs where call-init-step1.txt contains the <code>xConfiguration Audio Volume: 0</code> and <code>xCommand Dial Number: FAR_END_IP</code> in addition to a <code>bye</code> to hang up.</p>  <pre><code>[user@controlserver C40]$ cat call-init-step1.txt | ssh admin@cisco_codec Pseudo-terminal will not be allocated because stdin is not a terminal. Welcome to XXX TANDBERG Codec Release TC7.1.1.168aadf SW Release Date: 2014-04-11 *r Login successful  OK  ** end  OK  OK </code></pre>  <p>What I'm missing here is the block with </p>  <pre><code>*r DialResult (status=OK):     CallId: 73     ConferenceId: 44 ** end </code></pre>  <p>so that I can parse it for the <code>CallID</code> and then use it to send the next commands.</p>  <h3>With <code>ssh -T</code> or <code>ssh -t -t</code> Options</h3>  <p>A few threads had suggested using <code>ssh -T</code> or <code>ssh -t -t</code> which in this case doesn't seem to help, below is the output.</p>  <pre><code>[user@controlserver C40]$ cat call-init-step1.txt | ssh -T admin@cisco_codec Welcome to XXX TANDBERG Codec Release TC7.1.1.168aadf SW Release Date: 2014-04-11 *r Login successful  OK  ** end  OK  OK </code></pre>  <p>And</p>  <pre><code>[user@controlserver C40]$ cat call-init-step1.txt | ssh -t -t admin@cisco_codec Welcome to XXX TANDBERG Codec Release TC7.1.1.168aadf SW Release Date: 2014-04-11 *r Login successful  OK  ** end  OK  OK </code></pre>  <h2>The Question</h2>  <p>Any insight in how to get the missing <code>DialResult</code> block would be greatly appreciated.</p>  <p>Edit: I should also mention that ultimately the command <code>cat call-init-step1.txt | ssh admin@cisco_codec</code> would get redirected to a file to be parsed further on in my script meaning it would probably look something like <code>cat call-init-step1.txt | ssh -t -t admin@cisco_codec &gt; results.txt</code> and then be parsed.</p>  <p>Edit 2: To frame what I'm working with the <a href="http://www.cisco.com/c/dam/en/us/td/docs/telepresence/endpoint/codec-c-series/tc4/api_reference_guide/codec-c60-c40_api_reference_guide_tc41.pdf" rel="nofollow">full API guide is found here</a></p>  <h2>Edit 2.5: An attempt with <code>expect</code></h2>  <p>Per a suggestion from @MarkSetchell we went ahead and wrote a semi-functional expect script that looks like the following:</p>  <pre><code>#!/usr/bin/expect spawn ssh admin@cisco_codec expect "*r Login successful" send "xConfiguration Audio Volume: 0" expect "OK" send "xCommand Dial Number: FAR_END_IP" expect "** end" </code></pre>  <p>That resulted in the following:</p>  <pre><code>[user@controlserver C40]$ expect expect-call spawn ssh admin@cisco_codec Welcome to XXX TANDBERG Codec Release TC7.1.1.168aadf SW Release Date: 2014-04-11 *r Login successful  OK  xConfiguration Audio Volume: 0xCommand Dial Number: FAR_END_IPxConfiguration Audio Volume: 0xCommand Dial Number: FAR_END_IP </code></pre>