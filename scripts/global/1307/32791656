<p>I have 3 columns . One with check box , One with text  column and one column with drop down.</p>  <p>I am binding the entire table itemsource to StepTaskViewInfo.CurrentStep.ProjectTasks.Items . StepTaskViewInfo is a variable in my VM and others are nested in it. This works fine .</p>  <p>Only thing that doesnt work is the IsReadOnly property of the FIRST Columns. Am assuming this is some issue because my items source is different and the read only property is different in terms of level of nesting from view model.</p>  <pre><code>For grid : Items Source = StepTaskViewInfo -&gt; CurrentStep -&gt; ProjectTasks- &gt;Items   For read only propety of each column(which doesnt work) :  IsReadOnly="{Binding StepTaskViewInfo.AreStepsTasksReadonly   StepTaskViewInfo  =&gt; AreStepsTasksReadonly             &lt;DataGrid RowHeaderWidth="0" x:Name ="TaskDataGrid"  Margin="20,0,0,0" ItemsSource="{Binding StepTaskViewInfo.CurrentStep.ProjectTasks.Items}" AutoGenerateColumns="False"                              CanUserSortColumns="False" HorizontalAlignment="Left" CanUserAddRows="False"  SelectionChanged="TaskRowSelectionChanged"                                        ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.HorizontalScrollBarVisibility="Auto"                                        Background="White" BorderThickness ="0"                                       ScrollViewer.CanContentScroll="True" Height="240"&gt;                                 &lt;DataGrid.Columns&gt;                                     &lt;DataGridTemplateColumn Width ="60" HeaderStyle="{StaticResource HeaderStyle}" Header="Selected" IsReadOnly="{Binding StepTaskViewInfo.AreStepsTasksReadonly,UpdateSourceTrigger=PropertyChanged }"&gt;                                         &lt;DataGridTemplateColumn.CellTemplate&gt;                                             &lt;DataTemplate&gt;                                                 &lt;CheckBox  VerticalAlignment="Center" HorizontalAlignment="Center"  IsChecked="{Binding IsSelected,UpdateSourceTrigger=PropertyChanged}"                                                             IsEnabled="{Binding IsTaskEnabled,UpdateSourceTrigger=PropertyChanged}"  /&gt;                                             &lt;/DataTemplate&gt;                                         &lt;/DataGridTemplateColumn.CellTemplate&gt;                                     &lt;/DataGridTemplateColumn&gt;           //Column 2                                     &lt;DataGridTextColumn HeaderStyle="{StaticResource HeaderStyle}" Header="Tasks" Width ="*" Binding="{Binding Name}" IsReadOnly="True"&gt;                                         &lt;DataGridTextColumn.ElementStyle&gt;                                             &lt;Style TargetType="TextBlock"&gt;                                                 &lt;Setter Property="TextWrapping" Value="Wrap" /&gt;                                             &lt;/Style&gt;                                         &lt;/DataGridTextColumn.ElementStyle&gt;                                         &lt;DataGridTextColumn.EditingElementStyle&gt;                                             &lt;Style TargetType="TextBox"&gt;                                                 &lt;Setter Property="TextWrapping" Value="Wrap" /&gt;                                                 &lt;Setter Property="AcceptsReturn" Value="true" /&gt;                                             &lt;/Style&gt;                                         &lt;/DataGridTextColumn.EditingElementStyle&gt;                                     &lt;/DataGridTextColumn&gt;             //Column 3                                       &lt;DataGridTemplateColumn  HeaderStyle="{StaticResource HeaderStyle}" Header="Status" Width ="130"&gt;                                         &lt;DataGridTemplateColumn.HeaderTemplate &gt;                                             &lt;DataTemplate&gt;                                                 &lt;StackPanel Orientation="Horizontal" Width="130"&gt;                                                     &lt;Label Content ="Status" HorizontalAlignment="Left" Margin ="0,0,0,0"/&gt;                                                     &lt;ComboBox Name ="DefaultStatusComboBox" ItemsSource="{StaticResource Status}" Width="86"  DropDownClosed="DefaultStatusComboBox_DropDownClosed"  /&gt;                                                 &lt;/StackPanel&gt;                                             &lt;/DataTemplate&gt;                                         &lt;/DataGridTemplateColumn.HeaderTemplate&gt;                                         &lt;DataGridTemplateColumn.CellTemplate&gt;                                             &lt;DataTemplate&gt;                                                 &lt;ComboBox SelectedItem="{Binding Status, UpdateSourceTrigger=PropertyChanged}" Height ="26" VerticalAlignment="Top" IsReadOnly ="{Binding StatusIsReadOnly}"                                                    IsEnabled ="{Binding IsSelected}"  ItemsSource="{StaticResource Status}"/&gt;                                             &lt;/DataTemplate&gt;                                         &lt;/DataGridTemplateColumn.CellTemplate&gt;                                     &lt;/DataGridTemplateColumn&gt;                                 &lt;/DataGrid.Columns&gt;                             &lt;/DataGrid&gt;      view model:  public class StepTaskViewModel : INavigationAware, INotifyPropertyChanged     {    private readonly IProjectWorkflowService projectWorkflowService;     private bool isVisible = true;     private readonly IUserService userService;            private string stageId;         private StepTaskViewInfo stepTaskViewInfo;          public StepTaskViewModel(IProjectWorkflowService projectWorkflowService, IUserService userService)         {             this.projectWorkflowService = projectWorkflowService;             this.userService = userService;             StepTaskViewInfo=new StepTaskViewInfo();         }          public StepTaskViewInfo StepTaskViewInfo         {             get { return stepTaskViewInfo; }             set             {                 stepTaskViewInfo = value;                   OnPropertyChanged();             }         }          // set current step - &gt;load tasks - &gt; set display names for each task --&gt; set drop down source for current step           public string StageId         {             get { return stageId; }             set             {                 stageId = value;                 StepTaskViewInfo.PeerReview.StageId = stageId;                 LoadData();             }         }             #region navigation         public void OnNavigatedTo(NavigationContext navigationContext)         {             StageId =(string) navigationContext.Parameters["StageId"] ;             IsVisible = true;          }          public bool IsNavigationTarget(NavigationContext navigationContext)         {             return true;         }          public void OnNavigatedFrom(NavigationContext navigationContext)         {             if (!IsVisible)                 return;             IsVisible = false;         }          public bool IsVisible         {             get { return isVisible; }             set             {                 isVisible = value;                 OnPropertyChanged();             }         }          public event PropertyChangedEventHandler PropertyChanged;          protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = "" )         {             var handler = PropertyChanged;             if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName));         }          #endregion          // called when stage id changes         public void LoadData()         {              var stepTaskViewInfo = projectWorkflowService.LoadProjectStepTaskInfo(StageId);              if (StepTaskViewInfo.CurrentStep != null)             {                 StepTaskViewInfo.CurrentStep.ProjectTasks.Items.Clear();             }             StepTaskViewInfo.AllTeamMembers = stepTaskViewInfo.AllTeamMembers;             StepTaskViewInfo.ProjectSteps = stepTaskViewInfo.ProjectSteps;             StepTaskViewInfo.PeerReview = stepTaskViewInfo.PeerReview;             StepTaskViewInfo.AreStepsTasksReadonly = stepTaskViewInfo.AreStepsTasksReadonly;             StepTaskViewInfo.PeerReview.Documents.Items.Add(new ActivityArtifact { FileName = string.Empty });         }             private string GetAliases(ObservableCollection&lt;SelectableTeamMember&gt; selectedStepMembers)         {             string aliases= selectedStepMembers.Aggregate("", (current, member) =&gt; current + (member.Alias + ";"));             aliases= aliases.TrimEnd(';');             return aliases;         }         private string GetDisplayNames(ObservableCollection&lt;SelectableTeamMember&gt; selectedStepMembers)         {             string names = selectedStepMembers.Aggregate("", (current, member) =&gt; current + (member.Name + ";"));             names= names.TrimEnd(';');             return names;         }          public void AssignResourcesToStep(ObservableCollection&lt;SelectableTeamMember&gt; selectedStepMembers)         {             StepTaskViewInfo.CurrentStep.StepTeamMembers = selectedStepMembers;             StepTaskViewInfo.CurrentStep.Resources = GetAliases(selectedStepMembers);             StepTaskViewInfo.CurrentStep.StepResourceDisplayName = GetDisplayNames(selectedStepMembers);               foreach (var task in StepTaskViewInfo.CurrentStep.ProjectTasks)             {                 task.AllTaskTeamMembers = StepTaskViewInfo.CurrentStep.StepTeamMembers;                 task.Resources = GetAliases(StepTaskViewInfo.CurrentStep.StepTeamMembers);                 task.TaskResourceDisplayName = GetDisplayNames(StepTaskViewInfo.CurrentStep.StepTeamMembers);             }         }          public void AssignResourcesToTask(ObservableCollection&lt;SelectableTeamMember&gt; selectedTaskMembers, string taskId)         {              var task = StepTaskViewInfo.CurrentStep.ProjectTasks.First(st =&gt; st.Id == taskId);             task.Resources = GetAliases(selectedTaskMembers);             task.TaskResourceDisplayName = GetDisplayNames(selectedTaskMembers);          }          public void AssignTaskTips(string ttid)         {              string taskTip = projectWorkflowService.GetTaskTip(ttid);               foreach (var task in StepTaskViewInfo.CurrentStep.ProjectTasks)             {                 if (task.TemplateTaskId == ttid)                     task.TaskTip = taskTip;             }          }          #region peerreview         public void DownloadDocument(string artifactId, string fileName)         {             projectWorkflowService.DownloadActivityArtifact(artifactId, fileName);         }         public void UploadDocument(string artifactId,string file)         {             projectWorkflowService.UploadActivityArtifact(StageId, artifactId, file);             var projectDocuments = projectWorkflowService.LoadPeerReviewDocuments(StageId);             projectDocuments.Items.Add(new ActivityArtifact { FileName = string.Empty });              StepTaskViewInfo.PeerReview.Documents = projectDocuments;         }          private void GetUsers()         {             foreach (ProjectPeerReview t in StepTaskViewInfo.PeerReview.Reviews.Items.ToList())             {                 if (string.IsNullOrEmpty(t.Id))                 {                     if (!string.IsNullOrEmpty(t.Alias))                     {                         User current = userService.SearchAlias(t.Alias);                          if (current == null)                         {                             MessageBox.Show("Could not find reviewer " + t.Alias);                             StepTaskViewInfo.PeerReview.Reviews.Items.Remove(t);                         }                         else                         {                             t.Name = current.Name;                         }                     }                 }             }         }          internal User[] GetSearchingUsersName(string name)         {             return userService.Search(name);         }          #endregion          public void UpdateTaskStatus(object selectedValue)         {             foreach (var task in StepTaskViewInfo.CurrentStep.ProjectTasks)             {                 task.Status = selectedValue.ToString();             }         }          public void LoadTasksForCurrentStep()         {             StepTaskViewInfo.CurrentStep.ProjectTasks = projectWorkflowService.LoadProjectTasks( StepTaskViewInfo.CurrentStep.Id);              StepTaskViewInfo.UpdateTaskResources();         }          public void SaveCurrentTasksWithStep()         {             if (StepTaskViewInfo.CurrentStep != null)             {                 projectWorkflowService.SaveTasksWithStep(StageId, StepTaskViewInfo.CurrentStep, StepTaskViewInfo.CurrentStep.ProjectTasks);             }         }          public bool SaveData()         {             if (StepTaskViewInfo.CurrentStep != null)             {                 GetUsers();                 return projectWorkflowService.SaveStepTaskViewInfo(StepTaskViewInfo, StageId);             }             return true;         }     }    } </code></pre>