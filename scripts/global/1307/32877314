<p>I needed to invert Columns/Rows on my DataGrid (see <a href="http://stackoverflow.com/questions/4132829/wpf-horizontal-datagrid">WPF horizontal DataGrid</a> and <a href="https://rotatedwpfdatagrid.codeplex.com/" rel="nofollow">RotatedDataGrid</a>)</p>  <p>Once I inverted it, I am having some weird effects on the images displayed inside my datagrid.</p>  <p>When I scroll down, the column 1 will crop the image by the left and a little on the right. The more I go down, the more it crops the left until there is nothing more.</p>  <p><a href="http://i.stack.imgur.com/Q3cwG.png" rel="nofollow"><img src="http://i.stack.imgur.com/Q3cwG.png" alt="enter image description here"></a></p>  <p><a href="http://i.stack.imgur.com/GhKo6.png" rel="nofollow"><img src="http://i.stack.imgur.com/GhKo6.png" alt="enter image description here"></a></p>  <p>How can I solve that ?</p>  <p>Here a full simple example if you want to test it (you just need to copy/paste it in a new project and scroll down to see the problem)</p>  <p>MainWindows.xaml</p>  <pre><code>    &lt;Window x:Class="RotatedDataGrid.MainWindow"         xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"         xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"         Title="MainWindow" Height="150" Width="1000"&gt;     &lt;Grid&gt;         &lt;DataGrid x:Name="MyRotatedDataGrid" HorizontalContentAlignment="Center"                      ScrollViewer.HorizontalScrollBarVisibility="Visible" ScrollViewer.VerticalScrollBarVisibility="Visible"                       AutoGenerateColumns="True"                      ItemsSource="{Binding Customers}"&gt;             &lt;DataGrid.Resources&gt;                 &lt;Style x:Key="DataGridBase" TargetType="Control"&gt;                     &lt;Setter Property="LayoutTransform"&gt;                         &lt;Setter.Value&gt;                             &lt;TransformGroup&gt;                                 &lt;RotateTransform Angle="-90" /&gt;                                 &lt;ScaleTransform ScaleX="1" ScaleY="-1" /&gt;                             &lt;/TransformGroup&gt;                         &lt;/Setter.Value&gt;                     &lt;/Setter&gt;                     &lt;Setter Property="TextOptions.TextFormattingMode" Value="Display" /&gt;                 &lt;/Style &gt;                 &lt;Style TargetType="DataGridCell" BasedOn="{StaticResource DataGridBase}"/&gt;                 &lt;Style TargetType="DataGridColumnHeader" BasedOn="{StaticResource DataGridBase}"/&gt;                 &lt;Style TargetType="DataGridRowHeader" BasedOn="{StaticResource DataGridBase}"/&gt;             &lt;/DataGrid.Resources&gt;              &lt;DataGrid.LayoutTransform&gt;                 &lt;TransformGroup&gt;                     &lt;RotateTransform Angle="90" /&gt;                     &lt;MatrixTransform Matrix="-1, 0, 0, 1, 0, 0" /&gt;                 &lt;/TransformGroup&gt;             &lt;/DataGrid.LayoutTransform&gt;              &lt;DataGrid.GroupStyle&gt;                 &lt;GroupStyle&gt;                     &lt;GroupStyle.HeaderTemplate&gt;                         &lt;DataTemplate&gt;                             &lt;StackPanel&gt;                                 &lt;TextBlock Text="{Binding Path=Name}" FontWeight="Bold" Padding="3"/&gt;                             &lt;/StackPanel&gt;                         &lt;/DataTemplate&gt;                     &lt;/GroupStyle.HeaderTemplate&gt;                     &lt;GroupStyle.ContainerStyle&gt;                         &lt;Style TargetType="{x:Type GroupItem}"&gt;                             &lt;Setter Property="Template"&gt;                                 &lt;Setter.Value&gt;                                     &lt;ControlTemplate TargetType="{x:Type GroupItem}"&gt;                                         &lt;Expander&gt;                                             &lt;Expander.Header&gt;                                                 &lt;StackPanel Orientation="Horizontal"&gt;                                                     &lt;TextBlock Text="{Binding Path=Name}"/&gt;                                                     &lt;TextBlock Text="{Binding Path=ItemCount}" Margin="8,0,4,0"/&gt;                                                     &lt;TextBlock Text="Items"/&gt;                                                 &lt;/StackPanel&gt;                                             &lt;/Expander.Header&gt;                                             &lt;ItemsPresenter /&gt;                                         &lt;/Expander&gt;                                     &lt;/ControlTemplate&gt;                                 &lt;/Setter.Value&gt;                             &lt;/Setter&gt;                         &lt;/Style&gt;                     &lt;/GroupStyle.ContainerStyle&gt;                 &lt;/GroupStyle&gt;             &lt;/DataGrid.GroupStyle&gt;          &lt;/DataGrid&gt;     &lt;/Grid&gt; &lt;/Window&gt; </code></pre>  <p>MainWindow.xaml.cs</p>  <pre><code>using System; using System.Collections.Generic; using System.ComponentModel; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Navigation; using System.Windows.Shapes;  namespace RotatedDataGrid {     /// &lt;summary&gt;     /// Interaction logic for MainWindow.xaml     /// &lt;/summary&gt;     public partial class MainWindow : Window     {         public ICollectionView Customers { get; private set; }         public ICollectionView GroupedCustomers { get; private set; }           public MainWindow()         {             InitializeComponent();                 var _customers = new List&lt;Customer&gt;                                  {                                      new Customer                                          {                                              FirstName = "Christian",                                              LastName = "Moser",                                              Gender = Gender.Male,                                              WebSite = new Uri("http://www.wpftutorial.net"),                                              ReceiveNewsletter = true,                                              Image = "Images/christian.jpg"                                          },                                      new Customer                                          {                                              FirstName = "Peter",                                              LastName = "Meyer",                                              Gender = Gender.Male,                                              WebSite = new Uri("http://www.petermeyer.com"),                                              Image = "Images/peter.jpg"                                          },                                      new Customer                                          {                                              FirstName = "Lisa",                                              LastName = "Simpson",                                              Gender = Gender.Female,                                              WebSite = new Uri("http://www.thesimpsons.com"),                                              Image = "Images/lisa.jpg"                                          },                                      new Customer                                          {                                              FirstName = "Betty",                                              LastName = "Bossy",                                              Gender = Gender.Female,                                              WebSite = new Uri("http://www.bettybossy.ch"),                                              Image = "Images/betty.jpg"                                          }                                  };              Customers = CollectionViewSource.GetDefaultView(_customers);              GroupedCustomers = new ListCollectionView(_customers);             GroupedCustomers.GroupDescriptions.Add(new PropertyGroupDescription("Gender"));               MyRotatedDataGrid.DataContext = this;         }     }          public enum Gender     {         Male,          Female     }       public class Customer : INotifyPropertyChanged      {          private string _firstName;          private string _lastName;          private Gender _gender;          private Uri _webSite;          private bool _newsletter;          private string _image;           public string FirstName          {              get { return _firstName; }              set              {                  _firstName = value;                  NotifyPropertyChanged("FirstName");              }          }           public string LastName          {              get { return _lastName; }              set              {                  _lastName = value;                  NotifyPropertyChanged("LastName");              }          }           public Gender Gender          {              get { return _gender; }              set              {                  _gender = value;                  NotifyPropertyChanged("Gender");              }          }           public Uri WebSite          {              get { return _webSite; }              set              {                  _webSite = value;                  NotifyPropertyChanged("WebSite");              }          }           public bool ReceiveNewsletter          {              get { return _newsletter; }              set              {                  _newsletter = value;                  NotifyPropertyChanged("Newsletter");              }          }           public string Image          {              get { return _image; }              set              {                  _image = value;                  NotifyPropertyChanged("Image");              }          }           #region INotifyPropertyChanged Members           public event PropertyChangedEventHandler PropertyChanged;           #endregion           #region Private Helpers           private void NotifyPropertyChanged(string propertyName)          {              if (PropertyChanged != null)              {                  PropertyChanged(this, new PropertyChangedEventArgs(propertyName));              }          }           #endregion      } } </code></pre>