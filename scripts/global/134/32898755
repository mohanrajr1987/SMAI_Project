<p>I implemented 3 sorting logarithms in C: Bubble Sort, Insertion Sort, and Quick Sort. When I test the run time of the algorithms Insertion constant runs far faster than bubble sort. I was led to believe they should be around the same time by this link <a href="http://bigocheatsheet.com/" rel="nofollow">http://bigocheatsheet.com/</a><br> Can anyone explain why Insertion sort is so much faster?</p>  <pre><code>#define _CRT_SECURE_NO_WARNINGS  #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;time.h&gt;  void insertSort(int arr[], int size){     int temp, j, i;      for (i = 1; i &lt; size; i++){         temp = arr[i];         for (j = i; j &gt; 0 &amp;&amp; temp &lt; arr[j - 1]; j--){             arr[j] = arr[j - 1];         }         arr[j] = temp;     } }  void quicksort(int arr[], int first, int last){     int pivot, j, temp, i;      if (first &lt; last){         pivot = first;         i = first;         j = last;          while (i &lt; j){             while (arr[i] &lt;= arr[pivot] &amp;&amp; i &lt; last)                 i++;             while (arr[j] &gt; arr[pivot])                 j--;             if (i &lt; j){                 temp = arr[i];                 arr[i] = arr[j];                 arr[j] = temp;             }         }          temp = arr[pivot];         arr[pivot] = arr[j];         arr[j] = temp;         quicksort(arr, first, j - 1);         quicksort(arr, j + 1, last);     } }  void bubbleSort(int arr[], int size){     int x = 0, y;      for (x; x &lt; size; x++){         for (y = 0; y &lt; size - 1; y++){             if (arr[y] &gt; arr[y + 1]){                 int temp = arr[y + 1];                 arr[y + 1] = arr[y];                 arr[y] = temp;             }         }     } }  void printArray(int arr[], int sizeArray){     int i = 0;     for (i; i &lt; sizeArray; i++){         printf("%i\n", arr[i]);     }      //  printf("\n");     //  for (i = 0; i &lt; number; i++){     //      printf("bubbleNums[%d] = %d     ", i, *(bubbleNums + i));     //      printf("insertNums[%d] = %d     ", i, *(insertNums + i));     //      printf("quickNums[%d] = %d\n", i, *(quickNums + i));     //  } }  int main(){     int *bubbleNums = (int *)malloc(100000 * sizeof(int)), *quickNums = (int *)malloc(100000 * sizeof(int)), *insertNums = (int *)malloc(100000 * sizeof(int));     int number;     int randNumber;     int i = 0;      printf("Enter a number: ");     scanf(" %i", &amp;number);      printf("\n");     srand(100);     for (i; i &lt; number; i++){         randNumber = rand() % 100;         bubbleNums[i] = randNumber;         insertNums[i] = randNumber;         quickNums[i] = randNumber;         //      printf("bubbleNums[%d] = %d     ", i, *(bubbleNums + i));         //      printf("insertNums[%d] = %d     ", i, *(insertNums + i));         //      printf("quickNums[%d] = %d\n", i, *(quickNums + i));     }      printf("\n");     clock_t t0 = clock();     bubbleSort(bubbleNums, number);     clock_t t1 = clock();     printf("Time to sort bubblesort of %i elements: %d milliseconds\n", number, (t1 - t0));      clock_t t2 = clock();     insertSort(insertNums, number);     clock_t t3 = clock();     printf("Time to sort insertSort of %i elements: %d milliseconds\n", number, (t3 - t2));      clock_t t4 = clock();     quicksort(quickNums, 0, number - 1);     clock_t t5 = clock();     printf("Time to sort quicksort of %i elements: %d milliseconds\n", number, (t5 - t4));          //printf("Bubble\n");         //printArray(bubbleNums, number);         //printf("Insert\n");         //printArray(insertNums, number);         //printf("Quick\n");         //printArray(quickNums, number);      getchar();     getchar();      return 0; } </code></pre>