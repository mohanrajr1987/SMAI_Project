<p>When loading the handlebarjs using requirejs, I'm getting a <code>ReferenceError: Handlebars is not defined</code> message.</p>  <p>Here's my config on the app.js file</p>  <pre><code>requirejs.config({     'baseUrl': 'assets/js',     'paths': {         'handlebars' : 'plugins/handlebars',         'controller' : 'controller',         'initialize'  : 'initialize'     },     'shim' : {         'handlebars': {             exports: 'handlebars'         },         'controller' : {             deps: [                 'handlebars'             ]         }     } });  requirejs([     'handlebars',     'initialize',     'controller' ]); </code></pre>  <p>On the controller.js file I have this:</p>  <pre><code>var source   = $("#entry-template").html(); var template = Handlebars.compile(source);  var context = {title: "My New Post", body: "This is my first post!"}; var ihtml    = template(context);  $('.testad').html(ihtml); </code></pre>  <p>But when I wrapped the above code with this, it seems to work:</p>  <pre><code>define(['handlebars'], function(Handlebars) {     // place above code here }); </code></pre>  <p>But the problem is, I have methods outside <code>define()</code> in which it couldn't be called.</p>  <pre><code>define(['handlebars'], function(Handlebars) {     // place above code here     function handleMe() {         // some codes here     } });  function callMe() {     handleMe(); } </code></pre>  <p>Another problem is, I have a initialize.js that looks for attribute <code>my-controller</code> and calls the functions assigned to it. Somewhat "modularized".</p>  <pre><code>define(['jquery'], function($) { $(function() {     $('[my-controller]').each(function(e, t) {         var a = $(t).attr('my-controller');         'undefined' != typeof window[a] &amp;&amp; $.isFunction(window[a]) ? window[a]($) : '';     }); }); </code></pre>  <p>So in my HTML, if I have <code>&lt;div my-controller="callMe"&gt;&lt;/div&gt;</code>, it will automatically call <code>callMe()</code> method wherein it is on my controller.js file. But placing the <code>callMe()</code> inside define, it couldn't be called since it won't be global anymore.</p>