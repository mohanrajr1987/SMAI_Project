<p>I have included a JS dependency (Foo.js) in my index.html file. When I call Foo.js in my React component, it finds the Constructor in the global namespace and instantiates it. This works great when I deploy it, but when I go to build a test around Component.js, the test can't find Foo.js</p>  <pre><code>&lt;!--Index.html--&gt; &lt;head&gt; &lt;script src="Foo.js"&gt;&lt;/script&gt; &lt;/head&gt; </code></pre>  <hr>  <pre><code>// Component.js var bar = new Foo(); // Works in deployment but not in Jest tests </code></pre>  <hr>  <p>When running my test I get this error:</p>  <blockquote>   <p>RefererenceError: Foo is not defined</p> </blockquote>  <p>Now I thought I would be clever and in my Component.js file declare Foo to be window.Foo, which worked in getting rid of the undefined dependency in my Jest tests.</p>  <hr>  <pre><code>// Component.js var Foo = window.Foo; var bar = new Foo(); </code></pre>  <p>Suddenly my Reference error went away and I was happy. So I continue to write tests and now I get a funky error that I think has to do with that global dependency again.</p>  <blockquote>   <p>TypeError: undefined is not a function</p> </blockquote>  <p>I believe that my error is still coming from Jest not properly mocking a dependency that is on the window object. I don't need to test the dependency, I just need it to be defined so I can get to writing tests for the rest of the Component. Does anyone have a thought on what I could possibly be doing wrong?</p>