<p>Help !</p>  <p><strong><em>I'm need to create p2p conference call</em></strong>, but it is impossible</p>  <p>I dont listen any sound, and i see only my stream(video) I have not any errors, this code i see in PhoneRTC repositories, in examples,</p>  <p>Here is my code, this is my RTCioSvc.js, i use this in my controller</p>  <pre><code>define(['app', './SignalingSvc', './AuthSvc'], function(app) { app.service('RtcIoSvc', function(SignalingSvc, AuthSvc, $rootScope) {     var self = this;      var username = AuthSvc.getId();      var session = null;     var duplicateMessages = [];     var callingTo = null;      var onCall = null;     var onAnswer = null;     var onIgnore = null;      SignalingSvc.emit('login', username);      SignalingSvc.on('login_error', function(message){         console.log('signaling: login_error');       });      SignalingSvc.on('login_successful', function(users){         console.log('signaling: login_successful');         console.log(users);         // users are online users     });      SignalingSvc.on('online', function(user){         console.log("signaling: new user appeared");         console.log('online', user);     });      SignalingSvc.on('offline', function(name){         if(name === callingTo &amp;&amp; session){             session.close();         }          console.log("signaling: someone goes offline");     });      SignalingSvc.on('disconnect', function(){         if(callingTo){             session.close();             console.log("signaling: peer disconnected");         }     });      SignalingSvc.on('messageReceived', onVideoMessageReceived);      SignalingSvc.on('onMessage', function(message) {         session.receiveMessage(message);     });      function call (isInitiator) {         var config = {             isInitiator: isInitiator,             turn: {                 host: 'turn:ec2-54-68-238-149.us-west-2.compute.amazonaws.com:3478',                 username: 'test',                 password: 'test'             },             streams: {                 audio: true,                 video: true             }         };          session = new cordova.plugins.phonertc.Session(config);          cordova.plugins.phonertc.setVideoView({             container: document.getElementById('video-view'),             local: {                 position: [0, 0],                 size: [100, 100]             }         });          session.on('sendMessage', function (data) {              SignalingSvc.emit('sendMessage', {                 id: username,                 type: 'phonertc_handshake',                 data: JSON.stringify(data)             });             console.log("sent handshake message");         });          session.call();          console.log("calling...", peer_id);     }      function onVideoMessageReceived(name, message){         switch (message.type){             case 'call':                 console.log(message);                 callingTo = name;                 console.log("someone calling you");                 onCall &amp;&amp; typeof onCall === "function" &amp;&amp; onCall();                 break;             case 'answer':                 console.log(username + ' he answered');                 console.log(message);                 call(true);                 onAnswer &amp;&amp; typeof onAnswer === "function" &amp;&amp; onAnswer();                 break;             case 'phonertc_handshake':                 if (duplicateMessages.indexOf(message.data) === -1) {                     session.receiveMessage(JSON.parse(message.data));                     duplicateMessages.push(message.data);                 }                 break;             case 'ignore':                 /*need to add session close for other cases as well*/                 session &amp;&amp; session.close();                 onIgnore &amp;&amp; typeof onIgnore === "function" &amp;&amp; onIgnore();                 break;         }     }      self.initCallbacks = function (callbacks) {         onCall = callbacks.onCall;         onAnswer = callbacks.onAnswer;         onIgnore = callbacks.onIgonre;     };      self.call = function (userId) {         callingTo = userId;         SignalingSvc.emit('sendMessage', callingTo, {type: 'call'});     };      self.answer = function () {         call(false);          setTimeout(function(){                 SignalingSvc.emit('sendMessage', callingTo, { type: 'answer'});         }, 1500);     };      self.ignore = function () {         SignalingSvc.emit('sendMessage', callingTo, { type: 'ignore' });     }; }); </code></pre>  <p>});</p>  <p>Thank you for the attention</p>