<p>In a Durandal app with MVC + Web API back-end I have the following <code>C#</code> class:</p>  <pre><code>public class ProductFilter {     public string Name { get; set; }     public List&lt;ProductFilter&gt; DependentFilters { get; set; } } </code></pre>  <p>I have a front-end instance model <code>filter.js</code> that I want to map to this class. It currently looks like this:</p>  <pre><code>define(["models/filter"], function (filter) {     return function (data) {         var self = this;         data = data || {};          self.name = ko.observable(ko.unwrap(data.name || ""));          self.dependentFilters = ko.observableArray();          $.each(ko.unwrap(data.dependentFilters || []), function () {              // ---&gt; 'filter' is undefined, so I cannot call new filter(..)             self.dependentFilters.push(new filter(this));         });      }; }); </code></pre>  <p>As you can see, the <code>C#</code> class has a collection of its own type, and I need to replicate that structure on the Durandal model. In the example above I've tried injecting the <code>filter.js</code> module into itself, but <code>RequireJs</code> doesn't seem to like that as the <code>filter</code> variable is always <code>undefined</code>.</p>  <p>My problem probably stems from a lack of <code>RequireJs</code> or <code>AMD</code> modules knowledge, but how can I actually call the constructor of the current module within itself?</p>