<p>I am writing my own testing class. The problem I have encountered is testing whether a function being tested throws expected exception.</p>  <p>I know I can do something like this:</p>  <pre><code>try{   tested_function($expression-&gt;beingTestedThatWillThrowAnException()); }catch ($exception){    if($exception instanceof MyExpectedException){      echo 'OK';    } else {      echo 'FAILED';    } } </code></pre>  <p>but I'd wish I don't have to write all this <code>try ... catch</code> block everytime, so I want to put it in a tester class method.</p>  <p>But when I do something like this</p>  <pre><code>class Tester {    /**     * @param mixed expression to evaluate     * @param string expected exception class name     */    public function assertException($expression, $expectedException){      try{        $expression;      } catch ($ex) {        if(is_subclass_of($ex, $expectedException)){          echo 'OK';        } else {          echo 'FAILED';        }      } </code></pre>  <p>this fails, because <code>$expression</code> is evaluated in the moment of method call, so before the program enters <code>try</code> block.</p>  <p>The other way I tried is to use <code>eval</code> and passing the <code>$expression</code> as a string:</p>  <pre><code>class Tester {    /**     * @param string expression to evaluate     * @param string expected exception class name     */    public function assertException($expression, $expectedException){      try{        eval($expression);      } catch ($ex) {        if(is_subclass_of($ex, $expectedException)){          echo 'OK';        } else {          echo 'FAILED';        }      } </code></pre>  <p>This is ok, but it does not allow me to use variables from the main scope, so for example this line fails <code>$test-&gt;assertException('$d-&gt;divideBy(0);');</code> because I don't have the <code>$d</code> variable in <code>Tester::assertException()</code> scope.</p>  <p>Should I declare <em>all possible</em> variable names as global?</p>  <p>How can I force the expression to be evaluated within a method (or in other way achieve the desired result)?</p>  <p>I know that there are ready-to-use unit testers (PHPUnit, SimpleTest etc.) but I was desiring to make this myself.</p>