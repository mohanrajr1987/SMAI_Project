<p>I have a subclass of UIButton called CircleButton:</p>  <pre><code>class CircleButton: UIButton {      var percentage: Int = 0 {         didSet {             animateCircle(0.5)         }     }      let theCircle:CircleLayer = CircleLayer()      override func awakeFromNib() {         super.awakeFromNib()         load()     }      override init(frame: CGRect) {         super.init(frame: frame)         load()     }      func load() {         self.layer.addSublayer(theCircle)         theCircle.frame = self.bounds         theCircle.percentage = CGFloat(percentage)           if theCircle.respondsToSelector("setContentsScale:") {             theCircle.contentsScale = UIScreen.mainScreen().scale         }     }      required init?(coder aDecoder: NSCoder) {         super.init(coder: aDecoder)         //fatalError("init(coder:) has not been implemented")     }        override func drawRect(rect: CGRect) {         // initial drawing - for interface builder         StyleKit.drawCircleButton(frame: rect, percentage: CGFloat(percentage))     }       func animateCircle(duration: NSTimeInterval) {         // set property to animate         let animation = CABasicAnimation(keyPath: "percentage")          // Set the animation duration appropriately         animation.duration = duration          // Set start and beginning         animation.fromValue = theCircle.percentage         animation.toValue = self.percentage          // Do a linear animation (i.e. the speed of the animation stays the same)         animation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionDefault)          // Set final property so it doesn't revert back to original value         theCircle.percentage = CGFloat(self.percentage)          // Do the actual animation by attaching it to object to animate         theCircle.addAnimation(animation, forKey: "animateCircle")     } } </code></pre>  <p>and a class CircleLayer which handles the drawing of the core animation layer:</p>  <pre><code>class CircleLayer: CALayer {      var percentage: CGFloat = 0      override func drawInContext(ctx: CGContext) {         UIGraphicsPushContext(ctx)          StyleKit.drawCircleButton(frame: superlayer!.bounds, percentage: self.percentage)          UIGraphicsPopContext()     }      override class func needsDisplayForKey(key: String) -&gt; Bool {         if key == "percentage" {             return true         }         return super.needsDisplayForKey(key)     } } </code></pre>  <p>It seems only drawRect is being called when initialized in code - none of the animations fire, unlike when initialized in IB.  Why is that happening and is there anything I can do to simplify this code (avoid bugs) in the future?</p>  <p>Any help would be greatly appreciated.</p>