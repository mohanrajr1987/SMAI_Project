<pre><code>#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;string.h&gt; #define MAX_LINE 1000 #define MAX_QUERY 100  int read_lines(char line[MAX_LINE]); int print_lines(char query[MAX_LINE]);  int main(int argc,char *argv[]){     char query[MAX_QUERY];     strcpy(query, argv[1]);     printf("SO: query = %s\n", query);     printf("---\n");     print_lines(query);     return 0; }  int read_lines(char line[MAX_LINE]){     int line_len = 0;     int c;      while ((c = getchar()) != EOF){         if(c == '\n'){             break;         }         else{             line[line_len] = c;             line_len ++;         }     }     line[line_len] = '\0';     if(c == EOF &amp;&amp; line_len == 0)         return EOF;     printf("%s\n",line);     return line_len; }  int print_lines(char query [MAX_QUERY]){     int line_num = 0;     int query_len = strlen(query);     int line_len = 0,i,y,z = 0, position,c = 0;     int limit = query_len &gt; line_len ? line_len : query_len;     double score = 0, maximum;     char score_list[15] = "";     char line[MAX_LINE];     while((line_len = read_lines(line)) != EOF){         c = 0;         line_num ++;         printf("S1: line   %d, bytes = %d \n",line_num,line_len);         /* Loops through the query and line and compares the characters          * If it is the same, it adds to the score          * Once it gets to different character the score is reset          */         for (i = 0; i &lt; limit; i++){             for (y = 0; y &lt; limit; y++){                 if (query[i] == line[y]){                     score++;                 }                 else if(score != 0 &amp;&amp; query[i] != line[y]){                     score_list[z] = score;                     z++;                 }             }         }         /* Finds the largest score in the array          */         maximum = score_list[0];         for (position = 1; position &lt; 15; position++){             if (score_list[position] &gt; maximum){                 maximum = score_list[position];             }         }         /* resets the score list back to zero          */         while (c &lt; 15){             score_list[c] = 0;             c++;         }         printf("S2: line   %d, score = %f\n",line_num,maximum);          printf("---\n");     }     return 0; } </code></pre>  <p>the code reads a query which is for example, "fall down", and checks if it is in the lines and scores them according to how many characters match. However. I keep printing out only a 0 score and when I print the string through the loop, phrases get repeated where it should not be. my read_lines function reads a text file from stdin line by line and returns the byte size. How can I get the scoring to work and fix comparison loop?</p>  <p>Output should be</p>  <pre><code>Down, down, down. Would the fall NEVER come to an end! 'I wonder how   S1: line     1, bytes = 68   S2: line     1, score =  5.000 --- many miles I've fallen by this time?' she said aloud. 'I must be getting   S1: line     2, bytes = 72   S2: line     2, score =  4.000 </code></pre>  <p>however I'm getting</p>  <pre><code>SO: query = fall down --- Down, down, down. Would the fall NEVER come to an end! 'I wonder how S1: line   1, bytes = 68 line   1, score = 0.000000 --- many miles I've fallen by this time?' she said aloud. 'I must be getting S1: line   2, bytes = 72 : line   2, score = 0.000000 --- </code></pre>  <p>If i print the line by the loop by adding printf("%c",line[y]), I get this output.</p>  <pre><code>SO: query = fall down --- Down, down, down. Would the fall NEVER come to an end! 'I wonder how S1: line   1, bytes = 68 Down, down, down. Would the fall NEVER come tDown, down, down. Would the fall     NEVER come to an end! 'I wonder how                   °·) ⌠"" S2: line   1, score = 0.000000 --- many miles I've fallen by this time?' she said aloud. 'I must be getting S1: line   2, bytes = 72 many miles I've fallen by this time?' shmany miles I've fallen by this time?' she said aloud. 'I must be getting           °·) ⌠""  S2: line   2, score =     0.000000 ---  int print_lines(char query [MAX_QUERY]){     int line_num = 0;     int query_len = strlen(query);     int line_len = 0,i,y,z = 0, position,c = 0;     int limit = query_len &gt; line_len ? line_len : query_len;     double score = 0, maximum;     char score_list[15] = "";     char line[MAX_LINE];     while((line_len = read_lines(line)) != EOF){         c = 0;         line_num ++;         printf("S1: line   %d, bytes = %d \n",line_num,line_len);         /* Loops through the query and line and compares the characters          * If it is the same, it adds to the score          * Once it gets to different character the score is reset          */         for (i = 0; i &lt; limit; i++){             for (y = 0; y &lt; limit; y++){                 if (query[i] == line[y]){                     score++;                 }                 else if(score != 0 &amp;&amp; query[i] != line[y]){                     score_list[z] = score;                     z++;                 }             }         }         /* Finds the largest score in the array          */         maximum = score_list[0];         for (position = 1; position &lt; 15; position++){             if (score_list[position] &gt; maximum){             maximum = score_list[position];             }         }         /* resets the score list back to zero          */         while (c &lt; 15){             score_list[c] = 0;             c++;         }         printf("S2: line   %d, score = %f\n",line_num,maximum);          printf("---\n");     }     return 0; } </code></pre>