<p>We have a menu represented as a <code>ul-&gt;li</code> list (simplified):</p>  <pre><code>&lt;ul class="dropdown-menu" role="menu"&gt;     &lt;li ng-repeat="filterItem in filterCtrl.filterPanelCfg track by filterItem.name"         ng-class="{'divider': filterItem.isDivider}" class="ng-scope"&gt;         &lt;a href="" class="ng-binding"&gt; Menu Item 1&lt;/a&gt;     &lt;/li&gt;     ...     &lt;li ng-repeat="filterItem in filterCtrl.filterPanelCfg track by filterItem.name"         ng-class="{'divider': filterItem.isDivider}" class="ng-scope"&gt;         &lt;a href="" class="ng-binding"&gt; Menu Item 2&lt;/a&gt;     &lt;/li&gt; &lt;/ul&gt; </code></pre>  <p>Where somewhere at position N, there is a divider, which can be identified by <em>evaluating</em> <code>filterItem.isDivider</code> or by checking the text of the <code>a</code> link (in case of a divider, it's empty).</p>  <p>Now, the goal is to get all of the menu items that are located before the divider. How would you approach the problem?</p>  <hr>  <p>My current approach is rather generic - to extend <code>ElementArrayFinder</code> and add <code>takewhile()</code> function (inspired by Python's <a href="https://docs.python.org/2/library/itertools.html#itertools.takewhile"><code>itertools.takewhile()</code></a>). Here is how I've implemented it (based on <a href="https://github.com/angular/protractor/blob/master/lib/element.js#L201"><code>filter()</code></a>):</p>  <pre><code>protractor.ElementArrayFinder.prototype.takewhile = function(whileFn) {     var self = this;     var getWebElements = function() {         return self.getWebElements().then(function(parentWebElements) {             var list = [];             parentWebElements.forEach(function(parentWebElement, index) {                 var elementFinder =                     protractor.ElementFinder.fromWebElement_(self.ptor_, parentWebElement, self.locator_);                  list.push(whileFn(elementFinder, index));             });             return protractor.promise.all(list).then(function(resolvedList) {                 var filteredElementList = [];                 for (var index = 0; index &lt; resolvedList.length; index++) {                     if (!resolvedList[index]) {                         break;                     }                     filteredElementList.push(parentWebElements[index])                 }                 return filteredElementList;             });         });     };     return new protractor.ElementArrayFinder(this.ptor_, getWebElements, this.locator_); }; </code></pre>  <p>And, here is how I'm using it:</p>  <pre><code>this.getInclusionFilters = function () {     return element.all(by.css("ul.dropdown-menu li")).takewhile(function (inclusionFilter) {         return inclusionFilter.evaluate("!filterItem.isDivider");     }); }; </code></pre>  <p>But, the test is just hanging until <code>jasmine.DEFAULT_TIMEOUT_INTERVAL</code> is reached on the <code>takewhile()</code> call. </p>  <p>If I put <code>console.log</code>s into the loop and after, I can see that it correctly pushes the elements before the divider and stops when it reaches it. I might be missing something here.</p>  <p>Using protractor 2.2.0.</p>  <hr>  <p>Also, let me know if I'm overcomplicating the problem.</p>