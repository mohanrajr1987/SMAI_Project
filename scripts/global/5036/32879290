<p>I was implementing a Tree-based Set in Java for a project (which is mostly irrelevant to the issue, but provides context) and thought it would be nice for elements to keep track of their ancestor; this would be copied to each child node as it was adopted by a parent, and set whenever the root node of the tree changed (I am using a Tree class that encapsulates a root Node, in case you were wondering). The desired behavior would be that as soon as the ancestor of a node's parent changes, the child node would correspondingly change its own ancestor. This would help ensure that no cycles were introduced during adoption, as you would only need to test whether the prospective adoptee is orphaned and not the ancestor of the current node, and that would ensure that everything is kosher. To this end, a mutable encapsulation of an Element seemed like the right idea, in lieu of a pointer as I might use were I writing in C. The only downside is, if a node is ever orphaned (i.e. its parent forgets it, and it forgets its parent, as well as its ancestor), all of its descendants would have to have their own ancestor values modified as well, as they would not know that this disownment occurred. Therefore, for practical reasons, I abandoned the idea of having this Ancestor reference, as it would be more trouble to implement than its benefit would merit. However, I was wondering whether there was any way to implement a hierarchically mutable reference in Java; namely, any time you copy it, any change would propogate <em>down</em> the copy chain. An example of the desired behavior:</p>  <pre><code>interface HierarchyReference&lt;A&gt; {     public A getValue(); // returns value     public HierarchyReference&lt;A&gt; chainedCopy(); // creates a chained copy     public void mutate(A val); // changes the value for this, and all chained copies     public void forsake(); // disregard upstream changes, propogate own changes downstream }  HierarchyReference&lt;String&gt; a = new MyHierarchyRefererence&lt;String&gt;("a"); HierarchyReference&lt;String&gt; b = a.chainedCopy(); HierarchyReference&lt;String&gt; c = b.chainedCopy(); a.getValue(); // "a" b.getValue(); // "a" c.getValue(); // "a" b.mutate("b"); a.getValue(); // "a" b.getValue(); // "b" c.getValue(); // "b" a.mutate("c"); a.getValue(); // "c" b.getValue(); // "c" c.getValue(); // "c" b.forsake(); a.mutate("a"); a.getValue(); // "a" b.getValue(); // "c" c.getValue(); // "c" b.mutate("b"); a.getValue(); // "a" b.getValue(); // "b" c.getValue(); // "b" </code></pre>  <p>Is this at all reasonable/possible to implement?</p>