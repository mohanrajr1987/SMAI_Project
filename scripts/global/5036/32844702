<p>I have a class <code>Foo</code> that operates that need a reference to be built (it will be used to work on that memory space)</p>  <pre><code>template&lt;typename T&gt; class Foo {   public:     Foo(T&amp; value) : _value(value) {}     ...   private:     T&amp; _value; }; </code></pre>  <p>I also have a linear memory space of multiple instances of <code>T</code></p>  <pre><code>std::array&lt;T, SIZE&gt; buffer; </code></pre>  <p>What I'd like to build is an array of object of type <code>Foo</code> which maps the differents instances of my buffer. Which means each instance of <code>Foo</code> has to be built using the correct reference.</p>  <pre><code>std::array&lt;Foo&lt;T&gt;, SIZE&gt; operators; </code></pre>  <p>Still, <code>operators</code> is cannot be trivially initialize, and I can manage to build it by 'mapping' the buffer through the 'Foo' constructor.</p>  <p>Is there any way to do ? I tried using <code>std::forward</code> and <code>std::initializer_list</code> but those cannot be constructed from my buffer.</p>  <p>Note that I need my buffer to stay aligned for communication purposes, and I will en up overloading the <code>Foo</code> class to implement different behaviour for different elements of my array.</p>