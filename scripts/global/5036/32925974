<p>Suppose I have:</p>  <pre><code>class Map { public:     Map();     vector&lt;Territory&gt;* getTerritories();  };  vector&lt;Territory&gt;* Map::getTerritories() {     vector&lt;Territory&gt; t;     for (int i = 0; i &lt; 8; i++) {         Territory ter;         ter.setName("Territory " + std::to_string(i + 1));         t.push_back(ter);     }     return &amp;t; } </code></pre>  <p>Now in another class, I want to get the same vector I created in the <code>getTerritories()</code> method.</p>  <pre><code>Here's how:      void GameSetup::assignTerritories()     {         vector&lt;Territory&gt;  * generatedTeritories = (*map).getTerritories(); // dereferenced     } </code></pre>  <p>I'm not getting a compiler error because they're both pointers. But somehow I cannot seem to access my Territory objects within my vector by simple iteration like you would normally do over a vector. </p>  <p>At this point, <code>(*map).getTerritories()</code> gets a pointer to my territory vector (if I try to follow). Now suppose I want to make an 'alias' of some sort of this pointer I'm returning, how would I do so? Is it possible to get the address of a pointer? I asked myself this question and tried the following:</p>  <pre><code>vector&lt;Territory&gt;  * generatedTeritories = &amp;(map-&gt;getTerritories()); </code></pre>  <p>but that obviously didn't work. I'm not sure what else to do and I've been going in circles.</p>