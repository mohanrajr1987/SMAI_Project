<p>Using leaflet.draw, I instantiate the drawControl I with:</p>  <pre><code>scope.drawOptions = {   position: 'topright',   draw: {     polyline: false,     polygon: {       icon: new L.DivIcon({         iconSize: new L.Point(16, 16),         className: 'leaflet-div-icon leaflet-editing-icon my-own-class'       }),       allowIntersection: false,       drawError: {         color: '#5878B8',         message: '&lt;strong&gt;Oh snap!&lt;strong&gt; you can\'t draw that!'        },       shapeOptions: shapeOptions     },     circle: false, // Turns off this drawing tool     rectangle: false,     marker: false   },   edit: {     featureGroup: self.featureGroup   } }; scope.drawControl = new L.Control.Draw(scope.drawOptions); map.addControl(scope.drawControl); </code></pre>  <p>But the style reverts back to the "default" when entering edit mode. I tried to combat this with:</p>  <pre><code>map.on('draw:editstart', function(e) {   scope.drawControl.setDrawingOptions({     polygon: {       icon: new L.DivIcon({         iconSize: new L.Point(16, 16),         className: 'leaflet-div-icon leaflet-editing-icon my-own-class'       })     },   }) }); </code></pre>  <p>But that didn't help. Any suggestions?</p>  <p>There's a closed github issue on this but I couldn't figure it out: <a href="https://github.com/Leaflet/Leaflet.draw/issues/48#issuecomment-141546589" rel="nofollow">https://github.com/Leaflet/Leaflet.draw/issues/48#issuecomment-141546589</a></p>  <p>I created this jfiddle if anyone wants to play around: <a href="http://jsfiddle.net/markdickersonvt/mwz7pg2n/" rel="nofollow">http://jsfiddle.net/markdickersonvt/mwz7pg2n/</a></p>