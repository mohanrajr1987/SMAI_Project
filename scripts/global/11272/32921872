<p>I am using spring mvc to financial data handling project. In  spring security redirects a user to the login page upon httpsession expiry. so i need  to display a 'session expired' message, so they know why they are now at the login page.</p>  <p>i used custom filter with spring security to do that but it is not work properly.</p>  <p>If someone can point me in the right direction that would be great.</p>  <p><strong>spring-security.xml</strong></p>  <pre><code>    &lt;http use-expressions="true" auto-config="true"&gt;         &lt;intercept-url pattern="/dashboard" access="hasAnyRole('PERSONAL_BANKING', 'CORPORATE','CORPORATE_FUND_USER')" /&gt;         &lt;intercept-url pattern="/personal/**" access="hasAnyRole('PERSONAL_BANKING', 'CORPORATE')" /&gt;         &lt;intercept-url pattern="/corporate-dashboard" access="hasRole('2222')" /&gt;         &lt;intercept-url pattern="/corporate/**" access="hasRole('2222')" /&gt;         &lt;form-login login-page="/login"             authentication-failure-handler-ref="customAuthenticationFailureHandler"             authentication-success-handler-ref="customAuthenticationSuccessHandler" /&gt;          &lt;logout success-handler-ref="customLogoutSuccessHandler"             invalidate-session="true" delete-cookies="JSESSIONID"/&gt;          &lt;access-denied-handler ref="my403" /&gt;         &lt;csrf /&gt;         &lt;custom-filter ref="ajaxTimeoutRedirectFilter" after="EXCEPTION_TRANSLATION_FILTER"/&gt;         &lt;custom-filter ref="sessionExpirationFilter" before="LAST" /&gt;     &lt;/http&gt;      &lt;beans:bean id="my403"         class="com.fg.banking.ib.filter.CustomAccessDeniedHandler"&gt;     &lt;/beans:bean&gt;      &lt;authentication-manager alias="authManager"&gt;         &lt;authentication-provider user-service-ref="userLoginHelper"&gt;             &lt;password-encoder ref="encoder" /&gt;         &lt;/authentication-provider&gt;     &lt;/authentication-manager&gt;      &lt;beans:bean id="sessionExpirationFilter"          class="com.fg.seylan.banking.ib.filter.SessionExpirationFilter"&gt;     &lt;/beans:bean&gt;      &lt;beans:bean id="ajaxTimeoutRedirectFilter"         class="com.fg.banking.common.web.filter.AjaxTimeoutRedirectFilter"&gt;          &lt;/beans:bean&gt;      &lt;beans:bean id="encoder"         class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"&gt;     &lt;/beans:bean&gt;      &lt;beans:bean id="customAuthenticationSuccessHandler"         class="com.fg.seylan.banking.ib.filter.SeylanCustomAuthenticationSuccessHandler"&gt;     &lt;/beans:bean&gt;      &lt;beans:bean id="customAuthenticationFailureHandler"         class="com.fg.banking.ib.filter.CustomAuthenticationFailureHandler"&gt;     &lt;/beans:bean&gt;      &lt;beans:bean id="customLogoutSuccessHandler"         class="com.fg.banking.common.web.filter.CustomLogoutSuccessHandler"&gt;     &lt;/beans:bean&gt;  &lt;/beans:beans&gt; </code></pre>  <p><strong>sessionExpirationFilter</strong></p>  <pre><code>  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException,       ServletException {      HttpServletRequest httpRequest = (HttpServletRequest) request;     HttpServletResponse httpResponse = (HttpServletResponse) response;      HttpSession session = httpRequest.getSession(false);      if (!httpRequest.getServletPath().equals("/index.jsp") &amp;&amp; !httpRequest.getServletPath().equals("/login")) {       if (session == null &amp;&amp; httpRequest.getRequestedSessionId() != null &amp;&amp; !httpRequest.isRequestedSessionIdValid()) {         httpRequest.getSession().invalidate();         String targetUrl = httpRequest.getContextPath() + "/logout-sessiontimeout";         httpResponse.sendRedirect(httpResponse.encodeRedirectURL(targetUrl));         return;       }     }      chain.doFilter(request, response);    } </code></pre>  <p><strong>LoginController</strong></p>  <p>In here redirect to login page with custom error message but it automatically ridirect to login page.</p>  <pre><code> @RequestMapping(value = "/logout-sessiontimeout", method = RequestMethod.GET)   public String logoutSessionTimeoutNew(ModelMap model, HttpServletRequest request) {      // session time out invalidate the session     SecurityContextHolder.clearContext();     request.getSession().invalidate();     model.clear();     return "redirect:login?error=" + CipherUtil.encrypt("sessiontimeout");   } </code></pre>