<p>we have a project which is responsible to be kind of proxy to oauth2 providers. Most of them are common ones like facebook, twitter, but one of them is specific for our company. So we have couple of:</p>  <pre><code>@Bean public OAuth2RestTemplate providerOAuth2RestTemplate(OAuth2ClientContext clientContext) {     OAuth2RestTemplate oAuth2RestTemplate = new OAuth2RestTemplate(providerOAuth2ResourceDetails(), clientContext);     return oAuth2RestTemplate; }  @Bean public OAuth2ProtectedResourceDetails providerOAuth2ResourceDetails() {     AuthorizationCodeResourceDetails resource = new AuthorizationCodeResourceDetails();     resource.setAccessTokenUri(tokenUri);     resource.setUserAuthorizationUri(authorizationUri);     resource.setUseCurrentUri(false);     resource.setPreEstablishedRedirectUri(redirectUri);     resource.setClientId(clientId);     resource.setClientAuthenticationScheme(clientAuthenticationScheme);     resource.setClientSecret(clientSecret);     return resource; } </code></pre>  <p>and we are using them depending on which url request came in to our proxy. We do some stuff, and then call:</p>  <pre><code>providerOAuth2RestTemplate.getAccessToken(); </code></pre>  <p>All of above WORKS! :) It asks providers to log in, show correct forms for example from facebook etc.</p>  <p>But, we want to add spring security to our proxy to add some admin sites etc. And there is a problem. Whenever we call:</p>  <pre><code>providerOAuth2RestTemplate.getAccessToken(); </code></pre>  <p>we get a login page from our proxy system, instead calling oauth2 provider. So it knows that log in is required to get access token, but calls different login.. ; )</p>  <p>Spring security basic setup:</p>  <pre><code>@Configuration @EnableWebSecurity public class WebSecurityConfig extends WebSecurityConfigurerAdapter {  @Autowired public void configureGlobal(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception {     authenticationManagerBuilder             .inMemoryAuthentication()             .withUser("user").password("password").roles("USER").and()             .withUser("admin").password("password").roles("ADMIN"); }  @Override public void configure(WebSecurity webSecurity) {     webSecurity             .ignoring()             .antMatchers("img/**"); }  @Override protected void configure(HttpSecurity httpSecurity) throws Exception {      httpSecurity             .authorizeRequests()                 .antMatchers("/admin").hasRole("ADMIN")             .anyRequest().permitAll()             .and()             .formLogin()                 .permitAll()             .and()             .logout()             .logoutUrl("/logout")             .logoutSuccessUrl("/logoutSuccess")                 .invalidateHttpSession(true);   } } </code></pre>