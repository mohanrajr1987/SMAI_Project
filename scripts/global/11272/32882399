<p>I have a web application that uses Spring Security for authentication.  <strong>IT WAS WORKING FINE in Tomcat 6</strong>. I had to deploy it to Tomcat 7 as per business requirement change, and now is not working. </p>  <p>spring-security.xml ( for simplicity, I changed the query)</p>  <pre><code>&lt;form-login login-page="/redirect"          login-processing-url="/submitLogin"          username-parameter="j_username"          password-parameter="j_password"          authentication-failure-handler-ref="loginFailureHandler"          authentication-success-handler-ref="loginSuccessHandler" /&gt;   &lt;authentication-manager&gt;     &lt;authentication-provider&gt;         &lt;jdbc-user-service              data-source-ref="sybaseDataSource"              users-by-username-query="SELECT distinct EnterpriseID as username, 'password' as password, 1 as enabled FROM users where id = ?"              authorities-by-username-query="SELECT ? as id, 'ROLE_USER' as authority"             &lt;!-- I know, it shouldnt be like this, just for the sake of the user having an authority --&gt;         /&gt;     &lt;/authentication-provider&gt; &lt;/authentication-manager&gt; </code></pre>  <p>the form from jsp:(This is actually a redirect wherein the user and password are populated and the form is submitted using javascript(jquery)</p>  <pre><code>                &lt;form method="POST" action="/submitLogin" id="login-form-sso"&gt;                   &lt;input type="text" name='j_username' value="${user}"/&gt;                 &lt;input type="text" name='j_password' value="password"/&gt;             &lt;/form&gt;         $(document).ready(function(){         $("#login-form-sso").submit();     }); </code></pre>  <p>When deployed in Tomcat 7, it ALWAYS go to <code>loginFailureHandler</code>. Upon debugging, I notice that the <strong>username is not "seen" by Spring security</strong>, trying to query with a user of ''</p>  <pre><code>    org.springframework.jdbc.core.JdbcTemplate , Executing prepared SQL statement [SELECT distinct EnterpriseID as username, 'password'  org.springframework.jdbc.datasource.DataSourceUtils , Fetching JDBC Connection from DataSource org.springframework.jdbc.datasource.DataSourceUtils , Returning JDBC Connection to DataSource org.springframework.security.provisioning.JdbcUserDetailsManager , Query returned no results for user '' org.springframework.security.authentication.dao.DaoAuthenticationProvider , User '' not found org.springframework.beans.factory.support.DefaultListableBeanFactory , Returning cached instance of singleton bean 'sessionRegistry' </code></pre>  <p>Again, this works perfectly fine in Tomcat 6.  I also checked the JSP form and it did contain the user credentials, for some reason, it looks like Spring security cant find it.</p>  <p>Can anyone please point me to the right direction? I appreciate your inputs. Thanks</p>  <p>UPDATE: I think one of the Filter on the filter chain is the culprit, consuming the parameters from the request body. will investigate further.</p>