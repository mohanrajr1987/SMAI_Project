<p>My professor gave us this LinkedList.h file and said we must use it and not edit it all. I am sure that it is possible but I am having a lot of trouble implementing an insertFront function.</p>  <pre><code>#ifndef LINKEDLIST_H_ #define LINKEDLIST_H_ /*  *  A singularly linked list  */   #include &lt;string&gt;  class LinkedList {      public:     // Default Constructor of the linked list     LinkedList();      // Deconstructor     ~LinkedList();      // Removes the first element from the linked     // list and returns it     char removeFront();      // Add to the front of the linked list     void insertFront(char c);      // Returns the element stored at the front of the linked list     char front() const;      // Returns the number of elements returned     int count() const;      // Returns a string representation of the linked list     std::string toString();      private:      char data;     LinkedList* next;  };  #endif </code></pre>  <p>This is what I have tried so far with my LinkedList.cpp file. It compiles correctly but crashes upon trying to assign any variables in the new object I create (inside of the insertFront(char c) function.</p>  <pre><code>#include "LinkedList.h" #include &lt;string&gt; #include &lt;iostream&gt; using namespace std;    LinkedList::LinkedList(){     next = NULL;     data = 'x'; }  char LinkedList::removeFront(){     char temp = next-&gt;data;      next = next-&gt;next;      return temp; }   void LinkedList::insertFront(char c){     LinkedList *newHead;     newHead-&gt;data = c;     newHead-&gt;next = next;     next = newHead;  }  char LinkedList::front() const{     return(next-&gt;data); } </code></pre>