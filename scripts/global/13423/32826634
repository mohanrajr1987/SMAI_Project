<p>I'm trying to create a simple modular MVVM application with MEF. I have a ViewModel class and a UserControl as the View. I connect the two through a DataTemplate, like this:</p>  <pre><code>&lt;DataTemplate DataType="{x:Type local:MyViewModel}"&gt;     &lt;local:MyView /&gt; &lt;/DataTemplate&gt; </code></pre>  <p>In the View, I define the ViewModel as a StaticResource, to make binding simple:</p>  <pre><code>&lt;UserControl.Resources&gt;     &lt;local:MyViewModel x:Key="ViewModel" /&gt; &lt;/UserControl.Resources&gt; </code></pre>  <p>Then I bind like this:</p>  <pre><code>&lt;Grid DataContext="{StaticResource ResourceKey=ViewModel}"&gt;     &lt;TextBlock Text="{Binding Text}" /&gt; &lt;/Grid&gt; </code></pre>  <p>This all works as intended without MEF. However, as I am aiming for modularity, I use MEF to discover my ViewModel classes. I have an Export attribute on my ViewModel class:</p>  <pre><code>[Export(typeof(MyViewModel))] public class MyViewModel {     // ... } </code></pre>  <p>and I use MEF to dynamically load the ViewModel into my shell in App.xaml.cs:</p>  <pre><code>private void Application_Startup(object sender, StartupEventArgs e) {     var shell = new MainWindow();     var catalog = new AssemblyCatalog(this.GetType().Assembly);     var container = new CompositionContainer(catalog);      shell.Contents.ViewModel = container.GetExportedValues&lt;MyViewModel&gt;().First();      shell.Show(); } </code></pre>  <p>Now, at this point, MEF creates an instance of my ViewModel when it loads the vm, and my View creates another instance when it declares the vm as a resource. (This is easily checked by setting a breakpoint in the constructor.)</p>  <p>The question is, how should I pass the instance created by MEF to my resource declaration? Can I declare that specific instance as resource?</p>  <p>DropBox link with full code: <a href="https://www.dropbox.com/sh/pbdl029d26sx7gl/AAA6po50dLjbJSoNPBhCyWZ3a?dl=0" rel="nofollow">https://www.dropbox.com/sh/pbdl029d26sx7gl/AAA6po50dLjbJSoNPBhCyWZ3a?dl=0</a></p>