<p>I am a little bit confused with usage of BindableBase class and how to apply this "new" mechanism to the classic MVVM design.</p>  <p>Briefly, the question is the following: How to use correctly BindableBase class when we have reference to the model in our view-model class?</p>  <p><strong>Details:</strong></p>  <p>Classical MVVM pattern: View &lt;-> View-Model -> Model</p>  <p>As we see View-Model in this scheme knows about Model, but Model knows nothing about View and View-Model. </p>  <p>If we implement this approach, we will have something like this:</p>  <pre><code>// Model class Task {...}  // View-Model class TaskViewModel : BindableBase {     private readonly Task _task;      public TaskViewModel(Task task)     {         _task = task;     }     ... } </code></pre>  <p>Let's imaging that Task class has 'Subject' property and we should show this data. So according to MVVM I should:</p>  <p>Create duplication of 'Subject' property in View-Model:</p>  <pre><code>// View-Model class TaskViewModel : BindableBase {     public String Subject     {         get{ return _task.Subject; }         set         {             _task.Subject = value;             // I can't use SetProperty(ref _task.Subject, value)            // it's contradict c# syntax            OnPropertyChanged("Subject");         }     } } </code></pre>  <p>As you see I can't use SetProperty method for such design and the only way it's calling of raw onPropertyChanged method. </p>  <p>It seems that SetProperty is the biggest benefit of BindableBase class and it's very strange that we can't use it in such direct and common implementation of MVVM. So I thought maybe I missed something or work incorrectly with the specified class. </p>  <p>Do you know how to use BindableBase for the specified design and get some code improvement?</p>  <p>Thanks</p>