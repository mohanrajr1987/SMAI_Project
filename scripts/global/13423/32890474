<p>I have an issue, i coded my view, viewmodel creation into the ModuleInit.Initialize method</p>  <pre><code>this.container.RegisterType&lt;IControlPanel, ViewModels.SeveritiesViewModel&gt;("SeveritiesViewModel"); this.container.RegisterType&lt;object, Views.SeveritiesView&gt;("SeveritiesView", new InjectionConstructor(new ResolvedParameter&lt;IControlPanel&gt;("SeveritiesViewModel"))); </code></pre>  <p>SeveritiesVeiwModel inherits from ViewModelBase</p>  <pre><code>public class ViewModelBase : BindableBase, IControlPanel, INavigationAware, IConfirmNavigationRequest </code></pre>  <p>Constructor for ViewModelBase calls two virtual methods. Initialize and GetData.  GetData performs some data access methods using async await. </p>  <p>so the problem i have is Prism constructs my SeveritiesViewModel, the GetData method runs, and throws and exception which i catch. i would then like to display a dialog using the InteractionRequest, however the view.DataContext has not yet be set, hence no bindings or Interaction.Triggers to receive the InteractionRequest. </p>  <p>so i thought i should look into RegionManager.RequestNaviagte using a callback. i thought since all my viewmodels implement IConfirmNavigationRequest i could return false in the NavigationResult from the View/viewmodel being injected. however ConfirmNavigationRequest is never called. this is wpf not silverlight? </p>  <p>so how do i work this extremely decoupled application. do i need to implement some type of shared service?  I guess i am going to need to store exceptions until the view has finished binding with the viewmodel, perhaps implement my own interface with a method to check an exceptions collection and in the view call the interface method?  why is ConfirmNavigationRequest never called? </p>  <p>InteractionRequest work great after the DataContext is set, but before; i'm at a loss.</p>  <p>Any advise would be appreciated. </p>  <p>Thanks  Gary</p>  <p>here is some code.</p>  <p>toolbar button command click runs the following.</p>  <pre><code>this.regionManager.RequestNavigate("ContentRegion", "SeveritiesView"); </code></pre>  <p>here is the code behind for the view.</p>  <pre><code>public partial class SeveritiesView : UserControl, IApplicationView {     public SeveritiesView(IControlPanel model)     {         InitializeComponent();         this.DataContext = model;     }      public string ViewName     {         get { return "SeveritiesView"; }     } } </code></pre>  <p>ViewModelBase.</p>  <pre><code>        protected ViewModelBase(bool initializeDB = true)      {         notifications = new List&lt;NotificationWindowNotification&gt;();         this.uiFactory = new TaskFactory(TaskScheduler.FromCurrentSynchronizationContext());         NotificationRequest = new InteractionRequest&lt;NotificationWindowNotification&gt;();         ConfirmationRequest = new InteractionRequest&lt;ConfirmationWindowNotification&gt;();         if (initializeDB)         {             EntityConnectionStringBuilder entityBuilder = new EntityConnectionStringBuilder(System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString);             entityBuilder.ProviderConnectionString = EventLogAnalysis.Properties.Settings.Default.ConnectionString;             db = new ServerEventLogEntities(entityBuilder.ToString());         }         ThrobberVisible = Visibility.Visible;         Initialize();         GetData();     } </code></pre>  <p>SeveritiesViewModel.</p>  <pre><code> public SeveritiesViewModel(IRegionManager regionManager, IEventAggregator eventAggregator) : base()     {         try         {             this.regionManager = regionManager;             this.eventAggregator = eventAggregator;             eventAggregator.GetEvent&lt;AddSeverity&gt;().Subscribe(AddSeverity);             eventAggregator.GetEvent&lt;DeleteSeverity&gt;().Subscribe(DeleteSeverity);         }         catch(Exception e)         {                  uiFactory.StartNew(() =&gt;                 NotificationRequest.Raise(new NotificationWindowNotification()                 {                     Title = string.Format("Error during {0}.{1}"                         , ModuleName, System.Reflection.MethodBase.GetCurrentMethod().Name),                     Content = string.Format("{0}", e.Message)                 })             ).Wait();         }      }  protected async override void GetData()     {         try         {             List&lt;Task&gt; tasks = new List&lt;Task&gt;();             tasks.Add(GetEventFilterSeverities());              await Task.WhenAll(tasks).ContinueWith((t) =&gt;             {                 ThrobberVisible = Visibility.Collapsed;                 eventAggregator.GetEvent&lt;RecordStatusEvent&gt;().Publish(new RecordStatusMessage() { CanAdd = true, CanDelete =(currentEventFilterSeverity != null), IsClosing = false });             }             , TaskScheduler.FromCurrentSynchronizationContext());         }         catch(Exception e)         {            notifications.Add(new NotificationWindowNotification()                 {                     Title = string.Format("Error during {0}.{1}"                         , ModuleName, System.Reflection.MethodBase.GetCurrentMethod().Name),                     Content = string.Format("{0}", e.Message)                 });         }      }  protected async Task GetEventFilterSeverities()     {         try         {             throw new NullReferenceException("My exception");             ObservableCollection&lt;EventFilterSeverity&gt; _eventFilterSeverities = new ObservableCollection&lt;EventFilterSeverity&gt;();             var eventFilterSeverities = await (from sg in db.EventFilterSeverities                                         orderby sg.EventFilterSeverityID                                         select sg).ToListAsync();             foreach (EventFilterSeverity efs in eventFilterSeverities)                 _eventFilterSeverities.Add(efs);             EventFilterSeverities = _eventFilterSeverities;         }         catch(Exception e)         {             notifications.Add(new NotificationWindowNotification()                 {                     Title = string.Format("Error during {0}.{1}"                         , ModuleName, System.Reflection.MethodBase.GetCurrentMethod().Name),                     Content = string.Format("{0}", e.Message)                 });         }      } </code></pre>