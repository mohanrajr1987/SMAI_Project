<p>I am using SimpleMVVM and while editing an object, SimpleMVVM creates a new Model object and a Copy object.   The original Model object is cloned to the Copy object using Newtonsoft.Json.JsonConvert. </p>  <p>Here is the actual code:</p>  <pre><code>        Copy = Model.Clone(); </code></pre>  <p>... </p>  <pre><code>        public static T Clone&lt;T&gt;(this T obj)         {             var settings = new JsonSerializerSettings             {                 PreserveReferencesHandling = PreserveReferencesHandling.All             };             var json = JsonConvert.SerializeObject(obj, settings);             var result = JsonConvert.DeserializeObject&lt;T&gt;(json, settings);             return result;         } </code></pre>  <p>I am having an issue when the Clone method tries to Deserialize a DataView.  The error is:</p>  <pre><code>An exception of type 'System.ArgumentException' occurred in Newtonsoft.Json.dll but was not handled in user code </code></pre>  <p>I am not sure how to handle this error as the only thing happening to cause the error is a retrieval (get) of this property:</p>  <pre><code>/// &lt;summary&gt; /// Dataview of SQL Results Table /// &lt;/summary&gt; [XmlIgnore] public DataView TableDataView {     get      {         return _TableDataView;                     }     set     {         _TableDataView = value;          // Add listener for changes to the TableDataView         _TableDataView.ListChanged += new ListChangedEventHandler(TableDataViewChanged);          TableDataViewIsDirty = false;         NotifyPropertyChanged(m =&gt; m.TableDataView);     } } private DataView _TableDataView = new DataView(); </code></pre>  <p>Is there some issue with trying to deserialize a DataView using JSON and if so is there a way around it?  Alternatively, is there a way to specify that a property (TableDataView) NOT be included in the Serialize\Deserialize process (something like the [XmlIgnore] flag)?</p>