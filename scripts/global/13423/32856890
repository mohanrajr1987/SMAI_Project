<p>I am building a MVVM - WPF Application.  I have few dataGrids where the CRUD operations work fine. </p>  <p>Now, I want a dataGrid always empty at the beginning and where of course I can add rows. So I can fill it but when I click save, nothing is saved.</p>  <p>Why?</p>  <h1><strong>ViewModel:</strong></h1>  <pre><code>public class InvoiceViewModel : ViewModelBase {     public Context ctx = new Context();     public InvoiceViewModel()     {         this.Collection = new ObservableCollection&lt;Invoice&gt;();     }     private ObservableCollection&lt;Invoice&gt; collection;     public ObservableCollection&lt;Invoice&gt; Collection     {         get         {             return collection;         }         set         {             collection = value;             OnPropertyChanged("Collection");         }     }     private Invoice _selected;     public Invoice Selected     {         get         {             return _selected;         }         set         {             _selected = value;             OnPropertyChanged("Selected");         }     }     private void Get()     {         ctx.Invoices.ToList().ForEach(invoice =&gt; ctx.Invoices.Local.Add(invoice));;         Collection = ctx.Invoices.Local;     }     private void Save()     {         foreach (Invoice item in Collection)         {             if (ctx.Entry(item).State == System.Data.Entity.EntityState.Added)             {                 ctx.Invoices.Add(item);             }         }         ctx.SaveChanges();     }     private void Delete()     {         var id = Selected;         var invoice = (from i in ctx.Invoices                     where i.idInvoice == id.idInvoice                     select i).SingleOrDefault();         Collection.Remove(invoice);     }      #region "Command"     // private ICommand getCommand;     private ICommand saveCommand;     private ICommand removeCommand;      /*public ICommand GetCommand     {         get         {             return getCommand ?? (getCommand = new RelayCommand(p =&gt; this.Get(), p =&gt; this.CanGet()));         }     }     private bool CanGet()     {         return true;     }*/     public ICommand SaveCommand     {         get         {             return saveCommand ?? (saveCommand = new RelayCommand(p =&gt; this.Save(), p =&gt; this.CanSave()));         }     }     private bool CanSave()     {         return true;     }     public ICommand DeleteCommand     {         get         {             return removeCommand ?? (removeCommand = new RelayCommand(p =&gt; this.Delete(), p =&gt; this.CanDelete()));         }     }     public bool CanDelete()     {         if (Selected != null)             return true;         else             return false;     }     #endregion } </code></pre>  <h1><strong>View:</strong></h1>  <pre><code>&lt;Page.Resources&gt;     &lt;local:InvoiceViewModel x:Key="invoice" /&gt;     &lt;local:ShopViewModel x:Key="shop" /&gt;     &lt;local:SupplierViewModel x:Key="supplier" /&gt;     &lt;local:ProductViewModel x:Key="product" /&gt;     &lt;DataTemplate x:Key="ProductDataTemplate"&gt;         &lt;TextBlock Text="{Binding product}" /&gt;     &lt;/DataTemplate&gt; &lt;/Page.Resources&gt; &lt;DataGrid x:Name="dataGridInvoice"           Margin="5"           Grid.Row="1"           ItemsSource="{Binding Collection}"           AutoGenerateColumns="False"           SelectedItem="{Binding Selected, Mode=TwoWay}"           SelectionMode="Extended"           SelectionUnit="FullRow"&gt;     &lt;DataGrid.Columns&gt;         &lt;DataGridTextColumn x:Name="dataGridTextColumn"                             Header="Supplier Invoice Nb"                             Width="*" /&gt;         &lt;DataGridComboBoxColumn Header="Ref Supplier"                                 ItemsSource="{Binding Products, Source={StaticResource supplier}, Mode=OneWay}"                                 DisplayMemberPath="refsup"                                 SelectedValueBinding="{Binding refSupp}"                                 SelectedValuePath="refsup"                                 Width="*" /&gt;         &lt;DataGridTextColumn Header="Unit"                             Binding="{Binding unit, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"                             Width="*" /&gt;         &lt;DataGridTextColumn Header="Quantity"                             Binding="{Binding quantity, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"                             Width="*" /&gt;         &lt;DataGridTextColumn Header="Prix/MOQ"                             Binding="{Binding unitPrice, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"                             Width="*" /&gt;         &lt;DataGridTextColumn Header="Total Price"                             Binding="{Binding totalPrice, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"                             Width="*" /&gt;     &lt;/DataGrid.Columns&gt; &lt;/DataGrid&gt; &lt;StackPanel Orientation="Horizontal"&gt;     &lt;Button  x:Name="BtnDelete"              Content="Delete"              Command="{Binding DeleteCommand}"              HorizontalAlignment="Center"              Margin="100,5,5,5"              Width="85" /&gt;     &lt;Button  x:Name="BtnAdd"              Content="Save"              Command="{Binding SaveCommand}"              HorizontalAlignment="Center"              Margin="20,5,5,5"              Width="85" /&gt; &lt;/StackPanel&gt; </code></pre>