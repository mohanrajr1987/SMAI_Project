<p>I Have a WPF window that displays a list of records between 2 dates. I Use for that : MVVM Light, Entity Framework and Stored Procedure.</p>  <p>when I run the command to display the list, I want to display a progress bar to indicate that the task is running. When the query is finished I want to hide the progress bar. The problem is that the visibility of the progress bar does not work well. Below is my code:</p>  <pre><code>//XAML  . . . . &lt;StatusBar Grid.Row="2"&gt;          &lt;StatusBarItem Width="300"&gt;             &lt;TextBlock Text="{Binding SBMessage, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/&gt;         &lt;/StatusBarItem&gt;          &lt;StatusBarItem Width="Auto"&gt;             &lt;Grid&gt;                 &lt;Grid.ColumnDefinitions&gt;                     &lt;ColumnDefinition Width="Auto"/&gt;                     &lt;ColumnDefinition Width="Auto"/&gt;                 &lt;/Grid.ColumnDefinitions&gt;                 &lt;TextBlock Text="Requête en cours..." Visibility="{Binding TaskInProgress, UpdateSourceTrigger=PropertyChanged, Mode=OneWay, Converter={StaticResource booltovisibility}}" /&gt;             &lt;ProgressBar                  Visibility="{Binding TaskInProgress, UpdateSourceTrigger=PropertyChanged, Mode=OneWay, Converter={StaticResource booltovisibility}}"                  Width="100"                  Height="20"                  IsIndeterminate="True"                 VerticalAlignment="Center"                 Grid.Column="1"                 /&gt;             &lt;/Grid&gt;          &lt;/StatusBarItem&gt;      &lt;/StatusBar&gt;    //ViewModel   bool _taskinprogress = false;   public bool TaskInProgress     {         get { return _taskinprogress; }         set         {             _taskinprogress = value;             RaisePropertyChanged("TaskInProgress");         }     }    public RelayCommand DisplaySimulationsListCommand     {         get         {             if (_splist == null)                 _splist = new RelayCommand(DisplaySimulationsListCommandExecute);             return _splist;         }     }         private void DisplaySimulationsListCommandExecute()     {         SBMessage = "Exécution...";         TaskInProgress = true;         Stopwatch stopWatch = new Stopwatch();         stopWatch.Start();         DoItWithStoredProcedure();         stopWatch.Stop();         TimeSpan ts = stopWatch.Elapsed;         string elapsedTime = String.Format("{0:00}:{1:00}:{2:00}.{3:00}",         ts.Hours, ts.Minutes, ts.Seconds,         ts.Milliseconds / 10);         SBMessage = ListSimulations.Count().ToString() +  " Enregistrement(s) en : " + elapsedTime;         CurrentDisplayedTab = 1;         TaskInProgress = false;          //SBMessage = "Prêt";     }           private void DoItWithStoredProcedure()     {          try         {              using (UnitOfWork cx = new UnitOfWork())             {                 var ls = cx.GetSimulationsPeriode(VMPeriode.Debut, VMPeriode.Fin).AsReadOnly();                 ListSimulations = new ObservableCollection&lt;Simulation&gt;(ls);                 CVS = (ListCollectionView)CollectionViewSource.GetDefaultView(ListSimulations);                 RaisePropertyChanged("CVS");             }         }          catch (Exception ex)         {             Messenger.Default.Send&lt;ExceptionMessageRefresh&gt;(new ExceptionMessageRefresh(ex), "DoItWithStoredProcedure");         }     }  //Converter   public class BoolToVisiblityConverter : IValueConverter     {         #region Constructors         /// &lt;summary&gt;         /// The default constructor         /// &lt;/summary&gt;         public BoolToVisiblityConverter() { }         #endregion           public bool Collapse { get; set; }          #region IValueConverter Members         public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)         {             bool bValue = (bool)value;             if (bValue)                 return Visibility.Visible;             else             {                 if (Collapse)                     return Visibility.Collapsed;                 else                     return Visibility.Hidden;             }         }          public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)         {             Visibility visibility = (Visibility)value;              if (visibility == Visibility.Visible)                 return true;             else                 return false;         }         #endregion     } </code></pre>  <p>Thank you in advance.</p>