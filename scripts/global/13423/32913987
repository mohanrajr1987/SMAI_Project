<p>So, I use MVVM, Data Binding, RecyclerView and Volley ImageLoader with NetworkImageView.</p>  <p>And I basically trying to display a feed with some items (not all) containing NetworkImageViews (Using Volley &amp; ImageLoader).</p>  <p>The problem is that my holder is recycled, and my "current" NetworkImageView is displaying a previously asked imageUrl (asked for another card).</p>  <p>I did some research, and I have to cancel the request if my holder is recycled. I get the point, I don't really see how to do this in my current code and doing it <strong>CLEAN</strong>.</p>  <p>PS : <strong>I don't want to avoid the recycling</strong> of my RecyclerView (there is no point to use it then).</p>  <p>I am really surprised that there is no way with ImageLoader/ImageContainer to handle this properly by default. If there is a simple, working and easily maintainable way to do this with another library (Fresco, Picasso, Glide, UIL, ...), why not.</p>  <p>There is my adapter :</p>  <pre><code>public final class FeedAdapter extends RecyclerView.Adapter&lt;FeedAdapter.BindingHolder&gt; {      private Context context;     private List&lt;FeedEntry&gt; feedEntries;      public FeedAdapter(Context _context, List&lt;FeedEntry&gt; _feedEntries) {         this.context = _context;         this.feedEntries = _feedEntries;     }      @Override     public BindingHolder onCreateViewHolder(ViewGroup parent, int viewType) {          if (viewType == FeedEntry.TYPE_IMAGE_ID) {             ItemFeedEntryImageBinding itemFeedEntryImageBinding = DataBindingUtil.inflate(                     LayoutInflater.from(parent.getContext()),                     R.layout.item_feed_entry_image,                     parent,                     false);             return new BindingHolder(itemFeedEntryImageBinding);         }     }      @Override     public void onBindViewHolder(BindingHolder holder, int position) {          if (getItemViewType(position) == FeedEntry.TYPE_IMAGE_ID) {             ItemFeedEntryImageBinding feedEntryImageBinding = (ItemFeedEntryImageBinding) holder.binding;             feedEntryImageBinding.setViewModel(new FeedEntryViewModel(this.context, this.feedEntries.get(position)));         }     }       @Override     public int getItemCount() {         return this.feedEntries.size();     }      @Override     public int getItemViewType(int position) {         // Code...         return FeedEntry.TYPE_IMAGE_ID;     }      public static class BindingHolder extends RecyclerView.ViewHolder {         private ViewDataBinding binding;          public BindingHolder(ItemFeedEntryImageBinding binding) {             super(binding.feedEntryCard);             this.binding = binding;         }     } } </code></pre>  <p>And there is the main content of my ViewModel </p>  <pre><code>@BindingAdapter({"bind:contentImageUrlVolley"}) public static void loadContentImageVolley(NetworkImageView view, String url) {     //view.setImageUrl(null, MyApplication.getInstance().getImageLoader()); Do not solve my issue     view.setImageUrl(url, MyApplication.getInstance().getImageLoader()); } </code></pre>