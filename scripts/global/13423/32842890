<p><br> I had a MVVM-pattern which I used to display a progressbar. It worked, so I think the MVVM-pattern itself still works. But now I changed the whole app and I wanted to do the following:<br> Open a new window/dialog and show the progress. This user should not be able to put the window into the background (like a ShowDialog).<br>  The window should be able to show a ProgressBar and react to the ViewModel that is changed from inside the mainwindow. It looks like this:</p>  <pre><code>private void TransferMedia_OnClick(object sender, RoutedEventArgs e) {     // ...     Thread newThread = new Thread(() =&gt; CopyUpdatesToClients(2));     newThread.Start();     ProgressWindow progressWindow = new ProgressWindow { Owner = this };     progressWindow.ShowDialog();     // ... }  private void CopyUpdatesToClients(int i) {     List&lt;XmlFunctions.ClientEntry&gt; clientList = _xml.GetClientsList();     MyProgressBarViewModel.SetMaximum(clientList.Count);     MyProgressBarViewModel.SetMinimum(0);     foreach (XmlFunctions.ClientEntry clientEntry in clientList)     {         // Code for copying a mass of files here         MyProgressBarViewModel.RaiseValue();     } } </code></pre>  <p>And the ProgressWindow could look like this:</p>  <p>XAML:</p>  <pre><code>&lt;Window x:Class="AdminConsole.ProgressWindow"     xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"     xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"     xmlns:adminConsole="clr-namespace:AdminConsole"     Title="Copying in progress..." Height="60" Width="500"&gt;     &lt;Grid&gt;         &lt;ProgressBar Name="MyProgressBar" Value="{Binding ProgressValue}" Minimum="{Binding MinValue}" Maximum="{Binding MaxValue}"                      ValueChanged="MyProgressBar_OnValueChanged"&gt;             &lt;ProgressBar.DataContext&gt;                 &lt;adminConsole:ProgressBarViewModel /&gt;             &lt;/ProgressBar.DataContext&gt;         &lt;/ProgressBar&gt;     &lt;/Grid&gt; &lt;/Window&gt; </code></pre>  <p>Class-Code:</p>  <pre><code>using System; using System.Windows;  namespace AdminConsole {     public partial class ProgressWindow     {         public ProgressWindow()         {             InitializeComponent();         }          private void MyProgressBar_OnValueChanged(object sender, RoutedPropertyChangedEventArgs&lt;double&gt; e)         {             if (Convert.ToInt32(MyProgressBar.Value) == Convert.ToInt32(MyProgressBar.Maximum))             {                 Close();             }         }     } } </code></pre>  <p>I have some terrible headache about this. I must confess: I dont really understand the MVVM. When I go through it step by step, the ViewModel-Value-Raise works well. The Value raises, but the ProgressBar stays grey the whole time. It doesn't even gets filled at the end. I think its a binding problem.<br> How do I bind the ProgressBar of the SubWindow to the ViewModel correctly? p.s.: If something looks really strange it could be an old part of a try. I changed this code multiple times to find a solution, but found none.<br> Thanks for help in advance.</p>