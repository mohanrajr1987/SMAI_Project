<p>I've been reviewing over Josh Smith's code (from his well-known MVVM article)recently, and I've been trying to create a program that follows his ideal MVVM pattern.</p>  <p>Now here's the problem, in Josh Smith's project's MainWindowResources, he binds the View to the (just using an arbitrary name here) ExampleViewModel, so the TabControl (workspaces) shows the ExampleView instead of just the .ToString() of ExampleViewModel. Example:</p>  <pre><code>&lt;DataTemplate DataType="{x:Type vm:ExampleViewModel}"&gt;   &lt;vw:ExampleView /&gt; &lt;/DataTemplate&gt; </code></pre>  <p>Normally this piece of code would work when the View doesn't take in any parameters. But for this project I take in the ViewModel in the View's constructor parameters:</p>  <pre><code>public ExampleView(ExampleViewModel viewModel) {     InitializeComponent();     DataContext = viewModel; } </code></pre>  <p>So now, I'm at a stand still- this type of binding only allows for parameter-less constructors.</p>  <p><strong>So how do I get around this problem, while still binding a View to a ViewModel, in which said View has constructor parameters?</strong></p>