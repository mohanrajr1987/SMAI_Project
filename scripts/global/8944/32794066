<p>Starting out with python. I am trying to open a python file with command prompt in a windows OS. As the consoles of text editors tend to take up screen space. Specifically, a plain .txt file is the one throwing up errors with a <code>read()</code> line. Further experimentation (just simple copy-paste to a file that could be read) locates it as non-utf8. Otherwise with the original file, it shows this:</p>  <pre><code>UnicodeDecodeError: 'charmap' codec can't decode byte 0x9d in position 2642: character maps to &lt;undefined&gt; </code></pre>  <p>Questions:</p>  <ol> <li>What is the difference if I only manually copy pasted between the two files? <strong>Edit</strong>: One is a short multi-line test document made on the fly. One is a long document with maybe a or the, first unicode character at position 2642 (see below). Both are <code>*.txt</code> files. </li> <li>Why does cmd think neither text file exists? They are named in plain alphanumeral characters. <strong>Edit</strong>: It is the same even if a file contains only three characters (222) in it. By neither, I mean either a file with unicode(?) or one in plain format. </li> <li>With <code>output.encode("utf8")</code> in <code>print()</code>, it lumps the entire thing into a single line. All 20k+ lines of it.. Though it outputs newline characters to a new document <code>.write(output)</code> fine enough.</li> <li>Is it possible to print all ASCII characters, skipping over those that are not? With functionality maybe similar to the <code>.find()</code> method.</li> <li>Is there a free resource somewhere to goto certain character position? A sublime AND notepad++ plugin would be great.</li> </ol>  <p><code>python *.py</code> usually works but in this case it did not. Valid output is possible with inbuilt consoles in code editors like notepad++ and sublime text. Python version is 3.4, folder named 34. Both display in IDLE so maybe something is missing with system or program configuration?</p>