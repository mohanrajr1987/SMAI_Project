<p>I use django and sphinx: search Chinese simplified is error But search English is normal. error:</p>  <p><strong>'utf8' codec can't decode byte 0xe5 in position 0: unexpected end of data</strong></p>  <p>SphinxQLDriverException at /search/打算/</p>  <p>'utf8' codec can't decode byte 0xe6 in position 0: unexpected end of data</p>  <p>Request Method: GET</p>  <p>Request URL:    <a href="http://www.xxxx.so:233/search/%E6%89%93%E7%AE%97/" rel="nofollow">http://www.xxxx.so:233/search/%E6%89%93%E7%AE%97/</a></p>  <p>Django Version: 1.8.1</p>  <p>Exception Type: SphinxQLDriverException</p>  <p>Exception Value:    </p>  <p>'utf8' codec can't decode byte 0xe6 in position 0: unexpected end of data</p>  <p>Exception Location: /usr/local/lib/python2.7/dist-packages/sphinxit /core/connector.py in execute, line 149</p>  <p>Python Executable:  /usr/bin/python</p>  <p>Python Version: 2.7.3</p>  <p>Python Path:    </p>  <p>['/root/ssbc',  '/usr/local/lib/python2.7/dist-packages/distribute-0.6.28-py2.7.egg',  '/usr/local/lib/python2.7/dist-packages/duoshuo_python_sdk-0.1-py2.7.egg',  '/usr/lib/python2.7',  '/usr/lib/python2.7/plat-linux2',  '/usr/lib/python2.7/lib-tk',  '/usr/lib/python2.7/lib-old',  '/usr/lib/python2.7/lib-dynload',  '/usr/local/lib/python2.7/dist-packages',  '/usr/lib/python2.7/dist-packages',  '/usr/lib/pymodules/python2.7']</p>  <p>views.py:</p>  <pre><code> ..... @cache_page(1800) def search(request, keyword=None, p=None):     if not keyword:         return redirect('/')     if politics.is_sensitive(keyword):         return redirect('/?' + urllib.urlencode({'notallow': keyword.encode('utf8')}))     keyword = keyword     print keyword     #    keyword =  unicode( keyword , errors='ignore')     d = {'keyword': keyword}     d['words'] = list(set(re_punctuations.sub(u' ', d['keyword']).split()))     try:         d['p'] = int(p or request.GET.get('p'))     except:         d['p'] = 1     d['category'] = request.GET.get('c', '')     d['sort'] = request.GET.get('s', 'create_time')     d['ps'] = 10     d['offset'] = d['ps'] * (d['p'] - 1)     res = Hash.objects.search(         keyword.decode('utf-8'), d['offset'], d['ps'], d['category'], d['sort'])     print res     d.update(res)     # Fill info     ids = [str(x['id']) for x in d['result']['items']]     if ids:         items = Hash.objects.list_with_files(ids)         for x in d['result']['items']:             for y in items:                 if x['id'] == y['id']:                     x.update(y)                     x['magnet_url'] = 'magnet:?xt=urn:btih:' + x['info_hash'] + \                         '&amp;' + \                         urllib.urlencode({'dn': x['name'].encode('utf8')})                     x['maybe_fake'] = x['name'].endswith(                         u'.rar') or u'BTtiantang.com' in x['name'] or u'liangzijie' in x['name']                     if 'files' in x:                         x['files'] = [                             z for z in x['files'] if not z['path'].startswith(u'_')][:5]                         x['files'].sort(                             key=lambda x: x['length'], reverse=True)                     else:                         x['files'] = [                             {'path': x['name'], 'length': x['length']}]     # pagination     w = 10     total = int(d['result']['meta']['total_found'])     d['page_max'] = total / \         d['ps'] if total % d['ps'] == 0 else total / d['ps'] + 1     d['prev_pages'] = range(         max(d['p'] - w + min(int(w / 2), d['page_max'] - d['p']), 1), d['p'])     d['next_pages'] = range(         d['p'] + 1, int(min(d['page_max'] + 1, max(d['p'] - w / 2, 1) + w)))     d['sort_navs'] = [         {'name': '按收录时间', 'value': 'create_time'},         {'name': '按文件大小', 'value': 'length'},         {'name': '按相关性', 'value': 'relavance'},     ]     d['cats_navs'] = [{'name': '全部', 'num': total, 'value': ''}]     for x in d['cats']['items']:         v = workers.metautils.get_label_by_crc32(x['category'])         d['cats_navs'].append(             {'value': v, 'name': workers.metautils.get_label(v), 'num': x['num']})      return render(request, 'list.html', d) ....... </code></pre>