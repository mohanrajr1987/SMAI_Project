<p>I have written a basic program where I want to connect to the bluetooth device(medical). But for some reason( I cant figure out) nothing is happening. I am not even sure if its getting connected to medical device's bluetooth.</p>  <p>I want to connect to the device and store the measurements from the medical device. Please help me. I might have done completely wrong</p>  <pre><code>    public class PollingTest extends Activity{     public BluetoothAdapter btAdapter;     BluetoothSocket btSocket;     Button btn2;      public static String SPP_UUID = "00001101-0000-1000-8000-00805F9B34FB";     public int modeNew = 10;     public byte[] bRecv = new byte[4096];     private InputStream mmInStream;     private OutputStream mmOutStream;     byte[] bufRecv1 = {0,0,0,0,0,0,0,0};     int nNeed = 0;      boolean bConnect = true;     int rxTimes = 0;     int nRecved = 0;     String bpNew = "NotConnected";      @Override     protected void onCreate(Bundle savedInstanceStat){         super.onCreate(savedInstanceStat);         setContentView(R.layout.pollingactivity);         btn2 = (Button)findViewById(R.id.pollB);         btn2.setOnClickListener(new View.OnClickListener() {             @Override             public void onClick(View v) {                 Toast.makeText(getApplicationContext(), "hello", Toast.LENGTH_LONG).show();                 btAdapter = BluetoothAdapter.getDefaultAdapter();                 if(btAdapter == null){                     Toast.makeText(getApplicationContext(),"Bluetooth is required",Toast.LENGTH_SHORT).show();                 }                 else{                     if(!btAdapter.isEnabled()){                         Intent intent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);                         startActivityForResult(intent,1);                     }                     else{                         Intent intent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);                         startActivityForResult(intent,1);                     }                 }             }         });     }      public void onActivityResult(int request_code, int result_code, Intent data){         int pollSeries = 0; //Device Number         if(request_code == 1) {             if (result_code == RESULT_OK) {                 Toast.makeText(getBaseContext(), "Bluetooth Successfully turnOn", Toast.LENGTH_SHORT).show();                 switch (pollSeries){                     case 0: try{                                  OxyMeter();                             }                             catch (InterruptedException e){                                 e.printStackTrace();                             }                             break;                      default:                             Toast.makeText(getApplicationContext(),"Plz Wait",Toast.LENGTH_LONG).show();                 }             }         }     }      private void OxyMeter() throws InterruptedException{          int counter = 0;          if(modeNew == 10){             while(modeNew != 11){                 counter++;                 try{                     Thread.sleep(50);                 }                 catch(Exception E){                     //Nothing Here                 }                 if(counter &gt; 50)                     return;             }         }          nRecved = 0;          new Thread(new Runnable(){             public static final String TAG = "";              @Override             public void run() {                 byte[] bufRecv = new byte[4096];                 int nRecv = 0;                 while(bConnect){                     try{                         nRecv = mmInStream.read(bufRecv);                         if (nRecv &lt; 1)                         {                             Log.e(TAG, "Recving Short");                             Thread.sleep(10);                             continue;                         }                         System.arraycopy(bufRecv, 0, bRecv, nRecved, nRecv);                         bufRecv1[0] = (byte) (bRecv[0] - 0x80);                         rxTimes = rxTimes + 1;                         Log.e(TAG, "Recv:" + String.valueOf(nRecv));                         nRecved += nRecv;                         Log.d(TAG, "RX Data 1: " + bufRecv1[nRecv]);                          if(nRecved &lt; nNeed)                         {                             Thread.sleep(100);                             continue;                         }                     }                     catch (Exception e)                     {                         Log.e(TAG, "Recv thread:" + e.getMessage());                         break;                     }                 }             }         }).start();          while( !(nRecved &gt; 4) )         {             counter++;             try{                 Thread.sleep(50);             }             catch(Exception E){              }             if(counter &gt; 100)                 return;         }          bufRecv1[5] = (byte) (bRecv[nRecved-5] &amp; 0x18);         if (bufRecv1[5] == 0){             //resNewoxy = "connected2new";             int sysValuenew = (bufRecv1[5]);             int diaValuenew = (bRecv[nRecved-1]);             int pulseValuenew = (bRecv[nRecved-2]);              bpNew=sysValuenew+"|"+diaValuenew+"|"+pulseValuenew;             try             {                 if (mmInStream != null)                     mmInStream.close();                 if (mmOutStream != null)                     mmOutStream.close();                 if (btSocket != null)                     btSocket.close();             }             catch (IOException e)             {                 //Log.e(Common.TAG, "Close Error");                 e.printStackTrace();             }             finally             {                 mmInStream = null;                 mmOutStream = null;                 btSocket = null;                 bConnect = false;                 //result = 1;                 modeNew = 10;                 rxTimes = 0;                 byte[] bufRecv1 = {0,0,0,0,0,0,0,0};                 //res = "No result";                 //nRecv1 = 0;             }             //return 1;             //bpNew=sysValuenew+"|"+diaValuenew+"|"+pulseValuenew;             String car="";             Log.v(car, bpNew);          } } </code></pre>