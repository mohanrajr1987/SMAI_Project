<p>I have already taken a look at these questions :</p>  <p><a href="http://stackoverflow.com/questions/22899475/android-sample-bluetooth-code-to-send-a-simple-string-via-bluetooth#">Android sample bluetooth code to send a simple string via bluetooth</a></p>  <p><a href="http://stackoverflow.com/questions/29143695/java-io-ioexception-read-failed-socket-might-closed-or-timeout-read-ret-1-o">java.io.IOException: read failed, socket might closed or timeout, read ret: -1 on Android 5.0.1 Lollipop version</a></p>  <p><a href="http://stackoverflow.com/questions/25698585/bluetooth-connection-failed-java-io-ioexception-read-failed-socket-might-clos">Bluetooth Connection failed &quot;java.io.IOException: read failed, socket might closed or timeout, read ret: -1&quot;</a></p>  <p>...yet my question is different.</p>  <p>I am trying to send some data from my android app to an arduino Bluetooth module. As described in the scenarios I posted on top ,even I got the error <code>read failed,socket might closed or timeout</code> after trying to send some data to a connected Bluetooth device.</p>  <p>However I was able to make that error disappear by closing the socket after data was sent. Here is my code :</p>  <pre><code>private void sendData(String message) {         try {             outStream = btSocket.getOutputStream();         } catch (IOException e) {             Log.e(TAG, e.getMessage());         }             byte[] msgBuffer = message.getBytes();              Log.d(TAG, "...Provo a inviare: " + message + "...");              try {                 outStream.write(Integer.parseInt(message));                 Log.i(TAG,"Inviato!");             } catch (IOException e) {                 String msg =  e.getMessage();                 Log.e(TAG, msg);             }             **try {                 btSocket.close(); // WITHOUT THIS I GET THE Java.IO.Exception                 Log.v(TAG, "OK chiuso");             } catch (IOException e) {                 Log.v(TAG, e.getMessage());             }**      }      private void connect_to_selected_item(String mcaddres) throws IOException {         mybtdev = btadapter.getRemoteDevice(mcaddres);         tmp = null;         btSocket = null;          // Get a BluetoothSocket for a connection with the         // given BluetoothDevice         try {             ParcelUuid[] uuids = mybtdev.getUuids();             tmp = mybtdev.createRfcommSocketToServiceRecord(uuids[0].getUuid());             Method m = mybtdev.getClass().getMethod("createRfcommSocket", new Class[] {int.class});             tmp = (BluetoothSocket) m.invoke(mybtdev, 1);         } catch (IOException e) {             Log.e(TAG, "create() failed", e);         } catch (InvocationTargetException e) {             e.printStackTrace();         } catch (NoSuchMethodException e) {             e.printStackTrace();         } catch (IllegalAccessException e) {             e.printStackTrace();         }         btSocket = tmp;         try         {             btSocket.connect();             Log.e(TAG, "Connesso a " + btSocket.getRemoteDevice().getName().toString());         } catch (IOException e) {             try             {                 btSocket.close();             } catch (IOException e2)             {                 Log.e(TAG,e2.toString());             }              Log.e(TAG, e.toString());         }     } </code></pre>  <p>The error is not showing up anymore but I am not able to get the data I  sent on my arduino. So my question is :</p>  <p><strong>Do you think that this workaround (socket.close()) actually fixed the problem ( so the problem is on arduino side) , or did it somehow prevent the data from being sent?</strong></p>