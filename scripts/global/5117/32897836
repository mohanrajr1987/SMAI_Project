<p>I have an app, that checks a database of mac addresses against the ones the Bluetooth scanner can find currently in its vicinity, and if there is a match it basically just says it found someone. However this only work's 1 out of 10 times. It finds devices fine, but the comparing fails, I think it is because of how java runs the code, and I do not know how to do it differently. I've tried to put the compare to into a seperate method in the class. No difference. It looks like this;</p>  <pre><code>public class BLETestActivity extends FragmentActivity {     private TextView out;     private ParseUser currentUser = ParseUser.getCurrentUser();     private String username;    Context context;     private BroadcastReceiver mReceiver;     private BluetoothDevice devicenew;     private ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();      /** Called when the activity is first created. */     @Override     public void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         setContentView(R.layout.activity_ble2);          out = (TextView) findViewById(R.id.out);          // Getting the Bluetooth adapter         final BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();          out.append("\nAdapter: " + adapter);         String device_bt = adapter.getAddress();          // Check for Bluetooth support in the first place         // Emulator doesn't support Bluetooth and will return null         if (adapter == null) {             out.append("\nBluetooth NOT supported. Aborting.");             return;         }          // Starting the device discovery         out.append("\nStarting discovery...");         adapter.cancelDiscovery();         adapter.startDiscovery();         //FINDER NYE ENHEDER         mReceiver = new BroadcastReceiver()          {              public void onReceive(Context context, Intent intent) {                 String action = intent.getAction();                  //Finding devices                 if (BluetoothDevice.ACTION_FOUND.equals(action)) {                     // Get the BluetoothDevice object from the Intent                     devicenew = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);                     // Add the name and address to an array adapter to show in a ListView                     System.out.print(devicenew.getAddress());                     Log.d("Bluetooth", "jeg n√•r her til");                     out.append("\nDevices Found:");                     if (!list.contains(devicenew.getAddress())) {                         list.add(devicenew.getAddress());                         Log.d("Devicenew", "adder");                         System.out.print(devicenew.getAddress());                      }                     out.append("\nFound device: " + devicenew);                      out.append("\nDone with discovery...");                  }             }         };         IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_FOUND);         registerReceiver(mReceiver, filter);          // Listing paired devices          currentUser.put("BT_ID", device_bt);         currentUser.saveInBackground();         context = getApplicationContext();          ScanBL();     }      public void ScanBL() {         final ParseQuery&lt;ParseUser&gt; queryParseUser = ParseUser.getQuery();         queryParseUser.findInBackground(new FindCallback&lt;ParseUser&gt;() {             @Override             public void done(List&lt;ParseUser&gt; BTList, ParseException arg1) {                 // TODO Auto-generated method stub                 Log.d("Parse", "we made it this far");                  if (BTList != null &amp;&amp; arg1 == null &amp;&amp; list != null) {                     for (ParseUser parseObject : BTList) {                         if (parseObject.getString("BT_ID") != null) {                             for (String string : list) {                                 if (string.equals(parseObject.getString("BT_ID"))) {                                     String BTuser = parseObject.getString("BT_ID");                                     String user = parseObject.getString("username");                                     Toast toast = Toast.makeText(context, "Wow we found" + user, Toast.LENGTH_SHORT);                                     toast.show();                                     out.append("\nFound nearby device: " + user);                                      Log.d("Bluetooth", "burde parse?");                                 }                             }                         }                     }                 }                  else {                     Log.d("Bluetooth", "Fejl i returnering af data: ");                 }             }         });     } } </code></pre>