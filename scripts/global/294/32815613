<p>Since im very new in java can someone help me to check all IP's within a given range supplied at the COMMAND LINE. because right now this codes only run automatically. The IP range should be specified as a starting IP followed by an integer indicating how many IPâ€™s in the range.</p>  <p>For example I run program in cmd "java iPRange 126.172.1.1 7" </p>  <p>It will check IP's from 126.172.1.1 to 126.172.1.7</p>  <p>here is my code:</p>  <pre><code>import java.util.*; import java.net.*;  public class IPRange  { public static void main(String[] args)  {     try      {                long start = host2long("126.172.1.1");         long end = host2long("126.172.1.7");         for (long i=start; i&lt;=end; i++)         {             System.out.println(long2dotted(i));         }     }      catch (Exception e)      {         e.printStackTrace();     } }  public static long host2long(String host)  {     long ip=0;     if (!Character.isDigit(host.charAt(0))) return -1;     int[] addr = ip2intarray(host);     if (addr == null) return -1;     for (int i=0;i&lt;addr.length;++i)      {         ip += ((long)(addr[i]&gt;=0 ? addr[i] : 0)) &lt;&lt; 8*(3-i);     }     return ip; }  public static int[] ip2intarray(String host)  {     int[] address = {-1,-1,-1,-1};     int i=0;     StringTokenizer tokens = new StringTokenizer(host,".");     if (tokens.countTokens() &gt; 4) return null;     while (tokens.hasMoreTokens())      {         try          {             address[i++] = Integer.parseInt(tokens.nextToken()) &amp; 0xFF;         }          catch(NumberFormatException nfe)          {             return null;         }     }     return address; }  public static String long2dotted(long address)  {     StringBuffer sb = new StringBuffer();     for (int i = 0, shift = 24; i &lt; 4; i++, shift -= 8)      {         long value = (address &gt;&gt; shift) &amp; 0xff;         sb.append(value);         if (i != 3)          {             sb.append('.');         }     }     return sb.toString(); } }  </code></pre>  <p>Output:</p>  <pre><code>126.172.1.1 126.172.1.2 126.172.1.3 126.172.1.4 126.172.1.5 126.172.1.6 126.172.1.7 </code></pre>