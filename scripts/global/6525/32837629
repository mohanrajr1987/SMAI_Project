<p><code>contains?</code> tells you whether <code>get</code> will succeed. I would also like to think that <code>get</code> returns something that comes from the collection, in this case a <code>set</code>. </p>  <pre><code>(def all-match-okay #{                  #{[3 0] [0 5]}                  #{[2 4] [0 5]}})  (defn joinable? [b1 b2]   (let [in-a-set (set [b1 b2])         res (contains? all-match-okay in-a-set)]     res))  (defn join [b1 b2]   (let [in-a-set (set [b1 b2])         res (get all-match-okay in-a-set)]     (first res)))  (defn -main   [&amp; args]   (println (joinable? [0 5] [3 0]))   (println (join [0 5] [3 0]))   )   </code></pre>  <p>If you run the above code then <code>true</code> will come back from <code>joinable?</code> but <code>[0 5]</code> will come back from <code>join</code>. This means that what is in the collection is not being returned, but rather what got the match.</p>  <p>I'm sure what is happening here is theoretically correct (after all if they match it should not matter which is returned). But on the other hand returning what is actually in the set would also be theoretically fine. Would it not?</p>