<p>Can you help me out in below query. Many thanks. </p>  <p>Write a clojure program. Given integers L and t, a string Pattern forms an (L, t)-clump inside a (larger) string Text if there is a contiguous substring of Text of length L in which Pattern appears at least t times. For example, TGCA forms a (25,3)-clump in the following Text: gatcagcataagggtcccTGCAATGCATGACAAGCCTGCAgttgttttac. Write a function findclumps with four arguments Text, k (integer), L (integer), t (integer) that returns a sequence strings of length k that form a (L, t)-clump in Text. For example: (def text “CGGACTCGACAGATGTGAAGAAATGTGAAGACTGAGTGAAGAGAAGAGGAAACAC GACACGACATTGCGACATAATGTACGAATGTAATGTGCCTATGGC” ) (find-clumps text 5 75 4) returns (“CGACA” “GAAGA” “AATGT”)</p>  <pre><code>(defn k-mers   [k text]   (map #(apply str %) (partition k 1 text)))   (defn most-frequent-k-mers   [k t text]   (-&gt;&gt; (k-mers k text)        (frequencies)        (filter #(&lt;= t (second %))) (map first)))   (defn find-clump   [k L t text]   (let [windows (partition L 1 text)]     (-&gt;&gt; windows          (map #(most-frequent-k-mers k t %))          (map set) (apply clojure.set/union)))) </code></pre>