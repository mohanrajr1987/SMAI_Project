<p>I am creating an agent for writing changes back to a database (as discussed in the agent-based write-behind log in <a href="http://www.clojurebook.com/" rel="nofollow">Clojure Programming</a>).</p>  <p>This is working fine, but I am struggling to create the agent late. I don't want to create it as a def, as I don't want it created when my tests are running (I see the pool starting up when the tests load the forms even though I use with-redefs to set a test value).</p>  <p>The code I started with is (using c3p0 pooling):</p>  <pre><code>(def dba (agent (pool/make-datasource-spec (u/load-config "db.edn")))) </code></pre>  <p>I tried making the agent nil, and investigated how I could set it in the main of my application, when it's really needed. But there doesn't seem to be an equivalent <code>reset!</code> function as there is with an atom. And the following code also failed saying the agent wasn't in error so didn't need restarting:</p>  <pre><code>(when (not @dba)   (restart-agent dba (create-db-pool))) </code></pre>  <p>So at the moment, I have an atom containing the agent, where I then do:</p>  <pre><code>(def dba (atom nil)) ;; ... (defn init-db! []   (when (not @dba)     (log/info "Creating agent for pooled connection")     (reset! dba (agent (create-db-pool)))) </code></pre>  <p>But the very fact I'm having to do <code>@@dba</code> to reference the contents of the agent (i.e. the pool) makes me think this is insane.</p>  <p>Is there a more obvious way of creating the pool agent lazily?</p>