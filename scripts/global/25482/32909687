<p>I am trying to use a UIPageViewController for an app walkthrough. When the application starts, I present the first page of the walkthrough, containing a TextView. I scroll to the next screen, which is all good, but when I then scroll back to the first screen, the font size of the text view has changed. Funnily enough, when I scroll to the third of fourth screen, and then back to the first, the text has kept (or rather regained) its previous size. </p>  <p>I tried to use viewWillAppear and viewDidAppeard to change the font size, but you can witness the change of font size, which is ugly and unexpected. </p>  <p>I am running on iOS 9.0.1, but this bug has kept me busy starting in iOS 8.0, which was when I started developing the application. </p>  <p>Hope someone can help me with this. </p>  <p>Cheers</p>  <p>------------- UPDATE : CODE FOR REVIEW : PageViewController ----------</p>  <pre><code>    - (void)viewDidLoad {     [super viewDidLoad];      self.pageController = [[UIPageViewController alloc] initWithTransitionStyle:UIPageViewControllerTransitionStyleScroll navigationOrientation:UIPageViewControllerNavigationOrientationHorizontal options:nil];      self.pageController.dataSource = self;     [[self.pageController view] setFrame:[[self view] bounds]];      childViewController = (TutorialChildViewController *)[self viewControllerAtIndex:1];     tvController = (TutorialViewControllerTextViewController *)[self viewControllerAtIndex:0];      NSArray *viewControllers = [NSArray arrayWithObject:tvController];      UIPageControl *pageControl = [UIPageControl appearance];     [self.pageController setViewControllers:viewControllers direction:UIPageViewControllerNavigationDirectionForward animated:YES completion:nil];      [self addChildViewController:self.pageController];     [[self view] addSubview:[self.pageController view]];     [self.pageController didMoveToParentViewController:self];       - (UIViewController *)pageViewController:(UIPageViewController *)pageViewController viewControllerBeforeViewController:(UIViewController *)viewController {      NSInteger index = 0;      if ([viewController isKindOfClass:[TutorialChildViewController class]]) {         index = [(TutorialChildViewController *)viewController indexNumber];      }     else if ([viewController isKindOfClass:[TutorialTextViewController class]]) {         index = [(TutorialChildViewController *)viewController indexNumber];     }       if (index == 0) {                return nil;         }     index--;      return [self viewControllerAtIndex:index];  }     - (UIViewController *)pageViewController:(UIPageViewController *)pageViewController viewControllerAfterViewController:(UIViewController *)viewController {      NSInteger index = 0;     if ([viewController isKindOfClass:[TutorialChildViewController class]]) {         index = [(TutorialChildViewController *)viewController indexNumber];      }     else if ([viewController isKindOfClass:[TutorialTextViewController class]]) {             index = [(TutorialTextViewController *)viewController indexNumber];     }          index++;      if (index == 6) {          return nil;      }     return [self viewControllerAtIndex:index];      }      - (UIViewController *)viewControllerAtIndex:(NSUInteger)index {      TutorialImageViewController *viewController = [[TutorialImageViewController alloc] initWithNibName:@"TutorialImageViewController" bundle:nil];     TutorialTextViewController *tvC = [[TutorialTextViewController alloc] initWithNibName:@"TutorialTextViewController" bundle:nil];       switch(index) {          case 0:         case 5: {             tvC.explanatoryText = [[UITextView alloc] init];             [tvC.explanatoryText setFont:[UIFont fontWithName:@"Helvetica Neue" size:17.0]];              tvC.indexNumber = index;             return tvC;         }             break;           case 1:         case 2:         case 3:         case 4: {                 viewController.preview = [[UIImageView alloc] init];                 viewController.explanatoryText = [[UITextView alloc] init];             [viewController.explanatoryText setFont:[UIFont fontWithName:@"Helvetica Neue" size:17.0]];                  viewController.indexNumber = index;                 return viewController;                 }             break;          default:             break;     } } </code></pre>  <p>---------- CODE : ViewController with the TextView ----------</p>  <pre><code>-(void)viewWillAppear:(BOOL)animated {     [_explanatoryText setFont:[UIFont fontWithName:@"Helvetica Neue" size:17.0]];      [self.view addSubview:_explanatoryText];     switch (_indexNumber) {          case 0: {             [_explanatoryText setText:@"...text that resizes ...."];              break;         }             case 5:             [_explanatoryText setText:@" ... text that resizes..."];              break;         default:             break;     } }  -(void)viewDidAppear:(BOOL)animated {     NSLog(@"viewDidAppear");     [_explanatoryText setFont:[UIFont fontWithName:@"Helvetica Neue" size:17.0]];  }  -(void)viewDidDisappear:(BOOL)animated {     [_explanatoryText setFont:[UIFont fontWithName:@"Helvetica Neue" size:17.0]];  }  -(void)viewWillDisappear:(BOOL)animated {     [_explanatoryText setFont:[UIFont fontWithName:@"Helvetica Neue" size:17.0]];  } </code></pre>  <p>The cases 1-4 use a different ChildViewController (TutorialImageViewController), the troublesome textview is explanatoryText. </p>  <p>I also tried to use the life cycle methods of the ChildViewController to force the text to stay the same size.</p>  <p>Hope this helps and clarifies things</p>