<p>I'm trying to realize a "yahoo-style" news reader for iOS. It have a "master" view controller with a uitableviewcontroller, displaying news titles and images, and it's perfectly functioning. The problem I have is with the scroller that shows every singles news (one news per page scrolling horizontally, just like yahoo news digest). In that view-controller I put a table view controller too, with two row. In the second I show the news text; I obtained it well-formatted using NSAttributedText and showing it in a uitextview. I have two kind of problems with that TextView:</p>  <p>1: In a casual mode, sometimes the news text is grabbed by the parser, but the text view doesn't show it. I NSLogged it, and the variable I set up is NOT empty; 2: more important, I absolutely can't get the exact height of the textview. I mean, my attempt to set the textview frame height and the uitableviewcell height (the cell in which the textview is contained), I always obtain a rectangle of the right width, but the height is wrong, more and more taller than needed.</p>  <p>I'm going to show you how I did: This is cell for row at index path:</p>  <pre><code>else if (indexPath.row == 1) {     if(!cell) {         cell = [[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@"Cell"];         cell.selectionStyle = UITableViewCellSelectionStyleNone;          cleanString = [NSString new];         NSString *string = [NSString new];          if (!self.drawNewsItem.author) string = [NSString stringWithFormat:@"%@", self.drawNewsItem.text];         else string = [NSString stringWithFormat:@"%@ &lt;br&gt;&lt;br&gt; di &lt;b&gt;%@&lt;/b&gt;", self.drawNewsItem.text, self.drawNewsItem.author];         NSMutableAttributedString *attrString = [[NSMutableAttributedString alloc] initWithData:[string dataUsingEncoding:NSUTF8StringEncoding] options:@{NSDocumentTypeDocumentAttribute: NSHTMLTextDocumentType,NSCharacterEncodingDocumentAttribute: [NSNumber numberWithInt:NSUTF8StringEncoding]} documentAttributes:nil error:nil];          cleanString = [NSString new];         cleanString = [attrString string];         UIFont *textFont = [UIFont fontWithName:@"SFUIDisplay-Light" size:15.0f];         [attrString addAttribute:NSFontAttributeName value:textFont range:NSMakeRange(0, attrString.length)];          testoNews.attributedText = attrString;         testoNews.textColor = [UIColor blackColor];         testoNews.backgroundColor = [UIColor redColor];          ////NSLog(@"eyelet: %@", self.drawNewsItem.eyelet);         testoNews.editable = NO;         testoNews.bounces = NO;         testoNews.scrollEnabled = NO;          if ([self.drawNewsItem.eyelet isEqualToString:@""]) testoNews.frame = CGRectMake(11.3f, 30.0f, self.view.frame.size.width - 25.0f, [self heightForTextViewRectWithWidth:self.view.frame.size.width / 2 andText:[attrString string] andFont:[UIFont fontWithName:@"SFUIDisplay-Light" size:15.0f]]);         else testoNews.frame = CGRectMake(11.3f, 0, self.view.frame.size.width - 25.0f, [self heightForTextViewRectWithWidth:self.view.frame.size.width / 2 andText:[attrString string] andFont:[UIFont fontWithName:@"SFUIDisplay-Light" size:15.0f]]);           [cell.contentView addSubview:testoNews];         NSLog(@"Textcontainer: %@", testoNews.textContainer);     }     else {         cell = [tableView dequeueReusableCellWithIdentifier:@"Cell" forIndexPath:indexPath];     }     return cell; } return cell; </code></pre>  <p>}</p>  <p>This, instead, is the function "heightForTextViewRectWithWidth" I call to try and calculate the needed height (note: I use it in other parts of the app and it works well):</p>  <pre><code>-(CGFloat)heightForTextViewRectWithWidth:(CGFloat)width andText:(NSString *)text andFont:(UIFont *)font </code></pre>  <p>{     UIFont *localFont = font;</p>  <pre><code>// this returns us the size of the text for a rect but assumes 0, 0 origin CGSize size = [text sizeWithAttributes:@{NSFontAttributeName:localFont}]; ////NSLog(@"Text in height for row: %@", text); // so we calculate the area CGFloat area = size.height * size.width;  CGFloat buffer = 100.0f;  // and then return the new height which is the area divided by the width // Basically area = h * w // area / width = h // for w we use the width of the actual text view //NSLog(@"Altezza: %f", floor(area/width) + buffer); return floor(area/width) + buffer; </code></pre>  <p>}</p>  <p>It's days I'm searching here and with Google, but with no result, could you help me? Oh, as a last note: I started from MHYahooParallaxView modifying it. You could see it at this address: <a href="https://github.com/michaelhenry/MHYahooParallaxView" rel="nofollow">https://github.com/michaelhenry/MHYahooParallaxView</a></p>  <p>Thanks!</p>