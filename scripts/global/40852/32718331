<p>I wrote a simple application that sends out bulk emails.  It uses a parallel foreach loop to send emails via system.net.mail.  The parallel foreach loop is surrounded by a for loop which was chunking up a 15000 email list into 20 each and waiting 1 second by a thread.sleep.  I set the executiontimeout to 7200 in the web config.  This application should have been done within an hour easy.  My question is - why did the application take over a hour to complete.  Is it waiting for the threads to complete or something?  How can I make it stop?  It eventually timed out through another timer - but???  I am new to threading - I am having a hard time trying to wrap my head around this one.  </p>  <pre><code> var chunk = emailList.Select((value, index) =&gt; new { Index = index, Value = value })                     .GroupBy(x =&gt; x.Index / Convert.ToInt32(chunkSize))                       .Select(g =&gt; g.Select(x =&gt; x.Value).ToList())                         .ToList();                         for (int i = 0; i &lt; chunk.Count; i++)                         {                             if (i &gt; 0)                             {                                 if (!String.IsNullOrEmpty(waitTime))                                 {                                     //mre.WaitOne(Convert.ToInt32(waitTime));                                     //mre.Reset();                                     Thread.Sleep(Convert.ToInt32(waitTime));                                 }                             }                              Parallel.ForEach(chunk[i], email =&gt;                             {                                  try                                 {                                     MailMessage em = new MailMessage();                                     em.From = new MailAddress(tbEmailFrom.Text);                                     em.To.Add(email.ToString().Trim());                                     if (!String.IsNullOrEmpty(tbEmailCC.Text))                                     {                                         em.CC.Add(tbEmailCC.Text);                                     }                                     if (!String.IsNullOrEmpty(tbEmailBC.Text))                                     {                                         em.Bcc.Add(tbEmailBC.Text);                                     }                                      em.ReplyToList.Add(tbReplyTo.Text);                                     em.Body = tbEmailBody.Text;                                     em.IsBodyHtml = true;                                     em.Subject = tbSubject.Text;                                     em.Priority = System.Net.Mail.MailPriority.Normal;                                     em.BodyEncoding = System.Text.Encoding.UTF8;                                      using (SmtpClient sm = new SmtpClient())                                     {                                          if (String.IsNullOrEmpty(smtpServer))                                         {                                             sm.Host = Host.SMTPServer;                                         }                                         else                                         {                                             sm.UseDefaultCredentials = false;                                             sm.Host = smtpServer;                                             sm.Credentials = new System.Net.NetworkCredential(smtpUsername, smtpPassword);                                         }                                          sm.Send(em);                                     }                                      Interlocked.Increment(ref count);                                  }                                 catch (SmtpException smtp)                                 {                                     errorList.Add(email.ToString() + "&lt;br /&gt;");                                 }                                 catch (Exception ex)                                 {                                     errorList.Add(email.ToString() + "&lt;br /&gt;");                                     Exceptions.LogException(ex);                                 }                              });      } </code></pre>