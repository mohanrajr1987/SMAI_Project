<p>I recently cam across this code written by a contractor we had working for us. It's either devilishly clever or silly (I think the latter but I wanted a second opinion). I'm not massively up to speed on <code>async</code> <code>await</code>.</p>  <p>Basically it worked like this:</p>  <pre><code>public bool Send(TemplatedMessageDto message) {     return Task.Run(() =&gt; SendAsync(message))         .GetAwaiter()         .GetResult(); }  public async Task&lt;bool&gt; SendAsync(TemplatedMessageDto message) {     //code doing stuff     var results = await _externalresource.DothingsExternally();     //code doing stuff } </code></pre>  <p>Now as I understand it that first <code>Task.Run()</code> is pointless and inefficient? and should really be:</p>  <pre><code>public bool Send(TemplatedMessageDto message) {     return SendAsync(message))     .GetAwaiter()     .GetResult(); }  public async Task&lt;bool&gt; SendAsync(TemplatedMessageDto message) {     //code doing stuff     var results = await _externalresource.DothingsExternally();     //code doing stuff } </code></pre>  <p>I'm also not convinced this is really an async method because it will still wait, right? I think it's only advantage (even re-written) is to free up the main worker thread. </p>  <p>Can someone confirm that this first Task shouldn't be there?</p>