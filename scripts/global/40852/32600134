<p>Here are the two alternatives i tried for catching errors, they both seem to do the same thing.. but is one preferable over the other and why ?</p>  <h2>Alt 1:</h2>  <pre><code>private async void BtnClickEvent(object sender, RoutedEventArgs e) {      try     {         Task t = Task.Run(() =&gt;             {                 _someObj.SomeMethod();             });         await t; //wait here, without blocking...     }     catch (Exception ex)     {         string errMsg = ex.Message + Environment.NewLine;         errMsg += "some unhandled error occurred in SomeMethod";         Log(errMsg);          return; //&lt;-- bypass below code on error...     }      //other code below... does not execute...     DoSomethingElse();  } </code></pre>  <h2>Alt 2:</h2>  <pre><code>private async void BtnClickEvent(object sender, RoutedEventArgs e) {      bool errOccurred = false;      Task t = Task.Run(() =&gt;         {             try             {                 _someObj.SomeMethod();             }             catch (Exception ex)             {                 string errMsg = ex.Message + Environment.NewLine;                 errMsg += "some unhandled error occurred in SomeMethod";                 Log(errMsg);                  errOccurred = true;              }//end-Catch         });     await t; //wait here, without blocking...     if (errOccurred) return; //&lt;-- bypass below code on error...      //other code below... does not execute...     DoSomethingElse();    } </code></pre>