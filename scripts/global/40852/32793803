<p>How do i make the lines work as asynchronously </p>  <pre><code>errors.Add(s.ValidateFileAsync(file)); </code></pre>  <p>and the code does not go beyond <code>Task.WaitAll(errors.ToArray());</code></p>  <pre><code>using System; using System.Data;      namespace ConsoleApplication1     {         public class ExcelDataAccess         {              private string mstrConnString = string.Empty;             string mstrSourceFilePath = string.Empty;             string mstrSourceFileName = string.Empty;              public ExcelDataAccess()             {             }              public string SourceFilePath             {                 get                 {                     return mstrSourceFilePath;                 }                 set                 {                     mstrSourceFilePath = value;                 }             }              public string SourceFileName             {                 get                 {                     return mstrSourceFileName;                 }                 set                 {                     mstrSourceFileName = value;                 }             }              public DataSet GetExcelData(string strSheetname, string filename)             {                 DataSet objDataSet = new DataSet();                 string strsSQL = string.Empty;                 try                 {                      strsSQL = "Select * from [" + strSheetname + "]";                     Oledbaccess _objexconn = new Oledbaccess();                     objDataSet = _objexconn.selectRows(strsSQL, filename, strSheetname);      using System;     using System.Collections.Generic;     using System.Data;     using System.IO;     using System.Threading.Tasks;      namespace ConsoleApplication1     {         public class Validator         {             ExcelDataAccess ObjExceldata;             public Validator()             {                 ObjExceldata = new ExcelDataAccess();             }             public Task&lt;DataSet&gt; ValidateFileAsync(FileInfo file)             {                 DataSet errorDataset = null;                 List&lt;Task&lt;DataTable&gt;&gt; dtWorksheets = null;                 try                 {                     string[] sheetNames = ObjExceldata.GetExcelSheetNames(file.FullName);                     if (sheetNames.Length &gt; 0)                     {                         errorDataset = new DataSet();                         errorDataset.DataSetName = file.Name;                         dtWorksheets = new List&lt;Task&lt;DataTable&gt;&gt;();                     }                     foreach (string sheetName in sheetNames)                         dtWorksheets.Add(ValidateWorksheetAsync(sheetName, file));                     foreach (var singleWorksheet in dtWorksheets)                         if (singleWorksheet.Result != null)                             errorDataset.Tables.Add(singleWorksheet.Result);                 }                 catch (Exception ex)                 {                     Console.WriteLine(ex.Message);                 }                  return new Task&lt;DataSet&gt;(() =&gt; { return errorDataset; });             }             public DataTable ValidateWorksheet(string SheetName, FileInfo file)             {                 //TODO remove the hardcoding below                 //Thread.Sleep(3000);                 DataSet SheetDataSet = ObjExceldata.GetExcelData(SheetName, file.FullName);                 return SheetDataSet.Tables[0].Copy();             }             public Task&lt;DataTable&gt; ValidateWorksheetAsync(string SheetName, FileInfo file)             {                 return Task.Factory.StartNew&lt;DataTable&gt;(() =&gt;                 {                     return ValidateWorksheet(SheetName, file);                 });             }             public Task&lt;DataSet&gt; ValidateFileAsync(string file)             {                 if (File.Exists(file))                     return ValidateFileAsync(new FileInfo(file));                  throw new FileNotFoundException("The following file could not be found: ", file);             }         }     }                      return objDataSet;                 }                 catch (Exception ex)                 {                     return objDataSet;                 }                 finally                 {                     objDataSet = null;                 }             }              public String[] GetExcelSheetNames(string excelFile)             {                 String[] excelSheets;                 try                 {                     Oledbaccess _objexconn = new Oledbaccess();                      excelSheets = _objexconn.GetExcelSheetNames(excelFile);                     return excelSheets;                   }                 catch (Exception ex)                 {                     return null;                 }              }         }     }      using System;     using System.Collections.Generic;     using System.Data;     using System.Data.OleDb;     using System.Linq;     using System.Text;     using System.Threading.Tasks;      namespace ConsoleApplication1     {         public class Oledbaccess         {             public OleDbConnection connectExcel(string data)             {                  string Excelconnection;                 Excelconnection = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + data + ";Extended Properties=\"Excel 12.0;HDR=YES\";";                 OleDbConnection cnConnection = new OleDbConnection(Excelconnection);                 return cnConnection;              }              public DataSet selectRows(string sSQL, string data, string tablename)             {                  OleDbConnection cnEx = new OleDbConnection();                 cnEx = connectExcel(data);                 OleDbCommand Excmd = new OleDbCommand(sSQL, cnEx);                 OleDbDataAdapter da = new OleDbDataAdapter(Excmd);                 DataSet Exds = new DataSet();                 da.Fill(Exds, tablename);                   cnEx.Close();                 return Exds;               }              public String[] GetExcelSheetNames(string excelFile)             {                  System.Data.DataTable dt = null;                 OleDbConnection cnEx = new OleDbConnection();                 try                 {                      cnEx = connectExcel(excelFile);                     cnEx.Open();                     // Get the data table containg the schema guid.                     dt = cnEx.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);                     if (dt == null)                     {                         return null;                     }                      String[] excelSheets = new String[dt.Rows.Count];                     int i = 0;                      // Add the sheet name to the string array.                     foreach (DataRow row in dt.Rows)                     {                         excelSheets[i] = row["TABLE_NAME"].ToString();                         i++;                     }                      return excelSheets;                 }                 catch (Exception ex)                 {                     return null;                 }                 finally                 {                     // Clean up.                     if (cnEx != null)                     {                         cnEx.Close();                         cnEx.Dispose();                     }                     if (dt != null)                     {                         dt.Dispose();                     }                 }             }         }     }     using System;     using System.Collections.Generic;     using System.Data;     using System.IO;     using System.Threading.Tasks;      namespace ConsoleApplication1     {         public class Example         {             public static void Main()             {                 DirectoryInfo dir = new DirectoryInfo(@"C:\testfiles");                 FileInfo[] files = dir.GetFiles("*.xls*", SearchOption.AllDirectories);                 List&lt;Task&lt;DataSet&gt;&gt; errors = new List&lt;Task&lt;DataSet&gt;&gt;();                 Validator s = new Validator();                 Console.WriteLine("Starting tasks");                 int i = 0;                 foreach (var file in files)                 {                     if (i++ == 1) break;                     Console.WriteLine("Starting task for {0}", file.Name);                     //The below line is working as synchronously!!!                     errors.Add(s.ValidateFileAsync(file));                     Console.WriteLine("Started task for {0}", file.Name);                 }                 Console.WriteLine("Started tasks");                 //Thread is blocked here infinitely                 Task.WaitAll(errors.ToArray());                 Console.WriteLine("Finished waiting on tasks");              }         }     } </code></pre>