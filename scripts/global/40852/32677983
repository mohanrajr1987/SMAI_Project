<p>I am calling Async method in a non-async method in the below way in WebApi authentication handler. And it hangs when it executes the inner external Async method. I need to set the claims before the subsequent code executes. So I am setting the return value to the Thread.CurrentPrincipal. Please advise.</p>  <p>I have tried the below and none of them worked.</p>  <ol> <li><p>Task.Run(() => Thread.CurrentPrincipal = this.ValidateTokenAsync(accessToken).GetAwaiter().GetResult()); - this works but the subsequent code execution does not wait on this and so the claims are not utilized there.</p></li> <li><p>Thread.CurrentPrincipal = this.ValidateTokenAsync(accessToken).Result;</p></li> <li><p>Task claimsPrincipalTask = this.ValidateTokenAsync(accessToken); Task.WaitAll(claimsPrincipalTask); Thread.CurrentPrincipal = Thread.CurrentPrincipal.GetAwaiter().GetResult();</p></li> </ol>  <hr>  <p>Thread.CurrentPrincipal = this.ValidateTokenAsync(accessToken).GetAwaiter().GetResult();</p>  <hr>  <pre><code>private async Task&lt;ClaimsPrincipal&gt; ValidateTokenAsync(string accessToken)     {         LoggingUtilities.Logger.TraceInformation("Validating JWT.");          ClaimsPrincipal principal = ClaimsPrincipal.Current;                      if (principal == null || principal.Identity == null || !principal.Identity.IsAuthenticated)         {             principal = await JwtValidator.ValidateTokenAsync(accessToken).ConfigureAwait(false);         }          return principal;     } </code></pre>  <hr>  <p>The JwtValidator.ValidateTokenAsync method:</p>  <pre><code>public static async Task&lt;ClaimsPrincipal&gt; ValidateTokenAsync(string accessToken)     {         string authority = string.Format(CultureInfo.InvariantCulture, aadInstance, tenant);          string issuer = null;         string stsDiscoveryEndpoint = string.Format(CultureInfo.InvariantCulture, "{0}/.well-known/openid-configuration", authority);          List&lt;SecurityToken&gt; signingTokens = null;          try         {             // The issuer and signingTokens are cached for 24 hours. They are updated if any of the conditions in the if condition is true.             if (DateTime.UtcNow.Subtract(stsMetadataRetrievalTime).TotalHours &gt; 24                 || string.IsNullOrEmpty(globalIssuer)                 || globalSigningTokens == null)             {                 // Get tenant information that's used to validate incoming jwt tokens                 ConfigurationManager&lt;OpenIdConnectConfiguration&gt; configManager = new ConfigurationManager&lt;OpenIdConnectConfiguration&gt;(stsDiscoveryEndpoint);                 OpenIdConnectConfiguration config = await configManager.GetConfigurationAsync().ConfigureAwait(false);                 globalIssuer = config.Issuer;                 globalSigningTokens = config.SigningTokens.ToList();                  stsMetadataRetrievalTime = DateTime.UtcNow;             }              issuer = globalIssuer;             signingTokens = globalSigningTokens;         }         catch (Exception)         {             LoggingUtilities.Logger.TraceWarning("Failed to get signing tokens.");             throw;         }          JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();          TokenValidationParameters validationParameters = new TokenValidationParameters         {             ValidAudience = audience,             ValidIssuer = issuer,             IssuerSigningTokens = signingTokens,             CertificateValidator = X509CertificateValidator.None         };          ClaimsPrincipal principal;          try         {             // Validate token.             SecurityToken validatedToken;             principal = tokenHandler.ValidateToken(                 accessToken,                 validationParameters,                 out validatedToken);         }         catch (SecurityTokenValidationException)         {             LoggingUtilities.Logger.TraceWarning("Failed to validate the JWT.");             throw;         }         catch (Exception)         {             LoggingUtilities.Logger.TraceWarning("Failed to validate the JWT.");             throw;         }          return principal;     } </code></pre>