<p>How do I go about switching between async/sync processing of multiple tasks in C#?</p>  <p>I'd like to be able to switch between parallel and synchronous processing of tasks for testing/profiling purposes.</p>  <p>Initially I had an array of Tasks initialised inline. While this was fine for parallel, I found my synchronous code wouldn't work because each method would be activated on initialization of the array.</p>  <p>I decided to try Lazy instead. Is this code correct? If not, how is this best achieved?</p>  <pre><code>  var runTasks = new Lazy&lt;Task&lt;ProcessWithResult&gt;&gt;[]             {                 new Lazy&lt;Task&lt;ProcessWithResult&gt;&gt;(() =&gt; GetHeaderRecord()),                 new Lazy&lt;Task&lt;ProcessWithResult&gt;&gt;(() =&gt; GetChildType1Entities()),                 new Lazy&lt;Task&lt;ProcessWithResult&gt;&gt;(() =&gt; GetChildType2Entities()),                 new Lazy&lt;Task&lt;ProcessWithResult&gt;&gt;(() =&gt; GetChildType3Entities()),                                  };              if (Settings.Default.AsyncProcessing)             {                 Task.WaitAll(runTasks.Select(x =&gt; x.Value).ToArray());             }             else             {                 // do these in sequence                 runTasks.ToList().ForEach(t =&gt; t.Value.Wait());             }              // carryon... </code></pre>  <p>Each GetX() method signature is like so:</p>  <pre><code>public async Task&lt;ProcessWithResult&gt; GetChildType1Entities() </code></pre>  <p>With at least one async operation on Database or file i/o.</p>