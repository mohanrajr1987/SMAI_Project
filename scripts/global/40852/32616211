<p>I have the following program:</p>  <pre><code>private const int TRIANGLE_SIZE = 101; private const int LIMIT = 1000000;   /* *    [key] -&gt; [value] *    [0] -&gt; [1, 0, 0, 0, 0, 0, ...]   First level *    [1] -&gt; [1, 1, 0, 0, 0, 0  ...]   Second level *    [2] -&gt; [1, 0, 1, 0, 0, 0  ...]   Third level *    [3] -&gt; [1, 0, 0, 1, 0, 0  ...]   Fourth level *    [4] -&gt; [1, 0, 0, 0, 1, 0  ...]   Fifth level *    ... *    ... * *    Like a matrix, with TRIANGLE_SIZE dimension */ private static ConcurrentDictionary&lt;int, int[]&gt; InitPascalTriangle() {     ConcurrentDictionary&lt;int, int[]&gt; pascalTriangle = new ConcurrentDictionary&lt;int, int[]&gt;();     Parallel.For(0, TRIANGLE_SIZE, i =&gt;     {         int[] level = new int[TRIANGLE_SIZE];         level[0] = 1;         level[i] = 1;         pascalTriangle.TryAdd(i, level);     });     return pascalTriangle; }  /* * Fills the Pascal Triangle and counts the values that were bigger than LIMIT */ private static int Process() {     ConcurrentDictionary&lt;int, int[]&gt; pascalTriangle = InitPascalTriangle();     int counter = 0;      Parallel.For(0, TRIANGLE_SIZE, y =&gt; Parallel.For(1, y, x =&gt;     {         int[] previousLevel = pascalTriangle.GetOrAdd(y - 1, new int[TRIANGLE_SIZE]);         int value = previousLevel[x] + previousLevel[x - 1];         pascalTriangle.AddOrUpdate(y, new int[TRIANGLE_SIZE], (k, current) =&gt;         {             current[x] = value &lt; LIMIT ? value : LIMIT;             return current;         });         if (value &gt; LIMIT)             Interlocked.Increment(ref counter);     }));      return counter; } </code></pre>  <p><code>Process()</code> should output <code>4075</code>, and in fact, it does... ~80% of the time.</p>  <p>I'm running the following program:</p>  <pre><code>private const int TEST_RUNS = 50;  public static void Main(String[] args) {     Parallel.For(0, TEST_RUNS, i =&gt; Console.WriteLine(Process()));     Console.ReadLine(); } </code></pre>  <p>The output is the following:</p>  <pre><code>4075     4075     4075     4075    4075 4075     4075     4075     4075    4075 4075     4075     4075     4075    4075 4075     4075     4075     4075    4075 4075     4075     4075     4075    4075 4075     4075     4075     4075    4075 4075     4075     4075     4075    4075 4075     4075     4075     4075    4075 3799     4075     1427     4075    651 1427     681      871      871     871 </code></pre>  <p>As you can see, the last values are wrong, so I'm guessing <code>Process()</code> is not thread safe at all.</p>  <p>Why is this? I'm using a shared <code>ConcurrentDictionary</code> inside <code>Process()</code>, but isn't <code>ConcurrentDictionary</code> supposed to be thread-safe? How can wrong results be returned by my <code>Process()</code> method?</p>