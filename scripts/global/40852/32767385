<p>I randomly get the System.InvalidOperationException in my Task en then it completely stops working.</p>  <p>After some searching I found that it probably is due to my tasks sharing the same class instance.</p>  <p>So here is a small (not the same, but the project is too large to just share here) reassemblence doing the same thing</p>  <pre><code>class Player{     public MemoryClass MyMemoryClass;     public int baseAddress; //Memory location offset     public int health{         get{             return MyMemoryClass.ReadInt32(baseAddress + Offsets.Health);         };     }; } </code></pre>  <p>Now I believe the error occurs as soon as the 2 seperate threads are trying to request the health at the same time, although I'm not sure if this is the case.</p>  <p>So I'm hoping someone here knows what exactly causes this error and a fix for this. Can't specificly recreate the error, it happens "randomly" but only when the class is being accesed</p>  <p>EDIT:</p>  <pre><code>[DllImport("kernel32.dll", SetLastError = true)]     public static extern bool ReadProcessMemory(         IntPtr hProcess,         IntPtr lpBaseAddress,         [Out] byte[] lpBuffer,         int dwSize,         out IntPtr lpNumberOfBytesRead); public Int32 ReadInt32(Int64 address) {     byte[] buffer = new byte[4];     ReadMemory(address, ref buffer);     return BitConverter.ToInt32(buffer, 0); } public void ReadMemory(Int64 address, ref Byte[] buffer) {     IntPtr bytesRead = IntPtr.Zero;     ReadProcessMemory(_Process.Handle, (IntPtr)address, buffer, buffer.Length, out bytesRead); } </code></pre>