<p>I need to write a service with some complex behaviour like simultanious tasks and I'm facing an issue with.</p>  <p>I've written a sample in xUnit to show you the problem.</p>  <p>1 want to execute a task on a background, eventually start some child tasks. At a moment in time the task needs to be cancelled.</p>  <p>Therefore, I have the following in place:</p>  <pre><code>[Fact] public void ShouldWaitUnitTaskCompleted() {     Task.Factory.StartNew(() =&gt;     {         while (!cancellationTokenSource.IsCancellationRequested)         {             Task.Delay(10000).Wait();             TaskIsCompleted = true;         }     }, cancellationTokenSource.Token);      Thread.Sleep(3000);      cancellationTokenSource.Cancel();      Assert.True(TaskIsCompleted); } </code></pre>  <p>}</p>  <p>However, the xUnit completes after 3 seconds (my thread sleep). In my task, I'm having a loop that say, as long as it's not a cancellation request delay if for 10 second.</p>  <p>So the behaviour I expect would be:</p>  <ul> <li>Start the application.</li> <li>Start the task (since it's no cancellation request, a delay of 10 seconds will start).</li> <li>Wait for 3 seconds and then cancel the token.</li> <li>Wait for the task with the 10 second delay to complete and then exit.</li> </ul>  <p>Why doesn't my code wait for the 10 seconds frame to pass?</p>