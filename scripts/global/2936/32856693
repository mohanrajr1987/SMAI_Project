<p>I am working on a homework assignment for a C# class and have been going crazy the last two days trying to figure out how to put my random dice rolls (two dice) into a two dimensional collection or array and compare them using IEnumerable.except in order to show the roll combinations that occurred in the first set of rolls that didn't occur in the second set of rolls. Here is my entire code that includes commented out attempts I have already made using nested lists, multidimensional arrays, and dictionary. I am starting to go crazy so any help or advice would be greatly appreciated. Here is my code:</p>  <pre><code>namespace NewDiceSimulation { public partial class Form1 : Form {       List&lt;DiceRollList&gt; RollList1 = new List&lt;DiceRollList&gt;();      List&lt;DiceRollList&gt; RollList2 = new List&lt;DiceRollList&gt;();       List&lt;int&gt; SumList1 = new List&lt;int&gt;();     List&lt;int&gt; SumList2 = new List&lt;int&gt;();      public Form1()     {         InitializeComponent();     }       private void DiceRoll()     {         //Clear list for new roll         listView1.Items.Clear();          //Setup random         Random shooter = new Random();          //Setup counter for For loop         for (int i = 1; i &lt;= 20; ++i)         {             String result;             int die1, die2, die1Value, die2Value, total;              //Roll both dice             die1 = shooter.Next(6);             die2 = shooter.Next(6);              //Increase both dice by 1 to get dice value             die1Value = die1 + 1;             die2Value = die2 + 1;             total = die1Value + die2Value;               //SumLoop1[total] +=1;               SumList1.Add(total);              RollList1.Add(new DiceRollList { RollNum = i, Dice1 = die1Value, Dice2 = die2Value, DiceTotal = total });               //RollLoop1[die1, die2] +=1;              //RollLoop1[die1, die2, total] += 1;              //Change image for each Die to represent the number rolled             //      lbl_die1.ImageIndex = die1;             //      lbl_die2.ImageIndex = die2;              //if statement to determine if both dice were the same number             if (die1Value == die2Value)             {                 result = "On roll number " + i.ToString() + " both dice rolled " + die1Value.ToString() + "'s";                 string[] row = { i.ToString(), die1Value.ToString(), die2Value.ToString(), total.ToString(), result };                 var listViewItem = new ListViewItem(row);                 listView1.Items.Add(listViewItem);                   //force application to update                 Application.DoEvents();             }             else             {                  string[] row = { i.ToString(), die1Value.ToString(), die2Value.ToString(), total.ToString() };                 var listViewItem = new ListViewItem(row);                 listView1.Items.Add(listViewItem);                 //force application to update                 Application.DoEvents();             }              //Force thread to sleep to create a pause between each for loop             System.Threading.Thread.Sleep(600);         }           for (int i = 1; i &lt;= 20; ++i)         {             String result;             int die1, die2, die1Value, die2Value, total;              //Roll both dice             die1 = shooter.Next(6);             die2 = shooter.Next(6);              //Increase both dice by 1 to get dice value             die1Value = die1 + 1;             die2Value = die2 + 1;             total = die1Value + die2Value;               //SumLoop2[total] += 1;              RollList2.Add(new DiceRollList { RollNum = i, Dice1 = die1Value, Dice2 = die2Value, DiceTotal = total });                 SumList2.Add(total);               //RollLoop2[die1, die2] += 1;             //RollLoop2[i,i,i] = die1 die2 total;              //Change image for each Die to represent the number rolled             //      lbl_die1.ImageIndex = die1;             //      lbl_die2.ImageIndex = die2;              //if statement to determine if both dice were the same number             if (die1Value == die2Value)             {                 result = "On roll number " + i.ToString() + " both dice rolled " + die1Value.ToString() + "'s";                 string[] row = { i.ToString(), die1Value.ToString(), die2Value.ToString(), total.ToString(), result };                 var listViewItem = new ListViewItem(row);                 listView2.Items.Add(listViewItem);                   //force application to update                 Application.DoEvents();             }             else             {                  string[] row = { i.ToString(), die1Value.ToString(), die2Value.ToString(), total.ToString() };                 var listViewItem = new ListViewItem(row);                 listView2.Items.Add(listViewItem);                 //force application to update                 Application.DoEvents();             }              //Force thread to sleep to create a pause between each for loop             System.Threading.Thread.Sleep(600);         }        }      public void QuerySearch()     {         String numSelect = comboBox1.SelectedItem.ToString();         int totCount;          IEnumerable&lt;int&gt; queryTotal =              from int total in SumList1                where total == Int32.Parse(numSelect)              select total;         var count = queryTotal.Count();          label1.Text = count.ToString() ;         IEnumerable&lt;int&gt; queryTotal2 =             from int total in SumList2              where total == Int32.Parse(numSelect)             select total;         var count2 = queryTotal2.Count();          totCount =  count2;           label2.Text = totCount.ToString();       }      public void Compare()     {          IEnumerable&lt;DiceRollList&gt; except = RollList1.Except(RollList2);          foreach (var rollList in except)         {              string[] row = { rollList.RollNum.ToString(), rollList.Dice1.ToString(), rollList.Dice2.ToString(), rollList.DiceTotal.ToString() };             var listViewItem = new ListViewItem(row);             listView3.Items.Add(listViewItem);         }        }      public class DiceRollList : IEquatable&lt;DiceRollList&gt;     {         public int RollNum { get; set; }         public int Dice1 { get; set; }         public int Dice2 { get; set; }         public int DiceTotal { get; set; }          public bool Equals(DiceRollList other)         {             if (Object.ReferenceEquals(other, null)) return false;              if (Object.ReferenceEquals(this, other)) return true;              return Dice2.Equals(other.Dice2) &amp;&amp; Dice1.Equals(other.Dice1);         }          public override int GetHashCode()         {             return base.GetHashCode();         }       }        private void button1_Click(object sender, EventArgs e)     {         DiceRoll();      }      private void button2_Click(object sender, EventArgs e)     {          QuerySearch();     }      private void button3_Click(object sender, EventArgs e)     {         Compare();     } } } </code></pre>  <p>I fixed the class and used it to make the list, however now it is simply adding the entire RollList1 to the new ListView rather than taking out the ones that are shared with RollList2. Any thoughts?</p>