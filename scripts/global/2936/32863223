<p>I'm fetching two <code>JSON</code>s and store them individually as <code>NSArray</code> and <code>NSDictionary</code>.</p>  <p>This is what the <code>JSON</code> data structures looks like</p>  <pre><code>(         {             Cells = (                 {                     ValueName = "name";                     Text = "John Appleseed";                 },                 {                     "Option": {                         "Text": "19"                     },                     ValueName = "age"                 }, etc...             )         },         {            Cells = (                 {                     ValueName = "name";                     Text = "John Appleseed";                 },                 {                     ValueName = "age",                     "Option": {                         "Text": "19"                     }                 }, etc...             )         } ) </code></pre>  <hr>  <pre><code>{     "map": {         "first": "name",         "second": "age"     }, etc... }    </code></pre>  <hr>  <p>The two has values that needs to be cross referenced (as one contains all data (<code>allData</code>), and the other contains a "map" (<code>mapData</code>) of what data is needed).</p>  <p>How may I compare all the values of <code>allData</code> with all the values of <code>mapData</code> while, if possible, keeping simplicity and memory in mind?</p>  <p>A great approach would be to use <code>containsObject</code> matching <code>[allData allValues]</code> with <code>[mapData allValues]</code> and being given back an <code>NSArray</code> with the <code>object</code> of the match. Alas, this is not the case. The approach perfectly illustrates what I wish to accomplish.</p>  <p>My initial approach is slow, memory hogging and ugly (wrote this from memory):</p>  <pre><code>NSArray *allData = [NSJSONSerialization JSONObjectWithData:allDataJSON options:kNilOptions error:&amp;JSONSerializationError]; NSDictionary *mapData = [NSJSONSerialization JSONObjectWithData:mapDataJSON options:kNilOptions error:&amp;JSONSerializationError]; NSMutableDictionary *resultData = [[NSMutableDictionary alloc] init];  for (int count = 0; count&lt;allData.count; count++) {     id dataValue = [allData objectAtIndex:count];     for (id key in mapData) {         if ([[mapData objectForKey:key] containsObject:dataValue]) {             [resultData setObject:[dataValue objectForKey:@"value"] forKey:key]         }     } } </code></pre>  <p>It's also important to be able to reference to each match of the values that match (as done in my approach).</p>  <hr>  <p>This is not an opinion based question as optimisation and memory usage is not an opinion.</p>