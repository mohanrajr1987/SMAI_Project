<p>We've got a bunch of different subdomains that we need subdomain routing on so we set up what is below to help us do the routes specific to that subdomain.</p>  <pre><code>$subdomain = substr(env("HTTP_HOST"), 0, strpos(env("HTTP_HOST"),"."));  if($subdomain == Configure::read('subdomain.one')) {      Router::connect('/:action/*', array('controller' =&gt; 'one', 'pass' =&gt; $subdomain));  } else if($subdomain == Configure::read('subdomain.two')) { ... } } else if( ... ) { ... } ... </code></pre>  <p>We added routes that omitted the controller from the URL since we only have single controller for each, but we've run into an issue when using pagination where when you try to access a page other than page one it throws a page not found error since the original page would be <code>subdomain.ourdomain.com/action</code>, but after switching to page 2 for example it tries <code>subdomain.ourdomain.com/controller/action</code>.</p>  <p>The first thing we tried was setting the paginator controller options to be blank, but the <a href="http://stackoverflow.com/a/32902894/1148107">side effect</a> of this is the paginator no longer automatically remembers any search filters that were applied and just shows all the results.</p>  <pre><code>&lt;?php $this-&gt;Paginator-&gt;options( [     'url' =&gt; [         'controller' =&gt; ''     ] ] ); ?&gt; </code></pre>  <p>It seemed temporarily patched by using a combination of two routes:</p>  <pre><code>Router::connect( '/sales/:action/*',     [ 'pass' =&gt; $subdomain ] );  Router::connect( '/:action/*',     [ 'controller' =&gt; 'sales', 'pass' =&gt; $subdomain ] ); </code></pre>  <p>and this works with the pagination pages, but then fails again trying to access other parts of the application within this domain citing that the page was not found.</p>  <p>Is it better to just set a bunch of explicit routes for all the different routes, or is there a way to set up more dynamic routes to avoid this from happening?</p>  <p><strong>UPDATE</strong></p>  <pre><code>public function link( $title, $url = [ ], $options = [ ] ) {     $link = parent::link( $title, $url, $options );      /**      * Fix for Pagination Routing Issues      * This patch allows us to maintain our current routing scheme by removing the paginations dependency on the      * controller parameter of the URI.  Several solutions were attempted, but this is the least invasive solution      * till the routing scheme is refactored.      *      * NOTE: This can also be done by the setting the controller options of the pagination to an empty string, but      * that causes a lot of warnings and a few errors in the log file.      */      // Remove controller from URI and continue...     $controller = '/' . $this-&gt;params[ 'controller' ];     $link = str_replace( $controller, '', $link );      return $link; } </code></pre>