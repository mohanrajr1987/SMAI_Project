<p>We are in the process of migrating from Mercurial to Git.</p>  <p>In the process I'd like to do a little bit of housekeeping on some of our older, and larger repositories.</p>  <p>We have one particular project that has almost 5 years of history and commits in it.</p>  <p>I can see no use case that would require us to revert back to a commit 3 years ago. </p>  <p>This particular project also has a commit that occurred 4 years ago in which a developer committed over 200,000 small text files that were used in a series of tests. This amount of files killed the performance of our systems. So a few commits later these files were removed. While this helped with the overall performance of the local systems, all of these files are still contained within the repository history. </p>  <p><strong>My goal of this exercise is to get rid of these files and the overall bloat that it has caused in when cloning this repository.</strong></p>  <p>So what I would like to learn is if there is a way that I can effectively trim old commits from our history in Git, without losing the changes that were made in those previous commits? In other words, resetting what will become the first commit in the repository to be what the working folder was at a particular point in time?</p>  <p>EDIT: Since I am concerned about removing the bloat caused by the addition and later deletion of a large number files, I don't consider this to be a direct duplicate of <a href="http://stackoverflow.com/questions/6764465/git-how-can-i-remove-a-old-commit-from-a-branch-without-using-a-reverse-patch">Git: How can I remove a old commit from a branch without using a reverse patch?</a> -- however the solution might turn out to be the same (I just don't know that at this point)</p>