<p>I have an array of database objects and I'm using foreach() to present the names and projects. Good, now the customer doesn't want duplicate names for when one person has multiple projects. This has to do with variable scope and this is my failed attempt to pull this stunt off. Here's a partial var_dump of the array of objects.</p>  <pre><code>array [ 0 =&gt; {   ["lastName"]=&gt;   string(1) "w"   ["projectName"]=&gt;   string(29) "Bone density scanner analysis" } 1 =&gt; {   ["lastName"]=&gt;   string(1) "w"   ["projectName"]=&gt;   string(29) "analysis of foot" } ] </code></pre>  <p>What I want to end up with is:</p>  <pre><code>array [ 0 =&gt; {   ["lastName"]=&gt;   string(1) "w"   ["projectName"]=&gt;   string(29) "Bone density scanner analysis" } 1 =&gt; {   ["lastName"]=&gt;   string(1) ""   ["projectName"]=&gt;   string(16) "analysis of foot" } ] </code></pre>  <p>Here's what I was thinking that doesn't seem to work:</p>  <pre><code>function suppress_name($name){   global $string;    return ($name == $string) ? '' : $string; }  function overall() {   //$result = database call to get objects   foreach ($result as $item) {   $string = $item-&gt;lastName;   $rows = array('Name' =&gt; suppress_name($item-&gt;lastName), 'project' =&gt; $item-&gt;projectName); } } </code></pre>  <p>Researching I see several references to array_unique() which I use for a flattened array, but I can't see that it would help me here. OK, I thought I could make a function, like the above, to handle duplicates and use the $global but think I'm not grasping how to use globals in this instance. I'm happy to be pointed to a better way, or better search terms. Does this make sense?</p>