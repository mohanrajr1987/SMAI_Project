<p>I have two <code>foreach</code> loops like below. </p>  <p>The idea is to process type 2 before type 1 in order. Code below works just fine but I was wondering how can I use <code>unset</code> to achieve same result instead of using another array <code>$processed</code> to keep track of what was processed. </p>  <p>I know that PHP foreach clones/copies the <code>$data</code> array for iteration. In other words, is it possible to <code>unset</code> type 2 from <code>$data</code> in second <code>foreach</code> loop and somehow first <code>foreach</code> loop skip them? </p>  <p>I know that PHP foreach clones/copies array for iteration.</p>  <pre><code>  $data = array(     array('type' =&gt; 1),     array('type' =&gt; 2),     array('type' =&gt; 2),     array('type' =&gt; 2),     array('type' =&gt; 1),     array('type' =&gt; 2),     array('type' =&gt; 2), );  $processed = array(); foreach ($data as $firstKey =&gt; $firstValue) {      if (in_array($firstKey, $processed)) {         continue;     }      foreach ($data as $secondKey =&gt; $secondValue) {         if ($secondValue['type'] == 2) {             echo $secondValue['type'] . " processed " . "&lt;br/&gt;";             $processed[] = $secondKey; // can I use unset here?         }     }      echo $firstValue['type'] . " processed" . "&lt;br/&gt;"; } </code></pre>  <p><strong>Update</strong> Hopefully with this update I can get my intention out.</p>  <p>Each child has a reference to its parent. All children need to be processed before its parent. Code below should work just fine. you can try it and the output of code below is the desired behavior.  I would like to do it with <code>unset</code> if possible.</p>  <pre><code>$data = array(     array('id' =&gt; 1, 'ref' =&gt; null, 'name' =&gt; 'parent 1'),     array('id' =&gt; 2, 'ref' =&gt; 1, 'name' =&gt; 'child 1'),     array('id' =&gt; 3, 'ref' =&gt; 1, 'name' =&gt; 'child 2'),     array('id' =&gt; 4, 'ref' =&gt; 1, 'name' =&gt; 'child 3'),     array('id' =&gt; 5, 'ref' =&gt; null, 'name' =&gt; 'parent 2'),     array('id' =&gt; 6, 'ref' =&gt; 5, 'name' =&gt; 'child 1'),     array('id' =&gt; 7, 'ref' =&gt; 5, 'name' =&gt; 'child 2'),     array('id' =&gt; 8, 'ref' =&gt; null, 'name' =&gt; 'parent 3'),     array('id' =&gt; 9, 'ref' =&gt; 8, 'name' =&gt; 'child 1'),     array('id' =&gt; 10, 'ref' =&gt; 8, 'name' =&gt; 'child 2'), );  $processed = array(); foreach ($data as $ref =&gt; $firstValue) {      if (in_array($ref, $processed)) {         continue;     }      foreach ($data as $secondKey =&gt; $secondValue) {         if ($secondValue['ref'] == $firstValue['id']) {             echo $secondValue['id'] . "- " . $secondValue['name'] . " processed " . "&lt;br/&gt;";             $processed[] = $secondKey;         }     }       echo $firstValue['id'] . "- " . $firstValue['name'] . " processed" . "&lt;br/&gt;";     echo "&lt;hr/&gt;"; } </code></pre>  <p>Code above output:</p>  <pre><code>2- child 1 processed  3- child 2 processed  4- child 3 processed  1- parent 1 processed 6- child 1 processed  7- child 2 processed  5- parent 2 processed 9- child 1 processed  10- child 2 processed  8- parent 3 processed </code></pre>