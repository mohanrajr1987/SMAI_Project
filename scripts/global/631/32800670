<p>While answering <a href="http://stackoverflow.com/questions/32800221/apply-and-lambdas-in-scala">this question</a> I stumbled upon a behavior I could not explain.</p>  <p>Coming from:</p>  <pre><code>val builder = new StringBuilder("foo bar baz ")  (0 until 4) foreach { builder.append("!") }  builder.toString -&gt; res1: String = foo bar baz ! </code></pre>  <p>The issue seemed clear, the function provided to the foreach was missing the Int argument, so <code>StringBuilder.apply</code> got executed. But that does not really explain why it appends the '!' only once. So I got to experimenting..</p>  <p>I would have expected the following six statements to be equivalent, but the resulting Strings differ:</p>  <pre><code>(0 until 4) foreach { builder.append("!") }               -&gt; res1: String = foo bar baz ! (0 until 4) foreach { builder.append("!")(_) }            -&gt; res1: String = foo bar baz !!!! (0 until 4) foreach { i =&gt; builder.append("!")(i) }       -&gt; res1: String = foo bar baz !!!!  (0 until 4) foreach { builder.append("!").apply }         -&gt; res1: String = foo bar baz ! (0 until 4) foreach { builder.append("!").apply(_) }      -&gt; res1: String = foo bar baz !!!! (0 until 4) foreach { i =&gt; builder.append("!").apply(i) } -&gt; res1: String = foo bar baz !!!! </code></pre>  <p>So the statements are obviously not equivalent. Can somebody explain the difference?</p>