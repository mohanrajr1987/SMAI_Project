<p>I know that <code>Select[]</code> is some sort of Mathematica function that works with lists. However, I need to be able to grab each element by name into a variable so that I can use it just like in a <code>ForEach</code> loop.</p>  <p>Below, you can see that I converted one of my loops into a <code>Select</code>, but I have two more nested ones. Mathematica states that it has full procedural potential, but it does not have the <code>ForEach</code> loop, which makes it much more difficult to operate (do more than one function/action on) each element in some given loop.</p>  <p>Even if this could be converted into a functional list to be printed after, I'd rather have something that can print as it finds applicable graphs. Notice that I break functional purity in areas: random and printing and I would also like to even break out of the loop if an adjacent vertex is found that invalidates the tested one.</p>  <p>The algorithm that I want to do will loop through a large number of times (where it is not necessarily expected to stop before interesting results are reported) where the example has 5 currently. Produce a random graph and find out if it has a vertex with eccentricity 1 more than the radius while not being adjacent to one with eccentricity radius. If it has this property, it is printed.</p>  <pre><code>For[x = 0, x &lt; 5, x = x + 1,  n = RandomInteger[{1, 10}];  m = RandomInteger[{n - 1, n * (n - 1) / 2}];  G = RandomGraph[{n, m}];  R = Radius[G];  V = VertexList[G];  P = Select[V, R + 1 == VertexEccentricity[G, #]];  ForEach [p, P,   N = AdjacencyList[G, p];   test = true;   ForEach[n, N,    If[VertexEccentricity[G, n] == R,      test = false;      ];    ];   If [test == true,    Print[G]    ]   ]  ] </code></pre>