<p>I know it's a very basic question but here is the problem. I'm following the <a href="https://mongodb.github.io/node-mongodb-native/api-articles/nodekoarticle1.html" rel="nofollow">doc</a>.</p>  <p>I'm using mongodb, express and node.</p>  <p>I have a collection users with users data. I want to have a json of all users when I go on the url '/';</p>  <pre><code>var users; MongoClient.connect("mongodb://localhost:27017/test", function(err, db) {   if(err) { return console.dir(err); }   users = db.collection('users'); });   app.get('/', function (req, res) {   users.find({}, function (err, docs) {     res.send(JSON.stringify(docs));   }); }); </code></pre>  <p>but the docs objects contains lot of thing but not all users. How do I get all users?</p>  <pre><code>Readable {   connection: null,   server: null,   disconnectHandler:     { s: { storedOps: [], storeOptions: [Object], topology: [Object] },      length: [Getter] },   bson: {},   ns: 'test.users',   cmd:     { find: 'test.users',      limit: 0,      skip: 0,      query: {},      slaveOk: true,      readPreference: { preference: 'primary', tags: undefined, options: undefined } },   options:     { skip: 0,      limit: 0,      raw: undefined,      hint: null,      timeout: undefined,      slaveOk: true,      readPreference: { preference: 'primary', tags: undefined, options: undefined },      db:        EventEmitter {         domain: null,         _events: {},         _eventsCount: 0,         _maxListeners: undefined,         s: [Object],         serverConfig: [Getter],         bufferMaxEntries: [Getter],         databaseName: [Getter],         options: [Getter],         native_parser: [Getter],         slaveOk: [Getter],         writeConcern: [Getter] },      promiseLibrary: [Function: Promise],      disconnectHandler: { s: [Object], length: [Getter] } },   topology:     EventEmitter {      domain: null,      _events:        { reconnect: [Function],         timeout: [Object],         error: [Object],         close: [Function],         destroy: [Object] },      _eventsCount: 5,      _maxListeners: undefined,      s:        { options: [Object],         callbacks: [Object],         logger: [Object],         state: 'connected',         reconnect: true,         reconnectTries: 30,         reconnectInterval: 1000,         emitError: true,         currentReconnectRetry: 30,         ismaster: [Object],         readPreferenceStrategies: undefined,         authProviders: [Object],         id: 1,         tag: undefined,         disconnectHandler: [Object],         wireProtocolHandler: {},         Cursor: [Object],         bsonInstance: {},         bson: {},         pool: [Object],         serverDetails: [Object] },      name: [Getter],      bson: [Getter],      wireProtocolHandler: [Getter],      id: [Getter] },   cursorState:     { cursorId: null,      cmd:        { find: 'test.users',         limit: 0,         skip: 0,         query: {},         slaveOk: true,         readPreference: [Object] },      documents: [],      cursorIndex: 0,      dead: false,      killed: false,      init: false,      notified: false,      limit: 0,      skip: 0,      batchSize: 1000,      currentLimit: 0,      transforms: undefined },   callbacks: null,   logger: { className: 'Cursor' },   _readableState:     ReadableState {      objectMode: true,      highWaterMark: 16,      buffer: [],      length: 0,      pipes: null,      pipesCount: 0,      flowing: null,      ended: false,      endEmitted: false,      reading: false,      sync: true,      needReadable: false,      emittedReadable: false,      readableListening: false,      defaultEncoding: 'utf8',      ranOut: false,      awaitDrain: 0,      readingMore: false,      decoder: null,      encoding: null },   readable: true,   domain: null,   _events: {},   _eventsCount: 0,   _maxListeners: undefined,   s:     { numberOfRetries: 5,      tailableRetryInterval: 500,      currentNumberOfRetries: 5,      state: 0,      streamOptions: {},      bson: {},      ns: 'test.users',      cmd:        { find: 'test.users',         limit: 0,         skip: 0,         query: {},         slaveOk: true,         readPreference: [Object] },      options:        { skip: 0,         limit: 0,         raw: undefined,         hint: null,         timeout: undefined,         slaveOk: true,         readPreference: [Object],         db: [Object],         promiseLibrary: [Function: Promise],         disconnectHandler: [Object] },      topology:        EventEmitter {         domain: null,         _events: [Object],         _eventsCount: 5,         _maxListeners: undefined,         s: [Object],         name: [Getter],         bson: [Getter],         wireProtocolHandler: [Getter],         id: [Getter] },      topologyOptions:        { socketOptions: {},         auto_reconnect: true,         host: 'localhost',         port: 27017,         cursorFactory: [Object],         reconnect: true,         emitError: true,         size: 5,         disconnectHandler: [Object],         bson: {},         messageHandler: [Function],         wireProtocolHandler: {} },      promiseLibrary: [Function: Promise],      currentDoc: null },   timeout: false,   sortValue: undefined,   readPreference: { preference: 'primary', tags: undefined, options: undefined } } </code></pre>