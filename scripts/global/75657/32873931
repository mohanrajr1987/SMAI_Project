<p>I'm currently learning about Ember's new data-down, actions-up paradigm for components. As discussed <a href="http://emberjs.com/blog/2015/05/10/run-up-to-two-oh.html" rel="nofollow">here</a>, however, sometimes I want to allow the child component to modify the property explicitly. This is where the <em>mut</em> helper comes in: it creates a wrapper for the passed in value, containing a (readonly?) value and a function to update it. The example on that page is for a simple button which increments a counter.</p>  <p>How does this concept work if I'm using the input helper inside a component? For example, let's say I'm building a form which consists of a bunch of special form components:</p>  <pre><code>// templates/index.hbs &lt;form&gt;     {{form-control value=(mut model.firstValue)}}     {{form-control value=(mut model.secondValue)}} &lt;/form&gt; </code></pre>  <p>If the <em>form-control</em> component just has the task of wrapping the input control, how do we use the passed-in <em>mut</em> object correctly? Is it something like?</p>  <pre><code>// templates/components/form-control.hbs {{input type="text" value=attrs.value.value input=attrs.value.update}} </code></pre>  <p>My thinking here: the value of the input element is set to the value of the <em>mut</em> object, and whenever the input value changes (HTML5 input event) the update method of the <em>mut</em> object is called to set the model property to the new value. It seems there's something wrong with my thinking though, because this doesn't work. What is the "standard" way of doing this now? I'm using Ember 1.13.8.</p>