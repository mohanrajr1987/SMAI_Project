<p>I am attempting to create a SVG image of a pie slice. I want to place slice within a tooltip to show it as an object within the legend. What would be the best way to go about it in D3? There would be words around the arcs, it is split into three slices from the center and one slice would be visible.</p>  <pre><code>`    profLegendData = [     {"label": "A", "value": 10},      {"label": "B", "value": 10},      {"label": "C", "value": 10},      {"label": "D", "value": 10},      {"label": "E", "value": 10},      {"label": "F", "value": 10},      {"label": "G", "value": 10},      {"label": "H", "value": 10},      {"label": "I", "value": 10},      {"label": "J", "value": 10}];  var legWidth = width/2,     legHeight = legWidth/2,     legRadius = legWidth / 2.00,     legInnerRadius = 0.35 * legRadius;  var pie = d3.layout.pie() .value(function(d) { return 1; });  //This variable fills in each slice of the aster plot var legArc = d3.svg.arc() .innerRadius(legInnerRadius) .outerRadius(function (d) {     return (legRadius - legInnerRadius) * (1/3) + legInnerRadius; });  //This variable determines the outline of each slice of the aster plot var legOutlineArc = d3.svg.arc() .innerRadius(legInnerRadius) .outerRadius(legRadius);  //This variable determines the outline of each slice of the aster plot var legCurrentArc = d3.svg.arc() .innerRadius(legInnerRadius) .outerRadius(function(d) {     return (legRadius - legInnerRadius) * (2/3) + legInnerRadius; });      var legSvg = d3.select("#profinfo-legend").append("svg") .attr("width", legWidth) .attr("height", legHeight * 1.05) .call(responsivefy) .append("g") .attr("transform", "translate(" + legWidth/2 + "," + -legWidth/10 + ")");  var legOuterPath = legSvg.selectAll(".outlineArc") .data(pie(profLegendData)) .enter().append("svg:path") .attr("fill", "white") .attr("stroke",function(d){if(d.data.label == "E"){           return "black";       } else {           return "none";           }}) .attr("class", "outlineArc") .attr("d", legOutlineArc);  //This is the current path var legCurrentPath = legSvg.selectAll(".currentArc") .data(pie(profLegendData)) .enter().append("svg:path") .attr("fill","white") .attr("stroke",function(d){if(d.data.label == "E"){           return "black";       } else {           return "none";           }}) .attr("class", legCurrentArc) .attr("d", legCurrentArc)  //This is the target path var legPath = legSvg.selectAll(".solidArc") .data(pie(profLegendData)) .enter().append("svg:path") .attr("fill", "white") .attr("class", "solidArc") .attr("stroke",function(d){if(d.data.label == "E"){           return "black";       } else {           return "none";           }}) .attr("d", legArc)  var pathG = legSvg.selectAll("outlinePath")     .data(pie(profLegendData))     .enter().append("g")     .attr("class", "arc");  pathG.append("text")   .attr("transform", function(d) {     return "translate(" + legArc.centroid(d) + ")";   })   .attr("dy", ".35em")   .style("text-anchor", "middle")   .attr("fill", function(d){if(d.data.label == "E"){           return "black";       } else {           return "none";           }})   .text("Foundational")   .style("font-size", "0.75em");  var cpathG = legSvg.selectAll("outlinePath")     .data(pie(profLegendData))     .enter().append("g")     .attr("class", "arc")     .attr("d", legCurrentArc);  cpathG.append("text")   .attr("transform", function(d) {     return "translate(" + legCurrentArc.centroid(d) + ")";   })   .attr("dy", "2em")   .style("text-anchor", "middle")   .attr("fill", function(d){if(d.data.label == "E"){           return "#black";       } else {           return "none";           }})   .text("Developing")   .style("font-size", "0.75em");  var opathG = legSvg.selectAll("outlinePath")     .data(pie(profLegendData))     .enter().append("g")     .attr("class", "arc")     .attr("d", legOutlineArc);  opathG.append("text")   .attr("transform", function(d) {     return "translate(" + legOutlineArc.centroid(d) + ")";   })   .attr("dy", "3em")   .style("text-anchor", "middle")   .attr("fill", function(d){if(d.data.label == "E"){           return "#black";       } else {           return "none";           }})   .text("Mastery")   .style("font-size", "0.75em"); </code></pre>  <p>`</p>