<p>Generally in Windows, system-level environment variables are superceded by user-level environment variables with the same name. The PATH environment variable is however a special case. The user-level PATH environment variable is appended to the end of the system-level environment variable.</p>  <p>I use the following C# code to get the process-level environment variable values, taking this special case into account. Note that I can't use the EnvironmentVariableTarget.Process option because this won't take into account any changes since my application started running.</p>  <pre><code>public static Dictionary&lt;string, string&gt; GetEnvironmentVariables() {      var environmentVariables = new Dictionary&lt;string, string&gt;();      //get machine environment variables     IDictionary machineEnvironmentVariables = Environment.GetEnvironmentVariables(EnvironmentVariableTarget.Machine);     foreach (DictionaryEntry envVar in machineEnvironmentVariables)     {         string key = envVar.Key.ToString()         environmentVariables[key] = envVar.Value.ToString();     }      //overwrite with any user environment variables     IDictionary userEnvironmentVariables = Environment.GetEnvironmentVariables(EnvironmentVariableTarget.User);     foreach (DictionaryEntry envVar in userEnvironmentVariables)     {         string key = envVar.Key.ToString();         if (key.ToLower() == "path" &amp;&amp; environmentVariables.ContainsKey(key))             environmentVariables[key] += envVar.Value.ToString();         else             environmentVariables[key] = envVar.Value.ToString();     }     return environmentVariables;  } </code></pre>  <p>My question is: are there any other special cases which need to be taken into account? Please include a link to documentation backing up your answer.</p>