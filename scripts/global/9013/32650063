<p>I have a c# application which spawns a new Process in which a environment variable is set. In the c# application, during the process run, I want to access the variable. </p>  <p>Source code looks like that:</p>  <pre><code>        Process p = new Process();         p.StartInfo.FileName = "cmd.exe";         p.StartInfo.Arguments = "/c " + "\"" + "set MYSPECIALENV=someContent &amp; set &amp; pause" + "\"";         p.StartInfo.CreateNoWindow = true;         p.StartInfo.UseShellExecute = true;          Console.WriteLine("Starting process");         p.Start();         ICollection envVarsSpawnedProcess = p.StartInfo.EnvironmentVariables.Keys;          if (envVarsSpawnedProcess.Cast&lt;string&gt;().Contains("MYSPECIALENV"))         {             Console.WriteLine("Found! :)");         }         else         {             Console.WriteLine("Not found :(");          }          p.WaitForExit(); </code></pre>  <p>This example is somehow simplified since in my real application I execute a command script which set a specific environment dynamically, but this code snippet brings it to the minimum.</p>  <p>The point is that I need to access the environment variable, which was defined in the spawned process, and I need to access it from the c# application.</p>  <p>However, the list of environment variables which I get from the ProcessStartInfo object seems to not reflect the newly created environment variable "mySpecialEnv".</p>  <p>My first doubt was that maybe ProcessStartInfo does not really access the Environment Code Block of the process, but only gets the information from the registry. Can someone confirm this? I googled this quite a long time, but did not find a confirmation...</p>  <p>My second doubt was that I run into race conditions (e.g. I try to access the environment variable too early), but even with implemented polling mechanism I get no better result.</p>  <p>Is this somehow possible to realize with pure .net? 1) Spawn process which creates a new environment variable 2) Access/read this environment variable from the c# application</p>  <p>Thank you very much in advance!</p>