<p>I'm learning how to perform raytracing using cuda.</p>  <p>I have a parent class:</p>  <pre><code>class IGeometricObject { public:     __CUDA__ IGeometricObject() = default;     __CUDA__ virtual ~IGeometricObject() = default;     __CUDA__ IGeometricObject(const IGeometricObject&amp; copy) = default;     __CUDA__ virtual bool hit(Ray&amp; ray, float&amp; tmin, vec3&amp; color) = 0; }; </code></pre>  <p>And a child:</p>  <pre><code>class Sphere : public IGeometricObject { public:     vec3 center;     vec3 color;     float radius;      __CUDA__ Sphere(vec3 p, float rad, vec3 c);     __CUDA__ ~Sphere();     __CUDA__ Sphere(const Sphere&amp; copy) = default;      __CUDA__ bool hit(Ray&amp; ray, float&amp; tmin, vec3&amp; color) override; }; </code></pre>  <p>The "CUDA" macro is equal to "host device".</p>  <p>My kernel:</p>  <pre><code>... IGeometricObject* obj = ...; bool res = obj-&gt;hit(ray, ct, cc); ... </code></pre>  <p>Calling "obj->hit(ray, ct, cc)" leads to "an illegal memory access..." kernel error.</p>  <p>What am I doing wrong ?</p>