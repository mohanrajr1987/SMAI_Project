<p>I have a seperate class where I keep my connectivity.</p>  <pre><code>public class ConnectionManager { private static String url = "jdbc:mysql://localhost/finance";     private static String driverName = "com.mysql.jdbc.Driver";    private static String username = "root";    private static String password = ""; private static Connection con;  public static Connection getConnection() {     try {         Class.forName(driverName);         try {             con = DriverManager.getConnection(url, username, password);         } catch (SQLException ex) {                             System.out.println("Failed to create the database connection.");          }     } catch (ClassNotFoundException ex) {                     System.out.println("Driver not found.");      }     return con; } </code></pre>  <p>}</p>  <p>In the other "main" class I have:</p>  <pre><code>public class TableWithBottomLine extends JPanel implements TableModelListener {  private Connection connection = null; private Statement stmt = null; private PreparedStatement prepStmt = null; private ResultSet resSet = null; </code></pre>  <p>In the same "main" class in several places I call <code>connection = ConnectionManager.getConnection();</code> and do some query related actions. Now I wonder, is it better to make these instance variables as static? For the sake of performance/security. Would be very happy if someone could share their insight.</p>