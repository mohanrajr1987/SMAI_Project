<p>My below is to create connection pooling with a server and but my below code is working fine some times and some times gives below error</p>  <p>Exception is : Already connected in java</p>  <p>error trace:</p>  <pre><code>Exception in thread "main" javax.ws.rs.ProcessingException: Already connected     at org.glassfish.jersey.client.ClientRuntime.invoke(ClientRuntime.java:233)     at org.glassfish.jersey.client.JerseyInvocation$1.call(JerseyInvocation.java:655)     at org.glassfish.jersey.client.JerseyInvocation$1.call(JerseyInvocation.java:652)     at org.glassfish.jersey.internal.Errors.process(Errors.java:315)     at org.glassfish.jersey.internal.Errors.process(Errors.java:297)     at org.glassfish.jersey.internal.Errors.process(Errors.java:228)     at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:424)     at org.glassfish.jersey.client.JerseyInvocation.invoke(JerseyInvocation.java:652)     at org.glassfish.jersey.client.JerseyInvocation$Builder.method(JerseyInvocation.java:412)     at org.glassfish.jersey.client.JerseyInvocation$Builder.post(JerseyInvocation.java:321) </code></pre>  <p>my java code:</p>  <pre><code>SslConfigurator sslConfig = SslConfigurator.newInstance()             .securityProtocol("TLS")             .keyStoreFile("/path")             .keyStorePassword("passw")             .keyStoreType("JKS")             .trustStoreFile("/path");      SSLContext sslCtx = sslConfig.createSSLContext(); HostnameVerifier defaultHostnameVerifier = new DefaultHostnameVerifier();         LayeredConnectionSocketFactory sslSocketFactory = new SSLConnectionSocketFactory(sslConfig.createSSLContext(),         defaultHostnameVerifier);         final Registry&lt;ConnectionSocketFactory&gt; registry = RegistryBuilder.&lt;ConnectionSocketFactory&gt; create()         .register("http", PlainConnectionSocketFactory.getSocketFactory())         .register("https", sslSocketFactory)         .build();          connectionManager = new PoolingHttpClientConnectionManager(registry);         connectionManager.setMaxTotal(100);         connectionManager.setDefaultMaxPerRoute(10);         ClientConfig clientConfig = new ClientConfig();         clientConfig.property(ApacheClientProperties.CONNECTION_MANAGER,                 connectionManager);         client = ClientBuilder.newBuilder().withConfig(clientConfig).build();          Response response = client.target(target).path(path).request(media).post(media); </code></pre>