<p>I have 3 Layers and 3 Group : Small and 2 Big . On click to any Wedge of Smaller Circle Group , The respective bigger Circle is shown. I Have made changes to resize the canvas Groups and its wedges. But its only getting reflected for the inner Circle. JS fiddle. : <a href="http://jsfiddle.net/vtankaria/6oy5q5s5/" rel="nofollow">http://jsfiddle.net/vtankaria/6oy5q5s5/</a> The outer Circle and Its Wedge radius is assigned and visible in DOM of Outer circle object, But browser doesn't behave with that value. For inner circle the value gets assigned and is reflected as well in behavior. For outer circle Radius given while creating the circle is 300 while we resize the radius gets calculated and is assigned. Check the console output in Image attached. The value appears to be 262. Any reason Why is the browser not able to behave that way ?  <a href="http://i.stack.imgur.com/xK0jH.png" rel="nofollow"><img src="http://i.stack.imgur.com/xK0jH.png" alt="enter image description here"></a></p>  <pre><code>var angularVelocity = 6; var angularVelocities = []; var lastRotations = 0; var controlled = false; var numWedges = 12; var angularFriction = 0.2; var stage;//target, activeWedge, stage, layer, wheel, pointer; var layerArr = []; var wheelArr = []; var animateArr = []; var stageArr = []; var activeWedge = []; var innerWedge = []; var outerWedge = []; var outerNewsWedge = []; var selectedInnerValue = '';  //addition by vivek var wheelText       = ["Meet","News","Cities","Events","Food","Travel"]; var DarkColor       = ["#615F5E","#142A48","#62605F","#586979","#651B2E","#142A48"]; var LightColor      = ["#9A9796","#2C4366","#9A9796","#9DB2C6","#A63855","#2C4366"];  var OutwheelText    = ["London","Paris","Lyon"]; var OutDarkColor    = ["#62605F","#142A48","#651B2E"]; var OutLightColor   = ["#9A9796","#2C4366","#A63855"];  var cityLatLon      = ["51.50015200^:^-0.12623600","48.856667567087^:^2.3509869708115","45.7640430^:^4.83565900"]; var cityIDs     = [1,8,27]; var cityAlias       = ["london","paris","lyon"];  var newsArray       = ["The local","France 24","20 minutes","Daily Mail","The Independent"]; var NewsDarkColor   = ["#62605F","#142A48","#651B2E","#62605F","#142A48"]; var NewsLightColor  = ["#9A9796","#2C4366","#A63855","#9A9796","#2C4366"]; function getAverageAngularVelocity() {     var total = 0;     var len = angularVelocities.length;      if(len === 0) {         return 0;     }      for(var n = 0; n &lt; len; n++) {         total += angularVelocities[n];     }      return total / len; }  function purifyColor(color) {     var randIndex = Math.round(Math.random() * 3);     color[randIndex] = 0;     return color; } function getRandomColor() {     var r = 100 + Math.round(Math.random() * 55);     var g = 100 + Math.round(Math.random() * 55);     var b = 100 + Math.round(Math.random() * 55);     var color = [r, g, b];     color = purifyColor(color);     color = purifyColor(color);      return color; } function bind(wheel) {     wheel.on('mousedown', function(evt) {         angularVelocity = 0;         controlled = true;         target = evt.targetNode;     });     // add listeners to container     document.body.addEventListener('mouseup', function() {         controlled = false;         angularVelocity = getAverageAngularVelocity() * 5;          if(angularVelocity &gt; 20) {         angularVelocity = 20;         }         else if(angularVelocity &lt; -20) {         angularVelocity = -20;         }          angularVelocities = [];     }, false);      document.body.addEventListener('mousemove', function(evt) {         var mousePos = stage.getMousePosition();         if(controlled &amp;&amp; mousePos &amp;&amp; target) {         var x = mousePos.x - wheel.getX();         var y = mousePos.y - wheel.getY();         var atan = Math.atan(y / x);         var rotation = x &gt;= 0 ? atan : atan + Math.PI;         var targetGroup = target.getParent();          wheel.setRotation(rotation - targetGroup.startRotation - (target.getAngle() / 2));         }     }, false); } function getRandomReward(n,whichWheel) {     var fromText = OutwheelText;     if(numWedges != 9){         if(whichWheel == 1){               if(n &gt; 4){                   n = n%5;               }               fromText = newsArray;         }else {               if(n &gt; 5){                   n = n%6;               }               fromText = wheelText;         }     }else{         if(whichWheel == 1){               if(n &gt; 4){                   n = n%5;               }               fromText = newsArray;         }else{               if(n &gt; 2){                   n = n%3;               }               fromText = OutwheelText;         }     }     return fromText[n]; //         var mainDigit = Math.round(Math.random() * 9); //         return mainDigit + '\n0\n0';     }  var bigWidth = [250,0.25,150,30]; // radius,rotation,xval,yval var smallWidth = [150,0.25,70,10];// radius,rotation,xval,yval  var outerCircleWidth = [300,0.3,180,50]; var outerNewsCircleWidth = [300,0.25,160,25];  function addWedge(n,wheel,layer,whichWheel) {     var rotationVal = bigWidth[1];     var xVal = bigWidth[2];     var yVal = bigWidth[3];     var fontSizeVal = 18;     if(whichWheel == 0 || whichWheel == 1){ //outer         if(whichWheel != 1){             fontSizeVal = 25;             rotationVal = outerCircleWidth[1];             xVal = outerCircleWidth[2];             yVal = outerCircleWidth[3];         }else{             fontSizeVal = 18;             rotationVal = outerNewsCircleWidth[1];             xVal = outerNewsCircleWidth[2];             yVal = outerNewsCircleWidth[3];         }      }     var s = getRandomColor();     var reward = getRandomReward(n,whichWheel);     var r = s[0];     var g = s[1];     var b = s[2];     var angle = 2 * Math.PI / numWedges;     if(numWedges == 12){         var m = n;         if(m &gt; 5){             m = m%6;         }          var endColor = LightColor[m];         //         r += 100;         //         g += 100;         //         b += 100;          var startColor = DarkColor[m];     }else{         if(whichWheel == 1){             var m = n;             if(m &gt; 4){                 m = m%5;             }             var endColor = NewsDarkColor[m];             var startColor = NewsLightColor[m];         }else{             var m = n;             if(m &gt; 2){                 m = m%3;             }             var endColor = OutLightColor[m];             var startColor = OutDarkColor[m];         }      }     var wedge = new Kinetic.Group({         rotation: 2 * n * Math.PI / numWedges,         name:reward.toLowerCase(),     });     var radiusVal = bigWidth[0];     if(numWedges == 9 || numWedges == 15){         radiusVal = outerCircleWidth[0];     }      var wedgeBackground = new Kinetic.Wedge({         radius: radiusVal,         angle: angle, //      fillPatternImage:image, //      fillPatternX:10, //      fillPatternY:10,         fillRadialGradientStartPoint: 0,         fillRadialGradientStartRadius: 0,         fillRadialGradientEndPoint: 1,         fillRadialGradientEndRadius: 10,         fillRadialGradientColorStops: [0, startColor, 1, endColor],         fill: '#64e9f8',         fillPriority: 'radial-gradient',         stroke: '#ccc',         strokeWidth: 4     });      wedge.add(wedgeBackground);      var text = new Kinetic.Text({         text: n,//reward,         fontFamily: '"SourceSansPro-Regular"',         fontSize: fontSizeVal,         fill: 'white',         align: 'center', //      stroke: '', //      strokeWidth: 1      });      // cache text as an image to improve performance     text.toImage({         width: text.getWidth(),         height: text.getHeight(),         callback: function(img) {             var cachedText = new Kinetic.Image({                 image: img,                 listening: false,                 rotation: rotationVal,//(Math.PI + angle) / 2,                 x: xVal,                 y: yVal,             });              wedge.add(cachedText);             layer.draw();         }     });      wedge.startRotation = wedge.getRotation();      wedge.on("click",function(){         if(this.parent.attrs.id == "wheel-2"){             $(".poi_list").removeClass("forfood").html("");             $(".train_logo").hide();             $(".food_menu").hide();             for(iw in innerWedge){                 if(innerWedge[iw].children instanceof Array){                     for(e in innerWedge[iw].children){                         if(e == 0 &amp;&amp; innerWedge[iw].children[e].attrs.radius){                             if(this.attrs.name != "food"){                                  innerWedge[iw].children[e].attrs.radius = smallWidth[0];                              }else{                                 innerWedge[iw].children[e].attrs.radius = bigWidth[0];                             }                         }                         if(e==1 &amp;&amp; innerWedge[iw].children[e].attrs.x){                             if(this.attrs.name != "food"){                                  innerWedge[iw].children[e].attrs.x = smallWidth[2];                                 innerWedge[iw].children[e].attrs.y = smallWidth[3];                              }else{                                 innerWedge[iw].children[e].attrs.radius = bigWidth[0];                                 innerWedge[iw].children[e].attrs.x = bigWidth[2];                                 innerWedge[iw].children[e].attrs.y = bigWidth[3];                             }                         }                     }                 }             }              if(this.attrs.name !="cities"){                 $(".headBox").hide();                 $(".pagination").hide();             }             if(this.attrs.name != "food"){                  if(this.attrs.name != "news"){                     layerArr[0].show();                     layerArr[1].hide();                 }else{                     layerArr[0].hide();                     layerArr[1].show();                 }                 selectedInnerValue=this.attrs.name;                  if(this.attrs.name == "meet"){                     $(".poi_list").html('&lt;div class="connect_logo"&gt;&amp;nbsp;&lt;/div&gt;');                 }else{                     $(".connect_logo").remove();                 }             }else{                  if(this.attrs.name=='food'){                     //window.location = "http://coffee.wcities.com/food";                 }else if(this.attrs.name=='news'){                      layerArr[0].hide();                     layerArr[1].hide();                 }             }         }      });     wheel.add(wedge);     if(numWedges == 9 ){         outerWedge.push(wedge);     }else if(numWedges == 12){         innerWedge.push(wedge);     }else if(numWedges == 15){         outerNewsWedge.push(wedge);     } } function animate(frame,whichStage) {      // handle wheel spin     var angularVelocityChange = angularVelocity * wheelArr[whichStage].timeDiff * (1 - angularFriction) / 1000;     angularVelocity -= angularVelocityChange;     if(controlled) { //      if(angularVelocities.length &gt; 10) { //      angularVelocities.shift(); //      }          angularVelocities.push((wheelArr[whichStage].getRotation() - lastRotation) * 1000 / wheelArr[whichStage].timeDiff);     }     else {     //           wheel.rotate(frame.timeDiff * angularVelocity / 1000);     }     lastRotation = wheelArr[whichStage].getRotation();  } function loadWheel(counting){     var layer = new Kinetic.Layer({         hitGraphEnabled:false,     });     var wheelname = "";     if(counting == 0 || counting == 1){         numWedges = 9;         wheelname = "outerwheel";         if(counting == 1){             numWedges = 15;         }     }else{         numWedges = 12;         wheelname = "innerwheel";     }      var wheel = new Kinetic.Group({         x: 0,         y: ($(window).height()/2),         name:wheelname,         id:"wheel-"+counting,     });     wheel.resize = function(sF){         console.log("resize called");     };     for(var n = 0; n &lt; numWedges; n++) {         addWedge(n,wheel,layer,counting);     }      layer.add(wheel);     //         layer.add(pointer);     stage.add(layer);      //bind events     bind(wheel);     layerArr.push(layer);     wheelArr.push(wheel);     stageArr.push(stage); } function init(whichContainer,conwidth,conHeight,numWedgesCount) {     numWedges = numWedgesCount;      stage = new Kinetic.Stage({         container: whichContainer,         width: conwidth,         height: conHeight     });      for(var counting = 0;counting &lt; 3;counting++){         loadWheel(counting);         if(counting == 0 || counting == 1){ //          layer[counting].hide();         }else{             animateArr[counting] = new Kinetic.Animation(animate(wheelArr[counting],counting), layerArr[counting]);             animateArr[counting].start();             setTimeout(function() {                 layerArr[0].hide();                 layerArr[1].hide();             }, 100);             var image = new Image();               console.log(image);             image.onload = function(){                 var centerShape = new Kinetic.Circle({                     x: 0,                     y: ($(window).height()/2),                     radius: 25,                     stroke: '#ccc',                     strokeWidth: 4,                     opacity: 1,                      fill:"#fff",                 });                 layerArr[counting+1] = new Kinetic.Layer({                     hitGraphEnabled:false,                 });                 layerArr[counting+1].add(centerShape);                 stage.add(layerArr[counting+1]);                 layerArr[counting+1].on("click",function(){                     layerArr[0].hide();                     layerArr[1].hide();                     resizeInnerWedge();                 });             }             image.src = "http://coffee.wcities.com/images/burger-bt.png";          }         // wait one second and then spin the wheel     }  } //init("container ID ","Width","Height","Wedge Count"); // init("Outcontainer",600,600,3); // call init var canvasheight = $(window).height(); init("container",350,canvasheight,12); // call 197 // layerArr[0].show(); $.fn.center = function () {     this.css("position","absolute");     this.css("top", Math.max(0, (($(window).height() - $(this).outerHeight()) / 2) +                                                  $(window).scrollTop()) + "px");     this.css("left", Math.max(0, (($(window).width() - $(this).outerWidth()) / 2) +                                                  $(window).scrollLeft()) + "px");     return this; } function checkOuterVisible(){     return (layerArr[0].attrs.visible || layerArr[1].attrs.visible); } function resizeInnerWedge(){ //  layerArr[0].hide(); //  layerArr[1].hide();     var isOuterVisible = checkOuterVisible();     var whatWidth = bigWidth;     if(isOuterVisible){         whatWidth = smallWidth;     }     for(iw in innerWedge){         if(innerWedge[iw].children instanceof Array){             for(e in innerWedge[iw].children){                 if(innerWedge[iw].children[e].attrs.radius){                     innerWedge[iw].children[e].attrs.radius = whatWidth[0];                 }                 if(e == 1){                     innerWedge[iw].children[e].attrs.x = whatWidth[2];                     innerWedge[iw].children[e].attrs.y = whatWidth[3];                 }             }          }     } // console.log(outerWedge);     for(iw in outerWedge){ console.log(outerWedge[iw]);         if(outerWedge[iw].children instanceof Array){             for(e in outerWedge[iw].children){                 if(outerWedge[iw].children[e].attrs.radius){ console.log(outerWedge[iw].children[e].attrs.radius);                     outerWedge[iw].children[e].attrs.radius = outerCircleWidth[0];                 }                 if(e == 1){                     outerWedge[iw].children[e].attrs.x = outerCircleWidth[2];                     outerWedge[iw].children[e].attrs.y = outerCircleWidth[3];                 }             }          }     }     for(iw in outerNewsWedge){         if(outerNewsWedge[iw].children instanceof Array){             for(e in outerNewsWedge[iw].children){                 if(outerNewsWedge[iw].children[e].attrs.radius){                     outerNewsWedge[iw].children[e].attrs.radius = outerNewsCircleWidth[0];                 }                 if(e == 1){                     outerNewsWedge[iw].children[e].attrs.x = outerNewsCircleWidth[2];                     outerNewsWedge[iw].children[e].attrs.y = outerNewsCircleWidth[3];                 }             }          }     } } $(document).ready(function(){     //alert($(window).width()+'/'+$('canvas').width());     //alert($(window).height()+'/'+$('canvas').height()); }); $(window).resize(function(){      //alert($(window).width()+'/'+$('canvas').width());     //alert($(window).height()+'/'+$('canvas').height());     var w = parseInt($(window).width());      var canvasW = 350;     if(w &lt; 1400){         canvasW = parseInt(w/4);         var smallRadiusInnerCircle = parseInt(canvasW*3/7);         var bigRadiusInnerCircle = parseInt(canvasW*5/7);         var radiusOuterCircle = parseInt(canvasW*6/7);  console.log("smallRadiusInnerCircle--"+smallRadiusInnerCircle); console.log("bigRadiusInnerCircle--"+bigRadiusInnerCircle); console.log("radiusOuterCircle--"+radiusOuterCircle);          bigWidth[0] = bigRadiusInnerCircle;         smallWidth[0] = smallRadiusInnerCircle;          outerCircleWidth[0] = radiusOuterCircle;         outerNewsCircleWidth[0] = radiusOuterCircle;          resizeInnerWedge(); // THIS IS CALLED TO RESIZE Circle Wedges     }     //w = Math.round(w);     //var h = parseInt(w)*2;     //h = Math.round(h);     //console.log("W==="+w);     //console.log("H==="+h);     //$('canvas').width(w);     //$('canvas').height(h);     //$('.mainDiv').remove();     //$('&lt;div class="mainDiv"&gt;&lt;div id="container"&gt;&lt;/div&gt;&lt;/div&gt;').insertBefore('.headBox');     //init("container",w,h,12);     $('.connect_logo').center();   }); $(document).ready(function(){ console.log("-- Window -- ");     console.log($(window).width());     console.log($(window).height());  }); /* //check if mouse is in circle function intersects(x, y, cx, cy, r) {     var dx = x-cx     var dy = y-cy     return dx*dx+dy*dy &lt;= r*r }*/ </code></pre>