<p>I'm making a project to help learning <a href="https://github.com/hlucasfranca/graphe/" rel="nofollow">graph theory</a> and I'm having problems in the separation of concerns of the directives which uses d3.js to draw the SVG on the screen. The following directive code handles the svg drawing on the screen(summarized for brevity).</p>  <pre><code>angular.module('graphe.directives') .directive('gpStage', function () {     'use strict';     return {         templateUrl: 'scripts/directives/gpStage.html',         restrict: 'E',         replace: true,         require: '^gpContainer',         controller: 'gpStageCtrl',         link: function postLink(scope, element, attrs, gpContainerCtrl) {                             var selectedNode = null,                 selectedLink = null,                 nodeGroup;              // init svg             var outer = d3.select(element[0]).append('svg:svg')                  // a lot of code....              outer.append('defs').append('marker')                 // a lot of code....              var xLines, yLines;             var gridSize = 20;             var gridWidth = 2000;             var gridHeight = 2000;              var vis = outer.append('svg:g')                 // a lot of code....                 ;              drawGrid();              vis.append('svg:rect')                 // a lot of code....              // init force layout             var force = d3.layout.force()                 .size([scope.width, scope.height])                 .nodes(scope.graph.nodeList)                 .links(scope.graph.linkList)                 .on('tick', tick);              // get layout properties             var nodes = force.nodes(),                 links = force.links(),                 // group all links                 link = vis.append('g').attr('id','link-group').selectAll('.link'),                 node = vis.append('g').selectAll('.node');              redraw();              function tick() {                // a lot of code....             }              function rescale() {                 // a lot of code....             }              // redraw force layout             function redraw() {                 outer                     .attr('width' , scope.stageWidth)                     .attr('height', scope.stageHeight);                  link = link.data(links);                  link.enter().append('line');                                    link.exit().remove();                 node = node.data(nodes);                  nodeGroup = node.select('g')                     .attr('id', function(d,i){ return 'node-' + i; });                  node.select('.node circle')                     .attr('fill', function (d) { return d.color; } );                  node.select('.node text')                     .text(function(d){ return d.label; });                  nodeGroup = node.enter()                     .append('g')                     .attr('id', function(d,i){ return 'node-' + i; });                  nodeGroup.attr('class', 'node').append('circle');                  node.exit().remove();                                      function dragMove (d, i) {} // a lot of code....                  function dragStart(d,i){ } // a lot of code....                  function dragEnd(d,i){ }                  var nodeDrag = d3.behavior.drag()                     .on('drag', dragMove)                     .on("dragstart", dragStart)                     .on("dragend", dragEnd);                  nodeGroup.call(nodeDrag);                 nodeGroup.on('click',mousedownnode);                  function mousedownnode(d) { }                 node.exit().remove();                 force.start();             }              function collide(alpha) { }              scope.$watch('stageWidth', redraw);             scope.$watch('stageHeight', redraw);             scope.$watch('graph', redraw, true);             scope.$watch('currentOption', function () {});         }     }; }) // For communication with other directives .controller('gpStageCtrl',function ($scope) {              $scope.selectNode = selectNode;     $scope.selectLink = selectLink;     $scope.deselectLink = deselectLink;     $scope.deselectNode = deselectNode;         function selectNode (id) { }     function selectLink (source, target){ }     function deselectLink (source, target){ }     function deselectNode (id){ } }); </code></pre>  <p>Is there any better way to separate the concerns of d3.js SVG drawing?</p>  <p>Edit: <a href="http://hlucasfranca.github.io/tests/#/graph" rel="nofollow">The running code.</a></p>