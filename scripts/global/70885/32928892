<p>I am making a scatterplot, and pulling in an image fill for each circle on the plot. The problem is that the images are PNG's with transparent backgrounds. This means my overlapping circles show through each other:</p>  <p>Seen here - <a href="http://i.stack.imgur.com/bphon.png" rel="nofollow">http://i.stack.imgur.com/bphon.png</a></p>  <p>I have tried setting a background colour with the CSS, but it seems to be completely overwritten by the .style("fill") in the JS. And I am looking to pull in 30ish images, so I don't want to have to save them all to be able to load the images with my CSS.</p>  <p>So, my question is, is there a way to put a white background behind my PNGs, while pulling those PNGs from URL's contained in my dataset?</p>  <p>Thanks for the help</p>  <p><div class="snippet" data-lang="js" data-hide="false"> <div class="snippet-code"> <pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;&lt;/title&gt; &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js"&gt;&lt;/script&gt; &lt;style type="text/css"&gt;  .axis path, .axis line {     fill: none;     stroke: black;     shape-rendering: crispEdges; }  .axis-text {     font-family: sans-serif;     font-size: 11px;     background-color: white;     font-weight: bold; }  .teamcircle {     background-color: white;    }  &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; &lt;input type="button" id="playerbtn" value="See Player View"&gt; &lt;input type="button" id="teambtn" value="See Team View"&gt; &lt;/div&gt;  &lt;div id="data"&gt;     &lt;div id="player-circles"&gt;     &lt;/div&gt; &lt;/div&gt;  &lt;script type="text/javascript"&gt;  //Width and height var margin = {top: 50, right: 20, bottom: 30, left: 40}; var w = 960 - margin.left - margin.right; var h = 500 - margin.top - margin.bottom;  //Create scale functions var xScale = d3.scale.linear()     .range([0, w]);  var yScale = d3.scale.linear()     .range([h, 0]);  // var color = d3.scale.color();  // Define the Axis var xAxis = d3.svg.axis()     .scale(xScale)     .orient("bottom");  var yAxis = d3.svg.axis()     .scale(yScale)     .orient("left");  //Create SVG element var svg = d3.select("body")             .append("svg")             .attr("width", w + margin.left + margin.right)             .attr("height", h + margin.top + margin.bottom)             .append("g")             .attr("transform", "translate(" + margin.left + "," + margin.top + ")");   //Load the TEAM data set var teamdata = d3.tsv("team.tsv", function(error, teamdata) {   if (error) throw error;    teamdata.forEach(function(d) {     d.entriesper60 = +d.entriesper60;     d.carryinpercent = +d.carryinpercent;   });    xScale.domain(d3.extent(teamdata, function(d) { return d.carryinpercent; })).nice();   yScale.domain(d3.extent(teamdata, function(d) { return d.entriesper60; })).nice();  //Create X axis svg.append("g")       .attr("class", "x axis")       .attr("transform", "translate(0," + h + ")")       .call(xAxis)     .append("text")       .attr("class", "axis-text")       .attr("x", w)       .attr("y", -6)       .style("text-anchor", "end")       .text("Carry-in %");  //Create Y axis svg.append("g")     .attr("class", "y axis")     .call(yAxis)   .append("text")     .attr("class", "axis-text")     .attr("y", -20)     .attr("z", 0)     .style("text-anchor", "middle")     .text("Entries/60")  // DEFS &amp; Pattern for images svg.append("defs")   .selectAll("pattern")   .data(teamdata)   .enter()   .append("pattern")   .attr('id', function(d, i) {     return d.name;   })  // .attr('patternUnits', 'userSpaceOnUse')   .attr('width', 20)   .attr('height', 20)   .append("image")   .attr("xlink:href", function(d) {     return d.image + d.name;   })   .attr('width', 20)   .attr('height', 20)   .attr("transform", "translate(2, 2)");  // Create TEAM Circles svg.selectAll("circle")   .data(teamdata)   .enter()   .append("circle")   .attr("class", "teamcircle")   .style("stroke", function(d) { return d.hex; })        .style("stroke-width", 2)   .style("stroke-opacity", .8)   .attr("r", 12)   .attr("cx", function(d) { return xScale(d.carryinpercent); })   .attr("cy", function(d) { return yScale(d.entriesper60); })  .attr("fill", function(d) { return "url(#" + d.name + ")";  }); });      &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;</code></pre> </div> </div> </p>