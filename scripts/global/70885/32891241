<p>D3 data binding seem to be behave differently when using the original data object, vs. using a cloned version of the data object. I have a function <strong>updateTable</strong> which updates an array of tables based on the passed array of arrays. If an array (representing one new table row) is added to the array of arrays, and passed to the <strong>updateFunction</strong>, all works as expected (the row is added to the table). If however, we make a shallow copy (clone) of this data structure and pass it to the <strong>updateFunction</strong>, the data binding fails and no table row is added. Please note that the original data structure and clone are two different objects, however with <strong>identical values</strong>. </p>  <p>Please see <a href="https://jsfiddle.net/bsnkteju/1/" rel="nofollow">this</a> JSFiddle example. Two tables are generated, one fed the original data, the other the cloned data. The two tables are clearly different, as the second table (built using cloned data) does <strong>NOT</strong> contain the third row.</p>  <pre><code>'use strict'; d3.select("body").append("h3").text("D3 Data Binding Issue");  // create two divs to hold one table each var tableDiv1 = d3.select("body").append("div"); d3.select("body").append("hr"); var tableDiv2 = d3.select("body").append("div");  // define data // here, an array of a single item (which represents a table), containing an array of arrays,  // each destined for a table row var data = [   { table: "Table1", rows: [       { table: "Table1", row: "Row1", data: "DataT1R1" },       { table: "Table1", row: "Row2", data: "DataT1R2" }     ]   } ];  // run update on the initial data update(data);  // add 3rd array to the data structure (which should add a third row in each table) data[0].rows.push({ table: "Table1", row: "Row3", data: "DataT1R3" });  // run update again // observe that the Lower table (which is using cloned data) does NOT update update(data);  /* // remove first array of the data structure data[0].rows.shift();  // run update again // observe that the Lower table (which again is using cloned data) does NOT update update(data); */  // function to run the tableUpdate function targeting two different divs, one with the  // original data, and the other with cloned data function update(data) {   // the contents of the two data structures are equal   console.log("\nAre object values equal? ", JSON.stringify(data) == JSON.stringify(clone(data)));    tableUpdate(data, tableDiv1, "Using Original Data"); // update first table   tableUpdate(clone(data), tableDiv2, "Using Cloned Data"); // update second table }  // generic function to manage array of tables (in this simple example only one table is managed) function tableUpdate(data, tableDiv, title) {   console.log("data", JSON.stringify(data));    // get all divs in this table div    var divs = tableDiv.selectAll("div")       .data(data, function(d) { return d.table }); // disable default by-index eval    // remove div(s)   divs.exit().remove();    // add new div(s)   var divsEnter = divs.enter().append("div");    // append header(s) in new div(s)   divsEnter.append("h4").text(title);    // append table(s) in new div(s)   var tableEnter = divsEnter.append("table")       .attr("id", function(d) { return d.table });    // append table body in new table(s)   tableEnter.append("tbody");    // select all tr elements in the divs update selection   var tr = divs.selectAll("table").selectAll("tbody").selectAll("tr")       .data(function(d, i, a) { return d.rows; }, function(d, i, a) { return d.row; }); // disable by-index eval    // remove any row(s) with missing data array(s)   tr.exit().remove();    // add row(s) for new data array(s)   tr.enter().append("tr");    // bind data to table cells   var td = tr.selectAll("td")       .data(function(d, i) { return d3.values(d); });    // add new cells   td.enter().append("td");    // update contents of table cells   td.text(function(d) { return d; }); }  // source: https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm function clone(objectToBeCloned) {   return JSON.parse(JSON.stringify(objectToBeCloned));  } </code></pre>  <p>Can anybody shed some light on this behavior? I believe I'm using the key functions properly, but could be wrong. In my application I need to re-generate the data structure before each table update, and I don't have option of reusing the original object. </p>