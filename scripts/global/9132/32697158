<p>I tried to create a zoom view with an image that is always scaled about its center. However, if I change the initial position of the image and pinch the image moves to the lower right corner of the window. As a reference I used the pinch zoom view of the Android Developer and changed some parameters. You have any ideas to fix that?</p>  <pre><code>package android.oli.com.fitnessapp;  import android.content.Context; import android.graphics.Canvas; import android.graphics.Color; import android.graphics.Paint; import android.graphics.Rect; import android.graphics.drawable.Drawable; import android.util.AttributeSet; import android.view.MotionEvent; import android.view.ScaleGestureDetector; import android.view.View;  public class ZoomView extends View{      private Drawable mIcon;     private float mPosX;     private float mPosY;      private float mLastTouchX;     private float mLastTouchY;      private ScaleGestureDetector mScaleDetector;     private float mScaleFactor = 1.f;      private static final int INVALID_POINTER_ID = -1;      // The ‘active pointer’ is the one currently moving our object.     private int mActivePointerId = INVALID_POINTER_ID;      Context context;      public ZoomView(Context context) {         super(context);         mIcon = context.getResources().getDrawable(R.drawable.image_1);         this.context = context;         init();     }      public ZoomView(Context context, AttributeSet attrs) {         super(context, attrs);         mIcon = context.getResources().getDrawable(R.drawable.image_1);         this.context = context;         init();     }      public ZoomView(Context context, AttributeSet attrs, int defStyleAttr) {         super(context, attrs, defStyleAttr);         mIcon = context.getResources().getDrawable(R.drawable.image_1);         this.context = context;         init();     }      public void init(){         mIcon.setBounds(0, 0, mIcon.getIntrinsicWidth(), mIcon.getIntrinsicHeight());         mScaleDetector = new ScaleGestureDetector(context, new ScaleListener());      }      @Override     public void onDraw(Canvas canvas) {         super.onDraw(canvas);          canvas.save();         canvas.translate(mPosX - ((mIcon.getIntrinsicWidth()) * mScaleFactor) / 2, mPosY - ((mIcon.getIntrinsicWidth()) * mScaleFactor) / 2);         canvas.scale(mScaleFactor, mScaleFactor);         mIcon.draw(canvas);         //rectMid.set(0, 0, canvas.getWidth(), canvas.getHeight()/2);         //canvas.drawRect(rectMid, blue);         canvas.restore();     }       @Override     public boolean onTouchEvent(MotionEvent ev) {         // Let the ScaleGestureDetector inspect all events.         mScaleDetector.onTouchEvent(ev);          final int action = ev.getAction();         switch (action &amp; MotionEvent.ACTION_MASK) {             case MotionEvent.ACTION_DOWN: {                 final float x = ev.getX();                 final float y = ev.getY();                  mLastTouchX = x;                 mLastTouchY = y;                 mActivePointerId = ev.getPointerId(0);                 break;             }              case MotionEvent.ACTION_MOVE: {                 final int pointerIndex = ev.findPointerIndex(mActivePointerId);                 final float x = ev.getX(pointerIndex);                 final float y = ev.getY(pointerIndex);                  // Only move if the ScaleGestureDetector isn't processing a gesture.                 if (!mScaleDetector.isInProgress()) {                     final float dx = x - mLastTouchX;                     final float dy = y - mLastTouchY;                      mPosX += dx;                     mPosY += dy;                      invalidate();                 }                  mLastTouchX = x;                 mLastTouchY = y;                  break;             }              case MotionEvent.ACTION_UP: {                 mActivePointerId = INVALID_POINTER_ID;                 break;             }              case MotionEvent.ACTION_CANCEL: {                 mActivePointerId = INVALID_POINTER_ID;                 break;             }              case MotionEvent.ACTION_POINTER_UP: {                 final int pointerIndex = (ev.getAction() &amp; MotionEvent.ACTION_POINTER_INDEX_MASK)                         &gt;&gt; MotionEvent.ACTION_POINTER_INDEX_SHIFT;                 final int pointerId = ev.getPointerId(pointerIndex);                 if (pointerId == mActivePointerId) {                     // This was our active pointer going up. Choose a new                     // active pointer and adjust accordingly.                     final int newPointerIndex = pointerIndex == 0 ? 1 : 0;                     mLastTouchX = ev.getX(newPointerIndex);                     mLastTouchY = ev.getY(newPointerIndex);                     mActivePointerId = ev.getPointerId(newPointerIndex);                 }                 break;             }         }          return true;     }      private class ScaleListener extends ScaleGestureDetector.SimpleOnScaleGestureListener {         @Override         public boolean onScale(ScaleGestureDetector detector) {             mScaleFactor *= detector.getScaleFactor();              // Don't let the object get too small or too large.             mScaleFactor = Math.max(0.1f, Math.min(mScaleFactor, 5.0f));              invalidate();             return true;         }     }  } </code></pre>  <p>XML: </p>  <pre><code>&lt;android.oli.com.fitnessapp.ZoomView     android:layout_width="match_parent"     android:layout_height="match_parent" /&gt; </code></pre>  <p></p>