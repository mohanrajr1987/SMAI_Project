<p>I am using the Identity Server 3 Sample for Asp.Net Identity, which is working fine and I was also able to make it generate refresh tokens to renew the access tokens.</p>  <p>So here is my question. One of the main points of having refresh tokens is that we can simulate token revocation, in a way that we store the refresh token in a database table, then every time the user wants to renew the access token using that refresh token, we first check if that refresh token exists in the database then let it renew the access token. So if we remove that DB record, the user won't be able to renew his token, hence token revoked.</p>  <p>Now in Identity Server 3, I can simply activate the refresh tokens for a client by adding <code>UpdateAccessTokenClaimsOnRefresh = true</code> to that client. But how do I store them in the DB and how do I make the token renewal process check the existence of that refresh token before accepting it?</p>  <p>Is there a better way to do this? What are the advantages/disadvantages?</p>