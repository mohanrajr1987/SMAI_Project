<p>I have the following strict scenario specifically required by a client: A single website using Asp.NET MVC4 which is accessible via various domains with Single-Sign On mechanism.</p>  <p>I have managed to make form authentication work with subdomains by specifying in the webconfig the second-level domain</p>  <pre><code> &lt;authentication mode="Forms"&gt;   &lt;forms name="SingleSignOn" loginUrl="/Login/LoginRedirect" timeout="10" slidingExpiration="false" domain="domain.ml"  cookieless="UseCookies" enableCrossAppRedirects="true"&gt;     &lt;credentials passwordFormat="SHA1" /&gt;   &lt;/forms&gt; &lt;/authentication&gt; </code></pre>  <p>Also when calling the <code>FormsAuthentication.SetAuthCookie</code> in the login logic, I am specifying the second level domain as well:</p>  <pre><code> System.Web.HttpCookie MyCookie = System.Web.Security.FormsAuthentication.GetAuthCookie(lName, false);                     MyCookie.Domain = lSecondLevelDomain;                     FormsAuthentication.SetAuthCookie(lName, false); </code></pre>  <p>Across different domains, this does not work, since the actual domain will not match with the domain specified in the web.config and neither with the cookies.</p>  <p>The aim is:</p>  <p>User accesses domain1.com User redirected to logindomain.com and authenticated cookie created User redirected back to domain1.com</p>  <p>The user is always redirected to a "login domain", the cookie is created using that domain, and always authenticate using the same cookie across domains.</p>  <p>Is it possible to override the logic of the Authorize attribute in order to allow authorization using the cookie of the login domain instead of the domain the user originally used?</p>