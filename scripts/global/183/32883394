<p>I'm new to Laravel and want to build a small admin area to create and edit data. I'm using the authentication which comes out of the box with Laravel 5.1 and followed this documentation <a href="http://laravel.com/docs/master/authentication" rel="nofollow">http://laravel.com/docs/master/authentication</a>.</p>  <p>I'm prefixing all my backend routes with "admin". Now, if I log in, I'm being redirected to the correct page. But once I click one link or reload the page, I'm being redirected to my login page.</p>  <p>I think I'm just getting something wrong with the routes...? </p>  <p>Additional info: </p>  <ul> <li>Laravel Framework version 5.1.17 (LTS)</li> <li>I'm using vagrant as my dev environment. It's a custom box. But I already tried using Homestead with this file base, same problem.</li> <li>Without the auth middleware, all my routes are accessible and are working properly.</li> </ul>  <p>routes.php</p>  <pre><code>// Frontend Route::get('/', ['as' =&gt; 'home', 'uses' =&gt; 'ContentController@index']); Route::resource('comment', 'CommentController', ['only' =&gt; ['create','store']]);  // Authentication Route::get('admin/login', array('as' =&gt; 'admin.login', 'uses' =&gt; 'Auth\AuthController@getLogin')); Route::post('admin/login', array('as' =&gt; 'admin.login', 'uses' =&gt; 'Auth\AuthController@postLogin')); Route::get('admin/logout', array('as' =&gt; 'admin.logout', 'uses' =&gt; 'Auth\AuthController@getLogout'));  // Backend Admin with Authentication Route::group(array('prefix' =&gt; 'admin', 'middleware' =&gt; 'auth', 'namespace' =&gt; 'Admin'), function() {     Route::post('content/sortlist', ['as' =&gt; 'admin.content.sortlist', 'uses' =&gt; 'ContentController@sortList']);     Route::resource('content', 'ContentController', ['except' =&gt; ['show']]);     Route::resource('comment', 'CommentController', ['only' =&gt; ['index','destroy']]); }); </code></pre>  <p>Output from php artisan route:list</p>  <pre><code>+--------+----------+------------------------------+------------------------+-------------------------------------------------------+------------+ | Domain | Method   | URI                          | Name                   | Action                                                | Middleware | +--------+----------+------------------------------+------------------------+-------------------------------------------------------+------------+ |        | GET|HEAD | /                            | home                   | App\Http\Controllers\ContentController@index          |            | |        | GET|HEAD | admin/comment                | admin.comment.index    | App\Http\Controllers\Admin\CommentController@index    | auth       | |        | DELETE   | admin/comment/{comment}      | admin.comment.destroy  | App\Http\Controllers\Admin\CommentController@destroy  | auth       | |        | POST     | admin/content                | admin.content.store    | App\Http\Controllers\Admin\ContentController@store    | auth       | |        | GET|HEAD | admin/content                | admin.content.index    | App\Http\Controllers\Admin\ContentController@index    | auth       | |        | GET|HEAD | admin/content/create         | admin.content.create   | App\Http\Controllers\Admin\ContentController@create   | auth       | |        | POST     | admin/content/sortlist       | admin.content.sortlist | App\Http\Controllers\Admin\ContentController@sortList | auth       | |        | PATCH    | admin/content/{content}      |                        | App\Http\Controllers\Admin\ContentController@update   | auth       | |        | DELETE   | admin/content/{content}      | admin.content.destroy  | App\Http\Controllers\Admin\ContentController@destroy  | auth       | |        | PUT      | admin/content/{content}      | admin.content.update   | App\Http\Controllers\Admin\ContentController@update   | auth       | |        | GET|HEAD | admin/content/{content}/edit | admin.content.edit     | App\Http\Controllers\Admin\ContentController@edit     | auth       | |        | GET|HEAD | admin/login                  | admin.login            | App\Http\Controllers\Auth\AuthController@getLogin     | guest      | |        | POST     | admin/login                  | admin.login            | App\Http\Controllers\Auth\AuthController@postLogin    | guest      | |        | GET|HEAD | admin/logout                 | admin.logout           | App\Http\Controllers\Auth\AuthController@getLogout    |            | |        | POST     | comment                      | comment.store          | App\Http\Controllers\CommentController@store          |            | |        | GET|HEAD | comment/create               | comment.create         | App\Http\Controllers\CommentController@create         |            | +--------+----------+------------------------------+------------------------+-------------------------------------------------------+------------+ </code></pre>  <p>app/Http/Controllers/Auth/AuthController.php</p>  <pre><code>&lt;?php  namespace App\Http\Controllers\Auth;  use App\User; use Validator; use App\Http\Controllers\Controller; use Illuminate\Foundation\Auth\ThrottlesLogins; use Illuminate\Foundation\Auth\AuthenticatesAndRegistersUsers;  class AuthController extends Controller {      /*     |--------------------------------------------------------------------------     | Registration &amp; Login Controller     |--------------------------------------------------------------------------     |     | This controller handles the registration of new users, as well as the     | authentication of existing users. By default, this controller uses     | a simple trait to add these behaviors. Why don't you explore it?     |     */      use AuthenticatesAndRegistersUsers, ThrottlesLogins;      protected $redirectPath = 'admin/content';      protected $loginPath = 'admin/login';      /**      * Create a new authentication controller instance.      *      * @return void      */     public function __construct()     {         $this-&gt;middleware('guest', ['except' =&gt; 'getLogout']);     }      /**      * Get a validator for an incoming registration request.      *      * @param  array  $data      * @return \Illuminate\Contracts\Validation\Validator      */     protected function validator(array $data)     {         return Validator::make($data, [             'firstname' =&gt; 'required|max:255',             'lastname' =&gt; 'required|max:255',             'email' =&gt; 'required|email|max:255|unique:users',             'password' =&gt; 'required|confirmed|min:6',         ]);     }      /**      * Create a new user instance after a valid registration.      *      * @param  array  $data      * @return User      */     protected function create(array $data)     {         return User::create([             'firstname' =&gt; $data['firstname'],             'lastname' =&gt; $data['lastname'],             'email' =&gt; $data['email'],             'password' =&gt; bcrypt($data['password']),         ]);     } } </code></pre>  <p>app/Http/Middleware/Authenticate.php</p>  <pre><code>&lt;?php  namespace App\Http\Middleware;  use Closure; use Illuminate\Contracts\Auth\Guard;  class Authenticate {     /**      * The Guard implementation.      *      * @var Guard      */     protected $auth;      /**      * Create a new filter instance.      *      * @param  Guard  $auth      * @return void      */     public function __construct(Guard $auth)     {         $this-&gt;auth = $auth;     }      /**      * Handle an incoming request.      *      * @param  \Illuminate\Http\Request  $request      * @param  \Closure  $next      * @return mixed      */     public function handle($request, Closure $next)     {         if ($this-&gt;auth-&gt;guest()) {             if ($request-&gt;ajax()) {                 return response('Unauthorized.', 401);             } else {                 return redirect()-&gt;guest('admin/login');             }         }          return $next($request);     } } </code></pre>  <p>app/Http/Middleware/RedirectIfAuthenticated.php</p>  <pre><code>&lt;?php  namespace App\Http\Middleware;  use Closure; use Illuminate\Contracts\Auth\Guard;  class RedirectIfAuthenticated {     /**      * The Guard implementation.      *      * @var Guard      */     protected $auth;      /**      * Create a new filter instance.      *      * @param  Guard  $auth      * @return void      */     public function __construct(Guard $auth)     {         $this-&gt;auth = $auth;     }      /**      * Handle an incoming request.      *      * @param  \Illuminate\Http\Request  $request      * @param  \Closure  $next      * @return mixed      */     public function handle($request, Closure $next)     {         if ($this-&gt;auth-&gt;check()) {             return redirect('admin/content');         }          return $next($request);     } } </code></pre>  <p>postLogin at vendor/laravel/framework/src/Illuminate/Foundation/Auth/AuthenticatesUsers.php (changed nothing here)</p>  <pre><code>&lt;?php  namespace Illuminate\Foundation\Auth;  use Illuminate\Http\Request; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Lang;  trait AuthenticatesUsers {     use RedirectsUsers;      /**      * Show the application login form.      *      * @return \Illuminate\Http\Response      */     public function getLogin()     {         if (view()-&gt;exists('auth.authenticate')) {             return view('auth.authenticate');         }          return view('auth.login');     }      /**      * Handle a login request to the application.      *      * @param  \Illuminate\Http\Request  $request      * @return \Illuminate\Http\Response      */     public function postLogin(Request $request)     {         $this-&gt;validate($request, [             $this-&gt;loginUsername() =&gt; 'required', 'password' =&gt; 'required',         ]);          // If the class is using the ThrottlesLogins trait, we can automatically throttle         // the login attempts for this application. We'll key this by the username and         // the IP address of the client making these requests into this application.         $throttles = $this-&gt;isUsingThrottlesLoginsTrait();          if ($throttles &amp;&amp; $this-&gt;hasTooManyLoginAttempts($request)) {             return $this-&gt;sendLockoutResponse($request);         }          $credentials = $this-&gt;getCredentials($request);          if (Auth::attempt($credentials, $request-&gt;has('remember'))) {             return $this-&gt;handleUserWasAuthenticated($request, $throttles);         }          // If the login attempt was unsuccessful we will increment the number of attempts         // to login and redirect the user back to the login form. Of course, when this         // user surpasses their maximum number of attempts they will get locked out.         if ($throttles) {             $this-&gt;incrementLoginAttempts($request);         }          return redirect($this-&gt;loginPath())             -&gt;withInput($request-&gt;only($this-&gt;loginUsername(), 'remember'))             -&gt;withErrors([                 $this-&gt;loginUsername() =&gt; $this-&gt;getFailedLoginMessage(),             ]);     }      /**      * Send the response after the user was authenticated.      *      * @param  \Illuminate\Http\Request  $request      * @param  bool  $throttles      * @return \Illuminate\Http\Response      */     protected function handleUserWasAuthenticated(Request $request, $throttles)     {         if ($throttles) {             $this-&gt;clearLoginAttempts($request);         }          if (method_exists($this, 'authenticated')) {             return $this-&gt;authenticated($request, Auth::user());         }          return redirect()-&gt;intended($this-&gt;redirectPath());     }      /**      * Get the needed authorization credentials from the request.      *      * @param  \Illuminate\Http\Request  $request      * @return array      */     protected function getCredentials(Request $request)     {         return $request-&gt;only($this-&gt;loginUsername(), 'password');     }      /**      * Get the failed login message.      *      * @return string      */     protected function getFailedLoginMessage()     {         return Lang::has('auth.failed')                 ? Lang::get('auth.failed')                 : 'These credentials do not match our records.';     }      /**      * Log the user out of the application.      *      * @return \Illuminate\Http\Response      */     public function getLogout()     {         Auth::logout();          return redirect(property_exists($this, 'redirectAfterLogout') ? $this-&gt;redirectAfterLogout : '/');     }      /**      * Get the path to the login route.      *      * @return string      */     public function loginPath()     {         return property_exists($this, 'loginPath') ? $this-&gt;loginPath : '/auth/login';     }      /**      * Get the login username to be used by the controller.      *      * @return string      */     public function loginUsername()     {         return property_exists($this, 'username') ? $this-&gt;username : 'email';     }      /**      * Determine if the class is using the ThrottlesLogins trait.      *      * @return bool      */     protected function isUsingThrottlesLoginsTrait()     {         return in_array(             ThrottlesLogins::class, class_uses_recursive(get_class($this))         );     } } </code></pre>  <p>How I link to admin pages in my master.admin blade file (maybe that's the culprit?) </p>  <pre><code>&lt;ul class="nav nav-sidebar"&gt; &lt;li {{ Request::is('admin/content') ? "class=active" : null }}&gt;&lt;a href="{{ URL::route('admin.content.index') }}"&gt;Inhalte &lt;span class="sr-only"&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li {{ Request::is('admin/comment') ? "class=active" : null }}&gt;&lt;a href="{{ URL::route('admin.comment.index') }}"&gt;Kommentare &lt;span class="sr-only"&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; </code></pre>  <p>Following countless google links, I already checked the storage/framework/sessions directory permissions and checked if the session is persistent. Seems so to me. I switched from file based session to database session in config/session.php, no change at all. There's nothing in the laravel.log file either. </p>  <p>I'm at my wits' end. Probably it's just some configuration I just don't get.</p>  <p>Thanks for your help!</p>