<p>I'm trying to build a JPopupMenu that appears on mouse entering in a specific component. This JPopupMenu contains a JTextField for value editing (numbers). Since I cannot know in advance the length of the number that will be edited, I'd like to make my popup resizing after each key is typed. I achieved this by adding KeyListener to the JTextField and trying to handle the focus. My trick works but I meet the following problems when I build the application:</p>  <ul> <li>Every time I call the pack() method, the focus moves from JtextField to another component and then comes back to JtextField thanks to the requestFocus() method (this makes my windows continuosly flickering). In this case, to make the other component not focusable could not be a solution to me.</li> <li>JPopupMenu disappears when its size so as to exit from the window.</li> </ul>  <p>I attach an abstract of my code below. Is there a better way to achieve my goal? Or to manage the issues caused by the use of both pack() and requestFocus() methods? Thanks in advance.</p>  <pre><code>package prova;  import java.awt.BorderLayout; import java.awt.Color; import java.awt.event.KeyEvent; import java.awt.event.KeyListener; import java.awt.event.MouseEvent; import java.awt.event.MouseListener;  import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.JPopupMenu; import javax.swing.JRootPane; import javax.swing.JTextField;  public class Main {     public final static void main(String[] args ){         JFrame frame = new JFrame();         JPanel p = (JPanel)frame.getContentPane();         p.setLayout(new BorderLayout());         p.setPreferredSize(new java.awt.Dimension(100,100));          JLabel l = new JLabel("my label");         l.setOpaque(true);         l.setPreferredSize(new java.awt.Dimension(50,20));         l.setBackground(Color.white);          JPopupMenu pop = new JPopupMenu();          JTextField textField = new JTextField("edit text");         textField.addKeyListener(new KeyListener() {              @Override             public void keyTyped(KeyEvent e) {}              @Override             public void keyReleased(KeyEvent e) {                 pop.pack();                 ((JTextField)e.getSource()).requestFocus();             }              @Override             public void keyPressed(KeyEvent e) {}         });            l.addMouseListener(new MouseListener() {              @Override             public void mouseReleased(MouseEvent e) {}              @Override             public void mousePressed(MouseEvent e) {}              @Override             public void mouseExited(MouseEvent e) {}              @Override             public void mouseEntered(MouseEvent e) {                 if(!pop.isVisible()){                     pop.show((java.awt.Component)e.getSource(), e.getX(), e.getY());                 }             }              @Override             public void mouseClicked(MouseEvent e) {}         });          pop.add(textField);         p.add(l,BorderLayout.EAST);          frame.pack();         frame.setVisible(true);     } } </code></pre>