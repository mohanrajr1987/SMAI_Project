<p>I have an array with hundreds of objects which contain geolocation data like so:</p>  <pre><code>var geoArray = [   {     name: "a",     latitude: 34.0500,     longitude: 118.2500     ...   },   {     name: "b",     latitude: 40.7127,     longitude: 74.0059,     ...   },   ... ]; </code></pre>  <p>I want to grab the first 10 objects of each unique latitude/longitude pair and put these sets of objects into a new array. What would be an efficient way to accomplish this? I'm open to using lodash or underscore.</p>  <p>Using underscore's <code>uniq</code> I could do the following, but this only gets me the first object based on lat/lng rather than the first 10:</p>  <pre><code>_.uniq(geoArray,function(element) { return element.latitude + "_" + element.longitude}); </code></pre>  <p>This is <code>_uniq</code>'s actual definition:</p>  <p><code>_.uniq(array, [isSorted], [iteratee])</code></p>  <p>My desired function would basically look like: <code>_.uniq(array, [isSorted], [iteratee], [limit])</code> where <code>limit</code> is 1 by default, but I would like to enter 10. I know I could first grab the unique lat/lng pairs then find which objects have each of them and push them to an array at most 10 times, etc. But I was hoping there was a more efficient way.</p>  <p>Here is the exact code that works after applying the very helpful answer below:</p>  <pre><code>function getUnique(arr, limit) {   var indices = [];   var out = [];   for (var i = 0, l = arr.length; i &lt; l; i++) {      var location = arr[i].latitude + '_' + arr[i].longitude;      if (indices.indexOf(location) === -1) {        out.push(arr.filter(function (el) {          return el.latitude + '_' + el.longitude === location        }).slice(0, limit));        indices.push(location);      }   }   return out; } </code></pre>