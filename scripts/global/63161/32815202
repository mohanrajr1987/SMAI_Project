<p>I have underscore. </p>  <p>I have:</p>  <pre><code>var person = {   personal: {     fname: 'Victor',     lname: 'Lee',     address: {       street: '1234 Main',       state: {         abbrName: 'CA',         fullName: 'California',         timezone: 'PST'       },       zip: '94043'     }   } }; </code></pre>  <p>I would like to update multiple properties but leave others untouched.</p>  <p>Instead of writing three seperate lines:</p>  <pre><code>  person.personal.address.state.abbrName = 'OR';   person.personal.address.state.fullName = 'Oregon';   person.personal.address.zip = '97062'; </code></pre>  <p>I want to be able to set all props in one line of code, but also leave other properties untouched.</p>  <p>If I do:</p>  <pre><code>_.extend(person.personal.address, {   state: {     abbrName: 'OR',     fullName: 'Oregon'   },   zip: '97032' }); </code></pre>  <p>The resulting object has the time zone hacked out:</p>  <pre><code>{   personal: {     fname: 'Victor',     lname: 'Lee',     address: {       street: '1234 Main',       state: {         abbrName: 'CA',         fullName: 'California',       },       zip: '94043'     }   } }; </code></pre>  <p>Something like this would be ideal:</p>  <pre><code>var updateObj = function(obj, key, value){   // stuff   return obj; }; </code></pre>  <p>and run like:</p>  <pre><code>updateObj(person, 'personal.address', {   state: {     abbrName: 'OR',     fullName: 'Oregon'   },   zip: '97032' }); </code></pre>  <p>So far I've got this but it only completely overwrites one property at a time.</p>  <pre><code>var updateObjectWithStringKey = function(obj, key, value) {   if (typeof key === "string"){     key = key.split(".");   };    if (prop.length &gt; 1) {     var e = key.shift();     updateObjectWithStringKey(obj[e] =       typeof obj[e] == 'object' ? obj[e] : {},       key,       value);   } else {     obj[key[0]] = value;   };    return obj;  }; </code></pre>  <p><strong>EDIT</strong></p>  <p>Ok, I think I'm getting close:</p>  <pre><code>var MergeRecursive = function(destination, source) {    for (var p in source) {      if ( typeof source[p] == 'object' ) {       destination[p] = MergeRecursive(destination[p], source[p]);     } else {       destination[p] = source[p];     };    };    return destination;  }; </code></pre>  <p>This merges information even if its wedged between levels in an object:</p>  <pre><code>var person = {   personal: {     fname: 'Victor',     lname: 'Lee',     address: {       street: '1234 Main',       state: {         abbrName: 'CA',         fullName: 'California',         timezone: 'PST'       },       zip: '94043'     }   } };  var updatedInfo = {   personal: {     address: {       state: {         abbrName: 'OR',         fullName: 'Oregon',         capital: 'Salem'       },       zip: '97062'     },   } };  MergeRecursive(person, updatedInfo); </code></pre>  <p>returns </p>  <pre><code>{   personal: {     fname: 'Victor',     lname: 'Lee',     address: {       street: '1234 Main',       state: {         abbrName: 'OR',         fullName: 'Oregon',         timezone: 'PST',         capital: 'Salem'       },       zip: '97062'     }   } } </code></pre>  <p>But like I said, I would like to provide a string path to the part of the object that I would like to update:</p>  <pre><code>updateObj(person, 'personal.address', {   state: {     abbrName: 'OR',     fullName: 'Oregon',     capital: 'Salem'   },   zip: '97062' }); </code></pre>  <p>This function does it but not with the merging behavior above:</p>  <pre><code>var updateObjectWithStringProp = function(obj, prop, value) {    if (typeof prop === "string") {     var prop = prop.split('.');   }    if (prop.length &gt; 1) {     var p = prop.shift();     if (obj[p] == null || typeof obj[p] !== 'object') {       obj[p] = {};     }     updateObjectWithStringProp(obj[p], prop, value);   } else {     obj[prop[0]] = value;   }    return obj;  }; </code></pre>  <p>How do I edit this function to also include the merging behavior?</p>