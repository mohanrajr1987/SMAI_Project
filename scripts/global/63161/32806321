<p>i'm learning Backbone.js from the online book 'backbone-fundamentals', while trying the example i got an error in console related to underscore.js:</p>  <pre><code>Uncaught TypeError: Cannot use 'in' operator to search for 'model' in undefined </code></pre>  <p>i searched for the error on SO what i found as the cause of this error was that i should not pass strings to my model when initializing it. but i didn't.</p>  <p>here is my project, my model:</p>  <pre><code>// models/todo.js     var app = app || {};  app.Todo = Backbone.Model.extend({      defaults: {         title: '',         completed: false     },      toggle: function() {         this.save({             completed: !this.get('completed')         });     } }); </code></pre>  <p>my collection:</p>  <pre><code>// collections/todos.js var app = app || {};  var TodoList = Backbone.Collection.extend({     model: app.Todo,      localStorage: new Backbone.LocalStorage('todos-backbone'),      completed: function() {         return this.filter( function( todo ) {             return todo.get('completed');         });     },      remaining: function() {         return this.without.apply(this, this.completed());     },      nextOrder: function() {         if( !this.length ) {             return 1;         }         return this.last().get('order') + 1;     },      comperator: function(todo) {         return todo.get('order');     } });  app.Todos = new TodoList(); </code></pre>  <p>i have two views.</p>  <pre><code>// views/todos.js var app = app || {};   app.TodoView = Backbone.View.extend({     tagName: 'li',      template: _.template( $('#item-template').html() ),      events: {         'dbclick label': 'edit',         'keypress .edit': 'updateOnEnter',         'blur .edit': 'close'     },      initialize: function() {         this.listenTo(this.model, 'change', this.render);     },      render: function() {         this.$el.html( this.template(this.model.attributes) );         this.$input = this.$('.edit');         return this;     },      edit: function() {         this.$el.addClass('editing');         this.$input.focus();     },      close: function() {         var value = this.$input.val().trim();          if( value ) {             this.model.save({ title: value });         }          this.$el.removeClass('editing');     },      updateOnEnter: function(e) {         if (e.which === ENTER_KEY) {             this.close();         }     } }); </code></pre>  <p>and:</p>  <pre><code>// views/app.js // maybe i should rename this file to appView.js var app = app || {};  app.AppView = Backbone.View.extend({     el: '.todoapp',      statsTemplate: _.template( $('#stats-template').html() ),      events: {         'keypress .new-todo': 'createOnEnter',         'click .clear-completed': 'clearCompleted',         'click .toggle-all': 'toggleAllComplete'     },      initialize: function() {         this.allCheckbox = this.$('.toggle-all')[0];         this.$input = this.$('.new-todo');         this.$footer = this.$('.footer');         this.$main = this.$('.main');          this.listenTo(app.Todos, 'add', this.addOne);         this.listenTo(app.Todos, 'reset', this.addAll);          this.listenTo(app.Todos, 'change:completed', this.filterOne);         this.listenTo(app.Todos, 'filter', this.filterAll);         this.listenTo(app.Todos, 'all', this.render);          app.Todos.fetch();     },      render: function() {         var completed = app.Todos.completed().length;         var remaining = app.Todos.remaining().length;          if(app.Todos.length) {             this.$main.show();             this.$footer.show();              this.$footer.html(this.statsTemplate({                 completed: completed,                 remaining: remaining             }));              this.$('#filters li a')                 .removeClass('selected')                 .filter('[href="#/' + (app.TodoFilter || '' ) + '"]')                 .addClass('selected');         } else {             this.$main.hide();             this.$footer.hide();         }          this.allCheckbox.checked = !remaining;     },      addOne: function(todo) {         var view = new app.TodoView({ model:todo });         $('.todo-list').append( view.render().el );     },      addAll: function() {         this.$('.todo-list').html('');         app.Todos.each(this.addOne, this);     },      filterOne: function(todo) {         todo.trigger('visible');     },      filterAll: function() {         app.Todos.each(this.filterOne, this);     },      newAttributes: function() {         return {             title: this.$input.val().trim(),             order: app.Todos.nextOrder(),             completed: false         };     },      createOnEnter: function( event ) {         if( event.which !== ENTER_KEY || !this.$input.val().trim() ) {             return;         }          app.Todos.create( this.newAttributes() );         this.$input.val('');     },      clearCompleted: function() {         _.invoke(app.Todos.completed(), 'destroy');         return false;     },      toggleAllComplete: function() {         var completed = this.allCheckbox.checked;          app.Todos.each(function(todo) {             todo.save({                 'completed': completed             });         });     }  }); </code></pre>  <p>app.js :</p>  <pre><code>// js/app.js  var app = app || {}; var ENTER_KEY = 13; var ESC_KEY = 27;      $(function() {          new app.AppView();      }); </code></pre>  <p>where should i look when such an error happens?<br> thank you for your time... </p>  <p>edit:<br>   the error happens when i load the page without doing anything further.<br>   the order of the files is:</p>  <pre><code>&lt;script src="js/models/todo.js"&gt;&lt;/script&gt; &lt;script src="js/collections/todos.js"&gt;&lt;/script&gt; &lt;script src="js/views/todos.js"&gt;&lt;/script&gt; &lt;script src="js/views/app.js"&gt;&lt;/script&gt; &lt;script src="js/routers/router.js"&gt;&lt;/script&gt; &lt;script src="js/app.js"&gt;&lt;/script&gt; </code></pre>  <p>the whole error message:</p>  <pre><code>Uncaught TypeError: Cannot use 'in' operator to search for 'model' in undefined    (anonymous function) @   underscore.js:5    j.each.j.forEach @   underscore.js:5    j.pick   @   underscore.js:5    Backbone.View    @   backbone.js:1190    child    @   backbone.js:1852    (anonymous function) @   app.js:9    n.Callbacks.j    @   jquery.js:2    n.Callbacks.k.fireWith   @   jquery.js:2    n.extend.ready   @   jquery.js:2    K    @   jquery.js:2 </code></pre>