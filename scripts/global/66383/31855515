<p>So I am writing a console application that merges duplicated contacts in a CRM deployment. </p>  <p>There are two parts to this code. The part that gets the GUID's of the duplicate records and the part that does the actual merging. My problem lies in the former.</p>  <p>I use the phone numbers of the customers to check for uniqueness as you can see in the code and there is a txt file that contains each number in a new line.</p>  <p>I need to fill a list of contacts from this text file and pass it along to the merging method. </p>  <p>I can define a hard-coded string and it works that way but </p>  <p>The part that actually does the merging works but the part that fills all of these duplicates in to a List and and passes it along doesn't. I tried filling it as if it was a list of strings but apperantly this is not how it works with contacts.</p>  <p>The code is included below.</p>  <pre><code>using System; using System.ServiceModel; using Microsoft.Crm.Sdk.Messages; using Microsoft.Xrm.Sdk; using Microsoft.Xrm.Sdk.Client; using Microsoft.Xrm.Sdk.Query; using Zeno.Business; using Zeno.Configuration; using Zeno.CRMEntityModel; using System.Collections.Generic; using System.IO;  namespace MergeTool {      public static class MergeContact     {          public static ContactBL bl = new ContactBL();            /// &lt;param name="serverConfig"&gt;Contains server connection information.&lt;/param&gt;         /// &lt;param name="promptForDelete"&gt;When True, the user will be prompted to delete         /// all created entities.&lt;/param&gt;         public static void Merge()         {             List&lt;Contact&gt; contactList = getAccountGuids();              for (int i = 0; i &lt; contactList.Count; i++)             {                 Contact contact = contactList[0];                 Contact _subContact = contactList[1];                 EntityReference target = new EntityReference();                  target.Id = contact.ContactId.Value;                 target.LogicalName = Contact.EntityLogicalName;                  MergeRequest merge = new MergeRequest();                 merge.SubordinateId = _subContact.ContactId.Value;                 merge.Target = target;                 merge.PerformParentingChecks = false;                  Contact updateContent = new Contact();                 updateContent.zeno_nebimcustomernumber = _subContact.zeno_nebimcustomernumber;                 //updateContent....                 if (string.IsNullOrEmpty(contact.FirstName))                 {                     updateContent.FirstName = _subContact.FirstName;                 }                 //further if conditions clipped for brevity                  merge.UpdateContent = updateContent;                  MergeResponse merged = (MergeResponse)bl.Execute(merge);              }         }          public static List&lt;Contact&gt; getAccountGuids()         {             //TO DO             // Get all duplicate contact mobile phone numbers              string mobilePhone = "+90(505)220 72 29";              return bl.RetrieveContactListByMobilePhone(mobilePhone);         }     } } </code></pre>  <p>As per request I have included the contents of ContactsBL below.</p>  <pre><code>using Microsoft.Xrm.Sdk; using System; using System.Collections.Generic; using System.Data; using System.Linq; using System.Text; using Zeno.CRMEntityModel; using Zeno.Repository;  namespace Zeno.Business {     public class ContactBL:BLBase     {          private ContactRepository contactRepository;          public ContactBL()             : base()         {         }          public ContactBL(IOrganizationService service)             : base(service)         {         }          public Guid CheckPhoneNumber(string phoneNumber)         {             this.contactRepository = new ContactRepository(this.Connection);              return contactRepository.CheckPhoneNumber(phoneNumber);         }             public List&lt;Contact&gt; RetrieveContactListByMobilePhone(string phoneNumber)         {             this.contactRepository = new ContactRepository(this.Connection);              return contactRepository.RetrieveContactListByMobilePhone(phoneNumber);         }      } } </code></pre>