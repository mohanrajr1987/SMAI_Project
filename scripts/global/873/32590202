<p>I'm working on a point-of-sale system that uses unique alphanumeric UPC codes as an identity column in the database. The user is allowed to enter any alphanumeric UPC code that they want. I want to implement an auto-generate option for the UPC using C# and Linq to Entity, but am having some trouble with the logic. I'm trying to get it into the format 'A0000000010', where 'A' would denote the product type, and the numbers after are either random, or a counted number, they really don't matter. Here's my basic schema</p>  <pre><code>productID  |  description  |  UPC    1       |   ItemNum1    | 12345    2       |   ItemNum2    | ABCDE </code></pre>  <p>I can easily create a random number and attach it to the letter, then check if it exists in the database, and if it does, try it again, and again and again, but a brute force method seems like it could take a lot of time down the road, so I'd like to avoid this.</p>  <p>I also thought I could grab the last productID column (2 in this case), increment it (now it's 3), attach the requisite 0's (0000000003), and then attach the correct letter (A0000000003), but since users can create their own UPC's by hand, or by scanning, they could easily type in a UPC like 'A0000000015' that would affect this down the line. </p>  <p>To get around that, I could do something where if the UPC already exists, decrement the id (so A0000000003 would become A0000000002), and try again, and again, and again, and now we're back at the brute force method, albeit a much faster one.</p>  <p>My question is: Is there a way, using C# and Linq to Entity, to generate a string that is guaranteed not to exist in the database?</p>