<p>I read that <a href="http://www.cis.upenn.edu/~bcpierce/sf/current/Logic.html" rel="nofollow">implications are logic</a>. But I have a hard time trying to understand the example given in the above mentioned page:</p>  <blockquote>   <p>The proof term for an implication P → Q is a function that takes   evidence for P as input and produces evidence for Q as its output.</p>      <p>Lemma silly_implication : (1 + 1) = 2 → 0 × 3 = 0. Proof. intros H.   reflexivity. Qed.</p>      <p>We can see that the proof term for the above lemma is indeed a   function:</p>      <p>Print silly_implication. (* ===> silly_implication = fun _ : 1 + 1 = 2   => eq_refl        : 1 + 1 = 2 -> 0 * 3 = 0 *)</p> </blockquote>  <p>Indeed, it's a function. But its type does not look right to me. From my reading, the proof term for <code>P -&gt; Q</code> should be a function with an evidence for <code>Q</code> as output. Then, the output of  <code>(1+1) = 2 -&gt; 0*3 = 0</code> should be an evidence for <code>0*3 =  0</code>, alone, right?</p>  <p>But the Coq print out above shows that the function image is <code>eq_refl : 1 + 1 = 2 -&gt; 0 * 3 = 0</code>, instead of <code>eq_refl: 0 * 3 = 0</code>. I don't understand why the hypothesis <code>1 + 1 = 2</code> should appear in the output. Can anyone help explain what is going on here?</p>  <p>Thanks.</p>