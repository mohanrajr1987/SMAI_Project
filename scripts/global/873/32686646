<p>I am writing a program for K-means clustering, to find the clusters  that each point should belong to. There are 8 points and 3 clusters for this code. Somehow in my code the 'entries' function is executing infinitely. I couldn't find where I have gone wrong. This is the logic that I'm following: </p>  <ol> <li><p>Hard coded input of the 8 points</p></li> <li><p>Randomly generate 3 cluster centers</p></li> <li>Calculate distance of each point from the 3 cluster centers and use arr1[][] to store the distances.</li> <li>In cent_tally[][], store the number of the cluster that each point should belong to. eg. 0 for cluster 1, 1 for cluster 2 and 2 for cluster 3. (Also storing the same values in the 4th column of the 2-D array, 'arr1').</li> <li>Calculate the mean centroids (cluster centers) by using the clusters nos. for each point.</li> <li>Again call the 'entries' function to calculate the distances and the cluster no. to which each point should belong, but this time using the 2nd set of centroids.i.e. the mean centroids.</li> <li>If the second set of cluster nos. for each point, (stored in the 2nd column of cent_tally[][]), tallies with the cluster nos. for each point using the randomly generated centroids(first column of cent_tally[][]), then print cent_tally[][], print arr1[][] and stop. </li> </ol>  <p>Here is the code:</p>  <pre><code>#include&lt;iostream&gt; #include&lt;stdio.h&gt; #include&lt;stdlib.h&gt; #include&lt;time.h&gt;  #include&lt;math.h&gt;  using namespace std;  class points { float x; float y;  static int point_cnt; static int flag; int cent_tally[8][4]; int count2;   struct centroids { float cx; float cy; }c[3];  public:  points() { count2=0;      for(int i=0;i&lt;3;i++)     {         c[i].cx=0;         c[i].cy=0;     }      for(int i=0;i&lt;8;i++)     {         for(int j=0;j&lt;4;j++)         {             cent_tally[i][j]=0;         }     }  }   void means(points * );  float dist(float a,float b,float c,float d);  int entries(float c11x,float c11y,float c22x,float c22y,float c33x,float c33y,float arr[8][4],points *p);  };  int points::point_cnt=8; int points::flag=0;  int points::entries(float c11x,float c11y,float c22x,float c22y,float c33x,float c33y,float arr[8][4],points *p) {  float sum1x,sum1y,sum2x,sum2y,sum3x,sum3y; //to calC mean centroids sum1x=0; sum1y=0; sum2x=0; sum2y=0; sum3x=0; sum3y=0;  int cnt1,cnt2,cnt3; cnt1=0; cnt2=0; cnt3=0;                                    //to calC mean centroids    //count2=0; //in the first iteration of entries, count2=0 cout&lt;&lt;"count 2 value:"&lt;&lt;count2&lt;&lt;endl;  for(int k=0;k&lt;8;k++) //0 to 7 for 8 points  {  arr[k][0]=dist(p[k].x,p[k].y,c11x,c11y); arr[k][1]=dist(p[k].x,p[k].y,c22x,c22y); arr[k][2]=dist(p[k].x,p[k].y,c33x,c33y);    float temp,min; temp = (arr[k][0] &lt; arr[k][1])    ? arr[k][0] : arr[k][1]; min =  (arr[k][2] &lt; temp) ? arr[k][2] : temp;  //cout&lt;&lt;"mins:"&lt;&lt;min&lt;&lt;endl;     for(int l=0;l&lt;3;l++)     {         if(arr[k][l]==min)         {         arr[k][3]=l; //0 for c1, 1 for c2, 2 for c3 in 4th column of table         cent_tally[k][count2]=l;             if(l==0)             {                 sum1x+=p[k].x;                 sum1y+=p[k].y;                 cnt1++;             }             else if (l==1)             {                 sum2x+=p[k].x;                 sum2y+=p[k].y;                 cnt2++;              }             else if (l==2)             {   sum3x+=p[k].x;                 sum3y+=p[k].y;                 cnt3++;             }             else             {                 cout&lt;&lt;"";             }         }     }  }  count2++;//for index into cent_tally  //finding mean centroid ...   //re entering values of mean centroid into the same structure created for 3 centroid coordinates ...  c[0].cx=sum1x/cnt1; c[0].cy=sum1y/cnt1;  c[1].cx=sum2x/cnt2; c[1].cy=sum2y/cnt2;  c[2].cx=sum3x/cnt3; c[2].cy=sum3y/cnt3; //now the struct contains mean centroids    for(int i=0;i&lt;8;i++) { int temp=0;     temp=count2-1;     if(cent_tally[i][temp]==cent_tally[i][count2])     {         flag++;     }     else     {     break;     } }   if(flag==8) { cout&lt;&lt;"centroids found: "&lt;&lt;endl; for(int i=0;i&lt;8;i++)     {         for(int j=0;j&lt;4;j++)         {             cout&lt;&lt;" "&lt;&lt;cent_tally[i][j];         }        cout&lt;&lt;endl;     }      return 0;  }  else {  return flag; }  //while(flag!=8) //WHILE ALL 8 entries of latest 2 columns of cent_tally are not matching //{ //entries(c[0].cx,c[0].cy,c[1].cx,c[1].cy,c[2].cx,c[2].cy,arr,&amp;p[0]);  //} }  float points::dist(float a,float b,float c,float d)  {  return (abs(a-c)+abs(b-d));   }      void points:: means(points * p) {  float arr1[8][4]; //array to store dist b/w each point and cluster center and cluster values for each point after distance calculation float arr2[8][4];  //let c1 c2 and c3 be initial cluster centers //float c1x,c2x,c1y,c2y,c3x,c3y;  //Can take input from a file also... p[0].x=2; p[0].y=2;  p[1].x=1; p[1].y=14;  p[2].x=10; p[2].y=7;  p[3].x=1; p[3].y=11;  p[4].x=3; p[4].y=4;  p[5].x=11; p[5].y=8;  p[6].x=4; p[6].y=3;  p[7].x=12; p[7].y=2;   srand ( time(NULL) ); for(int i=0;i&lt;3;i++) //for 3 cluster centers, we need 3 centroids { int randIndex=1+rand()%(point_cnt-i-1);//where 8 is the no. of points c[i].cx=p[randIndex].x; c[i].cy=p[randIndex].y;  }   int val;  val=entries(c[0].cx,c[0].cy,c[1].cx,c[1].cy,c[2].cx,c[2].cy,arr1,&amp;p[0]);  while(val!=8) { val=entries(c[0].cx,c[0].cy,c[1].cx,c[1].cy,c[2].cx,c[2].cy,arr1,&amp;p[0]); }      for(int i=0;i&lt;8;i++)     {         for(int j=0;j&lt;4;j++)         {          cout&lt;&lt;arr1[i][j]&lt;&lt;" ";          }     cout&lt;&lt;endl;     } //displaying 1st table  //2.1 calculate mean centroid //2.2 re enter new values in same table //2.3 first 2 columns of cent_tally //2.4 if not same repeat step 2.1       }    int main()  {  int c=8;    points p[8];  points obj; obj.means(&amp;p[0]);       return 0; } </code></pre>  <p>Another mistake I made, was not initialising flag=0 at the beginning of the 'entries' function!</p>  <p>Now my entries function is not running infinitely, but I have the following problems now:</p>  <ol> <li>Mean centroid(Second set of centroids onwards) is computed wrong after the first set of centroids are used</li> <li>I'm trying to copy the fourth column of arr[][]into the first column and next columns eventually, of cent_tally[][] by using count2 as index , but the first column of cent-tally does not match the 4th column of arr[][]</li> </ol>  <p>I'm unable to figure where I have gone wrong.</p>