<p>I have been trying to run this test for 2 days straight now and I can't figure what is wrong with it:</p>  <pre><code>/*eslint-env mocha */ // var expect = require('chai').expect; var chai = require('chai'); var chaiAsPromised = require("chai-as-promised"); var expect = chai.expect; var Promise = require('bluebird'); var Archive = require('../lib/archive'); var path = require('path'); var fs = Promise.promisifyAll(require('fs-extra')); var globAsync = Promise.promisify(require('glob')); var tar = require('tar-fs'); var zlib = Promise.promisifyAll(require('zlib'));  chai.use(chaiAsPromised);  describe('Archive', function() {   var pkg;   var archive_location;   var subject;    beforeEach(function() {     pkg = {       name: 'test_0790feebb1',       recipient_name: 'Test',       files: {         letter: '../documents/letters/test/letter.tex',         resume: '../documents/cover/cover.tex'       },       compiled_files: {         package: '../documents/letters/test/test.pdf'       }     };     archive_location = path.resolve('archives/test_0790feebb1.tar.gz');       subject = new Archive(pkg);   });    after(function() {     return globAsync('archives/test*')       .each(function(filename) {         return fs.removeAsync(filename);       });   });    describe('#make', function() {     it('has the correct directory structure', function() {       // debugger;       var tmp_extract_path = path.resolve('test/.tmp');       var tarPromise = function(data) {         console.log('tarP'); // never run         return new Promise(function(reject, resolve) {           data             .pipe(zlib.Unzip())             .pipe(tar.extract(tmp_extract_path))             .on('error', reject)             .on('end', resolve);         });       };        var verifyDir = function() {         console.log('verD'); // never run         return Promise.all([             'code',             'pdf',             'code/repo',             'code/documents',             'code/documents/letters',             'code/documents/letters/test',             'code/documents/letters/shared',             'code/documents/cover',             'code/documents/letters'         ].map(function(subpath) {           return fs.statAsync(path.resolve(tmp_extract_path, subpath));         }));       };        return fs.createReadStreamAsync(archive_location)         .then(function(data) { return tarPromise(data); })         .then(function() { return verifyDir(); })         .then(function(files) {           console.log(files); // never run           return expect(true).to.be.true;         })         .catch(function(e) { console.log(e); });     });   }); }); </code></pre>  <p>The various console.log never even get executed and eventually the test times out without any error or stack trace.</p>  <p>I have no idea what I am doing wrong and promises hurt my brain now. When I run the code with node inspector and uncomment the breakpoint, I can see that he value of <code>this._runnable._trace</code> is <code>"done() called multiple times"</code>. I have no idea if this is an actual error nor why it doesn't throw an exception if that's an error. I can't explain either why this is even happening since I am not using any <code>done()</code> callbacks anymore with promises and that my test starts with <code>function()</code> and not <code>function(done)</code> like an async test would</p>  <p>Any ideas?</p>