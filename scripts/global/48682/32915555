<pre><code>var sql = require('mssql') ; var connection = new sql.Connection(config); var transaction;  transaction = connection.transaction().begin().then(function() {   var request;   console.dir(transaction);   return request = transaction.request().query('select top 1 * from [DW].[Customer]').rollback(); }).catch(function(err) {   return logger.error(err); }); </code></pre>  <p>I normally do this sort of thing with callbacks but the set of SQL inserts I have to do here (not shown) is very complicated. I was hoping Promises would make my code easier to read. But when I get to the <code>console.dir</code> it tells me that transation is a <code>Promise { &lt;pending&gt; }</code>. Then it errors: <code>transaction.request is not a function</code>. <a href="https://www.npmjs.com/package/mssql#transaction" rel="nofollow">The docs</a> say that that is a fine way to do it though: </p>  <blockquote>   <p>Transaction can also be created by var transaction =   connection.transaction();. Requests can also be created by var request   = transaction.request();.</p> </blockquote>  <p>Does anyone have some code around that demonstrates how to use transactions with promises in this library? When I make a transaction with <code>connection.transaction()</code> at what point is that object initialized and available for use? Is this library not well-suited for using Promises? </p>