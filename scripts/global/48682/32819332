<p>I have a function called <code>fetchCourseCode(string)</code> that fetches some information from a web server and stores them in to array. I also have ~135 course codes (strings) that should be fetched in discrete times with same period.</p>  <p>Normally, in a non-asynchronous situation, the code should be:</p>  <pre><code>for (eachCode of COURSE_CODES) {     fetchedInformationArray.push(fetchCourseCode(eachCode)); } </code></pre>  <p>However, as this is a time taking operation, <em>node.js</em> event loop escapes to the <code>fetchCourseCode()</code>'s return and we got nothing (an array of <code>undefined</code>s) in the end.</p>  <p>So I tried to use <strong><code>async</code></strong>'s <code>forEachOf</code> function to iterate over array, having constructed a promise manually to the <code>fetchCourseCode()</code> function:</p>  <pre><code>async.forEachOf(kCOURSE_CODES, function(value, key, callback) {     console.log("fetched " + value);      fetchCourseCode(value).then(response) {         schedule[key] = response;          callback();     }, function(error) {         callback(error);     });      }, function(error) {     if (error) {         console.error(error);     } else {         console.log("Fetched schedule: " + JSON.stringify(schedule));     } }); </code></pre>  <p>Unfortunately I found out it is said that using nested promises is an anti-pattern.</p>  <p>I am <em>-desperately thinking of being-</em> not able to use <code>Q.all()</code>, because the list of functions is dynamically changing. Also, <code>async.map</code> couldn't help me: Callback function is not called strangely.</p>  <p>I haven't got to understanding of <strong>node</strong>'s event loop, being pretty new in these lands.</p>