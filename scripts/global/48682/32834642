<p>I am trying to transition from async to promises and this is what I have. If the code looks contrived it's because I simplified it from what I'm working on to make it easier to grasp. I'm struggling to get the Promise.all to execute.</p>  <p>I commented out the async code that I want to implement in promises:</p>  <pre><code>var Promise = require('bluebird'); var fs = Promise.promisifyAll(require('fs-extra')); var path = require('path'); var tar = require('tar-fs');  module.exports = Archive;  function Archive() {   var self = this;   var self.base_dir = '/bar/baz',   var self.file1 = 'foo/file1',   var self.file2 = 'foo/file2',   var self.file3 = 'foo/file3',   var self.file4 = 'foo/file4' }  Archive.prototype.make = function(done) {   var self = this;   // async.series([   //     function(next) {   //       self._prepareFilesDir(next);   //     },   //     function(next) {   //       self._copyFiles(next);   //     },   //     function(next) {   //       self._writeArchive(next);   //     }   // ], done)   self._prepareFilesDir().bind(self)     .then(self._copyFiles.bind(self))     .then(self._writeArchive.bind(self))     .catch(function(e) {       return done(e);     }); };  // ******************************** // * Private functions // ********************************  Archive.prototype._prepareFilesDir = function() {   var self = this;   return fs.emptyDirAsync(self.base_dir); };  Archive.prototype._copyFiles = function() {   var self = this;   var sources = {     file1: path.resolve('baz', 'file1'),     file2: path.resolve('baz', 'file2')     file3: path.resolve('baz', 'file3')     file4: path.resolve('baz', 'file4')     file5: path.resolve('baz', 'file5')   };   var destinations = {     file1: path.resolve(self.base_dir, self.file1),     file2: path.resolve(self.base_dir, self.file2),     file3: path.resolve(self.base_dir, self.file3),     file4: path.resolve(self.base_dir, self.file4),     file5: path.resolve(self.base_dir, self.file5)   };    var filters = {     qux: /^qux/,     bru: /^bru/,     blerg: /blerg$/   };    function copyFile1() {     console.log('hello world');     return fs.copyAsync(sources.file2, destinations.file1, { filter: filters.qux });   };   function copyFile2() {     return fs.copyAsync(sources.file2, destinations.file2);   };   function copyFile3() {     return fs.copyAsync(sources.file3, destinations.file3, { filter: filters.bru });   };   function copyFile4() {     return fs.copyAsync(sources.file4, destinations.file4, { filter: filters.blerg });   };    return Promise.all([       copyFile1,       copyFile2,       copyFile3,       copyFile4   ]);    // async.parallel([   //   copyFile1(next),   //   copyFile2(next),   //   copyFile3(next),   //   copyFile4(next)   // ], function(err) {   //  if (err) return done(err);   //   done(null);   // }) };  Archive.prototype._writeArchive = function() {   var self = this;   var archive_dir_path = path.resolve(self.base_dir, '..');   var tarPromise = function() {     return new Promise(function(resolve, reject) {       tar.pack(self.files_path)         .pipe(fs.createWriteStream(archive_dir_path + '.tar'))         .on('error', reject)         .on('finish', resolve)     });   };    fs.ensureDirAsync(archive_dir_path)     .then(tarPromise); }; </code></pre>  <p>I must be doing something wrong because the 'hello world' is never printed. I think the stream is promisified correctly but I'm not so sure either. I based my conversion on the promise-nuggets.github.io snippets.</p>  <p>How do I have to do the <code>Promise.all</code>? I'd like to keep separate functions as I think it helps understanding the code better.</p>  <p>Thanks,</p>