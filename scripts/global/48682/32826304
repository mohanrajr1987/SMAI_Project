<p>I have an API which returns stock quote data, my problem is that the model variable is first returned undefined before the <code>return_array</code> has data.</p>  <p>I'm not sure how to use promises or some other method to wait for data correctly before filling the variable (besides using a terrible <code>$timeout</code> hack).</p>  <hr>  <p><strong>My problem as you can see here in the chrome inspector</strong> (<code>ticker_chart = undefined</code>):</p>  <p><a href="http://i.stack.imgur.com/0x4JH.png" rel="nofollow"><img src="http://i.stack.imgur.com/0x4JH.png" alt="enter image description here"></a></p>  <p>I need <code>ticker_chart</code> to wait, before getting a value.</p>  <hr>  <p>The first function that calls out to a service to return the ticker quote data:</p>  <pre><code>function renderChart(ticker, limit) {     ticker_chart = TickerChartFactory.returnTickerChartData(ticker, limit);     console.log('ticker_chart = ',ticker_chart); } </code></pre>  <p>The full service function:</p>  <pre><code>function returnTickerChartData(ticker, limit) {      var q = $q.defer();      var get_data = '';     if (limit &gt; 0) {         get_data = '?limit=' + limit;     }      ApiFactory.getTickerQuotes(ticker.ticker).success(         function(data, status, headers, config) {             if (data.status == 'Success') {                 console.log('REST GET Ticker Chart', 'success');                 var data_array = [];                  for (var i=0; i&lt;data.quotes.length; i++) {                     data_array.push([data.quotes[i].start_epoch, data.quotes[i].price]);                 }                  var return_array = [{                     "area": true,                     "key": "Price",                     "color": '#BFBFBF',                     "values": data_array                 }];                  console.log('return_array = ',return_array);                 console.log('q =',q);                 q.resolve(return_array);                 return ticker_chart = return_array;              } else {                 console.log('failed to REST GET Ticker Chart');                 q.reject('failed to REST GET Ticker Chart');                 return ticker_chart = 'failed to REST GET Ticker Chart';             }         }).error(function(data, status) {             console.log('error in getting REST GET Ticker Chart');             q.reject('error in getting REST GET Ticker Chart');             return ticker_chart = 'error in getting REST GET Ticker Chart';         }); } </code></pre>  <p>The <code>getTickerQuotes</code> function in the <code>ApiFactory</code>:</p>  <pre><code>function getTickerQuotes(ticker) {     return $http.get('https://www.ourapi.../api/tickers/quotes/'+ticker, {cache: false}); } </code></pre>  <p>How should I be using the promise here? The only other thing I can think of is using a $scope.watch function to wait till the value of <code>ticker_chart</code> changes before trying to render something.</p>