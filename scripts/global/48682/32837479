<p>I am trying to unit test a module by stubbing one of its dependencies, in this case the <code>UserManager</code></p>  <p>A simplified version of the module is as follows:</p>  <pre><code>// CodeHandler module.exports = function(UserManager) {   return {     oAuthCallback: function(req, res) {       var incomingCode = req.query.code;       var clientKey = req.query.key;       UserManager.saveCode(clientKey, incomingCode)         .then(function(){           res.redirect('https://test.tes');         }).catch(function(err){           res.redirect('back');         }       );     }   }; }; </code></pre>  <p>I'm stubbing the UserManager's <code>saveCode</code> function which returns a <code>Promise</code> such that it returns a resolved Promise, but when I <code>assert</code> that <code>res.redirect</code> has been called, alas at the time of the assertion <code>res.redirect</code> has not yet been called.</p>  <p>A simplified version of the unit test is:</p>  <pre><code>// test describe('CodeHandler', function() {   var req = {     query: {       code: 'test-code',       key: 'test-state'     }   };    var res = {     redirect: function() {}   };    var expectedUrl = 'https://test.tes';   var ch;    beforeEach(function() {     sinon.stub(UserManager, 'saveCode').returns(       new RSVP.Promise(function(resolve, reject){         resolve();       })     );      sinon.stub(res, 'redirect');      ch = CodeHandler(UserManager);   });    afterEach(function() {     UserManager.saveCode.restore();     res.redirect.restore();   });    it('redirects to the expected URL', function(){     ch.oAuthCallback(req, res);     assert(res.redirect.calledWith(expectedUrl));   }) }); </code></pre>  <p>How can I properly stub the promise such that the method under test behaves synchronously?</p>