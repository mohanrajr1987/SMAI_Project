<p>I'm trying to adopt bluebird Promise for my existing project which uses sails.js, here's the snippet:</p>  <pre><code>    var isUserTeamCaptain = function(userId, teamId) {         return new Promise(function(resolve, reject) {             Team.findOne({id: teamId}).then(function(team) {                 if (team) {                     if (userId != team.captain) {                         reject(sails.__('you are not captain, thus cannot edit team info'));                     } else {                         resolve(team);                     }                 } else {                     reject(sails.__('team not found'));                 }             }).catch(function(err) {                 reject(err);             });         });     };     isUserTeamCaptain('5604145aa8944407362d6abf', '560496d157f6995702b3f931').then(         function resolve(team) {             console.log('passed');             return Promise.resolve(User.find());         },         function reject(err) {             console.log('failed');             console.log('the error: ' + err);             throw new Error(err);         }     ).each(function(user) {         console.log(user.username);     }).then(function() {         console.log('we are done with each iteration')     }).catch(function(err) {         console.log(err.message);     }) </code></pre>  <p>It works great, each username can be printed in console, so can 'we are done with each iteration', also in the order I expected.</p>  <p>BUT, if I put the isUserTeamCaptain in another js file, say 'TeamService.js', export and inject TeamService here and then refactor the above snippet of code like so:</p>  <pre><code>    TeamService.isUserTeamCaptain('5604145aa8944407362d6abf', '560496d157f6995702b3f931').then(         function resolve(team) {             console.log('passed');             return Promise.resolve(User.find());         },         function reject(err) {             console.log('failed');             console.log('the error: ' + err);             throw new Error(err);         }     ).each(function(user) {         console.log(user.username);     }).then(function() {         console.log('we are done with each iteration')     }).catch(function(err) {         console.log(err.message);     }) </code></pre>  <p>It complains about </p>  <pre><code>.each(function(user) { ... </code></pre>  <p>being an UNDEFINED FUNCTION. Did I miss anything here?</p>  <p>UPDATE: this is the TeamService.js:</p>  <pre><code>// TeamService.js - in api/services var TeamService = module.exports = {     /**      * Promise version of isUserCaptainOfTeam      */     isUserTeamCaptain: function(userId, teamId) {         return new Promise(function(resolve, reject) {             Team.findOne({id: teamId}).then(function(team) {                 if (team) {                     if (userId != team.captain) {                         reject(sails.__('you are not captain, thus cannot edit team info'));                     } else {                         resolve(team);                     }                 } else {                     reject(sails.__('team not found'));                 }             }).catch(function(err) {                 reject(err);             });         });     } }; </code></pre>  <p>UPDATE: kinda found out where my problem was, I missed </p>  <pre><code>var Promise = require('bluebird'); </code></pre>  <p>in TeamService.js...</p>