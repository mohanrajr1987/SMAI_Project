<p>I've been having some trouble making my app backward compatible for Mac OS X 10.6 systems. I've integrated Crashlytics into the app and it works fine for Mac OS X 10.7 - 10.10 and it works just fine. However, the app also needs to be compatible with the older version of OS X 10.6 and the Crashlytics framework only supports down to 10.7.</p>  <p>I already fixed the first crash due to the libc++ library which did not come bundled with 10.6 by making it an optional include. It's the next crash I can't figure out: Symbol not found: _objc_release If I completely remove all calls to Crashlytics inside the app it works just fine. However, if I include the one line which Crashlytics needs to get started: <code>[Fabric with:@[[Crashlytics class]]];</code> it will crash right after launching with <code>Symbol not found: _objc_release</code>.</p>  <p>The next logical step for me was to add a simple if statement to check if the system version was compatible with the framework, but the app still crashed although if I removed the Crashlytics line the if statement worked just fine!</p>  <p>I'm using Xcode 7, Mac OS X 10.10 with the base SDK set to 10.6. Here is a quick example of what I have tried:</p>  <p><a href="https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/cross_development/Using/using.html" rel="nofollow">Using the suggested way by Apple:</a></p>  <pre><code>Class cls = NSClassFromString(@"Fabric"); if(!cls) {     [Fabric with:@[[Crashlytics class]]];    NSLog(@"Framework is installed!"); } else {   NSLog(@"Framework is not installed!"); } </code></pre>  <p>Comparing System version numbers:</p>  <pre><code>if(NSAppKitVersionNumber &gt;= NSAppKitVersionNumber10_7) {     [Fabric with:@[[Crashlytics class]]];    NSLog(@"Framework is installed!"); } else {   NSLog(@"Framework is not installed!"); } </code></pre>  <p>Am I missing something obvious here?</p>