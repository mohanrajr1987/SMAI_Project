<p>I'm following <a href="http://derekmolloy.ie/writing-a-linux-kernel-module-part-1-introduction/#comment-30469" rel="nofollow">Derek Molloys guide</a> to building loadable kernel modules, but get stuct at some points.</p>  <p>I have the kernel code in a .c-file: <strong>hello.c</strong></p>  <pre><code>#include &lt;linux/init.h&gt;             // Macros used to mark up functions e.g., __init __exit #include &lt;linux/module.h&gt;           // Core header for loading LKMs into the kernel #include &lt;linux/kernel.h&gt;           // Contains types, macros, functions for the kernel  MODULE_LICENSE("GPL");              ///&lt; The license type -- this affects runtime behavior MODULE_AUTHOR("Derek Molloy");      ///&lt; The author -- visible when you use modinfo MODULE_DESCRIPTION("A simple Linux driver for the BBB.");  ///&lt; The description -- see modinfo MODULE_VERSION("0.1");              ///&lt; The version of the module  static char *name = "world";        ///&lt; An example LKM argument -- default value is "world" module_param(name, charp, S_IRUGO); ///&lt; Param desc. charp = char ptr, S_IRUGO can be read/not changed MODULE_PARM_DESC(name, "The name to display in /var/log/kern.log");  ///&lt; parameter description  /** @brief The LKM initialization function  *  The static keyword restricts the visibility of the function to within this C file. The __init  *  macro means that for a built-in driver (not a LKM) the function is only used at initialization  *  time and that it can be discarded and its memory freed up after that point.  *  @return returns 0 if successful  */ static int __init helloBBB_init(void){    printk(KERN_INFO "EBB: Hello %s from the BBB LKM!\n", name);    return 0; }  /** @brief The LKM cleanup function  *  Similar to the initialization function, it is static. The __exit macro notifies that if this  *  code is used for a built-in driver (not a LKM) that this function is not required.  */ static void __exit helloBBB_exit(void){    printk(KERN_INFO "EBB: Goodbye %s from the BBB LKM!\n", name); }  /** @brief A module must use the module_init() module_exit() macros from linux/init.h, which  *  identify the initialization function at insertion time and the cleanup function (as  *  listed above)  */ module_init(helloBBB_init); module_exit(helloBBB_exit); </code></pre>  <p>and the makefile as this: <strong>Makefile</strong></p>  <pre><code>obj-m+=hello.o  all: make -C /lib/modules/$(shell uname -r)/build/ M=$(PWD) modules clean: make -C /lib/modules/$(shell uname -r)/build/ M=$(PWD) clean </code></pre>  <p>when I try to run <code>make</code> in a directory with onl the two above files, i get </p>  <blockquote>   <p>Make: Nothing to be done for all</p> </blockquote>  <p>I'm running <strong>3.8.13-bone47</strong>, but I wasn't able to find the exact header files matching on this <a href="http://rcn-ee.net/deb/precise-armhf/" rel="nofollow">link</a> that Derek recommended, so I downloaded <strong>3.8.13-bone71</strong> instead. Could that be the problem? Do I have to download the headers, when I'm compiling in directly on the BeagleBone? I have also tried change the lines in the Makefile to a hardcoded distribution name that matches mine (3.8.13-bone47), doesn't work either.</p>  <p>Thank you very much guys!</p>