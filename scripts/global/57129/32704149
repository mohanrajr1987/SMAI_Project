<p>I'm a front-end developer, and I'm worried about the best way to target my DOM. </p>  <p>Let's imagine a tiny form to create a new zombie : </p>  <pre><code>&lt;h1&gt;Add a new zombie&lt;/h1&gt; &lt;form id="create-zombie"&gt;   &lt;input id="zombie" type="text" name="zombie" /&gt;   &lt;input id="lvl" type="text" name="lvl" /&gt;   &lt;button type="submit"&gt;Add&lt;/button&gt; &lt;/form&gt; </code></pre>  <p>...and if I want to get the values of <code>zombie</code> and <code>lvl</code>, I will code something like this: </p>  <pre><code>class Zombie_Add extends Controller     # Dom References   el:      'form': '#create-zombie'     'zombie': '#zombie'     'lvl': '#lvl'    run: -&gt;      @on 'submit', @el.form, @validate    validate: (e) =&gt;      e.preventDefault()      zombie = $(@el.zombie).val()     lvl = $(@el.lvl).val()  module.exports = Zombie_Add </code></pre>  <p>That's "ok" and it does the job, but I have some problems with that "structure" : </p>  <ol> <li><p>If somebody touches the DOM and removes an ID, I'm just fucked, it breaks my code (Captain Obvious spotted !)</p></li> <li><p>For more complicated selectors, it's just a mess (I'm thinking about some stuff like that <code>[name^="dummy-"] input:first</code>). I guess it's easy to imagine how shitty the names of <code>el</code> are.</p></li> </ol>  <p>Anyway, what I want to learn today is what's the best way to target the DOM from JS. Is it better to use IDs, <code>class</code> values or, <code>data-*</code> attributes? How we can prettify a selector with plain English, etc...</p>