<p>I get a 404 error when I try to retrieve emails with the OUTLOOK REST API:<code>Messages: Array ( [errorNumber] =&gt; 404 [error] =&gt; Request returned HTTP error 404 ) 1</code></p>  <p>The code I'm using is the following from @JasonJohMSFT <a href="https://github.com/jasonjoh/php-tutorial" rel="nofollow">https://github.com/jasonjoh/php-tutorial</a> </p>  <pre><code>&lt;?php </code></pre>  <p>class OutlookService {     private static $outlookApiUrl = "<a href="https://outlook.office.com/api/v1.0" rel="nofollow">https://outlook.office.com/api/v1.0</a>";</p>  <pre><code>public static function getMessages($access_token, $user_email) {   $getMessagesParameters = array (     // Only return Subject, DateTimeReceived, and From fields     "\$select" =&gt; "Subject,DateTimeReceived,From",     // Sort by DateTimeReceived, newest first     "\$orderby" =&gt; "DateTimeReceived DESC",     // Return at most 10 results     "\$top" =&gt; "10"   );    $getMessagesUrl = self::$outlookApiUrl."/Me/Messages?".http_build_query($getMessagesParameters);    return self::makeApiCall($access_token, $user_email, "GET", $getMessagesUrl); }  public static function makeApiCall($access_token, $user_email, $method, $url, $payload = NULL) {   // Generate the list of headers to always send.   $headers = array(     "User-Agent: php-tutorial/1.0",         // Sending a User-Agent header is a best practice.     "Authorization: Bearer ".$access_token, // Always need our auth token!     "Accept: application/json",             // Always accept JSON response.     "client-request-id: ".self::makeGuid(), // Stamp each new request with a new GUID.     "return-client-request-id: true",       // Tell the server to include our request-id GUID in the response.     "X-AnchorMailbox: ".$user_email         // Provider user's email to optimize routing of API call   );    $curl = curl_init($url);    switch(strtoupper($method)) {     case "GET":       // Nothing to do, GET is the default and needs no       // extra headers.       error_log("Doing GET");       break;     case "POST":       error_log("Doing POST");       // Add a Content-Type header (IMPORTANT!)       $headers[] = "Content-Type: application/json";       curl_setopt($curl, CURLOPT_POST, true);       curl_setopt($curl, CURLOPT_POSTFIELDS, $payload);       break;     case "PATCH":       error_log("Doing PATCH");       // Add a Content-Type header (IMPORTANT!)       $headers[] = "Content-Type: application/json";       curl_setopt($curl, CURLOPT_CUSTOMREQUEST, "PATCH");       curl_setopt($curl, CURLOPT_POSTFIELDS, $payload);       break;     case "DELETE":       error_log("Doing DELETE");       curl_setopt($curl, CURLOPT_CUSTOMREQUEST, "DELETE");       break;     default:       error_log("INVALID METHOD: ".$method);       exit;   }    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);   curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);   $response = curl_exec($curl);   error_log("curl_exec done.");    $httpCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);   error_log("Request returned status ".$httpCode);    if ($httpCode &gt;= 400) {     return array('errorNumber' =&gt; $httpCode,                  'error' =&gt; 'Request returned HTTP error '.$httpCode);   }    $curl_errno = curl_errno($curl);   $curl_err = curl_error($curl);    if ($curl_errno) {     $msg = $curl_errno.": ".$curl_err;     error_log("CURL returned an error: ".$msg);     curl_close($curl);     return array('errorNumber' =&gt; $curl_errno,                  'error' =&gt; $msg);   }   else {     error_log("Response: ".$response);     curl_close($curl);     return json_decode($response, true);   } }  // This function generates a random GUID. public static function makeGuid(){     if (function_exists('com_create_guid')) {       error_log("Using 'com_create_guid'.");       return strtolower(trim(com_create_guid(), '{}'));     }     else {       error_log("Using custom GUID code.");       $charid = strtolower(md5(uniqid(rand(), true)));       $hyphen = chr(45);       $uuid = substr($charid, 0, 8).$hyphen              .substr($charid, 8, 4).$hyphen              .substr($charid, 12, 4).$hyphen              .substr($charid, 16, 4).$hyphen              .substr($charid, 20, 12);        return $uuid;     } } } ?&gt; </code></pre>  <p>and I launch it this way:</p>  <pre><code> require('helpers/reader/outlook.php');                $messages = OutlookService::getMessages($_SESSION['access_token'], $_SESSION['email']); ?&gt;              &lt;p&gt;Messages: &lt;?php echo print_r($messages) ?&gt;&lt;/p&gt; </code></pre>