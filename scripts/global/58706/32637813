<h1>Correctly Building a Sencha Touch Reusable Multi-Component View</h1>  <p>This has been a question I have been trying to solve off and on again. </p>  <p>Here's a simplified example of the application structure.</p>  <p>Tapping on app dashboard launches one of many Sub 'workspaces'. Each workspace has pretty much the same stucture.</p>  <p>```bash Ext.Panel </p>  <pre><code>Ext.Titlebar    // Title of workspace  Ext.Toolbar      Ext.Button  // Close Button: will always be in the toolbar.                 // Other Buttons can be added to the toolbar specific to the needs  Ext.Container   // Where workspace gets set with a child view with grid, charts, etc.  Ext.Toolbar     // Will have a constant centered message area that's configured conditionally </code></pre>  <p>An example 'template' view to then be extended for actual use in the app.</p>  <pre><code>Ext.define('MyApp.ux.WorkspaceOverlay', {     extend: 'Ext.Panel',      xtype: 'ux-workspaceoverlay',      requires: [...],      config: {         ui: 'workspace',          top: 47,         bottom: 0,         left: 0,         right: 0,          layout: 'vbox',          items: [{             // 'title'             // configurable title             xtype: 'titlebar',             docked: 'top',             title: 'Reusable Title',                 titleAlign: 'left'         }, {             // 'menuBar'             // configurable but close button is constant             xtype: 'toolbar',             ui: 'sub',             items: [{                 text: 'close',                 align: 'right'             }]         }, {             // 'workspace'             // gets set with an object or xtype         }, {             // 'pgToolbar'             // Nothing really added but message will be set based on returned data              xtype: 'toolbar',             docked: 'bottom',             layout: { pack: 'center' },             items: [{                 iconCls: 'backward',                     itemId: 'pgBackwardBtn'             }, {                 xtype: 'label',                 itemId: 'recordPagingMessage',                 html: '...'             }, {                 iconCls: 'forward',                 itemId: 'pgForwardBtn'             }]         }]     } }); </code></pre>  <p>I'm hoping I can figure out a way to accomplish something like this..</p>  <pre><code>Ext.define('MyApp.view.FeatureOne', {     extend: 'MyApp.ux.WorkspaceOverlay',      config: {          title: 'Feature One',          menuBar: {             // toolbar config but not replace close button             // additional components can be added here.         },          workspace: {             // this would configure the middle section of the view             // most likely an xtype reference but could be setup here maybe              items: [{                 xtype: 'grid',                 // etc etc.             }}         },          pgToolbar : {             // most likely set by controller for this feature         }     } }); </code></pre>  <p>Looking at the src for other components like that Tab Panel I wasn't sure what was actually getting the title from the config and setting that to the toolbar nice and simply. </p>  <p>If anyone has any suggestions or tips on how to improve this please share. Maybe this isn't the best approach. </p>  <p>Thanks!</p>