<p>Hi I am creating a class in which I can pass down functions to be called either periodicity or once off. . The problem is that my functions I am passing down gets called immediately, after that when they are suppose to be called I get the following error:</p>  <pre><code>java.lang.NullPointerException at TimedFunction$2.run(TimedFunction.java:41) at java.util.TimerThread.mainLoop(Unknown Source) at java.util.TimerThread.run(Unknown Source) </code></pre>  <p>The Base class is as follow (only relivant sections):</p>  <pre><code>import java.util.concurrent.Callable; ...      public TimedFunction () {}      public void addSingleEvent (Callable func, int seconds){         //Convert to seconds from miliseconds                 int time = seconds * 1000;                  //Create a new timer                 new java.util.Timer().schedule(                          new java.util.TimerTask() {                             @Override                             public void run() {                                 try {                                     func.call();                                 } catch (Exception e) {                                     // TODO Auto-generated catch block                                     e.printStackTrace();                                 }                             }                         },                          time                  );     } </code></pre>  <p>I then do a testing class that looks like this:</p>  <pre><code>public static void main(String[] args) {     // TODO Auto-generated method stub     TimedFunction tm = new TimedFunction();      tm.addSingleEvent(helloWorld(), 5);     tm.addRepeatedEvent(dataWorld(), 1); }  private static Callable helloWorld() {     System.out.print("Hello world!");     System.out.print(" ");     return null; } </code></pre>