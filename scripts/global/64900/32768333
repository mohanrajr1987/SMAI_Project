<p>Here are 2 samples of the same test. The only difference is that first one uses a promise in <code>beforeAll</code> block to assign a value to the variable while the second one assigns the value directly.</p>  <p>I raised a similar question <a href="http://stackoverflow.com/questions/32480430/running-spec-after-promise-has-been-resolved">Running spec after promise has been resolved</a> with one of the comments pointing to this issue <a href="https://github.com/jasmine/jasmine/issues/412" rel="nofollow">https://github.com/jasmine/jasmine/issues/412</a> which says that this is not supported in Jasmine. Has somebody figured out any workaround?</p>  <p><strong>This fails with</strong> <code>TypeError: Cannot read property 'forEach' of undefined</code></p>  <pre><code>describe('Async car test', function () {      var cars;      beforeAll(function (done) {         // getCars() is a promise which resolves to ['audi', 'bmw']         getCars().then(function (data) {             cars = data;             console.log(cars) // ['audi', 'bmw']             done();         });     });      cars.forEach(function (car) {         it('car ' + car, function () {             expect(car).toBe(car);         });     }); }); </code></pre>  <p><strong>This works fine</strong></p>  <pre><code>describe('Car test', function () {      var cars = ['audi', 'bmw'];      cars.forEach(function (car) {         it('car ' + car, function () {             expect(car).toBe(car);         });     }); }); </code></pre>