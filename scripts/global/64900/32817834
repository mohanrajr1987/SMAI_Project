<p>I have written a couple of controllers using the .$on and have been able to successfully test them, see plunker: <a href="http://plnkr.co/edit/8cwcdPc26PVAURmVFR8t?p=preview" rel="nofollow">http://plnkr.co/edit/8cwcdPc26PVAURmVFR8t?p=preview</a></p>  <p>However, i now have a directive using .$on in its link function:</p>  <pre><code>app.directive('myDirective', function($rootScope, $timeout) {     return {         restrict: 'A',         replace: true,         scope: {},         link: function(scope,element,attrs){              scope.$on("step1", function(event) {                 $rootScope.$broadcast('step3');                 scope.hidden = false;                 scope.shown = false;             });             scope.$on("step2", function(event) {                 scope.msg = '';                 scope.errorCase = false;                 scope.infoCase = false;             });             scope.$on("step3", function(event) {                 scope.hidden = true;             });         },         template:                          '&lt;div class="wrapper"&gt;' +                             '&lt;p&gt;{{ msg }}&lt;/p&gt;' +                         '&lt;/div&gt;'     }; }); </code></pre>  <p>I have written the following test:</p>  <pre><code>describe('myDirective', function () {     var $scope, compile, element;      beforeEach(module('myApp'));      beforeEach(inject(function ($rootScope, $compile) {         $scope = $rootScope.$new();         element = angular.element("&lt;section my-directive&gt;&lt;/section&gt;");         $compile(element)($scope);         $scope.$digest();     }));      it('should initialise step1', function (){         var sub_scope = $scope.$new();         sub_scope.$emit('step1');         expect($scope.hidden).toBeFalsy();         expect($scope.shown).toBeFalsy();     }); }); </code></pre>  <p>However the test is not running at all so no error is displaying. I have followed the same approach as how i the controller however i think this is incorrect for a directive. Any suggestions?</p>