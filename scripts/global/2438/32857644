<p>I'm new to doctrine and I got stuck. Any help will be appreciated. I created two entities: Task and Group with a many to many relation with group being the owning side. I tried to persist them. Task gets persisted, but group trows an SQL exception.</p>  <p>Here is the code for <strong>Task.php</strong>:</p>  <pre><code>&lt;?php  namespace AppBundle\Entity;  /**  * Task  */ class Task { /**  * @var integer  */ private $id;  /**  * @var string  */ private $task;  /**  * @var \DateTime  */ private $dueDate;  /**  * @var \Doctrine\Common\Collections\Collection  */ private $groups;  /**  * Constructor  */ public function __construct() {     $this-&gt;groups = new \Doctrine\Common\Collections\ArrayCollection(); }  /**  * Get id  *  * @return integer  */ public function getId() {     return $this-&gt;id; }  /**  * Set task  *  * @param string $task  *  * @return Task  */ public function setTask($task) {     $this-&gt;task = $task;      return $this; }  /**  * Get task  *  * @return string  */ public function getTask() {     return $this-&gt;task; }  /**  * Set dueDate  *  * @param \DateTime $dueDate  *  * @return Task  */ public function setDueDate($dueDate) {     $this-&gt;dueDate = $dueDate;      return $this; }  /**  * Get dueDate  *  * @return \DateTime  */ public function getDueDate() {     return $this-&gt;dueDate; }  /**  * Add group  *  * @param \AppBundle\Entity\Group $group  *  * @return Task  */ public function addGroup(\AppBundle\Entity\Group $group) {     $this-&gt;groups[] = $group;      return $this; }  /**  * Remove group  *  * @param \AppBundle\Entity\Group $group  */ public function removeGroup(\AppBundle\Entity\Group $group) {     $this-&gt;groups-&gt;removeElement($group); }  /**  * Get groups  *  * @return \Doctrine\Common\Collections\Collection  */ public function getGroups() {     return $this-&gt;groups; } } </code></pre>  <p><strong>Task mapping</strong> </p>  <pre><code>AppBundle\Entity\Task:   type: entity   table: task   id:    id:      type: integer      generator: { strategy: AUTO }   fields:     task:       type: string       length: 256     dueDate:       type: date    manyToMany:     groups:       targetEntity: Group        mappedBy: tasks </code></pre>  <p><strong>Group.php</strong></p>  <pre><code>    &lt;?php      namespace AppBundle\Entity;      /**      * Group      */     class Group     {         /**          * @var integer          */         private $id;          /**          * @var string          */         private $name;           /**          * Get id          *          * @return integer          */         public function getId()         {             return $this-&gt;id;         }          /**          * Set name          *          * @param string $name          *          * @return Group          */         public function setName($name)         {             $this-&gt;name = $name;              return $this;         }          /**          * Get name          *          * @return string          */         public function getName()         {             return $this-&gt;name;         }         /**          * @var \Doctrine\Common\Collections\Collection          */         private $tasks;          /**          * Constructor          */         public function __construct()         {             $this-&gt;tasks = new \Doctrine\Common\Collections\ArrayCollection();         }          /**          * Add task          *          * @param \AppBundle\Entity\Task $task          *          * @return Group          */         public function addTask(\AppBundle\Entity\Task $task)         {             $this-&gt;tasks[] = $task;              return $this;         }          /**          * Add tasks          *          * @param array          *          * @return Group          */         public function addTasks(array $tasks)         {             foreach ($tasks as $task) {                 if (is_a($task, 'AppBundle\Entity\Task')) {                     $this-&gt;tasks[] = $task;                 }             }             return $this;         }          /**          * Remove task          *          * @param \AppBundle\Entity\Task $task          */         public function removeTask(\AppBundle\Entity\Task $task)         {             $this-&gt;tasks-&gt;removeElement($task);         }          /**          * Get tasks          *          * @return \Doctrine\Common\Collections\Collection          */         public function getTasks()         {             return $this-&gt;tasks;         }     } </code></pre>  <p><strong>Group mapping</strong></p>  <pre><code> AppBundle\Entity\Group:       type: entity       table: group       id:         id:           type: integer           generator: { strategy: AUTO }       fields:         name:           type: string       manyToMany:         tasks:           targetEntity: Task           inversedBy: groups           cascade: ['persist', 'remove'] </code></pre>  <p><strong>The controller</strong></p>  <pre><code>class DoctrineController extends Controller {     /**      * @return \Symfony\Component\HttpFoundation\Response      */     public function setupAction()     {         $group = new Group();         $em = $this-&gt;getDoctrine()-&gt;getManager();          $tasks = $em-&gt;getRepository('AppBundle:Task')-&gt;findAll();         $group-&gt;setName('personal');         $group-&gt;addTasks($tasks);         $em-&gt;persist($group);         $em-&gt;flush();          echo 'success';          return $this-&gt;render('AppBundle:Doctrine:setup.html.twig', array(         ));     } } </code></pre>  <p><strong>The exception:</strong></p>  <pre><code>An exception occurred while executing 'INSERT INTO group (name) VALUES (?)' with params ["personal"]:  SQLSTATE[42000]: Syntax error or access violation: 1064 You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'group (name) VALUES ('personal')' at line 1  </code></pre>  <p>I think it has to do with table constraints, but I don't know how to fix it. I'm pretty sure there's a flaw in my logic. If anyone can point me into the right direction with a quick-fix and an explanation/link to an article as to why this works like it does, I'll be very grateful.</p>