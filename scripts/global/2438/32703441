<p>I am trying to work with a many-to-many mapping, finding subsets of one set that map to specific subsets of the other set.</p>  <p>I have many genes.  Each gene is a member of one or more COGs (and vice versa), eg.</p>  <ul> <li>gene1 is member of COG1</li> <li>gene1 is member of COG1003</li> <li>gene2 is member of COG2</li> <li>gene3 is member of COG273</li> <li>gene4 is member of COG1</li> <li>gene5 is member of COG273</li> <li>gene5 is member of COG71</li> <li>gene6 is member of COG1</li> <li>gene6 is member of COG273</li> </ul>  <p>I have a short set of COGs that represents an enzyme, eg. COG1,COG273.</p>  <p>I want to find all sets of genes that between them have membership of every COG in the enzyme, but without unnecessary overlaps (in this case, for instance, 'gene1 and gene6' would be spurious as gene6 is already a member of both COGs).</p>  <p>In this example, the answers would be:</p>  <ul> <li>gene1 and gene3</li> <li>gene1 and gene5</li> <li>gene3 and gene4</li> <li>gene4 and gene5</li> <li>gene6</li> </ul>  <p>Although I could get all members of each COG and create a 'product', this would contain spurious results (as mentioned above) where more genes than necessary are in the set.</p>  <p>My mappings are currently contained in a dictionary where the key is the gene ID and the value is a list of the COG IDs of which that gene is a member.  However I accept that this might not be the best way to have the mapping stored.</p>