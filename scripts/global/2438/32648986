<p>I have tables with Many-To-Many relation as the following: </p>  <pre class="lang-none prettyprint-override"><code>Clubmember (member_id   int(11) not null auto_increment, member_name varchar(50), address varchar(100))  Film(film_id    int(11) Not null auto_increment title varchar(50), release_date varchar(10))  Rent(member_id  int(11) Not null, film_id int(11) Not null primary key(filmId, member_id), foreign key(member_id) references(clubMember.memberId), foreign key(film_id) references(film.filmId) ) </code></pre>  <p>and use Many-to-Many annotation to model the classes as the following:</p>  <pre><code>@Entity @Table(name="ClubMember")  public class ClubMember {      @Id @GeneratedValue     @Column(name="member_id")     private int memberId;      @Column (name="member_name")     private String name;      @Column (name="address")     private String address;      @ManyToMany(fetch=FetchType.LAZY,mappedBy="renter")     private Set&lt;Film&gt; rentedFilm=new HashSet&lt;Film&gt;();     .... }   @Entity @Table(name="Film") public class Film {      @Id @GeneratedValue     @Column(name="film_id")     private int filmId;     @Column (name="title")     private String filmTitle;     @Column (name="release_date")     private String releaseDate;      @ManyToMany(fetch=FetchType.LAZY, cascade=CascadeType.ALL)     @JoinTable(name="RENT",                 joinColumns={@JoinColumn(name="film_id")},                 inverseJoinColumns={@JoinColumn(name="member_id")})     private Set&lt;ClubMember&gt; renter=new HashSet&lt;ClubMember&gt;();  } </code></pre>  <p>And I am trying to retrieve all film that is rented by a particular clubmember. With Sql I would write something like:</p>  <pre><code>select Clubmember.member_id,  Clubmember.member_name, Film.title from ClubMember,Rent,Film  Where Clubmember.member_id = Rent.member_id and Film.film_id=Rent.film_id; </code></pre>  <p>I tried to use HQL, but i found some trouble:</p>  <p>I have tried something like this</p>  <pre><code> "Select F.filmId, F.filmTitle, M.name From Film F join F.renter M where F.filmId = :fId and M.memberId=:mId " </code></pre>  <p>and supply the argument for <code>fId</code> and <code>mId</code> from two queries of </p>  <p><code>Select memberId from ClubMember</code> and <code>Select filmId from Film</code></p>  <p>But the result is the HQL query is malformed with exception</p>  <pre class="lang-none prettyprint-override"><code> Exception in thread "main" org.hibernate.hql.ast.QuerySyntaxException: unexpected token: , near line 1, column 116 [Select F.filmId, F.filmTitle, M.name   From com.mycontact.manytomany.Film F join F.renter M where F.filmId = :fId0_, :fId1_, :fId2_ and M.memberId=:mId0_, :mId1_ ] </code></pre>  <p>In fact I am quite not clear how to query this kind of request with HQL. Can anybody please give some hint. </p>  <p>Versions of jars for hibernate: hibernate-annotations : 3.3.0.GA hibernate-commons-annotations: 3.0.0.GA hibernate-c3p0: 3.6.3.Final</p>  <p>Creating the query :</p>  <pre><code>    List listFilmId=session.createQuery("Select F.filmId from Film F").list();     List listMemberId=session.createQuery("Select M.memberId from ClubMember M").list();       Query diffQuery=session.createQuery("Select F.filmId, F.filmTitle, M.name  "             + " From Film F join F.renter M where F.filmId = :fId and M.memberId=:mId ");       diffQuery.setParameterList("fId", listFilmId);     diffQuery.setParameterList("mId", listMemberId); </code></pre>