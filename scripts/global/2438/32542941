<p>I have the following 3 domain objects: <code>Competition</code>, <code>Season</code>, and <code>Match</code></p>  <p><code>Competition</code> has many <code>Seasons</code><br> <code>Season</code> has many <code>competitions</code><br> <code>Competition</code> is the aggregate root for <code>Season</code> because a <code>Season</code> cannot exist without a <code>Competition</code>  </p>  <p>Examples:<br> <code>Competition</code>:<br> Premiership -> Season 1, Season 2<br> FA Cup -> Season 1, Season 2<br> League Cup -> Season 1, Season 2</p>  <p><code>Season</code>:<br> Season 1 -> Premiership, FA Cup, League Cup<br> Season 2 -> Premiership, FA Cup, League Cup  </p>  <p><code>Competition</code> also has many <code>Matches</code><br> <code>Season</code> also has many <code>Matches</code>  </p>  <p><code>competition-&gt;getMatches()</code> returns all <code>matches</code> for every <code>season</code><br> <code>season-&gt;getMatches()</code> returns all <code>matches</code> for every <code>competition</code></p>  <p><strong>Question.</strong> In the context of DDD what is the best way to get all matches for a combination of competition and season? For example, matches just from Premiership Season 1?</p>  <p>As far as I am aware there are 3 approaches:  </p>  <ol> <li>Pass in <code>Season</code> into <code>Premiership-&gt;getMatches(Season)</code> with a loop find <code>Competition</code> with that <code>Season</code>, then with another loop find <code>Matches</code> belonging to both the selected <code>Competition</code> and the passed in <code>Season</code>. The same principle can be applied vice versa <code>Season 1-&gt;getMatches(Competition)</code>. But what about perfomrance?</li> <li>Implement the Temporal Pattern.</li> <li>Just create in repository/dao/whatever a method to <code>findMatchesByCompetitionAndSeason(Competition, Season)</code> but doesn't this defeat the purpose of DDD?</li> </ol>  <p>Thanks for your time</p>