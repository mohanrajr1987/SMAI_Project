<p>This method works, except it returns List<code>&lt;object</code>> when what I really want is List<code>&lt;Resource</code>> when specificType is Resource (and List<code>&lt;YYY</code>> when specificType is YYY, and so on).</p>  <p>How can I rearrange the method signature to return List<code>&lt;specificType</code>>?  Then, is there a better way to do this?  The items in List<code>&lt;object</code>> are deserialized from many different types in this assembly.  I'm trying to create lists of ActualType and return that list to caller.  Hope this makes sense.</p>  <pre><code>private static ICollection&lt;object&gt; GetSpecificTypeList(Dictionary&lt;string, List&lt;object&gt;&gt; objectListDictionary, Type specificType) {     Contract.Requires(objectListDictionary != null);     Contract.Requires(specificType != null);      var typeFullName = specificType.FullName;     var typedCollection = (IList)Activator.CreateInstance(typeof(List&lt;&gt;).MakeGenericType(specificType));     var collection = objectListDictionary.SingleOrDefault(q =&gt; q.Key.Equals(typeFullName)).Value;     foreach (var obj in collection)     {         typedCollection.Add(Convert.ChangeType(obj, specificType));     }      return collection; }  var resourceList = GetSpecificTypeList(package.FilesDictionary, typeof(Resource)); </code></pre>  <p>Would dynamic help?</p>