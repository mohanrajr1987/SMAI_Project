<p>I have an interface</p>  <pre><code>public interface IFetchData&lt;TEntity&gt; {     IEnumerable&lt;TEntity&gt; GetItems(); } </code></pre>  <p>Two classes inherit from this interface <code>FetchFromDatabase</code> and <code>FetchFromCollection</code>. The purpose is to switch between classes injected to another class that let's say present them on screen etc. Depending on type used, I would like to fetch data from a particular collection depending on a type. It was not a problem to implement this functionality in <code>FetchFromDatabase</code> because <code>DbContext</code> has method <code>DbContext.Set&lt;&gt;()</code> which returns particular table.</p>  <p>I am looking for the way to do it using collections. In <code>FetchFromCollection</code> in line 23: <code>return modules.Set();</code>, compiler reports error:</p>  <blockquote>   <p>Error 2   Cannot implicitly convert type 'System.Collections.Generic.IEnumerable&lt;MainProgram.Models.Module&gt;' to 'System.Collections.Generic.IEnumerable&lt;TEntity&gt;'. An explicit conversion exists (are you missing a cast?)</p> </blockquote>  <p>I don't know how to convert <code>Module</code> class to generic type <code>TEntity</code>. I tried to use intermediate class <code>ModelBase</code> and inherit to concrete definitions but then I would have to use another level of injection and decide by myself to which concrete class to use.</p>  <p>I found something here <a href="http://stackoverflow.com/questions/266115/pass-an-instantiated-system-type-as-a-type-parameter-for-a-generic-class">Pass An Instantiated System.Type as a Type Parameter for a Generic Class</a> which is the way of using reflection. I am still confused how to achieve this. Any suggestions please?</p>  <p>FetchFromDatabase</p>  <pre><code>public class FetchFromDatabase&lt;TEntity&gt; : IFetchData&lt;TEntity&gt;     where TEntity : class {     private readonly MainDBContextBase context;      public FetchFromDatabase(MainDBContextBase context)     {         if (context == null)             throw new ArgumentNullException("DB context");         this.context = context;     }      public IEnumerable&lt;TEntity&gt; GetItems()     {         return context.Set&lt;TEntity&gt;();     } } </code></pre>  <p>FetchFromCollection</p>  <pre><code>public class FetchFromCollection&lt;TEntity&gt; : IFetchData&lt;TEntity&gt;     where TEntity : class {     private readonly InitializeComponents components;     private ModelModules modules;     private ModelSpecializations specializations;     private ModelTeachers techers;     private ModelStudents students;      public FetchFromCollection(InitializeComponents components)     {         if (components == null)             throw new ArgumentNullException("Context");         this.components = components;     }      public IEnumerable&lt;TEntity&gt; GetItems()     {         if (typeof(TEntity) == typeof(Module))         {             if (modules == null)                 modules = new ModelModules(components);             return modules.Set();         }         return null;     } } </code></pre>