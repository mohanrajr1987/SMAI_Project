<pre><code>public class ModelMapper implements ResultSetMapper&lt;Model&gt; {     public Model map(int index, ResultSet resultSet, StatementContext ctx) throws SQLException {         // Get result set meta data &amp; column count         ResultSetMetaData metaData = resultSet.getMetaData();         int columns = metaData.getColumnCount();          Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(columns);         for (int i = 1; i &lt;= columns; ++i) {             String columnName = metaData.getColumnName(i);             map.put(columnName, resultSet.getObject(columnName));         }          ObjectMapper objectMapper = new ObjectMapper();         objectMapper.setPropertyNamingStrategy(PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES);          return objectMapper.convertValue(map, Model.class);     } } </code></pre>  <p>In my <code>ModelImplDao.class</code> I have registered it as <code>@RegisterMapper(ModelMapper.class)</code>. Since I can see that <code>ModelMapper</code> class there is exactly one parameter <code>Model</code>, how can I create a class that would be generic and parameterised to take <code>Model</code> as a parameter and I am also able to register it in <code>ModelImplDao.class</code> as a mapper?</p>