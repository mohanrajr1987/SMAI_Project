<p>Scratching my bald patch....I have a generic Interface</p>  <pre><code>interface IGenericInterface&lt;T&gt; {     T GenericTypeProperty {get; set;}     void PerformService();  } </code></pre>  <p>I have server classes that implement the generic interface and do some stuff</p>  <pre><code>public class ServeRich : IGenericInterface&lt;RichPeople&gt; {     RichPeople GenericTypeProperty {get; set;}     void PerformService() { //Serving the rich }  }  public class ServePoor : IGenericInterface&lt;PoorPeople&gt; {     PoorPeople GenericTypeProperty {get; set;}     void PerformService() { //Serving the Poor } } </code></pre>  <p>Then I have a Service class as follows that I want to invoke and assign one of the server classes to and invoke PerformService() </p>  <pre><code>public class ServeThem {     //This is where I am trying to figure out how to do this     IGenericInterface&lt;T&lt;-??&gt; Server {get; set;}  } </code></pre>  <p>I want to eventually create the Service class and invoke the perform service method on Server....something like this</p>  <pre><code>main() {     ServeThem service= new ServeThem();     service.Server = new ServePoor(); //This will be resolved by Ninject     service.Server.PerformService(); } </code></pre>  <p>My problem is in <code>IGenericInterface&lt;T&lt;-??&gt; Server {get; set;}</code>. I am trying to figure out how to declare <code>Server</code> property as a generic interface type that can be assigned an object of a class that implements that interface of a particular type. It seems that for declaring <code>IGenericInterface&lt;type&gt;</code>, an actual concrete type has to be mentioned. I tried adding a <code>passedInType</code> property and using <code>typeof(passedInType)</code> but that throws an exception. </p>  <p>How would I declare a property as a generic interface type? Is this even possible.</p>