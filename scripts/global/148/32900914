<p>I have written a generic extension method, which basically adds a binding to a windows form ui element (like a form or a button).</p>  <p>It does work fine for now, tried it in a few projects, however it's still a quite complex method with 3 generic "T-arguments".</p>  <pre><code>public static void Add&lt;T1, T2, T3&gt;(     this ControlBindingsCollection collection,     T2 dataSrc,     Expression&lt;Func&lt;T1, T3&gt;&gt; p1,     Expression&lt;Func&lt;T2, T3&gt;&gt; p2)     where T1 : class      where T2 : class  {     var prop1Name = PropertyNameResolver.GetPropertyName(p1);     var prop2Name = PropertyNameResolver.GetPropertyName(p2);     collection.Add(prop1Name, dataSrc, prop2Name, false, DataSourceUpdateMode.OnPropertyChanged); } </code></pre>  <p>GetPropertyName looks like this:</p>  <pre><code>public static string GetPropertyName&lt;T1,T2&gt;(Expression&lt;Func&lt;T1,T2&gt;&gt; propertyExpression) {     return ((MemberExpression)propertyExpression.Body).Member.Name; } </code></pre>  <p>This are two examples of how I call the method:</p>  <pre><code>DataBindings.Add&lt;Form, FrmOptionsPresenter, double&gt;(     m_frmOptionsPresenter,     binder =&gt; binder.Opacity,     dataSrc =&gt; dataSrc.Opacity); </code></pre>  <p>Like I've said above, the call kinda looks heavy.</p>  <p>What I would like to know now: Is there anything you can suggest me to make these method more simple and readable?</p>  <p>Thanks in advance!</p>