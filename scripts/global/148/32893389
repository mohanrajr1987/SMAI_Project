<p>I am trying to program a kind of registry for objects of different classes.</p>  <p>I have the following:</p>  <pre><code>public interface DbObject{     void setId(long id);     Long getId(); } </code></pre>  <p>A prototypic class implementing this interface would be the following:</p>  <pre><code>public class BasicDbObject implements DbObject{     private long id=null;     void setId(long id){         this.id=id;     }     Long getId(){         return id;     } } </code></pre>  <p>I want to build various different Implementations of this Interface. And I want to be able to have a Map object, that maps from each implementing class to a Map of instances.</p>  <p>Something like this:</p>  <pre><code>Map &lt;Class&lt;C implements DbObject&gt; , Map&lt;Long, C&gt;&gt; registry = new TreeMap/HashMap/SomeOtherKindOfMap (...) </code></pre>  <p>I know I could do something like</p>  <pre><code>Map &lt;String,Map&lt;Long,DbObjects&gt;&gt; registry = new ... </code></pre>  <p>But this way I would have to write some more code for determining names, comparing classes and so on. Is there an easier way to accomplish this?</p>  <p>So what I want to know: is it possible to have class objects as keys in a tree map?</p>  <p>What would be the syntax to declare a map object, that maps from implementing classes C to a map objects each mapping from a long object (the id) to instances of C?</p>  <p>I want to be able to do requests like the following:</p>  <pre><code>BasicObject bo = registry.get(BasicObject.class).get(42); </code></pre>  <p>assuing id did</p>  <pre><code>BasicObject bo=new BasicObject(...); innerMap = new SomeMap&lt;Long,BasicObject&gt;(); innerMap.put(42,bo); registry.put(BasicObject.class,innerMap); </code></pre>  <p>before.</p>  <p>Please tell me, if this still is not clear, I have difficulties to explain, since english is not my mother tongue.</p>  <p>Thank you in advance.</p>  <hr>  <p>Edit:</p>  <p>It turns out, i can do something very close to what I want, when defining a generic class around the map:</p>  <pre><code>public class ObjectRegistry &lt;T extends DbObject&gt;{      private HashMap&lt;Class&lt;T&gt;, TreeMap&lt;Long,T&gt;&gt; registry=null;      ObjectRegistry(){         registry=new HashMap&lt;Class&lt;T&gt;, TreeMap&lt;Long,T&gt;&gt;();     }     public void register(T dbObject){         TreeMap&lt;Long, T&gt; map = registry.get(dbObject.getClass());         if (map==null){             map=new TreeMap&lt;Long,T&gt;();             registry.put((Class&lt;T&gt;) dbObject.getClass(),map);         }         map.put(dbObject.getId(),dbObject);     }      public &lt;T extends DbObject&gt;T get(Class&lt;T&gt; objectClass,long id){         TreeMap&lt;Long, T&gt; map = (TreeMap&lt;Long, T&gt;) registry.get(objectClass);         if (map != null){             return map.get(id);         }         return null;     }      public TreeMap&lt;Long,T&gt; getAll(Class&lt;T&gt; dbObjectClass) {         return registry.get(dbObjectClass);     } } </code></pre>  <p>I use a TreeMap for the inner mappings since I want to easily return Class instances sorted by id.</p>  <p>So the refined question is: Is there a way to do this, without the <code>&lt;T extends DbObject&gt;</code> clause in the Class head?</p>  <hr>  <p>Edit 2:</p>  <p>Thinking through it again, it turns out that John's answer is exactly the solution to this.</p>  <p>Here is my final code:</p>  <pre><code>HashMap&lt;Class&lt;? extends DbObject&gt;, TreeMap&lt;Long, ? extends DbObject&gt;&gt; registry = null;  public &lt;T extends DbObject&gt; T get(Class&lt;T&gt; clazz, long id) {     TreeMap&lt;Long, T&gt; map = (TreeMap&lt;Long, T&gt;) registry.get(clazz);     if (map != null) {         return map.get(id);     }     return null; }  public &lt;T extends DbObject&gt; void register(T dbObject) {     TreeMap&lt;Long, T&gt; map = (TreeMap&lt;Long, T&gt;) registry.get(dbObject.getClass());     if (map == null) {         map = new TreeMap&lt;Long, T&gt;();         registry.put((Class&lt;T&gt;) dbObject.getClass(), map);     }     map.put(dbObject.getId(), dbObject); }   public &lt;T extends DbObject&gt; TreeMap&lt;Long, T&gt; getAll(Class&lt;T&gt; dbObjectClass) {     return (TreeMap&lt;Long, T&gt;) registry.get(dbObjectClass); } </code></pre>  <p>It does not need the <code>&lt;T extends DbObject&gt;</code> clause in the Class head.</p>