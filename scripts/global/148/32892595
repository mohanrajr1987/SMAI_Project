<p>I am to implement a generic bucketSort algorithm for an object implementing this interface:</p>  <pre><code>public interface Entry&lt;Integer,V&gt; {         public int getKey();         public V getValue(); } </code></pre>  <p>using this skeleton:</p>  <pre><code>public class BucketSortGeneric&lt;E extends Entry&lt;Integer,?&gt;&gt; {     public ArrayList bucketSort(ArrayList&lt;E&gt; entries) {         // To be written!         // Don't hard-code an upper bound on the key.            }    } </code></pre>  <p>I have a class that implements Entry:</p>  <pre><code>public class Pairs implements Entry&lt;Integer, String&gt; {   } </code></pre>  <p>but when I call the bucketSort(ArrayList entries) with my list of pairs I get the following warnings</p>  <hr>  <ul> <li>Type safety: The method bucketSort(ArrayList) belongs to the raw type BucketSortGeneric. References to   generic type BucketSortGeneric should be parameterized</li> <li>BucketSortGeneric is a raw type. References to generic type BucketSortGeneric should be parameterized</li> <li>Cannot make a static reference to the non-static method bucketSort(ArrayList) from the type   BucketSortGeneric</li> </ul>  <hr>  <p>if pairs is implementing entry why is it not an acceptable parameter for the bucketsort method?</p>