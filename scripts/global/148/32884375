<p>Behold the following simple interface:  </p>  <pre><code>public interface IService { } </code></pre>  <p>And now the following open generic class which has a type constraint on that interface and also on any other reference type:  </p>  <pre><code>public class Service&lt;T&gt;     where T : IService, class </code></pre>  <p>This gives the following error message with red curly lines under the <code>class</code> constraint:  </p>  <blockquote>   <p>The 'class' or 'struct' constraint must come before any other   constraint.</p> </blockquote>  <p>When I <em>reorder</em> the constraints like this:  </p>  <pre><code>public class Service&lt;T&gt;     where T : class, IService </code></pre>  <p>then all is fine.  </p>  <p>Now I know this doesn't make any sense, because IService can be omitted if one already uses the <code>class</code> constraint. But I am just curious why the order is so important for the compiler?</p>