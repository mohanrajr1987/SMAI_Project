<p>I am aware that the IL creates names that aren't compatible with C#, but I'm having a different problem as well. Here is the entirety of the decompiled file:</p>  <pre><code>using System; using System.Collections; using System.Diagnostics;  public class CoroutineEx {     protected string name = string.Empty;     protected bool mustStop;     protected bool isStoppeable;     protected bool isExclusive;     protected bool hasFinished;      public string Name     {         get { return this.name; }     }      public bool IsStoppeable     {         get { return this.isStoppeable; }     }      public bool IsExclusive     {         get { return this.isExclusive; }     }      public bool HasFinished     {         get { return this.hasFinished; }     }      public CoroutineEx(string name, bool isStoppeable, bool isExclusive)     {         this.name = name;         this.isStoppeable = isStoppeable;         this.isExclusive = isExclusive;     }      [DebuggerHidden]     public virtual IEnumerator Run()     {         return new CoroutineEx.&lt;Run&gt;c__IteratorB();     }      public virtual void CleanUp() { }      public virtual void Stop()     {         if (this.isStoppeable)             this.mustStop = true;     }      public virtual void Finished()     {         this.hasFinished = true;     } } </code></pre>  <p>The <code>Run()</code> method is what's failing. </p>  <pre><code>    [DebuggerHidden]     public virtual IEnumerator Run()     {         return new CoroutineEx.&lt;Run&gt;c__IteratorB();     } </code></pre>  <p>What is that supposed to represent?? There is nothing named <code>&lt;Run&gt;c__IteratorB</code> anywhere in the file or rest of the code. Where did this come from? How can I get this code to work?</p>  <p>I've tried decompiling the code with multiple decompilers and it gives me the same result.</p>