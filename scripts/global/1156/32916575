<p>Looking for clarification on using <code>"zd"</code> with <code>printf()</code>.</p>  <p>Certainly the following is correct with C99 and later.</p>  <pre><code>void print_size(size_t sz) {   printf("%zu\n", sz); } </code></pre>  <p>The C spec <em>seems</em> allow <code>printf("%zd\n", sz)</code> depending on on how it is read:</p>  <p>7.21.6.1 The <code>fprintf</code> function</p>  <blockquote>   <p><code>z</code> Specifies that a following <code>d</code>, <code>i</code>, <code>o</code>, <code>u</code>, <code>x</code>, or <code>X</code> conversion specifier applies to a <code>size_t</code> or the corresponding signed integer type argument; or that a following <code>n</code> conversion specifier applies to a pointer to a signed integer type corresponding to <code>size_t</code> argument.  C11dr ยง7.21.6.1 7</p> </blockquote>  <p>Should this be read as</p>  <ol> <li>"<code>z</code> Specifies that a following <code>d</code> ... conversion specifier applies to a <code>size_t</code> or the corresponding signed integer type argument ... "(both types) and "<code>z</code> Specifies that a following <code>u</code> ... conversion specifier applies to a <code>size_t</code> or the corresponding signed integer type argument ..." (both types)</li> </ol>  <p>OR</p>  <ol start="2"> <li>"<code>z</code> Specifies that a following <code>d</code> ... conversion specifier applies to a corresponding signed integer type argument ..." (signed type only) and "<code>z</code> Specifies that a following <code>u</code> ... conversion specifier applies to a <code>size_t</code>" (unsigned type only).</li> </ol>  <p>I've been using the #2 definition, but now not so sure.</p>  <blockquote>   <p>Which is correct, 1, 2, or something else?</p>      <p>If #2 is correct, what is an example of a type that can use <code>"%zd"</code>?</p> </blockquote>