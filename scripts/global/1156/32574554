<p>I know that is bad practice to print an integer with %lu which is a unsigned long. In a project i was working on i got a large number when trying to print 11 with %lu in the snprint format.(old code) I am using gcc 4.9.3.</p>  <p>This code below i thought would produce the wrong number since snprintf is told to read more than the 4 bytes occupied. Its doesnt though. Works perfectly. It reads everything correctly. Either it does not go past the 4 bytes in to the unknown or the extra 4 bytes in the long are fully of zeros when it gets promoted to long from int.</p>  <p>I am wondering out of curiosity is when does printf print the wrong number? What conditions does it need produce a wrong big number? There has to be garbage in the upper 4 bytes but it seems like it does not set that garbage for me.</p>  <p>I read the answers here but the code worked for me. I know its a different compiler.</p>  <p><a href="http://stackoverflow.com/questions/12120062/printing-int-type-with-lu-cxinu">Printing int type with %lu - C+XINU</a></p>  <pre><code>  #include&lt;inttypes.h&gt;   #include&lt;stdio.h&gt;     int main(void){         uint32_t number1 = 11;         char sentence[40];         snprintf(sentence,40,"Small number :%lu , Big number:%lu \n",number1,285212672);         printf(sentence);     } </code></pre>