<p>I have a 2D array of chars</p>  <pre><code>char** words;//2D array where each slot holds a word. char word [ MAX_WORD ];  </code></pre>  <p>And I am trying to do a ridiculously simple thing. <strong>I need to print the array</strong> so I see that I allocated memory right and removed all the newline characters.</p>  <p>Here is what I am trying to do</p>  <pre><code>//print array int k, j; for (k = 0; k &lt; MAX_WORD ; k++) {     for (j = 0; j &lt; NUMWORDS; j++) {         printf("%s%s", words[k],words[j]);     }     printf("\n"); } </code></pre>  <p>And this is what I get</p>  <pre><code>�Ð���������������=����Ð���������������=����Ð���������������=���   Segmentation fault: 11 </code></pre>  <p>I don't have any warnings or compiled errors. I think my problem might be that I am trying to print out a memory address instead of the actual char, or my malloc didn't do what I expected it to do.</p>  <p>This is my first program in C and so far this language pains me in the most uncomfortable way.</p>  <p>This is how I allocate memory for words array</p>  <pre><code>words = (char**) malloc(sizeof(char*)*NUMWORDS); </code></pre>  <p>And then I fill it with words I get from a file input. I malloc for each words while I get the input, store each word at a word array address and then remove \n. I print each word out, so it works.</p>