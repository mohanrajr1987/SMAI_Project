<p>I'm starting to use the Karma generate feature to convert double to char with a sprintf like functionality.  For that I'm using the following example:</p>  <pre><code>template &lt;typename T&gt; class  double3_policy : public boost::spirit::karma::real_policies&lt;T&gt;    { public: template &lt;typename T&gt; static unsigned int precision(T)     {        return 3;    } };  typedef boost::spirit::karma::real_generator&lt;double,  double3_policy&lt;double&gt; &gt;  double3_type;  double3_type const double3 ;  using boost::spirit::karma::left_align; using boost::spirit::karma::generate;  char *p = buffer; generate(p, '[' &lt;&lt; left_align(14)[double3] &lt;&lt; left_align(14)[double3] &lt;&lt; ']', 12345.000, 22/7.0); *p = '\0'; </code></pre>  <p>The example works fine, but the precision method is static, and I not realized how to set that value dynamically. I want to specify the precision for each use, changing that at execution time. I don't mind to create all generators at start, because I want a defined number of precisions.</p>  <p>The problem is that I don't believe I have to create a class for each precision number when the only difference between them is a returning number. I tried to compile the class with a member method (if this was a member precision method that would be enough for me), and I think I'm stuck at this class method problem. </p>  <p>How can I create generator objects with diferent precisions and just use them without create more then one class? If I can use just one generator just changing a property would be even better.</p>  <p>If anyone had the same problem and can share the solution will be very helpful.</p>  <p>Thanks,</p>