<p>Good morning, I´m actually going through some hard lessons while trying to handle huge csv files up to 4GB.</p>  <p>Goal is to search some items in a csv file (Amazon datafeed) by a given browsenode and also by some given item id´s (ASIN). To get a mix of existing items (in my database) plus some additional new itmes since from time to time items disapear on the marketplace. I also filter the title of the items because there are many items using the same.</p>  <p>I have been reading here lots af tips and finally decided to use php´s fgetcsv() and thought this function will not exhaust memory, since it reads the file line by line. But no matter what I try I´m always running out of memory. I can not understand why my code uses so much memory. </p>  <p>I set the memory limit to 4096MB, time limit is 0. Server has 64 GB Ram and two SSD hardisks.</p>  <p>May someone please check out my piece of code and explain how it is possible that im running out of memory and more important how memory is used?</p>  <pre><code>private function performSearchByASINs() {     $found = 0;     $needed = 0;     $minimum = 84;     if(is_array($this-&gt;searchASINs) &amp;&amp; !empty($this-&gt;searchASINs))     {         $needed = count($this-&gt;searchASINs);     }     if($this-&gt;searchFeed == NULL || $this-&gt;searchFeed == '')     {         return false;     }     $csv = fopen($this-&gt;searchFeed, 'r');     if($csv)     {         $l = 0;         $title_array = array();         while(($line = fgetcsv($csv, 0, ',', '"')) !== false)         {             $header = array();             if(trim($line[6]) != '')             {                 if($l == 0)                 {                     $header = $line;                 }                 else                 {                     $asin = $line[0];                     $title = $this-&gt;prepTitleDesc($line[6]);                     if(is_array($this-&gt;searchASINs)                      &amp;&amp; !empty($this-&gt;searchASINs)                      &amp;&amp; in_array($asin, $this-&gt;searchASINs)) //search for existing items to get them updated                     {                         $add = true;                         if(in_array($title, $title_array))                         {                             $add = false;                          }                         if($add === true)                         {                             $this-&gt;itemsByASIN[$asin] = new stdClass();                             foreach($header as $k =&gt; $key)                             {                                 if(isset($line[$k]))                                 {                                     $this-&gt;itemsByASIN[$asin]-&gt;$key = trim(strip_tags($line[$k], '&lt;br&gt;&lt;br/&gt;&lt;ul&gt;&lt;li&gt;'));                                 }                             }                             $title_array[] = $title;                             $found++;                         }                     }                     if(($line[20] == $this-&gt;bnid || $line[21] == $this-&gt;bnid)                      &amp;&amp; count($this-&gt;itemsByKey) &lt; $minimum                      &amp;&amp; !isset($this-&gt;itemsByASIN[$asin])) // searching for new items                     {                         $add = true;                         if(in_array($title, $title_array))                         {                            $add = false;                         }                         if($add === true)                         {                             $this-&gt;itemsByKey[$asin] = new stdClass();                             foreach($header as $k =&gt; $key)                             {                                 if(isset($line[$k]))                                 {                                     $this-&gt;itemsByKey[$asin]-&gt;$key = trim(strip_tags($line[$k], '&lt;br&gt;&lt;br/&gt;&lt;ul&gt;&lt;li&gt;'));                                                                 }                             }                             $title_array[] = $title;                             $found++;                         }                     }                 }                 $l++;                 if($l &gt; 200000 || $found == $minimum)                 {                     break;                 }             }         }         fclose($csv);     } } </code></pre>