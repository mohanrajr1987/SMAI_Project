<p>I am creating an android app using Firebase as a backend data storage. The  problem is when i leave the app active for some time on the device/emulator the app crashes with OutOfMemory error shown here:</p>  <pre><code>com.niafikra.inaya.module.operation.ui.android.debug E/dalvikvm-heap﹕ Out of memory on a 43700-byte allocation. com.niafikra.inaya.module.operation.ui.android.debug E/AndroidRuntime﹕ FATAL EXCEPTION: TubeSockReader-2 Process: com.niafikra.inaya.module.operation.ui.android.debug, PID: 18649 java.lang.OutOfMemoryError         at java.nio.CharBuffer.allocate(CharBuffer.java:54)         at java.nio.charset.CharsetDecoder.allocateMore(CharsetDecoder.java:226)         at java.nio.charset.CharsetDecoder.decode(CharsetDecoder.java:188)         at com.firebase.tubesock.MessageBuilderFactory$TextBuilder.decodeString(MessageBuilderFactory.java:109)         at com.firebase.tubesock.MessageBuilderFactory$TextBuilder.appendBytes(MessageBuilderFactory.java:86)         at com.firebase.tubesock.WebSocketReceiver.appendBytes(WebSocketReceiver.java:101)         at com.firebase.tubesock.WebSocketReceiver.run(WebSocketReceiver.java:68)         at com.firebase.tubesock.WebSocket.run(WebSocket.java:183) ....android.debug E/dalvikvm-heap﹕ Out of memory on a 43700-byte allocation. </code></pre>  <p>Here is sample code for my asynchronous adapter:</p>  <pre><code>    // Look for all child events. We will then map them to our own internal ArrayList, which backs ListView     mListener = this.query.addChildEventListener(new ChildEventListener() {         @Override         public void onChildAdded(DataSnapshot dataSnapshot, String previousChildName) {              Object model = getValue(dataSnapshot);             String key = dataSnapshot.getKey();              int previousIndex = 0, nextIndex = 0;              // Insert into the correct location, based on previousChildName             if (previousChildName == null) {                 values.add(0, model);                 mKeys.add(0, key);             } else {                 previousIndex = mKeys.indexOf(previousChildName);                 nextIndex = previousIndex + 1;                 if (nextIndex == values.size()) {                     values.add(model);                     mKeys.add(key);                 } else {                     values.add(nextIndex, model);                     mKeys.add(nextIndex, key);                 }             }              for(FirebaseChildrenLoaderListener dataListener:dataListeners)                 dataListener.onChildAdded(FirebaseChildrenLoader.this, model, previousIndex, nextIndex);          } </code></pre>  <p>and here is sample code for values loading on my view widgets:</p>  <pre><code>      this.query.addValueEventListener(this);   @Override public void onDataChange(DataSnapshot dataSnapshot) {     try {         Object value = getValue(dataSnapshot);         attemptLoadValue(value);     } catch (FirebaseException e) {         Object value = getValue(dataSnapshot.getChildren().iterator().next());         attemptLoadValue(value);     } }  private void attemptLoadValue(Object value) {     //if it is null and loader set to ignore then just ignore it     if (nullIgnored &amp;&amp; value == null) return;         //otherwise let us load it     else loadValue(value); } </code></pre>  <p>Kindly assist?</p>