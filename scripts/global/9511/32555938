<p>This function is passed about 70k objects to process. It has no problem loading the array, and it gets through about half the iterations before it fails. Memory is limited to <code>ini_set('memory_limit','465M');</code> (cloud service). It always fails in the <code>$googleFunction</code>: <code>/app/vendor/googleads/googleads-php-lib/src/Google/Api/Ads/Common/Lib/AdsSoapClient.php</code>. </p>  <p>I've already tried passing the array as a reference, switching from <code>array_chunk</code> to using an <code>array_slice</code> at a time, passing the <code>$chunk</code> by reference to the <code>$googleFunction</code>, unsetting the <code>$chunk</code> at the end, and calling <code>gc_collect_cycles()</code> after each iteration.</p>  <p>How can it still fail? There must be a memory leak somewhere, but there are no large assignments aside from <code>$chunk</code> and <code>$result</code>, and each function called goes out of scope during each iteration, so anything it may have allocated is supposed to be garbage collected. I feel it may have something to do with the function references. After about a quarter of the iterations, it uses 240M. It grows by about 10M per iteration. </p>  <pre><code>  function googleJob($job = null, &amp;$list, $googleFunction, $before = null) {     // initialize $total, $gaw, $processed     for ($chunkIndex = 0; $chunkIndex &lt; count($list); $chunkIndex += 2000) {        echo '3:'.memory_get_usage().' ';       $chunk = array_slice($list, $chunkIndex, 2000); # limit of 2000/request       echo '4:'.memory_get_usage().' ';       if ($before) {         foreach ($chunk as $item) {           $before($item); # function reference          }       }       echo '5:'.memory_get_usage().' ';        $i = 0; // try harder to make Google work       $result = null;       do {         try {           $result = $gaw-&gt;$googleFunction($chunk);           echo '6:'.memory_get_usage().' ';         } catch (\SoapFault $e) { # try to remove the bad items and try again           // no errors generated         }       } while ($result == null &amp;&amp; $chunk); // Retry the request if not empty        array_walk($chunk, function($item) { $item-&gt;save(); });       echo '7:'.memory_get_usage().' ';       $processed += count($chunk);       if ($job) {         $job-&gt;progress = round($processed / $total * 100);         $job-&gt;save() or Yii::error($job-&gt;getErrors());       }       echo '8:'.memory_get_usage().' ';             unset($chunk);       unset($result);       echo '9:'.memory_get_usage().'... ';       gc_collect_cycles();       echo memory_get_usage().PHP_EOL;     }   } </code></pre>  <p>Memory 'profiling' output:</p>  <pre><code>3:110267832 4:110372112 5:111920328 6:123908368 7:129432080 8:129432080 9:121662520... 121662520 3:121662520 4:121766800 5:123281704 6:138001000 7:143493888 8:143493888 9:135745264... 135745264 </code></pre>