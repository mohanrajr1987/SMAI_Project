<p>Where is it "best" to handle out of memory situations? I use the term "best" loosely: give me some something technical, with evidence, not subjective answers.</p>  <p>Let's assume that the application is designed in such a way that when I call magical() function, it will free me up some memory using unicorn turd or similar. Assume that if magical fails to free more memory it will revert the new_handler to whatever it was before.</p>  <p>Is it better for me to do:</p>  <pre><code>new_handler oldHandler = set_new_handler(magical); </code></pre>  <p>or better to do</p>  <pre><code>catch (const &amp;bad_alloc) {     magical(); } </code></pre>  <p>I think the first answer is the cleanest way of doing things, I need something to <em>prove</em> this to others, beyond code clarity and maintainability (don't get me started on why these things should be important)... I just haven't got anything solid to back my stance up.</p>  <p>This is all unmanaged C++ code running on an x86 platform.</p>