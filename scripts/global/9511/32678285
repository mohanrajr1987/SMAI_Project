<p>I'm trying to do an exercise form Stroustrup's C++PL4 book. The task is:</p>  <blockquote>   <p>Allocate so much memory using <code>new</code> that <code>bad_alloc</code> is thrown. Report how   much memory was allocated and how much time it took. Do this twice:   once not writing to the allocated memory and once writing to each   element.</p> </blockquote>  <p>The following code doesn't throw a <code>std::bad_alloc</code> exception. After I execute the program I get message "Killed" in terminal. </p>  <p>Also. The following code exits in ~4 seconds. But when I uncomment memory usage message </p>  <pre><code>// ++i; // std::cout &lt;&lt; "Allocated " &lt;&lt; i*80 &lt;&lt; " MB so far\n"; </code></pre>  <p>Program will run for few minutes. After some time it prints that terabytes of memory has been allocated but I don't see much change in System Monitor app. Why is that?</p>  <p>I use Linux and System Monitor app to see usages.</p>  <pre><code>#include &lt;iostream&gt; #include &lt;vector&gt; #include &lt;chrono&gt;  void f() {     std::vector&lt;int*&gt; vpi {};     int i {};     try{         for(;;){             int* pi = new int[10000];             vpi.push_back(pi);             // ++i;             // std::cout &lt;&lt; "Allocated " &lt;&lt; i*80 &lt;&lt; " MB so far\n";         }            }     catch(std::bad_alloc){         std::cerr &lt;&lt; "Memory exhausted\n";     } }  int main() {     auto t0 = std::chrono::high_resolution_clock::now();     f();     auto t1 = std::chrono::high_resolution_clock::now();     std::cout &lt;&lt; std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(t0-t1).count() &lt;&lt; " ms\n"; } </code></pre>