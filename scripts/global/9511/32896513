<p>I'm using the following code to fill a MySQL database with randomized data.</p>  <pre><code>public void fillDataBase() throws Exception {     try     {         Randomizer r = new Randomizer();         // create a mysql database connection         String myDriver = "org.gjt.mm.mysql.Driver";         String myUrl = "jdbc:mysql://localhost/mydatabase";         Class.forName(myDriver);         Connection conn = DriverManager.getConnection(myUrl, "root", "");          // the mysql insert statement         String query = " insert into mapping (path, uuid)"                 + " values (?, ?)";          PreparedStatement preparedStmt = null;          for (int i = 0; i &lt; 50000000; i++)         {             // create the mysql insert preparedstatement             preparedStmt = conn.prepareStatement(query);             preparedStmt.setString(1, r.pathRandomizer());             preparedStmt.setString(2, UUID.randomUUID().toString());              preparedStmt.execute();         }     }     catch (Exception e)     {         throw e;     }     finally     {         close();     } } </code></pre>  <p>It's running quite well for a time but round about after 2million entries, it's getting slower and slower and finally the application quits with an out of memory exception.</p>  <p>Edit:</p>  <pre><code>public class Randomizer {  public String pathRandomizer() {     String[] root_path_pool = { "/home/", "/user/", "/usr/", "/opt/",             "/root/", "/etc/" };     String[] dir_pool = { "blabla/", "configuration/", "mysql/",             "hadoop/", "temp/", "development/", "destination/", "source/",             "code/", "mobile/", "local/", "apache/", "test/" };      String[] file_pool = { "readme.txt", "explorer.exe", "java.exe",             "pycharm", "win.ini", "foto.jpg", "database.db", "error.txt",             "logo.png", "bash_profile", "eclipse", "flow.gif",             "message.eml", "strategy.pptx", "documentation.docx",             "calculation.xls", "data.temp" };      int root_path_pool_index = ThreadLocalRandom.current().nextInt(0,             root_path_pool.length - 1);     int dir_pool_index = ThreadLocalRandom.current().nextInt(0,             dir_pool.length - 1);     int file_pool_index = ThreadLocalRandom.current().nextInt(0,             file_pool.length - 1);      return root_path_pool[root_path_pool_index] + dir_pool[dir_pool_index]             + file_pool[file_pool_index]; } } </code></pre>