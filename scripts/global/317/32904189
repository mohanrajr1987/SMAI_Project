<p>I have a <em>pois</em> collection with 10K documents.</p>  <p>And I perform the following query:</p>  <pre><code>db.pois.find({ location: { $near: { $geometry: { type: "Point", coordinates: [ 8.969423677143416, 45.9998108142721 ] } } }, status: "enabled", category_ids: { $in: [ ObjectId('56056db896b23c29e2000001') ] } }).skip(0).limit(1000) </code></pre>  <p>Since I have this compound index:</p>  <pre><code> {     "v" : 1,     "key" : {         "location" : "2dsphere",         "status" : 1,         "category_ids" : 1,         "properties.property_id" : 1,         "properties.value" : 1     },     "name" : "location_2dsphere_status_1_category_ids_1_properties.property_id_1_properties.value_1",     "ns" : "poi_database_production.pois",     "2dsphereIndexVersion" : 2   } </code></pre>  <p>I was expecting better performance.</p>  <p>Using explain('executionStats'), I see that the index is being used, but the keys examined are ~5K; is this the number of scanned documents?</p>  <p><strong>But I have only 1K pois associated to the given category_id</strong>, so why examine 5K keys?</p>  <p>The complete output of explain is <a href="http://pastebin.com/xqycQTfG" rel="nofollow">in this pastebin here</a>.</p>  <p>I was expecting mongo to use the index in oder to restrict the documents based on status and category, then use the geospatial part to fetch the 1K closest pois.</p>  <p>Why am I getting  such a scan? Is this the normal behavior?</p>