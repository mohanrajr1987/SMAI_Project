<p>Currently i am trying to figure out, then to use OWL and then to use UML to describe a domain of interest in a Software Engineering process. </p>  <p>I read <a href="https://ub-madoc.bib.uni-mannheim.de/1898/1/TR2008_004.pdf" rel="nofollow">this paper by Adkinson</a>, which gives a very good overview about the difference and the equalities of OWL and UML on a semantic and a syntactic level. </p>  <p>However it does not provide a clear indication in which use-cases it might be better to use OWL instead of - for example - an UML class diagramm. </p>  <p>It might be the underlaying development process, which decides the modelling language to take (e.g. model-driven = go for UML, ontology-driven = go for OWL) but for myself it is this difference still not clear?</p>  <p>In both language I can build up a terminology, which I - as an ontology engineer - can reuse in order to infer new knowledge from it. As an Software Engineer I use this terminology for the construction of a (single) system. </p>  <p>So is the difference between OWL and UML just the field of study? Or could I use OWL in order to describe the construction of my (single) software system?</p>  <p>Moreover, this raises the question if the decision of which kind of modelling language to choose is only driven by the goal, which I try to accomplish?</p>