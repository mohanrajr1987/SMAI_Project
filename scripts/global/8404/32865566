<p>I'm trying to set <code>onClickListener</code> to <code>ImageView</code> inside <code>ListView</code> item. My Adapter: <strong><code>ContactListAdapter.java</code></strong></p>  <pre><code>public class ContactListAdapter extends ArrayAdapter&lt;ContactItemInterface&gt; {      private int resource; // store the resource layout id for 1 row     private boolean inSearchMode = false;      private ContactsSectionIndexer indexer = null;      public ContactListAdapter(Context _context, int _resource,             List&lt;ContactItemInterface&gt; _items) {         super(_context, _resource, _items);         resource = _resource;          // need to sort the items array first, then pass it to the indexer         Collections.sort(_items, new ContactItemComparator());          setIndexer(new ContactsSectionIndexer(_items));      }        // do all the data population for the row here     // subclass overwrite this to draw more items     public void populateDataForRow(View parentView, ContactItemInterface item,             int position) {         // default just draw the item only      }      // this should be override by subclass if necessary     @Override     public View getView(int position, View convertView, ViewGroup parent) {         ViewGroup parentView;         ContactItemInterface item = null;         if (getCount() &gt; position) {             item = getItem(position);         }         // Log.i("ContactListAdapter", "item: " + item.getItemForIndex());            parentView = (ViewGroup) LayoutInflater.from(getContext()).inflate(resource, parent, false);          // for the very first section item, we will draw a section on top         // showSectionViewIfFirstItem(parentView, item, position);          // set row items here         if (getCount() &gt; position) {             populateDataForRow(parentView, item, position);         }         return parentView;      }      public boolean isInSearchMode() {         return inSearchMode;     }      public void setInSearchMode(boolean inSearchMode) {         this.inSearchMode = inSearchMode;     }      public ContactsSectionIndexer getIndexer() {         return indexer;     }      public void setIndexer(ContactsSectionIndexer indexer) {         this.indexer = indexer;     }  } </code></pre>  <p><strong><code>AdapterContactList.java</code></strong></p>  <pre><code>public class AdapterContactList extends ContactListAdapter {      private OnClickListener listener;     private OnClickListener onInfoClickListener;     private OnClickListener onItemClickListener;     private ArrayList&lt;User&gt; select = null;      public AdapterContactList(Context _context, int _resource,             List&lt;ContactItemInterface&gt; _items) {         super(_context, _resource, _items);     }      public void setSelectArray(ArrayList&lt;User&gt; select) {         this.select = select;         this.notifyDataSetChanged();     }      public void setOnClickListener(OnClickListener listener) {         this.listener = listener;     }      public void setOnInfoClickListener(OnClickListener l){         this.onInfoClickListener = l;     }      public void setOnItemClickListenerCustom(OnClickListener l){         this.onInfoClickListener = l;     }      // override this for custom drawing     public void populateDataForRow(View parentView, ContactItemInterface item,             int position) {         // default just draw the item only         View infoView = parentView.findViewById(R.id.infoRowContainer);         infoView.setTag(position);         TextView fullNameView = (TextView) infoView.findViewById(R.id.tv_name);         View tv_grey = infoView.findViewById(R.id.tv_grey);         View tv_green = infoView.findViewById(R.id.tv_green);         View tv_red = infoView.findViewById(R.id.tv_red);         View tv_yellow = infoView.findViewById(R.id.tv_yellow);         ImageView iv_user = (ImageView) infoView.findViewById(R.id.im_calls);         View pending_cont = infoView.findViewById(R.id.pending_cont);         ImageView btnInfo = (ImageView)infoView.findViewById(R.id.btn_info);         if(btnInfo != null){             btnInfo.setOnClickListener(new OnClickListener() {                 @Override                 public void onClick(View v) {                     Toast.makeText(getContext(), "Button", Toast.LENGTH_SHORT).show();                 }             });         }           if (tv_green != null) {             if(tv_grey != null){                 tv_grey.setVisibility(View.GONE);             }             tv_green.setVisibility(View.GONE);             tv_red.setVisibility(View.GONE);             tv_yellow.setVisibility(View.GONE);         }          if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {             View line_end = infoView.findViewById(R.id.line_end);             line_end.setVisibility(View.VISIBLE);         }          if (item instanceof ContactListItem) {             ContactListItem contactItem = (ContactListItem) item;             fullNameView.setText(contactItem.getFullName());              if (contactItem.getAvatar() != null) {                 MyProject.loadImage(contactItem.getAvatar(), iv_user);             } else {                 User us1 = MyProject.getTempUser(contactItem.getMyProjectid());                 if (us1 != null) {                     MyProject.loadImage(us1.getAvatar(), iv_user);                 }             }              if (tv_green != null) {                 int status = MyProject.getUserStatus(contactItem.getMyProjectid());                 MyProject.debug("" + status);                 if (status != MyProject.STATUS_NONE) {                     if (status == MyProject.STATUS_ONLINE) {                         tv_green.setVisibility(View.VISIBLE);                     }                     if (status == MyProject.STATUS_AWAY) {                         tv_yellow.setVisibility(View.VISIBLE);                     }                     if (status == MyProject.STATUS_DND) {                         tv_red.setVisibility(View.VISIBLE);                     }                 }else{                     if(tv_grey != null) {                         tv_grey.setVisibility(View.VISIBLE);                     }                 }             }              if (infoView.findViewById(R.id.checkbox) != null) {                 CheckBox checkbox = (CheckBox) infoView                         .findViewById(R.id.checkbox);                 if (select != null) {                     checkbox.setChecked(select.indexOf(contactItem.getUser()) &gt;= 0);                 } else {                     checkbox.setChecked(false);                 }             }              if (listener != null) {                 View button_add = infoView.findViewById(R.id.add_cont);                 if (contactItem.getUser().isPending()) {                     pending_cont.setVisibility(View.VISIBLE);                     button_add.setVisibility(View.GONE);                     infoView.setOnClickListener(listener);                 } else {                     pending_cont.setVisibility(View.GONE);                     button_add.setVisibility(View.VISIBLE);                     button_add.setOnClickListener(listener);                     infoView.setOnClickListener(listener);                 }             }              infoView.setOnClickListener(new OnClickListener() {                 @Override                 public void onClick(View v) {                     Toast.makeText(v.getContext(), "Avatar", Toast.LENGTH_SHORT).show();                 }             });         }     }      @Override     public boolean isEnabled(int position) {         return true;     } } </code></pre>  <p>Please look at the <code>btnInfo</code>. I setted to him <code>onClickListener</code> and in debug mode I convinced that it setted, but it doesn't work. It just ignored.</p>  <p>Here is my layout file:</p>  <pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"     xmlns:app="http://schemas.android.com/apk/res-auto"     android:id="@+id/infoRowContainer"     android:layout_width="match_parent"     android:layout_height="44dp"     android:background="@drawable/dialog_buttons_background"     android:descendantFocusability="blocksDescendants"&gt;      &lt;com.myproject.custom.CFRoundImageView         android:id="@+id/im_calls"         android:layout_width="32dp"         android:layout_height="32dp"         android:layout_marginLeft="6dp"         android:layout_marginTop="6dp"         android:contentDescription="@string/temp"         android:scaleType="fitXY"         android:src="@drawable/fb_placeholder"/&gt;      &lt;com.myproject.custom.CFTextView         android:id="@+id/tv_grey"         android:layout_width="@dimen/status_side_size"         android:layout_height="@dimen/status_side_size"         android:layout_alignBottom="@+id/im_calls"         android:layout_alignRight="@+id/im_calls"         android:background="@drawable/ic_not_in_contact"/&gt;      &lt;com.myproject.custom.CFTextView         android:id="@+id/tv_green"         android:layout_width="@dimen/status_side_size"         android:layout_height="@dimen/status_side_size"         android:layout_alignBottom="@+id/im_calls"         android:layout_alignRight="@+id/im_calls"         android:background="@drawable/ic_status_online"/&gt;      &lt;com.myproject.custom.CFTextView         android:id="@+id/tv_yellow"         android:layout_width="@dimen/status_side_size"         android:layout_height="@dimen/status_side_size"         android:layout_alignBottom="@+id/im_calls"         android:layout_alignRight="@+id/im_calls"         android:background="@drawable/ic_status_not_presents"/&gt;      &lt;com.myproject.custom.CFTextView         android:id="@+id/tv_red"         android:layout_width="@dimen/status_side_size"         android:layout_height="@dimen/status_side_size"         android:layout_alignBottom="@+id/im_calls"         android:layout_alignRight="@+id/im_calls"         android:background="@drawable/ic_status_offline"/&gt;      &lt;com.myproject.custom.CFTextView         android:id="@+id/tv_name"         android:layout_width="match_parent"         android:layout_height="44dp"         android:layout_centerVertical="true"         android:layout_marginLeft="44dp"         android:layout_marginRight="30dp"         android:ellipsize="end"         android:gravity="left|center_vertical"         android:maxLines="1"         android:text="@string/text_contacts"         android:textColor="@color/color_grey5"         android:textSize="16sp"         app:typeFace="OpenSans-Light"/&gt;      &lt;TextView         android:id="@+id/line_end"         android:layout_width="match_parent"         android:layout_height="1dp"         android:layout_marginRight="36dp"         android:layout_marginTop="43dp"         android:background="@color/color_gray2"         android:visibility="gone"/&gt;      &lt;ImageView             android:layout_width="wrap_content"             android:layout_height="wrap_content"             android:id="@+id/btn_info"             android:src="@drawable/ic_info"             android:layout_alignParentRight="true"             android:layout_alignParentEnd="true"             android:clickable="true"             android:padding="8dp"             android:layout_centerVertical="true"             android:layout_marginRight="30dp"             /&gt;  &lt;/RelativeLayout&gt; </code></pre>  <p><code>ImageView</code> never clicks! I tried set <code>clcikable=true</code> to <code>ImageView</code></p>  <p>I tried set 'focusable=false focusableInTouchMode=false' for all child of item.</p>  <p>I tried to use <code>descendantFocusability="blocksDescendants"</code> on item root view.</p>  <p>I tried to combine this method one with another.</p>  <p>And <code>ImageView</code> still not clickable.</p>