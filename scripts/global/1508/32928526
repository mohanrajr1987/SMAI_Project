<p>As an illustration, let's suppose I'm creating an HTTP REST API that behaves as follows:</p>  <p>Return a collection of all employees:</p>  <pre><code>GET /employees/  [     {         "id": 1,         "name": "John",         "roles": [             {                 "id": 20,                 "responsibility": 1000             },             ...         ]     },     ... ] </code></pre>  <p>Return a representation of employee with id 1:</p>  <pre><code>GET /employees/1/  {     "id": 1,     "Name": "John",     "roles": [         {             "id": 20,             "responsibility": 1000         },         ...     ] } </code></pre>  <p>Return a collection of the employee's roles:</p>  <pre><code>GET /employees/1/roles  [     {         "id": 20,         "responsibility": 1000     },     ... ] </code></pre>  <p>Return a representation of role with id 20:</p>  <pre><code>GET /employees/1/roles/20  {     "id": 20,     "responsibility": 1000 } </code></pre>  <p>In this way we can traverse the tree of the employee representation. There are likely many other employee endpoints besides /roles.</p>  <p>Using Jersey I split this up into a root resource with several subresources, for example:</p>  <pre><code>@Path("/employees") public class EmployeesResource() {     ...     @GET     @Path("/{employeeId}/roles")     public RolesResource getRoles(@PathParam("employeeId") long employeeId) {         return new RolesResource(employeeId);     } } </code></pre>  <p>This produces the desired JSON result when I GET <code>/employees</code> and <code>/employees/1</code> but when I GET <code>/employees/1/roles</code> I get the response body:</p>  <pre><code>{     "roles": [         {             "id": 20,             "responsibility": 1000         },         ...     ] } </code></pre>  <p>Jersey has wrapped my collection of Role representations in some object. Note: The object seems to be connected to the name of the subresource resource method within RolesResource (for example, if the method is named <code>getRoles()</code> I get <code>{"roles": [...]}</code>, if the method is named <code>getFoo()</code> I get <code>{"foo": [...]}</code>).</p>  <p><strong>My Question:</strong> There must be a reason Jersey does this. Why would I want my representation to be wrapped like this? And if there isn't a good reason, how can I get rid of this?</p>  <p>Edit: I'm using Dropwizard version 0.8.2, which it looks like <a href="http://mvnrepository.com/artifact/io.dropwizard/dropwizard-jersey/0.8.2" rel="nofollow">from maven</a> is pulling in Jersey 2.19. It uses Jackson as the JSON provider - again, from maven it looks like the version is 2.5.1. No web.xml as this is a dropwizard application.</p>