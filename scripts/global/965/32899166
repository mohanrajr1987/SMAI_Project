<p>I am creating a plugin where on change of a field on an Opportunity record it finds all the child records (dds_opportunity_product_line) and updates three fields on that record ("dds_split_deal_opl", "dds_split_percent_opl", and "dds_split_with_opl").  </p>  <p>When I use the below code it will not allow me to deploy the plugin I get the below error on the lines that begin with OPLs["dds_split_deal_opl"]. (I made a comment in the code where this is)</p>  <p>Cannot apply indexing with [] to an expression of type 'AnonymousType#1'</p>  <p>If I remove section that selects the fields/columns to use this plugin will work, I have made a comment in this section.</p>  <p>My issue is that when I do not select my columns/fields the plugin updates all fields, due to field security, we do not want to update all fields and just the three mentioned above.</p>  <p>Thank you in advanced for any help. </p>  <pre><code>    public static void UpdateOPLsOnchangeofOpty(Entity opportunity, IOrganizationService orgService)     {         var SplitdealOption = opportunity.GetAttributeValue&lt;OptionSetValue&gt;("dds_split_deal_opportunity");         using (OrganizationServiceContext orgContext = new Microsoft.Xrm.Sdk.Client.OrganizationServiceContext(orgService))         {                 var OProductLineItems = (from OPLItems in orgContext.CreateQuery("dds_opportunity_product_line")                                     where OPLItems.GetAttributeValue&lt;EntityReference&gt;("dds_opportunity_name") == opportunity.ToEntityReference()                                     select new                                 //when the next few lines are commented out the plugin works and updates ALL fields on the child...this is my issue                                         {                                        splitdealoption = OPLItems.GetAttributeValue&lt;OptionSetValue&gt;("dds_split_deal_opl"),                                        splitpercent = OPLItems.GetAttributeValue&lt;decimal&gt;("dds_split_percent_opl"),                                        splitwith =  OPLItems.GetAttributeValue&lt;EntityReference&gt;("dds_split_with_opl"),                                        splitguid = OPLItems.GetAttributeValue&lt;Guid&gt;("dds_opportunity_product_lineid")                                     })            ;               foreach (var OPLs in OProductLineItems)             {                 //var retFields = orgService.Retrieve("dds_opportunity_product_line", OPLs.Id, new ColumnSet("dds_split_deal_opl", "dds_split_percent_opl", "dds_split_with_opl", "dds_opportunity_product_lineid" ));                 if (opportunity.GetAttributeValue&lt;OptionSetValue&gt;("dds_split_deal_opportunity").Value == 1)                 { // next 4 lines show errors when above section is not commented out                     OPLs["dds_split_deal_opl"] = SplitdealOption;                     OPLs["dds_split_percent_opl"] = 0.00;                     OPLs["dds_split_with_opl"] = opportunity.GetAttributeValue&lt;EntityReference&gt;("ownerid");                    orgContext.UpdateObject(OPLs);                 }                 else                 {                     OPLs["dds_split_deal_opl"] = SplitdealOption;                     OPLs["dds_split_percent_opl"] = opportunity.GetAttributeValue&lt;decimal&gt;("dds_split_percentage_on_opportunity");                     OPLs["dds_split_with_opl"] = opportunity.GetAttributeValue&lt;EntityReference&gt;("dds_split_with");                     orgContext.UpdateObject(OPLs);                 }             }             orgContext.SaveChanges();         }     } </code></pre>