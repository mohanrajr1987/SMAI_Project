<p>I do all my programming on a mac, and it seems when I compile my React code I get errors about "unexpected tokens" that are not there, unless I do <code>cat -A ...</code></p>  <p>For example:</p>  <p><code>gulp</code> throws the following error in bable:</p>  <pre><code>events.js:72         throw er; // Unhandled 'error' event               ^ SyntaxError: /vagrant/resources/assets/js/react/react_app.js: Unterminated JSX contents (366:1)   364 | var InvestorsTable = React.createClass({   365 |  &gt; 366 | });//(=) require ./company_admin/dashboard/recent_signups.js       |  ^   367 | //(=) require ./company_admin/dashboard/capital_raised.js   368 | //(=) require ./company_admin/dashboard/investment_transactions.js   369 | //(=) require ./company_admin/dashboard/investors_signed_up.js     at Parser.pp.raise (/vagrant/node_modules/gulp-babel/node_modules/babel-core/node_modules/babylon/lib/parser/location.js:24:13)     at Parser.pp.jsxReadToken (/vagrant/node_modules/gulp-babel/node_modules/babel-core/node_modules/babylon/lib/plugins/jsx/index.js:61:12)     at Parser.&lt;anonymous&gt; (/vagrant/node_modules/gulp-babel/node_modules/babel-core/node_modules/babylon/lib/plugins/jsx/index.js:422:21)     at Parser.readToken (/vagrant/node_modules/gulp-babel/node_modules/babel-core/node_modules/babylon/lib/plugins/flow.js:736:22)     at Parser.nextToken (/vagrant/node_modules/gulp-babel/node_modules/babel-core/node_modules/babylon/lib/tokenizer/index.js:151:19)     at Parser.next (/vagrant/node_modules/gulp-babel/node_modules/babel-core/node_modules/babylon/lib/tokenizer/index.js:88:10)     at Parser.eat (/vagrant/node_modules/gulp-babel/node_modules/babel-core/node_modules/babylon/lib/tokenizer/index.js:95:12)     at Parser.pp.expect (/vagrant/node_modules/gulp-babel/node_modules/babel-core/node_modules/babylon/lib/parser/util.js:76:15)     at Parser.pp.jsxParseExpressionContainer (/vagrant/node_modules/gulp-babel/node_modules/babel-core/node_modules/babylon/lib/plugins/jsx/index.js:301:8)     at Parser.pp.jsxParseElementAt (/vagrant/node_modules/gulp-babel/node_modules/babel-core/node_modules/babylon/lib/plugins/jsx/index.js:370:30) </code></pre>  <p>The file is:</p>  <pre><code>//= require ../../mixins/common/polling.js //= require ../../components/component_state/state_handler.js //= require ../../mixins/common/component_base.js //= require ../../components/investors/table.js  var InvestorsTable = React.createClass({  }); </code></pre>  <p>This file is syntactically correct in every way. So lets run <code>cat -A</code> on it:</p>  <pre><code>$ cat -A resources/assets/js/react/company_admin/investors/investors_table.js   //= require ../../mixins/common/polling.js$ //= require ../../components/component_state/state_handler.js$ //= require ../../mixins/common/component_base.js$ //= require ../../components/investors/table.js$ vagrant@vagrant-ubuntu-trusty-64:/var/www/html$ cat -A resources/assets/js/react/company_admin/investors/investors_table.js  //= require ../../mixins/common/polling.js$ //= require ../../components/component_state/state_handler.js$ //= require ../../mixins/common/component_base.js$ //= require ../../components/investors/table.js$ $ var InvestorsTable = React.createClass({$ $ });$ </code></pre>  <p>Other files have these hidden dollar signs. I would like a command that starts at the top of the directory and lops through every folder, every file and removes ANY hidden character, regardless of what it is, extra space, extra tab, any $ anything.</p>  <p><strong>any ideas?</strong></p>  <p>Everything on my mac is done in UTF-8, we all have macs at work - there are no windows. We do work in virtual boxes running ubuntu 14.04, but not directly. We sync our changes between the VM and our machines.</p>