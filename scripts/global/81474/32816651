<p>I am playing with Windows Phone proximity API, I am writing a code when a nfc device arrived, I will read the card data. The problem is the first device arrived, it won't call <code>MessageReceivedHandler</code>, but 2nd device arrived, will call  <code>MessageReceivedHandler</code> twice, and 3rd device arrived, will call <code>MessageReceivedHandler</code> 3 times....</p>  <pre><code>    public sealed partial class MainPage : Page     {         private ProximityDevice _proximityDevice;         private long _subscriptionIdNdef;          public MainPage()         {             this.InitializeComponent();              this.NavigationCacheMode = NavigationCacheMode.Required;              _proximityDevice = ProximityDevice.GetDefault();         }          protected override void OnNavigatedTo(NavigationEventArgs e)         {             if (_proximityDevice != null)             {                 _proximityDevice.DeviceArrived += DeviceArrived;                 _proximityDevice.DeviceDeparted += DeviceDeparted;             }             else             {                 var ignored = Dispatcher.RunAsync(CoreDispatcherPriority.Low, () =&gt;                 {                     ProximityDeviceEventsOutputText.Text += "No proximity device found\n";                 });             }         }         // Invoked when the main page navigates to a different scenario         protected override void OnNavigatingFrom(NavigatingCancelEventArgs e)         {             if (_proximityDevice != null)             {                 _proximityDevice.DeviceArrived -= DeviceArrived;                 _proximityDevice.DeviceDeparted -= DeviceDeparted;             }         }          void DeviceArrived(ProximityDevice proximityDevice)         {             if (_subscriptionIdNdef != 0) return;              proximityDevice.SubscribeForMessage("NDEF", MessageReceivedHandler);              var ignored = Dispatcher.RunAsync(CoreDispatcherPriority.Low, () =&gt;             {                 ProximityDeviceEventsOutputText.Text += "Proximate device arrived\n";             });         }          void DeviceDeparted(ProximityDevice proximityDevice)         {             if (_subscriptionIdNdef != 0 &amp;&amp; proximityDevice != null)             {                 proximityDevice.StopSubscribingForMessage(_subscriptionIdNdef);                 _subscriptionIdNdef = 0;             }              var ignored = Dispatcher.RunAsync(CoreDispatcherPriority.Low, () =&gt;             {                 ProximityDeviceEventsOutputText.Text += "Proximate device departed\n";             });         }          private async void MessageReceivedHandler(ProximityDevice sender, ProximityMessage message)         {             // Get the raw NDEF message data as byte array             var rawMsg = message.Data.ToArray();             // Let the NDEF library parse the NDEF message out of the raw byte array             var ndefMessage = NdefMessage.FromByteArray(rawMsg);              // Analysis result             var tagContents = new StringBuilder();              // Loop over all records contained in the NDEF message             foreach (NdefRecord record in ndefMessage)             {                 var specializedType = record.CheckSpecializedType(true);                  if (specializedType == typeof(NdefTextRecord))                 {                     var textRecord = new NdefTextRecord(record);                     tagContents.Append("-&gt; Text record\n");                     tagContents.AppendFormat("Text: {0}\n", textRecord.Text);                 }                 else                 {                     // Other type, not handled by this demo                     tagContents.Append("NDEF record not parsed by this demo app" + Environment.NewLine);                 }             }              // Update status text for UI             var ignored = Dispatcher.RunAsync(CoreDispatcherPriority.Low, () =&gt;             {                 ProximityDeviceEventsOutputText.Text += tagContents;             });         }     } </code></pre>