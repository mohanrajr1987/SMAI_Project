<p>I've implemented the following WCF service:</p>  <pre><code>namespace TeaService {     public class TeaService : ITeaService     {         public string PrepareTea(string tea)         {             System.Threading.Thread.Sleep(61000);             return "A nice cup of " + tea + " tea will be ready in a few minutes.";         }     } } </code></pre>  <p>The service uses the default basichttpbinding, and the binding configuration is configured like this:</p>  <pre><code>&lt;bindings&gt;   &lt;basicHttpBinding&gt;     &lt;binding openTimeout="00:05:00" receiveTimeout="00:05:00" sendTimeout="00:05:00" closeTimeout="00:05:00"&gt;&lt;/binding&gt;   &lt;/basicHttpBinding&gt; &lt;/bindings&gt; </code></pre>  <p>That is, all timeout values are set to five minutes.</p>  <p>A Windows Phone 8 client application invokes the service:</p>  <pre><code>namespace TeaClient {     public partial class MainPage : PhoneApplicationPage     {         public MainPage()         {             InitializeComponent();              var client = new TeaServiceClient();             client.PrepareTeaCompleted += Client_PrepareTeaCompleted;             client.PrepareTeaAsync("Rooibos");         }          private void Client_PrepareTeaCompleted(object sender, PrepareTeaCompletedEventArgs e)         {             tb.Text = e.Result;         }     } } </code></pre>  <p>The "tb" is a textbox defined in the xaml view.</p>  <p>In the ServicesReferences.ClientConfig, the timeout values for the basicHttpBinding are set like so:</p>  <pre><code>&lt;bindings&gt;     &lt;basicHttpBinding&gt;         &lt;binding name="BasicHttpBinding_ITeaService" maxBufferSize="2147483647"             maxReceivedMessageSize="2147483647" openTimeout="00:05:00" receiveTimeout="00:05:00" sendTimeout="00:05:00" closeTimeout="00:05:00"&gt;             &lt;security mode="None" /&gt;         &lt;/binding&gt;     &lt;/basicHttpBinding&gt; &lt;/bindings&gt; </code></pre>  <p>The problem: After one minute a CommunicationException is thrown client side.</p>  <pre><code>$exception  {System.ServiceModel.CommunicationException: The remote server returned an error: NotFound. ---&gt; System.Net.WebException: The remote server returned an error: NotFound. ---&gt; System.Net.WebException: The remote server returned an error: NotFound.    at System.Net.Browser.ClientHttpWebRequest.InternalEndGetResponse(IAsyncResult asyncResult)    at System.Net.Browser.ClientHttpWebRequest.&lt;&gt;c__DisplayClasse.&lt;EndGetResponse&gt;b__d(Object sendState)    at System.Net.Browser.AsyncHelper.&lt;&gt;c__DisplayClass1.&lt;BeginOnUI&gt;b__0(Object sendState)    --- End of inner exception stack trace ---    at System.Net.Browser.AsyncHelper.BeginOnUI(SendOrPostCallback beginMethod, Object state)    at System.Net.Browser.ClientHttpWebRequest.EndGetResponse(IAsyncResult asyncResult)    at System.ServiceModel.Channels.HttpChannelFactory.HttpRequestChannel.HttpChannelAsyncRequest.CompleteGetResponse(IAsyncResult result)    --- End of inner exception stack trace ---    at System.ServiceModel.AsyncResult.End[TAsyncResult](IAsyncResult result)    at System.ServiceModel.Channels.ServiceChannel.EndCall(String action, Object[] outs, IAsyncResult result)    at System.ServiceModel.ClientBase`1.ChannelBase`1.EndInvoke(String methodName, Object[] args, IAsyncResult result)    at TeaClient.TeaService.TeaServiceClient.TeaServiceClientChannel.EndPrepareTea(IAsyncResult result)    at TeaClient.TeaService.TeaServiceClient.TeaClient.TeaService.ITeaService.EndPrepareTea(IAsyncResult result)    at TeaClient.TeaService.TeaServiceClient.OnEndPrepareTea(IAsyncResult result)    at System.ServiceModel.ClientBase`1.OnAsyncCallCompleted(IAsyncResult result)}   System.Exception {System.ServiceModel.CommunicationException} </code></pre>  <p>I can't figure out why this is. If I implement the exact same WCF client specific code in a WPF desktop application, no exception will be thrown. I can confirm that the service works fine, and the windows phone application works fine as well as long as I remove the Thread.Sleep(61000). In my "real-world" production scenario (which this simplified example reflects), the client has to be able to wait for longer than one minute without throwing a CommunicationException. Since the example works if I do the same thing from a WPF application, I'm suspecious that the problem relates to a limitation on the Windows Phone platform. But I can't find any information that states that WCF calls can't take any longer than one minute on Windows Phone.</p>  <p>Furthermore I've tried setting the OperationTimeout on the client proxy like so:</p>  <pre><code>client.InnerChannel.OperationTimeout = TimeSpan.FromMinutes(5.0); </code></pre>  <p>But with no luck. Any suggestions are welcome.</p>