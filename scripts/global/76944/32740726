<p>I'm trying to show the action bar icons using FragmentActivity (with implements ActionBar.TabListener). I'm following this example : <a href="http://developer.android.com/training/implementing-navigation/lateral.html#tabs" rel="nofollow">http://developer.android.com/training/implementing-navigation/lateral.html#tabs</a> (EffectiveNavigation.zip) but i can't figure out how can i show the "search icon" (in my case) on the action bar, because for the moment i can only see the search option when tap the menu button.</p>  <p><strong>jpg</strong></p>  <p><a href="http://i.stack.imgur.com/j8pmp.png" rel="nofollow"><img src="http://i.stack.imgur.com/j8pmp.png" alt="enter image description here"></a></p>  <p>I've tried to switch from FragmentActivity to ActionBarActivity but seems it does not support the ActionBar.TabListener.</p>  <p><strong>MainActivity</strong></p>  <pre><code>public class MainActivity extends FragmentActivity implements ActionBar.TabListener {  /**  * The {@link android.support.v4.view.PagerAdapter} that will provide fragments for each of the  * three primary sections of the app. We use a {@link android.support.v4.app.FragmentPagerAdapter}  * derivative, which will keep every loaded fragment in memory. If this becomes too memory  * intensive, it may be best to switch to a {@link android.support.v4.app.FragmentStatePagerAdapter}.  */ AppSectionsPagerAdapter mAppSectionsPagerAdapter;  /**  * The {@link ViewPager} that will display the three primary sections of the app, one at a  * time.  */ ViewPager mViewPager;  public void onCreate(Bundle savedInstanceState) {     super.onCreate(savedInstanceState);     requestWindowFeature(Window.FEATURE_ACTION_BAR);     setContentView(R.layout.activity_main);      // Create the adapter that will return a fragment for each of the three primary sections     // of the app.     mAppSectionsPagerAdapter = new AppSectionsPagerAdapter(getSupportFragmentManager());      // Set up the action bar.     final ActionBar actionBar = getActionBar();      actionBar.setHomeButtonEnabled(true);     actionBar.setDisplayShowTitleEnabled(true);      // Specify that we will be displaying tabs in the action bar.     actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);      // Set up the ViewPager, attaching the adapter and setting up a listener for when the     // user swipes between sections.     mViewPager = (ViewPager) findViewById(R.id.pager);     mViewPager.setAdapter(mAppSectionsPagerAdapter);     mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {         @Override         public void onPageSelected(int position) {             // When swiping between different app sections, select the corresponding tab.             // We can also use ActionBar.Tab#select() to do this if we have a reference to the             // Tab.             actionBar.setSelectedNavigationItem(position);         }     });      // For each of the sections in the app, add a tab to the action bar.     for (int i = 0; i &lt; mAppSectionsPagerAdapter.getCount(); i++) {         // Create a tab with text corresponding to the page title defined by the adapter.         // Also specify this Activity object, which implements the TabListener interface, as the         // listener for when this tab is selected.         actionBar.addTab(                 actionBar.newTab()                         .setText(mAppSectionsPagerAdapter.getPageTitle(i))                         .setTabListener(this));     } }  @Override public void onTabUnselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) { }  @Override public void onTabSelected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {     // When the given tab is selected, switch to the corresponding page in the ViewPager.     mViewPager.setCurrentItem(tab.getPosition()); }  @Override public void onTabReselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) { }  /**  * A {@link FragmentPagerAdapter} that returns a fragment corresponding to one of the primary  * sections of the app.  */  @Override public boolean onCreateOptionsMenu(Menu menu) {     getMenuInflater().inflate(R.menu.menu_main, menu);     return super.onCreateOptionsMenu(menu); }  @Override public boolean onOptionsItemSelected(MenuItem item) {     int id = item.getItemId();     if (id == R.id.action_settings) {         return true;     } else if(id == R.id.action_search) {         return true;     }     return super.onOptionsItemSelected(item); }  public static class AppSectionsPagerAdapter extends FragmentPagerAdapter {      public AppSectionsPagerAdapter(FragmentManager fm) {         super(fm);     }      @Override     public Fragment getItem(int i) {         switch (i) {             case 0:                 // The first section of the app is the most interesting -- it offers                 // a launchpad into the other demonstrations in this example application.                 return new LaunchpadSectionFragment();              default:                 // The other sections of the app are dummy placeholders.                 Fragment fragment = new DummySectionFragment();                 Bundle args = new Bundle();                 args.putInt(DummySectionFragment.ARG_SECTION_NUMBER, i + 1);                 fragment.setArguments(args);                 return fragment;         }     }      @Override     public int getCount() {         return 3;     }      @Override     public CharSequence getPageTitle(int position) {         return "Section " + (position + 1);     } }  /**  * A fragment that launches other parts of the demo application.  */ public static class LaunchpadSectionFragment extends Fragment {      @Override     public View onCreateView(LayoutInflater inflater, ViewGroup container,                              Bundle savedInstanceState) {         View rootView = inflater.inflate(R.layout.fragment_section_launchpad, container, false);          // Demonstration of a collection-browsing activity.         rootView.findViewById(R.id.demo_collection_button)                 .setOnClickListener(new View.OnClickListener() {                     @Override                     public void onClick(View view) {                         Intent intent = new Intent(getActivity(), CollectionDemoActivity.class);                         startActivity(intent);                     }                 });          // Demonstration of navigating to external activities.         rootView.findViewById(R.id.demo_external_activity)                 .setOnClickListener(new View.OnClickListener() {                     @Override                     public void onClick(View view) {                         // Create an intent that asks the user to pick a photo, but using                         // FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, ensures that relaunching                         // the application from the device home screen does not return                         // to the external activity.                         Intent externalActivityIntent = new Intent(Intent.ACTION_PICK);                         externalActivityIntent.setType("image/*");                         externalActivityIntent.addFlags(                                 Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);                         startActivity(externalActivityIntent);                     }                 });          return rootView;     } }  /**  * A dummy fragment representing a section of the app, but that simply displays dummy text.  */ public static class DummySectionFragment extends Fragment {      public static final String ARG_SECTION_NUMBER = "section_number";      @Override     public View onCreateView(LayoutInflater inflater, ViewGroup container,                              Bundle savedInstanceState) {         View rootView = inflater.inflate(R.layout.fragment_section_dummy, container, false);         Bundle args = getArguments();         ((TextView) rootView.findViewById(android.R.id.text1)).setText(                 getString(R.string.dummy_section_text, args.getInt(ARG_SECTION_NUMBER)));         return rootView;     } } } </code></pre>  <p><strong>menu_main.xml</strong></p>  <pre><code>&lt;menu xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" xmlns:tools="http://schemas.android.com/tools" tools:context=".MainActivity"&gt; &lt;!-- Search, should appear as action button --&gt; &lt;item android:id="@+id/action_search"     android:icon="@drawable/search_icon"     android:title="@string/action_search"     app:showAsAction="ifRoom" /&gt; &lt;!-- Settings, should always be in the overflow --&gt; &lt;item android:id="@+id/action_settings"     android:title="@string/action_settings"     android:orderInCategory="100"     app:showAsAction="never" /&gt; &lt;/menu&gt; </code></pre>  <p><strong>manifest</strong></p>  <pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.mycompany.effectivenavigation" &gt;  &lt;application     android:allowBackup="true"     android:icon="@mipmap/ic_launcher"     android:label="@string/app_name"     android:theme="@style/AppTheme"&gt;     &lt;activity         android:name=".MainActivity"         android:label="@string/app_name"         android:theme="@android:style/Theme.Holo.Light.DarkActionBar"&gt;         &lt;intent-filter&gt;             &lt;action android:name="android.intent.action.MAIN" /&gt;              &lt;category android:name="android.intent.category.LAUNCHER" /&gt;         &lt;/intent-filter&gt;     &lt;/activity&gt;     &lt;activity         android:name=".CollectionDemoActivity"         android:label="CollectionDemo"         android:theme="@android:style/Theme.Holo.Light.DarkActionBar"&gt;     &lt;/activity&gt; &lt;/application&gt;  &lt;/manifest&gt; </code></pre>