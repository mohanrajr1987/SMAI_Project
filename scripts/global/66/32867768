<p>I had already created the navigation drawer by using the template. But i want another activity have the navigation drawer too. However, i cannot create the template one more. Can someone help me? Thanks.</p>  <p>here's my code:</p>  <p>MainActivity.java</p>  <pre><code>import android.app.Activity; import android.content.Intent; import android.os.Bundle; import android.support.v4.app.Fragment; import android.support.v4.app.FragmentManager; import android.support.v4.widget.DrawerLayout; import android.support.v7.app.ActionBar; import android.support.v7.app.AppCompatActivity; import android.view.LayoutInflater; import android.view.Menu; import android.view.MenuItem; import android.view.View; import android.view.ViewGroup;  public class MainActivity extends AppCompatActivity     implements NavigationDrawerFragment.NavigationDrawerCallbacks {  /**  * Fragment managing the behaviors, interactions and presentation of the navigation drawer.  */ private NavigationDrawerFragment mNavigationDrawerFragment;  /**  * Used to store the last screen title. For use in {@link #restoreActionBar()}.  */ private CharSequence mTitle;  @Override protected void onCreate(Bundle savedInstanceState) {     super.onCreate(savedInstanceState);     setContentView(R.layout.activity_main);      mNavigationDrawerFragment = (NavigationDrawerFragment)             getSupportFragmentManager().findFragmentById(R.id.navigation_drawer);     mTitle = getTitle();      // Set up the drawer.     mNavigationDrawerFragment.setUp(             R.id.navigation_drawer,             (DrawerLayout) findViewById(R.id.drawer_layout)); }  @Override public void onNavigationDrawerItemSelected(int position) {     // update the main content by replacing fragments     FragmentManager fragmentManager = getSupportFragmentManager();     fragmentManager.beginTransaction()             .replace(R.id.container, PlaceholderFragment.newInstance(position + 1))             .commit(); }   public void onSectionAttached(int number) {     switch (number) {         case 1:             mTitle = getString(R.string.title_section1);             break;         case 2:             mTitle = getString(R.string.title_section2);             Intent text = new Intent(getApplicationContext(), Hiking_trails.class);             startActivity(text);             break;         case 3:             mTitle = getString(R.string.title_section3);             break;         case 4:             mTitle = getString(R.string.title_section4);             break;         case 5:             mTitle = getString(R.string.title_section5);             Intent mLogin = new Intent(getApplicationContext(), Login.class);             startActivity(mLogin);             break;         case 6:             mTitle = getString(R.string.title_section6);             Intent mRegister = new Intent(getApplicationContext(), Register.class);             startActivity(mRegister);             break;     } }  public void restoreActionBar() {     ActionBar actionBar = getSupportActionBar();     actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);     actionBar.setDisplayShowTitleEnabled(true);     actionBar.setTitle(mTitle); }   @Override public boolean onCreateOptionsMenu(Menu menu) {     if (!mNavigationDrawerFragment.isDrawerOpen()) {         // Only show items in the action bar relevant to this screen         // if the drawer is not showing. Otherwise, let the drawer         // decide what to show in the action bar.         getMenuInflater().inflate(R.menu.main, menu);         restoreActionBar();         return true;     }     return super.onCreateOptionsMenu(menu); }  @Override public boolean onOptionsItemSelected(MenuItem item) {     // Handle action bar item clicks here. The action bar will     // automatically handle clicks on the Home/Up button, so long     // as you specify a parent activity in AndroidManifest.xml.     int id = item.getItemId();      //noinspection SimplifiableIfStatement     if (id == R.id.action_settings) {         return true;     }      return super.onOptionsItemSelected(item); }  /**  * A placeholder fragment containing a simple view.  */ public static class PlaceholderFragment extends Fragment {     /**      * The fragment argument representing the section number for this      * fragment.      */     private static final String ARG_SECTION_NUMBER = "section_number";      /**      * Returns a new instance of this fragment for the given section      * number.      */     public static PlaceholderFragment newInstance(int sectionNumber) {         PlaceholderFragment fragment = new PlaceholderFragment();         Bundle args = new Bundle();         args.putInt(ARG_SECTION_NUMBER, sectionNumber);         fragment.setArguments(args);         return fragment;     }      public PlaceholderFragment() {     }      @Override     public View onCreateView(LayoutInflater inflater, ViewGroup container,                              Bundle savedInstanceState) {         View rootView = inflater.inflate(R.layout.fragment_main, container, false);         return rootView;     }      @Override     public void onAttach(Activity activity) {         super.onAttach(activity);         ((MainActivity) activity).onSectionAttached(                 getArguments().getInt(ARG_SECTION_NUMBER));     } }  } </code></pre>  <p>NavigationDrawerFragment.java</p>  <pre><code>import android.app.Activity; import android.content.SharedPreferences; import android.content.res.Configuration; import android.os.Bundle; import android.preference.PreferenceManager; import android.support.v4.app.Fragment; import android.support.v4.view.GravityCompat; import android.support.v4.widget.DrawerLayout; import android.support.v7.app.ActionBar; import android.support.v7.app.AppCompatActivity; import android.support.v7.app.ActionBarDrawerToggle; import android.view.LayoutInflater; import android.view.Menu; import android.view.MenuInflater; import android.view.MenuItem; import android.view.View; import android.view.ViewGroup; import android.widget.AdapterView; import android.widget.ArrayAdapter; import android.widget.ListView;  /** * Fragment used for managing interactions for and presentation of a      navigation drawer. * See the &lt;a href="https://developer.android.com/design/patterns/navigation-drawer.html#Interaction"&gt; * design guidelines&lt;/a&gt; for a complete explanation of the behaviors implemented here. */ public class NavigationDrawerFragment extends Fragment {  /**  * Remember the position of the selected item.  */ private static final String STATE_SELECTED_POSITION = "selected_navigation_drawer_position";  /**  * Per the design guidelines, you should show the drawer on launch until the user manually  * expands it. This shared preference tracks this.  */ private static final String PREF_USER_LEARNED_DRAWER = "navigation_drawer_learned";  /**  * A pointer to the current callbacks instance (the Activity).  */ private NavigationDrawerCallbacks mCallbacks;  /**  * Helper component that ties the action bar to the navigation drawer.  */ private ActionBarDrawerToggle mDrawerToggle;  private DrawerLayout mDrawerLayout; private ListView mDrawerListView; private View mFragmentContainerView;  private int mCurrentSelectedPosition = 0; private boolean mFromSavedInstanceState; private boolean mUserLearnedDrawer;  public NavigationDrawerFragment() { }  @Override public void onCreate(Bundle savedInstanceState) {     super.onCreate(savedInstanceState);      // Read in the flag indicating whether or not the user has demonstrated awareness of the     // drawer. See PREF_USER_LEARNED_DRAWER for details.     SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(getActivity());     mUserLearnedDrawer = sp.getBoolean(PREF_USER_LEARNED_DRAWER, false);      if (savedInstanceState != null) {         mCurrentSelectedPosition = savedInstanceState.getInt(STATE_SELECTED_POSITION);         mFromSavedInstanceState = true;     }      // Select either the default item (0) or the last selected item.     selectItem(mCurrentSelectedPosition); }  @Override public void onActivityCreated(Bundle savedInstanceState) {     super.onActivityCreated(savedInstanceState);     // Indicate that this fragment would like to influence the set of actions in the action bar.     setHasOptionsMenu(true); }  @Override public View onCreateView(LayoutInflater inflater, ViewGroup container,                          Bundle savedInstanceState) {     mDrawerListView = (ListView) inflater.inflate(             R.layout.fragment_navigation_drawer, container, false);     mDrawerListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {         @Override         public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {             selectItem(position);         }     });     mDrawerListView.setAdapter(new ArrayAdapter&lt;String&gt;(             getActionBar().getThemedContext(),             android.R.layout.simple_list_item_activated_1,             android.R.id.text1,             new String[]{                     getString(R.string.title_section1),                     getString(R.string.title_section2),                     getString(R.string.title_section3),                     getString(R.string.title_section4),                     getString(R.string.title_section5),                     getString(R.string.title_section6),             }));     mDrawerListView.setItemChecked(mCurrentSelectedPosition, true);     return mDrawerListView; }  public boolean isDrawerOpen() {     return mDrawerLayout != null &amp;&amp; mDrawerLayout.isDrawerOpen(mFragmentContainerView); }  /**  * Users of this fragment must call this method to set up the navigation drawer interactions.  *  * @param fragmentId   The android:id of this fragment in its activity's layout.  * @param drawerLayout The DrawerLayout containing this fragment's UI.  */ public void setUp(int fragmentId, DrawerLayout drawerLayout) {     mFragmentContainerView = getActivity().findViewById(fragmentId);     mDrawerLayout = drawerLayout;      // set a custom shadow that overlays the main content when the drawer opens     mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow, GravityCompat.START);     // set up the drawer's list view with items and click listener      ActionBar actionBar = getActionBar();     actionBar.setDisplayHomeAsUpEnabled(true);     actionBar.setHomeButtonEnabled(true);      // ActionBarDrawerToggle ties together the the proper interactions     // between the navigation drawer and the action bar app icon.     mDrawerToggle = new ActionBarDrawerToggle(             getActivity(),                    /* host Activity */             mDrawerLayout,                    /* DrawerLayout object */             /* nav drawer image to replace 'Up' caret */             R.string.navigation_drawer_open,  /* "open drawer" description for accessibility */             R.string.navigation_drawer_close  /* "close drawer" description for accessibility */     ) {         @Override         public void onDrawerClosed(View drawerView) {             super.onDrawerClosed(drawerView);             if (!isAdded()) {                 return;             }              getActivity().supportInvalidateOptionsMenu(); // calls onPrepareOptionsMenu()         }          @Override         public void onDrawerOpened(View drawerView) {             super.onDrawerOpened(drawerView);             if (!isAdded()) {                 return;             }              if (!mUserLearnedDrawer) {                 // The user manually opened the drawer; store this flag to prevent auto-showing                 // the navigation drawer automatically in the future.                 mUserLearnedDrawer = true;                 SharedPreferences sp = PreferenceManager                         .getDefaultSharedPreferences(getActivity());                 sp.edit().putBoolean(PREF_USER_LEARNED_DRAWER, true).apply();             }              getActivity().supportInvalidateOptionsMenu(); // calls onPrepareOptionsMenu()         }     };      // If the user hasn't 'learned' about the drawer, open it to introduce them to the drawer,     // per the navigation drawer design guidelines.     if (!mUserLearnedDrawer &amp;&amp; !mFromSavedInstanceState) {         mDrawerLayout.openDrawer(mFragmentContainerView);     }      // Defer code dependent on restoration of previous instance state.     mDrawerLayout.post(new Runnable() {         @Override         public void run() {             mDrawerToggle.syncState();         }     });      mDrawerLayout.setDrawerListener(mDrawerToggle); }  private void selectItem(int position) {     mCurrentSelectedPosition = position;     if (mDrawerListView != null) {         mDrawerListView.setItemChecked(position, true);     }     if (mDrawerLayout != null) {         mDrawerLayout.closeDrawer(mFragmentContainerView);     }     if (mCallbacks != null) {         mCallbacks.onNavigationDrawerItemSelected(position);     } }  @Override public void onAttach(Activity activity) {     super.onAttach(activity);     try {         mCallbacks = (NavigationDrawerCallbacks) activity;     } catch (ClassCastException e) {         throw new ClassCastException("Activity must implement NavigationDrawerCallbacks.");     } }  @Override public void onDetach() {     super.onDetach();     mCallbacks = null; }  @Override public void onSaveInstanceState(Bundle outState) {     super.onSaveInstanceState(outState);     outState.putInt(STATE_SELECTED_POSITION, mCurrentSelectedPosition); }  @Override public void onConfigurationChanged(Configuration newConfig) {     super.onConfigurationChanged(newConfig);     // Forward the new configuration the drawer toggle component.     mDrawerToggle.onConfigurationChanged(newConfig); }  @Override public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {     // If the drawer is open, show the global app actions in the action bar. See also     // showGlobalContextActionBar, which controls the top-left area of the action bar.     if (mDrawerLayout != null &amp;&amp; isDrawerOpen()) {         inflater.inflate(R.menu.global, menu);         showGlobalContextActionBar();     }     super.onCreateOptionsMenu(menu, inflater); }  @Override public boolean onOptionsItemSelected(MenuItem item) {     if (mDrawerToggle.onOptionsItemSelected(item)) {         return true;     }      return super.onOptionsItemSelected(item); }  /**  * Per the navigation drawer design guidelines, updates the action bar to show the global app  * 'context', rather than just what's in the current screen.  */ private void showGlobalContextActionBar() {     ActionBar actionBar = getActionBar();     actionBar.setDisplayShowTitleEnabled(true);     actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);     actionBar.setTitle(R.string.app_name); }  private ActionBar getActionBar() {     return ((AppCompatActivity) getActivity()).getSupportActionBar(); }  /**  * Callbacks interface that all activities using this fragment must implement.  */ public static interface NavigationDrawerCallbacks {     /**      * Called when an item in the navigation drawer is selected.      */     void onNavigationDrawerItemSelected(int position); } } </code></pre>  <p>I want to add the navigation drawer in this activity. Register.java</p>  <pre><code>import android.app.Activity; import android.content.Intent; import android.os.Bundle; import android.view.Menu; import android.view.MenuItem; import android.view.View; import android.widget.Button; import android.widget.EditText;  public class Register extends Activity { private EditText mrUsername,mrPassword; private Button mrCancel, mrSubmit;  @Override protected void onCreate(Bundle savedInstanceState) {     super.onCreate(savedInstanceState);     setContentView(R.layout.activity_register);      mrUsername = (EditText) findViewById(R.id.rUsername);     mrPassword = (EditText) findViewById(R.id.rPassword);     mrCancel = (Button) findViewById(R.id.rCancel);     mrSubmit = (Button) findViewById(R.id.rSubmit);      mrCancel.setOnClickListener(new View.OnClickListener() {         @Override         public void onClick(View v) {             Intent iRCancel = new Intent(getApplicationContext(), MainActivity.class);             startActivity(iRCancel);             finish();         }     });      mrSubmit.setOnClickListener(new View.OnClickListener() {         @Override         public void onClick(View v) {         }     }); }  @Override public boolean onCreateOptionsMenu(Menu menu) {     // Inflate the menu; this adds items to the action bar if it is present.     getMenuInflater().inflate(R.menu.menu_register, menu);     return true; }  @Override public boolean onOptionsItemSelected(MenuItem item) {     // Handle action bar item clicks here. The action bar will     // automatically handle clicks on the Home/Up button, so long     // as you specify a parent activity in AndroidManifest.xml.     int id = item.getItemId();      //noinspection SimplifiableIfStatement     if (id == R.id.action_settings) {         return true;     }      return super.onOptionsItemSelected(item); } } </code></pre>