<p>I am rewriting my procedural coded system into CodeIgniter 3 and need to convert the existing MD5 passwords to bcrypt passwords. I have two password columns in my Db. Password_old containing the MD5 passwords, and Password (For the <strong>to be created</strong> bcrypt password) set as NULL default.</p>  <p>When a user login, the system check to see if bcrypt Password column is NULL, then check and verify the MD5 Password_old column. If successful, the system must create the bcrypt password and update the Db's Password column, then accept login... </p>  <p>My problem is that the login fail and I am not sure what I am doing wrong...</p>  <p>My Controller:</p>  <pre><code>public function login() {      // create the data object     $data = new stdClass();      // load form helper and validation library     $this-&gt;load-&gt;helper('form');     $this-&gt;load-&gt;library('form_validation');      // set validation rules     $this-&gt;form_validation-&gt;set_rules('Username', 'Username', 'required|alpha_numeric');     $this-&gt;form_validation-&gt;set_rules('Password', 'Password', 'required');      if ($this-&gt;form_validation-&gt;run() == false) {          // validation not ok, send validation errors to the view         $this-&gt;load-&gt;view('header');         $this-&gt;load-&gt;view('user/login/login');         $this-&gt;load-&gt;view('footer');      } else {          // set variables from the form         $username = $this-&gt;input-&gt;post('Username');         $password = $this-&gt;input-&gt;post('Password');          if ($this-&gt;user_model-&gt;resolve_user_login($username, $password)) {              $user_id = $this-&gt;user_model-&gt;get_user_id_from_username($username);     if($updatepass==1){       $data = array(             'Password'   =&gt; $this-&gt;user_model-&gt;hash_password($password)           );       $this-&gt;db-&gt;where('id', $user_id); // check where to put        $this-&gt;db-&gt;update('Users', $data);      }      $user    = $this-&gt;user_model-&gt;get_user($user_id);              // set session user datas             $_SESSION['user_id']      = (int)$user-&gt;id;             $_SESSION['username']     = (string)$user-&gt;Username;     $_SESSION['u_email']     = (string)$user-&gt;Email;             $_SESSION['logged_in']    = (bool)true;             $_SESSION['is_confirmed'] = (bool)$user-&gt;is_confirmed;             $_SESSION['is_admin']     = (bool)$user-&gt;is_admin;               // user login ok             $this-&gt;load-&gt;view('header');             $this-&gt;load-&gt;view('user/login/login_success', $data);             $this-&gt;load-&gt;view('footer');          } else {              // login failed             $data-&gt;error = 'Wrong username or password.';              // send error to the view             $this-&gt;load-&gt;view('header');             $this-&gt;load-&gt;view('user/login/login', $data);             $this-&gt;load-&gt;view('footer');          }      }  } </code></pre>  <p>The model I use is as follow:</p>  <pre><code>&lt;?php defined('BASEPATH') OR exit('No direct script access allowed');  /**  * User_model class.  *   * @extends CI_Model  */ class User_model extends CI_Model {      /**      * __construct function.      *       * @access public      * @return void      */     public function __construct() {          parent::__construct();         $this-&gt;load-&gt;database();      }      /**      * create_user function.      *       * @access public      * @param mixed $username      * @param mixed $email      * @param mixed $password      * @return bool true on success, false on failure      */     public function create_user($username, $email, $password) {          $data = array(             'Username'   =&gt; $username,             'Email'      =&gt; $email,             'Password'   =&gt; $this-&gt;hash_password($password),             'created_at' =&gt; date('Y-m-j H:i:s'),         );          return $this-&gt;db-&gt;insert('Users', $data);      }      /**      * resolve_user_login function.      *       * @access public      * @param mixed $username      * @param mixed $password      * @return bool true on success, false on failure      */     public function resolve_user_login($username, $password) {      if((strstr($username , "@")) &amp;&amp; (strstr($username , "."))){     $whatus="Email='$username'";     }else{     $whatus="Username='$username'";     }         $this-&gt;db-&gt;select('Password');         $this-&gt;db-&gt;from('Users');         $this-&gt;db-&gt;where($whatus);         $hash = $this-&gt;db-&gt;get()-&gt;row('Password');     if($hash==NULL){     $this-&gt;db-&gt;select('Password_old');         $this-&gt;db-&gt;from('Users');         $this-&gt;db-&gt;where($whatus);     $hash_md5 = $this-&gt;db-&gt;get()-&gt;row('Password_old');     $updatepass=1;     return $this-&gt;verify_password_md5($password, $hash_md5);     }else{     return $this-&gt;verify_password_hash($password, $hash);     $updatepass=0;     }      }     /**      * hash_password function.      *       * @access private      * @param mixed $password      * @return string|bool could be a string on success, or bool false on failure      */     private function hash_password($password) {          return password_hash($password, PASSWORD_BCRYPT);      }      /**      * verify_password_hash function.      *       * @access private      * @param mixed $password      * @param mixed $hash      * @return bool      */     private function verify_password_hash($password, $hash) {          return password_verify($password, $hash);      }      /**      * verify_password_md5 function.      *       * @access private      * @param mixed $password      * @param mixed $hash      * @return bool      */     private function verify_password_md5($password, $hash_md5) {          return password_verify($password, md5($hash_md5));      }        /**      * get_user_id_from_username function.      *       * @access public      * @param mixed $username      * @return int the user id      */     public function get_user_id_from_username($username) {     if((strstr($username , "@")) &amp;&amp; (strstr($username , "."))){     $whatus="Email='$username'";     }else{     $whatus="Username='$username'";     }                $this-&gt;db-&gt;select('id');         $this-&gt;db-&gt;from('Users');         $this-&gt;db-&gt;where($whatus);          return $this-&gt;db-&gt;get()-&gt;row('id');      }      /**      * get_user function.      *       * @access public      * @param mixed $user_id      * @return object the user object      */     public function get_user($user_id) {          $this-&gt;db-&gt;from('Users');         $this-&gt;db-&gt;where('id', $user_id);         return $this-&gt;db-&gt;get()-&gt;row();      }  } </code></pre>