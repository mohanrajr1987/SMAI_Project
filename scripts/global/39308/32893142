<p>I am a complete novice for this, but am trying to get a searchable map to work with kml layers that can be toggled on and off.  I currently only have two kml layers to work with, but will be adding more as soon as I can get this to work.  The idea is to be able to search locations or business names and utilize the layers to determine which units are needed to respond (which fire station, ambulance, etc).  I have found a number of similar questions that have been answered, but have been unable to make the changes work.  This is the code I have so far:</p>  <p><div class="snippet" data-lang="js" data-hide="false"> <div class="snippet-code"> <pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;!DOCTYPE html&gt; &lt;html&gt;   &lt;head&gt;     &lt;meta name="viewport" content="initial-scale=1.0, user-scalable=no"&gt;     &lt;meta charset="utf-8"&gt;     &lt;style&gt;       html, body {         height: 100%;         margin: 0;         padding: 0;       }       #map {         height: 100%;       } .controls {   margin-top: 10px;   border: 1px solid transparent;   border-radius: 2px 0 0 2px;   box-sizing: border-box;   -moz-box-sizing: border-box;   height: 32px;   outline: none;   box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3); } #pac-input {   background-color: #fff;   font-family: Roboto;   font-size: 15px;   font-weight: 300;   margin-left: 12px;   padding: 0 11px 0 13px;   text-overflow: ellipsis;   width: 300px; } #pac-input:focus {   border-color: #4d90fe; } .pac-container {   font-family: Roboto; } #type-selector {   color: #fff;   background-color: #4d90fe;   padding: 5px 11px 0px 11px; } #type-selector label {   font-family: Roboto;   font-size: 13px;   font-weight: 300; }     &lt;/style&gt;     &lt;title&gt;Fire Backup Map&lt;/title&gt;     &lt;style&gt;       #target {         width: 345px;       }     &lt;/style&gt;   &lt;/head&gt;   &lt;body&gt;     &lt;input id="pac-input" class="controls" type="text" placeholder="Search Box"&gt;     &lt;div id="map"&gt;&lt;/div&gt;     &lt;script&gt; // This example adds a search box to a map, using the Google Place Autocomplete // feature. People can enter geographical searches. The search box will return a // pick list containing a mix of places and predicted search terms. function initAutocomplete() {   var map = new google.maps.Map(document.getElementById('map'), {     center: {lat: 43.64837, lng: -96.73737},     zoom: 10,     mapTypeId: google.maps.MapTypeId.ROADMAP   });    var ctaLayer = new google.maps.KmlLayer({     url: 'https://drive.google.com/uc?export=download&amp;id=0B2gbIV1dXlvDVDhVLXc2N1Y5ZEE',     map: map   });      var sdcountiesLayer = new google.maps.KmlLayer({     url: 'https://drive.google.com/uc?export=download&amp;id=0B2gbIV1dXlvDRndwdEpKTjRBeTA',     map: map   });   // Create the search box and link it to the UI element.   var input = document.getElementById('pac-input');   var searchBox = new google.maps.places.SearchBox(input);   map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);   // Bias the SearchBox results towards current map's viewport.   map.addListener('bounds_changed', function() {     searchBox.setBounds(map.getBounds());   });   var markers = [];   // [START region_getplaces]   // Listen for the event fired when the user selects a prediction and retrieve   // more details for that place.   searchBox.addListener('places_changed', function() {     var places = searchBox.getPlaces();     if (places.length == 0) {       return;     }     // Clear out the old markers.     markers.forEach(function(marker) {       marker.setMap(null);     });     markers = [];     // For each place, get the icon, name and location.     var bounds = new google.maps.LatLngBounds();     places.forEach(function(place) {       var icon = {         url: place.icon,         size: new google.maps.Size(71, 71),         origin: new google.maps.Point(0, 0),         anchor: new google.maps.Point(17, 34),         scaledSize: new google.maps.Size(25, 25)       };       // Create a marker for each place.       markers.push(new google.maps.Marker({         map: map,         icon: icon,         title: place.name,         position: place.geometry.location       }));       if (place.geometry.viewport) {         // Only geocodes have viewport.         bounds.union(place.geometry.viewport);       } else {         bounds.extend(place.geometry.location);       }     });     map.fitBounds(bounds);        map.setZoom(16);    map.setCenter(center);   });   // [END region_getplaces] }     &lt;/script&gt;     &lt;script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBhTQXonppCE2eVDQO5AHy11kMn-o27m_U&amp;libraries=places&amp;callback=initAutocomplete"          async defer&gt;&lt;/script&gt;   &lt;/body&gt; &lt;/html&gt;</code></pre> </div> </div> </p>  <p>Any help would be very much appreciated.</p>  <p><a href="http://siouxfallsmetrocommunications.github.io/test.html" rel="nofollow">My current attempt</a></p>