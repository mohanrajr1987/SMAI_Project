<p>I am fairly new with <code>Javascript</code> and even more so with <code>Knockout.JS</code>. I am currently trying to make a map that can be filtered by search results. i.e. search bar filters map markers and a list view. I had everything working correctly but now I want to move the map load out of the viewmodel. </p>  <p>I tried using a function to load the map just outside the <code>viewModel</code> but then it messed up all the other functionality. Any suggestions or best practices on getting the map load out of the viewModel and maintaining functionality. Thanks in advance. Here is what I have so far:</p>  <p><div class="snippet" data-lang="js" data-hide="false"> <div class="snippet-code"> <pre class="snippet-code-js lang-js prettyprint-override"><code>var koViewModel = function() {   var self = this;    self.googleMap = new google.maps.Map(document.getElementById('map'), {     center: {lat: -34.397, lng: 150.644},     zoom: 15   });    self.allPlaces = [];     locationList.forEach(function(place) {       self.allPlaces.push(new Place(place));   });    self.allPlaces.forEach(function(place) {     var markerOptions = {       map: self.googleMap,       position: place.latLng,       animation: google.maps.Animation.DROP,     };      place.marker = new google.maps.Marker(markerOptions);   });    self.visiblePlaces = ko.observableArray();    self.allPlaces.forEach(function(place) {     self.visiblePlaces.push(place);   });    self.userInput = ko.observable('');    self.filterMarkers = function() {     var searchInput = self.userInput().toLowerCase();      self.visiblePlaces.removeAll();      self.allPlaces.forEach(function(place) {       place.marker.setMap(null);        if (place.name.toLowerCase().indexOf(searchInput) !== -1) {         self.visiblePlaces.push(place);       }     });      self.visiblePlaces().forEach(function(place) {       place.marker.setMap(self.googleMap);     });   };    function Place(dataObj) {     this.name = dataObj.name;     this.latLng = dataObj.latLng;     this.marker = null;   }    };  ko.applyBindings(new koViewModel());</code></pre> </div> </div> </p>