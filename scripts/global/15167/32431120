<p>I have a Generic <code>IRepository&lt;T&gt;</code> which gets implemented under <code>Infrastructure.NHibernate</code> Using <code>Simple Injector</code> to inject the implementation into the interface. <code>IRepository&lt;T&gt;</code> lives in my <code>Domain</code> so that the domain objects can use the repository which was injected.</p>  <p>I have a <code>User``AggregateRoot</code> which holds some detail about the user in the application database, <code>Id</code>, <code>Firstname</code>, <code>Lastname</code>. I know not to care about persistence, but this at stage we are talking about how these objects are persisted.</p>  <p>In my <code>Web.UI</code>(ASP.Net MVC 5) I have a screen where I can update the user details, <code>Firstname</code>, <code>Lastname</code>, <code>Email</code>, <code>Address</code>. Id is stored but can't be updated.</p>  <p>When I update the <code>User</code> details, I use the <code>IRepository&lt;User&gt;</code> to update <code>Firstname</code> and <code>Lastname</code>. </p>  <p>Problem: I need to update the <code>Firstname</code>, <code>Lastname</code>, <code>Email</code>, <code>Address</code> in our <code>OpenLdap</code> server too.</p>  <p>I have an <code>Infrastructure.Ldap</code> project where all the Ldap implementations etc sits. (repositories, services, entities, helpers, converters).</p>  <p>What is the best approach to update the LDap server?</p>  <p>Do I create another <code>ISomeRepository</code> Interface in the <code>Domain</code> which <code>Infrastructure.Ldap</code> implements? This will mean I need to add additional attributes to the <code>User</code> and just override the ORM Mapping to ignore additional attributes. I then use the <code>IRepository</code>, followed by <code>ISomeRepository</code> to update the user in both databases.</p>  <p>Or </p>  <p>Web.UI is already an infrastructure concern, so I just reference the <code>Infrastructure.Ldap</code> project and talk to the ldap repository directly which will work with a <code>LDapUser</code> object. This will let me update the User on Ldap separately. </p>  <p>I'm very confused, business rules are that we need to update user details. I assume from a DDD perspective, all the details that needs to be updated needs to live in the domain. how do I persist this <code>User</code> on 2 different data stores?</p>  <p>Is one of my options above valid and pass good practice, or is there perhaps a different solution? The business requires there to be the 2 different data stores, therefore I need to make this work. </p>  <p><code>Id</code>, <code>Firstname</code>, <code>Lastname</code> - this is stored in the application database in case Ldap goes down and will be used for auditing purposes later on.</p>  <p><code>Id</code>, <code>Firstname</code>, <code>Lastname</code>, <code>Email</code>, <code>Address</code> - this is stored in the <code>OpenLdap</code> server part of user administration. </p>  <p>Can someone please point me into the right direction please. Its really hard to think of this case strictly from a DDD perspective due to he constraints of where persistence needs to happen. If it was all on the application database, it would have been easy.</p>