<p>I'm trying to make a UserType that hashes a value. The issue I'm having is getting access to the Salt that sits in the same table.</p>  <pre><code>  void IUserType.NullSafeSet(IDbCommand cmd, object value, int index)     {         object paramVal = DBNull.Value;          if (!String.IsNullOrEmpty((string)value))         {             paramVal = ComputeHash((string)value, saltBytes?);         }          IDataParameter parameter = (IDataParameter)cmd.Parameters[index];         parameter.Value = paramVal;     } </code></pre>  <p>I am uncertain on how to <em>reliably</em> access a database column of the same table to get the salt that was set.</p>  <p>I could do something like this to access the salt column:</p>  <pre><code>byte[] saltValueBeingInsertedIntoDB = (IDataParameter)cmd.Parameters[1].Value; </code></pre>  <p>It just seems so fragile to access it via index, as the order could change. I'd love it if I could access it off of the column name, but the column name (SoureColumn) is never populated.</p>  <p>How can I reliably access the Salt that exists in cmd.Parameters? Or is there a better way? (I have full control to change whatever is needed, except the NHibernate version).</p>  <p><em>Note: If I'm setting the salt somewhere else, it may make sense for me to also hash the value in that place, rather than using a UserType.</em></p>  <p>NHiberate 2.1.2.4000 Fluent NHibernate 1.1.0.685</p>