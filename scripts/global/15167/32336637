<p>During a pen-test of an in-development app, I had a scary result where there was a successful SQL injection due to NH executing a query without parameters and instead injecting a string right into the query.</p>  <p>We're using NHibernate 4 and Fluent NHibernate 1.4.  Dialect is SQL 2008 running against SQL Azure.</p>  <p>The successful query looked like this (pulled from SQL Azure audit logs)</p>  <p><code>select columns from [Table] table0_ where table0_.TenantId='1555%00';IF(5672=5672) SELECT 5672 ELSE DROP FUNCTION GziQ--' and table0_.Active=1</code></p>  <p>As you can see, the injectable string was able to terminate the string and inject a DROP FUNCTION then comment out the rest of the statement.</p>  <p>Running this locally and using NHibernate Profiler, we see the value being passed as a parameter as-expected:</p>  <p><code>select columns from [Table] table0_ where table0_.TenantId = @p0 and table0_.Active=1</code></p>  <p>On the code side, the data is queried using an IQueryable interface (code inlined and simplified for example purposes):</p>  <pre>Session.Query&lt;TEntityType&gt;().Cachable().Table.SingleOrDefault(k => k.TenantId == tenantId && k.Active);</pre>  <p>Under what circumstanes would NHibernate not parameterize this query and instead inject the string directly into a plain SQL statement?</p>