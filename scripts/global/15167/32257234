<p>I did try and use this question <a href="http://stackoverflow.com/questions/16678741/setting-up-one-to-many-relationship-with-fluent-nhibernate">Setting up one to many relationship with Fluent Nhibernate</a> as a basis but still having issues.</p>  <p>I have two classes - Contact and PostalAddress - A Contact can have many addresses. The thing is when it gets to a class a with PostalAddress it fails with </p>  <blockquote>   <p><strong>Invalid index 1 for this SqlParameterCollection with Count=1.</strong></p> </blockquote>  <p>There is one address against that particular contact</p>  <p><strong>Contact Class</strong></p>  <pre><code>using System; using System.Collections.Generic; using System.Linq; using System.Runtime.Serialization; using System.Text; using System.Threading.Tasks;  namespace YourLivesDataEngine.DataObjects {     [DataContract()]     public class Contact     {         private String givenName;         private String surname;         private String middleName;         public Contact()         {             Emails              = new List&lt;EmailAddress&gt;();             Addresses           = new List&lt;PostalAddress&gt;();             TelephoneNumbers    = new List&lt;TelephoneNumber&gt;();              givenName           = String.Empty;             surname             = String.Empty;             middleName          = String.Empty;              Id                  = Guid.NewGuid().ToString();         }         [DataMember]         public virtual String Id { get; set; }         [DataMember]         public virtual DateTime LastUpdated { get; set; }         [DataMember]         public virtual String Network { get; set; }         [DataMember]         public virtual String NetworkId { get; set; }         [DataMember]         public virtual String Name { get; set; }         [DataMember]         public virtual String GivenName { get; set; }         [DataMember]         public virtual String Surname { get; set; }         [DataMember]         public virtual String MiddleName { get; set; }         [DataMember]         public virtual IList&lt;EmailAddress&gt; Emails { get; set; }         [DataMember(Name="Addresses")]         public virtual IList&lt;PostalAddress&gt; Addresses { get; set; }         [DataMember]         public virtual IList&lt;TelephoneNumber&gt; TelephoneNumbers { get; set; }       } } </code></pre>  <p><strong>PostalAddress Class</strong></p>  <pre><code>public class PostalAddress {     public PostalAddress()     {         Id = Guid.NewGuid().ToString();     }     [DataMember]     public virtual String Id { get; set; }     public virtual String Address { get; set; }     public virtual String Owner { get; set; }     public virtual String AddressType { get; set; }     public virtual Contact Contact { get; set; } } </code></pre>  <p>And my Mappings</p>  <p><strong>ContactMap</strong></p>  <pre><code>public class ContactMap : ClassMap&lt;Contact&gt; {     public ContactMap()     {         Table("tblContacts");         Id(x =&gt; x.Id);         Map(x =&gt; x.LastUpdated);         Map(x =&gt; x.Network);         Map(x =&gt; x.NetworkId);         Map(x =&gt; x.Name);         Map(x =&gt; x.GivenName);         Map(x =&gt; x.Surname);         Map(x =&gt; x.MiddleName);          HasMany&lt;PostalAddress&gt;(x =&gt; x.Addresses)             .Inverse()             .KeyColumns.Add("Id", mapping =&gt; mapping.Name("Id"))             .Cascade.SaveUpdate()     } } </code></pre>  <p><strong>PostalAddressMap</strong></p>  <pre><code>   public class PostalAddressMap          : ClassMap&lt;PostalAddress&gt;     {         public PostalAddressMap()         {             Table("tblPostalAddresses");             Id(x =&gt; x.Id);             Id(x =&gt; x.Address);             Id(x =&gt; x.AddressType);             Id(x =&gt; x.Owner);              References(x =&gt; x.Contact)                 .Class&lt;Contact&gt;()                 .Column("Owner");          }     } </code></pre>  <p>The code to save the Contact is</p>  <pre><code>   public void Save ( Contact Contact )     {         try         {             using (ISessionFactory factory = CreateSessionFactory())             {                 using (var session = factory.OpenSession())                 {                     using (ITransaction transaction = session.BeginTransaction())                     {                         // save the contact                         session.Save(Contact);                         transaction.Commit();                      }                 }             }         }         catch ( System.Exception e)         {             throw e;         }         finally         {          }      } </code></pre>  <p>I'm sure it is something to do with the way the mapping is set-up but cannot see it, while there are some contacts that do not have an address - some do so I should have at least some addresses.</p>