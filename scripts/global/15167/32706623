<p>My ContactInfo class contains all nullable properties (and corresponding database fields), aside from the primary key. ContactInfo is a property on another class, OrgInfo, and in the OrgInfo mapping I have ContactInfo set to Cascade.SaveUpdate(). In my application, OrgInfo is often saved with a null ContactInfo. As a result, NHibernate is inserting a ton of rows in my contact_info table with all the fields null except for the primary key.</p>  <p>My question is: how do I stop NHibernate from inserting these rows and only save when there is at least one property in ContactInfo that is not null? I'm hoping there is a way to do this in the mapping and not with conditional logic and a separate save for ContactInfo.</p>  <p>Thanks in advance</p>  <p>Here is my ContactInfo map:</p>  <pre><code>public class ContactInfoMap : ClassMap&lt;ContactInfo&gt; {     public ContactInfoMap() {         Table("contact_info");         LazyLoad();         Id(x =&gt; x.ContactInfoId).GeneratedBy.Identity().Column("contact_info_id");         Map(x =&gt; x.FirstName).Column("first_name");         Map(x =&gt; x.LastName).Column("last_name");         Map(x =&gt; x.NickName).Column("nickname");         Map(x =&gt; x.AddressStreet1).Column("address_street_1");         // ... more nullable properties     } }  </code></pre>  <p>And my OrgInfo map:</p>  <pre><code>public class OrgInfoMap : ClassMap&lt;OrgInfo&gt; {     public OrgInfoMap() {         Table("org_info");         LazyLoad();         Id(x =&gt; x.OrgInfoId).GeneratedBy.Identity().Column("org_info_id");         References(x =&gt; x.ContactInfo).Column("contact_info_id").Cascade.SaveUpdate().Not.LazyLoad();         Map(x =&gt; x.OrgName).Column("org_name");         // ... etc.     } } </code></pre>