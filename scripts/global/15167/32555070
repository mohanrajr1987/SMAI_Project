<p>I have a class say 'AllInvoices', the structure of which is as below :</p>  <pre><code>public class ActiveInvoices {     public string InvoiceId { get; set; }     public string InvoiceIssueDate { get; set; }     public string InvoiceTransactionDate { get; set; }     public string InvoiceExpiryDate { get; set; } } </code></pre>  <p>The mapping class for Entity ActiveInvoices is </p>  <pre><code>public class ActiveInvoicesMap : ClassMap&lt;ActiveInvoices&gt; {     public ActiveInvoicesMap()     {         Id(x =&gt; x.InvoiceId);         Map(x =&gt; x.InvoiceIssueDate);         Map(x =&gt; x.InvoiceTransactionDate);         Map(x =&gt; x.InvoiceExpiryDate);     } } </code></pre>  <p>Now with this entity I search for Active Invoices in database with the following class</p>  <pre><code>public class SearchInvoices {     public readonly IRepository&lt;ActiveInvoices&gt; latestActiveInvoicesRepository;      public SearchInvoices(IRepository&lt;ActiveInvoices&gt; activeInvoicesRepository)     {         latestActiveInvoicesRepository = activeInvoicesRepository;     }      public List&lt;ActiveInvoices&gt; GetActiveInvoices()     {         var listOfActiveInvoices = latestActiveInvoicesRepository.GetAll();         return listOfActiveInvoices;     } } </code></pre>  <p>To Search Active Invoices I call the Search Class method 'GetActiveInvoices()' from a workflow class which looks like below :</p>  <pre><code>public class CurrentWorkFlow {     public void GetActiveInvoices()     {         var invoiceSearch = new SearchInvoices(IRepository &lt;ActiveInvoices&gt; repository);     } } </code></pre>  <p>Now the issue in hand is that I need to make class 'SearchInvoices' generic to support all other possible types that i would create like 'ExpiredInvoices', 'ArchivedInvoices', 'FutureInvoices' etc and not just only for type 'ActiveInvoices'. These new types may or may not have the same structure as 'ActiveInvoices'. I have tried to use dynamic but thought of asking experts around here if they have any better ideas to implement the required functionality  in most optimized generic manner. </p>  <p>Regrets for being very detailed and lengthy in asking but i thought to include as many details as i can. Hope it goes well with you folks.</p>