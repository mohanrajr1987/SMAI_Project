<p>My NHibernate is working. It's creating tables but one of tables is missing. </p>  <p>Like that; I have </p>  <pre><code>AnswerModel.cs, ArticleModel.cs, CategoryModel.cs, QuestionModel.cs, RoleModel.cs, TagModel.cs, UserModel.cs CommentModel.cs </code></pre>  <p>When I started the project all of tables created but only <code>Comments</code> table not. </p>  <p>Why this anyone know?</p>  <p>Here my solution codes:</p>  <p>NHibernateHelper.cs:</p>  <pre><code>public static class NHibernateHelper {     public static ISessionFactory CreateSessionFactory()     {         string con = ConfigurationManager.ConnectionStrings["projectCoderWhoConn"].ToString();         return Fluently.Configure()             .Database(MsSqlConfiguration.MsSql2012             .ConnectionString(con))             .Mappings(m =&gt; m.FluentMappings.AddFromAssemblyOf&lt;CommentModelMap&gt;())             .ExposeConfiguration(cfg =&gt; new SchemaUpdate(cfg).Execute(false, true))             .BuildSessionFactory();     }   } </code></pre>  <p>CommentModel.cs:</p>  <pre><code>  public class CommentModel {     public virtual int Id { get; set; }     public virtual string CommentHeader { get; set; }     public virtual string CommentContent { get; set; }     public virtual UserModel User { get; set; }     public virtual DateTime PublishDate { get; set; }     public virtual bool IsActive { get; set; }     public virtual ArticleModel Article { get; set; }  } </code></pre>  <p>CommentModelMap.cs:</p>  <pre><code>public class CommentModelMap : ClassMap&lt;CommentModel&gt; {     public CommentModelMap()     {         Table("Comments");          Id(x =&gt; x.Id).GeneratedBy.Identity();          Map(x =&gt; x.CommentHeader);         Map(x =&gt; x.CommentContent);         Map(x =&gt; x.PublishDate);         Map(x =&gt; x.IsActive);          References(x =&gt; x.Article).PropertyRef(x =&gt; x.Id).Column("Article").Index("IX_COMMENTS_ARTICLEID");         References(x =&gt; x.User).PropertyRef(x =&gt; x.Id).Column("User").Index("IX_COMMENTS_USERID");      } } </code></pre>  <p>ArticleModelMap.cs:</p>  <pre><code>public class ArticleModelMap : ClassMap&lt;ArticleModel&gt; {     public ArticleModelMap()     {         Table("Articles");          Id(x =&gt; x.Id).GeneratedBy.Identity();          Map(x =&gt; x.ArtContent);         Map(x =&gt; x.EditDate);         Map(x =&gt; x.Header);         Map(x =&gt; x.IsActive);         Map(x =&gt; x.PublishDate);         Map(x =&gt; x.Views);         Map(x =&gt; x.CoverImageUrl);          References(x =&gt; x.CategoryId).PropertyRef(x =&gt; x.Id).Column("Category").Index("IX_ARTICLE_CATEGORYID");         HasMany(x =&gt; x.Comments).PropertyRef("Id").KeyColumn("Id");         HasManyToMany(x =&gt; x.Tags).Table("ArticlesTags");         References(x =&gt; x.Author).PropertyRef(x =&gt; x.Id).Column("Author").Index("IX_ARTICLE_AUTHORID");         References(x =&gt; x.EditedBy).PropertyRef(x =&gt; x.Id).Column("EditedBy").Index("IX_ARTICLE_EDITEDBY");     } } </code></pre>  <p>UserModelMap.cs:</p>  <pre><code>public class UserModelMap : ClassMap&lt;UserModel&gt; {     public UserModelMap()     {         Table("Users");          Id(x =&gt; x.Id).GeneratedBy.Identity();          Map(x =&gt; x.FirstName);         Map(x =&gt; x.LastName);         Map(x =&gt; x.BirthDate);         Map(x =&gt; x.EMail);         Map(x =&gt; x.UserName);         Map(x =&gt; x.Password);         Map(x =&gt; x.Adress);         Map(x =&gt; x.About);         Map(x =&gt; x.FaceBookLink);         Map(x =&gt; x.GooglePlusLink);         Map(x =&gt; x.IsActive);         Map(x =&gt; x.LastLogIn);         Map(x =&gt; x.LastLoginIP);         Map(x =&gt; x.PinterestLink);         Map(x =&gt; x.RegisterDate);         Map(x =&gt; x.Telephone);         Map(x =&gt; x.WebSiteLink);         Map(x =&gt; x.TwitterLink);         Map(x =&gt; x.RegisterIp);         Map(x =&gt; x.IsFreelancer);          HasMany(x =&gt; x.UserRole);         HasMany(x =&gt; x.Comments).PropertyRef("Id").KeyColumn("Id");     } } </code></pre>