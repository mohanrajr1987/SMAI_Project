<p>I have the following classes defined:</p>  <p><a href="http://i.stack.imgur.com/FyLhZ.png" rel="nofollow"><img src="http://i.stack.imgur.com/FyLhZ.png" alt="enter image description here"></a></p>  <p>And these tables in my database:</p>  <p><a href="http://i.stack.imgur.com/QeTOY.png" rel="nofollow"><img src="http://i.stack.imgur.com/QeTOY.png" alt="enter image description here"></a></p>  <p>My fluent NHibernate mappings are:</p>  <pre><code>public class BusinessUnitMap : ClassMap&lt;BusinessUnit&gt; {     public BusinessUnitMap()     {         Table("BusinessUnits");          Id(x =&gt; x.Id);          Map(x =&gt; x.Code);         Map(x =&gt; x.Name);         Map(x =&gt; x.ParentId);         Map(x =&gt; x.Type).Column("Type").CustomType&lt;BusinessUnitType&gt;();     } }  public class CompanyMap : SubclassMap&lt;Company&gt; {     public CompanyMap()     {         Table("CompanyData");          KeyColumn("BusinessUnitID");          Map(x =&gt; x.Something);     } }  public class FranchiseeMap : SubclassMap&lt;Franchisee&gt; {     public FranchiseeMap()     {         Table("FranchiseeData");          KeyColumn("BusinessUnitID");          Map(x =&gt; x.SomethingDifferent);     } }  public class StoreMap : SubclassMap&lt;Store&gt; {     public StoreMap()     {         Table("StoreData");          KeyColumn("BusinessUnitID");          Map(x =&gt; x.SomethingElse);     } } </code></pre>  <p><strong>Question #1</strong> As far as I can tell, my code and database are setup the same as every example I've been able to find.  According to those articles, NHibernate is supposed to be smart enough to determine what subclass to instantiate when I query for a particular subclass.  But, when I execute the following statement:</p>  <pre><code>var result = Session.QueryOver&lt;BusinessUnit&gt;()                     .Where(x =&gt; x.Code == "Acme")                     .SingleOrDefault(); </code></pre>  <p>an exception is thrown because it can't create an instance of the abstract BusinessUnit class.  The only way I can get this to work is to specify Company as the type argument for QueryOver.</p>  <p>I've confirmed that using a discriminator breaks since NHibernate is looking for all of the columns to exist in a single table.  Without it, though, I struggle to see how NHibernate would know what type to instantiate.</p>  <p>What am I doing wrong?  Is the problem in my mappings, the way I'm querying, ...?</p>  <p><strong>Question #2</strong> When I change the query to something like this:</p>  <pre><code>public T WithCode&lt;T&gt;(String code)     where T : BusinessUnit {     var result = Session.QueryOver&lt;T&gt;()                         .Where(x =&gt; x.Code == code)                         .SingleOrDefault();      return result; } </code></pre>  <p>I get an exception indicating that the UPDATE statement conflicts with a foreign key constraint.  Update statement!!!!  Clearly something is still not right. How can a QueryOver call result in an UPDATE statement?  What am I missing?</p>