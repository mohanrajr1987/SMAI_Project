<p>I have a base library created in VB6 that exposes a standard COM interface that is used in a number of applications. This also exposed a number of error code constants, used with <code>Err.Raise</code> to indicate certain conditions.</p>  <pre><code>Public Enum IOErrors   IOErrorBase = 45000   IOErrorConnectionFailed   IOErrorAuthFailed   IOErrorNotConnected   IOErrorInvalidPortDirection   IOErrorGettingValue   IOErrorNoValueYet End Enum </code></pre>  <p>Come on 10 years and we're creating C# objects implementing the same set of interfaces and want to throw exceptions in a way that the calling application will recognise them.</p>  <p>I can only find two relevant classes, <code>Win32Exception</code> and <code>COMException</code>.</p>  <p>Throwing <code>Win32Exception((int)IOErrors.IOErrorConnectionFailed, "Connect failed")</code> passes the message back correctly but the error code is ignored and <code>Err.Number</code> is <code>&amp;H80004005</code>.</p>  <p>Throwing <code>COMException("Connect failed", IOErrors.IOErrorConnectionFailed)</code> results in no error being picked up in the calling application, presumably because the error code is not an <code>HRESULT</code> and is positive, meaning success.</p>  <p>TL;DR How can I throw an exception from C# such that COM interop will translate it into one of the recognised (positive) error codes above?</p>