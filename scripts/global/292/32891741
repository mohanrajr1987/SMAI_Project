<p>I've done a lot of research on "best practices" surrounding this and have read blog post after blog post, SO question after SO question, and OWASP article after OWASP article. I've arrived at a few clear answers but some unknowns.</p>  <p>First, the "Do's":</p>  <ol> <li>Use JWT for authorizing users on my REST API <a href="https://stormpath.com/blog/secure-single-page-app-problem/" rel="nofollow">[1]</a> <a href="https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/" rel="nofollow">[2]</a></li> <li>Store the JWT in a HTTPOnly/Secure cookie and build in CSRF protection. Do NOT store in HTML5 local storage <a href="https://www.owasp.org/index.php/HTML5_Security_Cheat_Sheet#Local_Storage" rel="nofollow">[3]</a> <a href="https://blog.whitehatsec.com/web-storage-security/" rel="nofollow">[4]</a> <a href="https://stormpath.com/blog/where-to-store-your-jwts-cookies-vs-html5-web-storage/" rel="nofollow">[5]</a> (Actually, this point is debatable, is it easier to protect against XSS or CSRF? <a href="https://auth0.com/blog/2014/01/27/ten-things-you-should-know-about-tokens-and-cookies/#xss-xsrf" rel="nofollow">[6]</a>)</li> <li>Verify the signing method of the JWT <a href="https://auth0.com/blog/2015/03/31/critical-vulnerabilities-in-json-web-token-libraries/" rel="nofollow">[7]</a></li> </ol>  <p>Now I started with the assumption that having a SPA (built with Angular) and using HTML5 sessionStorage would be secure enough for short-lived tokens, but there is a point to be made that XSS attacks can happen from a "bad actor" originating in the one of many libraries loaded in from a CDN.</p>  <p>For my specific use case, I do not plan on having long-lived tokens - expiration after 10 minutes of non-use but I'm still figuring out if I want to track expiration by session or use refresh tokens - StormPath recommends the former (no longer stateless?) but I believe big players using JWTs use refresh tokens (Google uses them but states you need to store them in secure, long-term storage which means HTML5 localStorage is again, out of the question).</p>  <p>I would like to make it so my users don't have to log back in if they refresh the page (hence the need to store the token on the client side). I would also like to use my SPA as a "mobile app" with the help of Cordova. The obvious pitfall here is that if I use cookies, there is no baked-in cookie support/storage with Cordova and I'm urged to switch to HTML5 local storage instead. Since on mobile I don't really need to worry about refreshing pages, I can just let my token live in memory and expire with the strategy I settle on.</p>  <p>If I take this approach, cookie-based JWT on Desktop, "Bearer" headers on mobile, I now need an authentication end-point that will give tokens two different ways, and when I authorize on the REST API side, I need to support both cookie-based JWTs (with CSRF) and header based JWT verification. This complication has me worried as I don't know if I can accurately foresee security implications here.</p>  <p>To summarize the barrage of thoughts above:</p>  <ul> <li>Create an authentication handler that would hand out tokens via HttpOnly/Secure cookies to desktop, and by payload for mobile.</li> <li>On my REST API, support both methods of verification - header based and cookie-based - including CSRF protection for the cookie-based approach.</li> </ul>  <p><strong>Is there any reason why I wouldn't want to take this approach?</strong> I assume if I take XSS on my SPA as a serious risk, then I need a classic login-page for authentication to set the proper cookies because if I do authentication via the SPA, then any XSS attack could potentially intercept that as well (both on mobile and Desktop)! However, on mobile, I'd need to inject the JWT into SPA, maybe through some custom DOM element (meta tag?), but at that point I can just let the SPA perform the login and not consider XSS a threat on mobile devices. Cordova packages all assets into the install package so that's somewhat better but then why not take the same approach on the Desktop version?</p>  <p>My application takes very little user input, it is primarily a dashboard/reporting tool. There will be a "message center" but it's content should always be user-created (by only that user) and sanitized. <strong>In my use-case then, would it be ok to deviate from "best practices" and rely on localStorage not counting XSS as a serious risk for my SPA?</strong> This would simplify this entire thing (use HTML5 sessionStorage as originally planned) and reduce complexity, which would reduce attack surface for potential security blunders. I just want to make sure I understand the risks before moving forward.</p>  <p><strong>Is there no secure way to make this secure other than by building a native app for mobile and not using Cordova to convert my SPA to a mobile app?</strong> I'd hate for this to be the case, but it might very well be. </p>  <p>I'd appreciate all thoughts on the matter!</p>