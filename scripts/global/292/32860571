<p>I have an ASP .Net 4.5 MVC website where I have customized the forms authentication following <a href="http://www.dotnet-tricks.com/Tutorial/mvc/G54G220114-Custom-Authentication-and-Authorization-in-ASP.NET-MVC.html" rel="nofollow">this tutorial</a>. The difference is that I'm authenticating via a backend dll, so I have skipped all the database-stuff in the tutorial and where the tutorial fetches the user from the database I get it from a regular method call.  I have followed this tutorial before and successfully implemented it in a new MVC website. This time I have implemented it on an existing MVC website, and I cannot get it to work. </p>  <p>When the cookie is added to <code>Response.Cookies</code> it only exists until the code returns a View to the user. After that it does no longer exist in <code>Response.Cookies</code> and this means that in the Global.asax <code>Application_PostAuthenticateRequest</code> method, <code>var authCookie = Request.Cookies[FormsAuthentication.FormsCookieName];</code> always returns <code>null</code>. I have tried to add other simple cookies and these persist as expected.</p>  <p>This is how I add the forms authentication cookie</p>  <pre><code>CustomUser user = service.GetUser(username, password);              if (user != null)             {                 var serializeModel = new CustomPrincipalSerializeModel                 {                     UserName = user.UserName,                     UserId = user.Id                 };                  var userData = JsonConvert.SerializeObject(serializeModel);                 var authTicket = new FormsAuthenticationTicket(1, user.Id, DateTime.Now, DateTime.Now.AddMinutes(30), false, userData);                 var encryptedTicket = FormsAuthentication.Encrypt(authTicket);                  var cookie = new HttpCookie(FormsAuthentication.FormsCookieName, encryptedTicket) { Expires = DateTime.Now.AddMinutes(30) };                 Response.AppendCookie(cookie);             } </code></pre>  <p>And if I change this line</p>  <pre><code>var cookie = new HttpCookie(FormsAuthentication.FormsCookieName, encryptedTicket) { Expires = DateTime.Now.AddMinutes(30) }; </code></pre>  <p>To</p>  <pre><code>var cookie = new HttpCookie("test", "testing") { Expires = DateTime.Now.AddMinutes(30) }; </code></pre>  <p>Then the "test" cookie will act as expected and I can get it in Global.asax <code>Application_PostAuthenticateRequest</code></p>