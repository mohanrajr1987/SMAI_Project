<p>I am using asp.net identity 2.0 for authentication(Owin middleware) in my application. Session hijacking: When i login Identity creates AspNet.ApplicationCookie.then,I copied AspNet.ApplicationCookie value.Then i logged out from the application.After Logout,I am creating cookie manually(AspNet.ApplicationCookie) and do a refresh It redirects me home page.</p>  <p>Privilege Escalation: At the same time i logged in as a User A.I copied(AspNet.ApplicationCookie) his cookie and the i logged out.After i logged in as a User B.I am editing User B Cookie and pasted User A cookie and saved it.After I refreshed the browser I can get UserA access and authentication.</p>  <p>I am clearing all the session and and delete all the cookies When i logged out.Even Asp.Net identity(Owin) generates new AspNet.ApplicationCookie each and every time.But still it accepts old cookies and give me a access.I don't know why?  Can any one give me how to invalidate old AspNet.ApplicationCookie after log out. This  is my code in Startup.Auth.cs</p>  <pre><code> public void ConfigureAuth(IAppBuilder app)     {         // Enable the application to use a cookie to store information for the signed in user         app.UseCookieAuthentication(new CookieAuthenticationOptions         {             AuthenticationType = DefaultAuthenticationTypes.ApplicationCookie,             LoginPath = new PathString("/Account/Login")         });         // Use a cookie to temporarily store information about a user logging in with a third party login provider         app.UseExternalSignInCookie(DefaultAuthenticationTypes.ExternalCookie);       } </code></pre>  <p>//This is logout code</p>  <pre><code>    public ActionResult LogOff ( )     {         //Delete all cookies while user log out         string[] myCookies = Request.Cookies.AllKeys;         foreach ( var cookies in myCookies )         {             Response.Cookies[ cookies ].Expires = DateTime.Now.AddDays(-1);          }         Request.GetOwinContext( ).Authentication.SignOut(Microsoft.AspNet.Identity.DefaultAuthenticationTypes.ApplicationCookie);          // AuthenticationManager.SignOut( );         Session.Clear( );         Session.RemoveAll( );         Session.Abandon( );         return RedirectToAction("LoginPage", "Account");     } </code></pre>  <p>//This is my login controller code</p>  <pre><code> public async Task&lt;ActionResult&gt; Login(LoginViewModel model, string returnUrl)     {         if (ModelState.IsValid)         {             var user = await UserManager.FindAsync(model.UserName, model.Password);             if (user != null)             {                 await SignInAsync(user, model.RememberMe);                 return RedirectToLocal(returnUrl);             }             else             {                 ModelState.AddModelError("", "Invalid username or password.");             }         }          // If we got this far, something failed, redisplay form         return View(model);     } </code></pre>