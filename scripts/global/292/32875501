<p>I have this Node API that frontends a backend OAuth server. At the end of the SAML OAuth dance, I set the Bearer Token in a browser cookie. </p>  <pre><code>// need cookieParser middleware before we can do anything with cookies app.use(express.cookieParser());  // set a cookie app.use(function (req, res, next) {   // check if client sent cookie   var cookie = req.cookies.cookieName;   if (cookie === undefined)   {     // no: set a new cookie     var randomNumber=Math.random().toString();     randomNumber=randomNumber.substring(2,randomNumber.length);     res.cookie('cookieName',randomNumber, { maxAge: 900000, httpOnly: true });     console.log('cookie created successfully');   }    else   {     // yes, cookie was already present      console.log('cookie exists', cookie);   }    next();  });   app.use(express.static(__dirname + '/public')); </code></pre>  <p>Now I was introduced to a fancy NPM which does pretty much the same thing <a href="https://github.com/mozilla/node-client-sessions" rel="nofollow">https://github.com/mozilla/node-client-sessions</a></p>  <p>While I was almost inclined on using this NPM, I bumped into express-session. <a href="https://github.com/expressjs/session" rel="nofollow">https://github.com/expressjs/session</a> - this is for server side sessions. But this also sets a cookie </p>  <pre><code>    var express = require('express');     var session = require("express-session");     var app = express();       app.use(session({         resave: true,         saveUninitialized: true,         secret: 'ABC123',         cookie: {             maxAge: 60000         }     }));       app.get("/test", function(req, res) {         req.session.user_agent = req.headers['user-agent'];         res.send("session set");     }); </code></pre>  <p>If my need to set only a bearer token in the browser cookie for subsequent API calls, which option should be my choice? </p>