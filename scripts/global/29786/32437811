<p>In my iOS app I have a table a table where I want to display a long list of tasks with 4 categories: open, closed, suspended, expired. So I have created a table with 4 headers and each header has a unique identifier for its cell:</p>  <p><a href="http://i.stack.imgur.com/yqDoW.png" rel="nofollow"><img src="http://i.stack.imgur.com/yqDoW.png" alt="enter image description here"></a></p>  <p>Following a tutorial, after querying a database my tasks are organized in an object whose class is this:</p>  <pre><code>import Foundation </code></pre>  <p>class TaskMenuItems:NSObject {</p>  <pre><code>var sections:[String] = [] var items:[String:[Task]] = [:]  func addSection(section:String, sectionItems:[Task]) {     self.sections = self.sections + [section]     self.items[section] = sectionItems }  func organize(tasks:[Task]) {      var open:[Task] = []     var closed:[Task] = []     var expired:[Task] = []     var suspended:[Task] = []      for task in tasks {         switch task.stato {         case "Aperto":             open.append(task)             break         case "Chiuso":             closed.append(task)             break         case "Scaduto":             expired.append(task)             break         case "Sospeso":             suspended.append(task)             break         default:             break          }     }      self.addSection("Aperti", sectionItems: open)     self.addSection("Chiusi", sectionItems: closed)     self.addSection("Scaduti", sectionItems: expired)     self.addSection("Sospesi", sectionItems: suspended) } } </code></pre>  <p>so it is an associative array where keys are the state of the task while the values are an array of tasks with that state. This is correctly done... the problm is that I'm not able to write the following method to populate the table:</p>  <pre><code>override func tableView(tableView: UITableView,     cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { } </code></pre>  <p>So, here is my Swift class view controller associated to the table:</p>  <pre><code>import UIKit </code></pre>  <p>class AllTasksViewController: UITableViewController {</p>  <pre><code>var allTasks = [Task]() var taskService = TaskService() var organizedTasks = TaskMenuItems()  override func viewWillAppear(animated: Bool) {     self.tabBarController?.navigationItem.setHidesBackButton(true, animated: true)      self.tabBarController?.navigationItem.rightBarButtonItem = self.editButtonItem()     if (LoggedUser.isLogged) {         self.navigationItem.setHidesBackButton(false, animated: true)         self.taskService.requestAllTasks {             (response) in             self.allTasks = self.taskService.loadTasks(response) as! [Task]             self.organizedTasks.organize(self.allTasks)             /*println(self.organizedTasks.items["Aperti"]?.count)             println(self.organizedTasks.items["Chiusi"]?.count)             println(self.organizedTasks.items["Scaduti"]?.count)             println(self.organizedTasks.items["Sospesi"]?.count)*/             dispatch_async(dispatch_get_main_queue()) {                 self.tableView.reloadData()             }         }     } }  override func viewDidLoad() {     super.viewDidLoad() }  override func didReceiveMemoryWarning() {     super.didReceiveMemoryWarning() }   /* Number of sections */ override func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int {     return self.organizedTasks.sections.count }  /* Number of rows for each section */ override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {      switch section {     case 0:         return self.organizedTasks.items["Aperti"]!.count     case 1:         return self.organizedTasks.items["Chiusi"]!.count     case 2:         return self.organizedTasks.items["Scaduti"]!.count     case 3:         return self.organizedTasks.items["Sospesi"]!.count     default:         return -1     }  }   override func tableView(tableView: UITableView,     cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell { } </code></pre>  <p>Actually I'm getting confused by something trivial I know because I think to indexPath as a String and not as an Int...In fact I am supposed to do:</p>  <pre><code>let cell = tableView.dequeueReusableCellWithIdentifier("OpenTask",               forIndexPath: indexPath) as! UITableViewCell//2      cell.textLabel?.text = self.organizedTasks.items[indexPath.section][indexPath.row] </code></pre>  <p>but in my case indexPath.row should be a String... :( Moreover, how can I access the n-th task object of that status in that associative array? something similar</p>  <pre><code>self.organizedTasks.items["Aperti"][0] </code></pre>  <p>won't work...</p>  <p>Would you please give any hint?</p>