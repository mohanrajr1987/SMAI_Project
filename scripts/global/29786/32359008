<p>This question is tantalizing close to <a href="http://stackoverflow.com/questions/21723915/binary-searching-nsarray-without-having-the-object-to-search-but-a-condition">this question</a>.</p>  <p>Say I have <code>NSArray</code> of <code>Foo</code> objects sorted on a particular property (e.g., say the objects have an <code>NSDate*</code> property named <code>date</code>):</p>  <pre><code>@interface Foo : NSObject  @property (strong, nonatomic) NSDate *date; // sort key ... @end  ... NSArray *arrayOfFoos; </code></pre>  <p>How do I perform a <em>binary search</em> of this array looking for an object with a particular date using <code>NSArray</code>'s provided method below? Here is my current attempt:</p>  <pre><code>const NSInteger index =     [arrayOfFoos indexOfObject:date                 inSortedRange:(NSRange){0, arrayOfFoos.count}                       options:NSBinarySearchingFirstEqual               usingComparator:^NSComparisonResult(id obj1, id obj2) {                                   NSDate *d = (NSDate*) obj1;                                   Foo *foo = (Foo*)obj2;                                   return [d compare:foo.date];                                }]; </code></pre>  <p>Here I (incorrectly) assumed that the first parameter <code>obj1</code> would be the search key, and <code>obj2</code> would be the array element.</p>  <p>Note: I am trying to avoid wrapping the <code>date</code> key in a temporary <code>Foo</code> object (if that is possible).</p>