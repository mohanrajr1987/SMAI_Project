<p>I've got a Java Config class called <code>PersistenceJPAConfig</code> in which I configure the stuff related to persistence (session factory, transactions, etc),  a <code>UserService</code> class that communicates with the <code>UserDAO</code> to get all users from the database using a method from the SessionFactory. </p>  <p>Everything seems beautifully functional in theory. However, when I try to get these users : a "NullPointerException" is thrown.</p>  <p>Does anyone have a clue?</p>  <p><strong>Config class</strong></p>  <pre><code>@Configuration @EnableTransactionManagement public class PersistenceJPAConfig {   @Bean public SessionFactory sessionFactory(){      LocalSessionFactoryBuilder sessionBuilder = new LocalSessionFactoryBuilder(dataSource());      sessionBuilder.scanPackages("com.br.modelar.Modelar.model").addProperties(additionalProperties());     SessionFactory sessionFactory = sessionBuilder.buildSessionFactory();      return sessionFactory; }  @Bean public HibernateTransactionManager transactionManager(){      HibernateTransactionManager transactionManager = new HibernateTransactionManager(sessionFactory());     return transactionManager; }  @Bean public LocalContainerEntityManagerFactoryBean entityManagerFactory() {      LocalContainerEntityManagerFactoryBean manager = new LocalContainerEntityManagerFactoryBean();     JpaVendorAdapter adapter = new HibernateJpaVendorAdapter();      manager.setDataSource(dataSource());     manager.setPackagesToScan("com.br.modelar.Modelar.model");     manager.setJpaVendorAdapter(adapter);     manager.setJpaProperties(additionalProperties());      return manager; }  @Bean public DataSource dataSource() {      DriverManagerDataSource dataSource = new DriverManagerDataSource();      dataSource.setDriverClassName("com.mysql.jdbc.Driver");     dataSource.setUrl("jdbc:mysql://localhost:3306/modelar_test");     dataSource.setUsername("root");     dataSource.setPassword("");      return dataSource; }  @Bean public PersistenceExceptionTranslationPostProcessor exceptionTranslation() {     return new PersistenceExceptionTranslationPostProcessor(); }  Properties additionalProperties() {     Properties properties = new Properties();      properties.put("hibernate.query.factory_class","org.hibernate.hql.classic.ClassicQueryTranslatorFactory");     properties.put("hibernate.hbm2ddl.auto", "create-drop");     properties.put("hibernate.dialect",             "org.hibernate.dialect.MySQL5Dialect");     return properties; }  } </code></pre>  <p><strong>UserService class</strong></p>  <pre><code>@Service("userService") public class UserService implements ServiceInterface&lt;User, Integer&gt;{  private HibernateUserDAO userDAO;  public UserService() {     userDAO = new HibernateUserDAO(); } @Override public List&lt;User&gt; getAll() {      return userDAO.getAll(); } } </code></pre>  <p><strong>DAO class</strong></p>  <pre><code>@Repository public class HibernateUserDAO implements DAOInterface&lt;User, Integer&gt;{  @Autowired private SessionFactory sessionFactory;  @Transactional(readOnly = true) @SuppressWarnings("unchecked") @Override public List&lt;User&gt; getAll() {      List&lt;User&gt; users = sessionFactory.getCurrentSession().createQuery("SELECT FROM mduser").list();      return users; } } </code></pre>  <p><strong>Stack Trace</strong></p>  <pre><code>java.lang.NullPointerException com.br.modelar.Modelar.dao.HibernateUserDAO.getAll(HibernateUserDAO.java:50) com.br.modelar.Modelar.service.UserService.getAll(UserService.java:44) com.br.modelar.Modelar.controller.AdminController.viewUsers(AdminController.java:69) sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) java.lang.reflect.Method.invoke(Unknown Source) org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:221) org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:137) org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:111) org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:806) org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:729) org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959) org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) javax.servlet.http.HttpServlet.service(HttpServlet.java:622) org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) javax.servlet.http.HttpServlet.service(HttpServlet.java:729) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </code></pre>  <p><strong>Admin Controller - Call to getAll()</strong></p>  <pre><code>@Controller public class AdminController {       @RequestMapping(value = "/view_users") public ModelAndView viewUsers() {      ModelAndView model = new ModelAndView("admin/show_users");     //UserDAO dao = new UserDAO();      //List&lt;User&gt; users = dao.getAll();      UserService service = new UserService();     List&lt;User&gt; users = service.getAll();      model.addObject("users", users);     return model; } } </code></pre>