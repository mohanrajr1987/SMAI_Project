<p>my app runs a background local notification, it updates a textview's text. i got a problem with putting the value in the textview. the logcat tells me that the textview is lost or not found because of the NullPointerException error in the log and pointing it by the number line in the log. so i was thinking that it was because of the fact that the textview wasn't initialized by the main activity where the local notification runs. so i think, i most call the other activities  oncreate inside the main activity. and also, i'm not sure though, it might be because of my recent update to my code. i've put a sharedpreference in it to save the value of the textview when changing activities. it saved the value but the value never change and also it never gets back to zero which i would like it to be</p>  <p>this my main activity's code:</p>  <pre><code>public class MainActivity extends Activity {      private static final String PROJECT_ID = "api-project-xxxxxxxxxxx";     AsyncTask&lt;Void, Void, Void&gt; mRegisterTask;     AlertDialogManager adm = new AlertDialogManager();     ConnectionDetector cd;      public static String billName;     public static String emailAdd;     public static String accntNum;      Button addDevice, showDevice, showDialog, register;     Switch swiGCM;     TextView txtRegStatusResult, txtBroadcastMsg;      private String registrationStatus = "Not yet registered";     private String broadcastMessage = "No broadcast message";      String[] arrContentTxt;     final Context ctx = this;     int notifCount = 0;     int x = 0;     int contentTxtLength;     Handler notifLauncher, notifStopper;     String contentTxt;     GlobalVariables gv = new GlobalVariables();     int delay = gv.reminderDelay;     int stopDelay = delay - (delay / 5);     Handler hand;      IntentFilter gcmFilter;      //new set of variables for billCompute     //for bill compute     int totalWatt;     int timerFirstRun;     int totalHour = 1;     double wattHourPerDay;     double kiloWattPerDay;     double kiloWattPerMonth;      //bill     int id;     int watt;     int stat;     String name;      //also for bill compute     double billPerMonth;     Double res;      //global variables     double costPerMonth = gv.costPerMonth;      Handler handler;     Handler adapter;      //end new variables     @Override     protected void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         setContentView(R.layout.activity_main);         addDevice = (Button)findViewById(R.id.btnAddDevice);         showDevice = (Button)findViewById(R.id.btnShowDevice);         showDialog = (Button)findViewById(R.id.btnShowDialog);         register = (Button)findViewById(R.id.btnMainRegister);         swiGCM = (Switch)findViewById(R.id.switchGCM);          txtRegStatusResult = (TextView)findViewById(R.id.txtStatus);         txtBroadcastMsg = (TextView)findViewById(R.id.txtBroadCastMsg);         txtRegStatusResult = (TextView) findViewById(R.id.lblStatus);          Log.d("Batelec", "initiating lblBillVal");         //ListViewForm.lblBillVal.setText("");         Log.d("Batelec", "initiated lblBillVal");         Intent i = getIntent();         billName = i.getStringExtra(billName);         emailAdd = i.getStringExtra(emailAdd);         accntNum = i.getStringExtra(accntNum);          //for local notif          Resources res = getResources();         arrContentTxt = res.getStringArray(R.array.notifContentText);          contentTxtLength = arrContentTxt.length;         Log.d("Batelec", "content txt length: "+contentTxtLength);          showDialog.setOnClickListener(new OnClickListener(){              @Override             public void onClick(View v) {                 /*DialogFragment diag = new SwitchCheckChange();                 diag.show(getFragmentManager(), "cbo Click");*/                 showNotif();             }          });          gcmFilter = new IntentFilter();         gcmFilter.addAction("GCM_RECEIVED_ACTION");          useNotifLauncher();         //useNotifStopper();         //BillComputer.useHandler();          swiGCM.setOnClickListener(new OnClickListener(){              @Override             public void onClick(View v) {                 Log.d("Batelec", "inside switch GCM");                 if(swiGCM.isChecked()){                     connectToGCMServer();                 }             }          });      }      //connect to gcm     public void connectToGCMServer(){         //try{             Log.d("Batelec", "start gcm client");             //start gcm             cd = new ConnectionDetector(getApplicationContext());             Log.d("Batelec", "loaded connection detector");               // Check if Internet present             if (!cd.isConnectingToInternet()) {                 // Internet Connection is not present                 adm.showAlertDialog(MainActivity.this, "Internet Connection Error",                 "Please connect to a working Internet connection", false);                 // stop executing code by return                 Log.d("Batelec", "not connecting to internet");                 return;             }              // Make sure the device has the proper dependencies.             GCMRegistrar.checkDevice(ctx);             Log.d("Batelec", "device checked");             // Make sure the manifest was properly set - comment out this line             // while developing the app, then uncomment it when it's ready.             GCMRegistrar.checkManifest(ctx);             Log.d("Batelec", "manifest checked");               registerReceiver(mHandleMessageReceiver, new IntentFilter(DISPLAY_MESSAGE_ACTION));             Log.d("Batelec", "registered receiver");             // Get GCM registration id             final String regId = GCMRegistrar.getRegistrationId(ctx);             Log.d("Batelec", "acquire registration id");               try{             // Check if regid already presents             if (regId.equals("")) {                 // Registration is not present, register now with GCM                            GCMRegistrar.register(this, SENDER_ID);                 Log.d("Batelec", "registration id is null, registering device");             }             else {                 // Device is already registered on GCM             if (GCMRegistrar.isRegisteredOnServer(this)) {                 // Skips registration.                               Toast.makeText(getApplicationContext(), "Already registered with GCM", Toast.LENGTH_LONG).show();                 Log.d("Batelec", "device already registered");             } else {                 Log.d("Batelec", "registering again using AsyncTask");                 final Context context = this;                 mRegisterTask = new AsyncTask&lt;Void, Void, Void&gt;() {                      @Override                     protected Void doInBackground(Void... params) {                         // Register on our server                         // On server creates a new user                         ServerUtilities.register(context, billName, emailAdd, accntNum, regId);                         Log.d("Batelec", "registering user to server");                         return null;                     }                      @Override                     protected void onPostExecute(Void result) {                         mRegisterTask = null;                     }                  };                 mRegisterTask.execute(null, null, null);                 }             }//end gcm         }catch(Exception e){             Log.d("Batelec", "GCM Client Err: "+e);         }      }      private final BroadcastReceiver mHandleMessageReceiver = new BroadcastReceiver() {         @Override         public void onReceive(Context context, Intent intent) {             String newMessage = intent.getExtras().getString(EXTRA_MESSAGE);             // Waking up mobile if it is sleeping             WakeLocker.acquire(getApplicationContext());              /**              * Take appropriate action on this message              * depending upon your app requirement              * For now i am just displaying it on the screen              * */              // Showing received message             txtRegStatusResult.append(newMessage + "\n");                        Toast.makeText(getApplicationContext(), "New Message: " + newMessage, Toast.LENGTH_LONG).show();              // Releasing wake lock             WakeLocker.release();         }     };      @Override     protected void onDestroy() {         if (mRegisterTask != null) {             mRegisterTask.cancel(true);         }         try {             //unregisterReceiver(mHandleMessageReceiver);             unregisterReceiver(mHandleMessageReceiver);             GCMRegistrar.onDestroy(this);         } catch (Exception e) {             Log.e("UnRegister Receiver Error", "&gt; " + e.getMessage());         }         super.onDestroy();     }      public void registerClick(View v){         Intent i = new Intent(this, RegisterActivity.class);         startActivity(i);     }     //start countdown for showing local notif     public void useNotifLauncher(){         notifLauncher = new Handler(){              @Override               public void handleMessage(Message msg) {                   Bundle bundle = msg.getData();                   String string = bundle.getString("myKey");                   Log.d("Batelec", "in handler string val: "+string);                   //ListViewForm.lblBillVal.setText(string);                   gv.billVal = string;                   Log.d("Batelec", "main gv.billVal: "+gv.billVal);               }         };         notifLauncher.postDelayed(runNotif, delay);     }      public Runnable runNotif = new Runnable(){          @Override         public void run() {             showNotif();             billCompute();             notifLauncher.postDelayed(runNotif, delay);         }      };      public void useNotifStopper(){         notifStopper = new Handler();         notifStopper.postDelayed(stopNotif, stopDelay);     }     //destroy local notif     public Runnable stopNotif = new Runnable(){          @Override         public void run() {              cancelNotification(x);             notifStopper.postDelayed(stopNotif, stopDelay);         }      };      @Override     public void onSaveInstanceState(Bundle savedInstanceState) {          super.onSaveInstanceState(savedInstanceState);          savedInstanceState.putString("BroadcastMessage", broadcastMessage);      }       @Override     public void onRestoreInstanceState(Bundle savedInstanceState) {          super.onRestoreInstanceState(savedInstanceState);          broadcastMessage = savedInstanceState.getString("BroadcastMessage");         txtBroadcastMsg.setText(broadcastMessage);     }       @Override     protected void onPause() {          unregisterReceiver(mHandleMessageReceiver);         super.onPause();     }      @Override     protected void onResume() {         super.onResume();         registerReceiver(mHandleMessageReceiver, gcmFilter);      }      //add device button     public void addClick(View v){         Intent i = new Intent(this, AddDeviceForm.class);         startActivity(i);     }     //show device button     public void showClick(View v){         Toast.makeText(getBaseContext(), "Please wait...", Toast.LENGTH_LONG).show();         Intent i = new Intent(this, ListViewForm.class);         startActivity(i);     }     //show local notif     public void showNotif(){         contentTxt = arrContentTxt[notifCount];         Log.d("Batelec", "main notifCount: "+notifCount);          Bundle b = new Bundle();         b.putInt("notifCountNum", notifCount);           Uri notifSound = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);          Intent i = new Intent(MainActivity.this, NotifReceiver.class);         i.putExtras(b);         PendingIntent pi = PendingIntent.getActivity(MainActivity.this, (int)(Math.random()*100), i, 0);          Notification notif = new Notification.Builder(this)             .setContentTitle("MyPower Reminder")              .setContentText(contentTxt)             .setSmallIcon(R.drawable.ic_launcher)             .setContentIntent(pi)             .setSound(notifSound)              .addAction(0, "View Full Reminder", pi)             .build();          NotificationManager notifMgr = (NotificationManager)getSystemService(NOTIFICATION_SERVICE);         notifMgr.notify(0, notif);          notifCount++;         if(notifCount == contentTxtLength){             notifCount = 0;         }     }     //destroy local notif     public void cancelNotification(int notificationId){          if (Context.NOTIFICATION_SERVICE!=null) {             String ns = Context.NOTIFICATION_SERVICE;             NotificationManager nMgr = (NotificationManager) getApplicationContext().getSystemService(ns);             nMgr.cancel(notificationId);         }     }      public void billCompute(){          TodoItemDatabase td = new TodoItemDatabase(ctx);         Cursor cur = td.getActiveDevice();          if(timerFirstRun == 0){             timerFirstRun++;             Log.d("batelec", "timer = 0");         }         else{             try{                 if(cur != null){                     Toast.makeText(ctx, "1 hour elapsed", Toast.LENGTH_LONG).show();                      cur.moveToFirst();                     for(int x = 1; x &lt;= cur.getCount(); x++){                         id = cur.getInt(cur.getColumnIndex("_id"));                         name = cur.getString(cur.getColumnIndex("deviceName"));                         watt = cur.getInt(cur.getColumnIndex("deviceWattage"));                         stat = cur.getInt(cur.getColumnIndex("deviceStatus"));                          totalWatt = totalWatt + watt;                         Log.d("batelec", "id: " + id + " name: " + name + " watt: " + watt + " status: " + stat);                         cur.moveToNext();                     }                     //totalWatt = 125;                     Log.d("batelec", "total watt: "+totalWatt);                      wattHourPerDay = totalWatt;//all active device wattage                      Log.d("batelec", "wattPerHour: "+wattHourPerDay+" (totalWatt)");                      kiloWattPerDay = wattHourPerDay / 1000;//all device watts divided by 1000 watts = 1 kW                     Log.d("batelec", "kilowatt per day: "+kiloWattPerDay+" (wattPerHour / 1000)");                      kiloWattPerMonth = (wattHourPerDay * 30) / 1000;//watts per month                     Log.d("batelec", "kiloWatt per month: "+kiloWattPerMonth+" ((wattPerHour * 30) / 1000)");                      billPerMonth = kiloWattPerMonth * costPerMonth;//estimated bill per month                     Log.d("batelec", "bill per month: "+billPerMonth+" (kiloWattPerMonth * costPerMonth)");                       //Double res;                     DecimalFormat df = new DecimalFormat("#.##");                     res = Double.valueOf(df.format(billPerMonth));                      Log.d("batelec", "new bill: "+res);                     //ListViewForm.lblBillVal.setText(String.valueOf(res));                      Message msg = notifLauncher.obtainMessage();                     Bundle bundle = new Bundle();                     Log.d("Batelec", "res val: "+String.valueOf(res));                     bundle.putString("myKey", String.valueOf(res));                     msg.setData(bundle);                     notifLauncher.sendMessage(msg);                 }             }catch(Exception e){                     Log.d("batelec", "MainErr: "+e);                 }         }      } } </code></pre>  <p>hey guys this is my log</p>  <pre><code>09-27 19:34:23.406: E/AndroidRuntime(1521): FATAL EXCEPTION: main 09-27 19:34:23.406: E/AndroidRuntime(1521): Process: com.example.mypower_build101, PID: 1521 09-27 19:34:23.406: E/AndroidRuntime(1521): java.lang.NullPointerException 09-27 19:34:23.406: E/AndroidRuntime(1521):     at com.example.mypower_build101.MainActivity$7.handleMessage(MainActivity.java:282) 09-27 19:34:23.406: E/AndroidRuntime(1521):     at android.os.Handler.dispatchMessage(Handler.java:102) 09-27 19:34:23.406: E/AndroidRuntime(1521):     at android.os.Looper.loop(Looper.java:136) 09-27 19:34:23.406: E/AndroidRuntime(1521):     at android.app.ActivityThread.main(ActivityThread.java:5017) 09-27 19:34:23.406: E/AndroidRuntime(1521):     at java.lang.reflect.Method.invokeNative(Native Method) 09-27 19:34:23.406: E/AndroidRuntime(1521):     at java.lang.reflect.Method.invoke(Method.java:515) 09-27 19:34:23.406: E/AndroidRuntime(1521):     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:779) 09-27 19:34:23.406: E/AndroidRuntime(1521):     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:595) 09-27 19:34:23.406: E/AndroidRuntime(1521):     at dalvik.system.NativeStart.main(Native Method) 09-27 19:35:45.076: I/Process(1521): Sending signal. PID: 1521 SIG: 9 </code></pre>  <p>the line indicated in the log is this: ListViewForm.lblBillVal.setText()</p>