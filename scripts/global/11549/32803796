<p>I have wrote several list implementations, and all of them implement a MyList interface, and can be used accordingly.</p>  <p>I have tested them separately and they all worked fine. But when I used a client program which uses the list something strange happened:</p>  <pre><code>public static &lt;T&gt; void main(String[] args) throws IndexOutOfBoundsException, Exception {       DynamicList&lt;String&gt; dynamicList = new DynamicList&lt;&gt;();      DoubleLinkedList&lt;String&gt; doubleLinkedList = new DoubleLinkedList&lt;&gt;();       dynamicList.add(0, "hi");      dynamicList.add(1, "my");      dynamicList.add(2, "name");      dynamicList.add(1, "baby");       ClientList&lt;T&gt; clientList = new ClientList&lt;&gt;();      clientList.swap(dynamicList, 1, 2);      System.out.println(dynamicList); </code></pre>  <p>Up to here it worked fine, but when I added two lines:</p>  <pre><code>    clientList.copy(dynamicList,doubleLinkedList);     System.out.println(doubleLinkedList); </code></pre>  <p>It reported null pointer exception, however, if I commented out </p>  <pre><code>System.out.println(dynamicList); </code></pre>  <p>The println of doubleLinkedList would work now.</p>  <p>My swap and copy methods are as follows:</p>  <pre><code>public void swap(MyList&lt;String&gt; aList, int pos1, int pos2) throws IndexOutOfBoundsException, Exception {     String s1 = aList.get(pos1);     String s2 = aList.get(pos2);      aList.add(pos1, s2);     aList.add(pos2+1, s1);     aList.remove(pos1 + 1);     aList.remove(pos2 + 1);  }  public void copy(MyList&lt;String&gt; listFrom, MyList&lt;String&gt; listTo) throws IndexOutOfBoundsException, Exception {     // two ways, one way is to implement iterator in the list class,or loop     // through the list      for (int i = 0; i &lt; listFrom.size(); i++) {         listTo.add(i, listFrom.get(i));     } } </code></pre>  <p>It reports that the get(i) method throws the null pointer exception, the dynamicList and doubleLinkedList have the same get() method:</p>  <pre><code>@Override public T get(int index) {     return getNode(index).getElem(); }  private Node&lt;T&gt; getNode(int index) throws IndexOutOfBoundsException {     if (index &lt; 0 || index &gt;= numElems) {         throw new IndexOutOfBoundsException("Out of Bounds!");     }      Node&lt;T&gt; curr = head;     for (int i = 0; i &lt; index; i++) {         curr = curr.getNext();     }      return curr; } </code></pre>