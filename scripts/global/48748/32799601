<p>I'm having a hard time implementing a checkout process where once at the cart, user can checkout and have order shipped. Maybe I need an order model and transaction controller? </p>  <p>I'm just not sure how to set those up. Currently the cart works and can be cleared as well as have items be added, its just I'm not sure how to implement a checkout and order system.</p>  <p>Idea is: User at cart clicks the checkout button, then is taken to checkout where he/she can input payment information, then taken back to products page. Issue is I'm not sure again how to connect the cart to the checkout and payment process into one simple easy system. </p>  <p>Any help would be appreciated, I'm still very new at this. Thank you.</p>  <pre><code>class CartController &lt; ApplicationController     before_action :authenticate_user!, except: [:index]      def add         id = params[:id]             if session[:cart] then                cart = session[:cart]             else                 session[:cart] = {}                 cart = session[:cart]             end             if cart[id] then                cart[id] = cart[id] + 1             else                cart[id] = 1             end                 redirect_to :action =&gt; :index                 flash[:notice] = 'added to cart'       end       def clearCart           session[:cart] = nil         redirect_to :action =&gt; :index         flash[:notice] = 'cart cleared'      end       def index         if session[:cart] then             @cart = session[:cart]         else             @cart = {}         end     end      end </code></pre>  <hr>  <pre><code>class ProductsController &lt; ApplicationController   before_action :set_product, only: [:show, :edit, :update, :destroy]    def index     @products = Product.all   end    def show   end    def new     @product = Product.new   end    def edit   end    def create     @product = Product.new(product_params)      respond_to do |format|       if @product.save         format.html { redirect_to @product, notice: 'Product was successfully created.' }         format.json { render :show, status: :created, location: @product }       else         format.html { render :new }         format.json { render json: @product.errors, status: :unprocessable_entity }       end     end   end    def update     respond_to do |format|       if @product.update(product_params)         format.html { redirect_to @product, notice: 'Product was successfully updated.' }         format.json { render :show, status: :ok, location: @product }       else         format.html { render :edit }         format.json { render json: @product.errors, status: :unprocessable_entity }       end     end   end    def destroy     @product.destroy     respond_to do |format|       format.html { redirect_to products_url, notice: 'Product was successfully destroyed.' }       format.json { head :no_content }     end   end     private     def set_product       @product = Product.find(params[:id])     end      def product_params       params.require(:product).permit(:title, :description, :price, :category, :subcategory)     end  end </code></pre>  <hr>  <pre><code>class Product &lt; ActiveRecord::Base end </code></pre>  <hr>  <pre><code>class User &lt; ActiveRecord::Base   # Include default devise modules. Others available are:   # :confirmable, :lockable, :timeoutable and :omniauthable   devise :database_authenticatable, :registerable,          :recoverable, :rememberable, :trackable, :validatable end </code></pre>  <hr>  <p>views/cart/index.html.erb</p>  <pre><code>&lt;h1&gt;Your Cart&lt;/h1&gt;   &lt;% if @cart.empty? %&gt;  &lt;p&gt; Your cart is currently empty&lt;/p&gt;  &lt;% else %&gt;  &lt;%= link_to 'Empty your Cart', cart_clear_path %&gt; &lt;br&gt;&lt;br&gt; &lt;% end %&gt;  &lt;% total = 0 %&gt;  &lt;ul&gt; &lt;% @cart.each do | id, quantity |  %&gt;       &lt;% product = Product.find_by_id(id) %&gt;      &lt;li&gt;         &lt;%= link_to product.title, product %&gt;         &lt;p&gt;&lt;%= product.description %&gt;&lt;/p&gt;         &lt;p&gt;&lt;%= number_to_currency product.price %&gt;&lt;/p&gt;         &lt;p&gt;Quantity: &lt;%= quantity  %&gt;&lt;/p&gt;     &lt;/li&gt;      &lt;% total += quantity * product.price %&gt;  &lt;% end %&gt;      &lt;p&gt;&lt;b&gt;&lt;%= number_to_currency total, :unit =&gt; '$' %&gt; &lt;/b&gt;&lt;/p&gt;      &lt;/ul&gt; </code></pre>  <hr>  <hr>  <p><strong>What I've tried below</strong></p>  <p>order.rb</p>  <pre><code>class Order &lt; ActiveRecord::Base     belongs_to :cart end </code></pre>  <p>cart.rb</p>  <pre><code>class Cart &lt; ActiveRecord::Base     has_many :line_items     has_one :order end </code></pre>  <p>Orders_Controller.rb</p>  <pre><code>class OrdersController &lt; ApplicationController   before_action :set_order, only: [:show, :edit, :update, :destroy]    # GET /orders   # GET /orders.json   def index     @orders = Order.all   end    # GET /orders/1   # GET /orders/1.json   def show   end    # GET /orders/new   def new     @order = Order.new   end    # GET /orders/1/edit   def edit   end    # POST /orders   # POST /orders.json   def create     @order = Order.new(order_params)      respond_to do |format|       if @order.save         format.html { redirect_to @order, notice: 'Order was successfully created.' }         format.json { render :show, status: :created, location: @order }       else         format.html { render :new }         format.json { render json: @order.errors, status: :unprocessable_entity }       end     end   end    # PATCH/PUT /orders/1   # PATCH/PUT /orders/1.json   def update     respond_to do |format|       if @order.update(order_params)         format.html { redirect_to @order, notice: 'Order was successfully updated.' }         format.json { render :show, status: :ok, location: @order }       else         format.html { render :edit }         format.json { render json: @order.errors, status: :unprocessable_entity }       end     end   end    # DELETE /orders/1   # DELETE /orders/1.json   def destroy     @order.destroy     respond_to do |format|       format.html { redirect_to orders_url, notice: 'Order was successfully destroyed.' }       format.json { head :no_content }     end   end    private     # Use callbacks to share common setup or constraints between actions.     def set_order       @order = Order.find(params[:id])     end      # Never trust parameters from the scary internet, only allow the white list through.     def order_params       params.require(:order).permit(:new, :cart_id, :ip_address, :first_name, :last_name, :user_id)     end end </code></pre>  <p>added Checkout to views/cart/index.html.erb</p>  <pre><code>&lt;%= link_to "Checkout", new_order_path, class: "btn btn-primary" %&gt; </code></pre>  <p>What do I do after this? </p>