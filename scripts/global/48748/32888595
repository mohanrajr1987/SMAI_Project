<p><strong>Workaround</strong></p>  <p>In worker.rb:</p>  <pre><code>   before_save: set_defaults        private     def set_defaults       if self.encrypted_password.blank?         self.encrypted_password = Worker.new.send(:password_digest, password)       end       self.has_accepted_terms = false if has_accepted_terms.nil?       self.live = false if live.nil?       self.email.downcase!       self.first_name ||= ""       self.last_name ||= ""       self.phone_number ||= ""       self.last_location_search ||= ""     end </code></pre>  <p><strong>Update</strong></p>  <p>Finally found a way to get a password_digest out of it...</p>  <p>Does this give any clues as to what's going on?</p>  <pre><code>2.0.0-p481 :016 &gt; Worker.new(password: 'password').encrypted_password  =&gt; ""  # fail 2.0.0-p481 :017 &gt; Worker.new.send(:password_digest, "1234")  =&gt; "$2a$10$mrHUtlUKwKfwIjSJdRjY/.GbLhXKIKOAN9/WVmg3xCXHOJoGJrPMW"  </code></pre>  <p><strong>Original</strong></p>  <p>When I create a Worker (like a User), the password is not being saved</p>  <pre><code>&gt; Worker.create(email: "test@gmail32.com", password: "1234", password_confirmation: "1234") =&gt; #&lt;Worker id: 41, email: "test@gmail32.com", encrypted_password: "", reset_password_token: nil, reset_password_sent_at: nil, remember_created_at: nil, sign_in_count: 0, current_sign_in_at: nil, last_sign_in_at: nil, current_sign_in_ip: nil, last_sign_in_ip: nil, created_at: "2015-10-01 13:11:27", updated_at: "2015-10-01 13:11:27&gt;  </code></pre>  <p>This happens any way I try to create a worker. What can cause this? Apparently it can happen if you override a devise method - is that what is happening here?</p>  <p>This is the model, but I can comment out all of it (except the 'Devise' section) and it still doesn't save the password:</p>  <pre><code>require 'resque-scheduler'  class Worker &lt; ActiveRecord::Base   # Include default devise modules. Others available are:   # :confirmable, :lockable, :timeoutable and :omniauthable   devise :custom_authenticatable, :database_authenticatable, :registerable,          :recoverable, :rememberable, :trackable, :validatable    before_save :set_defaults    def Worker.find_by_credentials(email, password)     worker = Worker.find_by_email(email.downcase)      return worker if worker &amp;&amp; worker.authenticate(password)      # worker.errors.add :user_authentication, 'invalid credentials'     nil   end    def authenticate(password)     live &amp;&amp; valid_password?(password)   end     def valid_for_custom_authentication?(password)     live   end    private      def set_defaults       self.has_accepted_terms = false if has_accepted_terms.nil?       self.live = false if live.nil?       self.email.downcase!     end  end </code></pre>