<p>Using RSPEC and DEVISE, I'm able to sign in a <code>user</code> to run my tests. However, I've recently come across a problem with my method because using <code>before :each</code> is causing multiple users to be created, which causes my tests to break.</p>  <p>Should I change my method of testing? Or change my method of signing in a user?</p>  <p><strong>campaign_controller_spec.rb</strong></p>  <pre><code>before :each do   @user = FactoryGirl.create(:user)   sign_in :user, @user   @business = FactoryGirl.create(:business, user: @user) end  describe "GET #index" do   before :each do     FactoryGirl.create(:active_campaign, business: @business)     FactoryGirl.create(:inactive_campaign, business: @business)   end    it "no status or type filter" do     get :index                                   #  &lt;- LINE 22 OF ERROR     expect(assigns(:campaigns).size).to eq 2   end    it 'status filter' do     get :index, status: 'active'     expect(assigns(:campaigns).size).to eq 1   end end </code></pre>  <p><strong>campaigns_controller.rb</strong></p>  <pre><code>def index   # Get current user's campaigns   @campaigns = current_user.business.campaigns    # Filter by status (constraints are in routes)   @campaigns = @campaigns.send(params[:status]) unless params[:status] == 'all'   #  &lt;- LINE 7 OF ERROR end </code></pre>  <p>The problem is that all of the campaigns belong to the <code>business</code> with belong to USER-1 in the spec, but in the controller, the campaigns belong to another user (because several are being created) which doesn't have any campaigns associated.</p>  <p>The exact error is:</p>  <pre><code>  1) CampaignsController [Signed in] GET #index no status or type filter      Failure/Error: get :index      TypeError:        nil is not a symbol nor a string      # ./app/controllers/campaigns_controller.rb:7:in `index'      # ./spec/controllers/campaigns_controller_spec.rb:22:in `block (4 levels) in &lt;top (required)&gt;' </code></pre>  <p><em>Small Update</em></p>  <p>I DO have the <code>Database Cleaner</code> gem installed, which should clear the DB between tests. Here is the config (just in case it is incorrect):</p>  <pre><code>#DatabaseCleaner config.before(:suite) do   DatabaseCleaner.strategy = :transaction   DatabaseCleaner.clean_with(:truncation) end  config.before(:each) do   DatabaseCleaner.start end  config.after(:each) do   DatabaseCleaner.clean end </code></pre>