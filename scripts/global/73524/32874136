<p>I have a main activity which has 2 fragments. The main activity has a <code>SearchView</code> in the action bar. Both the fragments have a list of large number of strings, <code>List&lt;String&gt;</code>. </p>  <p>The flow is: </p>  <blockquote>   <p>User enters Fragment I --> Selects a string (lets say <em>Selection1</em>) --> Based on <em>Selection1</em> a list of strings is populated in the second fragment --> Here the user selects a second String ---> Processing based on these two strings.</p> </blockquote>  <p>Now since both the fragments contain a large number of strings, the user enters a query in the <code>SearchView</code>, which filters the list and reduces it to a smaller list displayed in the <code>SearchableActivity</code>.</p>  <p>Now the problem is how does the <code>SearchableActivity</code> get access to these two <code>List&lt;String&gt;</code> to filter them based on the query and display a reduced list to the user. </p>  <p>Currently what I have done is overridden <code>onSearchRequested</code> and pass the data as</p>  <pre><code>    @Override     public boolean onSearchRequested()     {         Bundle appData = new Bundle();         appData.putString(FRAGMENT_ID, "Fragment_A");         appData.putStringArrayList(SEARCH_LIST, searchList);         startSearch(null, false, appData, false);         return true;     } </code></pre>  <p>Is there a better way or standard way by which this problem can be handled i.e. an implementation that allows data to be based from my <code>MainActivity</code> to <code>SearchableActivity</code>?</p>  <p>Edit: Adding code. Showing how data is set in the <code>Fragment</code>. <code>onDataReceived</code> is called from the <code>HttpManager</code> which receives the data.</p>  <pre><code>@Override public void onDataReceived(String type,final Object object) {     switch(type)     {         case PopItConstants.UPDATE_LIST:             getActivity().runOnUiThread(new Runnable() {                 @Override                 public void run()                 {                     updateCinemaList((List&lt;String&gt;) object);                 }             });             break;     } }  public void updateDataList(List&lt;String&gt; data) {     this.dataList = data;     spinner.setVisibility(View.GONE);     mAdapter.updateList(dataList); } </code></pre>