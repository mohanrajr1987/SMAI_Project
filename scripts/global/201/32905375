<p>if i am correct HATEOAS ist an architectural pattern and don't describe HOW a client should discover relations. HATEOAS just describe THAT a server should send a discoverable API to the client.</p>  <p>When adopting HATEOAS the api author can define HOW the client has to discover the relations.</p>  <p>For example without a standard like hydra / hal / jsonapi it's not clear if a json use "link", "_link", "links", "relations" fields in the json document to represent a relation.</p>  <p>From my point of view, this would allow me, as an api author to define something like this (valid HATEOAS):</p>  <p>The symbol "🔗" represents an array of hypermedia controls</p>  <p>Hypermedia controls are represented by a string.</p>  <p>The string can start with the reserved symbols "✔", "↯" and "±".</p>  <p>If the hypermedia string starts with "✔", the client is allowed to do a safe GET request to the URL. the URL follows the "✔" symbol and is rot13 decoded.</p>  <pre><code>{     …     "🔗": [        “✔uggc://.../traerf/snagnfl”     ] } </code></pre>  <p>From my point of view, this should be valid HATEOAS, or did i miss something?</p>  <p>Of course defining an own standard ontop of HATEOAS doesn't make sense.</p>