<p>I am working on a REST API in PHP (Codeigniter) and trying to implement oauth 2-legged authentication for the API access. The API is to be accessed using a pair of credentials that a developer will use in the coding when integrating our API with a website or mobile app (,so there is no end user authorizing the website or mobile app).</p>  <p>The oauth 2-legged authentication doesn't seem to fit our purpose,actually I am a bit confused. What I have implemented so far seems to be Oauth 0-legged (if you can call it that). I am just oauth signing (HMAC_SHA1) the request using consumer secret and an empty access token. But as per some answers that I read elsewhere,signing the request and verifying the signature is all that needs to be done for a oauth 2-leg implementation ( see <a href="https://www.quora.com/What-are-the-specific-differences-between-a-two-legged-and-three-legged-OAuth-provider-implementation" rel="nofollow">https://www.quora.com/What-are-the-specific-differences-between-a-two-legged-and-three-legged-OAuth-provider-implementation</a> )</p>  <p>Here is a client side of the implementation in PHP that I have at the moment;</p>  <pre><code>    &lt;?php // Just a demo for the client side implementation of oauth signed requests.  require_once ("oauth/oauth.php"); // Google oauth library   function send_request($method = '', $api_endpoint = '',$request_params = array()){     $consumer = new OAuthConsumer(CONSUMER_KEY, CONSUMER_SECRET);     $sig_method = new OAuthSignatureMethod_HMAC_SHA1;      //use oauth lib to sign request     $req = OAuthRequest::from_consumer_and_token($consumer, null, $method, $api_endpoint, $request_params);     $sig_method = new OAuthSignatureMethod_HMAC_SHA1();     $req-&gt;sign_request($sig_method, $consumer, null);//note: double entry of token      if($method == 'GET'){         echo "&lt;br /&gt;".$req-&gt;to_url();         $ch = curl_init($req-&gt;to_url());         curl_setopt($ch,CURLOPT_RETURNTRANSFER,1);          $result = curl_exec($ch);         $curl_info = curl_getinfo($ch);         //print_r($curl_info);         $error = curl_error($ch);         //print_r($error);         curl_close($ch);          return $result;      }elseif($method == 'POST'){          $ch = curl_init();          curl_setopt($ch,CURLOPT_URL,$api_endpoint);                            curl_setopt($ch, CURLOPT_POST, true);         curl_setopt($ch,CURLOPT_RETURNTRANSFER,1);                 curl_setopt($ch, CURLOPT_HEADER,'Content-Type: application/x-www-form-urlencoded');         //echo "&lt;br /&gt;".$req-&gt;to_url();         //echo "&lt;br /&gt;Post data: ".$req-&gt;to_postdata();         //curl_setopt($ch, CURLOPT_POSTFIELDS, $req-&gt;to_postdata());         curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($request_params));          $result = curl_exec($ch);         $curl_info = curl_getinfo($ch);                 print_r($curl_info);         $error = curl_error($ch);         //print_r($error);         curl_close($ch);                      return $result;     } }  // API consumer key and secret define('CONSUMER_KEY', 'd4hkilp1z0pqj7158y0j'); define('CONSUMER_SECRET', 'rqhzan3mdx7wov3gvh4u');  // Authorize  // Get products from odw api $api_endpoint = 'http://testgapi.local/api/product/search'; // search/format/json , search/format/xml $request_params = array(); $request_params['category_type'] = 'Tour'; $request_params['location'] = 'Las Vegas'; $request_params['start_date'] = '09/22/2015'; $request_params['end_date'] = '12/31/2015';  $result = send_request('GET', $api_endpoint, $request_params); // Call REST service with GET method //$result = send_request('POST', $api_endpoint, $request_params);  print_r($result); //echo $result; ?&gt; </code></pre>  <p>Server side validation of the request (in Codeigniter).. controllers/api/Product.php;</p>  <pre><code>&lt;?php defined('BASEPATH') or exit('No direct script access allowed');  require APPPATH . '/libraries/REST_Controller.php';  class Product extends REST_Controller {      var $valid_request;      function __construct()     {         // Construct the parent class         parent::__construct();          $this-&gt;load-&gt;library('Oauth_server');     }      public function search_get()     {         $this-&gt;valid_request = $this-&gt;oauth_server-&gt;validate_request();          if (!$this-&gt;valid_request)         {             $response = array(                 'status' =&gt; "Failed",                 'error_message' =&gt; "Access Denied.",                 );             return $this-&gt;response($response, 201); // NO_CONTENT (204) being the HTTP response code         } else         {             // Do something         }     } } // End of class ?&gt; </code></pre>  <p>libraries/Oauth_server.php;</p>  <pre><code>&lt;?php require_once (APPPATH . "libraries/oauth/oauth.php"); // Google oauth library  class Oauth_server {      var $CI;     function __construct(){         // Nothing to do yet.         $this-&gt;CI = &amp;get_instance();     }      function validate_request(){         //echo "&lt;br /&gt;".         $consumer_key = !empty($_REQUEST['oauth_consumer_key'])? $_REQUEST['oauth_consumer_key'] : "";          // Use the oauth_consumer_key in the client request to find the secret in our system.          $secret = $this-&gt;get_consumer_secret($consumer_key);          $consumer = new OAuthConsumer($consumer_key, $secret);         $sig_method = new OAuthSignatureMethod_HMAC_SHA1;          //echo "&lt;br /&gt;Method: ".         $method = $_SERVER['REQUEST_METHOD'];         //echo "&lt;br /&gt;URI: ".         $uri = 'http://'.$_SERVER['SERVER_NAME'].$_SERVER['REQUEST_URI'];         $sig = $_REQUEST['oauth_signature'];             $req = new OAuthRequest($method, $uri);          //token is null because we're doing 2-leg         return $sig_method-&gt;check_signature( $req, $consumer, null, $sig );     }      function get_consumer_secret($consumer_key){         // Fetch the associated consumer secret from the db using the consumer key.         $query = $this-&gt;CI-&gt;db-&gt;query("SELECT consumer_secret FROM gapi_users WHERE consumer_key = ?", array($consumer_key));         $result = $query-&gt;row_array();          if(!empty($result)){             return $result['consumer_secret'];         }         else{             return false;         }     }     } ?&gt; </code></pre>  <p>We could also force to have the request be done over https for added security I guess. </p>  <p>Assuming I am to stick with oauth, I would like to know, if my current implementation is 2-legged at all?. If it is not, would 2-legged certainly be a more secure way for my scenario ?. </p>  <p>Would really appreciate any help.</p>