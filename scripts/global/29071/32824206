<p>So I got two mongoose-models:</p>  <pre><code>var mongoose = require('mongoose'); var Schema    = mongoose.Schema; var eventSchema = new mongoose.Schema({    name: String,   date: String,   dogs: [{ type: Schema.Types.ObjectId, ref: 'Dog' }]  }); module.exports = mongoose.model('Event', eventSchema); </code></pre>  <p>and</p>  <pre><code>var mongoose = require('mongoose'); var Schema    = mongoose.Schema; var dogSchema = new mongoose.Schema({    name: String,   age: String,   gender: String,  }); module.exports = mongoose.model('Dog', dogSchema); </code></pre>  <p><code>Event</code> contains an array of <code>dogs</code> and im trying to figure out how to add/delete dogs to this array.</p>  <p>On the client I got this method:</p>  <pre><code>  $.ajax({      url: "http://localhost:3000/api/events/",      dataType: 'json',      type: 'POST', // Not sure if I should Post or Put...      data: {event_Id : this.props.choosenEvent._id, //Here I got the Id of the Event that i want to update by             dog_Id : this.props.events[dog]._id }, //adding this dog, which Id is here      success: function(data) {       }.bind(this),    });  }, </code></pre>  <p>On the server, NodeJs, I got my routes to the API. To me, it makes sense to use an PUT-method and start by getting the right Event with the event_Id passed as a param. Something like:</p>  <pre><code>router.route('/events/:event_id')     .put(function(req, res) {           Event         .findById({ _id: req.param.event_id })         .populate('dogs')          }); </code></pre>  <p>But Im stuck at this point. Any help appreciated. Thanks!</p>  <p>Update!</p>  <p>Thank you! Your code helped a lot, you used lodash .remove to delete a dog from the array, is there a similar way to add an item with lodash?</p>  <p>I gave the add method a go like this:</p>  <pre><code>router.route('/events')          .post(function(req, res) {           // Your data is inside req.body            Event               .findById({ _id: req.body.event_Id })               // execute the query               .exec(function(err, eventData) {                   // Do some error handing                   // Your dogs are inside eventData.dogs                   eventData.dogs.push(req.body.dog_Id);                   console.log(eventData)                  });                   // Update your eventDate here                   Event.update({_id: req.body.event_id}, eventData)                       .exec(function(err, update) {                           // Do some error handing                           // And send your response                       });               }); </code></pre>  <p>When I hit the <code>console.log(eventData)</code> I can see that <code>dog_id</code> gets added to the array as it should. However it does not get saved to the db and the error says that <code>eventData</code> is not defined in <code>Event.Update</code>. I suspect this is a Js-scope-issue.</p>  <p>Onte thing that boggles me is this:</p>  <p>Obviously I would like to be able to add and remove dogs from the array and the route is this: <code>router.route('/events')</code> .</p>  <p>But if both the add-method and the remove-method is on the same route, how can the code know which one I am going for?</p>