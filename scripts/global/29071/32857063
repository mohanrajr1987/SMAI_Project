<p>I have 3 arrays of <code>ObjectIds</code> I want to concatenate into a single array, and then sort by creation date. <a href="http://docs.mongodb.org/manual/reference/operator/aggregation/setUnion/" rel="nofollow">$setUnion</a> does precisely what I want, but I'd like to try without using it. </p>  <p>Schema of object I want to sort:</p>  <pre><code>var chirpSchema = new mongoose.Schema({     interactions: {        _liked      : ["55035390d3e910505be02ce2"] // [{ type: $oid, ref: "interaction" }]     , _shared     : ["507f191e810c19729de860ea", "507f191e810c19729de860ea"] //  [{ type: $oid, ref: "interaction" }]     , _viewed     : ["507f1f77bcf86cd799439011"] //  [{ type: $oid, ref: "interaction" }]   } }); </code></pre>  <p><strong>Desired result</strong>: Concatenate _liked, _shared, and _viewed into a single array, and then sort them by creation date using <code>aggregate</code> pipeline. See below</p>  <pre><code>["507f1f77bcf86cd799439011", "507f191e810c19729de860ea", "507f191e810c19729de860ea", "55035390d3e910505be02ce2"] </code></pre>  <p>I know I'm suppose to use <code>$push</code>, <code>$each</code>, <code>$group</code>, and <code>$unwind</code> in some combination or other, but I'm having trouble piecing together the documenation to make this happen.</p>  <p><strong>Update:</strong> Query</p>  <pre><code>model_user.aggregate([       { $match    : { '_id' : { $in : following } } }     , { $project  : { 'interactions' : 1 } }     , { $project  : {           "combined": { $setUnion : [              "$interactions._liked"           , "$interactions._shared"           , "$interactions._viewed"         ]}       }} ]) .exec(function (err, data) {   if (err) return next(err);   next(data); // Combined is returning null }) </code></pre>