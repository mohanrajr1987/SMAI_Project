<p><strong>EDIT:</strong> This is my Schema:</p>  <pre><code>{     "_id": "salfjasdlkfjaslkdfj",     "data": [         {             "title": "data1",             "_id": "xxx",             //more fields         },         {             "title": "data2",             "_id": "yyy",             //more fields         },         {             "title": "data3",             "_id": "zzz",             //more fields         }     ],     //more fields } </code></pre>  <p>and my query in mongoose looks like this:</p>  <pre><code>mySchema.findOne(     id,     {"data": {$elemMatch: {"_id": {$in: ["xxxxx", "yyyyy"]}}}},     {},     function(err, data){         if(err){             console.log(err);             res.send(err);             return;         }         res.json(data);     } ); </code></pre>  <p>I want to project 2 or more elements from the "data" array. However, with this code, the result always contains only one element from "data" even if the array after "$in" has 2 or more elements.</p>  <p>This works perfectly fine without the "$in" (that is, for projecting only one element from the "data" array).</p>  <p>according to <a href="https://jira.mongodb.org/browse/SERVER-3544" rel="nofollow">https://jira.mongodb.org/browse/SERVER-3544</a>, $elemMatch and $in should work with each other.</p>  <ul> <li>Is there something wrong with my code?</li> <li>If $elemMatch and $in STILL don't work with each other, is there another way to project this?</li> </ul>  <p><strong>EDIT:</strong>  The expected output is this:</p>  <pre><code>{     "_id": "salfjasdlkfjaslkdfj",     "data": [         {             "title": "data1",             "_id": "xxx",             //more fields         },         {             "title": "data2",             "_id": "yyy",             //more fields         },     ] } </code></pre>  <p>I just tried this query but it gives me an empty array! "[ ]". I think I'm messing up the syntax somewhere, or something. I'm not sure.  </p>  <pre><code>mySchema.aggregate(     [             {$match: {"_id": id}},             {$unwind: "$data"},             {$match: {"data._id": {$in: ["xxx", "yyy"]}}},             {$project: {"data":1}}     ],     function(err, data){         if(err){             console.log(err);             res.send(err);             return;         }         res.json(data);     } ); </code></pre>