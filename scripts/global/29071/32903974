<p>Wanting to test a mongoDB server up/down procedure connected to Node/Mongoose, we found out that Mongoose can sometimes open hundreds of TCP sockets (which is not necessary and potentially blocking for the user who is limited to a certain amount of sockets). This occurs in the following case and environment :</p>  <p>Node supervised with PM2 and MongoDB surevised with daemontools</p>  <p>At normal and clean startup :</p>  <pre><code>$ netstat -alpet | grep mongo tcp 0 0 *:27017  *:* LISTEN  mongo  65910844 22930/mongod tcp 0 0 localhost.localdomain:27017 localhost.localdomain:54595 ESTABLISHED mongo 6591110422930/mongod </code></pre>  <p>The last "ESTABLISHED" line repeated 5 times since the option (poolSize: 5) is specified in Mongoose ("mongo" is the user running mongod under daemontools)</p>  <p>When we have the Node procedure :</p>  <p><div class="snippet" data-lang="js" data-hide="false"> <div class="snippet-code"> <pre class="snippet-code-html lang-html prettyprint-override"><code>mongoose.connection.on('disconnected', function () {     var options = {server: { auto_reconnect:true, poolSize: 5 ,socketOptions: { connectTimeoutMS: 5000 } } } console.log('Mongoose default connection disconnected ' + mongoose.connection.readyState);   mongoose.connect( dbURI, options ); });</code></pre> </div> </div> </p>  <p>and we bring down the MongoDB by daemontools (mongodbdaemon is a simple $mongod command) :</p>  <pre><code>svc -d /service/mongodbdaemon </code></pre>  <p>there is of course no mongod running in the system (tested by the netstat command ) and the web server pages called which are using mongoose announce what is normal :</p>  <pre><code>{"name":"MongoError","message":"topology was destroyed"} </code></pre>  <p>The problem occurrs at this stage. Since the time we bring down MongoDB, Mongoose <strong>accumulates</strong> all the connect() calls in the 'disconnected' event handler. This means that the longer we wait before bringing up MongoDB, the more TCP connections will be opened.</p>  <p>So bringing up MongoDB by</p>  <pre><code>svc -u /service/mongodbdaemon </code></pre>  <p>gives the following :</p>  <pre><code>$ netstat -alpet | grep mongo | wc -l </code></pre>  <p><strong>850 'ESTABLISHED' TCP connections to mongod !</strong></p>  <p>If we bring down again mongod, the hundreds of connections remain in the TIME_WAIT state until Linux cleans the socket pool.</p>  <p><strong>Questions</strong></p>  <ol> <li><p>Can we check if a MongoDB instance is available before connecting to it ?</p></li> <li><p>Can we configure Mongoose not to accumulate reconnecting() tries every millisecond or so ?</p></li> <li><p>Is there a buffer for pending connection operations (as there is for mongoose.insert[...]) that we can access or clean manually ?</p></li> </ol>  <p>Problem reproductible on a CentOS 6.7 / mongoDB 3.0.6 / mongoose 4.1.8 / node 4.0.0</p>  <p><em>Edit :</em> From the official mongoose site where I posted this question after posting it here, I received an answer : "using auto_reconnect : true, on the initial connect() operation (which is set by default) there is no reason to reconnect() in a disconnect event callback".</p>  <p>This is true and it works jute fine, but the question is now why does this happen and how to avoid it (it is serious enough on the Linux system level to be an issue in mongoose). </p>  <p>Thanks !</p>