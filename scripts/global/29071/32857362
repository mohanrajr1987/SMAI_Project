<p>I am using the mean stack (mongo/mongoose, ember, angular, node). </p>  <p>The database includes 2 schemas </p>  <pre><code>var ChildSchema = new Schema({     childName: {         type: String,         required: true,         trim: true     } });   var ParentSchema = new Schema({     parentName: {         type: String,         required: true,         trim: true     },     child: {         type: Schema.ObjectId,         ref: 'Child'     } });  mongoose.model('Parent', ParentSchema); mongoose.model('Child', ChildSchema); </code></pre>  <p>There is an html <code>form</code> that allows the user to create a new <code>Parent</code>, the form has a select box that is populated with the children stored in the database and retrieved by <code>findChildren()</code> function.</p>  <p>The HTML is here:</p>  <pre><code>&lt;section data-ng-controller="ParentController" data-ng-init="findChildren()" &gt;     &lt;form name="parentForm" class="form-horizontal col-md-6" role="form" data-ng-submit="create(parentForm.$valid)" novalidate&gt;         &lt;div class="form-group" ng-class="{ 'has-error' : submitted &amp;&amp; parentForm.config.$invalid }"&gt;             &lt;label for="child" class="col-md-2 control-label"&gt;child&lt;/label&gt;             &lt;div class="col-md-9"&gt;                 &lt;select ng-model="parent.child" ng-options="child as child.childName for child in childs"&gt;&lt;/select&gt;             &lt;/div&gt;         &lt;/div&gt;          &lt;div class="form-group"&gt;             &lt;div class="col-md-offset-3 col-md-9"&gt;                 &lt;button mean-token="'create-submit'" type="submit" class="btn btn-info"&gt;Submit&lt;/button&gt;            &lt;/div&gt;          &lt;/div&gt;     &lt;/form&gt; &lt;/section&gt; </code></pre>  <p>The html <code>form</code> shows the children's names as selectable items in the list and when the user presses the submit button, the controller in the node application receives the correct parent object ID. here is the controller code</p>  <pre><code>create: function(req, res) {         var parent = new Parent(req.body);          parent.save(function(err) {             if (err) {                 return res.status(500).json({                     error: 'Cannot save the parent'                 });             }              res.json(parent);         });     } </code></pre>  <p>the issue is that I am not able to display the childName when trying to show the list of parents in a table. Here is the HTML. All of the parents other information is shown</p>  <pre><code>&lt;section data-ng-controller="DevicesController" data-ng-init="findParents()"&gt;     &lt;table border="1" class="mytable"&gt;         &lt;tr&gt;             &lt;td&gt;oject&lt;/td&gt;             &lt;td&gt;Parent Name&lt;/td&gt;             &lt;td&gt;Child&lt;/td&gt;         &lt;/tr&gt;          &lt;tr ng-repeat="parent in parents"&gt;             &lt;td&gt;{{parent}}&lt;/td&gt;             &lt;td&gt;{{parent.parentName}}&lt;/td&gt;             &lt;td&gt;{{parent.child.childName}}&lt;/td&gt;         &lt;/tr&gt;     &lt;/table&gt; &lt;/section&gt; </code></pre>  <p>The expectation is that the parent.child.childName will display the childName of the referenced object. it returns a null. if i display 'parent.child', it will display the objectID</p>  <p>For example: </p>  <blockquote>   <p>I have a child called <code>ChildA</code>. </p>      <p>When I view the html form to create a parent, i will enter ParentA for the name and select ChildA from the list. </p>      <p>When I press submit, the new Parent object will be created.</p>      <p>When i view the parent list, the table that is shown should show a row with <code>ParentA</code> and <code>ChildA</code>. </p>      <p>Right now it shows <code>ParentA</code> and a blank </p> </blockquote>