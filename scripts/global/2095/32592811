<p>Building a simple expression tree in F#: </p>  <pre><code>type Quote&lt;'T&gt; =      static member X(exp:Expression&lt;Func&lt;'T,'a&gt;&gt;) = exp  type T = { x:int }  [&lt;EntryPoint&gt;] let main argv =      for _ in [1..4] do         let sw = Stopwatch.StartNew()         [for i in [1..10000] -&gt; Quote.X(fun x -&gt; x.x = i)] |&gt; ignore         printfn "Elapsed: %A" sw.Elapsed     0 // return an integer exit code </code></pre>  <p>On both .NET and mono is about <strong>x35</strong> slower than this C#:</p>  <pre><code>class Program {     class T {public int x {get;set;}}      static void Main(string[] args)     {         for (var ii = 0; ii &lt; 4; ii++)         {             var sw = Stopwatch.StartNew();             Enumerable.Range(0,10000)                 .Select(i =&gt; (Expression&lt;Func&lt;T,bool&gt;&gt;)(t =&gt; t.x == i ))                 .ToList();             Console.WriteLine("Ellapsed: {0}", sw.Elapsed);         }     } } </code></pre>  <p>Anyone knows why that is and if there's something I could do to improve it? The solution is on github in case someone wants to try: <a href="https://github.com/et1975/ExpressionTrees" rel="nofollow">https://github.com/et1975/ExpressionTrees</a></p>