<p>I have got the following expression that works with mockup data - hereby not using Entity Framework:</p>  <pre><code> public static Expression&lt;Func&lt;Resource, bool&gt;&gt; FilterResourcesByUserCriteria(IEnumerable&lt;FilterValue&gt; filterValuesForUser)     {       Expression&lt;Func&lt;Resource, bool&gt;&gt; filter = (resource) =&gt;       // Get filter values for the current resource in the loop       resource.ResourceFilterValues       // Group filter values for user     .GroupBy(filterValue =&gt; filterValue.FilterValue.FilterGroup.Id)      // Each group must fulfill the following logic     .All(filterGroup =&gt;      // For each filter group, only select the user values from the same group     filterValuesForUser     .Where(filterValueForUser =&gt; filterValueForUser.FilterGroup.Id == filterGroup.Key)     .Select(filterValueForUser =&gt; filterValueForUser.FilterValue1)       // Each group must at least one value in the sublist of filter values of the current user     .Any(filterValueForUser =&gt; filterGroup       .Select(resourceFilterValue =&gt; resourceFilterValue.FilterValue.FilterValue1)       .Any(x =&gt; x == filterValueForUser))  ); </code></pre>  <p>}</p>  <p>However, I get this famous exception when I try to insert this expression in the where clause of my repository method (using Entity Framework):</p>  <pre><code>Unable to create a constant value of type. Only primitive types or enumeration types are supported in this context. </code></pre>  <p>I suspect this has something to do with a parameter called filterValuesForUser, which is a collection of a complex (i.e. custom) type. </p>  <p>Is this behavior even possible in Entity Framework where I do a subquery that is not directly related to Entity Framework? What I want to achieve here is to query on a subset of a custom list for each group in the query.</p>  <p>Any solutions for this or other workarounds? I'd like to minimize the amount of database calls, preferrably limit it to just one.</p>