<p>I've tried to solve the problem below for a coding challenge but could not finish it in 1 hour. I have an idea on how the algorithm works but I'm not quite sure how to best implement it. I have my code and problem below.</p>  <pre><code>The first 12 digits of pi are 314159265358.  We can make these digits into an expression evaluating to 27182 (first 5 digits of e) as follows:  3141 * 5 / 9 * 26 / 5 * 3 - 5 * 8 = 27182 or 3 + 1 - 415 * 92 + 65358 = 27182  Notice that the order of the input digits is not changed. Operators (+,-,/, or *) are simply inserted to create the expression.  Write a function to take a list of numbers and a target, and return all the ways that those numbers can be formed into expressions evaluating to the target  For example: f("314159265358", 27182) should print:  3 + 1 - 415 * 92 + 65358 = 27182 3 * 1 + 4 * 159 + 26535 + 8 = 27182 3 / 1 + 4 * 159 + 26535 + 8 = 27182 3 * 14 * 15 + 9 + 26535 + 8 = 27182 3141 * 5 / 9 * 26 / 5 * 3 - 5 * 8 = 27182 </code></pre>  <p>This problem is difficult since you can have any combination of numbers and you don't consider one number at a time. I wasn't sure how to do the combinations and recursion for that step. Notice that parentheses are not provided in the solution, however order of operations is preserved.</p>  <p>My goal is to start off with say</p>  <pre><code>{"3"} then {"31", "3+1", "3-1", "3*1" "3/1"} then {"314", "31+4", "3+1+4", "3-1-4", "31/4", "31*4", "31-4"} etc. </code></pre>  <p>then look at the every value in the list each time and see if it is target value. If it is, add that string to result list.</p>  <p>Here is my code</p>  <pre><code>public static List&lt;String&gt; combinations(String nums, int target)     {          List&lt;String&gt; tempResultList = new ArrayList&lt;String&gt;();         List&lt;String&gt; realResultList = new ArrayList&lt;String&gt;();         String originalNum = Character.toString(nums.charAt(0));           for (int i = 0; i &lt; nums.length(); i++)         {             if (i &gt; 0)             {                 originalNum += nums.charAt(i); //start off with a new number to decompose             }             tempResultList.add(originalNum);             char[] originalNumCharArray = originalNum.toCharArray();             for (int j = 0; j &lt; originalNumCharArray.length; j++)             {                 //go through every character to find the combinations?                 // maybe recursion here instead of iterative would be easier...             }             for (String s : tempResultList)             {                 //try to evaluate                 int temp = 0;                if (s.contains("*") || s.contains("/") || s.contains("+") || s.contains("-"))                {                   //evaluate expression                } else {                    //just a number                }                 if (temp == target)                 {                     realResultList.add(s);                 }              }          tempResultList.clear();         }         return realResultList;     } </code></pre>  <p><strong>Could someone help with this problem? Looking for an answer with coding in it, since I need help with the generation of possibilities</strong></p>