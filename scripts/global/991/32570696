<p>I have implemented this recursive function in scheme:</p>  <pre><code>       (define f (lambda (n)          (cond ((= n 0) 0)               ((= n 1) 2)               ((= n 2) 37)               ((odd? n) (+ (f (- n 3)) 1))               (else (+ (f (- (/ n 2) 1)) 7))))         ) </code></pre>  <p>On a lot of exercises I have been asked wether my solution is tail recursive or not and to be honest, no matter how many times i read the definition of tail recursion, I just don't understand it. If I would define tail-recursive, it would be something like this.</p>  <blockquote>   <p>Definition: A tail-reursive function is calculated in a constant memory space no matter the input value.</p> </blockquote>  <p>Here's also another two. One of them is tail-recursive and i want to find out which one.</p>  <pre><code>(define ln2-a  (lambda (n)  (define loop    (lambda (n)      (if (= n 1)          0         (+ 1 (loop (quotient n 2))))))  (trace loop)  (loop n))) </code></pre>  <p>And here.</p>  <pre><code>(define ln2-b   (lambda (n)     (define loop       (lambda (n result)       (if (= n 1)          result        (loop (quotient n 2) (+ result 1)))))  (trace loop)  (loop n 0))) </code></pre>  <p>Let's take a look at the two last functions. Here I suppose ln2-b is the recursive one. But I can't really answer why, which kinda irritates me. I think trace loop helps me BUT I am not quite sure what it says and how it helps me. I try to compare all three functions find similarities but also how they differ from each other. But, unfortunately, I can't manage to do it...</p>  <p>Hope someone friendly can help me, thanks. Oh and I am also really new to computer science so perhaps I use some terminology wrong. If something is unclear, just say it. :)</p>