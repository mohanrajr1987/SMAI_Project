<p>Ok, I'll start out by saying that this is a hw question. That being said, I'm not looking for the answer, just some direction to the answer.</p>  <p>I've got to compute a series up to <code>n</code>. My initial thoughts were to use recursion, and do something like the following</p>  <pre><code>(define (series-b n)   (if (= n -1) 0 ; Not sure how to handle this     (+ (/ (expt -1 n) (factorial n)) (series-b (sub1 n)))   ) ) </code></pre>  <p>That seems to be the way to do this. However, I'm not really sure how to handle the -1 case, and that is throwing my expected answers off. Thanks in advance.</p>  <p><strong>Edit</strong></p>  <p>I do have some test cases, and they are as follows</p>  <pre><code>n = 0: 1 n = 1: 1/2 n = 2: 2/3 n = 3: 5/8 n = 4: 19/30 n = 5: 91/144 </code></pre>  <p>I'm not entirely sure which series that is either. </p>  <p><strong>Edit 2</strong></p>  <p>I've selected soegaard's answer, however, I did make a small change to the final solution, which is:</p>  <pre><code>(define (series-b n)   (for/sum ([i (+ n 1)])       (/ (expt -1 i)          (factorial (+ i 1)))) ) </code></pre>  <p>The accepted answer uses <code>(factorial i)</code> rather than <code>(factorial (+ i 1))</code>. I was not yet familiar with <code>for/sum</code>, but that is a really nice way to handle this problem, so thanks!</p>