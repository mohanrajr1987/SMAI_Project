<p>I know this is maybe an oddball idea, but I thought might as well give it a try to ask here.</p>  <p>I was experimenting in Racket about state representation without local variables. The idea was defining a function that prints it's parameter value and if called again gives me another value. Since pure functions called with the same parameter always produce the same result, my workaround-idea got me the following.</p>  <pre><code>(define (counter n)   (displayln n)   (Î» () (counter (add1 n)))) ; unapplied lambda so it doesn't go in a loop </code></pre>  <p>Then I devised a function to call <code>counter</code> and its resulting lambdas a certain number of times.</p>  <pre><code>(define (call proc n)   (unless (zero? n)     (let ([x (proc)])       (call x (sub1 n))))) </code></pre>  <p>Which results in this:</p>  <pre><code>&gt; (call (counter 0) 5) 0 1 2 3 4 5 </code></pre>  <p>What is the name for the concept applied here? Propably it's something trivial what you need in real applications all the time, but since I have no experience in that respect yet so I can't pinpoint a name for it. Or maybe I just complicated something very simple, but nonetheless I would appreciate an answer so I can look further into it. </p>  <p>Sorry if my question is not clear enough, but english is not my first language and to ask about things I have no name for makes me feel kinda uncertain.</p>