<p>So I'm familiar with while loops in other languages, but am having trouble getting it to work in Racket. The best I've been able to accomplish is either getting the loop to run once (more like an if statement) or hitting an infinite loop.</p>  <p>Here is the code for running once:</p>  <pre><code>;; Evaluates a loop. ;; When the condition is false, return 0. ;; There is nothing special about zero -- we just need to return something. (define (eval-while c body env)   (if (false?(car(evaluate c env)))     (cons 0 env)     (evaluate body env)) ) </code></pre>  <p>And here's my other attempt with an infinite loop:</p>  <pre><code> (define (eval-while c body env)    (if (evaluate c env)      (eval-while c body (cdr(evaluate body env)))      (cons 0 env))  ) </code></pre>  <p>Here's some other possibly relevant code (the interpreter portion):</p>  <pre><code>(define (evaluate prog env)   (match prog     [(struct sp-val (v))              (cons v env)]      [(struct sp-while (c body))       (eval-while c body env)]     [_                                (error "Unrecognized expression")])) </code></pre>  <p>Any help is much appreciate!</p>  <p>EDIT:</p>  <p>Here's a more complete version of the code. </p>  <p>Test case:</p>  <pre><code>(evaluate (sp-seq (sp-assign "x" (sp-val 0))       (sp-seq (sp-assign "y" (sp-val 10))       (sp-while (sp-binop &lt; (sp-var "x") (sp-var "y"))                 (sp-assign "x" (sp-binop + (sp-var "x") (sp-val 1))))       ))       empty-env) ;'(0 . #hash(("y" . 10) ("x" . 10))) </code></pre>  <p>And more main evaluations:</p>  <pre><code>    [(struct sp-binop (op exp1 exp2)) (eval-binop op exp1 exp2 env)]     [(struct sp-assign (var exp))     (eval-assign var exp env)]     [(struct sp-var (varname))        (cons (hash-ref env varname) env)] </code></pre>  <p>Please let me know if I should also include their definitions.</p>  <p>EXTRA ADDITION eval-assign:</p>  <pre><code>(define (eval-assign var exp env)   (cons (car(evaluate exp env))(hash-set env var (car(evaluate exp env))))  ) </code></pre>