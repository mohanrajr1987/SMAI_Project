<pre><code>(define mylist (list 1 2 3 5 8 9 10))  ;;sum of the squares of the even elements of mylist (define (evens lis)   (cond (;; Check stop condition 1          (null? lis)          '())         (;; Check stop condition 2: list of length = 1          (null? (cdr lis))          '())         (else          ;; Check: Building list with second element          ;; The previous cond clauses have already sorted out          ;; that lis and (cdr lis) are not null.          (cons (cadr lis)                ;; Check: Recurse "the rest of the rest" of lis with cddr                (evens (cddr lis))))))  (define (sum-even lis)   (if (null? lis)   0   (+ (expt (car lis) 2) (sum-even(cdr lis))))) ;;add all squared even elements  (sum-squared-even (evens mylist)) </code></pre>  <p>Here is my attempt to find the sum of the squares of the even elements in the list. However, I am really new to r5rs, <strong>is that possible I can write these scheme into only one procedure?</strong> Also, <strong>I was asked to write a second version in terms of map, foldr, and filter</strong>. Hope anyone familiar with r5rs can help me out! Thanks!</p>