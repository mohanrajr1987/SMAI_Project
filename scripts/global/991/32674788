<p>This is part of an interpreter assignment I have.</p>  <p>When calling the following:</p>  <pre><code>(evaluate (sp-assign "y" (sp-val 18)) (hash "x" 42)) </code></pre>  <p>I am trying to get this result:</p>  <pre><code>'(18 . #hash(("y" . 18) ("x" . 42))) </code></pre>  <p>Here's my relevant code:</p>  <pre><code>(define empty-env (hash))   (struct sp-var (varname))   (struct sp-assign (var exp))  (define (evaluate prog env)   (match prog   [(struct sp-val (v))              (cons v env)]    [(struct sp-assign (var exp))     (eval-assign var exp env)]   [(struct sp-var (varname))        (cons (hash-ref env varname) env)]   [_                                (error "Unrecognized expression")]))  (define (eval-assign var exp env)   evaluate (sp-var var) (hash var (evaluate exp env))) ;'((18 . #hash(("x" . 42))) . #hash(("y" . (18 . #hash(("x" . 42))))))    ;var (hash var (evaluate exp env)) ;var (hash var (evaluate exp env)) ) </code></pre>  <p>The results that I am getting are respectively next to the two attempts that I have in the function (I've made far more attempts, but these are the closest I've gotten to what the actual result is supposed to be). Could someone please lend me a hand and let me know where I am going wrong with my logic?</p>  <p>EDIT: I was able to get a bit closer to my goal with the following implementation of eval-assign:</p>  <pre><code>(list (car(evaluate exp env))(hash var (car(evaluate exp env))) env) </code></pre>  <p>Which produces:</p>  <pre><code>'(18 #hash(("y" . 18)) #hash(("x" . 42))) </code></pre>  <p>But I'm still stuck with an extra hash in there...</p>