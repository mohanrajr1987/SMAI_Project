<p>I am creating a small game in Racket with the big bang function and four structures. My structures are below:</p>  <pre><code>(define-struct game_main (tank missile UFO)) (define-struct tank (x aim-x aim-y)) (define-struct missile (x y vel)) (define-struct UFO (x y)) (define a-game    (make-game_main    (make-tank 370 100 100)   (make-missile 500 500 1)   (make-UFO 100 100))) </code></pre>  <p>When creating a key-event handler for the big bang function, I'm using a to move the x position of the tank left, d to move it right, like so. The big-bang function is included for reference:</p>  <pre><code>(define (controls a-game a-key)   (cond     [(key=? a-key "a")      (struct-copy game_main a-game [tank (make-tank (- (tank-x (game_main-tank a-game)) 7)                                                     (tank-aim-x (game_main-tank a-game))                                                     (tank-aim-y (game_main-tank a-game)))])]     [(key=? a-key "d")      (struct-copy game_main a-game [tank (make-tank (+ (tank-x (game_main-tank a-game)) 7)                                                     (tank-aim-x (game_main-tank a-game))                                                     (tank-aim-y (game_main-tank a-game)))])]     )   )  (big-bang a-game (to-draw game_init) (on-key controls))  </code></pre>  <p>This works great; however, it's verbose. I'd like to define a function, like "move-tank-left" that simply contains the world-state changers, but defined outside the event handler. But, instead of directly editing the struct being manipulated by big-bang, it goes back to my globally set a-game game_main struct and restores the x values it began with. <strong>How can one reference the current big-bang function world state so that you can establish functions outside of the big-bang function that will edit the temporary state?</strong></p>  <p>Here's the function in question:</p>  <pre><code>(define move-tank-left (make-tank (- (tank-x (game_main-tank a-game)) 5) (tank-aim-x (game_main-tank a-game)) (tank-aim-y (game_main-tank a-game)))) </code></pre>