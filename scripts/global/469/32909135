<p>I have an UltraGrid with checkboxes columns.</p>  <p>There are initialized from a web method in Java which is calling the DB for the data. Anyway, when I run the application some checkboxes are already filled and I can check or uncheck. I would like to retrieve the columns which have been updated. Currently, I did something which allows me to retrieve the status of all the checkboxes and not only the ones I've modified.</p>  <p>Here's the code, the method GetStatusForRow retrieve the status of the checkboxes and GetStatusCheckboxes call the previous method to get the status of all the checkboxes.</p>  <pre><code>public partial class FrmCVault : Form {     #region Properties      /// &lt;summary&gt;     /// Base filter lists     /// &lt;/summary&gt;     //TODO: Change to a CVaultConfiguration Class     public List&lt;BASEFILTER&gt; lBaseFilters { get; private set; }     public List&lt;SITE&gt; lSites { get; private set; }     public List&lt;CONFIGURE&gt; lConfigures{ get; private set; }      #endregion      #region Constructors      /// &lt;summary&gt;     /// Constructor     /// &lt;/summary&gt;     public FrmCVault()     {         InitializeComponent();         this.lBaseFilters = null;         this.lSites = null;         this.lConfigures = null;     }      #endregion      #region Private methods      #region Compare byte[]      /// &lt;summary&gt;     /// Compare two byte[]     /// &lt;/summary&gt;     /// &lt;param name="b1"&gt;&lt;/param&gt;     /// &lt;param name="b2"&gt;&lt;/param&gt;     /// &lt;returns&gt;&lt;/returns&gt;     private bool Compare(byte[] b1, byte[] b2)     {        // return Encoding.ASCII.GetString(b1) == Encoding.ASCII.GetString(b2);         return b1.SequenceEqual(b2);     }     #endregion      #region Fill the table with Basefilter data      /// &lt;summary&gt;     /// Fill the table with Basefilter data     /// &lt;/summary&gt;     private void retrieveData()     {         EVPTProviderBase provider = DataRepository.EVPTProvider;          ObjectDataSet ds = provider.GetBaseFilter();          if (ds != null)         {             this.lBaseFilters = ds.arBASEFILTER.ToList();             this.lSites = ds.arSITE.ToList();             this.lConfigures = ds.arCONFIGURE.ToList();         }     }      #endregion      #region Load Base filter data from DB     /// &lt;summary&gt;     /// Load data from the database      /// &lt;/summary&gt;     private void LoadDataSource()     {         CVaultDataSource.Rows.Clear();          if (this.lBaseFilters != null)         {             var filters = from filterBase in this.lBaseFilters                           orderby filterBase.EVPTCODE                           select new { Id = filterBase.ID, cvault = filterBase.CVAULTCODE, evpt = filterBase.EVPTCODE, desc = filterBase.EVPTDESIGNATION, duration = filterBase.DURATION, time = filterBase.ETDTIME };              var sitesDB = from sites in this.lSites                           orderby sites.KEY                           select new { SiteKey = sites.KEY, SiteId = sites.ID };              var configs = from config in this.lConfigures                           select new { site = config.SITE_ID, baseF = config.BASEFILTER_ID };              object[][] table = new object[filters.Count()][];             int i = 0;              foreach (var item in filters)             {                 int j = 0;                 table[i] = new object[5 + sitesDB.Count()];                 table[i][j++] = item.cvault;                 table[i][j++] = item.evpt;                 table[i][j++] = item.desc;                 table[i][j++] = item.duration;                 table[i][j++] = item.time;                 foreach (var site in sitesDB)                 {                     table[i][j] = false;                      foreach (var conf in configs)                     {                         if (Compare(site.SiteId, conf.site) &amp;&amp; Compare(conf.baseF, item.Id))                         {                             table[i][j] = true;                             break;                         }                     }                     j++;                 }                 i++;             }             foreach (var item in table)             {                 CVaultDataSource.Rows.Add(item);             }         }     }      #endregion      #region Add column sites      /// &lt;summary&gt;     /// Add columns in table according to the sites stored in DB     /// &lt;/summary&gt;     /// &lt;remarks&gt;The action is used to create site column&lt;/remarks&gt;     private void AddColumnSites()     {         const string siteCol = "SITE_COL";          var addNewSite = new Action&lt;string&gt;(site =&gt;         {             if (siteCol != "OTHER")              {                 var ultraGridBand = this.CVaultGrid.DisplayLayout.Bands[0];                  var gridDataColumn = new UltraDataColumn(site);                 gridDataColumn.DataType = typeof(bool);                 gridDataColumn.Tag = siteCol;                 gridDataColumn.DataType = typeof(bool);                 gridDataColumn.DefaultValue = false;                  this.CVaultDataSource.Band.Columns.AddRange(new object[] {                     gridDataColumn                 });             }         });          for (int i = this.CVaultDataSource.Band.Columns.Count-1; i &gt;= 0 ; i--)         {             if (this.CVaultDataSource.Band.Columns[i].Tag == siteCol)             {                 this.CVaultDataSource.Band.Columns.RemoveAt(i);             }         }          var sitesDB = from sites in this.lSites                       orderby sites.KEY                       select  sites.KEY ;          foreach (var item in sitesDB)         {             addNewSite(item);         }     }      #endregion      #region Retrieve status of checkboxes     /// &lt;summary&gt;     /// Retrieve the checkboxes's status of  the last row selected     /// &lt;/summary&gt;     /// &lt;param name="b"&gt;&lt;/param&gt;     /// &lt;param name="row"&gt;&lt;/param&gt;     /// &lt;returns&gt;&lt;/returns&gt;     private Dictionary&lt;string, bool&gt; GetStatusForRow(UltraDataBand b, UltraDataRow row)     {         Dictionary&lt;string, bool&gt; statusChecked = new Dictionary&lt;string, bool&gt;();         foreach (UltraDataColumn col in b.Columns.Cast&lt;UltraDataColumn&gt;()                                          .Where(x =&gt; x.Tag != null &amp;&amp;                                                 x.Tag.ToString() == "SITE_COL"))         {             statusChecked.Add(col.Key, Convert.ToBoolean(row.GetCellValue(col)));         }         return statusChecked;     }      #endregion      #region Retrieve status of hours columns      private Dictionary&lt;string, string&gt; GetStatusHoursForRow(UltraDataBand b, UltraGridRow row)     {         Dictionary&lt;string, string&gt; statusChecked = new Dictionary&lt;string, string&gt;();         foreach (UltraDataColumn col in b.Columns.Cast&lt;UltraDataColumn&gt;()                                          .Where(x =&gt; x.Tag != null &amp;&amp;                                                 x.Tag.ToString() == "SITE_COL"))         {             //statusChecked.Add(,);         }         return statusChecked;     }      #endregion      #endregion      #region Form Events      /// &lt;summary&gt;     /// Form loading event     /// &lt;/summary&gt;     /// &lt;param name="sender"&gt;Form&lt;/param&gt;     /// &lt;param name="e"&gt;Arguments (empty)&lt;/param&gt;     private void FrmCVault_Load(object sender, EventArgs e)     {                     this.retrieveData();         this.AddColumnSites();         this.LoadDataSource();         CVaultGrid.DataBind();     }      private void ultraButton2_Click(object sender, EventArgs e)     {         CVaultGrid.ActiveRow.Update();         CVaultGrid.DisplayLayout.Bands[0].AddNew();     }      private void FrmCVault_Shown(object sender, EventArgs e)     {         CVaultGrid.DisplayLayout.Bands[0].AddNew();     }      private void vl_ItemNotInList(object sender, ValidationErrorEventArgs e)     {         var ultrCombo = sender as UltraComboEditor;         e.RetainFocus = true;          if (e.LastValidValue != null)             ultrCombo.Value = e.LastValidValue;         else if (ultrCombo.Items.Count&gt;0)             ultrCombo.SelectedItem = ultrCombo.Items[0];     }      private void ultraGrid1_KeyDown(object sender, KeyEventArgs e)     {         if (e.KeyData == Keys.Enter)         {             CVaultGrid.UpdateData();         }     }      private void Cancel_Click(object sender, EventArgs e)     {         this.Close();     }      private void SAVE_Click(object sender, System.EventArgs e)     {         this.GetStatusCheckboxes();         this.GetStatusHours();     }      /// &lt;summary&gt;     /// Get the status of checkboxes which have been changed (check or uncheck)     /// &lt;/summary&gt;     private void GetStatusCheckboxes()     {         var statusChecked = new Dictionary&lt;string, Dictionary&lt;string, bool&gt;&gt;();         foreach (UltraDataRow row in CVaultDataSource.Rows)         {             statusChecked.Add(row.GetCellValue(0).ToString(), GetStatusForRow(CVaultDataSource.Band, row));         }          foreach (KeyValuePair&lt;string, Dictionary&lt;string, bool&gt;&gt; kvp in statusChecked)         {             foreach (var sr in kvp.Value)             {                 Console.WriteLine(string.Format("[{0}] Status site: {1} is {2}", kvp.Key, sr.Key, sr.Value));                 }         }          Console.WriteLine("\r\n");     }      /// &lt;summary&gt;     /// Get back the hour which have been updated     /// From the column DURATION or ETD     /// &lt;/summary&gt;     private void GetStatusHours()     {         //GetStatusHoursForRow(CVaultDataSource.Band, CVaultGrid.ActiveRow);         //Dictionary&lt;string, bool&gt; statusChecked = GetStatusForRow(CVaultDataSource.Band, CVaultGrid.ActiveRow);         //foreach (KeyValuePair&lt;string, bool&gt; kvp in statusChecked)         //    Console.WriteLine("Status site:" + kvp.Key + " is " + kvp.Value.ToString());         //Console.WriteLine("\r\n");     }      #endregion      private void CVaultGrid_InitializeLayout(object sender, InitializeLayoutEventArgs e)     {      } } </code></pre>  <p>Here's a screen to see the windows:</p>  <p><a href="http://i.stack.imgur.com/pbhJr.png" rel="nofollow"><img src="http://i.stack.imgur.com/pbhJr.png" alt="Example of window"></a></p>