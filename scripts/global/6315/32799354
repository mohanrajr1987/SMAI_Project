<p><strong>Please look at the picture first : it is not normal that the five last rows appear. It is when I clicked on the gray empty area that they appeared.</strong></p>  <p>I've made a program that lists groceries.</p>  <p>At the launch of the program, the <code>JTable</code> displays the entire database and then I let the user select what he wants to see.</p>  <p>Here for example, I selected all the groceries made at "Carrefour" and there is a total of 7 items in the list. It displays normally.</p>  <p>But when I go and click in the gray area under the last item, the JTable has an unexpected behavior shown on the image below (it shows other date of the database as if the whole database was displayed like in the launching). The same happens when I resize the frame or try to ordre the different columns.</p>  <p>I've made my research and can not find any solution to this problem.</p>  <p><strong>BEFORE CLICKING</strong></p>  <p><a href="http://i.stack.imgur.com/YkUTR.png" rel="nofollow"><img src="http://i.stack.imgur.com/YkUTR.png" alt="JTableBeforeClicking"></a></p>  <p><strong>AFTER CLICKING</strong> </p>  <p><a href="http://i.stack.imgur.com/I3kZH.png" rel="nofollow"><img src="http://i.stack.imgur.com/I3kZH.png" alt="JTable Problem"></a></p>  <p>Here is the portion of the code concerning the creation of the JTable :</p>  <pre><code>private void tableCreation(String query) {     // Random database queries I don't display for the sake of clarity          excel = new JTable(rowData, columnNames);         excel.setAutoCreateRowSorter(true);     } catch (Exception e) {         e.printStackTrace();     }     tablePanel.removeAll();     this.getContentPane().add(new JScrollPane(tablePanel.add(excel)), BorderLayout.CENTER);     this.revalidate(); } </code></pre>  <p>And here is the part of the code concerning the research and thus the modifying of the JTable :</p>  <pre><code>class SearchListener implements ActionListener{     @Override     public void actionPerformed(ActionEvent e) {      // Random query construction with the e.getText() method      if (!column.equals("prix") &amp;&amp; !column.equals("num_id")){             query = "select * from products where " + column + " like '%" + searchText.getText().toUpperCase().trim() + "%'";         }else{             query = "select * from products where " + column + " = '" + searchText.getText().toUpperCase().trim() + "'";         }      }else{         query = "select * from products";     }         tableCreation(query);     } } </code></pre>  <p><strong>EDIT 1 :</strong></p>  <p>I have tried to put the JTable directly on the JPanel without using a JScrollPane, it did not work out.</p>  <p>I also tried to not display the entire database at the launch of the program but when I'm doing the first query, the problem is the same. It either displays gray rows, or it displays the data from the last query when I click a random row.</p>  <p>I know the problem is not coming from the query I'm using because the wanted data is correctly displayed.</p>  <p>I'm really lost and could not imagine where it could come from.</p>  <p>For info : I'm using a JFrame with different JPanel's on it. On one of them, I added the JScrollPane on which I put my JTable.</p>  <p><strong>EDIT 2 :</strong></p>  <p>I posted the whole code <a href="http://www.codesend.com/view/e85dc32b75ee9603c8c760589506e718/" rel="nofollow"><strong>here</strong></a> to anyone wanting to have the details. It is contained in one class only so it is easy to read.</p>  <hr>  <p>Whole code:</p>  <pre><code>import java.awt.BorderLayout; import java.awt.Color; import java.awt.Dimension; import java.awt.Font; import java.awt.GridBagConstraints; import java.awt.GridLayout; import java.awt.Toolkit; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.sql.ResultSet; import java.sql.ResultSetMetaData; import java.sql.SQLException; import java.sql.Statement;  import javax.swing.BorderFactory; import javax.swing.JButton; import javax.swing.JComboBox; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.JScrollPane; import javax.swing.JSplitPane; import javax.swing.JTable; import javax.swing.JTextField;   public class FrameFC extends JFrame{      public static void main(String[] args) {         FrameFC fr = new FrameFC();     }      /*Main Frame Creation*/      private JSplitPane split;     private Font f = new Font("Arial", Font.PLAIN, 15);     private JScrollPane scroll = new JScrollPane();      /*Panel Creation*/     private JPanel mainPanel = new JPanel();      private JPanel westPanel = new JPanel();     private JPanel eastPanel = new JPanel();      private JPanel addPanel = new JPanel();     private JPanel searchPanel = new JPanel();     private JPanel removePanel = new JPanel();      private int screenHeight = (int) (Toolkit.getDefaultToolkit().getScreenSize().getHeight());     private int screenWidth = (int) (Toolkit.getDefaultToolkit().getScreenSize().getWidth());      private JButton buttonAdd = new JButton("Ajouter"),                     buttonSearch = new JButton("Rechercher"),                     buttonRemove = new JButton("Supprimer");      private JTextField  nomP = new JTextField(),                         cat = new JTextField(),                         mag = new JTextField(),                         prix = new JTextField(),                         dateAchat = new JTextField(),                         codemag = new JTextField(),                         removeText = new JTextField();      private JTextField searchText = new JTextField();      private String[] tabCat = {"ID", "Nom Produit", "Categorie", "Magasin", "Prix", "Date (JJ/MM/AAAA)", "Code Magasin"};      private JComboBox combo = new JComboBox(tabCat);      /*Table Creation*/     private JPanel tablePanel = new JPanel();     private JTable excel = new JTable();     private String query = "select * from products order by num_id";      public FrameFC(){         this.setTitle("Gestionnaire de produits");         this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         this.setExtendedState(JFrame.MAXIMIZED_BOTH);         this.setLayout(new BorderLayout());          panelCreation();         tableCreation(query);          this.setVisible(true);     }      class AjouterListener implements ActionListener{         @Override         public void actionPerformed(ActionEvent e) {             // TODO Auto-generated method stub             if (nomP.getText().equals("") ||                     cat.getText().equals("") ||                     mag.getText().equals("") ||                     prix.getText().equals("") ||                     dateAchat.getText().equals("")){              }else{                 String nomps, cats, mags, prixs, dates;                 nomps = nomP.getText();                 cats = cat.getText();                 mags = mag.getText();                 prixs = prix.getText();                 dates = dateAchat.getText();                  query = "insert into products "                         + "(nom_produit, cat, mag, prix, date_achat, code_magasin)"                         + " values ("                         + "'" + nomps + "', '" + cats                         + "', '" + mags + "', " + prixs                         + ", '" + dates + "', '" + codemag.getText() + "');";                  Statement state;                 ResultSet res;                 try {                     state = ConnectPostGRESql.getInstance("postgres").createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);                     res = state.executeQuery(query);                 } catch (SQLException e1) {                     System.out.println(nomps + " ajouté avec succès.");                 }                  query = "select * from products";                 tableCreation(query);                 nomP.setText("");                 cat.setText("");                 prix.setText("");              }         }     }      class SearchListener implements ActionListener{         @Override         public void actionPerformed(ActionEvent e) {             // TODO Auto-generated method stub             String column;              if (!searchText.getText().equals("")){              switch (String.valueOf(combo.getSelectedItem()))             {             case "ID":                 column = "num_id";                 break;             case "Nom Produit":                 column = "nom_produit";                 break;             case "Categorie":                 column = "cat";                 break;             case "Magasin":                 column = "mag";                 break;             case "Prix":                 column = "prix";                 break;             case "Code Magasin":                 column = "code_magasin";                 break;             default:                 column = "date_achat";                 break;             }             if (!column.equals("prix") &amp;&amp; !column.equals("num_id")){                 query = "select * from products where " + column + " like '%" + searchText.getText().toUpperCase().trim() + "%'";             }else{                 query = "select * from products where " + column + " = '" + searchText.getText().toUpperCase().trim() + "'";             }          }else{             query = "select * from products";         }             tableCreation(query);         }     }      class RemoveListener implements ActionListener{         @Override         public void actionPerformed(ActionEvent e) {             // TODO Auto-generated method stub             if (!removeText.getText().equals("")){                 Statement state;                 ResultSet res;                 try {                     state = ConnectPostGRESql.getInstance("postgres").createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);                     res = state.executeQuery("delete from products where num_id = " + removeText.getText());                 } catch (SQLException e1) {                     System.out.println("Entrée supprimée avec succès.");                 }             }             tableCreation("select * from products");          }     }      private void tableCreation(String query) {         // TODO Auto-generated method stub         try {             Statement state = ConnectPostGRESql.getInstance("postgres").createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);             ResultSet res = state.executeQuery(query);              ResultSetMetaData meta = res.getMetaData();              Object[] columnNames = new Object[meta.getColumnCount()];              for (int i = 1; i&lt;=meta.getColumnCount();i++){                 columnNames[i-1] = meta.getColumnName(i);             }              res.last();              Object[][] rowData = new Object[res.getRow()][meta.getColumnCount()];              res.beforeFirst();              int j = 1;              while (res.next()){                 for (int i = 1; i &lt;= meta.getColumnCount(); i++){                     if (i == 1){                         int nombredez = 4 - String.valueOf(res.getInt(i)).length();                         String nombredezString = "";                         for (int n = 0; n &lt; nombredez;n++){                             nombredezString += "0";                         }                         rowData[j-1][i-1] = nombredezString + String.valueOf(res.getObject(i));                     }                     else{                         rowData[j-1][i-1] = res.getObject(i);                     }                 }                 j++;             }              res.close();             state.close();              excel = new JTable(rowData, columnNames);             excel.setAutoCreateRowSorter(true);         } catch (Exception e) {             e.printStackTrace();         }         tablePanel.removeAll();         this.getContentPane().add(new JScrollPane(tablePanel.add(excel)), BorderLayout.CENTER);         this.revalidate();     }      private void panelCreation() {         // TODO Auto-generated method stub          /*Panel Add (West)*/         addPanel.setLayout(new GridLayout(7,2));          addPanel.add(new JLabel("Entrez le nom du produit :"));         addPanel.add(nomP);         addPanel.add(new JLabel("Entrez la catégorie :"));         addPanel.add(cat);         addPanel.add(new JLabel("Entrez le magasin :"));         addPanel.add(mag);         addPanel.add(new JLabel("Entrez le prix :"));         addPanel.add(prix);         addPanel.add(new JLabel("Entrez la date :"));         addPanel.add(dateAchat);         addPanel.add(new JLabel("Entrez le code magasin"));         addPanel.add(codemag);         addPanel.add(new JLabel());          buttonAdd.addActionListener(new AjouterListener());         addPanel.add(buttonAdd);          addPanel.setBorder(BorderFactory.createTitledBorder("Ajouter"));         addPanel.setPreferredSize(new Dimension(949, 360));          /*Panel Search (North-East)*/         searchPanel.setLayout(new GridLayout(2,2));          searchPanel.add(combo);         searchPanel.add(searchText);         searchPanel.add(new JLabel());          buttonSearch.addActionListener(new SearchListener());         searchPanel.add(buttonSearch);          searchPanel.setBorder(BorderFactory.createTitledBorder("Rechercher"));         searchPanel.setPreferredSize(new Dimension(949, 180));          /*Panel Remove (South-East)*/         removePanel.setLayout(new GridLayout(2,2));          removePanel.add(new JLabel("Entrez le numero d'identifiant : "));         removePanel.add(removeText);         removePanel.add(new JLabel());          buttonRemove.addActionListener(new RemoveListener());         removePanel.add(buttonRemove);          removePanel.setBorder(BorderFactory.createTitledBorder("Supprimer"));         removePanel.setPreferredSize(new Dimension(949, 180));          /*MainPanel on Frame*/         westPanel.setBorder(BorderFactory.createLineBorder(Color.black, 2));         westPanel.add(addPanel);          eastPanel.setLayout(new BorderLayout());         eastPanel.setBorder(BorderFactory.createLineBorder(Color.black, 2));          eastPanel.add(searchPanel, BorderLayout.NORTH);         eastPanel.add(removePanel, BorderLayout.SOUTH);          mainPanel.setLayout(new BorderLayout());          mainPanel.add(westPanel, BorderLayout.WEST);         mainPanel.add(eastPanel, BorderLayout.EAST);          this.getContentPane().add(new JScrollPane(mainPanel), BorderLayout.NORTH);     }  } </code></pre>