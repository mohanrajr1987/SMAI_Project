<p>I am creating <code>JTable</code> with custom table cell renderer by extending <code>DefaultTableCellRenderer</code> where I would like to use some image along with the text.</p>  <p><a href="http://i.stack.imgur.com/6rePH.png" rel="nofollow"><img src="http://i.stack.imgur.com/6rePH.png" alt="enter image description here"></a></p>  <p>As you can see above, even though I have selected the particular row, it is not highlighting in the <code>Testcases</code> column. I have tried some existing SO questions (<a href="http://stackoverflow.com/questions/6862102/swing-jtable-highlight-selected-cell-in-a-different-color-from-rest-of-the-sel">Q1</a>, <a href="http://stackoverflow.com/questions/6216014/how-to-get-full-highlighting-with-border-on-jtable-renderer">Q2</a>) solutions, but still it is not working. Where I am making the mistake ? </p>  <p><strong>JTableTest.java</strong></p>  <pre><code>import java.awt.BorderLayout; import java.awt.event.MouseAdapter; import java.awt.event.MouseEvent; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.JScrollPane; import javax.swing.JTable; import javax.swing.table.DefaultTableModel;  public class JTableTest extends JFrame {      public DefaultTableModel testcaseModel;     public JTable testcasesTable;     Object[] testcaseTableColumns = {"S.No", "Testcases"};     public static final int TESTCASE_SNO_COLUMN = 0;     public static final int TESTCASE_NAME_COLUMN = 1;      public JTableTest() {         initComponents();     }      private void initComponents() {         if (testcaseModel == null) {             testcaseModel = new DefaultTableModel(null, testcaseTableColumns){                  @Override                 public Class&lt;?&gt; getColumnClass(int columnIndex) { //                    if (columnIndex == -1) { //                        return Integer.class; //                    } else if(columnIndex==1){ //                        return JLabel.class; //                    }                     return Object.class;                 }              };         }         if (testcasesTable == null) {             testcasesTable = new JTable(testcaseModel) {                 @Override                 public boolean isCellEditable(int row, int column) {                     return false;                 }             };         }         testcasesTable.setCellSelectionEnabled(true);         testcasesTable.getColumnModel().getColumn(TESTCASE_NAME_COLUMN).setCellRenderer(new LabelRenderer());         for (int i = 0; i &lt; 10; i++) {             testcaseModel.addRow(new Object[]{i, (i * 100)});         }     }      public static void main(String[] args) {         JTableTest jTableTest = new JTableTest();         jTableTest.setSize(300, 300);         jTableTest.setTitle("TableIcon");         jTableTest.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         JPanel pnlMain = new JPanel(new BorderLayout(10, 10));         JScrollPane scrollPane = new JScrollPane(jTableTest.testcasesTable);         pnlMain.add(scrollPane);         jTableTest.getContentPane().add(pnlMain);         jTableTest.setVisible(true);      }  } </code></pre>  <p><strong>LabelRenderer.java</strong></p>  <pre><code>import java.awt.Component; import java.awt.Insets; import javax.swing.BorderFactory; import javax.swing.ImageIcon; import javax.swing.JLabel; import javax.swing.JTable; import javax.swing.UIManager; import javax.swing.border.Border; import javax.swing.table.DefaultTableCellRenderer;   public class LabelRenderer extends DefaultTableCellRenderer {      public static final Border focusedCellBorder = UIManager.getBorder("Table.focusCellHighlightBorder");      public static final Border unfocusedCellBorder = createEmptyBorder();      private static Border createEmptyBorder() {         Insets i = focusedCellBorder.getBorderInsets(new JLabel());         return BorderFactory.createEmptyBorder(i.top, i.left, i.bottom, i.right);     }      @Override     public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {         super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);          String text = value.toString();         JLabel label = new JLabel(text);          try {             label.setIcon(new ImageIcon(getClass().getResource("ok_16px.png")));             // This below code setting the border to be highlighted, but not whole                           label.setBorder(hasFocus ? focusedCellBorder : unfocusedCellBorder);          } catch (Exception ex) {             System.out.println(ex);         }        // This also not working.....             if (isSelected) {             label.setBackground(table.getSelectionBackground());             label.setForeground(table.getSelectionForeground());         } else {             label.setBackground(table.getBackground());             label.setForeground(table.getForeground());         }         return label;     } } </code></pre>