<p>How can I set global class for Prepared Statement  This is my DbOperation class</p>  <p>DbOperation.java</p>  <pre><code>    package com;      import java.sql.Connection;     import java.sql.DriverManager;     import java.sql.SQLException;      public class DbOperation      {         public static final Connection getConnection()          {             Connection conn = null;              // ****************************************              try              {                 // ****************************************                  String driver = "org.gjt.mm.mysql.Driver";                 String protocol = "jdbc:mysql://";                 String ip = "127.0.0.1:";                 String port = "3306/";                 String databasename = "db_student";                 String username = "root";                 String password = "123456";                 String url = protocol + ip + port;                  // ****************************************                  Class.forName(driver);                 System.out.println("Driver Loaded...!!!!!");                  // ****************************************                  conn = DriverManager.getConnection(url + databasename, username, password);                 System.out.println("Connection Established...!!!!!");                  // ****************************************              }              catch (ClassNotFoundException cnfe)              {                 System.out.println("JDBC Driver not found" + cnfe);             }              catch (SQLException sqle)              {                 System.out.println("JDBC URL Error " + sqle);             }              // ****************************************              return conn;         }      } </code></pre>  <p>This  is my DbOperationProcess class for create Statement</p>  <p>DbOperationProcess.java  </p>  <pre><code>    package com;      import java.lang.*;     import java.sql.*;       //*********************************************************      public class DbOperationProcess     {          ResultSet  rs=null;         int count=0;         boolean value=false;         Statement st=null;         Connection conn=null;        //*********************************************************           public ResultSet getData(String query)         {             conn=DbOperation.getConnection();              try             {                 st=conn.createStatement();                  rs=st.executeQuery(query);             }             catch(SQLException sqle)             {                 System.out.println("SQL Error :"+sqle);             }             catch(Exception ae)             {                 ae.printStackTrace();             }               return rs;         }       //*********************************************************          public boolean setData(String query)         {             Connection conn=DbOperation.getConnection();              try             {                 st=conn.createStatement();                  st.execute(query);                 value=true;             }             catch(SQLException sqle)             {                 System.out.println("SQL Error :"+sqle);             }              catch(Exception ae)             {                 ae.printStackTrace();             }               return value;         }      //*********************************************************          public int setUpdate(String query)         {             Connection conn=DbOperation.getConnection();              try             {                  st=conn.createStatement();                  count=st.executeUpdate(query);             }             catch(SQLException sqle)             {                 System.out.println("SQL Error :"+sqle);             }              catch(Exception ae)             {                 ae.printStackTrace();             }              return count;         }      //*********************************************************          public void closeConnection()         {         if(rs!=null)         {             try             {              rs.close();              System.out.println("ResultSet Closed...!");              }             catch(Exception ae)             {              ae.printStackTrace();              }         }          else         {               System.out.println("ResultSet Closed Already...!");          }          if(st!=null)         {             try             {             st.close();              System.out.println("Statement Closed...!");              }             catch(Exception ae)             {              ae.printStackTrace();              }         }          else         {               System.out.println("Statement Closed Already...!");          }          if(conn!=null)         {             try             {              conn.close();              System.out.println("Connection Closed...!");              }             catch(Exception ae)             {              ae.printStackTrace();              }         }          else         {               System.out.println("Connection Closed Already...!");          }          }       } </code></pre>  <p>Similarly have any provision for  PreparedStatement .The case in each time the connection is established when a database is accesed when we use PreparedStatment.Because values are setted at the same time for example</p>  <pre><code>       Connection conn=null;       PreparedStatement ps=null;       ResultSet rs1=null;       int size=0;      try     {         // ****************************************          String query1="select * from tbl_login where username=? and password=?";          conn=DbOperation.getConnection();          ps = conn.prepareStatement(query1);          ps.setString(1, username);         ps.setString(2, password);          //pw.println(ps.toString());         rs1=ps.executeQuery();            // **************************************** </code></pre>