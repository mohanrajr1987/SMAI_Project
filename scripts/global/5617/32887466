<p>I was trying to change fetch size of sql query in DB2 by using MyBatis. But interestingly, it does not allow me to do it.</p>  <p>Currently the code I have:</p>  <p><strong>Mapper Xml</strong></p>  <pre><code>&lt;select id="testQuery" parameterType="Integer"&gt;     SELECT COUNT(1)     FROM SYSIBM.SYSDUMMY1     FETCH FIRST #{fetchSize} ROWS ONLY &lt;/select&gt; </code></pre>  <p><strong>Mapper Interface</strong></p>  <pre><code>public interface TestMapper {   List&lt;SampleEntity&gt; testQuery(Integer fetchSize) throws SQLException; } </code></pre>  <p>When I invoke <code>testQuery()</code> method(I test this query without dynamic variable and it works), I get following error:</p>  <pre><code>org.apache.ibatis.exceptions.PersistenceException:  ### Error querying database.  Cause: com.ibm.db2.jcc.am.SqlSyntaxErrorException: DB2 SQL Error: SQLCODE=-104, SQLSTATE=42601, SQLERRMC=?;&lt;INTEGER&gt; ROW ROWS, DRIVER=4.14.137 ### The error may exist in mapper.map.xml ### The error may involve ...tech.dao.mybatis.mapper.TestMapper.testQuery-Inline ### The error occurred while setting parameters ### SQL: SELECT COUNT(1)     FROM SYSIBM.SYSDUMMY1     FETCH FIRST ? ROWS ONLY ### Cause: com.ibm.db2.jcc.am.SqlSyntaxErrorException: DB2 SQL Error: SQLCODE=-104, SQLSTATE=42601, SQLERRMC=?;&lt;INTEGER&gt; ROW ROWS, DRIVER=4.14.137     at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:26)     at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:111)     at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:102)     at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:119)     at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:63)     at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:52)     at com.sun.proxy.$Proxy9.testQuery(Unknown Source)     at ...tech.dao.mybatis.mapper.MapperITest.test(MapperITest.java:63)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)     at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)     at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)     at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.junit.runner.JUnitCore.run(JUnitCore.java:137)     at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74)     at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:211)     at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:67)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134) Caused by: com.ibm.db2.jcc.am.SqlSyntaxErrorException: DB2 SQL Error: SQLCODE=-104, SQLSTATE=42601, SQLERRMC=?;&lt;INTEGER&gt; ROW ROWS, DRIVER=4.14.137     at com.ibm.db2.jcc.am.ed.a(ed.java:677)     at com.ibm.db2.jcc.am.ed.a(ed.java:60)     at com.ibm.db2.jcc.am.ed.a(ed.java:127)     at com.ibm.db2.jcc.am.oo.c(oo.java:2715)     at com.ibm.db2.jcc.am.oo.d(oo.java:2703)     at com.ibm.db2.jcc.am.oo.a(oo.java:2136)     at com.ibm.db2.jcc.am.po.a(po.java:7795)     at com.ibm.db2.jcc.am.oo.a(oo.java:2112)     at com.ibm.db2.jcc.t4.ab.h(ab.java:136)     at com.ibm.db2.jcc.t4.ab.b(ab.java:41)     at com.ibm.db2.jcc.t4.p.a(p.java:32)     at com.ibm.db2.jcc.t4.qb.i(qb.java:135)     at com.ibm.db2.jcc.am.oo.ib(oo.java:2105)     at com.ibm.db2.jcc.am.po.uc(po.java:3629)     at com.ibm.db2.jcc.am.po.b(po.java:4426)     at com.ibm.db2.jcc.am.po.kc(po.java:2821)     at com.ibm.db2.jcc.am.po.execute(po.java:2800)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:62)     at com.sun.proxy.$Proxy11.execute(Unknown Source)     at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:59)     at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:73)     at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:60)     at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:267)     at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:137)     at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:96)     at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:77)     at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:108)     ... 34 more </code></pre>  <p>I test this query without dynamic variable and it works. I tried to add those ones:</p>  <pre><code>#{fetchSize:INTEGER} </code></pre>  <p>or</p>  <pre><code>&lt;choose&gt;   &lt;when test="fetchSize != null"&gt;     FETCH FIRST #{fetchSize:INTEGER} ROWS ONLY   &lt;/when&gt;   &lt;otherwise&gt;     FETCH FIRST 200000 ROWS ONLY   &lt;/otherwise&gt; &lt;/choose&gt; </code></pre>  <p>but didn't work either! Do you have any suggestion?</p>