<p>I have this code:</p>  <pre><code>public List&lt;News&gt; selectNewsForPage(int firstIndex, int secondIndex, FilterForm filter) throws DAOException {     Connection connection = null;     PreparedStatement preparedStatement = null;     ResultSet resultSet = null;     List&lt;News&gt; rezNewses = new ArrayList&lt;&gt;();     try {         connection = DataSourceUtils.getConnection(dataSource);         preparedStatement = connection.prepareStatement(""                 + "select rownum, "                         + "COUNTOFCOMMENTS, "                         + "NEWS_ID, "                         + "SHORT_TEXT, "                         + "FULL_TEXT, "                         + "TITLE, "                         + "CREATION_DATE, "                         + "MODIFICATION_DATE "                  + "from ( select COUNT(COMM_ID) AS COUNTOFCOMMENTS, "                                 + "NEWS_ID, "                                 + "SHORT_TEXT, "                                 + "FULL_TEXT, "                                 + "TITLE, "                                 + "CREATION_DATE, "                                 + "MODIFICATION_DATE "                          + "from (select COMMENTS.NEWS_ID AS COMM_ID, "                                     + "NEWS.NEWS_ID, "                                     + "NEWS.SHORT_TEXT, "                                     + "NEWS.FULL_TEXT, "                                     + "NEWS.TITLE, "                                     + "NEWS.CREATION_DATE, "                                     + "NEWS.MODIFICATION_DATE "                               + " from COMMENTS RIGHT JOIN " + filterQueryMaker(filter)+ " NEWS ON COMMENTS.NEWS_ID = NEWS.NEWS_ID) "                        + "group by NEWS_ID, "                                 + "SHORT_TEXT, "                                 + "FULL_TEXT, "                                 + "TITLE, "                                 + "CREATION_DATE, "                                 + "MODIFICATION_DATE  order by 1 desc, 7) "                  + "group by rownum, "                         + "COUNTOFCOMMENTS, "                         + "NEWS_ID, "                         + "SHORT_TEXT, "                         + "FULL_TEXT, "                         + "TITLE, "                         + "CREATION_DATE, "                         + "MODIFICATION_DATE  HAVING rownum BETWEEN ? AND ? order by 1");         preparedStatement.setInt(1, firstIndex);         preparedStatement.setInt(2, secondIndex);         resultSet = preparedStatement.executeQuery();         while (resultSet.next()) {             News news = new News();             news.setNewsId(resultSet.getInt(AllNamesEnum.NEWS_ID.getValue()));             news.setShortText(resultSet.getString(AllNamesEnum.SHORT_TEXT.getValue()));             news.setFullText(resultSet.getString(AllNamesEnum.FULL_TEXT.getValue()));             news.setTitle(resultSet.getString(AllNamesEnum.TITLE.getValue()));             news.setCreationDate(resultSet.getDate(AllNamesEnum.CREATION_NEWS_DATE.getValue()));             news.setModificationDate(resultSet.getDate(AllNamesEnum.MODIFICATION_DATE.getValue()));             rezNewses.add(news);         }     } catch (SQLException e) {         throw new DAOException("DAOException in selectNewsForPage() method: " + e.getMessage());     } finally {         try{             closeAll(connection, preparedStatement, resultSet);            } catch(DAOException e){             throw new DAOException("DAOException at " + e.getMessage() + " in selectNewsForPage() method");         }     }     return rezNewses; }   private String filterQueryMaker(FilterForm filter) {     StringBuilder filterGuery = new StringBuilder("") ;     if(filter.getTags() == null){         filter.setTags(new ArrayList&lt;Tag&gt;());     }     String resultTags = join(filter.getTags(), "\', \'");     if(!filter.getTags().isEmpty() &amp;&amp; "".equals(filter.getAuthor().getName())){         filterGuery.append(" (SELECT * FROM NEWS INNER JOIN "                  + "(SELECT NEWS_ID AS FILTER_TAG_NEWS_ID FROM "                  + "(SELECT NEWS_TAG.NEWS_ID, TAG.TAG_NAME "                  + "from NEWS_TAG inner join TAG ON NEWS_TAG.TAG_ID = TAG.TAG_ID) "                  + "WHERE TAG_NAME IN (\'")                 .append(resultTags).append("\') "                 + "GROUP BY NEWS_ID) ON NEWS.NEWS_ID = FILTER_TAG_NEWS_ID) ");     }     if(filter.getTags().isEmpty() &amp;&amp; !"".equals(filter.getAuthor().getName())){         filterGuery.append(" (SELECT * FROM NEWS INNER JOIN "                  + "(select NEWS_ID AS FILTER_AUTHOR_NEWS_ID "                  + "from NEWS_AUTHOR where NEWS_AUTHOR.AUTHOR_ID IN "                  + "(select AUTHOR_ID from AUTHOR where AUTHOR.NAME = \'")                 .append(filter.getAuthor().getName())                 .append("\')) ON NEWS.NEWS_ID = FILTER_AUTHOR_NEWS_ID) ");     }     if(!filter.getTags().isEmpty() &amp;&amp; !"".equals(filter.getAuthor().getName())){         filterGuery.append(" (SELECT * from NEWS where NEWS_ID IN ("                  + "SELECT FILTER_AUTHOR_NEWS_ID AS FILTER_AUTHOR_AND_TAG_NEWS_ID FROM "                  + "(select NEWS_ID AS FILTER_AUTHOR_NEWS_ID "                  + "from NEWS_AUTHOR where NEWS_AUTHOR.AUTHOR_ID IN "                 + "(select AUTHOR_ID from AUTHOR where AUTHOR.NAME = \'")                 .append(filter.getAuthor().getName()).append("\')) "                  + "INNER JOIN\n"                  + "(SELECT NEWS_ID AS FILTER_TAG_NEWS_ID "                  + "FROM ( Select NEWS_TAG.NEWS_ID, TAG.TAG_NAME "                  + "from NEWS_TAG inner join TAG ON NEWS_TAG.TAG_ID = TAG.TAG_ID) "                 + "WHERE TAG_NAME IN (\'")                 .append(resultTags).append("\'))"                  + "ON FILTER_AUTHOR_NEWS_ID = FILTER_TAG_NEWS_ID)) ");     }     return filterGuery.toString(); }   private String join(List&lt;Tag&gt; tags, String conjunction) {     StringBuilder sb = new StringBuilder();     boolean first = true;     for (Tag tag : tags) {         if (first)             first = false;         else             sb.append(conjunction);         sb.append(tag.getTagName());     }     return sb.toString(); } </code></pre>  <p>Please, help me build the same DetachedCreteria Query. Because i'he confused(( As a result of these three methods have to collect one large sql query that I should be replaced by DetachedCreteria</p>