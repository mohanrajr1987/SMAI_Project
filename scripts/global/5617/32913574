<p>I am using a class that extends from JdbcDaoSupport and now I am getting an error of </p>  <pre><code>Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: 'dataSource' or 'jdbcTemplate' is required </code></pre>  <p>I really have no idea how to indicate this, so this class wont throw an exception. </p>  <p>The class looks like this:</p>  <pre><code>package org.springframework.jdbc.core.support;  import java.sql.Connection; import javax.sql.DataSource; import org.springframework.dao.support.DaoSupport; import org.springframework.jdbc.CannotGetJdbcConnectionException; import org.springframework.jdbc.core.JdbcTemplate; import org.springframework.jdbc.datasource.DataSourceUtils; import org.springframework.jdbc.support.SQLExceptionTranslator;  public abstract class JdbcDaoSupport extends DaoSupport {     private JdbcTemplate jdbcTemplate;      public JdbcDaoSupport() {     }      public final void setDataSource(DataSource dataSource) {         if(this.jdbcTemplate == null || dataSource != this.jdbcTemplate.getDataSource()) {             this.jdbcTemplate = this.createJdbcTemplate(dataSource);             this.initTemplateConfig();         }      }      protected JdbcTemplate createJdbcTemplate(DataSource dataSource) {         return new JdbcTemplate(dataSource);     }      public final DataSource getDataSource() {         return this.jdbcTemplate != null?this.jdbcTemplate.getDataSource():null;     }      public final void setJdbcTemplate(JdbcTemplate jdbcTemplate) {         this.jdbcTemplate = jdbcTemplate;         this.initTemplateConfig();     }      public final JdbcTemplate getJdbcTemplate() {         return this.jdbcTemplate;     }      protected void initTemplateConfig() {     }      protected void checkDaoConfig() {         if(this.jdbcTemplate == null) {             throw new IllegalArgumentException("\'dataSource\' or \'jdbcTemplate\' is required");         }     }      protected final SQLExceptionTranslator getExceptionTranslator() {         return this.getJdbcTemplate().getExceptionTranslator();     }      protected final Connection getConnection() throws CannotGetJdbcConnectionException {         return DataSourceUtils.getConnection(this.getDataSource());     }      protected final void releaseConnection(Connection con) {         DataSourceUtils.releaseConnection(con, this.getDataSource());     } } </code></pre>  <p>But I guess I have to include the dataSource in the class that extends of this. Any idea how to do this?</p>