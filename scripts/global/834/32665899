<p>I'm not exactly sure how to ask this question so I'll do my best, however please let me know what other information I will need to provide.</p>  <p>I'm working on an ASP.net Web API application and would like to allow multiple users to have access to their own data without changing the database schema too much.</p>  <p>My tables look a little like this:</p>  <pre><code>  public class Asset         {             public string Name { get; set; }             [Required]             public int Id { get; set; }             public string AssetTag { get; set; }             public string Serial { get; set; }             public int Model { get; set; }     }    public class Organisation     {         [Required]         public int Id { get; set; }         [Required]         public int DefaultLocation { get; set; }         public location Location { get; set; }         public string Name { get; set; }          public string Phone { get; set; }         public string Contact { get; set; }  }   public class AssetModel     {         public string Name { get; set; }         [Required]         public int Id { get; set; }         public int CategoryId { get; set; }         public int ManufacturerId { get; set; }         public string ModelNumber { get; set; } } </code></pre>  <p>*fields omitted for brevity </p>  <p>Each user should be able to create their own assets / organisations / etc, but should not have access to any other users fields.</p>  <p>I'm yet to add authorization / authentication however I'm probably going to use token based auth as outlined here:  <a href="http://bitoftech.net/2014/06/09/angularjs-token-authentication-using-asp-net-web-api-2-owin-asp-net-identity/" rel="nofollow">http://bitoftech.net/2014/06/09/angularjs-token-authentication-using-asp-net-web-api-2-owin-asp-net-identity/</a></p>  <p>Should this be as easy as tacking each users GUID onto each column and applying some logic? Or will I need to completely re-design the database?</p>  <p>Any help would be much appreciated.</p>