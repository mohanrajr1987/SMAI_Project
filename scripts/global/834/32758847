<p>So here is the problem. Imagine I have three schema modules. For example.</p>  <p><code>a.py</code>:</p>  <pre><code>from models import A  class ASchema(ModelSchema):     class Meta:         model = A      text = fields.String(required=True)     bs = fields.Nested('BSchema', many=True, dump_only=True) </code></pre>  <p><code>c.py</code>:</p>  <pre><code>from models import C  class CSchema(ModelSchema):     class Meta:         model = C      text = fields.String(required=True)     bs = fields.Nested('BSchema', many=True, dump_only=True) </code></pre>  <p><code>b.py</code>:</p>  <pre><code>from models import B  class BSchema(ModelSchema):     class Meta:         model = B      text = fields.String(required=True)     as = fields.Nested(ASchema(exclude=ASchema.Meta.model.relations_keys), many=True, dump_only=True)     cs = fields.Nested(CSchema(exclude=CSchema.Meta.model.relations_keys), many=True, dump_only=True) </code></pre>  <p>The problem is that I can't import <code>BSchema</code> into <code>a.py</code> and <code>c.py</code>, but I need to exclude relations keys there too. How can I avoid circular import in this situation?</p>  <ul> <li>I know there is an option of including everything in one module, but I keep that as a last resort.</li> </ul>