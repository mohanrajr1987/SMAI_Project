<p>I'm reading numeric data from a file in Java:</p>  <p>Data of one byte length represents an <code>unsigned byte</code> Data of two bytes length represents an <code>unsigned short</code> Data of four bytes length represents an <code>unsigned int</code></p>  <p>But because Java 7 doesn't have unsigned types, I need to use a <code>short</code>/<code>integer</code> to represent the whole range of byte values, an <code>integer</code> to represent a short value and I assume a <code>long</code> to represent an integer value.</p>  <p>But I'm having problems with representing the integer values</p>  <p>I have these three methods:</p>  <pre><code> public class Utils   {      public static int u(short n)     {         return n &amp; 0xffff;     }       public static int u(byte n)     {         return n &amp; 0xff;     }       public static long u(int n)     {         return n &amp; 0xffffffff;     } } </code></pre>  <p>and three test cases, but only the first two test cases work:</p>  <pre><code>public void testByteToUnsignedIntConversion()     {         byte maxByte = (byte)0xff;         int  maxNotConverted = maxByte;         int  maxConverted    = Utils.u(maxByte);         System.out.println(maxConverted + ":" + maxNotConverted);         assertEquals(255,maxConverted);     }      public void testShortToUnsignedIntConversion()     {         short maxShort = (short)0xffff;         int  maxNotConverted = maxShort;         int  maxConverted    = Utils.u(maxShort);         System.out.println(maxConverted + ":" + maxNotConverted);         assertEquals(65535,maxConverted);     }      public void testIntToUnsignedLongConversion()     {         int maxInt = 0xffffffff;         long  maxNotConverted = maxInt;         long  maxConverted    = Utils.u(maxInt);         System.out.println(maxConverted + ":" + maxNotConverted);         assertEquals(4294967296l,maxConverted);     } </code></pre>  <p>What am I misunderstanding?</p>