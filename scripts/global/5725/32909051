<p>I have 4 tables with with not "standart" primary key(modelname_id), a have something like id_e, id_u etc. I use self.primary_key for each model </p>  <p>first one:</p>  <pre><code># Table name: dbo.mails # #  id_e           :integer          not null, primary key #  mail           :string(50)       not null class Mail &lt; ActiveRecord::Base     self.primary_key = "id_e"      has_one :mails_union, foreign_key: "id_e"     has_one :box, through: :mails_union end </code></pre>  <p>second </p>  <pre><code>#  id_k         :integer          not null, primary key #  box_name     :string(20)       not null class Box &lt; ActiveRecord::Base     self.primary_key = "id_k"       has_one :mails_union, foreign_key: "id_k"     has_one :mails, through: :mails_union end  </code></pre>  <p>connection table:</p>  <pre><code># Table name: mails_union # #  id   :integer          not null, primary key #  id_e :integer          not null #  id_k :integer          not null #  class MailsUnion &lt; ActiveRecord::Base     self.table_name = "mails_union"      belongs_to :mails,  foreign_key: "id_e"     belongs_to :box,  foreign_key: "id_k" end </code></pre>  <p>and last one</p>  <pre><code>#  id_m                :integer          not null, primary key #  id_e                :integer          not null #  id_k                :integer          not null #  body                :string(6000) #  language            :string(3) class Ticket &lt; ActiveRecord::Base     self.primary_key = "id_m" end </code></pre>  <p>what is a best way to create relations for last model? I want to be able to call parent from instantce of ticket model.</p>  <p>if a @ticket obj has id_e != 0 I want to call mails.mail value</p>  <p>if a @ticket obj has id_k != 0 I want to call box.box_name value</p>  <p>I can create in a Ticket model poly relation</p>  <pre><code>belongs_to  :notice, polymorphic: true </code></pre>  <p>but I can't create has_many in Box and Mail models how can I do it?</p>