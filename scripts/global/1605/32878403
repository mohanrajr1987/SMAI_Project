<p>I ran below command </p>  <pre><code>MIX_ENV=prod  mix profile.fprof --no-start -e "Math.prime_seq 501" </code></pre>  <p>for the following code</p>  <pre><code>  def prime_seq(n) do     prime_seq(n, 1, 3, [2,3,5,7,11,13,17,19,23])   end    def prime_seq(n, c, p, cache) when c &lt; n do     is_it = cache |&gt; Enum.any?(fn n -&gt; rem(p, n) == 0 end)     if not is_it do       prime_seq(n, c+1, p+2, cache ++ [p])     else       if(is_prime(p)) do         prime_seq(n, c+1, p+2, cache ++ [p])       else         prime_seq(n, c, p+2, cache)       end     end   end    def prime_seq(n, c, p, _) when c == n do     p-2   end </code></pre>  <p>With result:</p>  <p><a href="http://i.stack.imgur.com/JU4ZT.png" rel="nofollow"><img src="http://i.stack.imgur.com/JU4ZT.png" alt="profile result"></a></p>  <p>Why <code>Enum.do_any?</code> is taking too much time? </p>  <p>Yes, <strong>this is a dumb algorithm</strong> to find the n-th prime number and there are better algorithms. But the point is, what makes <code>Enum.any?</code> is slower than using a specialized function to iterate through the list.</p>  <p>I believe the anom func is <code>rem(p,n)</code>, CMIIW</p>  <p><strong>Update:</strong> I removed the <code>Enum.any?</code> with mine, called <code>divisible?</code></p>  <pre><code> def divisible?(n, [h|t]) do     if rem(n, h) == 0 do       true     else       divisible?(n, t)     end   end    def divisible?(n, []) do     false   end   .....    def prime_seq(n, c, p, cache) when c &lt; n do     #is_it = cache |&gt; Enum.any?(fn n -&gt; rem(p, n) == 0 end)     is_it = divisible?(p, cache)     if not is_it do       prime_seq(n, c+1, p+2, cache ++ [p])     else       if(is_prime(p)) do         prime_seq(n, c+1, p+2, cache ++ [p])       else         prime_seq(n, c, p+2, cache)       end     end   end   ..... </code></pre>  <p>result:</p>  <p><a href="http://i.stack.imgur.com/mElEm.png" rel="nofollow"><img src="http://i.stack.imgur.com/mElEm.png" alt="faster"></a></p>  <p>So.. with a simple modification I can make it 3x faster and the iteration count is the same.</p>  <p>Note: It's a toy project while I learning elixir. Please bear with me.</p>