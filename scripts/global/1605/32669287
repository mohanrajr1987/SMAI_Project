<p>I coded a (recursive) function that took way too much time to execute. I was advised to use a "Profiler" so I created this Profiler class to check what operations take too much time.</p>  <pre><code>#pragma once  #include "Timer.h"  #include &lt;string&gt; #include &lt;iostream&gt;  class Profiler { public:     static Profiler&amp; instance() { //singleton.. sorry :P         static Profiler prof;         return prof;     }      void start(const std::string &amp;operationName="") {         _str = " ";         _str += operationName;         _timer.start();     }      void tell() {         if(!_timer.running()) {             std::cout &lt;&lt; "Profiler::tell() called when timer wasn't running.\n";             return;         }          std::cout &lt;&lt; "It took" &lt;&lt; _str &lt;&lt; " " &lt;&lt; _timer.elapsed() &lt;&lt; " ms.\n";         _timer.stop();     }  private:     Profiler() {}      Timer _timer;     std::string _str; }; </code></pre>  <p>The issue is that although my recursive function still runs slow, all the output I get is 0 ms. Am I doing anything wrong? Should I use a more professional Profiler software?</p>