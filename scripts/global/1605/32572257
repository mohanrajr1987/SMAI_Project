<p>I have a small selfhosted asp.net web api 2 application. There is no ui it's just an api endpoint. If I load test the application the cpu usage and memory usage don't increase but the response time keeps running up until requests are not longer being served. </p>  <p>For example this node application will just log errors when it reaches around 500 pending responses.</p>  <pre><code>function RunRequest() {    requestStats.requestsSent++;    var start = new Date();     request({      url: endpoint,      method: method,      headers: {        "cache-control": "private, max-age=0, no-cache"      },      body: {        email: 'test@test.com',        password: 'test'      },      json: true  }, function(error, response, body) { var delta = new Date() - start; if (error) {   var errorbody = "OH SHIT! " + JSON.stringify(body, error, 2);   requestStats.requestsFailed++;   console.log(errorbody);   fileLog.error(errorBody); } else {   console.log(response.statusCode + ' ' + response.statusMessage);   if (response.statusCode != 200) {     requestStats.requestsFailed++;      if (_.isUndefined(requestStats.errors[response.statusCode])) {       requestStats.errors[response.statusCode] = 0;     }     requestStats.errors[response.statusCode]++;      if (body) {       var errorBody = JSON.stringify(body, undefined, 2);       console.log(errorBody);       fileLog.error(errorBody);     }   } else {     requestStats.requestsSucceeded++;   } }   console.log(ComputeRequestStats(delta)); }); setTimeout(RunRequest, requestInterval); </code></pre>  <p>I also have tried profiling the application with dot trace and 99.7% of the application time is spent on the method <code>monitor.wait()</code></p>