<p>I'm building a project that stores words into a dictionary (using the library <code>dawg</code>), and when compiled with -fprof-auto, the profiler doesn't tell me that most of the time is spent in functions and CAFs from dawg modules.</p>  <p>The code (also using conduit, but it's pretty straightforward) is:</p>  <pre><code>import Data.DAWG.Static as D import qualified Data.DAWG.Dynamic as DD import Conduit import qualified Data.Conduit.Combinators as C import qualified Data.Text as T import Data.List (isSuffixOf) import Control.Monad   insertEntry dawg word =   DD.insertWith (+) (T.unpack word) 1 dawg  isWhitespace x = x `elem` [' ', '.', '\n', '\'']  appendFileToDDAWG dawg fp =   C.sourceFile fp $= C.decodeUtf8   $= C.splitOnUnboundedE isWhitespace   $$ C.foldl insertEntry dawg   loadDirToDAWG :: FilePath -&gt; IO (DAWG Char () Int) loadDirToDAWG dir = runResourceT $ do   d &lt;- C.sourceDirectoryDeep True dir        $= C.filter (".txt" `isSuffixOf`)        $$ C.foldM appendFileToDDAWG DD.empty   return $ D.freeze d  main = do d &lt;- loadDirToDAWG some_directory           mapM_ print $ D.assocs d </code></pre>  <p>Running with +RTS -p shows me most of the time is spent in insertEntry (which is normal):</p>  <pre><code>COST CENTRE          MODULE                      no.     entries  %time %alloc   %time %alloc  MAIN                 MAIN                        211           0    0.0    0.0   100.0  100.0  main                Main                        423           0    2.3    1.7    99.9  100.0   loadDirToDAWG      Mymodule.BuildDAWG          425           0    1.9    1.0    97.6   98.2    appendFileToDDAWG Mymodule.BuildDAWG          427          74    8.0    5.1    95.7   97.2     insertEntry      Mymodule.BuildDAWG          430       71366   86.5   92.1    86.5   92.1     [...] CAF                  Data.DAWG.Static            418           0    0.1    0.0     0.1    0.0 CAF                  Data.DAWG.Trans.Map         412           0    0.0    0.0     0.0    0.0 </code></pre>  <p>But it doesn't tell me that the time is actually spent inside the <code>Data.DAWG.Dynamic</code> module. Which is weird because it shows the <code>Data.DAWG.Static</code> module, so it's able to "detect" some modules from dawg but not all of them, and especially not the one where most of the work is done.</p>  <p>After downloading dawg, modifying its .cabal file so it's compiled with <code>-fprof-auto-top</code>, and rebuilding everything I get a larger profiler output that shows all inner functions of <code>Data.DAWG.Dynamic</code> and seems ok. But I don't want the full detail (I'm not profiling dawg, just my code) and I just want to be sure that the time is spent in dawg and not in my code (or else it means my code has a problem).</p>  <p>So why in the first case was the <code>Data.DAWG.Dynamic</code> module not shown? Is there something I'm missing regarding how GHC handles profiling?</p>