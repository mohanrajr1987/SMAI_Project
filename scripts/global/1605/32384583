<p>I'm new to profiling java applications and I was uncertain when I saw my small application could take up to 800MB memory twice as much as the whole operating system and around 450MB after some user interaction.</p>  <p><a href="http://i.stack.imgur.com/CAfoW.png" rel="nofollow"><img src="http://i.stack.imgur.com/CAfoW.png" alt="heap without heap limitation"></a></p>  <p>So I've red some articles about how memory allocation and gc work and it seems the JVM takes all it can get and that most times it's not necessary to have that much memory for your application to run.</p>  <p>So I tested how much I can limit the heap without crashing my application and stopped testing at -Xmx32MB.</p>  <p><a href="http://i.stack.imgur.com/RkbnJ.png" rel="nofollow"><img src="http://i.stack.imgur.com/RkbnJ.png" alt="heap limited to 32MB"></a></p>  <p>I was suprised that there was no recognizeable performance loss beside the fact the application uses nearly 30 times fewer memory.</p>  <p>So now I'm wondering...</p>  <p>(1) ... if there are any downsites of limiting the heap?</p>  <p>(2) ... if it's common the limit the heap or if it's recommandable to let the JVW decide how much memory it needs and want to use?</p>  <p>(3) ... what's the best way to find out what's the minimum memory size your application needs to run? (I'm just interested)</p>  <p>(4) ... should I experience performance losses when limiting the heap?</p>  <p>Thank you in advance!</p>