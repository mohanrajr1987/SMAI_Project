<h3>Edit:</h3>  <p>both of these seem relevant: <a href="http://stackoverflow.com/questions/3650862/how-to-efficiently-use-rprof-in-r?rq=1">How to efficiently use Rprof in R?</a> and <a href="http://stackoverflow.com/questions/27525011/kernel-matrix-computation-outside-svm-training-in-kernlab">kernel matrix computation outside SVM training in kernlab</a></p>  <p>The first of the above is a very similar question to this one, though not the same. That question refers to <code>base::Rprof</code>. This question refers to <code>profr::profr</code>.</p>  <h3>Original Question</h3>  <p>For example, my code is slower than I'd like:</p>  <pre><code>install.packages("profr") devtools::install_github("alexwhitworth/imputation")  x &lt;- matrix(rnorm(1000), 100) x[x&gt;1] &lt;- NA library(imputation) library(profr) a &lt;- profr(kNN_impute(x, k=5, q=2), interval= 0.005) plot(a) </code></pre>  <p><a href="http://i.stack.imgur.com/JxHbb.png" rel="nofollow"><img src="http://i.stack.imgur.com/JxHbb.png" alt="enter image description here"></a></p>  <p>I get slightly different plots every time that I run this code due to the stochastic nature of the profiling, but they are generally similar. But I don't know how to interpret the plots.</p>  <p>I've also tried using <code>library(lineprof)</code> following <a href="http://adv-r.had.co.nz/Profiling.html" rel="nofollow">Adv-R</a> and similarly been unable to interpret the plots.</p>  <p>Any help appreciated.</p>  <p>Also, it doesn't seem (to me at least), like the plots are at all helpful here. But the data structure itself does seem to suggest a solution:</p>  <pre><code>R&gt; head(a, 10)    level g_id t_id                f start   end n  leaf  time     source 9      1    1    1       kNN_impute 0.005 0.190 1 FALSE 0.185 imputation 10     2    1    1        var_tests 0.005 0.010 1 FALSE 0.005       &lt;NA&gt; 11     2    2    1            apply 0.010 0.190 1 FALSE 0.180       base 12     3    1    1         var.test 0.005 0.010 1 FALSE 0.005      stats 13     3    2    1              FUN 0.010 0.110 1 FALSE 0.100       &lt;NA&gt; 14     3    2    2              FUN 0.115 0.190 1 FALSE 0.075       &lt;NA&gt; 15     4    1    1 var.test.default 0.005 0.010 1 FALSE 0.005       &lt;NA&gt; 16     4    2    1           sapply 0.010 0.040 1 FALSE 0.030       base 17     4    3    1    dist_q.matrix 0.040 0.045 1 FALSE 0.005 imputation 18     4    4    1           sapply 0.045 0.075 1 FALSE 0.030       base </code></pre>