<p>I am having a gulp serve command error. I have bower components installed but when I ran gulp serve to use localhost I get this following error:</p>  <pre><code>C:\Workspace\MPitch&gt;gulp serve [14:57:00] Using gulpfile C:\Workspace\MPitch\gulpfile.js [14:57:00] Starting 'compass'... [14:57:00] Starting 'inject'... [14:57:01] gulp-inject 28 files into index.html. [14:57:01] gulp-inject Nothing to inject into index.html. [14:57:01] gulp-inject 4 files into index.html. internal/child_process.js:298     throw errnoException(err, 'spawn');     ^  Error: spawn UNKNOWN     at exports._errnoException (util.js:837:11)     at ChildProcess.spawn (internal/child_process.js:298:11)     at exports.spawn (child_process.js:339:9)     at module.exports (C:\Workspace\MPitch\node_modules\gulp-compass\lib\compass.js:149:15)     at DestroyableTransform.compile [as _flush] (C:\Workspace\MPitch\node_modules\gulp-compass\lib\index.js:60:5)     at DestroyableTransform.&lt;anonymous&gt; (C:\Workspace\MPitch\node_modules\gulp-compass\node_modules\through2\node_modules\readable-stream\lib\_stream_transform.js:135:12)     at DestroyableTransform.g (events.js:260:16)     at emitNone (events.js:72:20)     at DestroyableTransform.emit (events.js:166:7)     at finishMaybe (C:\Workspace\MPitch\node_modules\gulp-compass\node_modules\through2\node_modules\readable-stream\lib\_stream_writable.js:371:12) </code></pre>  <p>Here is the gulp file in compass folder:</p>  <pre><code>'use strict';  var gulp = require('gulp'); var $ = require('gulp-load-plugins')(); var del = require('del'); var lib = ['**/*.js', '!test/**/*', '!node_modules/**/*', '!coverage/**/*'];  function mochaStream() {   return gulp.src('test/*_test.js', {read: false})     .pipe($.mocha({       reporter: 'spec'     })); }  gulp.task('coverage', ['clean'], function() {   return gulp.src(lib)     .pipe($.istanbul())     .pipe($.istanbul.hookRequire()); });  gulp.task('jscs', function() {   return gulp.src(lib)     .pipe($.jscs()); });  gulp.task('jshint', function() {   return gulp.src(lib)     .pipe($.jshint())     .pipe($.jshint.reporter('jshint-reporter-jscs'))     .pipe($.jshint.reporter('fail')); });  gulp.task('mocha', ['coverage'], function() {   return mochaStream()     .pipe($.istanbul.writeReports()); });  gulp.task('mocha:nocov', function() {   return mochaStream(); });  gulp.task('clean', del.bind(null, ['test/css', 'coverage/**/*']));  gulp.task('default', ['mocha', 'jshint']); </code></pre>  <p>Here is the compass .js file:</p>  <pre><code>'use strict';  var PLUGIN_NAME = 'gulp-compass'; var path = require('path'); var spawn = require('child_process').spawn; var gutil = require('gulp-util'); var path = require('path'); var helpers = require('./helpers'); var defaults = {   style: false,   comments: false,   relative: true,   css: 'css',   sass: 'sass',   image: false,   generated_images_path: false,   http_path: false,   javascript: false,   font: false,   import_path: false,   config_file: false,   require: false,   logging: true,   load_all: false,   project: process.cwd(),   bundle_exec: false,   debug: false,   time: false,   sourcemap: false,   boring: false,   force: false,   task: 'compile' };  module.exports = function(files, opts, callback) {   if ('string' === typeof files) {     files = [files];   }    opts = opts || {};    var filePaths = [],       pathsToCss = [];    for (var key in defaults) {     if (opts[key] === undefined) {       opts[key] = defaults[key];     }   }    files.forEach(function(file) {     file = file.replace(/\\/g, '/');     var relPathToSass = path.relative(path.resolve(opts.project, opts.sass), file);     pathsToCss.push(path.resolve(opts.project, opts.css, gutil.replaceExtension(relPathToSass, '.css')));     filePaths.push(file);   });    var compassExecutable = 'compass';    // check command exist   if (opts.bundle_exec) {     compassExecutable = helpers.command('bundle', callback);   } else {     compassExecutable = helpers.command(compassExecutable, callback);   }    if (!compassExecutable) {     return false;   }    var options = [];   if (opts.bundle_exec) {     options.push('exec', 'compass');   }    options.push(opts.task);   if (process.platform === 'win32') {     options.push(opts.project.replace(/\\/g, '/'));   } else {     options.push(opts.project);   }    if (opts.task !== 'watch') {     filePaths.forEach(function(file) {       options.push(file);     });   }    // set compass setting   if (opts.environment) { options.push('--environment', opts.environment); }    if (opts.config_file) { options.push('-c', opts.config_file); }    if (!opts.comments) { options.push('--no-line-comments'); }    if (opts.relative) { options.push('--relative-assets'); }    if (opts.debug) { options.push('--debug-info'); }    if (opts.time) { options.push('--time'); }    if (opts.boring) { options.push('--boring'); }    if (opts.sourcemap) { options.push('--sourcemap'); }    if (opts.font) { options.push('--fonts-dir', opts.font); }    if (opts.style) { options.push('--output-style', opts.style); }    if (opts.image) { options.push('--images-dir', opts.image); }    if (opts.generated_images_path) { options.push('--generated-images-path', opts.generated_images_path); }    if (opts.http_path) { options.push('--http-path', opts.http_path); }    if (opts.javascript) { options.push('--javascripts-dir', opts.javascript); }    if (opts.force) { options.push('--force'); }    options.push('--css-dir', path.normalize(opts.css));   options.push('--sass-dir', path.normalize(opts.sass));    if (opts.import_path) {     if (helpers.isArray(opts.import_path)) {       opts.import_path.forEach(function(i) {         options.push('-I', i);       });     } else {       options.push('-I', opts.import_path);     }   }    if (opts.load_all) { options.push('--load-all', opts.load_all); }    if (opts.require) {     if (helpers.isArray(opts.require)) {       opts.require.forEach(function(f) {         options.push('--require', f);       });     } else {       options.push('--require', opts.require);     }   }    if (opts.debug) {     gutil.log(PLUGIN_NAME + ':', 'Running command:', compassExecutable, options.join(' '));   }    var child = spawn(compassExecutable, options, {cwd: opts.project || process.cwd()});   var stdout = '';   var stderr = '';    if (opts.logging) {     child.stdout.setEncoding('utf8');     child.stdout.on('data', function(data) {       stdout += data;       console.log(data);     });      child.stderr.setEncoding('utf8');     child.stderr.on('data', function(data) {       stderr += data;       if (!data.match(/^\u001b\[\d+m$/)) {         gutil.log(data);       }     });   }    // support callback   child.on('close', function(code) {     if (callback) {       callback(code, stdout, stderr, pathsToCss, opts);     }   }); }; </code></pre>