<p>I have created two Java programs, a server and a client which can communicate with each other, if they're executed on the same PC.</p>  <p>Server:</p>  <pre><code>import java.io.BufferedReader; import java.io.IOException;     import java.io.InputStream; import java.io.InputStreamReader; import java.io.OutputStream; import java.io.PrintWriter; import java.net.ServerSocket; import java.net.Socket; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors;  public class Server {   public static void main(String[] args) {      ExecutorService executor = Executors.newFixedThreadPool(30);       ServerSocket server;      try {          server = new ServerSocket(5555);         System.out.println("Server gestartet!");           while(true){               try {                  Socket client = server.accept();                  //Thread t = new Thread(new Handler(client));                 //t.start();                  executor.execute(new Handler(client));               } catch (IOException e) {             // TODO Auto-generated catch block             e.printStackTrace();             }           }     } catch (IOException e1) {         // TODO Auto-generated catch block         e1.printStackTrace();     } }  } </code></pre>  <p>Handler (Server creates each time an instance when a new client joins):</p>  <pre><code>import java.io.BufferedReader; import java.io.InputStream; import java.io.InputStreamReader; import java.io.OutputStream; import java.io.PrintWriter; import java.net.Socket;  public class Handler implements Runnable {  private Socket client;  public Handler(Socket client) {     this.client = client; }  @Override public void run() {     try{         //Streams         OutputStream out = client.getOutputStream();         PrintWriter writer = new PrintWriter(out);          InputStream in = client.getInputStream();         BufferedReader reader = new BufferedReader(new InputStreamReader(in));         // ------------------------------          String s = null;          while((s = reader.readLine()) != null){              writer.write(s + "\n");             writer.flush();             System.out.println("Empfangen vom Client: " + s);          }          writer.close();         reader.close();         client.close();      }catch(Exception e){} } } </code></pre>  <p>Client: </p>  <pre><code>import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.OutputStream; import java.io.PrintWriter; import java.net.Socket; import java.net.UnknownHostException; import java.util.Scanner;  public class Client {  public static void main(String[] args) {     try {         Socket client = new Socket("localhost", 5555);         System.out.println("Client gestartet!");          //Streams         OutputStream out = client.getOutputStream();         PrintWriter writer = new PrintWriter(out);          InputStream in = client.getInputStream();         BufferedReader reader = new BufferedReader(new InputStreamReader(in));         // ------------------------------          writer.write("Hallo Server!\n");         writer.flush();           String s = null;          while((s = reader.readLine()) != null){             System.out.println("Empfangen vom Server: " + s);         }          reader.close();         writer.close();      } catch (UnknownHostException e) {         // TODO Auto-generated catch block         e.printStackTrace();     } catch (IOException e) {         // TODO Auto-generated catch block         e.printStackTrace();     } } } </code></pre>  <p>My question now is:  How can make a server on my computer which can be accessed via Internet? My first thougt was to change something in the constructor of the client socket            </p>  <pre><code>Socket client = new Socket("localhost", 5555); </code></pre>  <p>"localhost" probably means that the server runs on the same PC as the client.</p>  <p>My goal would be to have an app on my smartphone which connects via Internet to my server which runs on my PC. It should send back my message I entered.</p>