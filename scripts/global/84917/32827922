<p>I'm writing <em>Huffman coding</em> and everything was OK, until I tried to save the result into the archived file. Our teacher offered us to do it with such function (it takes each time a bit and after taking 8 of them should output a byte):</p>  <pre><code>long buff=0; int counter=0; std::ofstream out("output", std::iostream::binary);  void putbit(bool b) {     buff&lt;&lt;=1;     if (b) buff++;     counter++;     if (counter&gt;=8)     {         out.put(buff);          counter=0;         buff=0;         } } </code></pre>  <p>I tried an example with inputting sequence of bits like this:</p>  <pre><code>0011001011001101111010010001000001010101101100 </code></pre>  <p>but the output file in binary mode includes just: <code>1111111</code></p>  <p>As <code>buff</code> variable has the correct numbers (<code>25 102 250 68 21 108</code>) I suggested that I wrote the code in my notebook incorrectly and something is wrong with this line:</p>  <pre><code>out.put(buff); </code></pre>  <p>I tried to remove it with this line:</p>  <pre><code>out &lt;&lt; buff; </code></pre>  <p>but got: <code>1111111111111111</code> Another way was:</p>  <pre><code>out.write((char *) &amp;buff, 8); </code></pre>  <p>which gives:</p>  <pre><code>100000001000000010000000100000001000000010000000 </code></pre>  <p>It look like the closest to the correct answer, but still doesn't work correctly.</p>  <p>Maybe I don't understand something about file output.</p>  <h2>Question:</h2>  <p>Could you explain me how to make it work and why previous variants are wrong?</p>  <p>UPD: The input comes from this function:</p>  <pre><code>void code(std::vector&lt;bool&gt; cur, std::vector&lt;bool&gt; sh, std::vector&lt;bool&gt;* codes, Node* r) {     if (r-&gt;l)     {         cur.push_back(0);         if (r-&gt;l-&gt;symb)         {             putbit(0);             codes[(int)r-&gt;l-&gt;symb] = cur;              for (int i=7; i&gt;=0; i--)             {                 if ((int)r-&gt;l-&gt;symb &amp; (1 &lt;&lt; i))                 putbit(1);                 else putbit(0);             }         }         else         {         putbit(0);         code(cur, sh, codes, r-&gt;l);         }         cur.pop_back();     }     if (r-&gt;r)     {         cur.push_back(1);         if (r-&gt;r-&gt;symb)         {             putbit(1);             codes[(int)r-&gt;r-&gt;symb] = cur;              for (int i=7; i&gt;=0; i--)             {                 if ((int)r-&gt;r-&gt;symb &amp; (1 &lt;&lt; i))                 putbit(1);                 else putbit(0);             }         }         else         {         putbit(1);         code(cur, sh, codes, r-&gt;r);         }         cur.pop_back();     } } </code></pre>