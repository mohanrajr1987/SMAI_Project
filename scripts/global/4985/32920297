<p>before i have image like this [![enter image description here][1]][1]</p>  <p>and after image compress it will become like this [![enter image description here][2]][2]</p>  <p>i am using c# but i am faceing this problem please give me a better solutuion thinks in advance </p>  <pre><code>enter code here  public class ImageCompress {     #region[PrivateData]     private static volatile ImageCompress imageCompress;     private Bitmap bitmap;     private int width;     private int height;     private Image img;     #endregion[Privatedata]      #region[Constructor]     /// &lt;summary&gt;     /// It is used to restrict to create the instance of the      ImageCompress     /// &lt;/summary&gt;     private ImageCompress()     {     }     #endregion[Constructor]      #region[Poperties]     /// &lt;summary&gt;     /// Gets ImageCompress object     /// &lt;/summary&gt;     public static ImageCompress GetImageCompressObject     {         get         {             if (imageCompress == null)             {                 imageCompress = new ImageCompress();             }             return imageCompress;         }     }      /// &lt;summary&gt;     /// Gets or sets Width     /// &lt;/summary&gt;     public int Height     {         get { return height; }         set { height = value; }     }      /// &lt;summary&gt;     /// Gets or sets Width     /// &lt;/summary&gt;     public int Width     {         get { return width; }         set { width = value; }     }      /// &lt;summary&gt;     /// Gets or sets Image     /// &lt;/summary&gt;     public Bitmap GetImage     {         get { return bitmap; }         set { bitmap = value; }     }     #endregion[Poperties]      #region[PublicFunction]     /// &lt;summary&gt;     /// This function is used to save the image     /// &lt;/summary&gt;     /// &lt;param name="fileName"&gt;&lt;/param&gt;     /// &lt;param name="path"&gt;&lt;/param&gt;     public void Save(string fileName, string path)     {         if (ISValidFileType(fileName))         {             string pathaname = path + @"\" + fileName;             save(pathaname, 60);         }     }     #endregion[PublicFunction]      #region[PrivateData]     /// &lt;summary&gt;     /// This function is use to compress the image to     /// predefine size     /// &lt;/summary&gt;     /// &lt;returns&gt;return bitmap in compress size&lt;/returns&gt;     private Image CompressImage()     {         if (GetImage != null)         {             Width = (Width == 0) ? GetImage.Width : Width;             Height = (Height == 0) ? GetImage.Height : Height;             Bitmap newBitmap = new Bitmap(Width, Height, PixelFormat.Format24bppRgb);             newBitmap = bitmap;             newBitmap.SetResolution(150, 150);             return newBitmap.GetThumbnailImage(Width, Height, null, IntPtr.Zero);         }         else         {             throw new Exception("Please provide bitmap");         }     }      /// &lt;summary&gt;     /// This function is used to check the file Type     /// &lt;/summary&gt;     /// &lt;param name="fileName"&gt;String data type:contain the file name&lt;/param&gt;     /// &lt;returns&gt;true or false on the file extention&lt;/returns&gt;     private bool ISValidFileType(string fileName)     {         bool isValidExt = false;         string fileExt = Path.GetExtension(fileName);         switch (fileExt.ToLower())         {             case CommonConstant.JPEG:             case CommonConstant.BTM:             case CommonConstant.JPG:             case CommonConstant.PNG:                 isValidExt = true;                 break;         }         return isValidExt;     }      /// &lt;summary&gt;     /// This function is used to get the imageCode info     /// on the basis of mimeType     /// &lt;/summary&gt;     /// &lt;param name="mimeType"&gt;string data type&lt;/param&gt;     /// &lt;returns&gt;ImageCodecInfo data type&lt;/returns&gt;     private ImageCodecInfo GetImageCoeInfo(string mimeType)     {         ImageCodecInfo[] codes = ImageCodecInfo.GetImageEncoders();         for (int i = 0; i &lt; codes.Length; i++)         {             if (codes[i].MimeType == mimeType)             {                 return codes[i];             }         }         return null;     }      /// &lt;summary&gt;     /// this function is used to save the image into a     /// given path     /// &lt;/summary&gt;     /// &lt;param name="path"&gt;string data type&lt;/param&gt;     /// &lt;param name="quality"&gt;int data type&lt;/param&gt;     private void save(string path, int quality)     {         img = CompressImage();         ////Setting the quality of the picture         EncoderParameter qualityParam =             new EncoderParameter(System.Drawing.Imaging.Encoder.Quality, quality);         ////Seting the format to save         ImageCodecInfo imageCodec = GetImageCoeInfo("image/jpeg");         ////Used to contain the poarameters of the quality         EncoderParameters parameters = new EncoderParameters(1);         parameters.Param[0] = qualityParam;         ////Used to save the image to a  given path         img.Save(path, imageCodec, param`enter code here`eters);     }     #endregion[PrivateData] </code></pre>