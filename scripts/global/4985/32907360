<p>I have a picture like the one below. The black square is the main window, the red one is a JLabel where I have an image . I want to crop the image without incurring exceptions like "y + height exception..." or things like that.I mean , in this moment I got that exception when I start to select the picture (with the rectangle) and then I go outside the picture. If I begin to select the image with the rectangle within the image , and I end outside it , even on the one hand , I got an exception . It also have to work if I resize the window, in my opinion the rectangle don't have to go out from the image, but How?   What is the best approach to take ? I do not type the code at the moment because I want to understand what is the best way .</p>  <p><a href="http://i.stack.imgur.com/RIw68.png" rel="nofollow"><img src="http://i.stack.imgur.com/RIw68.png" alt="enter image description here"></a></p>  <p>UPDATE: here the code of all project. </p>  <pre><code>public class MainWindow extends Application {      // per la custom search     final private static String GOOGLE_SEARCH_URL = "https://www.googleapis.com/customsearch/v1?";      // api key     final private static String API_KEY = "key";      // custom search engine ID     final private static String SEARCH_ENGINE_ID = "id";      final private static String search_Type = "image";      final private static String FINAL_URL = GOOGLE_SEARCH_URL + "key=" + API_KEY + "&amp;cx=" + SEARCH_ENGINE_ID             + "&amp;searchType=" + search_Type;      static JFrame finestradiRicerca;     static JFrame finestra; //  static JButton carica;     static JFileChooser fc;     static JTextArea log;     static private final String newline = "\n";     // Seconda Finestra     public static void NuovaFinestra(JPanel panel) {         panel.setLayout((new FlowLayout(FlowLayout.CENTER)));          JButton Ricerca = new JButton("Ricerca");         Ricerca.setFont(new Font("Arial", Font.PLAIN, 30));         Ricerca.setBounds(0, 0, 200, 50);          // Carica Immagini dal pc          JPanel caricapan = new JPanel ();         caricapan.setLayout(new FlowLayout(FlowLayout.CENTER));          JButton carica = new JButton("Carica");         carica.setFont(new Font("Arial", Font.PLAIN, 30));         carica.setBounds(0, 200, 200, 50);            //caricapan.add(carica);         panel.add(Ricerca);          panel.add(carica);     //Listener pulsante di Ricerca         Ricerca.addActionListener(new ActionListener() {             public void actionPerformed(ActionEvent e) {                  finestradiRicerca = new JFrame("Finestra di Ricerca");                  finestradiRicerca.setBounds(350, 200, 500, 500);                 // FinestradiRicerca.setSize(500, 500);                 finestradiRicerca.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);                  JPanel riquadroRicerca = new JPanel();                 JTextField Testo;                 JLabel myLabel = new JLabel("Inserisci il testo da ricercare");                 Testo = new JTextField();                 Testo.setColumns(20);                 JButton Cerca = new JButton("Cerca");                 Cerca.setFont(new Font("Arial", Font.PLAIN, 16));                 riquadroRicerca.add(myLabel);                 riquadroRicerca.add(Testo);                 riquadroRicerca.add(Cerca);                  finestradiRicerca.add(riquadroRicerca);                 finestradiRicerca.setVisible(true);                    final JFXPanel jfxPanel = new JFXPanel();                 jfxPanel.setBounds(30, 30, finestradiRicerca.getWidth(), finestradiRicerca.getHeight() - 30);                 finestradiRicerca.add(jfxPanel);                  Cerca.addActionListener(new ActionListener() {                     public void actionPerformed(ActionEvent e) {                         // Google search client                           MainWindow gsc = new MainWindow();                         String searchKeyWord = Testo.getText();                          ArrayList&lt;String&gt; result = gsc.getSearchResult(searchKeyWord);                          Platform.runLater(new Runnable() {                             @Override                             public void run() {                                 initFx(jfxPanel, result);                             }                         });                         ////////////                         finestradiRicerca.setSize(1500,1000);                         ////////////                     }                 });                 finestradiRicerca.addWindowListener(new WindowListener() {                      @Override                     public void windowOpened(WindowEvent arg0) {                      }                      @Override                     public void windowIconified(WindowEvent arg0) {                         // TODO Auto-generated method stub                      }                      @Override                     public void windowDeiconified(WindowEvent arg0) {                         // TODO Auto-generated method stub                      }                      @Override                     public void windowDeactivated(WindowEvent arg0) {                         // TODO Auto-generated method stub                      }                      @Override                     public void windowClosing(WindowEvent arg0) {                         if (browser != null) {                             //System.out.println("RESULT vale " + browser.getResult());                             String url = browser.getResult();                              if (!url.equalsIgnoreCase("")) {                                 try {                                     VisImmagine(finestra, url);                                 } catch (Throwable e) {                                     // TODO Auto-generated catch block                                     e.printStackTrace();                                 }                                  finestra.setVisible(true); //                              new SelectionRectangle(finestra);                             }                          } else                             System.out.println("NO RESULT ");                      }                      @Override                     public void windowClosed(WindowEvent arg0) {                         // TODO Auto-generated method stub                      }                      @Override                     public void windowActivated(WindowEvent arg0) {                         // TODO Auto-generated method stub                      }                 });             }         });         // Acquisisco le dimensioni massime dello schermo e le personalizzo per impostare la dimensione massima per visualizza un'immagine         Dimension screensize = Toolkit.getDefaultToolkit().getScreenSize();         double maxscreenwidth = screensize.getWidth();         double maxscreenheight = screensize.getHeight();         double maxscreenwidthcustom = maxscreenwidth-150;         double maxscreenheightcustom = maxscreenheight-150;         /////            // listener bottone carica immagini         carica.addActionListener(new ActionListener() {              public void actionPerformed(ActionEvent e) {                    JFileChooser fileChooser = new JFileChooser();  // nuovo oggetto file chooser                    int returnValue = fileChooser.showOpenDialog(finestra);                   if (returnValue == JFileChooser.APPROVE_OPTION) {                        FileNameExtensionFilter filtroimmagini = new FileNameExtensionFilter(                               "Immagini jpg ,gif, bmp", "jpg", "gif", "bmp");                        fileChooser.setFileFilter(filtroimmagini);                      File selectedFile = fileChooser.getSelectedFile();                     BufferedImage buff = null;                      try {                         buff =ImageIO.read(selectedFile);                     } catch (IOException e2) {                         // TODO Auto-generated catch block                         e2.printStackTrace();                     }                      if (buff != null)                                {                              if (buff.getWidth()&lt;=maxscreenheightcustom  &amp;&amp; buff.getHeight()&lt;=maxscreenwidthcustom ) {                            try {                             VisImmagineDaPc(finestra,buff);                         } catch (Throwable e1) {                             // TODO Auto-generated catch block                             e1.printStackTrace();                         }                      }                             else if (buff.getWidth()&gt;maxscreenheightcustom  || buff.getHeight()&gt;maxscreenwidthcustom ) {                                      int w = (int) buff.getWidth();                                 int h = (int) buff.getHeight();                                 Double ridimensionamento = 0.4;                                 Double wrid= w*ridimensionamento;                                 Double hrid= h*ridimensionamento;                                          BufferedImage newImage = new BufferedImage(800 , 538, BufferedImage.TYPE_INT_RGB);                                      Graphics g = newImage.createGraphics();                                     g.drawImage(buff, 0, 0, 800,538 , null);                                     g.dispose();                                     try {                                         VisImmagineDaPc(finestra, newImage);                                         System.out.printf(" Larghezza %d Altezza %d \n",newImage.getWidth(),newImage.getHeight());                                     } catch (Throwable e1) {                                         // TODO Auto-generated catch block                                         e1.printStackTrace();                                     }                                       }                              }                  }             }         }); //////////////////////     }      static MyBrowser browser;     static Image image;     static JLabel label;         private static double getWidth() {         // TODO Auto-generated method stub         return 0;     }      // Main     public static void main(String[] args) throws Throwable {          // Finestra Principale         finestra = new JFrame("Finestra principale");         finestra.setBounds(350, 200, 500, 500); //      finestra.setSize(500, 500);         finestra.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         // JPanel della finestra principale         JPanel riquadro = new JPanel();          finestra.add(riquadro);         finestra.setVisible(true);         NuovaFinestra(riquadro);        }        public static void VisImmagine(JFrame frame, String Indirizzo) throws Throwable  {           image = null;         try {             URL url = new URL(Indirizzo);             image = ImageIO.read(url);             } catch (IOException e) {         }          label = new JLabel(new ImageIcon(image));         frame.getContentPane().add(label, BorderLayout.AFTER_LAST_LINE);         // frame.setSize(10, 10);         int larghezza = frame.getWidth();         int altezza = frame.getHeight();          frame.setSize(larghezza, altezza); // creo posto per il bottone "modifica"         frame.setResizable(false);         frame.setVisible(true);          //listener sulla label che ospita l'immagine per aprire "l'editor" con il doppio click del mouse         label.addMouseListener(new MouseAdapter() {             public void mouseClicked(MouseEvent e) {                if (e.getClickCount() == 2) {                    JFrame edit = new JFrame();                  TestPane imgPane = new TestPane((BufferedImage) image, edit);                  edit.add(imgPane);                    edit.setSize(((BufferedImage) image).getWidth()+30, ((BufferedImage) image).getHeight() +100);                    edit.setVisible(true);                      edit.addWindowListener(new WindowListener() {                          @Override                         public void windowOpened(WindowEvent arg0) {                          }                          @Override                         public void windowIconified(WindowEvent arg0) {                             // TODO Auto-generated method stub                          }                          @Override                         public void windowDeiconified(WindowEvent arg0) {                             // TODO Auto-generated method stub                          }                          @Override                         public void windowDeactivated(WindowEvent arg0) {                             // TODO Auto-generated method stub                          }                          @Override                         public void windowClosing(WindowEvent arg0) {                              BufferedImage im = imgPane.getSubImage();                             if(im!=null){                             label.setIcon(new ImageIcon(imgPane.getSubImage()));                             label.validate();                                }                          }                          @Override                         public void windowClosed(WindowEvent arg0) {                          }                          @Override                         public void windowActivated(WindowEvent arg0) {                             // TODO Auto-generated method stub                          }                     });   //                  SelectionRectangle rettangolo = new SelectionRectangle();    //                  finestra.setVisible(false);                 }             }          });         }      public static  void VisImmagineDaPc(JFrame frame, BufferedImage image) throws Throwable      {              label = new JLabel(new ImageIcon(image));             frame.getContentPane().add(label, BorderLayout.AFTER_LAST_LINE);             // frame.setSize(10, 10);             int larghezza = frame.getWidth();             int altezza = frame.getHeight();              frame.setSize(larghezza+250, altezza); // creo posto per il bottone "modifica"             frame.setResizable(false);               frame.setVisible(true);            // listener sulla label che ospita l'immagine per aprire "l'editor" con         // il doppio click del mouse         label.addMouseListener(new MouseAdapter() {             public void mouseClicked(MouseEvent e) {                 if (e.getClickCount() == 2) {                      JFrame edit = new JFrame();                     TestPane imgPane = new TestPane((BufferedImage) image, edit);                     edit.add(imgPane);                     edit.setSize(((BufferedImage) image).getWidth() + 30, ((BufferedImage) image).getHeight() + 100);                     edit.setVisible(true);                     edit.addWindowListener(new WindowListener() {                          @Override                         public void windowOpened(WindowEvent arg0) {                          }                          @Override                         public void windowIconified(WindowEvent arg0) {                             // TODO Auto-generated method stub                          }                          @Override                         public void windowDeiconified(WindowEvent arg0) {                             // TODO Auto-generated method stub                          }                          @Override                         public void windowDeactivated(WindowEvent arg0) {                             // TODO Auto-generated method stub                          }                           @Override                         public void windowClosing(WindowEvent arg0) {                              BufferedImage im = imgPane.getSubImage();                             if (im != null) {                                 label.setIcon(new ImageIcon(imgPane.getSubImage()));                             label.setSize(10, 10);                                 label.validate();                             }                          }                          @Override                         public void windowClosed(WindowEvent arg0) {                          }                          @Override                         public void windowActivated(WindowEvent arg0) {                             // TODO Auto-generated method stub                          }                     });                   }             }         });            }      } </code></pre>  <p>ImagePane.java</p>  <pre><code>import java.awt.Color; import java.awt.Dimension; import java.awt.Graphics; import java.awt.Graphics2D; import java.awt.Point; import java.awt.Rectangle; import java.awt.event.MouseAdapter; import java.awt.event.MouseEvent; import java.awt.image.BufferedImage;  import javax.swing.JPanel; import javax.swing.UIManager;  public class ImagePane extends JPanel {              private BufferedImage background;             private Rectangle selection;              public ImagePane(BufferedImage img) {                 background = img;                 MouseAdapter ma = new MouseAdapter() {                      private Point clickPoint;                      @Override                     public void mousePressed(MouseEvent e) {                         clickPoint = e.getPoint();                         int x = clickPoint.x;                         int y = clickPoint.y;                         int widthwindow = MainWindow.label.getWidth();                         int heightwindow = MainWindow.label.getHeight();                         System.out.printf("\n x vale %d y %dwidth %d height %d (della label)", x,y,  widthwindow, heightwindow);                       }                      @Override                     public void mouseDragged(MouseEvent e) {                         Point dragPoint = e.getPoint();                          int x = Math.min(clickPoint.x, dragPoint.x);                         int y = Math.min(clickPoint.y, dragPoint.y);                         int width = Math.abs(clickPoint.x - dragPoint.x)+20;                         int height = Math.abs(clickPoint.y - dragPoint.y);  //                      System.out.printf("\n x = %d y=%d width=%d height=%d", x,y,width,height);                          selection = new Rectangle(x, y, width, height);                          repaint();                      }                  };                  addMouseListener(ma);                 addMouseMotionListener(ma);             }  //          public void clearSelection() { //              selection = null; //              repaint(); //          }              public BufferedImage getSubImage() {                  BufferedImage img = null;                   if (selection != null) {                       img = background.getSubimage(selection.x, selection.y, selection.width, selection.height);                  }                 return img;              }              @Override             public Dimension getPreferredSize() {                 return new Dimension(background.getWidth(), background.getHeight());             }              @Override             protected void paintComponent(Graphics g) {                 super.paintComponent(g);                 Graphics2D g2d = (Graphics2D) g.create();                 int x = (getWidth() - background.getWidth()) / 2;                 int y = (getHeight() - background.getHeight()) / 2;                 g2d.drawImage(background, x, y, this);                 if (selection != null) {                     Color stroke = UIManager.getColor("List.selectionBackground");                     Color fill = new Color(stroke.getRed(), stroke.getGreen(), stroke.getBlue(), 128);                     g2d.setColor(fill);                     g2d.fill(selection);                     g2d.setColor(stroke);                     g2d.draw(selection);                 }                 g2d.dispose();             } } </code></pre>  <p>And the last one TestPane.java:</p>  <pre><code>import java.awt.BorderLayout; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.awt.event.WindowEvent; import java.awt.image.BufferedImage;  import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.JScrollPane;  public class TestPane extends JPanel {      JFrame parent;     private BufferedImage master;     ImagePane imagePane;      public TestPane(BufferedImage image, JFrame p) {         parent = p;         this.master = null;         setLayout(new BorderLayout());          imagePane = new ImagePane(image);         add(new JScrollPane(imagePane));            JButton btnSave = new JButton("Salva");         add(btnSave, BorderLayout.AFTER_LAST_LINE);          btnSave.addActionListener(new ActionListener() {             @Override             public void actionPerformed(ActionEvent e) { //                try { //                    BufferedImage img = imagePane.getSubImage(); //                     //                    master = append(master, img); //                    File save = new File("immagine6.png"); //                    ImageIO.write(master, "png", save); //                    imagePane.clearSelection(); //                    JOptionPane.showMessageDialog(TestPane.this, save.getName() + " è stata salvata", "Saved", JOptionPane.INFORMATION_MESSAGE); //                } catch (IOException ex) { //                    ex.printStackTrace(); //                    JOptionPane.showMessageDialog(TestPane.this, "Failed to save capture", "Error", JOptionPane.ERROR_MESSAGE); //                }                 master = imagePane.getSubImage();               parent.dispatchEvent(new WindowEvent(parent, WindowEvent.WINDOW_CLOSING));              }             });      }      public BufferedImage getSubImage()     {       return master;     }  } </code></pre>