<p>Im doing a performance comparison between executing multiple subsequent transformations on collections in Scala that are <em>strict</em> (eagerly performed evaluation), and <em>non-strict</em> (lazily performed evaluation).</p>  <pre><code>def time[R](block: =&gt; R): R = {     val t0 = System.nanoTime()     val result = block // call-by-name     val t1 = System.nanoTime()     println("Elapsed time: " + (t1 - t0)/1e9 + "s")     result }  /* A view on a collection makes all transformations lazy, which makes it    possible to combine multiple transformations into one. */  // The non-lazy (eager) version: time {     (1 to 1e7.toInt).map(_ + 2).map(x =&gt; {         if(x % 2 != 0) -x else x     }).sum }  // The lazy version using a view: time {     (1 to 1e7.toInt).view.map(_ + 2).map(x =&gt; {         if(x % 2 != 0) -x else x     }).force.sum } </code></pre>  <p>On my laptop, the <em>first run</em> of the eager version is slower than the lazy version. See timings below.</p>  <blockquote>   <p>Eager version: 2.4 s</p>      <p>Lazy verion: 0.7 s</p> </blockquote>  <p>However, starting from the <em>second run</em>, both of them take about <strong>0.7 seconds</strong>. Why?</p>  <h3>Runtime environment:</h3>  <ul> <li>Scala 2.11.7</li> <li>Java 1.8 </li> <li>OS X 10.10</li> </ul>