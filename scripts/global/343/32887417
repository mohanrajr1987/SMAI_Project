<p>I need to randomly pick a non-prime number below a given maximum, and return all its factors.</p>  <p>I already have all the non-primes and their factors stored in a <code>Map&lt;Integer, Integer[]&gt;</code> that is calculated once on startup.</p>  <p>Here's an idea of the implementation:</p>  <pre><code>public Pair&lt;Integer, Integer[]&gt; getNonPrimeAndFactors(int maximum) {     //Randomly select a non-prime less than maximum     return new Pair&lt;Integer, Integer[]&gt;(nonPrime, factors.get(nonPrime)); } </code></pre>  <p>I'm not really sure what data structure to use in order to pick a key in that <code>Map</code> randomly whilst still being less than <code>maximum</code>. Picking a random number less than maximum, then iterating down calling <code>factors.hasKey(randomNumber--)</code> would be a bit crap.</p>  <p>I'm using Java 7 and Guava, so have Google's collections to pick from.</p>