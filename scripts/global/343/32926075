<p>I didn't think I would have as much trouble since I've done this with a brute force method with regular arrays. I'm trying to use Collections.frequency to group together repeated entries from a user and display the number of times each entry occurs (if more than once); however, the output just prints as they are entered. I have two classes, which I will show below: </p>  <pre><code>    public class Flower {  private String name; private String color; private String smell; private String hasThorns;  public Flower(String name, String color, String smell, String hasThorns) {     this.name = name;     this.color = color;     this.smell = smell;     this.hasThorns = hasThorns; } public void setName(String name) {     this.name = name; } public void setColor(String color) {     this.color = color; } public void setSmell(String smell) {     this.smell = smell; } public void setThorns(String hasThorns) {     this.hasThorns = hasThorns; } public String getName() {     return name; } public String getColor() {     return color; } public String getSmell() {     return smell; } public String getThorns() {     return hasThorns; } public String toString() {     return "Name: " + this.name + ", Color: " + this.color + ", Scent? " + this.smell + ", Thorns? " + this.hasThorns; } }//end Flower class        import java.util.*;  public class Assignment3 { String name = new String(); String color = new String(); String smell = new String(); String hasThorns = new String();  //ArrayList&lt;Flower&gt; flowerPack = new ArrayList&lt;Flower&gt;(); boolean found = false; public static void main(String[] args) {     new Assignment3(); }  // This will act as our program switchboard public Assignment3() {     Scanner input = new Scanner(System.in);     ArrayList&lt;Flower&gt; flowerPack = new ArrayList&lt;Flower&gt;();      System.out.println("Welcome to my flower pack interface.");     System.out.println("Please select a number from the options below");     System.out.println("");      while (true) {         // Give the user a list of their options         System.out.println("1: Add an item to the pack.");         System.out.println("2: Remove an item from the pack.");         System.out.println("3: Search for a flower.");         System.out.println("4: Display the flowers in the pack.");         System.out.println("5: Filter flower pack by incomplete name");         System.out.println("0: Exit the flower pack interface.");          // Get the user input         int userChoice = input.nextInt();          switch (userChoice) {             case 1:                 addFlower(flowerPack);                 break;             case 2:                 removeFlower(flowerPack);                 break;             case 3:                 searchFlowers(flowerPack);                 break;             case 4:                 displayFlowers(flowerPack);                 break;             case 5:                 filterFlowers(flowerPack);                 break;             case 0:                 exitInterface();                 break;             default:                 System.out.println("Invalid entry. \nPlease choose between 1-5, or 0: ");                 break;         }     } } private void addFlower(ArrayList&lt;Flower&gt; flowerPack) {     // TODO: Add a flower that is specified by the user     Flower newFlower = new Flower(name, color, smell, hasThorns);      Scanner input = new Scanner(System.in);      if(flowerPack.size() &lt; 25)     {         System.out.println("Enter the name of the flower you wish to add: ");         newFlower.setName(input.nextLine());         System.out.println("Enter the color of the flower: ");         newFlower.setColor(input.nextLine());         System.out.println("Does the flower have a scent? Yes or No: ");         newFlower.setSmell(input.nextLine());         System.out.println("Does the flower have thorns? Yes or No: ");         newFlower.setThorns(input.nextLine());          flowerPack.add(newFlower);     }     else     {         System.out.println("You may only hold 25 flowers in your flower pack. Please remove at least one before adding another.");     } } private void removeFlower(ArrayList&lt;Flower&gt; flowerPack) {     // TODO: Remove a flower that is specified by the user     Scanner input = new Scanner(System.in);      System.out.println("Enter the name of the flower you want to remove: ");     String deleteName = input.nextLine();     System.out.println("Enter the color of the flower you want to remove: ");     String deleteColor = input.nextLine();     System.out.println("Is this a flower with a scent? Yes or No: ");     String deleteSmell = input.nextLine();     System.out.println("Is this a flower with thorns? Yes or No: ");     String deleteThorns = input.nextLine();      for(int i = 0; i &lt; flowerPack.size(); i++) {         if(flowerPack.get(i).getName().equals(deleteName) &amp;&amp; flowerPack.get(i).getColor().equals(deleteColor) &amp;&amp; flowerPack.get(i).getSmell().equals(deleteSmell) &amp;&amp; flowerPack.get(i).getThorns().equals(deleteThorns))         {             flowerPack.remove(i);             found = true;             break;         }         if(found)         {             System.out.println("That flower was successfully removed from your inventory.");         }         else         {             System.out.println("That flower was not found in your inventory.");         }     } } private void searchFlowers(ArrayList&lt;Flower&gt; flowerPack) {     // TODO: Search for a user specified flower  } </code></pre>  <p>This is where I am having the problem. I haven't started the other methods (search, filter) since I want it to display correctly before moving on. </p>  <pre><code>private void displayFlowers(ArrayList&lt;Flower&gt; flowerPack) {     // TODO: Display flowers using any technique you like      for(Flower flower : flowerPack) {         int duplicates = Collections.frequency(flowerPack, flower);         System.out.println(flower + " - " + duplicates);     } }  private void filterFlowers (ArrayList&lt;Flower&gt; flowerPack) {     // TODO Filter flower results  } private void exitInterface() {     Scanner input = new Scanner(System.in);     System.out.println("Are you sure you want to exit the flower pack interface? Y or N: ");     while(true) {         String answer = input.next();         if(!"Y".equalsIgnoreCase(answer) &amp;&amp; !"N".equalsIgnoreCase(answer))         {             System.out.println("Please enter Y or N (not case-sensitive): ");         }         if("Y".equalsIgnoreCase(answer))         {             System.out.println("Thank you for using the flower pack interface. See ya later!");             System.exit(0);         }         if("N".equalsIgnoreCase(answer))         {             break;         }     } } } </code></pre>  <p>I've seen examples with Maps/HashSets, but I'm too unfamiliar with those concepts to utilize them at this point.</p>  <p>This is the output, which is incorrect. Could someone give me a hint as to where I went wrong? </p>  <pre><code>    Name: rose, Color: red, Scent? yes, Thorns? yes - 1     Name: rose, Color: red, Scent? yes, Thorns? yes - 1     Name: rose, Color: pink, Scent? yes, Thorns? no - 1     Name: daffodil, Color: yellow, Scent? yes, Thorns? no - 1 </code></pre>  <p>As you can see, the first two entries should read as one, but with -2:</p>  <p>Like:</p>  <pre><code>    Name: rose, Color: red, Scent? yes, Thorns? yes - 2 </code></pre>