<p>I'm using a <code>UITableView</code> with sections to build index table, lets say that i have an Array with 500 of string data. Now i need to index the table for an easy scroll  by 1 , 50 , 100 , 150 , 200 and so on until 500. so when i scroll to 50 i go to indexPath.row 50. </p>  <p>i really couldn't achieve it and i tried the following : </p>  <pre><code>@IBOutlet weak var mytableView: UITableView!  var tableData = [String]() var indexOfNumbers = [String]()  override func viewDidLoad() {     super.viewDidLoad()     // Do any additional setup after loading the view, typically from a nib.       tableData = [      // 500 lines of string array of different starting letter      ]      let indexNumbers = "0 50 100 150 200 250 300 350 400 450 500"     indexOfNumbers = indexNumbers.componentsSeparatedByString(" ")   }  override func didReceiveMemoryWarning() {     super.didReceiveMemoryWarning()     // Dispose of any resources that can be recreated. }    func numberOfSectionsInTableView(tableView: UITableView) -&gt; Int {     return tableData.count }   func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell {     let cell = tableView.dequeueReusableCellWithIdentifier("cell", forIndexPath: indexPath)       // Configure the cell...     cell.textLabel?.text = tableData[indexPath.section]      return cell }    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {     return 1 }   func sectionIndexTitlesForTableView(tableView: UITableView) -&gt; [String]? {      return indexOfNumbers }  func tableView(tableView: UITableView, sectionForSectionIndexTitle title: String, atIndex index: Int) -&gt; Int {     let temp = indexOfNumbers as NSArray     return temp.indexOfObject(title) } </code></pre>