<p>How can I write a far absolute JMP or CALL instruction using MASM? Specifically how do I get it to emit these instruction using the EA and CA opcodes, without manually emitting them using DB or other data directives?</p>  <p>For example consider the case of jumping to the BIOS reset entry point at FFFF:0000 in a boot sector. If I were using NASM I could code this in instruction in the obvious way:</p>  <pre><code>jmp 0xffff:0 </code></pre>  <p>With the GNU assembler the syntax is less obvious, but the following will do the job:</p>  <pre><code>jmp 0xffff, 0 </code></pre>  <p>However when I try the obvious solution with MASM:</p>  <pre><code>jmp 0ffffh:0 </code></pre>  <p>I get the following error:</p>  <pre><code>t206b.asm(3) : error A2096:segment, group, or segment register expected </code></pre>  <p>There are a number of possible workarounds I could use in MASM, like any of the following:</p>  <pre><code>    DB 0EAh, 0, 0, 0FFh, 0FFh  bios_reset DD 0ffff0000h     ...     jmp bios_reset   ; FF 2E opcode: indirect far jump      push 0ffffh     push 0     retf </code></pre>  <p>But is there anyway I can use an actual JMP instruction and have MASM generate the right opcode (EA)?</p>