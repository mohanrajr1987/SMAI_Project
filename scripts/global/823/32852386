<p>I have an application that is intended to target a wide family of Intel processors, from archaic (Pentium, Pentium II) to modern (Haswell, Skylake). It features specific code paths tailored for the various extensions to the x86 instruction set (SSE, AVX, etc.). However, I only have access to computers dating back to Sandy Bridge and can not verify that the application will actually run on the oldest architectures supported. While it is true that CPUs that old are unlikely to be useful for any purpose, it would be good from a code quality point of view to know that a function named <code>my_routine_sse2</code> does not accidentally use instructions from SSE3 or such.</p>  <p>What approaches do people usually take when facing this kind of problem? Are there automated tools that will scan functions and ensure illegal instructions are not present? Are there services (web or otherwise) that provide access to legacy computer architectures for testing and debugging?</p>