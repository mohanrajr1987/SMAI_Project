<p>Allright folks, let's hope this is an easy one: I need to access an array to achieve double-buffering (I use mode 13h) in 16-bit TASM. BUT: No matter if I use "OFFSET", "BYTE PTR [Array]", "BYTE PTR Array", or whatever I have tried already, the program reads/writes to the incorrect memory block, which is partly behind the actual start of the array.</p>  <p>Heres my (for now not really optimised and very messy) code:</p>  <pre><code>.MODEL  MEDIUM .STACK .DATA         XPos    DW      0         YPos    DB      0         Color   DB      0          BoxX1   DW      0         BoxY1   DB      0         BoxX2   DW      0         BoxY2   DB      0          VPage   DB      64010   DUP(0)  ;TODO: Size *might* be incorrect.         PageSeg DW      0 .CODE  SetVGA13 PROC         MOV     AX,     0013h   ;Screen mode 13.         INT     10h             ;Set screen mode to AX.         MOV     AX,     0A000h  ;Screen segment.         MOV     ES,     AX      ;You can't affect segment registers         RET ENDP  ;-------DrawPixel--------------- ; WORD XPos  = x ; WORD YPos  = y ; BYTE Color = colour ;------------------------------- DrawPixel PROC         XOR     AH,     AH         MOV     AL,     [YPos]         MOV     DX,     320         MUL     DX         ADD     AX,     [XPos]         MOV     DI,     AX         MOV     AL,     [Color]         MOV     ES,     [PageSeg]           ;ADD     ES,     DI         MOV     ES:[DI],AL         ;MOV     ES:[DI],AL         RET ENDP  DrawBox PROC         MOV CL, [BoxY1]         YLoop:         MOV     BL,     CL         PUSH    CX         MOV     CX,     [BoxX1]         XLoop:         MOV     [XPos], CX         MOV     [YPos], BL         MOV     [Color],CL         CALL    DrawPixel         INC     CX         CMP     CX,     [BoxX2]         JNZ     XLoop         POP     CX         INC     CL         CMP     CL,     [BoxY2]         JNZ     YLoop         RET ENDP  WaitFrame PROC         PUSH    DX         ; Port #03DA contains VGA status         MOV     DX,     03DAh         IN      AL,     DX         WaitRetrace:         ; Bit 3 will be on if we're in retrace         TEST    AL,     08h         JNZ     WaitRetrace         EndRefresh:         IN      AL,     DX         TEST    AL,     08h         JZ      EndRefresh         POP     DX         RET ENDP  RestoreVideo PROC         ; Return to text mode         MOV     AX,     03h         INT     10h         RET ENDP  ClearScreen PROC         XOR     CX,     CX         ;MOV     ES,     [PageSeg]           ClearLoop:         MOV     DI,     CX           ;MOV     ES,     [PageSeg]         MOV     BX,     OFFSET VPage         ADD     BX,     CX         MOV     AL,     [BX];VPage[DI];ES:[DI]          MOV     [Color],AL           MOV     AX,     0A000h         MOV     ES,     AX         MOV     AL,     [Color]         MOV     ES:[DI],AL          INC     CX         CMP     CX,     64000         JNZ     ClearLoop         RET ENDP  Main:         ;INITIALISE         MOV     BX,     OFFSET VPage         MOV     [PageSeg],BX           CALL    SetVGA13         ;CALL    MakePalette                 MOV     [BoxX1],33         MOV     [BoxY1],33         MOV     [BoxX2],99         MOV     [BoxY2],99          ;LOOP         GameLoop:         ;DRAW         ;CALL    DrawBox         CALL    ClearScreen         ;CALL    WaitFrame          ;INPUT         MOV     DX,     60h         IN      AL,     DX          CMP     AL,     75         JNZ     NotLeft         SUB     [BoxX1],1         SUB     [BoxX2],1         NotLeft:          IN      AL, DX         CMP     AL, 77         JNZ     NotRight         ADD     [BoxX1],1         ADD     [BoxX2],1         NotRight:           CMP     AL,     1         JNZ     GameLoop            ;END PROGRAM         Error:          ;CALL    ClearScreen         CALL    RestoreVideo         MOV     AH,     4Ch         INT     21h         END     Main </code></pre>  <p>This code shows a rainbow coloured box that you can move around with the left and right arrow keys, </p>  <pre><code>;INITIALISE         MOV     BX,     OFFSET VPage         MOV     [PageSeg],BX </code></pre>  <p>That is my sad attempt to getbthe pointer to my buffer, but doesnt return the correct one</p>  <p>Sorry that my question was not done, i realised that when i got out of bed immediately for some reason.</p>