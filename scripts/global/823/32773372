<p>the test is on <code>32-bit x86</code>. I compiled the code with <code>gcc 4.2</code>, optimization level <code>o2</code>. I compiled the C code into binary, and then use <code>objdump</code> to disassemble it.</p>  <p>Here are two sequences of instructions used for the function prologue:</p>  <pre><code>0804a6f0 &lt;quotearg_n&gt;: 804a6f0:       8b 44 24 04             mov    0x4(%esp),%eax 804a6f4:       b9 ff ff ff ff          mov    $0xffffffff,%ecx 804a6f9:       8b 54 24 08             mov    0x8(%esp),%edx 804a6fd:       c7 44 24 04 40 e1 04    movl   $0x804e140,0x4(%esp) 804a704:       08  804a705:       e9 c6 fa ff ff          jmp    804a1d0 &lt;quotearg_n_options&gt; 804a70a:       8d b6 00 00 00 00       lea    0x0(%esi),%esi   0804a730 &lt;quotearg&gt;: 804a730:       83 ec 1c                sub    $0x1c,%esp 804a733:       8b 44 24 20             mov    0x20(%esp),%eax 804a737:       c7 04 24 00 00 00 00    movl   $0x0,(%esp) 804a73e:       89 44 24 04             mov    %eax,0x4(%esp) 804a742:       e8 a9 ff ff ff          call   804a6f0 &lt;quotearg_n&gt; 804a747:       83 c4 1c                add    $0x1c,%esp 804a74a:       c3                      ret 804a74b:       90                      nop 804a74c:       8d 74 26 00             lea    0x0(%esi,%eiz,1),%esi </code></pre>  <p>Note that in function <code>quotearg</code>, register <code>esp</code> is decreased with <code>0x1c</code> before it is used to access the stack and get some arguments. Accutually according to my experience, I think the <code>sub</code> then <code>access</code> pattern is quite common for instructions compiled with <code>O2</code>.</p>  <p>However, note that in function <code>quotearg_n</code>, register <code>esp</code> is directly added with <code>0x4</code> to access the stack. (I think the meaning of instruction at address <code>0x804a6f0</code> is to put the return address of call site to register <code>eax</code>, am I right..?) According to my observation, the pattern used by the first function is rare, around 5% for <code>gcc</code> compiled middle size C program with <code>O2</code>.</p>  <p>So here is my question:</p>  <p>Why does compiler generate function prologue instructions in a way similar to <code>quoterag_n</code>? What is the exact meaning of the first three instructions start from address <code>0x804a6f0</code>? </p>  <p>Why doesn't compiler always generate function prologue instructions following the <code>sub</code> then <code>access</code> pattern? (such as <code>quoterag</code>)</p>  <p>Am I clear? thanks a lot</p>