<p>I've looked up Wikipedia for x86 backward compatibility in x86-x64 and it says:</p>  <blockquote>   <p>x86-64 is fully backwards compatible with 16-bit and 32-bit x86   code.Because the full x86 16-bit and 32-bit instruction sets remain   implemented in hardware without any intervening emulation, existing   x86 executables run with no compatibility or performance   penalties,whereas existing applications that are recoded to take   advantage of new features of the processor design may achieve   performance improvements.</p> </blockquote>  <p>So I've tested some instructions to see that some are actually yield entirely different opcodes (rather than just applying prefix) such as: INC/DEC. Looking at (x86):</p>  <blockquote>   <p>\x40 inc    eax<br>   \x48 dec    eax</p> </blockquote>  <p>And while assembling the same in x86-x64 yields:</p>  <blockquote>   <p>\xff \xc0    inc    eax</p>      <p>\xff \xc8    dec    eax</p> </blockquote>  <p>I'm trying to figure out the reason and more examples of other instructions that has the same symptoms that yield different opcodes. I am familiar with that push, pop, call, ret, enter and leave are not available 32 bit in x86-x64.</p>