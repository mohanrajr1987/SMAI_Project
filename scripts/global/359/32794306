<p>I would like users of my application to be able to create Roles dynamically and assign permissions to this roles. Therefor Roles model is not going to be hardcoded. Though, Permissions, as far as I understand do have to be hard-coded (because I'm going to hardcode theirs checks in application logic)</p>  <p>The best way I see is to keep Roles in database and create them on the fly and assign \ un-assign permissions. And Permissions should be kept in an array (or hash, or associative array) and should be changed only by developer and require server restart.</p>  <p>Everything seems to be fine, but I would like to read about some best practices of permission based authorization (I can find a lot about Rolebased authorization, not Permission based) and about any possible disadvantages.</p>  <p>Also, I can't yet find the best way to manage "levels" of permissions. For example, I have permissions called: "Act As Admin", "Manage Users", "Create/Read/Update/Delete User"</p>  <p>I would like to let Role with permission of "Act As Admin" to do everything (manager users, CRUD users etc). Role with permission of "Manage Users" - automatically can CRUD users. This approach is better because it won't require one to check a lot of "OR" conditions (can act as adminm, or can manage users, or can CRUD user...)</p>  <p>But how should I keep Permissions hash (array etc) in memory for this purposes?</p>  <p>I suppose, this question is language / framework / etc agnostic so I won't add such tags</p>