<p>In the security system of Windows, a user can belong to many groups, and a group can contain other groups.  What are the 'rules' for how conflicting permissions get resolved in Windows?</p>  <p>For instance, say a user is in Group A and also in Group B.  Group A has 'Deny Read' on a file while 'Group B' has 'Allow Read'.  Can the user read the file?</p>  <p>What if the user itself has been denied the rights to read something, but it's in a group where that permission was explicitly allowed?</p>  <p>While I know how to get the permissions for a particular FileSystem resource via the AccessRules and the rights they expose, since the rules target a specific IdentityReference which could be a user or a group, I have seen conflicts and am trying to determine the logic to figure out 'who wins'.</p>  <p>...or is there a known way to say 'Get me all rights for this user, also taking into consideration any memberships' and let the system worry about it? (I'm surprised I haven't found exactly that already.  What I'm doing seems like an awful lot of work.)</p>  <pre><code>var Identity = WindowsIdentity.GetCurrent(); var fileInfo = new FileInfo(@"C:\Code\Path\To\Some\File.txt");  // Get all identity references for this user (user's and it's groups) var identityReferences = new HashSet&lt;IdentityReference&gt;(); identityReferences.Add(Identity.User); foreach(var group in Identity.Groups)     identityReferences.Add(group);  // Get all rules for this user on this specific FileInfo var fileSystemAccessRules = fileInfo.GetAccessControl()     .GetAccessRules(true, true, typeof(SecurityIdentifier))     .OfType&lt;FileSystemAccessRule&gt;()     .Where(rule =&gt; identityReferences.Contains(rule.IdentityReference));  FileSystemRights allowedUserRightsMask = 0; FileSystemRights deniedUserRightsMask  = 0;  // Get mask of all granted, and all denied rules foreach(var fileSystemAccessRule in fileSystemAccessRules) {     var ruleRights = fileSystemAccessRule.FileSystemRights;      var relevantUserRightsMask = (fileSystemAccessRule.AccessControlType == AccessControlType.Allow)         ? allowedUserRightsMask         : deniedUserRightsMask;      relevantUserRightsMask |= ruleRights; }  // Do something with the final user rights mask here. </code></pre>