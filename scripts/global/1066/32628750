<p>Its likely that my thinking around dependency management could be a little off and its the structure that needs reviewing and not the technology side of things so let me know your thoughts.</p>  <p>I have a project with the structure</p>  <ul> <li>Parent  <ul> <li>Alpha [Child project used by Beta &amp; Gamma]</li> <li>Beta</li> <li>Gamma</li> </ul></li> </ul>  <p>I'm thinking about a development cycle where locally these projects live as part of the same area. This will allow the developers to change Alpha and use it in Beta/Gamma without having to install it to their local repository. The problem is when we move this to a CI process (Jenkins) </p>  <p>The pipeline I've imagined is</p>  <p>1) - Alpha build &amp; test (if successful - deploy to Nexus/Artifactory) 2) - Kick off build &amp; test for Beta 3) - Kick off build &amp; test for Gamma</p>  <p>The problem is that phase 1 could run on a different Jenkins slave than 2/3. So my thinking is to deploy the build artifact to a repository before kicking off step 2/3. The problem is how this is managed in gradle.</p>  <p>Example gradle build script for Beta/Gamma build:</p>  <pre><code>... dependencies {     compile project (':Alpha')     compile ...3rd party jars...      testCompile ... } ... </code></pre>  <p>on the Jenkins nodes you would need:</p>  <pre><code>... dependencies {     compile(':Alpha:1.X.X')     compile ...3rd party jars...      testCompile ... } ... </code></pre>  <p>So my questions are:</p>  <ul> <li>What is the standard/best way to achieve the differences in project/compile dependencies?</li> <li>Does this indicate an issue with the CI design?</li> </ul>  <p>Any thoughts welcome!  Thanks in advance</p>